/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 20008.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 1.0], [41.8, 1.0], [41.9, 1.0], [42.0, 1.0], [42.1, 1.0], [42.2, 1.0], [42.3, 1.0], [42.4, 1.0], [42.5, 1.0], [42.6, 1.0], [42.7, 1.0], [42.8, 1.0], [42.9, 1.0], [43.0, 1.0], [43.1, 1.0], [43.2, 1.0], [43.3, 1.0], [43.4, 1.0], [43.5, 1.0], [43.6, 1.0], [43.7, 1.0], [43.8, 1.0], [43.9, 1.0], [44.0, 1.0], [44.1, 1.0], [44.2, 1.0], [44.3, 1.0], [44.4, 1.0], [44.5, 1.0], [44.6, 1.0], [44.7, 1.0], [44.8, 1.0], [44.9, 1.0], [45.0, 1.0], [45.1, 1.0], [45.2, 1.0], [45.3, 1.0], [45.4, 1.0], [45.5, 1.0], [45.6, 1.0], [45.7, 1.0], [45.8, 1.0], [45.9, 1.0], [46.0, 1.0], [46.1, 1.0], [46.2, 1.0], [46.3, 1.0], [46.4, 1.0], [46.5, 1.0], [46.6, 1.0], [46.7, 1.0], [46.8, 1.0], [46.9, 1.0], [47.0, 1.0], [47.1, 1.0], [47.2, 1.0], [47.3, 1.0], [47.4, 1.0], [47.5, 1.0], [47.6, 1.0], [47.7, 1.0], [47.8, 1.0], [47.9, 1.0], [48.0, 1.0], [48.1, 1.0], [48.2, 1.0], [48.3, 1.0], [48.4, 1.0], [48.5, 1.0], [48.6, 1.0], [48.7, 1.0], [48.8, 1.0], [48.9, 1.0], [49.0, 1.0], [49.1, 1.0], [49.2, 1.0], [49.3, 1.0], [49.4, 1.0], [49.5, 1.0], [49.6, 1.0], [49.7, 1.0], [49.8, 1.0], [49.9, 1.0], [50.0, 1.0], [50.1, 1.0], [50.2, 1.0], [50.3, 1.0], [50.4, 1.0], [50.5, 1.0], [50.6, 1.0], [50.7, 1.0], [50.8, 1.0], [50.9, 1.0], [51.0, 1.0], [51.1, 1.0], [51.2, 1.0], [51.3, 1.0], [51.4, 1.0], [51.5, 1.0], [51.6, 1.0], [51.7, 1.0], [51.8, 1.0], [51.9, 1.0], [52.0, 1.0], [52.1, 1.0], [52.2, 1.0], [52.3, 1.0], [52.4, 1.0], [52.5, 1.0], [52.6, 1.0], [52.7, 1.0], [52.8, 1.0], [52.9, 1.0], [53.0, 1.0], [53.1, 1.0], [53.2, 1.0], [53.3, 1.0], [53.4, 1.0], [53.5, 1.0], [53.6, 1.0], [53.7, 1.0], [53.8, 1.0], [53.9, 1.0], [54.0, 1.0], [54.1, 1.0], [54.2, 1.0], [54.3, 1.0], [54.4, 1.0], [54.5, 1.0], [54.6, 1.0], [54.7, 1.0], [54.8, 1.0], [54.9, 1.0], [55.0, 1.0], [55.1, 1.0], [55.2, 1.0], [55.3, 1.0], [55.4, 1.0], [55.5, 1.0], [55.6, 1.0], [55.7, 1.0], [55.8, 1.0], [55.9, 1.0], [56.0, 1.0], [56.1, 1.0], [56.2, 1.0], [56.3, 1.0], [56.4, 1.0], [56.5, 1.0], [56.6, 1.0], [56.7, 1.0], [56.8, 1.0], [56.9, 1.0], [57.0, 1.0], [57.1, 1.0], [57.2, 1.0], [57.3, 1.0], [57.4, 1.0], [57.5, 1.0], [57.6, 1.0], [57.7, 1.0], [57.8, 1.0], [57.9, 1.0], [58.0, 1.0], [58.1, 1.0], [58.2, 1.0], [58.3, 1.0], [58.4, 1.0], [58.5, 1.0], [58.6, 1.0], [58.7, 1.0], [58.8, 1.0], [58.9, 1.0], [59.0, 1.0], [59.1, 1.0], [59.2, 1.0], [59.3, 1.0], [59.4, 1.0], [59.5, 1.0], [59.6, 1.0], [59.7, 1.0], [59.8, 1.0], [59.9, 1.0], [60.0, 1.0], [60.1, 1.0], [60.2, 1.0], [60.3, 1.0], [60.4, 1.0], [60.5, 1.0], [60.6, 1.0], [60.7, 1.0], [60.8, 1.0], [60.9, 1.0], [61.0, 1.0], [61.1, 1.0], [61.2, 1.0], [61.3, 1.0], [61.4, 1.0], [61.5, 1.0], [61.6, 1.0], [61.7, 1.0], [61.8, 1.0], [61.9, 1.0], [62.0, 1.0], [62.1, 1.0], [62.2, 1.0], [62.3, 1.0], [62.4, 1.0], [62.5, 1.0], [62.6, 1.0], [62.7, 1.0], [62.8, 1.0], [62.9, 1.0], [63.0, 1.0], [63.1, 1.0], [63.2, 2.0], [63.3, 2.0], [63.4, 2.0], [63.5, 2.0], [63.6, 2.0], [63.7, 2.0], [63.8, 2.0], [63.9, 2.0], [64.0, 2.0], [64.1, 2.0], [64.2, 2.0], [64.3, 2.0], [64.4, 2.0], [64.5, 2.0], [64.6, 2.0], [64.7, 2.0], [64.8, 2.0], [64.9, 2.0], [65.0, 2.0], [65.1, 2.0], [65.2, 2.0], [65.3, 2.0], [65.4, 2.0], [65.5, 2.0], [65.6, 2.0], [65.7, 2.0], [65.8, 2.0], [65.9, 2.0], [66.0, 2.0], [66.1, 2.0], [66.2, 2.0], [66.3, 2.0], [66.4, 2.0], [66.5, 2.0], [66.6, 2.0], [66.7, 2.0], [66.8, 2.0], [66.9, 2.0], [67.0, 2.0], [67.1, 2.0], [67.2, 2.0], [67.3, 2.0], [67.4, 2.0], [67.5, 2.0], [67.6, 2.0], [67.7, 2.0], [67.8, 3.0], [67.9, 3.0], [68.0, 3.0], [68.1, 3.0], [68.2, 4.0], [68.3, 4.0], [68.4, 4.0], [68.5, 4.0], [68.6, 5.0], [68.7, 5.0], [68.8, 6.0], [68.9, 6.0], [69.0, 7.0], [69.1, 9.0], [69.2, 13.0], [69.3, 21.0], [69.4, 30.0], [69.5, 38.0], [69.6, 41.0], [69.7, 43.0], [69.8, 44.0], [69.9, 46.0], [70.0, 47.0], [70.1, 48.0], [70.2, 49.0], [70.3, 51.0], [70.4, 52.0], [70.5, 53.0], [70.6, 55.0], [70.7, 56.0], [70.8, 58.0], [70.9, 60.0], [71.0, 62.0], [71.1, 63.0], [71.2, 65.0], [71.3, 68.0], [71.4, 70.0], [71.5, 73.0], [71.6, 76.0], [71.7, 80.0], [71.8, 88.0], [71.9, 95.0], [72.0, 103.0], [72.1, 116.0], [72.2, 132.0], [72.3, 143.0], [72.4, 186.0], [72.5, 294.0], [72.6, 351.0], [72.7, 411.0], [72.8, 450.0], [72.9, 518.0], [73.0, 562.0], [73.1, 618.0], [73.2, 651.0], [73.3, 682.0], [73.4, 707.0], [73.5, 735.0], [73.6, 754.0], [73.7, 785.0], [73.8, 818.0], [73.9, 841.0], [74.0, 883.0], [74.1, 916.0], [74.2, 945.0], [74.3, 960.0], [74.4, 973.0], [74.5, 998.0], [74.6, 1019.0], [74.7, 1037.0], [74.8, 1061.0], [74.9, 1081.0], [75.0, 1115.0], [75.1, 1154.0], [75.2, 1174.0], [75.3, 1212.0], [75.4, 1248.0], [75.5, 1284.0], [75.6, 1309.0], [75.7, 1332.0], [75.8, 1372.0], [75.9, 1407.0], [76.0, 1439.0], [76.1, 1474.0], [76.2, 1506.0], [76.3, 1537.0], [76.4, 1558.0], [76.5, 1578.0], [76.6, 1609.0], [76.7, 1629.0], [76.8, 1662.0], [76.9, 1685.0], [77.0, 1701.0], [77.1, 1738.0], [77.2, 1765.0], [77.3, 1787.0], [77.4, 1809.0], [77.5, 1837.0], [77.6, 1870.0], [77.7, 1888.0], [77.8, 1907.0], [77.9, 1933.0], [78.0, 1951.0], [78.1, 1963.0], [78.2, 1982.0], [78.3, 2000.0], [78.4, 2031.0], [78.5, 2059.0], [78.6, 2074.0], [78.7, 2087.0], [78.8, 2108.0], [78.9, 2124.0], [79.0, 2139.0], [79.1, 2153.0], [79.2, 2172.0], [79.3, 2186.0], [79.4, 2203.0], [79.5, 2218.0], [79.6, 2231.0], [79.7, 2259.0], [79.8, 2273.0], [79.9, 2290.0], [80.0, 2307.0], [80.1, 2323.0], [80.2, 2336.0], [80.3, 2356.0], [80.4, 2375.0], [80.5, 2393.0], [80.6, 2410.0], [80.7, 2423.0], [80.8, 2439.0], [80.9, 2454.0], [81.0, 2474.0], [81.1, 2489.0], [81.2, 2507.0], [81.3, 2525.0], [81.4, 2546.0], [81.5, 2558.0], [81.6, 2574.0], [81.7, 2586.0], [81.8, 2608.0], [81.9, 2619.0], [82.0, 2634.0], [82.1, 2650.0], [82.2, 2663.0], [82.3, 2680.0], [82.4, 2694.0], [82.5, 2708.0], [82.6, 2721.0], [82.7, 2735.0], [82.8, 2751.0], [82.9, 2764.0], [83.0, 2776.0], [83.1, 2793.0], [83.2, 2806.0], [83.3, 2822.0], [83.4, 2835.0], [83.5, 2851.0], [83.6, 2859.0], [83.7, 2868.0], [83.8, 2883.0], [83.9, 2894.0], [84.0, 2903.0], [84.1, 2915.0], [84.2, 2921.0], [84.3, 2930.0], [84.4, 2941.0], [84.5, 2957.0], [84.6, 2965.0], [84.7, 2977.0], [84.8, 2986.0], [84.9, 2996.0], [85.0, 3005.0], [85.1, 3014.0], [85.2, 3022.0], [85.3, 3033.0], [85.4, 3039.0], [85.5, 3047.0], [85.6, 3056.0], [85.7, 3068.0], [85.8, 3072.0], [85.9, 3081.0], [86.0, 3088.0], [86.1, 3097.0], [86.2, 3104.0], [86.3, 3109.0], [86.4, 3118.0], [86.5, 3126.0], [86.6, 3130.0], [86.7, 3135.0], [86.8, 3142.0], [86.9, 3149.0], [87.0, 3157.0], [87.1, 3169.0], [87.2, 3175.0], [87.3, 3181.0], [87.4, 3188.0], [87.5, 3194.0], [87.6, 3202.0], [87.7, 3212.0], [87.8, 3219.0], [87.9, 3226.0], [88.0, 3234.0], [88.1, 3242.0], [88.2, 3247.0], [88.3, 3255.0], [88.4, 3267.0], [88.5, 3272.0], [88.6, 3278.0], [88.7, 3287.0], [88.8, 3294.0], [88.9, 3300.0], [89.0, 3306.0], [89.1, 3313.0], [89.2, 3320.0], [89.3, 3325.0], [89.4, 3332.0], [89.5, 3337.0], [89.6, 3343.0], [89.7, 3352.0], [89.8, 3360.0], [89.9, 3365.0], [90.0, 3372.0], [90.1, 3380.0], [90.2, 3389.0], [90.3, 3394.0], [90.4, 3401.0], [90.5, 3405.0], [90.6, 3412.0], [90.7, 3417.0], [90.8, 3422.0], [90.9, 3428.0], [91.0, 3433.0], [91.1, 3442.0], [91.2, 3447.0], [91.3, 3452.0], [91.4, 3458.0], [91.5, 3464.0], [91.6, 3470.0], [91.7, 3475.0], [91.8, 3483.0], [91.9, 3491.0], [92.0, 3498.0], [92.1, 3503.0], [92.2, 3510.0], [92.3, 3514.0], [92.4, 3522.0], [92.5, 3527.0], [92.6, 3532.0], [92.7, 3539.0], [92.8, 3544.0], [92.9, 3551.0], [93.0, 3556.0], [93.1, 3563.0], [93.2, 3571.0], [93.3, 3576.0], [93.4, 3583.0], [93.5, 3590.0], [93.6, 3598.0], [93.7, 3603.0], [93.8, 3609.0], [93.9, 3616.0], [94.0, 3623.0], [94.1, 3628.0], [94.2, 3635.0], [94.3, 3643.0], [94.4, 3651.0], [94.5, 3661.0], [94.6, 3669.0], [94.7, 3677.0], [94.8, 3685.0], [94.9, 3692.0], [95.0, 3699.0], [95.1, 3705.0], [95.2, 3713.0], [95.3, 3719.0], [95.4, 3727.0], [95.5, 3737.0], [95.6, 3747.0], [95.7, 3759.0], [95.8, 3768.0], [95.9, 3777.0], [96.0, 3783.0], [96.1, 3793.0], [96.2, 3800.0], [96.3, 3810.0], [96.4, 3820.0], [96.5, 3831.0], [96.6, 3842.0], [96.7, 3857.0], [96.8, 3866.0], [96.9, 3875.0], [97.0, 3892.0], [97.1, 3910.0], [97.2, 3925.0], [97.3, 3940.0], [97.4, 3954.0], [97.5, 3968.0], [97.6, 3982.0], [97.7, 4002.0], [97.8, 4028.0], [97.9, 4053.0], [98.0, 4071.0], [98.1, 4096.0], [98.2, 4116.0], [98.3, 4140.0], [98.4, 4172.0], [98.5, 4207.0], [98.6, 4257.0], [98.7, 4313.0], [98.8, 4352.0], [98.9, 4416.0], [99.0, 4473.0], [99.1, 4594.0], [99.2, 4694.0], [99.3, 4784.0], [99.4, 4896.0], [99.5, 5087.0], [99.6, 5245.0], [99.7, 5458.0], [99.8, 5721.0], [99.9, 20005.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 167.0], [0.1, 167.0], [0.2, 167.0], [0.3, 167.0], [0.4, 167.0], [0.5, 167.0], [0.6, 171.0], [0.7, 171.0], [0.8, 171.0], [0.9, 171.0], [1.0, 171.0], [1.1, 172.0], [1.2, 172.0], [1.3, 172.0], [1.4, 172.0], [1.5, 172.0], [1.6, 172.0], [1.7, 172.0], [1.8, 172.0], [1.9, 172.0], [2.0, 172.0], [2.1, 172.0], [2.2, 173.0], [2.3, 173.0], [2.4, 173.0], [2.5, 173.0], [2.6, 173.0], [2.7, 175.0], [2.8, 175.0], [2.9, 175.0], [3.0, 175.0], [3.1, 175.0], [3.2, 179.0], [3.3, 179.0], [3.4, 179.0], [3.5, 179.0], [3.6, 179.0], [3.7, 179.0], [3.8, 179.0], [3.9, 179.0], [4.0, 179.0], [4.1, 179.0], [4.2, 179.0], [4.3, 181.0], [4.4, 181.0], [4.5, 181.0], [4.6, 181.0], [4.7, 181.0], [4.8, 181.0], [4.9, 181.0], [5.0, 181.0], [5.1, 181.0], [5.2, 181.0], [5.3, 184.0], [5.4, 184.0], [5.5, 184.0], [5.6, 184.0], [5.7, 184.0], [5.8, 185.0], [5.9, 185.0], [6.0, 185.0], [6.1, 185.0], [6.2, 185.0], [6.3, 185.0], [6.4, 186.0], [6.5, 186.0], [6.6, 186.0], [6.7, 186.0], [6.8, 186.0], [6.9, 186.0], [7.0, 186.0], [7.1, 186.0], [7.2, 186.0], [7.3, 186.0], [7.4, 189.0], [7.5, 189.0], [7.6, 189.0], [7.7, 189.0], [7.8, 189.0], [7.9, 190.0], [8.0, 190.0], [8.1, 190.0], [8.2, 190.0], [8.3, 190.0], [8.4, 190.0], [8.5, 191.0], [8.6, 191.0], [8.7, 191.0], [8.8, 191.0], [8.9, 191.0], [9.0, 192.0], [9.1, 192.0], [9.2, 192.0], [9.3, 192.0], [9.4, 192.0], [9.5, 193.0], [9.6, 193.0], [9.7, 193.0], [9.8, 193.0], [9.9, 193.0], [10.0, 193.0], [10.1, 194.0], [10.2, 194.0], [10.3, 194.0], [10.4, 194.0], [10.5, 194.0], [10.6, 194.0], [10.7, 194.0], [10.8, 194.0], [10.9, 194.0], [11.0, 194.0], [11.1, 194.0], [11.2, 194.0], [11.3, 194.0], [11.4, 194.0], [11.5, 194.0], [11.6, 196.0], [11.7, 196.0], [11.8, 196.0], [11.9, 196.0], [12.0, 196.0], [12.1, 196.0], [12.2, 198.0], [12.3, 198.0], [12.4, 198.0], [12.5, 198.0], [12.6, 198.0], [12.7, 198.0], [12.8, 198.0], [12.9, 198.0], [13.0, 198.0], [13.1, 198.0], [13.2, 199.0], [13.3, 199.0], [13.4, 199.0], [13.5, 199.0], [13.6, 199.0], [13.7, 199.0], [13.8, 199.0], [13.9, 199.0], [14.0, 199.0], [14.1, 199.0], [14.2, 199.0], [14.3, 201.0], [14.4, 201.0], [14.5, 201.0], [14.6, 201.0], [14.7, 201.0], [14.8, 202.0], [14.9, 202.0], [15.0, 202.0], [15.1, 202.0], [15.2, 202.0], [15.3, 207.0], [15.4, 207.0], [15.5, 207.0], [15.6, 207.0], [15.7, 207.0], [15.8, 207.0], [15.9, 207.0], [16.0, 207.0], [16.1, 207.0], [16.2, 207.0], [16.3, 207.0], [16.4, 209.0], [16.5, 209.0], [16.6, 209.0], [16.7, 209.0], [16.8, 209.0], [16.9, 212.0], [17.0, 212.0], [17.1, 212.0], [17.2, 212.0], [17.3, 212.0], [17.4, 221.0], [17.5, 221.0], [17.6, 221.0], [17.7, 221.0], [17.8, 221.0], [17.9, 223.0], [18.0, 223.0], [18.1, 223.0], [18.2, 223.0], [18.3, 223.0], [18.4, 223.0], [18.5, 223.0], [18.6, 223.0], [18.7, 223.0], [18.8, 223.0], [18.9, 223.0], [19.0, 230.0], [19.1, 230.0], [19.2, 230.0], [19.3, 230.0], [19.4, 230.0], [19.5, 233.0], [19.6, 233.0], [19.7, 233.0], [19.8, 233.0], [19.9, 233.0], [20.0, 233.0], [20.1, 236.0], [20.2, 236.0], [20.3, 236.0], [20.4, 236.0], [20.5, 236.0], [20.6, 237.0], [20.7, 237.0], [20.8, 237.0], [20.9, 237.0], [21.0, 237.0], [21.1, 237.0], [21.2, 237.0], [21.3, 237.0], [21.4, 237.0], [21.5, 237.0], [21.6, 243.0], [21.7, 243.0], [21.8, 243.0], [21.9, 243.0], [22.0, 243.0], [22.1, 243.0], [22.2, 245.0], [22.3, 245.0], [22.4, 245.0], [22.5, 245.0], [22.6, 245.0], [22.7, 255.0], [22.8, 255.0], [22.9, 255.0], [23.0, 255.0], [23.1, 255.0], [23.2, 257.0], [23.3, 257.0], [23.4, 257.0], [23.5, 257.0], [23.6, 257.0], [23.7, 260.0], [23.8, 260.0], [23.9, 260.0], [24.0, 260.0], [24.1, 260.0], [24.2, 260.0], [24.3, 262.0], [24.4, 262.0], [24.5, 262.0], [24.6, 262.0], [24.7, 262.0], [24.8, 287.0], [24.9, 287.0], [25.0, 287.0], [25.1, 287.0], [25.2, 287.0], [25.3, 287.0], [25.4, 287.0], [25.5, 287.0], [25.6, 287.0], [25.7, 287.0], [25.8, 288.0], [25.9, 288.0], [26.0, 288.0], [26.1, 288.0], [26.2, 288.0], [26.3, 288.0], [26.4, 289.0], [26.5, 289.0], [26.6, 289.0], [26.7, 289.0], [26.8, 289.0], [26.9, 291.0], [27.0, 291.0], [27.1, 291.0], [27.2, 291.0], [27.3, 291.0], [27.4, 293.0], [27.5, 293.0], [27.6, 293.0], [27.7, 293.0], [27.8, 293.0], [27.9, 296.0], [28.0, 296.0], [28.1, 296.0], [28.2, 296.0], [28.3, 296.0], [28.4, 296.0], [28.5, 304.0], [28.6, 304.0], [28.7, 304.0], [28.8, 304.0], [28.9, 304.0], [29.0, 304.0], [29.1, 304.0], [29.2, 304.0], [29.3, 304.0], [29.4, 304.0], [29.5, 305.0], [29.6, 305.0], [29.7, 305.0], [29.8, 305.0], [29.9, 305.0], [30.0, 305.0], [30.1, 309.0], [30.2, 309.0], [30.3, 309.0], [30.4, 309.0], [30.5, 309.0], [30.6, 314.0], [30.7, 314.0], [30.8, 314.0], [30.9, 314.0], [31.0, 314.0], [31.1, 315.0], [31.2, 315.0], [31.3, 315.0], [31.4, 315.0], [31.5, 315.0], [31.6, 318.0], [31.7, 318.0], [31.8, 318.0], [31.9, 318.0], [32.0, 318.0], [32.1, 318.0], [32.2, 322.0], [32.3, 322.0], [32.4, 322.0], [32.5, 322.0], [32.6, 322.0], [32.7, 324.0], [32.8, 324.0], [32.9, 324.0], [33.0, 324.0], [33.1, 324.0], [33.2, 327.0], [33.3, 327.0], [33.4, 327.0], [33.5, 327.0], [33.6, 327.0], [33.7, 327.0], [33.8, 327.0], [33.9, 327.0], [34.0, 327.0], [34.1, 327.0], [34.2, 327.0], [34.3, 338.0], [34.4, 338.0], [34.5, 338.0], [34.6, 338.0], [34.7, 338.0], [34.8, 338.0], [34.9, 338.0], [35.0, 338.0], [35.1, 338.0], [35.2, 338.0], [35.3, 343.0], [35.4, 343.0], [35.5, 343.0], [35.6, 343.0], [35.7, 343.0], [35.8, 347.0], [35.9, 347.0], [36.0, 347.0], [36.1, 347.0], [36.2, 347.0], [36.3, 347.0], [36.4, 351.0], [36.5, 351.0], [36.6, 351.0], [36.7, 351.0], [36.8, 351.0], [36.9, 354.0], [37.0, 354.0], [37.1, 354.0], [37.2, 354.0], [37.3, 354.0], [37.4, 356.0], [37.5, 356.0], [37.6, 356.0], [37.7, 356.0], [37.8, 356.0], [37.9, 356.0], [38.0, 356.0], [38.1, 356.0], [38.2, 356.0], [38.3, 356.0], [38.4, 356.0], [38.5, 356.0], [38.6, 356.0], [38.7, 356.0], [38.8, 356.0], [38.9, 356.0], [39.0, 359.0], [39.1, 359.0], [39.2, 359.0], [39.3, 359.0], [39.4, 359.0], [39.5, 360.0], [39.6, 360.0], [39.7, 360.0], [39.8, 360.0], [39.9, 360.0], [40.0, 360.0], [40.1, 377.0], [40.2, 377.0], [40.3, 377.0], [40.4, 377.0], [40.5, 377.0], [40.6, 393.0], [40.7, 393.0], [40.8, 393.0], [40.9, 393.0], [41.0, 393.0], [41.1, 397.0], [41.2, 397.0], [41.3, 397.0], [41.4, 397.0], [41.5, 397.0], [41.6, 398.0], [41.7, 398.0], [41.8, 398.0], [41.9, 398.0], [42.0, 398.0], [42.1, 398.0], [42.2, 409.0], [42.3, 409.0], [42.4, 409.0], [42.5, 409.0], [42.6, 409.0], [42.7, 414.0], [42.8, 414.0], [42.9, 414.0], [43.0, 414.0], [43.1, 414.0], [43.2, 415.0], [43.3, 415.0], [43.4, 415.0], [43.5, 415.0], [43.6, 415.0], [43.7, 415.0], [43.8, 415.0], [43.9, 415.0], [44.0, 415.0], [44.1, 415.0], [44.2, 415.0], [44.3, 426.0], [44.4, 426.0], [44.5, 426.0], [44.6, 426.0], [44.7, 426.0], [44.8, 463.0], [44.9, 463.0], [45.0, 463.0], [45.1, 463.0], [45.2, 463.0], [45.3, 469.0], [45.4, 469.0], [45.5, 469.0], [45.6, 469.0], [45.7, 469.0], [45.8, 487.0], [45.9, 487.0], [46.0, 487.0], [46.1, 487.0], [46.2, 487.0], [46.3, 487.0], [46.4, 487.0], [46.5, 487.0], [46.6, 487.0], [46.7, 487.0], [46.8, 487.0], [46.9, 501.0], [47.0, 501.0], [47.1, 501.0], [47.2, 501.0], [47.3, 501.0], [47.4, 504.0], [47.5, 504.0], [47.6, 504.0], [47.7, 504.0], [47.8, 504.0], [47.9, 511.0], [48.0, 511.0], [48.1, 511.0], [48.2, 511.0], [48.3, 511.0], [48.4, 511.0], [48.5, 516.0], [48.6, 516.0], [48.7, 516.0], [48.8, 516.0], [48.9, 516.0], [49.0, 554.0], [49.1, 554.0], [49.2, 554.0], [49.3, 554.0], [49.4, 554.0], [49.5, 569.0], [49.6, 569.0], [49.7, 569.0], [49.8, 569.0], [49.9, 569.0], [50.0, 569.0], [50.1, 590.0], [50.2, 590.0], [50.3, 590.0], [50.4, 590.0], [50.5, 590.0], [50.6, 594.0], [50.7, 594.0], [50.8, 594.0], [50.9, 594.0], [51.0, 594.0], [51.1, 618.0], [51.2, 618.0], [51.3, 618.0], [51.4, 618.0], [51.5, 618.0], [51.6, 619.0], [51.7, 619.0], [51.8, 619.0], [51.9, 619.0], [52.0, 619.0], [52.1, 619.0], [52.2, 633.0], [52.3, 633.0], [52.4, 633.0], [52.5, 633.0], [52.6, 633.0], [52.7, 659.0], [52.8, 659.0], [52.9, 659.0], [53.0, 659.0], [53.1, 659.0], [53.2, 661.0], [53.3, 661.0], [53.4, 661.0], [53.5, 661.0], [53.6, 661.0], [53.7, 692.0], [53.8, 692.0], [53.9, 692.0], [54.0, 692.0], [54.1, 692.0], [54.2, 692.0], [54.3, 707.0], [54.4, 707.0], [54.5, 707.0], [54.6, 707.0], [54.7, 707.0], [54.8, 709.0], [54.9, 709.0], [55.0, 709.0], [55.1, 709.0], [55.2, 709.0], [55.3, 711.0], [55.4, 711.0], [55.5, 711.0], [55.6, 711.0], [55.7, 711.0], [55.8, 711.0], [55.9, 711.0], [56.0, 711.0], [56.1, 711.0], [56.2, 711.0], [56.3, 711.0], [56.4, 749.0], [56.5, 749.0], [56.6, 749.0], [56.7, 749.0], [56.8, 749.0], [56.9, 759.0], [57.0, 759.0], [57.1, 759.0], [57.2, 759.0], [57.3, 759.0], [57.4, 765.0], [57.5, 765.0], [57.6, 765.0], [57.7, 765.0], [57.8, 765.0], [57.9, 797.0], [58.0, 797.0], [58.1, 797.0], [58.2, 797.0], [58.3, 797.0], [58.4, 797.0], [58.5, 837.0], [58.6, 837.0], [58.7, 837.0], [58.8, 837.0], [58.9, 837.0], [59.0, 856.0], [59.1, 856.0], [59.2, 856.0], [59.3, 856.0], [59.4, 856.0], [59.5, 859.0], [59.6, 859.0], [59.7, 859.0], [59.8, 859.0], [59.9, 859.0], [60.0, 859.0], [60.1, 870.0], [60.2, 870.0], [60.3, 870.0], [60.4, 870.0], [60.5, 870.0], [60.6, 872.0], [60.7, 872.0], [60.8, 872.0], [60.9, 872.0], [61.0, 872.0], [61.1, 886.0], [61.2, 886.0], [61.3, 886.0], [61.4, 886.0], [61.5, 886.0], [61.6, 897.0], [61.7, 897.0], [61.8, 897.0], [61.9, 897.0], [62.0, 897.0], [62.1, 897.0], [62.2, 932.0], [62.3, 932.0], [62.4, 932.0], [62.5, 932.0], [62.6, 932.0], [62.7, 990.0], [62.8, 990.0], [62.9, 990.0], [63.0, 990.0], [63.1, 990.0], [63.2, 1006.0], [63.3, 1006.0], [63.4, 1006.0], [63.5, 1006.0], [63.6, 1006.0], [63.7, 1011.0], [63.8, 1011.0], [63.9, 1011.0], [64.0, 1011.0], [64.1, 1011.0], [64.2, 1011.0], [64.3, 1017.0], [64.4, 1017.0], [64.5, 1017.0], [64.6, 1017.0], [64.7, 1017.0], [64.8, 1051.0], [64.9, 1051.0], [65.0, 1051.0], [65.1, 1051.0], [65.2, 1051.0], [65.3, 1073.0], [65.4, 1073.0], [65.5, 1073.0], [65.6, 1073.0], [65.7, 1073.0], [65.8, 1115.0], [65.9, 1115.0], [66.0, 1115.0], [66.1, 1115.0], [66.2, 1115.0], [66.3, 1115.0], [66.4, 1136.0], [66.5, 1136.0], [66.6, 1136.0], [66.7, 1136.0], [66.8, 1136.0], [66.9, 1163.0], [67.0, 1163.0], [67.1, 1163.0], [67.2, 1163.0], [67.3, 1163.0], [67.4, 1203.0], [67.5, 1203.0], [67.6, 1203.0], [67.7, 1203.0], [67.8, 1203.0], [67.9, 1205.0], [68.0, 1205.0], [68.1, 1205.0], [68.2, 1205.0], [68.3, 1205.0], [68.4, 1205.0], [68.5, 1215.0], [68.6, 1215.0], [68.7, 1215.0], [68.8, 1215.0], [68.9, 1215.0], [69.0, 1230.0], [69.1, 1230.0], [69.2, 1230.0], [69.3, 1230.0], [69.4, 1230.0], [69.5, 1256.0], [69.6, 1256.0], [69.7, 1256.0], [69.8, 1256.0], [69.9, 1256.0], [70.0, 1256.0], [70.1, 1262.0], [70.2, 1262.0], [70.3, 1262.0], [70.4, 1262.0], [70.5, 1262.0], [70.6, 1263.0], [70.7, 1263.0], [70.8, 1263.0], [70.9, 1263.0], [71.0, 1263.0], [71.1, 1275.0], [71.2, 1275.0], [71.3, 1275.0], [71.4, 1275.0], [71.5, 1275.0], [71.6, 1281.0], [71.7, 1281.0], [71.8, 1281.0], [71.9, 1281.0], [72.0, 1281.0], [72.1, 1281.0], [72.2, 1284.0], [72.3, 1284.0], [72.4, 1284.0], [72.5, 1284.0], [72.6, 1284.0], [72.7, 1286.0], [72.8, 1286.0], [72.9, 1286.0], [73.0, 1286.0], [73.1, 1286.0], [73.2, 1321.0], [73.3, 1321.0], [73.4, 1321.0], [73.5, 1321.0], [73.6, 1321.0], [73.7, 1338.0], [73.8, 1338.0], [73.9, 1338.0], [74.0, 1338.0], [74.1, 1338.0], [74.2, 1338.0], [74.3, 1349.0], [74.4, 1349.0], [74.5, 1349.0], [74.6, 1349.0], [74.7, 1349.0], [74.8, 1350.0], [74.9, 1350.0], [75.0, 1350.0], [75.1, 1350.0], [75.2, 1350.0], [75.3, 1375.0], [75.4, 1375.0], [75.5, 1375.0], [75.6, 1375.0], [75.7, 1375.0], [75.8, 1391.0], [75.9, 1391.0], [76.0, 1391.0], [76.1, 1391.0], [76.2, 1391.0], [76.3, 1391.0], [76.4, 1410.0], [76.5, 1410.0], [76.6, 1410.0], [76.7, 1410.0], [76.8, 1410.0], [76.9, 1411.0], [77.0, 1411.0], [77.1, 1411.0], [77.2, 1411.0], [77.3, 1411.0], [77.4, 1467.0], [77.5, 1467.0], [77.6, 1467.0], [77.7, 1467.0], [77.8, 1467.0], [77.9, 1474.0], [78.0, 1474.0], [78.1, 1474.0], [78.2, 1474.0], [78.3, 1474.0], [78.4, 1474.0], [78.5, 1479.0], [78.6, 1479.0], [78.7, 1479.0], [78.8, 1479.0], [78.9, 1479.0], [79.0, 1494.0], [79.1, 1494.0], [79.2, 1494.0], [79.3, 1494.0], [79.4, 1494.0], [79.5, 1495.0], [79.6, 1495.0], [79.7, 1495.0], [79.8, 1495.0], [79.9, 1495.0], [80.0, 1495.0], [80.1, 1496.0], [80.2, 1496.0], [80.3, 1496.0], [80.4, 1496.0], [80.5, 1496.0], [80.6, 1539.0], [80.7, 1539.0], [80.8, 1539.0], [80.9, 1539.0], [81.0, 1539.0], [81.1, 1547.0], [81.2, 1547.0], [81.3, 1547.0], [81.4, 1547.0], [81.5, 1547.0], [81.6, 1550.0], [81.7, 1550.0], [81.8, 1550.0], [81.9, 1550.0], [82.0, 1550.0], [82.1, 1550.0], [82.2, 1552.0], [82.3, 1552.0], [82.4, 1552.0], [82.5, 1552.0], [82.6, 1552.0], [82.7, 1553.0], [82.8, 1553.0], [82.9, 1553.0], [83.0, 1553.0], [83.1, 1553.0], [83.2, 1575.0], [83.3, 1575.0], [83.4, 1575.0], [83.5, 1575.0], [83.6, 1575.0], [83.7, 1618.0], [83.8, 1618.0], [83.9, 1618.0], [84.0, 1618.0], [84.1, 1618.0], [84.2, 1618.0], [84.3, 1619.0], [84.4, 1619.0], [84.5, 1619.0], [84.6, 1619.0], [84.7, 1619.0], [84.8, 1694.0], [84.9, 1694.0], [85.0, 1694.0], [85.1, 1694.0], [85.2, 1694.0], [85.3, 1712.0], [85.4, 1712.0], [85.5, 1712.0], [85.6, 1712.0], [85.7, 1712.0], [85.8, 1759.0], [85.9, 1759.0], [86.0, 1759.0], [86.1, 1759.0], [86.2, 1759.0], [86.3, 1759.0], [86.4, 1763.0], [86.5, 1763.0], [86.6, 1763.0], [86.7, 1763.0], [86.8, 1763.0], [86.9, 1772.0], [87.0, 1772.0], [87.1, 1772.0], [87.2, 1772.0], [87.3, 1772.0], [87.4, 1851.0], [87.5, 1851.0], [87.6, 1851.0], [87.7, 1851.0], [87.8, 1851.0], [87.9, 1921.0], [88.0, 1921.0], [88.1, 1921.0], [88.2, 1921.0], [88.3, 1921.0], [88.4, 1921.0], [88.5, 1958.0], [88.6, 1958.0], [88.7, 1958.0], [88.8, 1958.0], [88.9, 1958.0], [89.0, 2018.0], [89.1, 2018.0], [89.2, 2018.0], [89.3, 2018.0], [89.4, 2018.0], [89.5, 2029.0], [89.6, 2029.0], [89.7, 2029.0], [89.8, 2029.0], [89.9, 2029.0], [90.0, 2029.0], [90.1, 2071.0], [90.2, 2071.0], [90.3, 2071.0], [90.4, 2071.0], [90.5, 2071.0], [90.6, 2216.0], [90.7, 2216.0], [90.8, 2216.0], [90.9, 2216.0], [91.0, 2216.0], [91.1, 2238.0], [91.2, 2238.0], [91.3, 2238.0], [91.4, 2238.0], [91.5, 2238.0], [91.6, 2302.0], [91.7, 2302.0], [91.8, 2302.0], [91.9, 2302.0], [92.0, 2302.0], [92.1, 2302.0], [92.2, 2352.0], [92.3, 2352.0], [92.4, 2352.0], [92.5, 2352.0], [92.6, 2352.0], [92.7, 2467.0], [92.8, 2467.0], [92.9, 2467.0], [93.0, 2467.0], [93.1, 2467.0], [93.2, 2545.0], [93.3, 2545.0], [93.4, 2545.0], [93.5, 2545.0], [93.6, 2545.0], [93.7, 2602.0], [93.8, 2602.0], [93.9, 2602.0], [94.0, 2602.0], [94.1, 2602.0], [94.2, 2602.0], [94.3, 2672.0], [94.4, 2672.0], [94.5, 2672.0], [94.6, 2672.0], [94.7, 2672.0], [94.8, 2679.0], [94.9, 2679.0], [95.0, 2679.0], [95.1, 2679.0], [95.2, 2679.0], [95.3, 2696.0], [95.4, 2696.0], [95.5, 2696.0], [95.6, 2696.0], [95.7, 2696.0], [95.8, 2809.0], [95.9, 2809.0], [96.0, 2809.0], [96.1, 2809.0], [96.2, 2809.0], [96.3, 2809.0], [96.4, 2886.0], [96.5, 2886.0], [96.6, 2886.0], [96.7, 2886.0], [96.8, 2886.0], [96.9, 2959.0], [97.0, 2959.0], [97.1, 2959.0], [97.2, 2959.0], [97.3, 2959.0], [97.4, 3046.0], [97.5, 3046.0], [97.6, 3046.0], [97.7, 3046.0], [97.8, 3046.0], [97.9, 3075.0], [98.0, 3075.0], [98.1, 3075.0], [98.2, 3075.0], [98.3, 3075.0], [98.4, 3075.0], [98.5, 3315.0], [98.6, 3315.0], [98.7, 3315.0], [98.8, 3315.0], [98.9, 3315.0], [99.0, 3688.0], [99.1, 3688.0], [99.2, 3688.0], [99.3, 3688.0], [99.4, 3688.0], [99.5, 3934.0], [99.6, 3934.0], [99.7, 3934.0], [99.8, 3934.0], [99.9, 3934.0], [100.0, 3934.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 1.0], [41.8, 1.0], [41.9, 1.0], [42.0, 1.0], [42.1, 1.0], [42.2, 1.0], [42.3, 1.0], [42.4, 1.0], [42.5, 1.0], [42.6, 1.0], [42.7, 1.0], [42.8, 1.0], [42.9, 1.0], [43.0, 1.0], [43.1, 1.0], [43.2, 1.0], [43.3, 1.0], [43.4, 1.0], [43.5, 1.0], [43.6, 1.0], [43.7, 1.0], [43.8, 1.0], [43.9, 1.0], [44.0, 1.0], [44.1, 1.0], [44.2, 1.0], [44.3, 1.0], [44.4, 1.0], [44.5, 1.0], [44.6, 1.0], [44.7, 1.0], [44.8, 1.0], [44.9, 1.0], [45.0, 1.0], [45.1, 1.0], [45.2, 1.0], [45.3, 1.0], [45.4, 1.0], [45.5, 1.0], [45.6, 1.0], [45.7, 1.0], [45.8, 1.0], [45.9, 1.0], [46.0, 1.0], [46.1, 1.0], [46.2, 1.0], [46.3, 1.0], [46.4, 1.0], [46.5, 1.0], [46.6, 1.0], [46.7, 1.0], [46.8, 1.0], [46.9, 1.0], [47.0, 1.0], [47.1, 1.0], [47.2, 1.0], [47.3, 1.0], [47.4, 1.0], [47.5, 1.0], [47.6, 1.0], [47.7, 1.0], [47.8, 1.0], [47.9, 1.0], [48.0, 1.0], [48.1, 1.0], [48.2, 1.0], [48.3, 1.0], [48.4, 1.0], [48.5, 1.0], [48.6, 1.0], [48.7, 1.0], [48.8, 1.0], [48.9, 1.0], [49.0, 1.0], [49.1, 1.0], [49.2, 1.0], [49.3, 1.0], [49.4, 1.0], [49.5, 1.0], [49.6, 1.0], [49.7, 1.0], [49.8, 1.0], [49.9, 1.0], [50.0, 1.0], [50.1, 1.0], [50.2, 1.0], [50.3, 1.0], [50.4, 1.0], [50.5, 1.0], [50.6, 1.0], [50.7, 1.0], [50.8, 1.0], [50.9, 1.0], [51.0, 1.0], [51.1, 1.0], [51.2, 1.0], [51.3, 1.0], [51.4, 1.0], [51.5, 1.0], [51.6, 1.0], [51.7, 1.0], [51.8, 1.0], [51.9, 1.0], [52.0, 1.0], [52.1, 1.0], [52.2, 1.0], [52.3, 1.0], [52.4, 1.0], [52.5, 1.0], [52.6, 1.0], [52.7, 1.0], [52.8, 1.0], [52.9, 1.0], [53.0, 1.0], [53.1, 1.0], [53.2, 1.0], [53.3, 1.0], [53.4, 1.0], [53.5, 1.0], [53.6, 1.0], [53.7, 1.0], [53.8, 1.0], [53.9, 1.0], [54.0, 1.0], [54.1, 1.0], [54.2, 1.0], [54.3, 1.0], [54.4, 1.0], [54.5, 1.0], [54.6, 1.0], [54.7, 1.0], [54.8, 1.0], [54.9, 1.0], [55.0, 1.0], [55.1, 1.0], [55.2, 1.0], [55.3, 1.0], [55.4, 1.0], [55.5, 1.0], [55.6, 1.0], [55.7, 1.0], [55.8, 1.0], [55.9, 1.0], [56.0, 1.0], [56.1, 1.0], [56.2, 1.0], [56.3, 1.0], [56.4, 1.0], [56.5, 1.0], [56.6, 1.0], [56.7, 1.0], [56.8, 1.0], [56.9, 1.0], [57.0, 1.0], [57.1, 1.0], [57.2, 1.0], [57.3, 1.0], [57.4, 1.0], [57.5, 1.0], [57.6, 1.0], [57.7, 1.0], [57.8, 1.0], [57.9, 1.0], [58.0, 1.0], [58.1, 1.0], [58.2, 1.0], [58.3, 1.0], [58.4, 1.0], [58.5, 1.0], [58.6, 1.0], [58.7, 1.0], [58.8, 1.0], [58.9, 1.0], [59.0, 1.0], [59.1, 1.0], [59.2, 1.0], [59.3, 1.0], [59.4, 1.0], [59.5, 1.0], [59.6, 1.0], [59.7, 1.0], [59.8, 1.0], [59.9, 1.0], [60.0, 1.0], [60.1, 1.0], [60.2, 1.0], [60.3, 1.0], [60.4, 1.0], [60.5, 1.0], [60.6, 1.0], [60.7, 1.0], [60.8, 1.0], [60.9, 1.0], [61.0, 1.0], [61.1, 1.0], [61.2, 1.0], [61.3, 1.0], [61.4, 1.0], [61.5, 1.0], [61.6, 1.0], [61.7, 1.0], [61.8, 1.0], [61.9, 1.0], [62.0, 1.0], [62.1, 1.0], [62.2, 1.0], [62.3, 1.0], [62.4, 2.0], [62.5, 2.0], [62.6, 2.0], [62.7, 2.0], [62.8, 2.0], [62.9, 2.0], [63.0, 2.0], [63.1, 2.0], [63.2, 2.0], [63.3, 2.0], [63.4, 2.0], [63.5, 2.0], [63.6, 2.0], [63.7, 2.0], [63.8, 2.0], [63.9, 2.0], [64.0, 2.0], [64.1, 2.0], [64.2, 2.0], [64.3, 2.0], [64.4, 2.0], [64.5, 2.0], [64.6, 2.0], [64.7, 2.0], [64.8, 2.0], [64.9, 2.0], [65.0, 2.0], [65.1, 2.0], [65.2, 2.0], [65.3, 2.0], [65.4, 2.0], [65.5, 2.0], [65.6, 2.0], [65.7, 2.0], [65.8, 2.0], [65.9, 2.0], [66.0, 2.0], [66.1, 2.0], [66.2, 2.0], [66.3, 2.0], [66.4, 2.0], [66.5, 2.0], [66.6, 3.0], [66.7, 4.0], [66.8, 4.0], [66.9, 4.0], [67.0, 5.0], [67.1, 5.0], [67.2, 6.0], [67.3, 8.0], [67.4, 21.0], [67.5, 37.0], [67.6, 40.0], [67.7, 43.0], [67.8, 45.0], [67.9, 46.0], [68.0, 47.0], [68.1, 48.0], [68.2, 49.0], [68.3, 51.0], [68.4, 52.0], [68.5, 54.0], [68.6, 55.0], [68.7, 57.0], [68.8, 59.0], [68.9, 61.0], [69.0, 63.0], [69.1, 65.0], [69.2, 68.0], [69.3, 72.0], [69.4, 74.0], [69.5, 79.0], [69.6, 84.0], [69.7, 91.0], [69.8, 97.0], [69.9, 108.0], [70.0, 123.0], [70.1, 134.0], [70.2, 150.0], [70.3, 193.0], [70.4, 304.0], [70.5, 366.0], [70.6, 406.0], [70.7, 443.0], [70.8, 471.0], [70.9, 496.0], [71.0, 530.0], [71.1, 578.0], [71.2, 613.0], [71.3, 654.0], [71.4, 680.0], [71.5, 721.0], [71.6, 742.0], [71.7, 779.0], [71.8, 797.0], [71.9, 825.0], [72.0, 844.0], [72.1, 875.0], [72.2, 901.0], [72.3, 927.0], [72.4, 968.0], [72.5, 990.0], [72.6, 1018.0], [72.7, 1039.0], [72.8, 1068.0], [72.9, 1100.0], [73.0, 1126.0], [73.1, 1158.0], [73.2, 1187.0], [73.3, 1221.0], [73.4, 1250.0], [73.5, 1269.0], [73.6, 1305.0], [73.7, 1343.0], [73.8, 1372.0], [73.9, 1401.0], [74.0, 1427.0], [74.1, 1450.0], [74.2, 1473.0], [74.3, 1487.0], [74.4, 1511.0], [74.5, 1533.0], [74.6, 1554.0], [74.7, 1581.0], [74.8, 1602.0], [74.9, 1631.0], [75.0, 1659.0], [75.1, 1678.0], [75.2, 1696.0], [75.3, 1713.0], [75.4, 1733.0], [75.5, 1752.0], [75.6, 1769.0], [75.7, 1788.0], [75.8, 1805.0], [75.9, 1822.0], [76.0, 1839.0], [76.1, 1855.0], [76.2, 1871.0], [76.3, 1890.0], [76.4, 1919.0], [76.5, 1938.0], [76.6, 1960.0], [76.7, 1978.0], [76.8, 1994.0], [76.9, 2013.0], [77.0, 2031.0], [77.1, 2051.0], [77.2, 2068.0], [77.3, 2085.0], [77.4, 2110.0], [77.5, 2125.0], [77.6, 2140.0], [77.7, 2155.0], [77.8, 2168.0], [77.9, 2185.0], [78.0, 2197.0], [78.1, 2208.0], [78.2, 2228.0], [78.3, 2242.0], [78.4, 2260.0], [78.5, 2277.0], [78.6, 2292.0], [78.7, 2308.0], [78.8, 2318.0], [78.9, 2331.0], [79.0, 2343.0], [79.1, 2360.0], [79.2, 2377.0], [79.3, 2394.0], [79.4, 2415.0], [79.5, 2431.0], [79.6, 2450.0], [79.7, 2463.0], [79.8, 2475.0], [79.9, 2483.0], [80.0, 2495.0], [80.1, 2509.0], [80.2, 2521.0], [80.3, 2539.0], [80.4, 2552.0], [80.5, 2569.0], [80.6, 2588.0], [80.7, 2600.0], [80.8, 2618.0], [80.9, 2630.0], [81.0, 2639.0], [81.1, 2651.0], [81.2, 2662.0], [81.3, 2676.0], [81.4, 2688.0], [81.5, 2702.0], [81.6, 2710.0], [81.7, 2725.0], [81.8, 2738.0], [81.9, 2747.0], [82.0, 2758.0], [82.1, 2773.0], [82.2, 2786.0], [82.3, 2793.0], [82.4, 2805.0], [82.5, 2814.0], [82.6, 2822.0], [82.7, 2835.0], [82.8, 2843.0], [82.9, 2850.0], [83.0, 2862.0], [83.1, 2871.0], [83.2, 2879.0], [83.3, 2885.0], [83.4, 2893.0], [83.5, 2904.0], [83.6, 2911.0], [83.7, 2928.0], [83.8, 2936.0], [83.9, 2942.0], [84.0, 2952.0], [84.1, 2959.0], [84.2, 2966.0], [84.3, 2970.0], [84.4, 2976.0], [84.5, 2983.0], [84.6, 2991.0], [84.7, 3001.0], [84.8, 3010.0], [84.9, 3020.0], [85.0, 3029.0], [85.1, 3038.0], [85.2, 3047.0], [85.3, 3055.0], [85.4, 3065.0], [85.5, 3072.0], [85.6, 3078.0], [85.7, 3087.0], [85.8, 3097.0], [85.9, 3104.0], [86.0, 3110.0], [86.1, 3119.0], [86.2, 3126.0], [86.3, 3133.0], [86.4, 3143.0], [86.5, 3154.0], [86.6, 3161.0], [86.7, 3165.0], [86.8, 3171.0], [86.9, 3182.0], [87.0, 3192.0], [87.1, 3197.0], [87.2, 3203.0], [87.3, 3212.0], [87.4, 3219.0], [87.5, 3225.0], [87.6, 3232.0], [87.7, 3237.0], [87.8, 3244.0], [87.9, 3250.0], [88.0, 3258.0], [88.1, 3263.0], [88.2, 3269.0], [88.3, 3277.0], [88.4, 3283.0], [88.5, 3289.0], [88.6, 3298.0], [88.7, 3304.0], [88.8, 3311.0], [88.9, 3316.0], [89.0, 3322.0], [89.1, 3327.0], [89.2, 3331.0], [89.3, 3336.0], [89.4, 3340.0], [89.5, 3345.0], [89.6, 3349.0], [89.7, 3353.0], [89.8, 3359.0], [89.9, 3366.0], [90.0, 3371.0], [90.1, 3379.0], [90.2, 3385.0], [90.3, 3391.0], [90.4, 3397.0], [90.5, 3402.0], [90.6, 3409.0], [90.7, 3415.0], [90.8, 3423.0], [90.9, 3428.0], [91.0, 3434.0], [91.1, 3442.0], [91.2, 3447.0], [91.3, 3455.0], [91.4, 3462.0], [91.5, 3471.0], [91.6, 3476.0], [91.7, 3483.0], [91.8, 3489.0], [91.9, 3495.0], [92.0, 3503.0], [92.1, 3511.0], [92.2, 3515.0], [92.3, 3522.0], [92.4, 3526.0], [92.5, 3532.0], [92.6, 3541.0], [92.7, 3548.0], [92.8, 3557.0], [92.9, 3562.0], [93.0, 3567.0], [93.1, 3574.0], [93.2, 3579.0], [93.3, 3588.0], [93.4, 3596.0], [93.5, 3602.0], [93.6, 3609.0], [93.7, 3622.0], [93.8, 3628.0], [93.9, 3638.0], [94.0, 3649.0], [94.1, 3658.0], [94.2, 3667.0], [94.3, 3679.0], [94.4, 3685.0], [94.5, 3693.0], [94.6, 3703.0], [94.7, 3717.0], [94.8, 3727.0], [94.9, 3736.0], [95.0, 3743.0], [95.1, 3755.0], [95.2, 3765.0], [95.3, 3776.0], [95.4, 3785.0], [95.5, 3797.0], [95.6, 3807.0], [95.7, 3817.0], [95.8, 3826.0], [95.9, 3836.0], [96.0, 3846.0], [96.1, 3859.0], [96.2, 3874.0], [96.3, 3886.0], [96.4, 3900.0], [96.5, 3920.0], [96.6, 3936.0], [96.7, 3953.0], [96.8, 3967.0], [96.9, 3985.0], [97.0, 4001.0], [97.1, 4017.0], [97.2, 4045.0], [97.3, 4066.0], [97.4, 4091.0], [97.5, 4126.0], [97.6, 4178.0], [97.7, 4216.0], [97.8, 4263.0], [97.9, 4316.0], [98.0, 4380.0], [98.1, 4418.0], [98.2, 4482.0], [98.3, 4581.0], [98.4, 4633.0], [98.5, 4711.0], [98.6, 4820.0], [98.7, 4986.0], [98.8, 5112.0], [98.9, 5295.0], [99.0, 5621.0], [99.1, 6338.0], [99.2, 20004.0], [99.3, 20005.0], [99.4, 20005.0], [99.5, 20005.0], [99.6, 20005.0], [99.7, 20006.0], [99.8, 20006.0], [99.9, 20006.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 13674.0, "series": [{"data": [[0.0, 13674.0], [600.0, 56.0], [700.0, 68.0], [800.0, 63.0], [900.0, 86.0], [1000.0, 84.0], [1100.0, 63.0], [1200.0, 50.0], [1300.0, 64.0], [1400.0, 55.0], [1500.0, 75.0], [1600.0, 82.0], [1700.0, 71.0], [1800.0, 77.0], [1900.0, 98.0], [2000.0, 84.0], [2100.0, 124.0], [2300.0, 114.0], [2200.0, 106.0], [2400.0, 116.0], [2500.0, 113.0], [2600.0, 126.0], [2700.0, 139.0], [2800.0, 155.0], [2900.0, 189.0], [3000.0, 228.0], [3100.0, 268.0], [3200.0, 252.0], [3300.0, 283.0], [3400.0, 311.0], [3500.0, 304.0], [3700.0, 224.0], [3600.0, 264.0], [3800.0, 160.0], [3900.0, 123.0], [4000.0, 84.0], [4100.0, 69.0], [4200.0, 39.0], [4300.0, 35.0], [4600.0, 19.0], [4500.0, 15.0], [4400.0, 30.0], [4700.0, 20.0], [4800.0, 18.0], [5000.0, 12.0], [4900.0, 8.0], [5100.0, 12.0], [5300.0, 9.0], [5200.0, 10.0], [5600.0, 6.0], [5500.0, 8.0], [5400.0, 8.0], [5700.0, 3.0], [5800.0, 1.0], [6000.0, 4.0], [5900.0, 6.0], [6100.0, 1.0], [6300.0, 1.0], [6500.0, 1.0], [6800.0, 1.0], [20000.0, 21.0], [100.0, 85.0], [200.0, 19.0], [300.0, 32.0], [400.0, 33.0], [500.0, 41.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[600.0, 6.0], [700.0, 8.0], [800.0, 7.0], [900.0, 2.0], [1000.0, 5.0], [1100.0, 3.0], [1200.0, 11.0], [1300.0, 6.0], [1400.0, 8.0], [1500.0, 6.0], [100.0, 27.0], [1600.0, 3.0], [1700.0, 4.0], [1800.0, 1.0], [1900.0, 2.0], [2000.0, 3.0], [2300.0, 2.0], [2200.0, 2.0], [2400.0, 1.0], [2500.0, 1.0], [2600.0, 4.0], [2800.0, 2.0], [2900.0, 1.0], [3000.0, 2.0], [3300.0, 1.0], [200.0, 27.0], [3600.0, 1.0], [3900.0, 1.0], [300.0, 26.0], [400.0, 9.0], [500.0, 8.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 13274.0], [600.0, 54.0], [700.0, 70.0], [800.0, 72.0], [900.0, 66.0], [1000.0, 68.0], [1100.0, 65.0], [1200.0, 65.0], [1300.0, 60.0], [1400.0, 84.0], [1500.0, 83.0], [1600.0, 86.0], [1700.0, 101.0], [1800.0, 109.0], [1900.0, 96.0], [2000.0, 101.0], [2100.0, 123.0], [2300.0, 133.0], [2200.0, 118.0], [2400.0, 133.0], [2500.0, 125.0], [2600.0, 148.0], [2700.0, 165.0], [2800.0, 213.0], [2900.0, 227.0], [3000.0, 224.0], [3100.0, 250.0], [3300.0, 345.0], [3200.0, 280.0], [3400.0, 286.0], [3500.0, 289.0], [3700.0, 186.0], [3600.0, 206.0], [3800.0, 164.0], [3900.0, 113.0], [4000.0, 82.0], [4200.0, 37.0], [4300.0, 35.0], [4100.0, 47.0], [4400.0, 30.0], [4600.0, 28.0], [4500.0, 26.0], [4800.0, 22.0], [4700.0, 14.0], [4900.0, 7.0], [5000.0, 15.0], [5100.0, 11.0], [5200.0, 9.0], [5300.0, 5.0], [5600.0, 7.0], [5400.0, 3.0], [5500.0, 8.0], [5800.0, 5.0], [5700.0, 6.0], [5900.0, 2.0], [6100.0, 1.0], [6300.0, 1.0], [7200.0, 1.0], [20000.0, 169.0], [100.0, 84.0], [200.0, 18.0], [300.0, 35.0], [400.0, 61.0], [500.0, 49.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1337.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 25874.0, "series": [{"data": [[0.0, 1881.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1337.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9098.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 25874.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 49.77083333333335, "minX": 1.58543646E12, "maxY": 190.0, "series": [{"data": [[1.58543664E12, 190.0], [1.58543682E12, 190.0], [1.58543652E12, 155.11521992993372], [1.585437E12, 189.3703029299782], [1.5854367E12, 190.0], [1.58543688E12, 190.0], [1.58543658E12, 190.0], [1.58543706E12, 122.21892393320996], [1.58543676E12, 190.0], [1.58543646E12, 49.77083333333335], [1.58543694E12, 190.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543706E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 2.0, "maxY": 2959.0, "series": [{"data": [[2.0, 60.0], [3.0, 147.5], [6.0, 51.0], [7.0, 68.0], [10.0, 44.0], [12.0, 48.5], [13.0, 49.5], [16.0, 51.0], [17.0, 65.0], [18.0, 46.5], [19.0, 58.666666666666664], [20.0, 54.5], [21.0, 55.0], [22.0, 51.88888888888889], [23.0, 53.0], [24.0, 51.5], [26.0, 53.0], [27.0, 57.5], [28.0, 44.0], [30.0, 41.5], [31.0, 53.5], [32.0, 43.333333333333336], [33.0, 44.0], [34.0, 48.0], [35.0, 1705.6], [36.0, 759.3333333333333], [39.0, 60.499999999999986], [38.0, 50.0], [40.0, 59.37499999999999], [41.0, 58.0], [42.0, 52.0], [43.0, 51.333333333333336], [44.0, 70.11111111111111], [45.0, 67.5], [46.0, 61.4], [47.0, 98.0], [48.0, 60.46153846153846], [49.0, 57.16666666666667], [50.0, 39.0], [51.0, 72.28571428571428], [52.0, 49.666666666666664], [53.0, 57.3], [54.0, 54.25], [55.0, 85.0], [56.0, 65.8], [57.0, 49.0], [58.0, 50.44444444444444], [59.0, 49.75], [60.0, 62.72727272727273], [61.0, 58.4], [62.0, 69.14285714285714], [63.0, 61.4], [64.0, 66.6], [65.0, 46.75], [66.0, 70.62499999999999], [67.0, 61.25], [68.0, 84.0], [69.0, 50.0], [70.0, 48.16666666666667], [71.0, 74.37500000000001], [72.0, 84.5], [73.0, 91.8], [74.0, 88.57142857142858], [75.0, 120.9375], [76.0, 115.19999999999999], [77.0, 65.8], [78.0, 60.64705882352941], [79.0, 55.5], [80.0, 126.33333333333331], [81.0, 390.20000000000005], [82.0, 90.71428571428571], [83.0, 56.33333333333333], [84.0, 83.10000000000001], [85.0, 75.0], [86.0, 68.33333333333333], [87.0, 293.8928571428571], [88.0, 1603.6888888888886], [89.0, 74.16666666666666], [90.0, 50.75], [91.0, 61.75], [92.0, 68.0], [93.0, 66.99999999999999], [94.0, 99.83333333333333], [95.0, 197.83333333333331], [96.0, 256.5], [97.0, 502.6666666666667], [98.0, 150.76923076923072], [99.0, 192.23076923076934], [100.0, 692.6249999999999], [101.0, 298.5333333333333], [102.0, 561.0000000000001], [103.0, 753.0], [104.0, 158.78947368421052], [105.0, 179.5714285714286], [106.0, 213.66666666666666], [107.0, 192.13333333333333], [108.0, 143.8571428571429], [109.0, 417.99999999999994], [110.0, 529.4117647058823], [111.0, 450.4117647058823], [112.0, 497.5], [113.0, 225.9090909090909], [114.0, 324.24999999999994], [115.0, 585.8333333333333], [116.0, 748.0], [117.0, 192.57142857142858], [118.0, 687.5384615384615], [119.0, 223.23529411764704], [120.0, 444.5500000000002], [121.0, 750.125], [122.0, 151.42499999999998], [123.0, 336.0], [124.0, 550.1333333333332], [125.0, 538.4375], [126.0, 411.44999999999993], [127.0, 700.25], [128.0, 623.7692307692308], [129.0, 231.8125], [130.0, 1121.5], [131.0, 619.6923076923076], [132.0, 452.0], [133.0, 444.5555555555555], [134.0, 1047.0555555555557], [135.0, 84.25], [136.0, 130.16666666666663], [137.0, 804.9999999999998], [138.0, 314.59999999999997], [139.0, 516.0344827586208], [140.0, 179.29411764705884], [141.0, 67.96666666666667], [142.0, 280.57142857142856], [143.0, 1959.4545454545453], [144.0, 305.8421052631579], [145.0, 336.68518518518505], [146.0, 733.7777777777778], [147.0, 525.1428571428571], [148.0, 739.1052631578948], [149.0, 2068.7272727272725], [150.0, 1988.375], [151.0, 335.3529411764706], [152.0, 2358.8888888888887], [153.0, 308.5517241379311], [154.0, 576.0333333333334], [155.0, 681.0], [156.0, 1009.5], [157.0, 335.86486486486496], [158.0, 559.4117647058824], [159.0, 132.73333333333332], [160.0, 1528.888888888889], [161.0, 1561.8000000000002], [162.0, 583.9999999999999], [163.0, 324.27777777777777], [164.0, 912.5], [165.0, 313.04761904761904], [166.0, 780.4545454545455], [167.0, 473.6666666666667], [168.0, 560.0909090909092], [169.0, 720.2105263157896], [170.0, 1064.230769230769], [171.0, 312.0294117647057], [172.0, 767.1666666666666], [173.0, 1346.2727272727273], [174.0, 431.37837837837856], [175.0, 1577.6666666666665], [176.0, 2409.2], [177.0, 906.4210526315792], [178.0, 158.61538461538458], [179.0, 2329.2], [180.0, 1237.4000000000003], [181.0, 654.6666666666666], [182.0, 638.5833333333331], [183.0, 397.438596491228], [184.0, 196.14285714285714], [185.0, 1962.3333333333335], [186.0, 87.52212389380534], [187.0, 457.26984126984127], [188.0, 152.88157894736838], [189.0, 340.83333333333326], [190.0, 862.1062424969977]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[182.40289473684305, 807.9757894736805]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[12.0, 2448.666666666667], [13.0, 2849.3333333333335], [14.0, 1272.5], [15.0, 1000.5], [16.0, 712.0], [17.0, 619.0], [18.0, 419.0], [19.0, 237.0], [20.0, 199.0], [21.0, 207.0], [22.0, 314.0], [25.0, 179.0], [27.0, 198.0], [29.0, 1433.25], [30.0, 932.0], [31.0, 289.0], [32.0, 759.0], [33.0, 395.5], [35.0, 202.0], [36.0, 707.0], [37.0, 501.0], [38.0, 409.0], [39.0, 341.5], [40.0, 262.0], [41.0, 172.0], [42.0, 179.0], [43.0, 172.0], [44.0, 309.0], [45.0, 236.0], [46.0, 194.0], [47.0, 212.0], [48.0, 201.0], [49.0, 167.0], [50.0, 199.0], [51.0, 260.0], [52.0, 175.0], [53.0, 186.0], [54.0, 223.0], [55.0, 255.0], [56.0, 230.0], [57.0, 184.0], [58.0, 194.0], [59.0, 221.0], [60.0, 189.0], [61.0, 192.0], [62.0, 186.0], [63.0, 304.0], [65.0, 259.0], [66.0, 185.0], [68.0, 405.5], [69.0, 181.0], [70.0, 191.0], [71.0, 193.0], [73.0, 356.0], [74.0, 398.0], [75.0, 511.0], [76.0, 290.0], [77.0, 198.0], [78.0, 194.0], [79.0, 181.0], [80.0, 304.0], [82.0, 308.0], [83.0, 207.0], [85.0, 393.0], [86.0, 415.0], [87.0, 323.5], [88.0, 243.0], [89.0, 291.0], [90.0, 196.0], [92.0, 328.0], [94.0, 594.0], [95.0, 316.0], [97.0, 354.0], [98.0, 338.0], [100.0, 649.5], [101.0, 377.0], [103.0, 715.0], [105.0, 508.5], [106.0, 291.5], [107.0, 190.0], [109.0, 463.0], [110.0, 397.0], [111.0, 554.0], [112.0, 302.5], [113.0, 223.0], [114.0, 209.0], [115.0, 287.0], [117.0, 426.0], [119.0, 680.0], [120.0, 415.0], [121.0, 351.0], [123.0, 630.5], [124.0, 315.0], [125.0, 711.0], [126.0, 390.0], [129.0, 749.0], [130.0, 669.5], [133.0, 1136.0], [134.0, 711.0], [135.0, 1196.0], [137.0, 1017.0], [138.0, 1205.0], [139.0, 1215.0], [141.0, 1166.0], [144.0, 1621.0], [145.0, 1242.0], [149.0, 1766.5], [150.0, 1422.0], [153.0, 1542.5], [154.0, 1391.0], [155.0, 1375.0], [157.0, 1585.5], [158.0, 1256.0], [160.0, 1759.0], [161.0, 1359.0], [162.0, 1185.3333333333333], [167.0, 2071.0], [168.0, 1444.0], [169.0, 1851.0], [170.0, 1073.0], [171.0, 2216.0], [173.0, 2041.5], [174.0, 1474.0], [175.0, 1284.0], [176.0, 1275.0], [177.0, 2959.0], [178.0, 1263.0], [179.0, 1410.0], [180.0, 1350.0], [181.0, 1975.5], [183.0, 837.0], [188.0, 2361.6666666666665], [189.0, 2696.0], [190.0, 2121.875]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[97.73157894736836, 907.463157894737]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[3.0, 521.0], [4.0, 47.0], [6.0, 38.0], [10.0, 43.0], [12.0, 44.5], [16.0, 157.5], [17.0, 119.57142857142856], [18.0, 108.5], [19.0, 62.0], [20.0, 68.0], [22.0, 56.6], [23.0, 40.0], [24.0, 39.333333333333336], [26.0, 60.0], [27.0, 48.0], [28.0, 49.2], [29.0, 67.0], [30.0, 53.0], [32.0, 37.5], [33.0, 51.0], [34.0, 46.0], [35.0, 1215.625], [36.0, 593.4], [37.0, 71.5], [38.0, 55.285714285714285], [39.0, 47.599999999999994], [40.0, 60.00000000000001], [41.0, 62.0], [42.0, 49.25], [43.0, 59.75], [44.0, 92.76923076923076], [45.0, 82.5], [46.0, 57.5], [47.0, 72.63636363636364], [48.0, 51.2], [49.0, 47.57142857142857], [50.0, 41.0], [51.0, 53.0], [52.0, 59.0], [53.0, 51.75], [54.0, 76.125], [55.0, 59.5], [56.0, 56.68750000000001], [57.0, 53.0], [58.0, 49.8], [59.0, 56.36363636363637], [60.0, 64.85714285714286], [61.0, 69.5], [62.0, 69.8], [63.0, 91.0], [64.0, 68.16666666666666], [65.0, 59.0], [66.0, 52.72727272727273], [67.0, 61.99999999999999], [68.0, 90.25], [69.0, 50.4], [70.0, 62.75], [71.0, 99.83333333333333], [72.0, 57.57142857142857], [73.0, 84.14285714285714], [74.0, 106.2], [75.0, 106.92857142857142], [76.0, 108.28571428571429], [77.0, 58.14285714285714], [78.0, 74.53846153846155], [79.0, 59.0], [80.0, 178.20000000000002], [81.0, 317.2], [82.0, 103.4], [83.0, 60.4], [84.0, 104.0], [85.0, 82.25000000000001], [86.0, 70.16666666666666], [87.0, 1155.7307692307693], [88.0, 1787.6052631578948], [89.0, 89.81818181818181], [90.0, 50.6], [91.0, 69.55555555555556], [92.0, 57.55555555555556], [93.0, 71.57142857142857], [94.0, 102.77777777777777], [95.0, 219.0], [96.0, 444.0], [97.0, 487.0], [98.0, 119.47999999999999], [99.0, 293.0344827586207], [100.0, 289.0909090909091], [101.0, 323.7857142857143], [102.0, 486.6190476190477], [103.0, 633.6666666666666], [104.0, 342.27272727272725], [105.0, 283.3125], [106.0, 240.87500000000003], [107.0, 80.72727272727273], [108.0, 130.2], [109.0, 533.2857142857142], [110.0, 124.8666666666667], [111.0, 482.76470588235304], [112.0, 710.0], [113.0, 320.8648648648647], [114.0, 599.2], [115.0, 619.3000000000001], [116.0, 703.75], [117.0, 302.5263157894736], [118.0, 768.1874999999999], [119.0, 296.24999999999994], [120.0, 479.40909090909093], [121.0, 734.2], [122.0, 330.25000000000017], [123.0, 196.8], [124.0, 453.2857142857142], [125.0, 264.46666666666664], [126.0, 460.37500000000006], [127.0, 502.6], [128.0, 321.2666666666667], [129.0, 370.5555555555556], [130.0, 541.875], [131.0, 691.7999999999998], [132.0, 758.5714285714286], [133.0, 589.4444444444445], [134.0, 1098.875], [135.0, 477.88235294117635], [136.0, 879.4999999999999], [137.0, 994.4705882352941], [138.0, 372.99999999999994], [139.0, 848.1739130434785], [140.0, 230.3703703703703], [141.0, 169.28125], [142.0, 207.1818181818182], [143.0, 2248.166666666667], [144.0, 467.2352941176471], [145.0, 320.11111111111114], [146.0, 735.5555555555557], [147.0, 913.1428571428575], [148.0, 1086.1666666666665], [149.0, 1524.4285714285716], [150.0, 1682.875], [151.0, 350.45833333333354], [152.0, 1453.6428571428569], [153.0, 208.63636363636354], [154.0, 382.88571428571436], [155.0, 454.7], [156.0, 1007.8666666666666], [157.0, 300.18518518518533], [158.0, 632.1025641025642], [159.0, 176.4], [160.0, 1570.4615384615383], [161.0, 1237.8999999999999], [162.0, 356.05555555555554], [163.0, 756.9473684210528], [164.0, 1062.4444444444443], [165.0, 185.85714285714286], [166.0, 1518.0625], [167.0, 338.8571428571429], [168.0, 719.6666666666666], [169.0, 326.94444444444446], [170.0, 1693.6666666666667], [171.0, 233.67647058823528], [172.0, 518.3636363636364], [173.0, 2114.8333333333335], [174.0, 343.73529411764713], [175.0, 1922.7272727272727], [177.0, 679.8529411764708], [178.0, 189.61111111111106], [179.0, 1543.7272727272727], [180.0, 1092.0000000000002], [181.0, 1117.7142857142856], [182.0, 303.59999999999997], [183.0, 818.8085106382981], [176.0, 1.0], [185.0, 1540.428571428571], [186.0, 154.68750000000009], [187.0, 307.6538461538462], [188.0, 295.30645161290323], [189.0, 254.74999999999994], [190.0, 1058.7784114786648], [184.0, 1.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[182.36878947368436, 984.4082105263186]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 190.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.58543646E12, "maxY": 276169.76666666666, "series": [{"data": [[1.58543664E12, 266005.45], [1.58543682E12, 198962.75], [1.58543652E12, 269991.18333333335], [1.585437E12, 207911.08333333334], [1.5854367E12, 249606.58333333334], [1.58543688E12, 208840.33333333334], [1.58543658E12, 276169.76666666666], [1.58543706E12, 116230.46666666666], [1.58543676E12, 172697.36666666667], [1.58543646E12, 49937.38333333333], [1.58543694E12, 209081.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58543664E12, 16717.033333333333], [1.58543682E12, 0.0], [1.58543652E12, 17585.433333333334], [1.585437E12, 0.0], [1.5854367E12, 17002.166666666668], [1.58543688E12, 0.0], [1.58543658E12, 17924.3], [1.58543706E12, 3575.6], [1.58543676E12, 11934.666666666666], [1.58543646E12, 3190.366666666667], [1.58543694E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543706E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 0.969666996373227, "minX": 1.58543646E12, "maxY": 3263.200000000001, "series": [{"data": [[1.58543664E12, 2973.6669470142956], [1.58543682E12, 147.4398745207389], [1.58543652E12, 1684.681818181817], [1.585437E12, 0.9999999999999996], [1.5854367E12, 2676.8825944170776], [1.58543688E12, 0.9828665568369039], [1.58543658E12, 2551.442080378252], [1.58543706E12, 95.0786618444846], [1.58543676E12, 3144.03432494279], [1.58543646E12, 159.48691099476443], [1.58543694E12, 1.2209417188014493]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543652E12, 1032.8305084745764], [1.58543646E12, 702.0000000000002]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58543664E12, 2942.016197783462], [1.58543682E12, 1161.9848901098883], [1.58543652E12, 1752.0649247822637], [1.585437E12, 0.9827643354325482], [1.5854367E12, 2891.8262642740638], [1.58543688E12, 0.969666996373227], [1.58543658E12, 2631.2390282131696], [1.58543706E12, 114.14761904761905], [1.58543676E12, 3263.200000000001], [1.58543646E12, 133.20276497695846], [1.58543694E12, 1.469058591178406]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543706E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58543646E12, "maxY": 3262.8603773584923, "series": [{"data": [[1.58543664E12, 2972.799831791418], [1.58543682E12, 0.0], [1.58543652E12, 1683.705387205386], [1.585437E12, 0.0], [1.5854367E12, 2676.330049261086], [1.58543688E12, 0.0], [1.58543658E12, 2551.0669818754886], [1.58543706E12, 92.95027124773964], [1.58543676E12, 3143.6784897025154], [1.58543646E12, 157.87958115183235], [1.58543694E12, 0.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543652E12, 1031.8389830508472], [1.58543646E12, 695.6805555555555]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58543664E12, 2941.123614663259], [1.58543682E12, 0.0], [1.58543652E12, 1751.2969121140127], [1.585437E12, 0.0], [1.5854367E12, 2891.335236541599], [1.58543688E12, 0.0], [1.58543658E12, 2630.844043887147], [1.58543706E12, 112.04761904761911], [1.58543676E12, 3262.8603773584923], [1.58543646E12, 132.03225806451616], [1.58543694E12, 0.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543706E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.3141361256544502, "minX": 1.58543646E12, "maxY": 1.5, "series": [{"data": [[1.58543664E12, 0.5777964676198494], [1.58543682E12, 0.5134193098640643], [1.58543652E12, 0.5479797979797966], [1.585437E12, 0.5165343915343927], [1.5854367E12, 0.5197044334975377], [1.58543688E12, 0.5041186161449764], [1.58543658E12, 0.5776201733648545], [1.58543706E12, 1.358951175406871], [1.58543676E12, 0.5514874141876427], [1.58543646E12, 0.3141361256544502], [1.58543694E12, 0.7178136318735606]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543652E12, 0.8220338983050844], [1.58543646E12, 1.5]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58543664E12, 0.6334185848252348], [1.58543682E12, 0.5054945054945075], [1.58543652E12, 0.7062549485352334], [1.585437E12, 0.5021544580709305], [1.5854367E12, 0.555464926590538], [1.58543688E12, 0.47774480712166245], [1.58543658E12, 0.6089341692789975], [1.58543706E12, 1.4923809523809528], [1.58543676E12, 0.59119496855346], [1.58543646E12, 0.7649769585253458], [1.58543694E12, 0.9730085582620138]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543706E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.58543646E12, "maxY": 7265.0, "series": [{"data": [[1.58543664E12, 6195.0], [1.58543652E12, 6515.0], [1.5854367E12, 7265.0], [1.58543658E12, 6884.0], [1.58543706E12, 2399.0], [1.58543676E12, 4780.0], [1.58543646E12, 3934.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58543664E12, 2.0], [1.58543652E12, 2.0], [1.5854367E12, 2.0], [1.58543658E12, 1.0], [1.58543706E12, 31.0], [1.58543676E12, 2.0], [1.58543646E12, 36.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58543664E12, 3846.0], [1.58543652E12, 3273.0], [1.5854367E12, 4196.0], [1.58543658E12, 3636.6000000000004], [1.58543706E12, 1931.8000000000004], [1.58543676E12, 3954.6000000000004], [1.58543646E12, 334.2000000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58543664E12, 5591.760000000002], [1.58543652E12, 5240.280000000001], [1.5854367E12, 5157.800000000001], [1.58543658E12, 4348.48], [1.58543706E12, 2273.8500000000004], [1.58543676E12, 4248.14], [1.58543646E12, 3120.5999999999995]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58543664E12, 4345.4], [1.58543652E12, 3919.000000000001], [1.5854367E12, 4599.0], [1.58543658E12, 3781.0], [1.58543706E12, 2055.1], [1.58543676E12, 4065.3], [1.58543646E12, 1536.7499999999995]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543706E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 20005.0, "series": [{"data": [[2.0, 51.0], [3.0, 242.0], [5.0, 2018.0], [6.0, 51.5], [8.0, 473.0], [11.0, 1586.5], [12.0, 56.0], [14.0, 82.5], [15.0, 54.0], [16.0, 46.5], [18.0, 55.5], [19.0, 48.5], [22.0, 63.5], [23.0, 356.0], [24.0, 3360.0], [25.0, 236.0], [26.0, 2333.5], [27.0, 3215.0], [28.0, 2338.0], [29.0, 2988.0], [30.0, 3096.5], [31.0, 3507.0], [33.0, 3338.0], [32.0, 3357.0], [35.0, 3312.0], [34.0, 3345.0], [37.0, 3185.0], [36.0, 3308.0], [39.0, 2457.0], [38.0, 3291.0], [40.0, 3123.5], [41.0, 2814.5], [43.0, 2727.0], [42.0, 3255.0], [44.0, 2476.5], [45.0, 3383.0], [46.0, 1782.5], [47.0, 2580.0], [49.0, 989.0], [48.0, 2568.0], [51.0, 81.0], [50.0, 2843.5], [52.0, 1730.0], [54.0, 2200.5], [55.0, 988.5], [58.0, 1106.0], [59.0, 884.0], [60.0, 1180.0], [62.0, 646.0], [66.0, 339.5], [69.0, 496.0], [75.0, 780.0], [76.0, 1034.0], [78.0, 14.0], [80.0, 734.5], [84.0, 15.5], [85.0, 2975.0], [94.0, 2206.0], [96.0, 62.0], [100.0, 1928.5], [122.0, 2307.0], [129.0, 1784.0], [169.0, 1554.0], [1.0, 56.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[23.0, 3504.0], [25.0, 3274.0], [28.0, 20005.0], [33.0, 3428.0], [35.0, 1414.0], [37.0, 2517.0], [36.0, 2870.0], [39.0, 2095.0], [41.0, 2933.5], [40.0, 4006.5], [42.0, 0.0], [48.0, 0.0], [49.0, 1.0], [50.0, 1.0], [54.0, 1.0], [55.0, 0.5], [56.0, 1.0], [60.0, 41.5], [61.0, 1.0], [62.0, 0.0], [63.0, 1.0], [66.0, 1.0], [69.0, 1.0], [71.0, 1.0], [68.0, 1.0], [74.0, 1.0], [72.0, 1.0], [79.0, 1.0], [76.0, 1.0], [80.0, 1.0], [82.0, 1.0], [81.0, 1.0], [83.0, 1.0], [87.0, 1.0], [84.0, 1.0], [85.0, 1.0], [86.0, 1.0], [90.0, 1.0], [91.0, 1.0], [89.0, 1.0], [88.0, 1.0], [94.0, 1.0], [92.0, 1.0], [93.0, 1.0], [95.0, 1.0], [99.0, 1.0], [96.0, 1.0], [97.0, 1.0], [98.0, 1.0], [100.0, 1.0], [102.0, 1.0], [103.0, 1.0], [101.0, 1.0], [105.0, 1.0], [107.0, 1.0], [104.0, 1.0], [106.0, 1.0], [109.0, 1.0], [111.0, 1.0], [108.0, 1.0], [110.0, 1.0], [114.0, 1.0], [115.0, 1.0], [112.0, 1.0], [113.0, 1.0], [117.0, 1.0], [116.0, 1.0], [122.0, 3905.0], [125.0, 1.0], [129.0, 2997.5], [132.0, 1.0], [134.0, 1.0], [169.0, 3564.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 169.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 4006.0, "series": [{"data": [[2.0, 50.5], [3.0, 241.0], [5.0, 1934.0], [6.0, 51.0], [8.0, 472.5], [11.0, 1577.0], [12.0, 55.5], [14.0, 82.0], [15.0, 53.5], [16.0, 46.5], [18.0, 53.5], [19.0, 48.5], [22.0, 61.5], [23.0, 355.0], [24.0, 3360.0], [25.0, 236.0], [26.0, 2331.0], [27.0, 3214.0], [28.0, 2337.0], [29.0, 2988.0], [30.0, 3096.0], [31.0, 3506.5], [33.0, 3338.0], [32.0, 3356.5], [35.0, 3312.0], [34.0, 3344.5], [37.0, 3184.0], [36.0, 3308.0], [39.0, 2456.0], [38.0, 3291.0], [40.0, 3122.0], [41.0, 2814.0], [43.0, 2726.0], [42.0, 3254.0], [44.0, 2476.0], [45.0, 3383.0], [46.0, 1780.0], [47.0, 2579.0], [49.0, 988.0], [48.0, 2568.0], [51.0, 81.0], [50.0, 2843.5], [52.0, 1730.0], [54.0, 2199.5], [55.0, 988.0], [58.0, 1103.0], [59.0, 884.0], [60.0, 1179.5], [62.0, 645.0], [66.0, 338.5], [69.0, 496.0], [75.0, 780.0], [76.0, 1034.0], [78.0, 14.0], [80.0, 734.0], [84.0, 15.5], [85.0, 2975.0], [94.0, 2206.0], [96.0, 62.0], [100.0, 1928.5], [122.0, 2307.0], [129.0, 1783.0], [169.0, 1554.0], [1.0, 56.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[23.0, 3504.0], [25.0, 3274.0], [28.0, 0.0], [33.0, 3428.0], [35.0, 1413.0], [37.0, 2517.0], [36.0, 2869.0], [39.0, 2094.0], [41.0, 2933.5], [40.0, 4006.0], [42.0, 0.0], [48.0, 0.0], [49.0, 0.0], [50.0, 0.0], [54.0, 0.0], [55.0, 0.0], [56.0, 0.0], [60.0, 0.0], [61.0, 0.0], [62.0, 0.0], [63.0, 0.0], [66.0, 0.0], [69.0, 0.0], [71.0, 0.0], [68.0, 0.0], [74.0, 0.0], [72.0, 0.0], [79.0, 0.0], [76.0, 0.0], [80.0, 0.0], [82.0, 0.0], [81.0, 0.0], [83.0, 0.0], [87.0, 0.0], [84.0, 0.0], [85.0, 0.0], [86.0, 0.0], [90.0, 0.0], [91.0, 0.0], [89.0, 0.0], [88.0, 0.0], [94.0, 0.0], [92.0, 0.0], [93.0, 0.0], [95.0, 0.0], [99.0, 0.0], [96.0, 0.0], [97.0, 0.0], [98.0, 0.0], [100.0, 0.0], [102.0, 0.0], [103.0, 0.0], [101.0, 0.0], [105.0, 0.0], [107.0, 0.0], [104.0, 0.0], [106.0, 0.0], [109.0, 0.0], [111.0, 0.0], [108.0, 0.0], [110.0, 0.0], [114.0, 0.0], [115.0, 0.0], [112.0, 0.0], [113.0, 0.0], [117.0, 0.0], [116.0, 0.0], [122.0, 3905.0], [125.0, 0.0], [129.0, 2997.5], [132.0, 0.0], [134.0, 0.0], [169.0, 3564.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 169.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.05, "minX": 1.58543646E12, "maxY": 101.25, "series": [{"data": [[1.58543664E12, 39.36666666666667], [1.58543682E12, 93.18333333333334], [1.58543652E12, 44.9], [1.585437E12, 100.7], [1.5854367E12, 40.75], [1.58543688E12, 101.13333333333334], [1.58543658E12, 42.45], [1.58543706E12, 35.916666666666664], [1.58543676E12, 28.8], [1.58543646E12, 8.05], [1.58543694E12, 101.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543706E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.58543646E12, "maxY": 101.25, "series": [{"data": [[1.58543664E12, 38.86666666666667], [1.58543652E12, 41.68333333333333], [1.5854367E12, 39.31666666666667], [1.58543658E12, 41.516666666666666], [1.58543706E12, 8.333333333333334], [1.58543676E12, 27.55], [1.58543646E12, 8.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58543664E12, 0.1], [1.58543652E12, 0.21666666666666667], [1.5854367E12, 0.31666666666666665], [1.58543658E12, 0.26666666666666666], [1.58543676E12, 0.26666666666666666]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.58543664E12, 0.06666666666666667], [1.58543652E12, 0.05], [1.5854367E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.TruncatedChunkException", "isController": false}, {"data": [[1.58543682E12, 96.35], [1.58543652E12, 0.3], [1.585437E12, 100.68333333333334], [1.5854367E12, 0.6], [1.58543688E12, 101.13333333333334], [1.58543658E12, 0.6333333333333333], [1.58543706E12, 27.6], [1.58543694E12, 101.25]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.58543652E12, 0.016666666666666666]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.58543664E12, 0.3333333333333333], [1.58543652E12, 0.55], [1.5854367E12, 0.4666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543706E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.58543646E12, "maxY": 50.63333333333333, "series": [{"data": [[1.58543652E12, 1.9666666666666666], [1.58543646E12, 1.2]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58543664E12, 19.583333333333332], [1.58543652E12, 19.083333333333332], [1.5854367E12, 19.383333333333333], [1.58543658E12, 20.4], [1.58543706E12, 4.466666666666667], [1.58543676E12, 14.45], [1.58543646E12, 3.183333333333333]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58543664E12, 0.23333333333333334], [1.58543682E12, 47.81666666666667], [1.58543652E12, 0.7166666666666667], [1.585437E12, 50.4], [1.5854367E12, 0.9166666666666666], [1.58543688E12, 50.583333333333336], [1.58543658E12, 0.75], [1.58543706E12, 13.966666666666667], [1.58543676E12, 0.11666666666666667], [1.58543694E12, 50.61666666666667]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.58543664E12, 19.283333333333335], [1.58543652E12, 20.633333333333333], [1.5854367E12, 19.933333333333334], [1.58543658E12, 21.116666666666667], [1.58543706E12, 3.8666666666666667], [1.58543676E12, 13.1], [1.58543646E12, 3.6166666666666667]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58543664E12, 0.26666666666666666], [1.58543682E12, 48.53333333333333], [1.58543652E12, 0.4166666666666667], [1.585437E12, 50.28333333333333], [1.5854367E12, 0.5], [1.58543688E12, 50.55], [1.58543658E12, 0.15], [1.58543706E12, 13.633333333333333], [1.58543676E12, 0.15], [1.58543694E12, 50.63333333333333]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543706E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.26666666666666666, "minX": 1.58543646E12, "maxY": 101.25, "series": [{"data": [[1.58543664E12, 38.86666666666667], [1.58543652E12, 41.68333333333333], [1.5854367E12, 39.31666666666667], [1.58543658E12, 41.516666666666666], [1.58543706E12, 8.333333333333334], [1.58543676E12, 27.55], [1.58543646E12, 8.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58543664E12, 0.5], [1.58543682E12, 96.35], [1.58543652E12, 1.1333333333333333], [1.585437E12, 100.68333333333334], [1.5854367E12, 1.4166666666666667], [1.58543688E12, 101.13333333333334], [1.58543658E12, 0.9], [1.58543706E12, 27.6], [1.58543676E12, 0.26666666666666666], [1.58543694E12, 101.25]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543706E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

