/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 20008.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 1.0], [41.8, 1.0], [41.9, 1.0], [42.0, 1.0], [42.1, 1.0], [42.2, 1.0], [42.3, 1.0], [42.4, 1.0], [42.5, 1.0], [42.6, 1.0], [42.7, 1.0], [42.8, 1.0], [42.9, 1.0], [43.0, 1.0], [43.1, 1.0], [43.2, 1.0], [43.3, 1.0], [43.4, 1.0], [43.5, 1.0], [43.6, 1.0], [43.7, 1.0], [43.8, 1.0], [43.9, 1.0], [44.0, 1.0], [44.1, 1.0], [44.2, 1.0], [44.3, 1.0], [44.4, 1.0], [44.5, 1.0], [44.6, 1.0], [44.7, 1.0], [44.8, 1.0], [44.9, 1.0], [45.0, 1.0], [45.1, 1.0], [45.2, 1.0], [45.3, 1.0], [45.4, 1.0], [45.5, 1.0], [45.6, 1.0], [45.7, 1.0], [45.8, 1.0], [45.9, 1.0], [46.0, 1.0], [46.1, 1.0], [46.2, 1.0], [46.3, 1.0], [46.4, 1.0], [46.5, 1.0], [46.6, 1.0], [46.7, 1.0], [46.8, 1.0], [46.9, 1.0], [47.0, 1.0], [47.1, 1.0], [47.2, 1.0], [47.3, 1.0], [47.4, 1.0], [47.5, 1.0], [47.6, 1.0], [47.7, 1.0], [47.8, 1.0], [47.9, 1.0], [48.0, 1.0], [48.1, 1.0], [48.2, 1.0], [48.3, 1.0], [48.4, 1.0], [48.5, 1.0], [48.6, 1.0], [48.7, 1.0], [48.8, 1.0], [48.9, 1.0], [49.0, 1.0], [49.1, 1.0], [49.2, 1.0], [49.3, 1.0], [49.4, 1.0], [49.5, 1.0], [49.6, 1.0], [49.7, 1.0], [49.8, 1.0], [49.9, 1.0], [50.0, 1.0], [50.1, 1.0], [50.2, 1.0], [50.3, 1.0], [50.4, 1.0], [50.5, 1.0], [50.6, 1.0], [50.7, 1.0], [50.8, 1.0], [50.9, 1.0], [51.0, 1.0], [51.1, 1.0], [51.2, 1.0], [51.3, 1.0], [51.4, 1.0], [51.5, 1.0], [51.6, 1.0], [51.7, 1.0], [51.8, 1.0], [51.9, 1.0], [52.0, 1.0], [52.1, 1.0], [52.2, 1.0], [52.3, 1.0], [52.4, 1.0], [52.5, 1.0], [52.6, 1.0], [52.7, 1.0], [52.8, 1.0], [52.9, 1.0], [53.0, 1.0], [53.1, 1.0], [53.2, 1.0], [53.3, 1.0], [53.4, 1.0], [53.5, 1.0], [53.6, 1.0], [53.7, 1.0], [53.8, 1.0], [53.9, 1.0], [54.0, 1.0], [54.1, 1.0], [54.2, 1.0], [54.3, 1.0], [54.4, 1.0], [54.5, 1.0], [54.6, 1.0], [54.7, 1.0], [54.8, 1.0], [54.9, 1.0], [55.0, 1.0], [55.1, 1.0], [55.2, 1.0], [55.3, 1.0], [55.4, 1.0], [55.5, 1.0], [55.6, 1.0], [55.7, 1.0], [55.8, 1.0], [55.9, 1.0], [56.0, 1.0], [56.1, 1.0], [56.2, 1.0], [56.3, 1.0], [56.4, 1.0], [56.5, 1.0], [56.6, 1.0], [56.7, 1.0], [56.8, 1.0], [56.9, 1.0], [57.0, 1.0], [57.1, 1.0], [57.2, 1.0], [57.3, 1.0], [57.4, 1.0], [57.5, 1.0], [57.6, 1.0], [57.7, 1.0], [57.8, 1.0], [57.9, 1.0], [58.0, 1.0], [58.1, 1.0], [58.2, 1.0], [58.3, 1.0], [58.4, 1.0], [58.5, 1.0], [58.6, 1.0], [58.7, 1.0], [58.8, 1.0], [58.9, 1.0], [59.0, 1.0], [59.1, 1.0], [59.2, 1.0], [59.3, 1.0], [59.4, 1.0], [59.5, 1.0], [59.6, 1.0], [59.7, 1.0], [59.8, 1.0], [59.9, 1.0], [60.0, 1.0], [60.1, 1.0], [60.2, 1.0], [60.3, 1.0], [60.4, 1.0], [60.5, 1.0], [60.6, 1.0], [60.7, 1.0], [60.8, 1.0], [60.9, 1.0], [61.0, 1.0], [61.1, 1.0], [61.2, 1.0], [61.3, 1.0], [61.4, 1.0], [61.5, 1.0], [61.6, 1.0], [61.7, 1.0], [61.8, 1.0], [61.9, 1.0], [62.0, 1.0], [62.1, 1.0], [62.2, 1.0], [62.3, 1.0], [62.4, 1.0], [62.5, 1.0], [62.6, 1.0], [62.7, 2.0], [62.8, 2.0], [62.9, 2.0], [63.0, 2.0], [63.1, 2.0], [63.2, 2.0], [63.3, 2.0], [63.4, 2.0], [63.5, 2.0], [63.6, 2.0], [63.7, 2.0], [63.8, 2.0], [63.9, 2.0], [64.0, 2.0], [64.1, 2.0], [64.2, 2.0], [64.3, 2.0], [64.4, 2.0], [64.5, 2.0], [64.6, 2.0], [64.7, 2.0], [64.8, 2.0], [64.9, 2.0], [65.0, 2.0], [65.1, 2.0], [65.2, 2.0], [65.3, 2.0], [65.4, 2.0], [65.5, 2.0], [65.6, 2.0], [65.7, 2.0], [65.8, 2.0], [65.9, 2.0], [66.0, 2.0], [66.1, 2.0], [66.2, 2.0], [66.3, 2.0], [66.4, 2.0], [66.5, 2.0], [66.6, 2.0], [66.7, 2.0], [66.8, 2.0], [66.9, 2.0], [67.0, 3.0], [67.1, 3.0], [67.2, 3.0], [67.3, 3.0], [67.4, 3.0], [67.5, 3.0], [67.6, 4.0], [67.7, 4.0], [67.8, 4.0], [67.9, 4.0], [68.0, 5.0], [68.1, 5.0], [68.2, 5.0], [68.3, 6.0], [68.4, 6.0], [68.5, 7.0], [68.6, 9.0], [68.7, 13.0], [68.8, 18.0], [68.9, 27.0], [69.0, 36.0], [69.1, 40.0], [69.2, 41.0], [69.3, 43.0], [69.4, 45.0], [69.5, 46.0], [69.6, 48.0], [69.7, 49.0], [69.8, 50.0], [69.9, 51.0], [70.0, 53.0], [70.1, 56.0], [70.2, 58.0], [70.3, 60.0], [70.4, 62.0], [70.5, 65.0], [70.6, 67.0], [70.7, 70.0], [70.8, 74.0], [70.9, 80.0], [71.0, 84.0], [71.1, 89.0], [71.2, 97.0], [71.3, 112.0], [71.4, 133.0], [71.5, 145.0], [71.6, 184.0], [71.7, 252.0], [71.8, 340.0], [71.9, 381.0], [72.0, 420.0], [72.1, 456.0], [72.2, 488.0], [72.3, 517.0], [72.4, 542.0], [72.5, 583.0], [72.6, 610.0], [72.7, 632.0], [72.8, 649.0], [72.9, 668.0], [73.0, 684.0], [73.1, 699.0], [73.2, 718.0], [73.3, 737.0], [73.4, 764.0], [73.5, 793.0], [73.6, 814.0], [73.7, 840.0], [73.8, 869.0], [73.9, 890.0], [74.0, 907.0], [74.1, 925.0], [74.2, 944.0], [74.3, 960.0], [74.4, 970.0], [74.5, 989.0], [74.6, 1004.0], [74.7, 1024.0], [74.8, 1044.0], [74.9, 1057.0], [75.0, 1075.0], [75.1, 1094.0], [75.2, 1108.0], [75.3, 1121.0], [75.4, 1135.0], [75.5, 1156.0], [75.6, 1174.0], [75.7, 1197.0], [75.8, 1215.0], [75.9, 1240.0], [76.0, 1255.0], [76.1, 1279.0], [76.2, 1290.0], [76.3, 1312.0], [76.4, 1325.0], [76.5, 1351.0], [76.6, 1371.0], [76.7, 1393.0], [76.8, 1415.0], [76.9, 1441.0], [77.0, 1451.0], [77.1, 1468.0], [77.2, 1482.0], [77.3, 1494.0], [77.4, 1507.0], [77.5, 1522.0], [77.6, 1544.0], [77.7, 1560.0], [77.8, 1579.0], [77.9, 1592.0], [78.0, 1605.0], [78.1, 1620.0], [78.2, 1635.0], [78.3, 1650.0], [78.4, 1661.0], [78.5, 1681.0], [78.6, 1701.0], [78.7, 1715.0], [78.8, 1730.0], [78.9, 1741.0], [79.0, 1755.0], [79.1, 1772.0], [79.2, 1787.0], [79.3, 1802.0], [79.4, 1810.0], [79.5, 1823.0], [79.6, 1840.0], [79.7, 1853.0], [79.8, 1866.0], [79.9, 1887.0], [80.0, 1900.0], [80.1, 1913.0], [80.2, 1925.0], [80.3, 1948.0], [80.4, 1962.0], [80.5, 1981.0], [80.6, 1991.0], [80.7, 2011.0], [80.8, 2024.0], [80.9, 2039.0], [81.0, 2054.0], [81.1, 2079.0], [81.2, 2098.0], [81.3, 2114.0], [81.4, 2130.0], [81.5, 2145.0], [81.6, 2160.0], [81.7, 2175.0], [81.8, 2189.0], [81.9, 2205.0], [82.0, 2224.0], [82.1, 2245.0], [82.2, 2261.0], [82.3, 2274.0], [82.4, 2294.0], [82.5, 2317.0], [82.6, 2332.0], [82.7, 2347.0], [82.8, 2367.0], [82.9, 2384.0], [83.0, 2401.0], [83.1, 2421.0], [83.2, 2432.0], [83.3, 2446.0], [83.4, 2458.0], [83.5, 2469.0], [83.6, 2481.0], [83.7, 2497.0], [83.8, 2506.0], [83.9, 2514.0], [84.0, 2526.0], [84.1, 2537.0], [84.2, 2548.0], [84.3, 2557.0], [84.4, 2567.0], [84.5, 2583.0], [84.6, 2590.0], [84.7, 2600.0], [84.8, 2610.0], [84.9, 2621.0], [85.0, 2631.0], [85.1, 2643.0], [85.2, 2652.0], [85.3, 2662.0], [85.4, 2667.0], [85.5, 2678.0], [85.6, 2686.0], [85.7, 2696.0], [85.8, 2712.0], [85.9, 2726.0], [86.0, 2735.0], [86.1, 2745.0], [86.2, 2755.0], [86.3, 2766.0], [86.4, 2774.0], [86.5, 2783.0], [86.6, 2792.0], [86.7, 2804.0], [86.8, 2810.0], [86.9, 2819.0], [87.0, 2827.0], [87.1, 2836.0], [87.2, 2845.0], [87.3, 2856.0], [87.4, 2864.0], [87.5, 2877.0], [87.6, 2885.0], [87.7, 2892.0], [87.8, 2900.0], [87.9, 2912.0], [88.0, 2924.0], [88.1, 2937.0], [88.2, 2948.0], [88.3, 2962.0], [88.4, 2973.0], [88.5, 2984.0], [88.6, 2994.0], [88.7, 3003.0], [88.8, 3015.0], [88.9, 3021.0], [89.0, 3027.0], [89.1, 3035.0], [89.2, 3044.0], [89.3, 3058.0], [89.4, 3069.0], [89.5, 3075.0], [89.6, 3085.0], [89.7, 3096.0], [89.8, 3105.0], [89.9, 3114.0], [90.0, 3120.0], [90.1, 3137.0], [90.2, 3142.0], [90.3, 3152.0], [90.4, 3160.0], [90.5, 3170.0], [90.6, 3176.0], [90.7, 3187.0], [90.8, 3196.0], [90.9, 3206.0], [91.0, 3216.0], [91.1, 3227.0], [91.2, 3236.0], [91.3, 3245.0], [91.4, 3252.0], [91.5, 3263.0], [91.6, 3272.0], [91.7, 3284.0], [91.8, 3292.0], [91.9, 3300.0], [92.0, 3311.0], [92.1, 3322.0], [92.2, 3335.0], [92.3, 3343.0], [92.4, 3352.0], [92.5, 3361.0], [92.6, 3372.0], [92.7, 3380.0], [92.8, 3394.0], [92.9, 3405.0], [93.0, 3420.0], [93.1, 3430.0], [93.2, 3438.0], [93.3, 3453.0], [93.4, 3465.0], [93.5, 3473.0], [93.6, 3486.0], [93.7, 3493.0], [93.8, 3502.0], [93.9, 3510.0], [94.0, 3522.0], [94.1, 3533.0], [94.2, 3547.0], [94.3, 3557.0], [94.4, 3576.0], [94.5, 3587.0], [94.6, 3599.0], [94.7, 3613.0], [94.8, 3627.0], [94.9, 3643.0], [95.0, 3650.0], [95.1, 3663.0], [95.2, 3678.0], [95.3, 3698.0], [95.4, 3713.0], [95.5, 3725.0], [95.6, 3737.0], [95.7, 3758.0], [95.8, 3775.0], [95.9, 3792.0], [96.0, 3812.0], [96.1, 3843.0], [96.2, 3874.0], [96.3, 3889.0], [96.4, 3912.0], [96.5, 3928.0], [96.6, 3953.0], [96.7, 3976.0], [96.8, 4003.0], [96.9, 4022.0], [97.0, 4053.0], [97.1, 4079.0], [97.2, 4123.0], [97.3, 4162.0], [97.4, 4187.0], [97.5, 4231.0], [97.6, 4267.0], [97.7, 4298.0], [97.8, 4342.0], [97.9, 4389.0], [98.0, 4421.0], [98.1, 4459.0], [98.2, 4500.0], [98.3, 4538.0], [98.4, 4571.0], [98.5, 4614.0], [98.6, 4651.0], [98.7, 4688.0], [98.8, 4717.0], [98.9, 4774.0], [99.0, 4821.0], [99.1, 4856.0], [99.2, 4901.0], [99.3, 4948.0], [99.4, 4988.0], [99.5, 5053.0], [99.6, 5142.0], [99.7, 5230.0], [99.8, 5371.0], [99.9, 5500.0], [100.0, 6074.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 152.0], [0.1, 152.0], [0.2, 152.0], [0.3, 152.0], [0.4, 152.0], [0.5, 152.0], [0.6, 159.0], [0.7, 159.0], [0.8, 159.0], [0.9, 159.0], [1.0, 159.0], [1.1, 161.0], [1.2, 161.0], [1.3, 161.0], [1.4, 161.0], [1.5, 161.0], [1.6, 161.0], [1.7, 165.0], [1.8, 165.0], [1.9, 165.0], [2.0, 165.0], [2.1, 165.0], [2.2, 167.0], [2.3, 167.0], [2.4, 167.0], [2.5, 167.0], [2.6, 167.0], [2.7, 167.0], [2.8, 170.0], [2.9, 170.0], [3.0, 170.0], [3.1, 170.0], [3.2, 170.0], [3.3, 170.0], [3.4, 170.0], [3.5, 170.0], [3.6, 170.0], [3.7, 170.0], [3.8, 171.0], [3.9, 171.0], [4.0, 171.0], [4.1, 171.0], [4.2, 171.0], [4.3, 171.0], [4.4, 172.0], [4.5, 172.0], [4.6, 172.0], [4.7, 172.0], [4.8, 172.0], [4.9, 173.0], [5.0, 173.0], [5.1, 173.0], [5.2, 173.0], [5.3, 173.0], [5.4, 173.0], [5.5, 173.0], [5.6, 173.0], [5.7, 173.0], [5.8, 173.0], [5.9, 173.0], [6.0, 179.0], [6.1, 179.0], [6.2, 179.0], [6.3, 179.0], [6.4, 179.0], [6.5, 179.0], [6.6, 179.0], [6.7, 179.0], [6.8, 179.0], [6.9, 179.0], [7.0, 179.0], [7.1, 180.0], [7.2, 180.0], [7.3, 180.0], [7.4, 180.0], [7.5, 180.0], [7.6, 182.0], [7.7, 182.0], [7.8, 182.0], [7.9, 182.0], [8.0, 182.0], [8.1, 182.0], [8.2, 183.0], [8.3, 183.0], [8.4, 183.0], [8.5, 183.0], [8.6, 183.0], [8.7, 185.0], [8.8, 185.0], [8.9, 185.0], [9.0, 185.0], [9.1, 185.0], [9.2, 192.0], [9.3, 192.0], [9.4, 192.0], [9.5, 192.0], [9.6, 192.0], [9.7, 192.0], [9.8, 194.0], [9.9, 194.0], [10.0, 194.0], [10.1, 194.0], [10.2, 194.0], [10.3, 195.0], [10.4, 195.0], [10.5, 195.0], [10.6, 195.0], [10.7, 195.0], [10.8, 195.0], [10.9, 195.0], [11.0, 195.0], [11.1, 195.0], [11.2, 195.0], [11.3, 195.0], [11.4, 198.0], [11.5, 198.0], [11.6, 198.0], [11.7, 198.0], [11.8, 198.0], [11.9, 199.0], [12.0, 199.0], [12.1, 199.0], [12.2, 199.0], [12.3, 199.0], [12.4, 199.0], [12.5, 200.0], [12.6, 200.0], [12.7, 200.0], [12.8, 200.0], [12.9, 200.0], [13.0, 200.0], [13.1, 200.0], [13.2, 200.0], [13.3, 200.0], [13.4, 200.0], [13.5, 200.0], [13.6, 201.0], [13.7, 201.0], [13.8, 201.0], [13.9, 201.0], [14.0, 201.0], [14.1, 201.0], [14.2, 201.0], [14.3, 201.0], [14.4, 201.0], [14.5, 201.0], [14.6, 202.0], [14.7, 202.0], [14.8, 202.0], [14.9, 202.0], [15.0, 202.0], [15.1, 202.0], [15.2, 203.0], [15.3, 203.0], [15.4, 203.0], [15.5, 203.0], [15.6, 203.0], [15.7, 206.0], [15.8, 206.0], [15.9, 206.0], [16.0, 206.0], [16.1, 206.0], [16.2, 206.0], [16.3, 206.0], [16.4, 206.0], [16.5, 206.0], [16.6, 206.0], [16.7, 206.0], [16.8, 209.0], [16.9, 209.0], [17.0, 209.0], [17.1, 209.0], [17.2, 209.0], [17.3, 210.0], [17.4, 210.0], [17.5, 210.0], [17.6, 210.0], [17.7, 210.0], [17.8, 210.0], [17.9, 213.0], [18.0, 213.0], [18.1, 213.0], [18.2, 213.0], [18.3, 213.0], [18.4, 217.0], [18.5, 217.0], [18.6, 217.0], [18.7, 217.0], [18.8, 217.0], [18.9, 217.0], [19.0, 218.0], [19.1, 218.0], [19.2, 218.0], [19.3, 218.0], [19.4, 218.0], [19.5, 218.0], [19.6, 218.0], [19.7, 218.0], [19.8, 218.0], [19.9, 218.0], [20.0, 219.0], [20.1, 219.0], [20.2, 219.0], [20.3, 219.0], [20.4, 219.0], [20.5, 219.0], [20.6, 220.0], [20.7, 220.0], [20.8, 220.0], [20.9, 220.0], [21.0, 220.0], [21.1, 221.0], [21.2, 221.0], [21.3, 221.0], [21.4, 221.0], [21.5, 221.0], [21.6, 221.0], [21.7, 223.0], [21.8, 223.0], [21.9, 223.0], [22.0, 223.0], [22.1, 223.0], [22.2, 224.0], [22.3, 224.0], [22.4, 224.0], [22.5, 224.0], [22.6, 224.0], [22.7, 224.0], [22.8, 225.0], [22.9, 225.0], [23.0, 225.0], [23.1, 225.0], [23.2, 225.0], [23.3, 226.0], [23.4, 226.0], [23.5, 226.0], [23.6, 226.0], [23.7, 226.0], [23.8, 227.0], [23.9, 227.0], [24.0, 227.0], [24.1, 227.0], [24.2, 227.0], [24.3, 227.0], [24.4, 228.0], [24.5, 228.0], [24.6, 228.0], [24.7, 228.0], [24.8, 228.0], [24.9, 233.0], [25.0, 233.0], [25.1, 233.0], [25.2, 233.0], [25.3, 233.0], [25.4, 233.0], [25.5, 237.0], [25.6, 237.0], [25.7, 237.0], [25.8, 237.0], [25.9, 237.0], [26.0, 238.0], [26.1, 238.0], [26.2, 238.0], [26.3, 238.0], [26.4, 238.0], [26.5, 238.0], [26.6, 238.0], [26.7, 238.0], [26.8, 238.0], [26.9, 238.0], [27.0, 238.0], [27.1, 238.0], [27.2, 238.0], [27.3, 238.0], [27.4, 238.0], [27.5, 238.0], [27.6, 238.0], [27.7, 238.0], [27.8, 238.0], [27.9, 238.0], [28.0, 238.0], [28.1, 238.0], [28.2, 242.0], [28.3, 242.0], [28.4, 242.0], [28.5, 242.0], [28.6, 242.0], [28.7, 243.0], [28.8, 243.0], [28.9, 243.0], [29.0, 243.0], [29.1, 243.0], [29.2, 246.0], [29.3, 246.0], [29.4, 246.0], [29.5, 246.0], [29.6, 246.0], [29.7, 246.0], [29.8, 248.0], [29.9, 248.0], [30.0, 248.0], [30.1, 248.0], [30.2, 248.0], [30.3, 256.0], [30.4, 256.0], [30.5, 256.0], [30.6, 256.0], [30.7, 256.0], [30.8, 256.0], [30.9, 259.0], [31.0, 259.0], [31.1, 259.0], [31.2, 259.0], [31.3, 259.0], [31.4, 267.0], [31.5, 267.0], [31.6, 267.0], [31.7, 267.0], [31.8, 267.0], [31.9, 273.0], [32.0, 273.0], [32.1, 273.0], [32.2, 273.0], [32.3, 273.0], [32.4, 273.0], [32.5, 273.0], [32.6, 273.0], [32.7, 273.0], [32.8, 273.0], [32.9, 273.0], [33.0, 274.0], [33.1, 274.0], [33.2, 274.0], [33.3, 274.0], [33.4, 274.0], [33.5, 274.0], [33.6, 275.0], [33.7, 275.0], [33.8, 275.0], [33.9, 275.0], [34.0, 275.0], [34.1, 278.0], [34.2, 278.0], [34.3, 278.0], [34.4, 278.0], [34.5, 278.0], [34.6, 285.0], [34.7, 285.0], [34.8, 285.0], [34.9, 285.0], [35.0, 285.0], [35.1, 285.0], [35.2, 291.0], [35.3, 291.0], [35.4, 291.0], [35.5, 291.0], [35.6, 291.0], [35.7, 294.0], [35.8, 294.0], [35.9, 294.0], [36.0, 294.0], [36.1, 294.0], [36.2, 294.0], [36.3, 298.0], [36.4, 298.0], [36.5, 298.0], [36.6, 298.0], [36.7, 298.0], [36.8, 306.0], [36.9, 306.0], [37.0, 306.0], [37.1, 306.0], [37.2, 306.0], [37.3, 310.0], [37.4, 310.0], [37.5, 310.0], [37.6, 310.0], [37.7, 310.0], [37.8, 310.0], [37.9, 311.0], [38.0, 311.0], [38.1, 311.0], [38.2, 311.0], [38.3, 311.0], [38.4, 313.0], [38.5, 313.0], [38.6, 313.0], [38.7, 313.0], [38.8, 313.0], [38.9, 313.0], [39.0, 317.0], [39.1, 317.0], [39.2, 317.0], [39.3, 317.0], [39.4, 317.0], [39.5, 319.0], [39.6, 319.0], [39.7, 319.0], [39.8, 319.0], [39.9, 319.0], [40.0, 321.0], [40.1, 321.0], [40.2, 321.0], [40.3, 321.0], [40.4, 321.0], [40.5, 321.0], [40.6, 322.0], [40.7, 322.0], [40.8, 322.0], [40.9, 322.0], [41.0, 322.0], [41.1, 322.0], [41.2, 322.0], [41.3, 322.0], [41.4, 322.0], [41.5, 322.0], [41.6, 322.0], [41.7, 322.0], [41.8, 322.0], [41.9, 322.0], [42.0, 322.0], [42.1, 322.0], [42.2, 333.0], [42.3, 333.0], [42.4, 333.0], [42.5, 333.0], [42.6, 333.0], [42.7, 333.0], [42.8, 333.0], [42.9, 333.0], [43.0, 333.0], [43.1, 333.0], [43.2, 333.0], [43.3, 339.0], [43.4, 339.0], [43.5, 339.0], [43.6, 339.0], [43.7, 339.0], [43.8, 341.0], [43.9, 341.0], [44.0, 341.0], [44.1, 341.0], [44.2, 341.0], [44.3, 341.0], [44.4, 345.0], [44.5, 345.0], [44.6, 345.0], [44.7, 345.0], [44.8, 345.0], [44.9, 357.0], [45.0, 357.0], [45.1, 357.0], [45.2, 357.0], [45.3, 357.0], [45.4, 357.0], [45.5, 358.0], [45.6, 358.0], [45.7, 358.0], [45.8, 358.0], [45.9, 358.0], [46.0, 359.0], [46.1, 359.0], [46.2, 359.0], [46.3, 359.0], [46.4, 359.0], [46.5, 370.0], [46.6, 370.0], [46.7, 370.0], [46.8, 370.0], [46.9, 370.0], [47.0, 370.0], [47.1, 387.0], [47.2, 387.0], [47.3, 387.0], [47.4, 387.0], [47.5, 387.0], [47.6, 399.0], [47.7, 399.0], [47.8, 399.0], [47.9, 399.0], [48.0, 399.0], [48.1, 399.0], [48.2, 402.0], [48.3, 402.0], [48.4, 402.0], [48.5, 402.0], [48.6, 402.0], [48.7, 409.0], [48.8, 409.0], [48.9, 409.0], [49.0, 409.0], [49.1, 409.0], [49.2, 413.0], [49.3, 413.0], [49.4, 413.0], [49.5, 413.0], [49.6, 413.0], [49.7, 413.0], [49.8, 413.0], [49.9, 413.0], [50.0, 413.0], [50.1, 413.0], [50.2, 413.0], [50.3, 429.0], [50.4, 429.0], [50.5, 429.0], [50.6, 429.0], [50.7, 429.0], [50.8, 429.0], [50.9, 436.0], [51.0, 436.0], [51.1, 436.0], [51.2, 436.0], [51.3, 436.0], [51.4, 436.0], [51.5, 436.0], [51.6, 436.0], [51.7, 436.0], [51.8, 436.0], [51.9, 455.0], [52.0, 455.0], [52.1, 455.0], [52.2, 455.0], [52.3, 455.0], [52.4, 455.0], [52.5, 455.0], [52.6, 455.0], [52.7, 455.0], [52.8, 455.0], [52.9, 455.0], [53.0, 458.0], [53.1, 458.0], [53.2, 458.0], [53.3, 458.0], [53.4, 458.0], [53.5, 458.0], [53.6, 476.0], [53.7, 476.0], [53.8, 476.0], [53.9, 476.0], [54.0, 476.0], [54.1, 484.0], [54.2, 484.0], [54.3, 484.0], [54.4, 484.0], [54.5, 484.0], [54.6, 493.0], [54.7, 493.0], [54.8, 493.0], [54.9, 493.0], [55.0, 493.0], [55.1, 493.0], [55.2, 495.0], [55.3, 495.0], [55.4, 495.0], [55.5, 495.0], [55.6, 495.0], [55.7, 505.0], [55.8, 505.0], [55.9, 505.0], [56.0, 505.0], [56.1, 505.0], [56.2, 505.0], [56.3, 520.0], [56.4, 520.0], [56.5, 520.0], [56.6, 520.0], [56.7, 520.0], [56.8, 528.0], [56.9, 528.0], [57.0, 528.0], [57.1, 528.0], [57.2, 528.0], [57.3, 539.0], [57.4, 539.0], [57.5, 539.0], [57.6, 539.0], [57.7, 539.0], [57.8, 539.0], [57.9, 547.0], [58.0, 547.0], [58.1, 547.0], [58.2, 547.0], [58.3, 547.0], [58.4, 562.0], [58.5, 562.0], [58.6, 562.0], [58.7, 562.0], [58.8, 562.0], [58.9, 562.0], [59.0, 570.0], [59.1, 570.0], [59.2, 570.0], [59.3, 570.0], [59.4, 570.0], [59.5, 572.0], [59.6, 572.0], [59.7, 572.0], [59.8, 572.0], [59.9, 572.0], [60.0, 573.0], [60.1, 573.0], [60.2, 573.0], [60.3, 573.0], [60.4, 573.0], [60.5, 573.0], [60.6, 578.0], [60.7, 578.0], [60.8, 578.0], [60.9, 578.0], [61.0, 578.0], [61.1, 586.0], [61.2, 586.0], [61.3, 586.0], [61.4, 586.0], [61.5, 586.0], [61.6, 586.0], [61.7, 590.0], [61.8, 590.0], [61.9, 590.0], [62.0, 590.0], [62.1, 590.0], [62.2, 593.0], [62.3, 593.0], [62.4, 593.0], [62.5, 593.0], [62.6, 593.0], [62.7, 593.0], [62.8, 603.0], [62.9, 603.0], [63.0, 603.0], [63.1, 603.0], [63.2, 603.0], [63.3, 603.0], [63.4, 603.0], [63.5, 603.0], [63.6, 603.0], [63.7, 603.0], [63.8, 625.0], [63.9, 625.0], [64.0, 625.0], [64.1, 625.0], [64.2, 625.0], [64.3, 625.0], [64.4, 628.0], [64.5, 628.0], [64.6, 628.0], [64.7, 628.0], [64.8, 628.0], [64.9, 641.0], [65.0, 641.0], [65.1, 641.0], [65.2, 641.0], [65.3, 641.0], [65.4, 641.0], [65.5, 643.0], [65.6, 643.0], [65.7, 643.0], [65.8, 643.0], [65.9, 643.0], [66.0, 686.0], [66.1, 686.0], [66.2, 686.0], [66.3, 686.0], [66.4, 686.0], [66.5, 725.0], [66.6, 725.0], [66.7, 725.0], [66.8, 725.0], [66.9, 725.0], [67.0, 725.0], [67.1, 728.0], [67.2, 728.0], [67.3, 728.0], [67.4, 728.0], [67.5, 728.0], [67.6, 776.0], [67.7, 776.0], [67.8, 776.0], [67.9, 776.0], [68.0, 776.0], [68.1, 776.0], [68.2, 792.0], [68.3, 792.0], [68.4, 792.0], [68.5, 792.0], [68.6, 792.0], [68.7, 793.0], [68.8, 793.0], [68.9, 793.0], [69.0, 793.0], [69.1, 793.0], [69.2, 794.0], [69.3, 794.0], [69.4, 794.0], [69.5, 794.0], [69.6, 794.0], [69.7, 794.0], [69.8, 812.0], [69.9, 812.0], [70.0, 812.0], [70.1, 812.0], [70.2, 812.0], [70.3, 813.0], [70.4, 813.0], [70.5, 813.0], [70.6, 813.0], [70.7, 813.0], [70.8, 813.0], [70.9, 822.0], [71.0, 822.0], [71.1, 822.0], [71.2, 822.0], [71.3, 822.0], [71.4, 834.0], [71.5, 834.0], [71.6, 834.0], [71.7, 834.0], [71.8, 834.0], [71.9, 841.0], [72.0, 841.0], [72.1, 841.0], [72.2, 841.0], [72.3, 841.0], [72.4, 841.0], [72.5, 857.0], [72.6, 857.0], [72.7, 857.0], [72.8, 857.0], [72.9, 857.0], [73.0, 860.0], [73.1, 860.0], [73.2, 860.0], [73.3, 860.0], [73.4, 860.0], [73.5, 860.0], [73.6, 939.0], [73.7, 939.0], [73.8, 939.0], [73.9, 939.0], [74.0, 939.0], [74.1, 955.0], [74.2, 955.0], [74.3, 955.0], [74.4, 955.0], [74.5, 955.0], [74.6, 958.0], [74.7, 958.0], [74.8, 958.0], [74.9, 958.0], [75.0, 958.0], [75.1, 958.0], [75.2, 962.0], [75.3, 962.0], [75.4, 962.0], [75.5, 962.0], [75.6, 962.0], [75.7, 1008.0], [75.8, 1008.0], [75.9, 1008.0], [76.0, 1008.0], [76.1, 1008.0], [76.2, 1008.0], [76.3, 1051.0], [76.4, 1051.0], [76.5, 1051.0], [76.6, 1051.0], [76.7, 1051.0], [76.8, 1087.0], [76.9, 1087.0], [77.0, 1087.0], [77.1, 1087.0], [77.2, 1087.0], [77.3, 1091.0], [77.4, 1091.0], [77.5, 1091.0], [77.6, 1091.0], [77.7, 1091.0], [77.8, 1091.0], [77.9, 1174.0], [78.0, 1174.0], [78.1, 1174.0], [78.2, 1174.0], [78.3, 1174.0], [78.4, 1199.0], [78.5, 1199.0], [78.6, 1199.0], [78.7, 1199.0], [78.8, 1199.0], [78.9, 1199.0], [79.0, 1244.0], [79.1, 1244.0], [79.2, 1244.0], [79.3, 1244.0], [79.4, 1244.0], [79.5, 1281.0], [79.6, 1281.0], [79.7, 1281.0], [79.8, 1281.0], [79.9, 1281.0], [80.0, 1281.0], [80.1, 1328.0], [80.2, 1328.0], [80.3, 1328.0], [80.4, 1328.0], [80.5, 1328.0], [80.6, 1350.0], [80.7, 1350.0], [80.8, 1350.0], [80.9, 1350.0], [81.0, 1350.0], [81.1, 1374.0], [81.2, 1374.0], [81.3, 1374.0], [81.4, 1374.0], [81.5, 1374.0], [81.6, 1374.0], [81.7, 1380.0], [81.8, 1380.0], [81.9, 1380.0], [82.0, 1380.0], [82.1, 1380.0], [82.2, 1426.0], [82.3, 1426.0], [82.4, 1426.0], [82.5, 1426.0], [82.6, 1426.0], [82.7, 1426.0], [82.8, 1433.0], [82.9, 1433.0], [83.0, 1433.0], [83.1, 1433.0], [83.2, 1433.0], [83.3, 1668.0], [83.4, 1668.0], [83.5, 1668.0], [83.6, 1668.0], [83.7, 1668.0], [83.8, 1703.0], [83.9, 1703.0], [84.0, 1703.0], [84.1, 1703.0], [84.2, 1703.0], [84.3, 1703.0], [84.4, 1715.0], [84.5, 1715.0], [84.6, 1715.0], [84.7, 1715.0], [84.8, 1715.0], [84.9, 1746.0], [85.0, 1746.0], [85.1, 1746.0], [85.2, 1746.0], [85.3, 1746.0], [85.4, 1746.0], [85.5, 1754.0], [85.6, 1754.0], [85.7, 1754.0], [85.8, 1754.0], [85.9, 1754.0], [86.0, 1756.0], [86.1, 1756.0], [86.2, 1756.0], [86.3, 1756.0], [86.4, 1756.0], [86.5, 1796.0], [86.6, 1796.0], [86.7, 1796.0], [86.8, 1796.0], [86.9, 1796.0], [87.0, 1796.0], [87.1, 1825.0], [87.2, 1825.0], [87.3, 1825.0], [87.4, 1825.0], [87.5, 1825.0], [87.6, 1878.0], [87.7, 1878.0], [87.8, 1878.0], [87.9, 1878.0], [88.0, 1878.0], [88.1, 1878.0], [88.2, 1926.0], [88.3, 1926.0], [88.4, 1926.0], [88.5, 1926.0], [88.6, 1926.0], [88.7, 1934.0], [88.8, 1934.0], [88.9, 1934.0], [89.0, 1934.0], [89.1, 1934.0], [89.2, 1941.0], [89.3, 1941.0], [89.4, 1941.0], [89.5, 1941.0], [89.6, 1941.0], [89.7, 1941.0], [89.8, 1974.0], [89.9, 1974.0], [90.0, 1974.0], [90.1, 1974.0], [90.2, 1974.0], [90.3, 2041.0], [90.4, 2041.0], [90.5, 2041.0], [90.6, 2041.0], [90.7, 2041.0], [90.8, 2041.0], [90.9, 2085.0], [91.0, 2085.0], [91.1, 2085.0], [91.2, 2085.0], [91.3, 2085.0], [91.4, 2108.0], [91.5, 2108.0], [91.6, 2108.0], [91.7, 2108.0], [91.8, 2108.0], [91.9, 2200.0], [92.0, 2200.0], [92.1, 2200.0], [92.2, 2200.0], [92.3, 2200.0], [92.4, 2200.0], [92.5, 2285.0], [92.6, 2285.0], [92.7, 2285.0], [92.8, 2285.0], [92.9, 2285.0], [93.0, 2346.0], [93.1, 2346.0], [93.2, 2346.0], [93.3, 2346.0], [93.4, 2346.0], [93.5, 2346.0], [93.6, 2384.0], [93.7, 2384.0], [93.8, 2384.0], [93.9, 2384.0], [94.0, 2384.0], [94.1, 2543.0], [94.2, 2543.0], [94.3, 2543.0], [94.4, 2543.0], [94.5, 2543.0], [94.6, 2613.0], [94.7, 2613.0], [94.8, 2613.0], [94.9, 2613.0], [95.0, 2613.0], [95.1, 2613.0], [95.2, 2627.0], [95.3, 2627.0], [95.4, 2627.0], [95.5, 2627.0], [95.6, 2627.0], [95.7, 2653.0], [95.8, 2653.0], [95.9, 2653.0], [96.0, 2653.0], [96.1, 2653.0], [96.2, 2653.0], [96.3, 2656.0], [96.4, 2656.0], [96.5, 2656.0], [96.6, 2656.0], [96.7, 2656.0], [96.8, 2670.0], [96.9, 2670.0], [97.0, 2670.0], [97.1, 2670.0], [97.2, 2670.0], [97.3, 2783.0], [97.4, 2783.0], [97.5, 2783.0], [97.6, 2783.0], [97.7, 2783.0], [97.8, 2783.0], [97.9, 2856.0], [98.0, 2856.0], [98.1, 2856.0], [98.2, 2856.0], [98.3, 2856.0], [98.4, 2878.0], [98.5, 2878.0], [98.6, 2878.0], [98.7, 2878.0], [98.8, 2878.0], [98.9, 2878.0], [99.0, 2966.0], [99.1, 2966.0], [99.2, 2966.0], [99.3, 2966.0], [99.4, 2966.0], [99.5, 3122.0], [99.6, 3122.0], [99.7, 3122.0], [99.8, 3122.0], [99.9, 3122.0], [100.0, 3122.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 1.0], [41.8, 1.0], [41.9, 1.0], [42.0, 1.0], [42.1, 1.0], [42.2, 1.0], [42.3, 1.0], [42.4, 1.0], [42.5, 1.0], [42.6, 1.0], [42.7, 1.0], [42.8, 1.0], [42.9, 1.0], [43.0, 1.0], [43.1, 1.0], [43.2, 1.0], [43.3, 1.0], [43.4, 1.0], [43.5, 1.0], [43.6, 1.0], [43.7, 1.0], [43.8, 1.0], [43.9, 1.0], [44.0, 1.0], [44.1, 1.0], [44.2, 1.0], [44.3, 1.0], [44.4, 1.0], [44.5, 1.0], [44.6, 1.0], [44.7, 1.0], [44.8, 1.0], [44.9, 1.0], [45.0, 1.0], [45.1, 1.0], [45.2, 1.0], [45.3, 1.0], [45.4, 1.0], [45.5, 1.0], [45.6, 1.0], [45.7, 1.0], [45.8, 1.0], [45.9, 1.0], [46.0, 1.0], [46.1, 1.0], [46.2, 1.0], [46.3, 1.0], [46.4, 1.0], [46.5, 1.0], [46.6, 1.0], [46.7, 1.0], [46.8, 1.0], [46.9, 1.0], [47.0, 1.0], [47.1, 1.0], [47.2, 1.0], [47.3, 1.0], [47.4, 1.0], [47.5, 1.0], [47.6, 1.0], [47.7, 1.0], [47.8, 1.0], [47.9, 1.0], [48.0, 1.0], [48.1, 1.0], [48.2, 1.0], [48.3, 1.0], [48.4, 1.0], [48.5, 1.0], [48.6, 1.0], [48.7, 1.0], [48.8, 1.0], [48.9, 1.0], [49.0, 1.0], [49.1, 1.0], [49.2, 1.0], [49.3, 1.0], [49.4, 1.0], [49.5, 1.0], [49.6, 1.0], [49.7, 1.0], [49.8, 1.0], [49.9, 1.0], [50.0, 1.0], [50.1, 1.0], [50.2, 1.0], [50.3, 1.0], [50.4, 1.0], [50.5, 1.0], [50.6, 1.0], [50.7, 1.0], [50.8, 1.0], [50.9, 1.0], [51.0, 1.0], [51.1, 1.0], [51.2, 1.0], [51.3, 1.0], [51.4, 1.0], [51.5, 1.0], [51.6, 1.0], [51.7, 1.0], [51.8, 1.0], [51.9, 1.0], [52.0, 1.0], [52.1, 1.0], [52.2, 1.0], [52.3, 1.0], [52.4, 1.0], [52.5, 1.0], [52.6, 1.0], [52.7, 1.0], [52.8, 1.0], [52.9, 1.0], [53.0, 1.0], [53.1, 1.0], [53.2, 1.0], [53.3, 1.0], [53.4, 1.0], [53.5, 1.0], [53.6, 1.0], [53.7, 1.0], [53.8, 1.0], [53.9, 1.0], [54.0, 1.0], [54.1, 1.0], [54.2, 1.0], [54.3, 1.0], [54.4, 1.0], [54.5, 1.0], [54.6, 1.0], [54.7, 1.0], [54.8, 1.0], [54.9, 1.0], [55.0, 1.0], [55.1, 1.0], [55.2, 1.0], [55.3, 1.0], [55.4, 1.0], [55.5, 1.0], [55.6, 1.0], [55.7, 1.0], [55.8, 1.0], [55.9, 1.0], [56.0, 1.0], [56.1, 1.0], [56.2, 1.0], [56.3, 1.0], [56.4, 1.0], [56.5, 1.0], [56.6, 1.0], [56.7, 1.0], [56.8, 1.0], [56.9, 1.0], [57.0, 1.0], [57.1, 1.0], [57.2, 1.0], [57.3, 1.0], [57.4, 1.0], [57.5, 1.0], [57.6, 1.0], [57.7, 1.0], [57.8, 1.0], [57.9, 1.0], [58.0, 1.0], [58.1, 1.0], [58.2, 1.0], [58.3, 1.0], [58.4, 1.0], [58.5, 1.0], [58.6, 1.0], [58.7, 1.0], [58.8, 1.0], [58.9, 1.0], [59.0, 1.0], [59.1, 1.0], [59.2, 1.0], [59.3, 1.0], [59.4, 1.0], [59.5, 1.0], [59.6, 1.0], [59.7, 1.0], [59.8, 1.0], [59.9, 1.0], [60.0, 1.0], [60.1, 1.0], [60.2, 1.0], [60.3, 2.0], [60.4, 2.0], [60.5, 2.0], [60.6, 2.0], [60.7, 2.0], [60.8, 2.0], [60.9, 2.0], [61.0, 2.0], [61.1, 2.0], [61.2, 2.0], [61.3, 2.0], [61.4, 2.0], [61.5, 2.0], [61.6, 2.0], [61.7, 2.0], [61.8, 2.0], [61.9, 2.0], [62.0, 2.0], [62.1, 2.0], [62.2, 2.0], [62.3, 2.0], [62.4, 2.0], [62.5, 2.0], [62.6, 2.0], [62.7, 2.0], [62.8, 2.0], [62.9, 2.0], [63.0, 2.0], [63.1, 2.0], [63.2, 2.0], [63.3, 2.0], [63.4, 2.0], [63.5, 2.0], [63.6, 2.0], [63.7, 2.0], [63.8, 2.0], [63.9, 2.0], [64.0, 2.0], [64.1, 2.0], [64.2, 2.0], [64.3, 2.0], [64.4, 2.0], [64.5, 2.0], [64.6, 3.0], [64.7, 3.0], [64.8, 3.0], [64.9, 3.0], [65.0, 3.0], [65.1, 4.0], [65.2, 4.0], [65.3, 4.0], [65.4, 4.0], [65.5, 5.0], [65.6, 5.0], [65.7, 5.0], [65.8, 5.0], [65.9, 6.0], [66.0, 6.0], [66.1, 8.0], [66.2, 10.0], [66.3, 17.0], [66.4, 29.0], [66.5, 38.0], [66.6, 40.0], [66.7, 41.0], [66.8, 43.0], [66.9, 44.0], [67.0, 46.0], [67.1, 48.0], [67.2, 50.0], [67.3, 51.0], [67.4, 52.0], [67.5, 54.0], [67.6, 55.0], [67.7, 57.0], [67.8, 58.0], [67.9, 60.0], [68.0, 62.0], [68.1, 65.0], [68.2, 67.0], [68.3, 72.0], [68.4, 78.0], [68.5, 84.0], [68.6, 94.0], [68.7, 104.0], [68.8, 128.0], [68.9, 166.0], [69.0, 217.0], [69.1, 275.0], [69.2, 333.0], [69.3, 370.0], [69.4, 402.0], [69.5, 432.0], [69.6, 466.0], [69.7, 493.0], [69.8, 523.0], [69.9, 554.0], [70.0, 581.0], [70.1, 602.0], [70.2, 620.0], [70.3, 641.0], [70.4, 656.0], [70.5, 675.0], [70.6, 705.0], [70.7, 717.0], [70.8, 738.0], [70.9, 759.0], [71.0, 778.0], [71.1, 793.0], [71.2, 809.0], [71.3, 828.0], [71.4, 847.0], [71.5, 862.0], [71.6, 872.0], [71.7, 891.0], [71.8, 906.0], [71.9, 925.0], [72.0, 943.0], [72.1, 957.0], [72.2, 973.0], [72.3, 991.0], [72.4, 1003.0], [72.5, 1019.0], [72.6, 1038.0], [72.7, 1052.0], [72.8, 1065.0], [72.9, 1081.0], [73.0, 1095.0], [73.1, 1114.0], [73.2, 1131.0], [73.3, 1152.0], [73.4, 1164.0], [73.5, 1177.0], [73.6, 1190.0], [73.7, 1202.0], [73.8, 1214.0], [73.9, 1232.0], [74.0, 1244.0], [74.1, 1263.0], [74.2, 1279.0], [74.3, 1292.0], [74.4, 1310.0], [74.5, 1319.0], [74.6, 1336.0], [74.7, 1351.0], [74.8, 1365.0], [74.9, 1382.0], [75.0, 1408.0], [75.1, 1423.0], [75.2, 1434.0], [75.3, 1446.0], [75.4, 1457.0], [75.5, 1473.0], [75.6, 1487.0], [75.7, 1503.0], [75.8, 1524.0], [75.9, 1548.0], [76.0, 1562.0], [76.1, 1576.0], [76.2, 1589.0], [76.3, 1603.0], [76.4, 1617.0], [76.5, 1634.0], [76.6, 1649.0], [76.7, 1662.0], [76.8, 1679.0], [76.9, 1693.0], [77.0, 1709.0], [77.1, 1719.0], [77.2, 1734.0], [77.3, 1749.0], [77.4, 1762.0], [77.5, 1778.0], [77.6, 1791.0], [77.7, 1806.0], [77.8, 1821.0], [77.9, 1836.0], [78.0, 1852.0], [78.1, 1873.0], [78.2, 1884.0], [78.3, 1891.0], [78.4, 1904.0], [78.5, 1915.0], [78.6, 1923.0], [78.7, 1943.0], [78.8, 1957.0], [78.9, 1970.0], [79.0, 1984.0], [79.1, 1998.0], [79.2, 2013.0], [79.3, 2027.0], [79.4, 2040.0], [79.5, 2057.0], [79.6, 2075.0], [79.7, 2091.0], [79.8, 2110.0], [79.9, 2127.0], [80.0, 2147.0], [80.1, 2160.0], [80.2, 2181.0], [80.3, 2195.0], [80.4, 2207.0], [80.5, 2222.0], [80.6, 2238.0], [80.7, 2257.0], [80.8, 2273.0], [80.9, 2294.0], [81.0, 2311.0], [81.1, 2325.0], [81.2, 2339.0], [81.3, 2352.0], [81.4, 2362.0], [81.5, 2377.0], [81.6, 2388.0], [81.7, 2402.0], [81.8, 2414.0], [81.9, 2431.0], [82.0, 2443.0], [82.1, 2456.0], [82.2, 2468.0], [82.3, 2482.0], [82.4, 2493.0], [82.5, 2501.0], [82.6, 2508.0], [82.7, 2521.0], [82.8, 2531.0], [82.9, 2540.0], [83.0, 2550.0], [83.1, 2561.0], [83.2, 2572.0], [83.3, 2587.0], [83.4, 2596.0], [83.5, 2605.0], [83.6, 2612.0], [83.7, 2624.0], [83.8, 2633.0], [83.9, 2642.0], [84.0, 2652.0], [84.1, 2661.0], [84.2, 2670.0], [84.3, 2679.0], [84.4, 2690.0], [84.5, 2705.0], [84.6, 2717.0], [84.7, 2728.0], [84.8, 2741.0], [84.9, 2749.0], [85.0, 2756.0], [85.1, 2771.0], [85.2, 2780.0], [85.3, 2791.0], [85.4, 2802.0], [85.5, 2816.0], [85.6, 2828.0], [85.7, 2836.0], [85.8, 2848.0], [85.9, 2857.0], [86.0, 2865.0], [86.1, 2874.0], [86.2, 2882.0], [86.3, 2893.0], [86.4, 2909.0], [86.5, 2916.0], [86.6, 2923.0], [86.7, 2936.0], [86.8, 2945.0], [86.9, 2955.0], [87.0, 2963.0], [87.1, 2974.0], [87.2, 2982.0], [87.3, 2992.0], [87.4, 3000.0], [87.5, 3009.0], [87.6, 3019.0], [87.7, 3031.0], [87.8, 3041.0], [87.9, 3053.0], [88.0, 3060.0], [88.1, 3068.0], [88.2, 3075.0], [88.3, 3087.0], [88.4, 3093.0], [88.5, 3101.0], [88.6, 3112.0], [88.7, 3119.0], [88.8, 3129.0], [88.9, 3138.0], [89.0, 3147.0], [89.1, 3153.0], [89.2, 3168.0], [89.3, 3181.0], [89.4, 3187.0], [89.5, 3193.0], [89.6, 3199.0], [89.7, 3210.0], [89.8, 3217.0], [89.9, 3230.0], [90.0, 3235.0], [90.1, 3245.0], [90.2, 3255.0], [90.3, 3260.0], [90.4, 3269.0], [90.5, 3276.0], [90.6, 3281.0], [90.7, 3291.0], [90.8, 3302.0], [90.9, 3310.0], [91.0, 3321.0], [91.1, 3331.0], [91.2, 3340.0], [91.3, 3349.0], [91.4, 3358.0], [91.5, 3371.0], [91.6, 3382.0], [91.7, 3388.0], [91.8, 3395.0], [91.9, 3401.0], [92.0, 3410.0], [92.1, 3425.0], [92.2, 3432.0], [92.3, 3442.0], [92.4, 3451.0], [92.5, 3461.0], [92.6, 3470.0], [92.7, 3480.0], [92.8, 3490.0], [92.9, 3501.0], [93.0, 3508.0], [93.1, 3523.0], [93.2, 3534.0], [93.3, 3547.0], [93.4, 3555.0], [93.5, 3565.0], [93.6, 3575.0], [93.7, 3591.0], [93.8, 3600.0], [93.9, 3613.0], [94.0, 3624.0], [94.1, 3639.0], [94.2, 3650.0], [94.3, 3665.0], [94.4, 3684.0], [94.5, 3697.0], [94.6, 3714.0], [94.7, 3729.0], [94.8, 3746.0], [94.9, 3762.0], [95.0, 3780.0], [95.1, 3803.0], [95.2, 3819.0], [95.3, 3845.0], [95.4, 3867.0], [95.5, 3888.0], [95.6, 3903.0], [95.7, 3924.0], [95.8, 3960.0], [95.9, 3998.0], [96.0, 4031.0], [96.1, 4058.0], [96.2, 4094.0], [96.3, 4138.0], [96.4, 4175.0], [96.5, 4224.0], [96.6, 4252.0], [96.7, 4286.0], [96.8, 4328.0], [96.9, 4360.0], [97.0, 4382.0], [97.1, 4410.0], [97.2, 4454.0], [97.3, 4512.0], [97.4, 4538.0], [97.5, 4608.0], [97.6, 4640.0], [97.7, 4673.0], [97.8, 4721.0], [97.9, 4763.0], [98.0, 4812.0], [98.1, 4853.0], [98.2, 4910.0], [98.3, 4959.0], [98.4, 4994.0], [98.5, 5070.0], [98.6, 5168.0], [98.7, 5262.0], [98.8, 5347.0], [98.9, 5627.0], [99.0, 6415.0], [99.1, 16006.0], [99.2, 16006.0], [99.3, 16008.0], [99.4, 20004.0], [99.5, 20005.0], [99.6, 20005.0], [99.7, 20006.0], [99.8, 20006.0], [99.9, 20006.0], [100.0, 20008.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 13175.0, "series": [{"data": [[0.0, 13175.0], [600.0, 101.0], [700.0, 82.0], [800.0, 75.0], [900.0, 110.0], [1000.0, 112.0], [1100.0, 105.0], [1200.0, 100.0], [1300.0, 84.0], [1400.0, 113.0], [1500.0, 116.0], [1600.0, 118.0], [1700.0, 126.0], [1800.0, 132.0], [1900.0, 121.0], [2000.0, 106.0], [2100.0, 119.0], [2200.0, 105.0], [2300.0, 103.0], [2400.0, 139.0], [2500.0, 177.0], [2600.0, 189.0], [2700.0, 176.0], [2800.0, 209.0], [2900.0, 159.0], [3000.0, 201.0], [3100.0, 205.0], [3200.0, 195.0], [3300.0, 177.0], [3400.0, 171.0], [3500.0, 152.0], [3600.0, 131.0], [3700.0, 115.0], [3800.0, 79.0], [3900.0, 77.0], [4000.0, 69.0], [4300.0, 41.0], [4100.0, 48.0], [4200.0, 55.0], [4400.0, 50.0], [4500.0, 50.0], [4600.0, 52.0], [4700.0, 36.0], [4800.0, 47.0], [4900.0, 42.0], [5000.0, 23.0], [5100.0, 23.0], [5300.0, 14.0], [5200.0, 17.0], [5400.0, 11.0], [5600.0, 5.0], [5500.0, 10.0], [5700.0, 1.0], [5800.0, 1.0], [6000.0, 1.0], [5900.0, 1.0], [100.0, 73.0], [200.0, 27.0], [300.0, 36.0], [400.0, 53.0], [500.0, 59.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[600.0, 7.0], [700.0, 6.0], [800.0, 7.0], [900.0, 4.0], [1000.0, 4.0], [1100.0, 2.0], [1200.0, 2.0], [1300.0, 4.0], [1400.0, 2.0], [100.0, 23.0], [1600.0, 1.0], [1700.0, 6.0], [1800.0, 2.0], [1900.0, 4.0], [2000.0, 2.0], [2100.0, 1.0], [2200.0, 2.0], [2300.0, 2.0], [2500.0, 1.0], [2600.0, 5.0], [2800.0, 2.0], [2700.0, 1.0], [2900.0, 1.0], [3100.0, 1.0], [200.0, 45.0], [300.0, 21.0], [400.0, 14.0], [500.0, 13.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 12705.0], [600.0, 89.0], [700.0, 104.0], [800.0, 112.0], [900.0, 120.0], [1000.0, 116.0], [1100.0, 123.0], [1200.0, 124.0], [1300.0, 109.0], [1400.0, 138.0], [1500.0, 107.0], [1600.0, 124.0], [1700.0, 135.0], [1800.0, 129.0], [1900.0, 138.0], [2000.0, 115.0], [2100.0, 109.0], [2200.0, 115.0], [2300.0, 134.0], [2400.0, 150.0], [2500.0, 176.0], [2600.0, 193.0], [2700.0, 166.0], [2800.0, 181.0], [2900.0, 191.0], [3000.0, 204.0], [3100.0, 207.0], [3300.0, 205.0], [3200.0, 216.0], [3400.0, 185.0], [3500.0, 170.0], [3600.0, 133.0], [3700.0, 105.0], [3800.0, 92.0], [3900.0, 61.0], [4000.0, 56.0], [4100.0, 47.0], [4200.0, 48.0], [4300.0, 66.0], [4500.0, 39.0], [4600.0, 50.0], [4400.0, 37.0], [4700.0, 40.0], [4800.0, 39.0], [5000.0, 22.0], [5100.0, 18.0], [4900.0, 41.0], [5300.0, 19.0], [5200.0, 20.0], [5600.0, 9.0], [5400.0, 6.0], [5500.0, 2.0], [5700.0, 3.0], [5800.0, 2.0], [6000.0, 2.0], [6100.0, 2.0], [5900.0, 2.0], [6300.0, 1.0], [6400.0, 1.0], [16000.0, 57.0], [20000.0, 128.0], [100.0, 55.0], [200.0, 32.0], [300.0, 44.0], [400.0, 63.0], [500.0, 68.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2084.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 24606.0, "series": [{"data": [[0.0, 2109.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2084.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 8386.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 24606.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 64.12499999999999, "minX": 1.58543586E12, "maxY": 185.0, "series": [{"data": [[1.58543586E12, 64.12499999999999], [1.58543634E12, 185.0], [1.58543616E12, 185.0], [1.58543622E12, 185.0], [1.58543604E12, 185.0], [1.5854361E12, 185.0], [1.58543592E12, 168.4261946902656], [1.5854364E12, 172.70453707119148], [1.58543598E12, 185.0], [1.58543628E12, 185.0], [1.58543646E12, 75.49394673123486]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543646E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 5.0, "maxY": 2966.0, "series": [{"data": [[5.0, 52.4], [6.0, 52.0], [10.0, 45.666666666666664], [11.0, 49.0], [13.0, 67.0], [15.0, 44.0], [17.0, 47.0], [18.0, 57.833333333333336], [19.0, 50.4], [20.0, 68.5], [21.0, 60.0], [23.0, 50.0], [24.0, 55.25], [25.0, 68.83333333333334], [27.0, 47.0], [28.0, 60.666666666666664], [29.0, 69.0], [30.0, 49.8], [31.0, 62.42857142857143], [32.0, 91.33333333333333], [33.0, 100.33333333333333], [34.0, 68.8], [35.0, 61.666666666666664], [36.0, 46.0], [37.0, 39.0], [38.0, 60.75], [39.0, 69.5], [40.0, 47.5], [41.0, 39.5], [42.0, 48.5], [43.0, 55.28571428571429], [44.0, 66.76923076923077], [45.0, 55.14285714285714], [46.0, 48.666666666666664], [47.0, 81.0909090909091], [48.0, 89.33333333333333], [49.0, 59.25], [50.0, 58.57142857142858], [51.0, 72.00000000000001], [52.0, 51.0], [53.0, 49.5], [54.0, 73.55555555555556], [55.0, 86.8], [56.0, 68.57142857142857], [57.0, 52.666666666666664], [59.0, 128.25], [60.0, 68.75], [61.0, 64.75], [62.0, 50.5], [63.0, 74.0], [64.0, 93.29411764705881], [65.0, 82.27272727272727], [66.0, 87.46153846153845], [67.0, 1052.030303030303], [68.0, 93.83333333333333], [69.0, 81.75], [70.0, 52.5], [71.0, 51.857142857142854], [72.0, 10.272727272727275], [73.0, 52.0], [74.0, 58.75], [75.0, 31.428571428571427], [76.0, 47.5], [77.0, 62.14285714285715], [78.0, 36.69230769230769], [79.0, 63.166666666666664], [80.0, 69.0], [81.0, 57.5], [82.0, 42.35714285714286], [83.0, 589.5454545454545], [84.0, 121.11111111111111], [85.0, 51.64285714285714], [86.0, 91.625], [87.0, 36.64999999999999], [88.0, 226.10526315789474], [89.0, 177.5], [90.0, 209.84375], [91.0, 443.70000000000005], [92.0, 205.66666666666666], [93.0, 546.125], [94.0, 109.6086956521739], [95.0, 37.5], [96.0, 27.478260869565208], [97.0, 97.28571428571429], [98.0, 364.62500000000006], [99.0, 661.0], [100.0, 296.4], [101.0, 726.0], [102.0, 547.8888888888889], [103.0, 722.1428571428572], [104.0, 145.77777777777774], [105.0, 1836.5], [106.0, 248.59999999999997], [107.0, 751.9333333333332], [108.0, 99.66666666666666], [109.0, 396.79999999999984], [110.0, 752.6], [111.0, 378.54545454545445], [112.0, 195.06451612903226], [113.0, 261.6486486486487], [114.0, 247.05000000000007], [115.0, 561.4545454545455], [116.0, 396.28571428571433], [117.0, 127.5], [118.0, 317.45454545454544], [119.0, 278.1739130434782], [120.0, 171.05263157894737], [121.0, 230.82352941176467], [122.0, 548.0952380952381], [123.0, 652.25], [124.0, 261.54545454545456], [125.0, 228.57142857142853], [126.0, 252.99999999999994], [127.0, 778.8], [128.0, 966.3333333333333], [129.0, 242.45762711864413], [130.0, 382.96296296296305], [131.0, 435.68000000000006], [132.0, 533.0000000000002], [133.0, 709.3750000000001], [134.0, 287.37499999999994], [135.0, 672.1428571428571], [136.0, 1100.2], [137.0, 909.2000000000002], [138.0, 220.15624999999994], [139.0, 1067.2727272727273], [140.0, 149.1612903225807], [141.0, 539.8], [142.0, 241.1428571428571], [143.0, 1490.7777777777778], [144.0, 463.57142857142867], [145.0, 177.42857142857142], [146.0, 1502.6250000000002], [147.0, 1149.0714285714284], [148.0, 1672.4], [149.0, 835.2499999999999], [150.0, 1477.5833333333335], [151.0, 2105.0], [152.0, 1037.952380952381], [153.0, 1341.8], [155.0, 226.05970149253744], [156.0, 407.34146341463406], [157.0, 494.2631578947368], [158.0, 1463.3636363636363], [159.0, 878.1999999999999], [154.0, 1.0], [160.0, 1658.5], [161.0, 269.98360655737696], [162.0, 82.12195121951218], [163.0, 928.4666666666667], [164.0, 508.375], [165.0, 871.875], [166.0, 2014.8], [167.0, 471.27272727272754], [168.0, 577.8235294117649], [169.0, 1211.0], [170.0, 356.57142857142856], [171.0, 148.5909090909091], [172.0, 737.7142857142858], [173.0, 1503.533333333333], [174.0, 322.49999999999994], [175.0, 606.7777777777778], [176.0, 110.7763157894737], [177.0, 245.62068965517236], [178.0, 950.4210526315788], [179.0, 1062.0666666666666], [180.0, 1377.5555555555554], [181.0, 130.43750000000003], [182.0, 128.74509803921572], [183.0, 88.15789473684212], [184.0, 219.04477611940297], [185.0, 810.5017517517534]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[177.0861621621619, 746.6697297297335]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[10.0, 2685.75], [11.0, 1124.142857142857], [12.0, 161.0], [13.0, 159.0], [14.0, 201.0], [15.0, 170.0], [16.0, 206.0], [17.0, 165.0], [18.0, 198.0], [19.0, 179.0], [20.0, 167.0], [21.0, 217.0], [22.0, 179.0], [23.0, 321.0], [24.0, 238.0], [25.0, 220.0], [26.0, 213.0], [27.0, 242.0], [29.0, 277.0], [30.0, 201.0], [31.0, 228.0], [32.0, 206.0], [33.0, 185.0], [34.0, 182.0], [35.0, 152.0], [36.0, 172.0], [37.0, 219.0], [38.0, 171.0], [39.0, 259.0], [40.0, 192.0], [41.0, 224.0], [42.0, 202.0], [43.0, 173.0], [44.0, 278.0], [45.0, 183.0], [46.0, 195.0], [47.0, 200.0], [48.0, 194.0], [49.0, 238.0], [50.0, 218.0], [51.0, 200.0], [52.0, 225.0], [53.0, 209.0], [54.0, 248.0], [56.0, 345.0], [57.0, 170.0], [58.0, 173.0], [60.0, 323.5], [61.0, 285.0], [62.0, 195.0], [63.0, 319.0], [64.0, 275.0], [66.0, 528.0], [67.0, 593.0], [68.0, 570.0], [69.0, 367.5], [70.0, 238.0], [71.0, 199.0], [72.0, 256.0], [73.0, 322.0], [74.0, 203.0], [75.0, 333.0], [76.0, 237.0], [77.0, 317.0], [79.0, 393.0], [81.0, 319.5], [83.0, 288.0], [84.0, 227.0], [85.0, 246.0], [86.0, 322.0], [88.0, 315.5], [89.0, 233.0], [91.0, 578.0], [92.0, 387.0], [93.0, 303.0], [94.0, 273.0], [95.0, 294.0], [97.0, 321.5], [98.0, 311.0], [99.0, 180.0], [101.0, 520.0], [103.0, 648.5], [104.0, 430.0], [106.0, 625.0], [108.0, 725.0], [109.0, 341.0], [110.0, 505.0], [111.0, 603.0], [112.0, 407.5], [113.0, 273.0], [115.0, 370.0], [116.0, 329.5], [118.0, 436.0], [119.0, 455.0], [120.0, 484.0], [121.0, 402.0], [122.0, 590.0], [123.0, 603.0], [124.0, 455.0], [125.0, 539.0], [127.0, 794.0], [128.0, 728.0], [129.0, 860.0], [130.0, 812.0], [131.0, 641.0], [132.0, 1244.0], [133.0, 676.0], [135.0, 576.0], [137.0, 834.0], [138.0, 710.0], [139.0, 562.0], [141.0, 955.0], [144.0, 1328.0], [146.0, 1668.0], [147.0, 1878.0], [148.0, 1468.0], [151.0, 1433.0], [152.0, 1645.5], [153.0, 1232.5], [154.0, 1174.0], [156.0, 1281.0], [158.0, 1304.5], [159.0, 1715.0], [160.0, 1703.0], [162.0, 1756.0], [164.0, 2041.0], [165.0, 1864.0], [166.0, 1051.0], [167.0, 1266.3333333333333], [168.0, 1926.0], [171.0, 958.0], [172.0, 776.0], [173.0, 2346.0], [174.0, 2285.0], [175.0, 210.0], [177.0, 2656.0], [179.0, 1574.0], [180.0, 2670.0], [181.0, 1606.5], [183.0, 643.0], [184.0, 2966.0], [185.0, 2050.5714285714284]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[94.74054054054058, 761.5351351351352]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[6.0, 55.2], [10.0, 56.0], [14.0, 55.50000000000001], [15.0, 47.71428571428571], [16.0, 59.5], [17.0, 60.0], [19.0, 41.0], [20.0, 45.666666666666664], [21.0, 54.0], [22.0, 41.333333333333336], [23.0, 125.0], [24.0, 52.666666666666664], [25.0, 56.0], [26.0, 65.33333333333333], [27.0, 65.0], [28.0, 54.75], [29.0, 58.0], [30.0, 66.5], [31.0, 48.0], [32.0, 94.625], [33.0, 113.0], [34.0, 43.0], [35.0, 51.833333333333336], [36.0, 44.8], [37.0, 59.00000000000001], [38.0, 60.333333333333336], [39.0, 50.2], [40.0, 52.833333333333336], [41.0, 46.0], [42.0, 52.333333333333336], [43.0, 48.6], [44.0, 55.714285714285715], [46.0, 48.0], [47.0, 84.75], [48.0, 72.33333333333334], [49.0, 50.0], [50.0, 49.33333333333333], [51.0, 60.714285714285715], [52.0, 52.666666666666664], [53.0, 51.57142857142857], [55.0, 119.5], [56.0, 79.44444444444444], [57.0, 50.33333333333333], [58.0, 76.71428571428571], [59.0, 67.71428571428572], [60.0, 45.57142857142857], [61.0, 57.5], [62.0, 76.4], [63.0, 69.87500000000001], [64.0, 62.27272727272727], [65.0, 83.75], [66.0, 57.0], [67.0, 1063.4905660377358], [68.0, 73.5], [69.0, 85.37500000000001], [70.0, 48.0], [71.0, 50.85714285714286], [72.0, 39.333333333333336], [73.0, 70.875], [74.0, 43.0], [75.0, 33.04761904761905], [76.0, 60.0], [77.0, 63.4], [78.0, 53.5], [79.0, 26.42857142857143], [80.0, 34.5], [81.0, 210.37499999999997], [82.0, 76.54545454545455], [83.0, 578.7], [84.0, 157.99999999999997], [85.0, 165.79999999999995], [86.0, 66.00000000000001], [87.0, 125.57894736842105], [88.0, 197.09523809523813], [89.0, 387.50000000000006], [90.0, 61.8076923076923], [91.0, 44.599999999999994], [92.0, 393.875], [93.0, 467.16666666666663], [94.0, 212.19047619047618], [95.0, 55.4], [96.0, 19.240000000000002], [97.0, 44.666666666666664], [98.0, 361.25], [99.0, 770.0], [100.0, 266.33333333333337], [101.0, 518.9230769230769], [102.0, 550.4], [103.0, 526.3333333333334], [104.0, 645.2777777777779], [105.0, 1223.0], [106.0, 205.125], [107.0, 717.0], [108.0, 204.74074074074065], [109.0, 505.6153846153846], [110.0, 444.75], [111.0, 380.24999999999994], [112.0, 289.40625], [113.0, 158.4054054054054], [114.0, 235.63636363636365], [115.0, 590.0], [116.0, 332.99999999999994], [117.0, 54.470588235294116], [118.0, 405.8421052631579], [119.0, 226.3043478260869], [120.0, 238.69230769230768], [121.0, 408.00000000000006], [122.0, 540.315789473684], [123.0, 747.4444444444445], [124.0, 292.23076923076934], [125.0, 645.4444444444446], [126.0, 507.4615384615385], [127.0, 394.125], [128.0, 611.5], [129.0, 199.56250000000003], [130.0, 280.2142857142857], [131.0, 369.9655172413794], [132.0, 613.3703703703704], [133.0, 798.0], [134.0, 502.47058823529414], [135.0, 265.0], [136.0, 1328.8], [137.0, 534.5], [138.0, 211.1470588235294], [139.0, 1619.0], [140.0, 101.48000000000003], [141.0, 1027.909090909091], [142.0, 688.0454545454545], [143.0, 1610.0], [145.0, 356.68749999999994], [146.0, 1462.3076923076922], [147.0, 927.7368421052629], [148.0, 1462.5], [149.0, 1663.75], [150.0, 1699.5000000000002], [151.0, 1980.142857142857], [144.0, 1.2999999999999998], [152.0, 747.3888888888887], [153.0, 2070.4285714285716], [154.0, 1212.7142857142858], [155.0, 210.29824561403498], [156.0, 336.7674418604651], [157.0, 405.61363636363626], [158.0, 724.0], [159.0, 1002.0000000000002], [160.0, 907.6], [161.0, 280.1363636363635], [162.0, 140.54285714285714], [163.0, 1066.7142857142858], [164.0, 1164.4285714285713], [165.0, 768.6000000000001], [166.0, 1934.0909090909092], [167.0, 288.4722222222222], [168.0, 204.72727272727272], [169.0, 1528.3684210526312], [170.0, 569.5483870967741], [171.0, 255.00000000000003], [172.0, 651.7894736842106], [173.0, 1109.4444444444446], [174.0, 607.9230769230769], [175.0, 2641.0], [176.0, 216.48351648351658], [177.0, 463.5365853658536], [178.0, 1261.3076923076922], [179.0, 765.0], [180.0, 1502.8888888888887], [181.0, 274.17142857142863], [182.0, 236.6111111111111], [183.0, 49.82911392405062], [184.0, 299.8214285714284], [185.0, 1052.2264906463154]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[177.0429729729718, 960.5785945945977]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 185.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.58543586E12, "maxY": 283588.38333333336, "series": [{"data": [[1.58543586E12, 94637.23333333334], [1.58543634E12, 202783.0], [1.58543616E12, 155375.98333333334], [1.58543622E12, 202920.66666666666], [1.58543604E12, 262600.73333333334], [1.5854361E12, 257138.9], [1.58543592E12, 283588.38333333336], [1.5854364E12, 186607.16666666666], [1.58543598E12, 281743.1], [1.58543628E12, 202817.41666666666], [1.58543646E12, 55326.683333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58543586E12, 5956.466666666666], [1.58543634E12, 0.0], [1.58543616E12, 10338.7], [1.58543622E12, 0.0], [1.58543604E12, 16652.033333333333], [1.5854361E12, 18181.1], [1.58543592E12, 19470.066666666666], [1.5854364E12, 0.0], [1.58543598E12, 17102.2], [1.58543628E12, 0.0], [1.58543646E12, 2288.366666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543646E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 0.9692250648869106, "minX": 1.58543586E12, "maxY": 5222.201542912242, "series": [{"data": [[1.58543586E12, 191.09090909090907], [1.58543634E12, 0.9806517311608953], [1.58543616E12, 1796.1295620437936], [1.58543622E12, 1.040231844527785], [1.58543604E12, 2826.7750213858], [1.5854361E12, 2314.825821237588], [1.58543592E12, 1652.482682387621], [1.5854364E12, 0.9739449541284396], [1.58543598E12, 2580.3141447368444], [1.58543628E12, 1.4673913043478244], [1.58543646E12, 106.1763341067285]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543586E12, 422.9299999999999], [1.58543592E12, 1159.8941176470587]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58543586E12, 179.97536945812803], [1.58543634E12, 1.3445349626612304], [1.58543616E12, 5222.201542912242], [1.58543622E12, 1.1177860276746538], [1.58543604E12, 2808.321976149915], [1.5854361E12, 2441.257164404224], [1.58543592E12, 1792.5083152566867], [1.5854364E12, 0.9692250648869106], [1.58543598E12, 2608.3668300653526], [1.58543628E12, 1.1871820956256331], [1.58543646E12, 159.66075949367084]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543646E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58543586E12, "maxY": 2826.0573139435396, "series": [{"data": [[1.58543586E12, 190.10695187165774], [1.58543634E12, 0.0], [1.58543616E12, 1795.4835766423323], [1.58543622E12, 0.0], [1.58543604E12, 2826.0573139435396], [1.5854361E12, 2314.3284950343755], [1.58543592E12, 1651.8806190125283], [1.5854364E12, 0.0], [1.58543598E12, 2579.797697368421], [1.58543628E12, 0.0], [1.58543646E12, 104.41763341067282]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543586E12, 422.04], [1.58543592E12, 1159.0235294117645]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58543586E12, 178.9778325123153], [1.58543634E12, 0.0], [1.58543616E12, 1872.7155255544847], [1.58543622E12, 0.0], [1.58543604E12, 2807.5792163543474], [1.5854361E12, 2440.4260935143275], [1.58543592E12, 1791.7664497469261], [1.5854364E12, 0.0], [1.58543598E12, 2602.9763071895395], [1.58543628E12, 0.0], [1.58543646E12, 156.72151898734174]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543646E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.2673796791443851, "minX": 1.58543586E12, "maxY": 11.219999999999997, "series": [{"data": [[1.58543586E12, 0.2673796791443851], [1.58543634E12, 0.47895451459606286], [1.58543616E12, 0.4434306569343069], [1.58543622E12, 0.5475622229798832], [1.58543604E12, 0.5312232677502136], [1.5854361E12, 0.4392666157372034], [1.58543592E12, 0.551952837140751], [1.5854364E12, 0.49688073394495447], [1.58543598E12, 0.6225328947368426], [1.58543628E12, 0.9789402173913052], [1.58543646E12, 0.4385150812064964]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543586E12, 11.219999999999997], [1.58543592E12, 0.8]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58543586E12, 0.7512315270935961], [1.58543634E12, 0.8418194161575007], [1.58543616E12, 0.508196721311475], [1.58543622E12, 0.6091798852514348], [1.58543604E12, 0.6013628620102218], [1.5854361E12, 0.4894419306184012], [1.58543592E12, 0.6760665220535076], [1.5854364E12, 0.4968483500185382], [1.58543598E12, 0.6225490196078438], [1.58543628E12, 0.689386232621228], [1.58543646E12, 0.5569620253164562]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543646E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.58543586E12, "maxY": 6415.0, "series": [{"data": [[1.58543586E12, 3122.0], [1.58543616E12, 4405.0], [1.58543604E12, 5855.0], [1.5854361E12, 6415.0], [1.58543592E12, 5627.0], [1.58543598E12, 6101.0], [1.58543646E12, 1901.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58543586E12, 33.0], [1.58543616E12, 1.0], [1.58543604E12, 2.0], [1.5854361E12, 1.0], [1.58543592E12, 2.0], [1.58543598E12, 2.0], [1.58543646E12, 33.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58543586E12, 581.5999999999999], [1.58543616E12, 3718.0], [1.58543604E12, 4816.0], [1.5854361E12, 4175.2], [1.58543592E12, 3212.6000000000004], [1.58543598E12, 3499.0], [1.58543646E12, 1490.6000000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58543586E12, 1293.5099999999984], [1.58543616E12, 4037.9000000000005], [1.58543604E12, 5392.85], [1.5854361E12, 5560.820000000011], [1.58543592E12, 4064.399999999999], [1.58543598E12, 4532.450000000006], [1.58543646E12, 1776.0600000000004]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58543586E12, 758.9499999999999], [1.58543616E12, 3831.5], [1.58543604E12, 4995.0], [1.5854361E12, 4738.0], [1.58543592E12, 3539.4], [1.58543598E12, 3760.0], [1.58543646E12, 1603.9]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543646E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 16006.0, "series": [{"data": [[3.0, 53.5], [4.0, 47.5], [5.0, 49.0], [6.0, 51.5], [10.0, 61.5], [11.0, 148.0], [13.0, 50.0], [15.0, 74.0], [16.0, 59.0], [17.0, 61.0], [18.0, 58.0], [19.0, 46.0], [20.0, 2916.0], [21.0, 924.5], [23.0, 3577.0], [24.0, 55.0], [25.0, 1359.0], [26.0, 1582.5], [27.0, 3184.0], [28.0, 3324.0], [29.0, 3587.5], [30.0, 2829.5], [31.0, 3068.5], [33.0, 3192.0], [32.0, 3153.0], [35.0, 2528.0], [34.0, 2774.5], [37.0, 2540.0], [36.0, 2857.0], [38.0, 2773.0], [39.0, 2913.0], [41.0, 2848.5], [40.0, 3041.5], [42.0, 2404.0], [43.0, 2369.0], [44.0, 2634.0], [45.0, 2621.0], [47.0, 1956.5], [46.0, 2546.0], [48.0, 1948.0], [49.0, 2711.0], [51.0, 1396.0], [50.0, 1580.5], [52.0, 2773.5], [53.0, 1851.0], [54.0, 2204.5], [56.0, 485.0], [58.0, 808.0], [61.0, 2663.0], [60.0, 910.0], [66.0, 2247.5], [67.0, 972.0], [71.0, 8.0], [75.0, 812.5], [73.0, 7.0], [74.0, 3.0], [79.0, 13.0], [78.0, 10.0], [77.0, 896.0], [82.0, 456.0], [80.0, 37.5], [83.0, 1276.5], [97.0, 1154.0], [101.0, 3.0], [112.0, 1586.0], [154.0, 1163.0], [160.0, 1652.0], [1.0, 69.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[11.0, 1.0], [26.0, 2110.0], [27.0, 16006.0], [35.0, 2738.5], [34.0, 1467.0], [36.0, 2465.0], [37.0, 0.0], [38.0, 16006.0], [39.0, 0.5], [41.0, 3385.0], [43.0, 1.0], [42.0, 1.0], [44.0, 2388.5], [45.0, 1.0], [46.0, 1.0], [47.0, 1.0], [48.0, 0.0], [49.0, 1.0], [50.0, 1.0], [51.0, 1.0], [53.0, 1.0], [52.0, 1.0], [56.0, 1.0], [57.0, 1.0], [58.0, 1.0], [60.0, 1.0], [63.0, 0.0], [62.0, 1.0], [67.0, 1.0], [66.0, 1.0], [65.0, 1.0], [69.0, 1.0], [68.0, 1.0], [75.0, 1.0], [74.0, 1.0], [77.0, 1.0], [78.0, 1.0], [76.0, 1.0], [79.0, 1.0], [82.0, 1.0], [83.0, 1.0], [80.0, 1.0], [81.0, 1.0], [85.0, 1.0], [86.0, 1.0], [87.0, 1.0], [91.0, 1.0], [89.0, 1.0], [90.0, 1.0], [88.0, 1.0], [93.0, 1.0], [92.0, 1.0], [95.0, 1.0], [94.0, 1.0], [97.0, 1.0], [99.0, 1.0], [98.0, 1.0], [96.0, 1.0], [101.0, 1.0], [100.0, 1.0], [102.0, 1.0], [103.0, 1.0], [105.0, 1.0], [107.0, 1.0], [106.0, 1.0], [104.0, 1.0], [109.0, 1.0], [111.0, 1.0], [108.0, 1.0], [112.0, 1.0], [113.0, 1.0], [115.0, 1.0], [119.0, 1.0], [118.0, 1.0], [117.0, 1.0], [116.0, 1.0], [121.0, 1.0], [120.0, 1.0], [122.0, 1.0], [127.0, 1.0], [135.0, 1.0], [154.0, 4978.5], [160.0, 3978.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 160.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 4977.5, "series": [{"data": [[3.0, 53.0], [4.0, 47.0], [5.0, 48.5], [6.0, 51.5], [10.0, 61.0], [11.0, 146.5], [13.0, 49.5], [15.0, 70.0], [16.0, 58.0], [17.0, 61.0], [18.0, 58.0], [19.0, 45.0], [20.0, 2915.5], [21.0, 924.0], [23.0, 3577.0], [24.0, 54.5], [25.0, 1358.5], [26.0, 1582.0], [27.0, 3183.0], [28.0, 3323.5], [29.0, 3587.0], [30.0, 2829.0], [31.0, 3068.0], [33.0, 3191.0], [32.0, 3153.0], [35.0, 2528.0], [34.0, 2774.0], [37.0, 2540.0], [36.0, 2855.0], [38.0, 2773.0], [39.0, 2912.0], [41.0, 2848.0], [40.0, 3041.5], [42.0, 2404.0], [43.0, 2369.0], [44.0, 2634.0], [45.0, 2621.0], [47.0, 1953.0], [46.0, 2545.5], [48.0, 1948.0], [49.0, 2711.0], [51.0, 1395.0], [50.0, 1580.5], [52.0, 2773.0], [53.0, 1851.0], [54.0, 2204.5], [56.0, 484.5], [58.0, 807.0], [61.0, 2662.0], [60.0, 909.0], [66.0, 2247.5], [67.0, 971.0], [71.0, 8.0], [75.0, 812.5], [73.0, 7.0], [74.0, 3.0], [79.0, 13.0], [78.0, 10.0], [77.0, 896.0], [82.0, 456.0], [80.0, 37.5], [83.0, 1272.0], [97.0, 1154.0], [101.0, 3.0], [112.0, 1586.0], [154.0, 1163.0], [160.0, 1652.0], [1.0, 67.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[11.0, 0.0], [26.0, 2110.0], [27.0, 0.0], [35.0, 2694.0], [34.0, 1466.5], [36.0, 2464.0], [37.0, 0.0], [38.0, 0.0], [39.0, 0.0], [41.0, 3385.0], [43.0, 0.0], [42.0, 0.0], [44.0, 2388.5], [45.0, 0.0], [46.0, 0.0], [47.0, 0.0], [48.0, 0.0], [49.0, 0.0], [50.0, 0.0], [51.0, 0.0], [53.0, 0.0], [52.0, 0.0], [56.0, 0.0], [57.0, 0.0], [58.0, 0.0], [60.0, 0.0], [63.0, 0.0], [62.0, 0.0], [67.0, 0.0], [66.0, 0.0], [65.0, 0.0], [69.0, 0.0], [68.0, 0.0], [75.0, 0.0], [74.0, 0.0], [77.0, 0.0], [78.0, 0.0], [76.0, 0.0], [79.0, 0.0], [82.0, 0.0], [83.0, 0.0], [80.0, 0.0], [81.0, 0.0], [85.0, 0.0], [86.0, 0.0], [87.0, 0.0], [91.0, 0.0], [89.0, 0.0], [90.0, 0.0], [88.0, 0.0], [93.0, 0.0], [92.0, 0.0], [95.0, 0.0], [94.0, 0.0], [97.0, 0.0], [99.0, 0.0], [98.0, 0.0], [96.0, 0.0], [101.0, 0.0], [100.0, 0.0], [102.0, 0.0], [103.0, 0.0], [105.0, 0.0], [107.0, 0.0], [106.0, 0.0], [104.0, 0.0], [109.0, 0.0], [111.0, 0.0], [108.0, 0.0], [112.0, 0.0], [113.0, 0.0], [115.0, 0.0], [119.0, 0.0], [118.0, 0.0], [117.0, 0.0], [116.0, 0.0], [121.0, 0.0], [120.0, 0.0], [122.0, 0.0], [127.0, 0.0], [135.0, 0.0], [154.0, 4977.5], [160.0, 3967.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 160.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 13.766666666666667, "minX": 1.58543586E12, "maxY": 98.26666666666667, "series": [{"data": [[1.58543586E12, 15.35], [1.58543634E12, 98.2], [1.58543616E12, 33.7], [1.58543622E12, 98.26666666666667], [1.58543604E12, 39.266666666666666], [1.5854361E12, 43.8], [1.58543592E12, 47.083333333333336], [1.5854364E12, 90.36666666666666], [1.58543598E12, 41.733333333333334], [1.58543628E12, 98.21666666666667], [1.58543646E12, 13.766666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543646E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.58543586E12, "maxY": 98.26666666666667, "series": [{"data": [[1.58543586E12, 14.666666666666666], [1.58543616E12, 23.816666666666666], [1.58543604E12, 38.56666666666667], [1.5854361E12, 41.88333333333333], [1.58543592E12, 45.516666666666666], [1.58543598E12, 39.86666666666667], [1.58543646E12, 5.333333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58543616E12, 0.2833333333333333], [1.58543604E12, 0.25], [1.5854361E12, 0.5], [1.58543592E12, 0.5333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.5854361E12, 0.06666666666666667], [1.58543592E12, 0.05], [1.58543598E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.TruncatedChunkException", "isController": false}, {"data": [[1.58543634E12, 98.2], [1.58543616E12, 11.45], [1.58543622E12, 98.26666666666667], [1.58543604E12, 0.23333333333333334], [1.5854361E12, 1.2333333333333334], [1.58543592E12, 0.43333333333333335], [1.5854364E12, 90.36666666666666], [1.58543598E12, 0.55], [1.58543628E12, 98.21666666666667], [1.58543646E12, 8.433333333333334]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.5854361E12, 0.23333333333333334], [1.58543592E12, 0.55], [1.58543598E12, 0.23333333333333334]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543646E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.58543586E12, "maxY": 49.38333333333333, "series": [{"data": [[1.58543586E12, 1.6666666666666667], [1.58543592E12, 1.4166666666666667]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58543586E12, 6.233333333333333], [1.58543616E12, 11.766666666666667], [1.58543604E12, 19.133333333333333], [1.5854361E12, 20.283333333333335], [1.58543592E12, 21.783333333333335], [1.58543598E12, 19.633333333333333], [1.58543646E12, 2.85]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58543634E12, 49.1], [1.58543616E12, 6.5], [1.58543622E12, 48.88333333333333], [1.58543604E12, 0.35], [1.5854361E12, 1.5333333333333334], [1.58543592E12, 0.8333333333333334], [1.5854364E12, 45.416666666666664], [1.58543598E12, 0.6333333333333333], [1.58543628E12, 49.06666666666667], [1.58543646E12, 4.333333333333333]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.58543586E12, 6.766666666666667], [1.58543616E12, 12.05], [1.58543604E12, 19.433333333333334], [1.5854361E12, 21.6], [1.58543592E12, 22.316666666666666], [1.58543598E12, 20.233333333333334], [1.58543646E12, 2.4833333333333334]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58543634E12, 49.1], [1.58543616E12, 5.233333333333333], [1.58543622E12, 49.38333333333333], [1.58543604E12, 0.13333333333333333], [1.5854361E12, 0.5], [1.58543592E12, 0.7333333333333333], [1.5854364E12, 44.95], [1.58543598E12, 0.16666666666666666], [1.58543628E12, 49.15], [1.58543646E12, 4.1]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543646E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.48333333333333334, "minX": 1.58543586E12, "maxY": 98.26666666666667, "series": [{"data": [[1.58543586E12, 14.666666666666666], [1.58543616E12, 23.816666666666666], [1.58543604E12, 38.56666666666667], [1.5854361E12, 41.88333333333333], [1.58543592E12, 45.516666666666666], [1.58543598E12, 39.86666666666667], [1.58543646E12, 5.333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58543634E12, 98.2], [1.58543616E12, 11.733333333333333], [1.58543622E12, 98.26666666666667], [1.58543604E12, 0.48333333333333334], [1.5854361E12, 2.033333333333333], [1.58543592E12, 1.5666666666666667], [1.5854364E12, 90.36666666666666], [1.58543598E12, 0.8], [1.58543628E12, 98.21666666666667], [1.58543646E12, 8.433333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543646E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

