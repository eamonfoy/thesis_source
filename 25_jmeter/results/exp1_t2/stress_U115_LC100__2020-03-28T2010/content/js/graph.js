/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 5793.0, "series": [{"data": [[0.0, 6.0], [0.1, 10.0], [0.2, 16.0], [0.3, 29.0], [0.4, 31.0], [0.5, 32.0], [0.6, 33.0], [0.7, 34.0], [0.8, 34.0], [0.9, 34.0], [1.0, 35.0], [1.1, 35.0], [1.2, 36.0], [1.3, 36.0], [1.4, 37.0], [1.5, 37.0], [1.6, 37.0], [1.7, 38.0], [1.8, 38.0], [1.9, 38.0], [2.0, 39.0], [2.1, 39.0], [2.2, 39.0], [2.3, 39.0], [2.4, 40.0], [2.5, 40.0], [2.6, 40.0], [2.7, 40.0], [2.8, 41.0], [2.9, 41.0], [3.0, 41.0], [3.1, 41.0], [3.2, 42.0], [3.3, 42.0], [3.4, 42.0], [3.5, 42.0], [3.6, 42.0], [3.7, 43.0], [3.8, 43.0], [3.9, 43.0], [4.0, 43.0], [4.1, 43.0], [4.2, 43.0], [4.3, 44.0], [4.4, 44.0], [4.5, 44.0], [4.6, 44.0], [4.7, 44.0], [4.8, 45.0], [4.9, 45.0], [5.0, 45.0], [5.1, 45.0], [5.2, 46.0], [5.3, 46.0], [5.4, 46.0], [5.5, 46.0], [5.6, 47.0], [5.7, 47.0], [5.8, 47.0], [5.9, 47.0], [6.0, 48.0], [6.1, 48.0], [6.2, 48.0], [6.3, 49.0], [6.4, 49.0], [6.5, 49.0], [6.6, 49.0], [6.7, 50.0], [6.8, 50.0], [6.9, 50.0], [7.0, 50.0], [7.1, 50.0], [7.2, 51.0], [7.3, 51.0], [7.4, 51.0], [7.5, 52.0], [7.6, 52.0], [7.7, 52.0], [7.8, 52.0], [7.9, 53.0], [8.0, 53.0], [8.1, 53.0], [8.2, 54.0], [8.3, 54.0], [8.4, 54.0], [8.5, 54.0], [8.6, 55.0], [8.7, 55.0], [8.8, 56.0], [8.9, 56.0], [9.0, 56.0], [9.1, 57.0], [9.2, 57.0], [9.3, 58.0], [9.4, 58.0], [9.5, 59.0], [9.6, 60.0], [9.7, 61.0], [9.8, 61.0], [9.9, 62.0], [10.0, 64.0], [10.1, 65.0], [10.2, 67.0], [10.3, 70.0], [10.4, 73.0], [10.5, 76.0], [10.6, 84.0], [10.7, 94.0], [10.8, 114.0], [10.9, 151.0], [11.0, 191.0], [11.1, 208.0], [11.2, 236.0], [11.3, 248.0], [11.4, 258.0], [11.5, 268.0], [11.6, 292.0], [11.7, 303.0], [11.8, 321.0], [11.9, 326.0], [12.0, 333.0], [12.1, 341.0], [12.2, 349.0], [12.3, 358.0], [12.4, 368.0], [12.5, 376.0], [12.6, 383.0], [12.7, 389.0], [12.8, 393.0], [12.9, 397.0], [13.0, 404.0], [13.1, 413.0], [13.2, 418.0], [13.3, 423.0], [13.4, 427.0], [13.5, 431.0], [13.6, 436.0], [13.7, 441.0], [13.8, 443.0], [13.9, 447.0], [14.0, 451.0], [14.1, 455.0], [14.2, 458.0], [14.3, 461.0], [14.4, 466.0], [14.5, 470.0], [14.6, 475.0], [14.7, 478.0], [14.8, 482.0], [14.9, 485.0], [15.0, 489.0], [15.1, 492.0], [15.2, 495.0], [15.3, 498.0], [15.4, 503.0], [15.5, 505.0], [15.6, 508.0], [15.7, 512.0], [15.8, 515.0], [15.9, 517.0], [16.0, 520.0], [16.1, 523.0], [16.2, 525.0], [16.3, 529.0], [16.4, 531.0], [16.5, 534.0], [16.6, 538.0], [16.7, 540.0], [16.8, 543.0], [16.9, 545.0], [17.0, 548.0], [17.1, 551.0], [17.2, 554.0], [17.3, 556.0], [17.4, 559.0], [17.5, 561.0], [17.6, 564.0], [17.7, 567.0], [17.8, 570.0], [17.9, 572.0], [18.0, 575.0], [18.1, 577.0], [18.2, 579.0], [18.3, 582.0], [18.4, 584.0], [18.5, 587.0], [18.6, 589.0], [18.7, 591.0], [18.8, 594.0], [18.9, 595.0], [19.0, 598.0], [19.1, 601.0], [19.2, 604.0], [19.3, 607.0], [19.4, 609.0], [19.5, 610.0], [19.6, 613.0], [19.7, 615.0], [19.8, 617.0], [19.9, 619.0], [20.0, 621.0], [20.1, 623.0], [20.2, 625.0], [20.3, 626.0], [20.4, 629.0], [20.5, 630.0], [20.6, 632.0], [20.7, 633.0], [20.8, 635.0], [20.9, 637.0], [21.0, 640.0], [21.1, 642.0], [21.2, 643.0], [21.3, 645.0], [21.4, 648.0], [21.5, 650.0], [21.6, 652.0], [21.7, 655.0], [21.8, 656.0], [21.9, 659.0], [22.0, 661.0], [22.1, 663.0], [22.2, 665.0], [22.3, 667.0], [22.4, 668.0], [22.5, 671.0], [22.6, 674.0], [22.7, 676.0], [22.8, 678.0], [22.9, 681.0], [23.0, 683.0], [23.1, 685.0], [23.2, 687.0], [23.3, 689.0], [23.4, 691.0], [23.5, 693.0], [23.6, 695.0], [23.7, 697.0], [23.8, 698.0], [23.9, 701.0], [24.0, 702.0], [24.1, 704.0], [24.2, 705.0], [24.3, 707.0], [24.4, 708.0], [24.5, 711.0], [24.6, 712.0], [24.7, 714.0], [24.8, 714.0], [24.9, 716.0], [25.0, 718.0], [25.1, 720.0], [25.2, 723.0], [25.3, 725.0], [25.4, 726.0], [25.5, 729.0], [25.6, 729.0], [25.7, 732.0], [25.8, 733.0], [25.9, 735.0], [26.0, 738.0], [26.1, 740.0], [26.2, 742.0], [26.3, 744.0], [26.4, 745.0], [26.5, 746.0], [26.6, 748.0], [26.7, 749.0], [26.8, 750.0], [26.9, 753.0], [27.0, 754.0], [27.1, 756.0], [27.2, 757.0], [27.3, 759.0], [27.4, 760.0], [27.5, 762.0], [27.6, 763.0], [27.7, 765.0], [27.8, 766.0], [27.9, 768.0], [28.0, 769.0], [28.1, 772.0], [28.2, 773.0], [28.3, 775.0], [28.4, 777.0], [28.5, 779.0], [28.6, 781.0], [28.7, 783.0], [28.8, 785.0], [28.9, 786.0], [29.0, 789.0], [29.1, 790.0], [29.2, 791.0], [29.3, 793.0], [29.4, 794.0], [29.5, 796.0], [29.6, 797.0], [29.7, 798.0], [29.8, 801.0], [29.9, 803.0], [30.0, 805.0], [30.1, 807.0], [30.2, 808.0], [30.3, 809.0], [30.4, 810.0], [30.5, 812.0], [30.6, 813.0], [30.7, 814.0], [30.8, 815.0], [30.9, 817.0], [31.0, 819.0], [31.1, 820.0], [31.2, 822.0], [31.3, 824.0], [31.4, 825.0], [31.5, 827.0], [31.6, 829.0], [31.7, 831.0], [31.8, 832.0], [31.9, 834.0], [32.0, 836.0], [32.1, 837.0], [32.2, 839.0], [32.3, 840.0], [32.4, 842.0], [32.5, 843.0], [32.6, 844.0], [32.7, 846.0], [32.8, 847.0], [32.9, 849.0], [33.0, 851.0], [33.1, 852.0], [33.2, 853.0], [33.3, 855.0], [33.4, 856.0], [33.5, 858.0], [33.6, 859.0], [33.7, 861.0], [33.8, 863.0], [33.9, 865.0], [34.0, 866.0], [34.1, 868.0], [34.2, 869.0], [34.3, 870.0], [34.4, 871.0], [34.5, 872.0], [34.6, 875.0], [34.7, 876.0], [34.8, 878.0], [34.9, 879.0], [35.0, 880.0], [35.1, 882.0], [35.2, 883.0], [35.3, 885.0], [35.4, 886.0], [35.5, 887.0], [35.6, 889.0], [35.7, 890.0], [35.8, 892.0], [35.9, 893.0], [36.0, 894.0], [36.1, 896.0], [36.2, 898.0], [36.3, 900.0], [36.4, 902.0], [36.5, 903.0], [36.6, 904.0], [36.7, 905.0], [36.8, 906.0], [36.9, 908.0], [37.0, 909.0], [37.1, 910.0], [37.2, 911.0], [37.3, 912.0], [37.4, 913.0], [37.5, 914.0], [37.6, 916.0], [37.7, 918.0], [37.8, 919.0], [37.9, 921.0], [38.0, 921.0], [38.1, 923.0], [38.2, 924.0], [38.3, 926.0], [38.4, 928.0], [38.5, 929.0], [38.6, 931.0], [38.7, 933.0], [38.8, 933.0], [38.9, 935.0], [39.0, 936.0], [39.1, 938.0], [39.2, 939.0], [39.3, 940.0], [39.4, 942.0], [39.5, 944.0], [39.6, 945.0], [39.7, 947.0], [39.8, 948.0], [39.9, 949.0], [40.0, 950.0], [40.1, 951.0], [40.2, 952.0], [40.3, 954.0], [40.4, 955.0], [40.5, 956.0], [40.6, 957.0], [40.7, 957.0], [40.8, 959.0], [40.9, 961.0], [41.0, 962.0], [41.1, 964.0], [41.2, 964.0], [41.3, 966.0], [41.4, 967.0], [41.5, 968.0], [41.6, 970.0], [41.7, 972.0], [41.8, 973.0], [41.9, 975.0], [42.0, 976.0], [42.1, 978.0], [42.2, 979.0], [42.3, 980.0], [42.4, 981.0], [42.5, 983.0], [42.6, 984.0], [42.7, 985.0], [42.8, 987.0], [42.9, 988.0], [43.0, 990.0], [43.1, 991.0], [43.2, 992.0], [43.3, 994.0], [43.4, 996.0], [43.5, 998.0], [43.6, 1000.0], [43.7, 1001.0], [43.8, 1002.0], [43.9, 1003.0], [44.0, 1005.0], [44.1, 1006.0], [44.2, 1008.0], [44.3, 1010.0], [44.4, 1011.0], [44.5, 1013.0], [44.6, 1014.0], [44.7, 1015.0], [44.8, 1017.0], [44.9, 1019.0], [45.0, 1020.0], [45.1, 1022.0], [45.2, 1023.0], [45.3, 1024.0], [45.4, 1026.0], [45.5, 1027.0], [45.6, 1028.0], [45.7, 1029.0], [45.8, 1031.0], [45.9, 1032.0], [46.0, 1033.0], [46.1, 1035.0], [46.2, 1036.0], [46.3, 1038.0], [46.4, 1039.0], [46.5, 1040.0], [46.6, 1042.0], [46.7, 1044.0], [46.8, 1045.0], [46.9, 1047.0], [47.0, 1048.0], [47.1, 1050.0], [47.2, 1052.0], [47.3, 1054.0], [47.4, 1055.0], [47.5, 1057.0], [47.6, 1059.0], [47.7, 1060.0], [47.8, 1062.0], [47.9, 1063.0], [48.0, 1064.0], [48.1, 1065.0], [48.2, 1066.0], [48.3, 1067.0], [48.4, 1068.0], [48.5, 1069.0], [48.6, 1071.0], [48.7, 1072.0], [48.8, 1073.0], [48.9, 1075.0], [49.0, 1076.0], [49.1, 1077.0], [49.2, 1079.0], [49.3, 1080.0], [49.4, 1081.0], [49.5, 1082.0], [49.6, 1083.0], [49.7, 1085.0], [49.8, 1086.0], [49.9, 1087.0], [50.0, 1088.0], [50.1, 1088.0], [50.2, 1089.0], [50.3, 1090.0], [50.4, 1092.0], [50.5, 1093.0], [50.6, 1094.0], [50.7, 1096.0], [50.8, 1098.0], [50.9, 1099.0], [51.0, 1101.0], [51.1, 1102.0], [51.2, 1103.0], [51.3, 1105.0], [51.4, 1107.0], [51.5, 1108.0], [51.6, 1110.0], [51.7, 1110.0], [51.8, 1112.0], [51.9, 1113.0], [52.0, 1115.0], [52.1, 1117.0], [52.2, 1118.0], [52.3, 1119.0], [52.4, 1120.0], [52.5, 1121.0], [52.6, 1123.0], [52.7, 1124.0], [52.8, 1125.0], [52.9, 1126.0], [53.0, 1127.0], [53.1, 1130.0], [53.2, 1132.0], [53.3, 1132.0], [53.4, 1133.0], [53.5, 1134.0], [53.6, 1135.0], [53.7, 1137.0], [53.8, 1137.0], [53.9, 1138.0], [54.0, 1139.0], [54.1, 1140.0], [54.2, 1141.0], [54.3, 1141.0], [54.4, 1143.0], [54.5, 1144.0], [54.6, 1146.0], [54.7, 1147.0], [54.8, 1149.0], [54.9, 1151.0], [55.0, 1153.0], [55.1, 1153.0], [55.2, 1155.0], [55.3, 1156.0], [55.4, 1157.0], [55.5, 1159.0], [55.6, 1160.0], [55.7, 1161.0], [55.8, 1163.0], [55.9, 1164.0], [56.0, 1166.0], [56.1, 1168.0], [56.2, 1169.0], [56.3, 1170.0], [56.4, 1171.0], [56.5, 1172.0], [56.6, 1173.0], [56.7, 1175.0], [56.8, 1177.0], [56.9, 1178.0], [57.0, 1179.0], [57.1, 1180.0], [57.2, 1181.0], [57.3, 1183.0], [57.4, 1184.0], [57.5, 1185.0], [57.6, 1187.0], [57.7, 1188.0], [57.8, 1190.0], [57.9, 1191.0], [58.0, 1193.0], [58.1, 1194.0], [58.2, 1196.0], [58.3, 1197.0], [58.4, 1198.0], [58.5, 1199.0], [58.6, 1201.0], [58.7, 1203.0], [58.8, 1204.0], [58.9, 1206.0], [59.0, 1207.0], [59.1, 1208.0], [59.2, 1209.0], [59.3, 1211.0], [59.4, 1212.0], [59.5, 1213.0], [59.6, 1214.0], [59.7, 1215.0], [59.8, 1216.0], [59.9, 1218.0], [60.0, 1219.0], [60.1, 1220.0], [60.2, 1222.0], [60.3, 1224.0], [60.4, 1225.0], [60.5, 1226.0], [60.6, 1227.0], [60.7, 1229.0], [60.8, 1229.0], [60.9, 1230.0], [61.0, 1232.0], [61.1, 1234.0], [61.2, 1235.0], [61.3, 1237.0], [61.4, 1238.0], [61.5, 1239.0], [61.6, 1241.0], [61.7, 1243.0], [61.8, 1244.0], [61.9, 1246.0], [62.0, 1247.0], [62.1, 1248.0], [62.2, 1250.0], [62.3, 1251.0], [62.4, 1253.0], [62.5, 1254.0], [62.6, 1255.0], [62.7, 1257.0], [62.8, 1258.0], [62.9, 1260.0], [63.0, 1261.0], [63.1, 1263.0], [63.2, 1263.0], [63.3, 1266.0], [63.4, 1268.0], [63.5, 1269.0], [63.6, 1271.0], [63.7, 1272.0], [63.8, 1273.0], [63.9, 1275.0], [64.0, 1277.0], [64.1, 1278.0], [64.2, 1279.0], [64.3, 1280.0], [64.4, 1282.0], [64.5, 1283.0], [64.6, 1284.0], [64.7, 1285.0], [64.8, 1287.0], [64.9, 1288.0], [65.0, 1290.0], [65.1, 1291.0], [65.2, 1292.0], [65.3, 1294.0], [65.4, 1295.0], [65.5, 1296.0], [65.6, 1297.0], [65.7, 1297.0], [65.8, 1300.0], [65.9, 1302.0], [66.0, 1303.0], [66.1, 1306.0], [66.2, 1307.0], [66.3, 1309.0], [66.4, 1312.0], [66.5, 1313.0], [66.6, 1314.0], [66.7, 1315.0], [66.8, 1316.0], [66.9, 1318.0], [67.0, 1320.0], [67.1, 1322.0], [67.2, 1323.0], [67.3, 1325.0], [67.4, 1327.0], [67.5, 1329.0], [67.6, 1330.0], [67.7, 1332.0], [67.8, 1334.0], [67.9, 1335.0], [68.0, 1336.0], [68.1, 1338.0], [68.2, 1340.0], [68.3, 1341.0], [68.4, 1344.0], [68.5, 1346.0], [68.6, 1347.0], [68.7, 1349.0], [68.8, 1351.0], [68.9, 1353.0], [69.0, 1354.0], [69.1, 1356.0], [69.2, 1357.0], [69.3, 1358.0], [69.4, 1360.0], [69.5, 1362.0], [69.6, 1363.0], [69.7, 1365.0], [69.8, 1368.0], [69.9, 1369.0], [70.0, 1371.0], [70.1, 1373.0], [70.2, 1375.0], [70.3, 1376.0], [70.4, 1378.0], [70.5, 1380.0], [70.6, 1382.0], [70.7, 1383.0], [70.8, 1384.0], [70.9, 1385.0], [71.0, 1387.0], [71.1, 1388.0], [71.2, 1390.0], [71.3, 1393.0], [71.4, 1394.0], [71.5, 1396.0], [71.6, 1399.0], [71.7, 1400.0], [71.8, 1402.0], [71.9, 1404.0], [72.0, 1406.0], [72.1, 1408.0], [72.2, 1410.0], [72.3, 1411.0], [72.4, 1413.0], [72.5, 1414.0], [72.6, 1415.0], [72.7, 1416.0], [72.8, 1417.0], [72.9, 1420.0], [73.0, 1421.0], [73.1, 1423.0], [73.2, 1425.0], [73.3, 1428.0], [73.4, 1429.0], [73.5, 1430.0], [73.6, 1432.0], [73.7, 1434.0], [73.8, 1437.0], [73.9, 1439.0], [74.0, 1442.0], [74.1, 1443.0], [74.2, 1446.0], [74.3, 1447.0], [74.4, 1449.0], [74.5, 1450.0], [74.6, 1451.0], [74.7, 1453.0], [74.8, 1455.0], [74.9, 1456.0], [75.0, 1458.0], [75.1, 1460.0], [75.2, 1462.0], [75.3, 1464.0], [75.4, 1465.0], [75.5, 1465.0], [75.6, 1467.0], [75.7, 1469.0], [75.8, 1471.0], [75.9, 1472.0], [76.0, 1475.0], [76.1, 1477.0], [76.2, 1479.0], [76.3, 1480.0], [76.4, 1481.0], [76.5, 1483.0], [76.6, 1485.0], [76.7, 1486.0], [76.8, 1487.0], [76.9, 1489.0], [77.0, 1490.0], [77.1, 1492.0], [77.2, 1494.0], [77.3, 1496.0], [77.4, 1498.0], [77.5, 1501.0], [77.6, 1504.0], [77.7, 1506.0], [77.8, 1507.0], [77.9, 1509.0], [78.0, 1510.0], [78.1, 1514.0], [78.2, 1516.0], [78.3, 1519.0], [78.4, 1520.0], [78.5, 1523.0], [78.6, 1524.0], [78.7, 1526.0], [78.8, 1528.0], [78.9, 1531.0], [79.0, 1532.0], [79.1, 1534.0], [79.2, 1536.0], [79.3, 1538.0], [79.4, 1539.0], [79.5, 1541.0], [79.6, 1544.0], [79.7, 1546.0], [79.8, 1547.0], [79.9, 1549.0], [80.0, 1551.0], [80.1, 1554.0], [80.2, 1556.0], [80.3, 1558.0], [80.4, 1561.0], [80.5, 1562.0], [80.6, 1564.0], [80.7, 1566.0], [80.8, 1569.0], [80.9, 1572.0], [81.0, 1575.0], [81.1, 1577.0], [81.2, 1579.0], [81.3, 1581.0], [81.4, 1583.0], [81.5, 1586.0], [81.6, 1588.0], [81.7, 1590.0], [81.8, 1592.0], [81.9, 1593.0], [82.0, 1596.0], [82.1, 1598.0], [82.2, 1599.0], [82.3, 1601.0], [82.4, 1602.0], [82.5, 1605.0], [82.6, 1609.0], [82.7, 1610.0], [82.8, 1612.0], [82.9, 1614.0], [83.0, 1616.0], [83.1, 1618.0], [83.2, 1619.0], [83.3, 1622.0], [83.4, 1625.0], [83.5, 1628.0], [83.6, 1631.0], [83.7, 1634.0], [83.8, 1637.0], [83.9, 1639.0], [84.0, 1643.0], [84.1, 1644.0], [84.2, 1646.0], [84.3, 1649.0], [84.4, 1653.0], [84.5, 1654.0], [84.6, 1657.0], [84.7, 1660.0], [84.8, 1664.0], [84.9, 1668.0], [85.0, 1672.0], [85.1, 1674.0], [85.2, 1676.0], [85.3, 1679.0], [85.4, 1681.0], [85.5, 1683.0], [85.6, 1687.0], [85.7, 1690.0], [85.8, 1693.0], [85.9, 1696.0], [86.0, 1698.0], [86.1, 1702.0], [86.2, 1704.0], [86.3, 1706.0], [86.4, 1708.0], [86.5, 1711.0], [86.6, 1714.0], [86.7, 1718.0], [86.8, 1722.0], [86.9, 1724.0], [87.0, 1727.0], [87.1, 1730.0], [87.2, 1735.0], [87.3, 1737.0], [87.4, 1741.0], [87.5, 1745.0], [87.6, 1748.0], [87.7, 1750.0], [87.8, 1754.0], [87.9, 1756.0], [88.0, 1759.0], [88.1, 1762.0], [88.2, 1765.0], [88.3, 1767.0], [88.4, 1771.0], [88.5, 1774.0], [88.6, 1777.0], [88.7, 1780.0], [88.8, 1783.0], [88.9, 1785.0], [89.0, 1789.0], [89.1, 1792.0], [89.2, 1794.0], [89.3, 1798.0], [89.4, 1801.0], [89.5, 1804.0], [89.6, 1807.0], [89.7, 1809.0], [89.8, 1812.0], [89.9, 1815.0], [90.0, 1820.0], [90.1, 1822.0], [90.2, 1826.0], [90.3, 1828.0], [90.4, 1832.0], [90.5, 1834.0], [90.6, 1837.0], [90.7, 1841.0], [90.8, 1847.0], [90.9, 1852.0], [91.0, 1858.0], [91.1, 1860.0], [91.2, 1863.0], [91.3, 1867.0], [91.4, 1873.0], [91.5, 1876.0], [91.6, 1879.0], [91.7, 1884.0], [91.8, 1889.0], [91.9, 1894.0], [92.0, 1899.0], [92.1, 1904.0], [92.2, 1910.0], [92.3, 1914.0], [92.4, 1918.0], [92.5, 1922.0], [92.6, 1926.0], [92.7, 1929.0], [92.8, 1934.0], [92.9, 1938.0], [93.0, 1946.0], [93.1, 1951.0], [93.2, 1958.0], [93.3, 1961.0], [93.4, 1966.0], [93.5, 1969.0], [93.6, 1974.0], [93.7, 1977.0], [93.8, 1982.0], [93.9, 1987.0], [94.0, 1990.0], [94.1, 1993.0], [94.2, 1999.0], [94.3, 2008.0], [94.4, 2011.0], [94.5, 2014.0], [94.6, 2021.0], [94.7, 2026.0], [94.8, 2033.0], [94.9, 2038.0], [95.0, 2046.0], [95.1, 2052.0], [95.2, 2062.0], [95.3, 2069.0], [95.4, 2075.0], [95.5, 2082.0], [95.6, 2088.0], [95.7, 2096.0], [95.8, 2099.0], [95.9, 2111.0], [96.0, 2117.0], [96.1, 2126.0], [96.2, 2134.0], [96.3, 2141.0], [96.4, 2151.0], [96.5, 2160.0], [96.6, 2170.0], [96.7, 2175.0], [96.8, 2179.0], [96.9, 2189.0], [97.0, 2198.0], [97.1, 2206.0], [97.2, 2214.0], [97.3, 2225.0], [97.4, 2233.0], [97.5, 2248.0], [97.6, 2260.0], [97.7, 2275.0], [97.8, 2289.0], [97.9, 2304.0], [98.0, 2316.0], [98.1, 2325.0], [98.2, 2335.0], [98.3, 2346.0], [98.4, 2364.0], [98.5, 2380.0], [98.6, 2405.0], [98.7, 2420.0], [98.8, 2443.0], [98.9, 2483.0], [99.0, 2497.0], [99.1, 2520.0], [99.2, 2556.0], [99.3, 2591.0], [99.4, 2632.0], [99.5, 2658.0], [99.6, 2700.0], [99.7, 2827.0], [99.8, 2951.0], [99.9, 3083.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 145.0], [0.1, 145.0], [0.2, 145.0], [0.3, 145.0], [0.4, 145.0], [0.5, 145.0], [0.6, 145.0], [0.7, 145.0], [0.8, 145.0], [0.9, 146.0], [1.0, 146.0], [1.1, 146.0], [1.2, 146.0], [1.3, 146.0], [1.4, 146.0], [1.5, 146.0], [1.6, 146.0], [1.7, 146.0], [1.8, 149.0], [1.9, 149.0], [2.0, 149.0], [2.1, 149.0], [2.2, 149.0], [2.3, 149.0], [2.4, 149.0], [2.5, 149.0], [2.6, 149.0], [2.7, 149.0], [2.8, 149.0], [2.9, 149.0], [3.0, 149.0], [3.1, 149.0], [3.2, 149.0], [3.3, 149.0], [3.4, 149.0], [3.5, 150.0], [3.6, 150.0], [3.7, 150.0], [3.8, 150.0], [3.9, 150.0], [4.0, 150.0], [4.1, 150.0], [4.2, 150.0], [4.3, 150.0], [4.4, 150.0], [4.5, 150.0], [4.6, 150.0], [4.7, 150.0], [4.8, 150.0], [4.9, 150.0], [5.0, 150.0], [5.1, 150.0], [5.2, 150.0], [5.3, 150.0], [5.4, 150.0], [5.5, 150.0], [5.6, 150.0], [5.7, 150.0], [5.8, 150.0], [5.9, 150.0], [6.0, 150.0], [6.1, 151.0], [6.2, 151.0], [6.3, 151.0], [6.4, 151.0], [6.5, 151.0], [6.6, 151.0], [6.7, 151.0], [6.8, 151.0], [6.9, 151.0], [7.0, 151.0], [7.1, 151.0], [7.2, 151.0], [7.3, 151.0], [7.4, 151.0], [7.5, 151.0], [7.6, 151.0], [7.7, 151.0], [7.8, 151.0], [7.9, 152.0], [8.0, 152.0], [8.1, 152.0], [8.2, 152.0], [8.3, 152.0], [8.4, 152.0], [8.5, 152.0], [8.6, 152.0], [8.7, 153.0], [8.8, 153.0], [8.9, 153.0], [9.0, 153.0], [9.1, 153.0], [9.2, 153.0], [9.3, 153.0], [9.4, 153.0], [9.5, 153.0], [9.6, 153.0], [9.7, 153.0], [9.8, 153.0], [9.9, 153.0], [10.0, 153.0], [10.1, 153.0], [10.2, 153.0], [10.3, 153.0], [10.4, 153.0], [10.5, 154.0], [10.6, 154.0], [10.7, 154.0], [10.8, 154.0], [10.9, 154.0], [11.0, 154.0], [11.1, 154.0], [11.2, 154.0], [11.3, 154.0], [11.4, 154.0], [11.5, 154.0], [11.6, 154.0], [11.7, 154.0], [11.8, 154.0], [11.9, 154.0], [12.0, 154.0], [12.1, 154.0], [12.2, 156.0], [12.3, 156.0], [12.4, 156.0], [12.5, 156.0], [12.6, 156.0], [12.7, 156.0], [12.8, 156.0], [12.9, 156.0], [13.0, 156.0], [13.1, 156.0], [13.2, 156.0], [13.3, 156.0], [13.4, 156.0], [13.5, 156.0], [13.6, 156.0], [13.7, 156.0], [13.8, 156.0], [13.9, 156.0], [14.0, 156.0], [14.1, 156.0], [14.2, 156.0], [14.3, 156.0], [14.4, 156.0], [14.5, 156.0], [14.6, 156.0], [14.7, 156.0], [14.8, 157.0], [14.9, 157.0], [15.0, 157.0], [15.1, 157.0], [15.2, 157.0], [15.3, 157.0], [15.4, 157.0], [15.5, 157.0], [15.6, 157.0], [15.7, 157.0], [15.8, 157.0], [15.9, 157.0], [16.0, 157.0], [16.1, 157.0], [16.2, 157.0], [16.3, 157.0], [16.4, 157.0], [16.5, 157.0], [16.6, 158.0], [16.7, 158.0], [16.8, 158.0], [16.9, 158.0], [17.0, 158.0], [17.1, 158.0], [17.2, 158.0], [17.3, 158.0], [17.4, 158.0], [17.5, 158.0], [17.6, 158.0], [17.7, 158.0], [17.8, 158.0], [17.9, 158.0], [18.0, 158.0], [18.1, 158.0], [18.2, 158.0], [18.3, 158.0], [18.4, 158.0], [18.5, 158.0], [18.6, 158.0], [18.7, 158.0], [18.8, 158.0], [18.9, 158.0], [19.0, 158.0], [19.1, 158.0], [19.2, 158.0], [19.3, 158.0], [19.4, 158.0], [19.5, 158.0], [19.6, 158.0], [19.7, 158.0], [19.8, 158.0], [19.9, 158.0], [20.0, 158.0], [20.1, 158.0], [20.2, 158.0], [20.3, 158.0], [20.4, 158.0], [20.5, 158.0], [20.6, 158.0], [20.7, 158.0], [20.8, 158.0], [20.9, 159.0], [21.0, 159.0], [21.1, 159.0], [21.2, 159.0], [21.3, 159.0], [21.4, 159.0], [21.5, 159.0], [21.6, 159.0], [21.7, 159.0], [21.8, 159.0], [21.9, 159.0], [22.0, 159.0], [22.1, 159.0], [22.2, 159.0], [22.3, 159.0], [22.4, 159.0], [22.5, 159.0], [22.6, 159.0], [22.7, 160.0], [22.8, 160.0], [22.9, 160.0], [23.0, 160.0], [23.1, 160.0], [23.2, 160.0], [23.3, 160.0], [23.4, 160.0], [23.5, 160.0], [23.6, 160.0], [23.7, 160.0], [23.8, 160.0], [23.9, 160.0], [24.0, 160.0], [24.1, 160.0], [24.2, 160.0], [24.3, 160.0], [24.4, 160.0], [24.5, 160.0], [24.6, 160.0], [24.7, 160.0], [24.8, 160.0], [24.9, 160.0], [25.0, 160.0], [25.1, 160.0], [25.2, 160.0], [25.3, 160.0], [25.4, 160.0], [25.5, 160.0], [25.6, 160.0], [25.7, 160.0], [25.8, 160.0], [25.9, 160.0], [26.0, 160.0], [26.1, 161.0], [26.2, 161.0], [26.3, 161.0], [26.4, 161.0], [26.5, 161.0], [26.6, 161.0], [26.7, 161.0], [26.8, 161.0], [26.9, 161.0], [27.0, 161.0], [27.1, 161.0], [27.2, 161.0], [27.3, 161.0], [27.4, 161.0], [27.5, 161.0], [27.6, 161.0], [27.7, 161.0], [27.8, 161.0], [27.9, 162.0], [28.0, 162.0], [28.1, 162.0], [28.2, 162.0], [28.3, 162.0], [28.4, 162.0], [28.5, 162.0], [28.6, 162.0], [28.7, 162.0], [28.8, 162.0], [28.9, 162.0], [29.0, 162.0], [29.1, 162.0], [29.2, 162.0], [29.3, 162.0], [29.4, 162.0], [29.5, 162.0], [29.6, 162.0], [29.7, 162.0], [29.8, 162.0], [29.9, 162.0], [30.0, 162.0], [30.1, 162.0], [30.2, 162.0], [30.3, 162.0], [30.4, 162.0], [30.5, 163.0], [30.6, 163.0], [30.7, 163.0], [30.8, 163.0], [30.9, 163.0], [31.0, 163.0], [31.1, 163.0], [31.2, 163.0], [31.3, 163.0], [31.4, 163.0], [31.5, 163.0], [31.6, 163.0], [31.7, 163.0], [31.8, 163.0], [31.9, 163.0], [32.0, 163.0], [32.1, 163.0], [32.2, 163.0], [32.3, 163.0], [32.4, 163.0], [32.5, 163.0], [32.6, 163.0], [32.7, 163.0], [32.8, 163.0], [32.9, 163.0], [33.0, 163.0], [33.1, 164.0], [33.2, 164.0], [33.3, 164.0], [33.4, 164.0], [33.5, 164.0], [33.6, 164.0], [33.7, 164.0], [33.8, 164.0], [33.9, 164.0], [34.0, 164.0], [34.1, 164.0], [34.2, 164.0], [34.3, 164.0], [34.4, 164.0], [34.5, 164.0], [34.6, 164.0], [34.7, 164.0], [34.8, 164.0], [34.9, 164.0], [35.0, 164.0], [35.1, 164.0], [35.2, 164.0], [35.3, 164.0], [35.4, 164.0], [35.5, 164.0], [35.6, 164.0], [35.7, 165.0], [35.8, 165.0], [35.9, 165.0], [36.0, 165.0], [36.1, 165.0], [36.2, 165.0], [36.3, 165.0], [36.4, 165.0], [36.5, 165.0], [36.6, 165.0], [36.7, 165.0], [36.8, 165.0], [36.9, 165.0], [37.0, 165.0], [37.1, 165.0], [37.2, 165.0], [37.3, 165.0], [37.4, 165.0], [37.5, 165.0], [37.6, 165.0], [37.7, 165.0], [37.8, 165.0], [37.9, 165.0], [38.0, 165.0], [38.1, 165.0], [38.2, 165.0], [38.3, 165.0], [38.4, 165.0], [38.5, 165.0], [38.6, 165.0], [38.7, 165.0], [38.8, 165.0], [38.9, 165.0], [39.0, 165.0], [39.1, 165.0], [39.2, 165.0], [39.3, 165.0], [39.4, 165.0], [39.5, 165.0], [39.6, 165.0], [39.7, 165.0], [39.8, 165.0], [39.9, 165.0], [40.0, 165.0], [40.1, 166.0], [40.2, 166.0], [40.3, 166.0], [40.4, 166.0], [40.5, 166.0], [40.6, 166.0], [40.7, 166.0], [40.8, 166.0], [40.9, 166.0], [41.0, 166.0], [41.1, 166.0], [41.2, 166.0], [41.3, 166.0], [41.4, 166.0], [41.5, 166.0], [41.6, 166.0], [41.7, 166.0], [41.8, 166.0], [41.9, 166.0], [42.0, 166.0], [42.1, 166.0], [42.2, 166.0], [42.3, 166.0], [42.4, 166.0], [42.5, 166.0], [42.6, 166.0], [42.7, 166.0], [42.8, 166.0], [42.9, 166.0], [43.0, 166.0], [43.1, 166.0], [43.2, 166.0], [43.3, 166.0], [43.4, 166.0], [43.5, 166.0], [43.6, 166.0], [43.7, 166.0], [43.8, 166.0], [43.9, 166.0], [44.0, 166.0], [44.1, 166.0], [44.2, 166.0], [44.3, 166.0], [44.4, 166.0], [44.5, 166.0], [44.6, 166.0], [44.7, 166.0], [44.8, 166.0], [44.9, 166.0], [45.0, 166.0], [45.1, 166.0], [45.2, 166.0], [45.3, 166.0], [45.4, 166.0], [45.5, 166.0], [45.6, 166.0], [45.7, 166.0], [45.8, 166.0], [45.9, 166.0], [46.0, 166.0], [46.1, 167.0], [46.2, 167.0], [46.3, 167.0], [46.4, 167.0], [46.5, 167.0], [46.6, 167.0], [46.7, 167.0], [46.8, 167.0], [46.9, 167.0], [47.0, 167.0], [47.1, 167.0], [47.2, 167.0], [47.3, 167.0], [47.4, 167.0], [47.5, 167.0], [47.6, 167.0], [47.7, 167.0], [47.8, 167.0], [47.9, 167.0], [48.0, 167.0], [48.1, 167.0], [48.2, 167.0], [48.3, 167.0], [48.4, 167.0], [48.5, 167.0], [48.6, 167.0], [48.7, 167.0], [48.8, 167.0], [48.9, 167.0], [49.0, 167.0], [49.1, 167.0], [49.2, 167.0], [49.3, 167.0], [49.4, 167.0], [49.5, 167.0], [49.6, 168.0], [49.7, 168.0], [49.8, 168.0], [49.9, 168.0], [50.0, 168.0], [50.1, 168.0], [50.2, 168.0], [50.3, 168.0], [50.4, 168.0], [50.5, 168.0], [50.6, 168.0], [50.7, 168.0], [50.8, 168.0], [50.9, 168.0], [51.0, 168.0], [51.1, 168.0], [51.2, 168.0], [51.3, 168.0], [51.4, 168.0], [51.5, 168.0], [51.6, 168.0], [51.7, 168.0], [51.8, 168.0], [51.9, 168.0], [52.0, 168.0], [52.1, 168.0], [52.2, 168.0], [52.3, 168.0], [52.4, 168.0], [52.5, 168.0], [52.6, 168.0], [52.7, 168.0], [52.8, 168.0], [52.9, 168.0], [53.0, 168.0], [53.1, 169.0], [53.2, 169.0], [53.3, 169.0], [53.4, 169.0], [53.5, 169.0], [53.6, 169.0], [53.7, 169.0], [53.8, 169.0], [53.9, 169.0], [54.0, 170.0], [54.1, 170.0], [54.2, 170.0], [54.3, 170.0], [54.4, 170.0], [54.5, 170.0], [54.6, 170.0], [54.7, 170.0], [54.8, 170.0], [54.9, 170.0], [55.0, 170.0], [55.1, 170.0], [55.2, 170.0], [55.3, 170.0], [55.4, 170.0], [55.5, 170.0], [55.6, 170.0], [55.7, 170.0], [55.8, 170.0], [55.9, 170.0], [56.0, 170.0], [56.1, 170.0], [56.2, 170.0], [56.3, 170.0], [56.4, 170.0], [56.5, 170.0], [56.6, 171.0], [56.7, 171.0], [56.8, 171.0], [56.9, 171.0], [57.0, 171.0], [57.1, 171.0], [57.2, 171.0], [57.3, 171.0], [57.4, 171.0], [57.5, 171.0], [57.6, 171.0], [57.7, 171.0], [57.8, 171.0], [57.9, 171.0], [58.0, 171.0], [58.1, 171.0], [58.2, 171.0], [58.3, 172.0], [58.4, 172.0], [58.5, 172.0], [58.6, 172.0], [58.7, 172.0], [58.8, 172.0], [58.9, 172.0], [59.0, 172.0], [59.1, 172.0], [59.2, 172.0], [59.3, 172.0], [59.4, 172.0], [59.5, 172.0], [59.6, 172.0], [59.7, 172.0], [59.8, 172.0], [59.9, 172.0], [60.0, 172.0], [60.1, 172.0], [60.2, 172.0], [60.3, 172.0], [60.4, 172.0], [60.5, 172.0], [60.6, 172.0], [60.7, 172.0], [60.8, 172.0], [60.9, 173.0], [61.0, 173.0], [61.1, 173.0], [61.2, 173.0], [61.3, 173.0], [61.4, 173.0], [61.5, 173.0], [61.6, 173.0], [61.7, 173.0], [61.8, 173.0], [61.9, 173.0], [62.0, 173.0], [62.1, 173.0], [62.2, 173.0], [62.3, 173.0], [62.4, 173.0], [62.5, 173.0], [62.6, 173.0], [62.7, 174.0], [62.8, 174.0], [62.9, 174.0], [63.0, 174.0], [63.1, 174.0], [63.2, 174.0], [63.3, 174.0], [63.4, 174.0], [63.5, 174.0], [63.6, 174.0], [63.7, 174.0], [63.8, 174.0], [63.9, 174.0], [64.0, 174.0], [64.1, 174.0], [64.2, 174.0], [64.3, 174.0], [64.4, 174.0], [64.5, 174.0], [64.6, 174.0], [64.7, 174.0], [64.8, 174.0], [64.9, 174.0], [65.0, 174.0], [65.1, 174.0], [65.2, 174.0], [65.3, 175.0], [65.4, 175.0], [65.5, 175.0], [65.6, 175.0], [65.7, 175.0], [65.8, 175.0], [65.9, 175.0], [66.0, 175.0], [66.1, 175.0], [66.2, 175.0], [66.3, 175.0], [66.4, 175.0], [66.5, 175.0], [66.6, 175.0], [66.7, 175.0], [66.8, 175.0], [66.9, 175.0], [67.0, 175.0], [67.1, 175.0], [67.2, 175.0], [67.3, 175.0], [67.4, 175.0], [67.5, 175.0], [67.6, 175.0], [67.7, 175.0], [67.8, 175.0], [67.9, 175.0], [68.0, 175.0], [68.1, 175.0], [68.2, 175.0], [68.3, 175.0], [68.4, 175.0], [68.5, 175.0], [68.6, 175.0], [68.7, 176.0], [68.8, 176.0], [68.9, 176.0], [69.0, 176.0], [69.1, 176.0], [69.2, 176.0], [69.3, 176.0], [69.4, 176.0], [69.5, 176.0], [69.6, 178.0], [69.7, 178.0], [69.8, 178.0], [69.9, 178.0], [70.0, 178.0], [70.1, 178.0], [70.2, 178.0], [70.3, 178.0], [70.4, 178.0], [70.5, 180.0], [70.6, 180.0], [70.7, 180.0], [70.8, 180.0], [70.9, 180.0], [71.0, 180.0], [71.1, 180.0], [71.2, 180.0], [71.3, 180.0], [71.4, 180.0], [71.5, 180.0], [71.6, 180.0], [71.7, 180.0], [71.8, 180.0], [71.9, 180.0], [72.0, 180.0], [72.1, 180.0], [72.2, 183.0], [72.3, 183.0], [72.4, 183.0], [72.5, 183.0], [72.6, 183.0], [72.7, 183.0], [72.8, 183.0], [72.9, 183.0], [73.0, 183.0], [73.1, 184.0], [73.2, 184.0], [73.3, 184.0], [73.4, 184.0], [73.5, 184.0], [73.6, 184.0], [73.7, 184.0], [73.8, 184.0], [73.9, 184.0], [74.0, 184.0], [74.1, 184.0], [74.2, 184.0], [74.3, 184.0], [74.4, 184.0], [74.5, 184.0], [74.6, 184.0], [74.7, 184.0], [74.8, 185.0], [74.9, 185.0], [75.0, 185.0], [75.1, 185.0], [75.2, 185.0], [75.3, 185.0], [75.4, 185.0], [75.5, 185.0], [75.6, 185.0], [75.7, 186.0], [75.8, 186.0], [75.9, 186.0], [76.0, 186.0], [76.1, 186.0], [76.2, 186.0], [76.3, 186.0], [76.4, 186.0], [76.5, 186.0], [76.6, 186.0], [76.7, 186.0], [76.8, 186.0], [76.9, 186.0], [77.0, 186.0], [77.1, 186.0], [77.2, 186.0], [77.3, 186.0], [77.4, 186.0], [77.5, 186.0], [77.6, 186.0], [77.7, 186.0], [77.8, 186.0], [77.9, 186.0], [78.0, 186.0], [78.1, 186.0], [78.2, 186.0], [78.3, 187.0], [78.4, 187.0], [78.5, 187.0], [78.6, 187.0], [78.7, 187.0], [78.8, 187.0], [78.9, 187.0], [79.0, 187.0], [79.1, 187.0], [79.2, 188.0], [79.3, 188.0], [79.4, 188.0], [79.5, 188.0], [79.6, 188.0], [79.7, 188.0], [79.8, 188.0], [79.9, 188.0], [80.0, 188.0], [80.1, 188.0], [80.2, 188.0], [80.3, 188.0], [80.4, 188.0], [80.5, 188.0], [80.6, 188.0], [80.7, 188.0], [80.8, 188.0], [80.9, 188.0], [81.0, 188.0], [81.1, 188.0], [81.2, 188.0], [81.3, 188.0], [81.4, 188.0], [81.5, 188.0], [81.6, 188.0], [81.7, 188.0], [81.8, 190.0], [81.9, 190.0], [82.0, 190.0], [82.1, 190.0], [82.2, 190.0], [82.3, 190.0], [82.4, 190.0], [82.5, 190.0], [82.6, 190.0], [82.7, 194.0], [82.8, 194.0], [82.9, 194.0], [83.0, 194.0], [83.1, 194.0], [83.2, 194.0], [83.3, 194.0], [83.4, 194.0], [83.5, 194.0], [83.6, 194.0], [83.7, 194.0], [83.8, 194.0], [83.9, 194.0], [84.0, 194.0], [84.1, 194.0], [84.2, 194.0], [84.3, 194.0], [84.4, 196.0], [84.5, 196.0], [84.6, 196.0], [84.7, 196.0], [84.8, 196.0], [84.9, 196.0], [85.0, 196.0], [85.1, 196.0], [85.2, 196.0], [85.3, 197.0], [85.4, 197.0], [85.5, 197.0], [85.6, 197.0], [85.7, 197.0], [85.8, 197.0], [85.9, 197.0], [86.0, 197.0], [86.1, 200.0], [86.2, 200.0], [86.3, 200.0], [86.4, 200.0], [86.5, 200.0], [86.6, 200.0], [86.7, 200.0], [86.8, 200.0], [86.9, 200.0], [87.0, 205.0], [87.1, 205.0], [87.2, 205.0], [87.3, 205.0], [87.4, 205.0], [87.5, 205.0], [87.6, 205.0], [87.7, 205.0], [87.8, 205.0], [87.9, 206.0], [88.0, 206.0], [88.1, 206.0], [88.2, 206.0], [88.3, 206.0], [88.4, 206.0], [88.5, 206.0], [88.6, 206.0], [88.7, 208.0], [88.8, 208.0], [88.9, 208.0], [89.0, 208.0], [89.1, 208.0], [89.2, 208.0], [89.3, 208.0], [89.4, 208.0], [89.5, 208.0], [89.6, 235.0], [89.7, 235.0], [89.8, 235.0], [89.9, 235.0], [90.0, 235.0], [90.1, 235.0], [90.2, 235.0], [90.3, 235.0], [90.4, 235.0], [90.5, 242.0], [90.6, 242.0], [90.7, 242.0], [90.8, 242.0], [90.9, 242.0], [91.0, 242.0], [91.1, 242.0], [91.2, 242.0], [91.3, 242.0], [91.4, 267.0], [91.5, 267.0], [91.6, 267.0], [91.7, 267.0], [91.8, 267.0], [91.9, 267.0], [92.0, 267.0], [92.1, 267.0], [92.2, 277.0], [92.3, 277.0], [92.4, 277.0], [92.5, 277.0], [92.6, 277.0], [92.7, 277.0], [92.8, 277.0], [92.9, 277.0], [93.0, 277.0], [93.1, 293.0], [93.2, 293.0], [93.3, 293.0], [93.4, 293.0], [93.5, 293.0], [93.6, 293.0], [93.7, 293.0], [93.8, 293.0], [93.9, 293.0], [94.0, 294.0], [94.1, 294.0], [94.2, 294.0], [94.3, 294.0], [94.4, 294.0], [94.5, 294.0], [94.6, 294.0], [94.7, 294.0], [94.8, 327.0], [94.9, 327.0], [95.0, 327.0], [95.1, 327.0], [95.2, 327.0], [95.3, 327.0], [95.4, 327.0], [95.5, 327.0], [95.6, 327.0], [95.7, 405.0], [95.8, 405.0], [95.9, 405.0], [96.0, 405.0], [96.1, 405.0], [96.2, 405.0], [96.3, 405.0], [96.4, 405.0], [96.5, 405.0], [96.6, 521.0], [96.7, 521.0], [96.8, 521.0], [96.9, 521.0], [97.0, 521.0], [97.1, 521.0], [97.2, 521.0], [97.3, 521.0], [97.4, 631.0], [97.5, 631.0], [97.6, 631.0], [97.7, 631.0], [97.8, 631.0], [97.9, 631.0], [98.0, 631.0], [98.1, 631.0], [98.2, 631.0], [98.3, 656.0], [98.4, 656.0], [98.5, 656.0], [98.6, 656.0], [98.7, 656.0], [98.8, 656.0], [98.9, 656.0], [99.0, 656.0], [99.1, 656.0], [99.2, 724.0], [99.3, 724.0], [99.4, 724.0], [99.5, 724.0], [99.6, 724.0], [99.7, 724.0], [99.8, 724.0], [99.9, 724.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 8.0], [0.1, 13.0], [0.2, 29.0], [0.3, 32.0], [0.4, 33.0], [0.5, 34.0], [0.6, 34.0], [0.7, 35.0], [0.8, 36.0], [0.9, 37.0], [1.0, 37.0], [1.1, 37.0], [1.2, 37.0], [1.3, 38.0], [1.4, 38.0], [1.5, 39.0], [1.6, 39.0], [1.7, 39.0], [1.8, 40.0], [1.9, 40.0], [2.0, 40.0], [2.1, 40.0], [2.2, 40.0], [2.3, 41.0], [2.4, 41.0], [2.5, 41.0], [2.6, 41.0], [2.7, 42.0], [2.8, 42.0], [2.9, 42.0], [3.0, 42.0], [3.1, 42.0], [3.2, 43.0], [3.3, 43.0], [3.4, 43.0], [3.5, 43.0], [3.6, 43.0], [3.7, 44.0], [3.8, 44.0], [3.9, 44.0], [4.0, 44.0], [4.1, 44.0], [4.2, 45.0], [4.3, 45.0], [4.4, 45.0], [4.5, 45.0], [4.6, 45.0], [4.7, 46.0], [4.8, 46.0], [4.9, 46.0], [5.0, 46.0], [5.1, 46.0], [5.2, 47.0], [5.3, 47.0], [5.4, 47.0], [5.5, 47.0], [5.6, 48.0], [5.7, 48.0], [5.8, 48.0], [5.9, 49.0], [6.0, 49.0], [6.1, 49.0], [6.2, 49.0], [6.3, 50.0], [6.4, 50.0], [6.5, 50.0], [6.6, 50.0], [6.7, 51.0], [6.8, 51.0], [6.9, 51.0], [7.0, 51.0], [7.1, 52.0], [7.2, 52.0], [7.3, 52.0], [7.4, 52.0], [7.5, 53.0], [7.6, 53.0], [7.7, 53.0], [7.8, 54.0], [7.9, 54.0], [8.0, 54.0], [8.1, 54.0], [8.2, 55.0], [8.3, 55.0], [8.4, 55.0], [8.5, 56.0], [8.6, 56.0], [8.7, 56.0], [8.8, 57.0], [8.9, 57.0], [9.0, 58.0], [9.1, 58.0], [9.2, 59.0], [9.3, 59.0], [9.4, 60.0], [9.5, 61.0], [9.6, 62.0], [9.7, 62.0], [9.8, 64.0], [9.9, 66.0], [10.0, 68.0], [10.1, 69.0], [10.2, 71.0], [10.3, 76.0], [10.4, 81.0], [10.5, 92.0], [10.6, 103.0], [10.7, 145.0], [10.8, 171.0], [10.9, 197.0], [11.0, 217.0], [11.1, 230.0], [11.2, 251.0], [11.3, 264.0], [11.4, 273.0], [11.5, 293.0], [11.6, 306.0], [11.7, 313.0], [11.8, 325.0], [11.9, 329.0], [12.0, 340.0], [12.1, 352.0], [12.2, 363.0], [12.3, 367.0], [12.4, 375.0], [12.5, 381.0], [12.6, 391.0], [12.7, 400.0], [12.8, 404.0], [12.9, 410.0], [13.0, 415.0], [13.1, 421.0], [13.2, 424.0], [13.3, 428.0], [13.4, 433.0], [13.5, 438.0], [13.6, 444.0], [13.7, 449.0], [13.8, 453.0], [13.9, 458.0], [14.0, 461.0], [14.1, 464.0], [14.2, 467.0], [14.3, 471.0], [14.4, 475.0], [14.5, 479.0], [14.6, 483.0], [14.7, 486.0], [14.8, 489.0], [14.9, 492.0], [15.0, 497.0], [15.1, 502.0], [15.2, 506.0], [15.3, 509.0], [15.4, 511.0], [15.5, 515.0], [15.6, 518.0], [15.7, 521.0], [15.8, 525.0], [15.9, 527.0], [16.0, 531.0], [16.1, 533.0], [16.2, 535.0], [16.3, 538.0], [16.4, 541.0], [16.5, 544.0], [16.6, 546.0], [16.7, 549.0], [16.8, 551.0], [16.9, 554.0], [17.0, 556.0], [17.1, 560.0], [17.2, 564.0], [17.3, 567.0], [17.4, 570.0], [17.5, 573.0], [17.6, 577.0], [17.7, 579.0], [17.8, 583.0], [17.9, 585.0], [18.0, 587.0], [18.1, 590.0], [18.2, 593.0], [18.3, 596.0], [18.4, 597.0], [18.5, 599.0], [18.6, 601.0], [18.7, 603.0], [18.8, 605.0], [18.9, 609.0], [19.0, 611.0], [19.1, 614.0], [19.2, 616.0], [19.3, 618.0], [19.4, 621.0], [19.5, 623.0], [19.6, 625.0], [19.7, 627.0], [19.8, 628.0], [19.9, 631.0], [20.0, 634.0], [20.1, 637.0], [20.2, 638.0], [20.3, 640.0], [20.4, 641.0], [20.5, 643.0], [20.6, 644.0], [20.7, 646.0], [20.8, 647.0], [20.9, 649.0], [21.0, 651.0], [21.1, 652.0], [21.2, 654.0], [21.3, 656.0], [21.4, 658.0], [21.5, 661.0], [21.6, 663.0], [21.7, 665.0], [21.8, 668.0], [21.9, 670.0], [22.0, 672.0], [22.1, 674.0], [22.2, 676.0], [22.3, 678.0], [22.4, 680.0], [22.5, 683.0], [22.6, 685.0], [22.7, 687.0], [22.8, 688.0], [22.9, 690.0], [23.0, 692.0], [23.1, 695.0], [23.2, 696.0], [23.3, 699.0], [23.4, 701.0], [23.5, 704.0], [23.6, 705.0], [23.7, 708.0], [23.8, 709.0], [23.9, 711.0], [24.0, 713.0], [24.1, 714.0], [24.2, 717.0], [24.3, 720.0], [24.4, 721.0], [24.5, 723.0], [24.6, 724.0], [24.7, 726.0], [24.8, 729.0], [24.9, 730.0], [25.0, 732.0], [25.1, 734.0], [25.2, 735.0], [25.3, 738.0], [25.4, 739.0], [25.5, 741.0], [25.6, 742.0], [25.7, 743.0], [25.8, 745.0], [25.9, 746.0], [26.0, 749.0], [26.1, 750.0], [26.2, 752.0], [26.3, 753.0], [26.4, 754.0], [26.5, 756.0], [26.6, 759.0], [26.7, 760.0], [26.8, 762.0], [26.9, 765.0], [27.0, 766.0], [27.1, 767.0], [27.2, 769.0], [27.3, 770.0], [27.4, 772.0], [27.5, 774.0], [27.6, 775.0], [27.7, 777.0], [27.8, 778.0], [27.9, 780.0], [28.0, 782.0], [28.1, 784.0], [28.2, 785.0], [28.3, 786.0], [28.4, 787.0], [28.5, 788.0], [28.6, 789.0], [28.7, 792.0], [28.8, 793.0], [28.9, 796.0], [29.0, 798.0], [29.1, 800.0], [29.2, 801.0], [29.3, 802.0], [29.4, 803.0], [29.5, 805.0], [29.6, 807.0], [29.7, 809.0], [29.8, 811.0], [29.9, 813.0], [30.0, 815.0], [30.1, 816.0], [30.2, 817.0], [30.3, 819.0], [30.4, 821.0], [30.5, 822.0], [30.6, 824.0], [30.7, 825.0], [30.8, 827.0], [30.9, 828.0], [31.0, 829.0], [31.1, 832.0], [31.2, 833.0], [31.3, 834.0], [31.4, 836.0], [31.5, 839.0], [31.6, 840.0], [31.7, 842.0], [31.8, 844.0], [31.9, 845.0], [32.0, 847.0], [32.1, 849.0], [32.2, 850.0], [32.3, 852.0], [32.4, 853.0], [32.5, 854.0], [32.6, 855.0], [32.7, 857.0], [32.8, 857.0], [32.9, 859.0], [33.0, 860.0], [33.1, 862.0], [33.2, 862.0], [33.3, 864.0], [33.4, 864.0], [33.5, 866.0], [33.6, 867.0], [33.7, 869.0], [33.8, 870.0], [33.9, 873.0], [34.0, 874.0], [34.1, 876.0], [34.2, 877.0], [34.3, 879.0], [34.4, 881.0], [34.5, 882.0], [34.6, 884.0], [34.7, 885.0], [34.8, 886.0], [34.9, 888.0], [35.0, 889.0], [35.1, 891.0], [35.2, 893.0], [35.3, 894.0], [35.4, 896.0], [35.5, 897.0], [35.6, 899.0], [35.7, 901.0], [35.8, 901.0], [35.9, 903.0], [36.0, 904.0], [36.1, 906.0], [36.2, 907.0], [36.3, 908.0], [36.4, 910.0], [36.5, 911.0], [36.6, 912.0], [36.7, 914.0], [36.8, 915.0], [36.9, 916.0], [37.0, 918.0], [37.1, 919.0], [37.2, 920.0], [37.3, 921.0], [37.4, 922.0], [37.5, 923.0], [37.6, 924.0], [37.7, 926.0], [37.8, 927.0], [37.9, 928.0], [38.0, 929.0], [38.1, 930.0], [38.2, 931.0], [38.3, 933.0], [38.4, 934.0], [38.5, 935.0], [38.6, 937.0], [38.7, 939.0], [38.8, 941.0], [38.9, 942.0], [39.0, 943.0], [39.1, 946.0], [39.2, 947.0], [39.3, 948.0], [39.4, 950.0], [39.5, 951.0], [39.6, 952.0], [39.7, 953.0], [39.8, 955.0], [39.9, 956.0], [40.0, 957.0], [40.1, 958.0], [40.2, 960.0], [40.3, 962.0], [40.4, 962.0], [40.5, 964.0], [40.6, 965.0], [40.7, 967.0], [40.8, 967.0], [40.9, 969.0], [41.0, 971.0], [41.1, 973.0], [41.2, 974.0], [41.3, 975.0], [41.4, 976.0], [41.5, 978.0], [41.6, 979.0], [41.7, 980.0], [41.8, 982.0], [41.9, 983.0], [42.0, 984.0], [42.1, 986.0], [42.2, 987.0], [42.3, 988.0], [42.4, 990.0], [42.5, 990.0], [42.6, 992.0], [42.7, 993.0], [42.8, 994.0], [42.9, 996.0], [43.0, 997.0], [43.1, 998.0], [43.2, 1000.0], [43.3, 1001.0], [43.4, 1002.0], [43.5, 1005.0], [43.6, 1006.0], [43.7, 1007.0], [43.8, 1009.0], [43.9, 1011.0], [44.0, 1012.0], [44.1, 1014.0], [44.2, 1015.0], [44.3, 1015.0], [44.4, 1016.0], [44.5, 1018.0], [44.6, 1019.0], [44.7, 1021.0], [44.8, 1022.0], [44.9, 1024.0], [45.0, 1024.0], [45.1, 1026.0], [45.2, 1028.0], [45.3, 1029.0], [45.4, 1030.0], [45.5, 1032.0], [45.6, 1033.0], [45.7, 1034.0], [45.8, 1036.0], [45.9, 1037.0], [46.0, 1038.0], [46.1, 1040.0], [46.2, 1042.0], [46.3, 1044.0], [46.4, 1045.0], [46.5, 1047.0], [46.6, 1048.0], [46.7, 1049.0], [46.8, 1050.0], [46.9, 1052.0], [47.0, 1053.0], [47.1, 1054.0], [47.2, 1055.0], [47.3, 1058.0], [47.4, 1059.0], [47.5, 1060.0], [47.6, 1061.0], [47.7, 1062.0], [47.8, 1062.0], [47.9, 1063.0], [48.0, 1064.0], [48.1, 1065.0], [48.2, 1067.0], [48.3, 1068.0], [48.4, 1070.0], [48.5, 1071.0], [48.6, 1072.0], [48.7, 1074.0], [48.8, 1075.0], [48.9, 1076.0], [49.0, 1077.0], [49.1, 1078.0], [49.2, 1079.0], [49.3, 1080.0], [49.4, 1081.0], [49.5, 1082.0], [49.6, 1084.0], [49.7, 1085.0], [49.8, 1087.0], [49.9, 1088.0], [50.0, 1089.0], [50.1, 1091.0], [50.2, 1092.0], [50.3, 1093.0], [50.4, 1094.0], [50.5, 1095.0], [50.6, 1096.0], [50.7, 1097.0], [50.8, 1098.0], [50.9, 1099.0], [51.0, 1100.0], [51.1, 1101.0], [51.2, 1102.0], [51.3, 1104.0], [51.4, 1106.0], [51.5, 1106.0], [51.6, 1108.0], [51.7, 1108.0], [51.8, 1109.0], [51.9, 1110.0], [52.0, 1111.0], [52.1, 1112.0], [52.2, 1113.0], [52.3, 1114.0], [52.4, 1115.0], [52.5, 1116.0], [52.6, 1118.0], [52.7, 1120.0], [52.8, 1120.0], [52.9, 1122.0], [53.0, 1124.0], [53.1, 1125.0], [53.2, 1126.0], [53.3, 1127.0], [53.4, 1128.0], [53.5, 1131.0], [53.6, 1132.0], [53.7, 1133.0], [53.8, 1135.0], [53.9, 1136.0], [54.0, 1137.0], [54.1, 1137.0], [54.2, 1139.0], [54.3, 1141.0], [54.4, 1142.0], [54.5, 1144.0], [54.6, 1145.0], [54.7, 1146.0], [54.8, 1148.0], [54.9, 1149.0], [55.0, 1151.0], [55.1, 1152.0], [55.2, 1153.0], [55.3, 1155.0], [55.4, 1157.0], [55.5, 1158.0], [55.6, 1160.0], [55.7, 1161.0], [55.8, 1163.0], [55.9, 1164.0], [56.0, 1165.0], [56.1, 1167.0], [56.2, 1168.0], [56.3, 1169.0], [56.4, 1170.0], [56.5, 1172.0], [56.6, 1173.0], [56.7, 1174.0], [56.8, 1175.0], [56.9, 1176.0], [57.0, 1177.0], [57.1, 1178.0], [57.2, 1179.0], [57.3, 1180.0], [57.4, 1181.0], [57.5, 1182.0], [57.6, 1183.0], [57.7, 1184.0], [57.8, 1186.0], [57.9, 1188.0], [58.0, 1189.0], [58.1, 1190.0], [58.2, 1192.0], [58.3, 1193.0], [58.4, 1194.0], [58.5, 1196.0], [58.6, 1197.0], [58.7, 1198.0], [58.8, 1198.0], [58.9, 1199.0], [59.0, 1201.0], [59.1, 1203.0], [59.2, 1204.0], [59.3, 1205.0], [59.4, 1207.0], [59.5, 1207.0], [59.6, 1209.0], [59.7, 1210.0], [59.8, 1212.0], [59.9, 1213.0], [60.0, 1213.0], [60.1, 1215.0], [60.2, 1216.0], [60.3, 1217.0], [60.4, 1218.0], [60.5, 1219.0], [60.6, 1220.0], [60.7, 1221.0], [60.8, 1222.0], [60.9, 1223.0], [61.0, 1225.0], [61.1, 1227.0], [61.2, 1227.0], [61.3, 1228.0], [61.4, 1229.0], [61.5, 1231.0], [61.6, 1233.0], [61.7, 1233.0], [61.8, 1235.0], [61.9, 1236.0], [62.0, 1237.0], [62.1, 1238.0], [62.2, 1240.0], [62.3, 1241.0], [62.4, 1242.0], [62.5, 1243.0], [62.6, 1245.0], [62.7, 1246.0], [62.8, 1247.0], [62.9, 1249.0], [63.0, 1250.0], [63.1, 1252.0], [63.2, 1254.0], [63.3, 1255.0], [63.4, 1256.0], [63.5, 1257.0], [63.6, 1258.0], [63.7, 1260.0], [63.8, 1261.0], [63.9, 1262.0], [64.0, 1264.0], [64.1, 1265.0], [64.2, 1266.0], [64.3, 1268.0], [64.4, 1268.0], [64.5, 1270.0], [64.6, 1272.0], [64.7, 1273.0], [64.8, 1274.0], [64.9, 1275.0], [65.0, 1277.0], [65.1, 1278.0], [65.2, 1279.0], [65.3, 1280.0], [65.4, 1282.0], [65.5, 1284.0], [65.6, 1285.0], [65.7, 1287.0], [65.8, 1288.0], [65.9, 1290.0], [66.0, 1292.0], [66.1, 1293.0], [66.2, 1294.0], [66.3, 1295.0], [66.4, 1297.0], [66.5, 1298.0], [66.6, 1300.0], [66.7, 1301.0], [66.8, 1304.0], [66.9, 1305.0], [67.0, 1307.0], [67.1, 1308.0], [67.2, 1309.0], [67.3, 1311.0], [67.4, 1313.0], [67.5, 1315.0], [67.6, 1317.0], [67.7, 1318.0], [67.8, 1320.0], [67.9, 1321.0], [68.0, 1323.0], [68.1, 1324.0], [68.2, 1327.0], [68.3, 1328.0], [68.4, 1329.0], [68.5, 1331.0], [68.6, 1333.0], [68.7, 1334.0], [68.8, 1336.0], [68.9, 1337.0], [69.0, 1339.0], [69.1, 1341.0], [69.2, 1343.0], [69.3, 1344.0], [69.4, 1346.0], [69.5, 1347.0], [69.6, 1350.0], [69.7, 1351.0], [69.8, 1353.0], [69.9, 1355.0], [70.0, 1356.0], [70.1, 1359.0], [70.2, 1361.0], [70.3, 1363.0], [70.4, 1365.0], [70.5, 1367.0], [70.6, 1370.0], [70.7, 1370.0], [70.8, 1373.0], [70.9, 1374.0], [71.0, 1376.0], [71.1, 1378.0], [71.2, 1380.0], [71.3, 1381.0], [71.4, 1383.0], [71.5, 1384.0], [71.6, 1386.0], [71.7, 1387.0], [71.8, 1388.0], [71.9, 1390.0], [72.0, 1392.0], [72.1, 1393.0], [72.2, 1395.0], [72.3, 1396.0], [72.4, 1398.0], [72.5, 1400.0], [72.6, 1402.0], [72.7, 1403.0], [72.8, 1405.0], [72.9, 1406.0], [73.0, 1408.0], [73.1, 1409.0], [73.2, 1411.0], [73.3, 1413.0], [73.4, 1415.0], [73.5, 1416.0], [73.6, 1418.0], [73.7, 1420.0], [73.8, 1422.0], [73.9, 1423.0], [74.0, 1424.0], [74.1, 1426.0], [74.2, 1427.0], [74.3, 1428.0], [74.4, 1430.0], [74.5, 1432.0], [74.6, 1433.0], [74.7, 1435.0], [74.8, 1437.0], [74.9, 1439.0], [75.0, 1441.0], [75.1, 1443.0], [75.2, 1445.0], [75.3, 1446.0], [75.4, 1448.0], [75.5, 1450.0], [75.6, 1451.0], [75.7, 1453.0], [75.8, 1455.0], [75.9, 1457.0], [76.0, 1458.0], [76.1, 1461.0], [76.2, 1463.0], [76.3, 1464.0], [76.4, 1465.0], [76.5, 1467.0], [76.6, 1469.0], [76.7, 1471.0], [76.8, 1472.0], [76.9, 1473.0], [77.0, 1475.0], [77.1, 1478.0], [77.2, 1479.0], [77.3, 1481.0], [77.4, 1484.0], [77.5, 1486.0], [77.6, 1488.0], [77.7, 1490.0], [77.8, 1492.0], [77.9, 1494.0], [78.0, 1495.0], [78.1, 1497.0], [78.2, 1499.0], [78.3, 1500.0], [78.4, 1505.0], [78.5, 1507.0], [78.6, 1509.0], [78.7, 1511.0], [78.8, 1513.0], [78.9, 1515.0], [79.0, 1517.0], [79.1, 1518.0], [79.2, 1520.0], [79.3, 1521.0], [79.4, 1524.0], [79.5, 1527.0], [79.6, 1529.0], [79.7, 1530.0], [79.8, 1532.0], [79.9, 1534.0], [80.0, 1537.0], [80.1, 1539.0], [80.2, 1543.0], [80.3, 1544.0], [80.4, 1546.0], [80.5, 1549.0], [80.6, 1551.0], [80.7, 1554.0], [80.8, 1556.0], [80.9, 1557.0], [81.0, 1559.0], [81.1, 1561.0], [81.2, 1563.0], [81.3, 1564.0], [81.4, 1567.0], [81.5, 1569.0], [81.6, 1571.0], [81.7, 1573.0], [81.8, 1575.0], [81.9, 1577.0], [82.0, 1580.0], [82.1, 1581.0], [82.2, 1583.0], [82.3, 1585.0], [82.4, 1587.0], [82.5, 1589.0], [82.6, 1590.0], [82.7, 1593.0], [82.8, 1596.0], [82.9, 1598.0], [83.0, 1602.0], [83.1, 1604.0], [83.2, 1607.0], [83.3, 1609.0], [83.4, 1611.0], [83.5, 1615.0], [83.6, 1617.0], [83.7, 1619.0], [83.8, 1621.0], [83.9, 1624.0], [84.0, 1626.0], [84.1, 1630.0], [84.2, 1632.0], [84.3, 1634.0], [84.4, 1637.0], [84.5, 1640.0], [84.6, 1644.0], [84.7, 1646.0], [84.8, 1649.0], [84.9, 1651.0], [85.0, 1653.0], [85.1, 1655.0], [85.2, 1658.0], [85.3, 1661.0], [85.4, 1663.0], [85.5, 1666.0], [85.6, 1669.0], [85.7, 1673.0], [85.8, 1677.0], [85.9, 1679.0], [86.0, 1682.0], [86.1, 1685.0], [86.2, 1686.0], [86.3, 1687.0], [86.4, 1689.0], [86.5, 1693.0], [86.6, 1695.0], [86.7, 1699.0], [86.8, 1701.0], [86.9, 1703.0], [87.0, 1706.0], [87.1, 1710.0], [87.2, 1713.0], [87.3, 1719.0], [87.4, 1722.0], [87.5, 1725.0], [87.6, 1727.0], [87.7, 1731.0], [87.8, 1735.0], [87.9, 1737.0], [88.0, 1741.0], [88.1, 1744.0], [88.2, 1748.0], [88.3, 1752.0], [88.4, 1755.0], [88.5, 1757.0], [88.6, 1760.0], [88.7, 1763.0], [88.8, 1767.0], [88.9, 1772.0], [89.0, 1775.0], [89.1, 1778.0], [89.2, 1783.0], [89.3, 1786.0], [89.4, 1790.0], [89.5, 1792.0], [89.6, 1796.0], [89.7, 1800.0], [89.8, 1804.0], [89.9, 1808.0], [90.0, 1812.0], [90.1, 1816.0], [90.2, 1820.0], [90.3, 1822.0], [90.4, 1825.0], [90.5, 1829.0], [90.6, 1832.0], [90.7, 1834.0], [90.8, 1837.0], [90.9, 1841.0], [91.0, 1845.0], [91.1, 1850.0], [91.2, 1855.0], [91.3, 1858.0], [91.4, 1864.0], [91.5, 1868.0], [91.6, 1871.0], [91.7, 1875.0], [91.8, 1885.0], [91.9, 1889.0], [92.0, 1895.0], [92.1, 1898.0], [92.2, 1903.0], [92.3, 1907.0], [92.4, 1911.0], [92.5, 1914.0], [92.6, 1920.0], [92.7, 1924.0], [92.8, 1931.0], [92.9, 1934.0], [93.0, 1938.0], [93.1, 1943.0], [93.2, 1947.0], [93.3, 1953.0], [93.4, 1960.0], [93.5, 1963.0], [93.6, 1967.0], [93.7, 1972.0], [93.8, 1978.0], [93.9, 1980.0], [94.0, 1987.0], [94.1, 1991.0], [94.2, 1994.0], [94.3, 2001.0], [94.4, 2005.0], [94.5, 2013.0], [94.6, 2021.0], [94.7, 2027.0], [94.8, 2032.0], [94.9, 2039.0], [95.0, 2050.0], [95.1, 2059.0], [95.2, 2063.0], [95.3, 2068.0], [95.4, 2075.0], [95.5, 2081.0], [95.6, 2086.0], [95.7, 2090.0], [95.8, 2092.0], [95.9, 2101.0], [96.0, 2110.0], [96.1, 2116.0], [96.2, 2125.0], [96.3, 2131.0], [96.4, 2145.0], [96.5, 2149.0], [96.6, 2155.0], [96.7, 2164.0], [96.8, 2170.0], [96.9, 2176.0], [97.0, 2183.0], [97.1, 2195.0], [97.2, 2211.0], [97.3, 2224.0], [97.4, 2237.0], [97.5, 2247.0], [97.6, 2264.0], [97.7, 2279.0], [97.8, 2293.0], [97.9, 2310.0], [98.0, 2325.0], [98.1, 2346.0], [98.2, 2364.0], [98.3, 2376.0], [98.4, 2392.0], [98.5, 2402.0], [98.6, 2433.0], [98.7, 2463.0], [98.8, 2492.0], [98.9, 2504.0], [99.0, 2527.0], [99.1, 2572.0], [99.2, 2607.0], [99.3, 2641.0], [99.4, 2697.0], [99.5, 2746.0], [99.6, 2803.0], [99.7, 2867.0], [99.8, 3035.0], [99.9, 3246.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1236.0, "series": [{"data": [[0.0, 1236.0], [600.0, 556.0], [700.0, 673.0], [800.0, 754.0], [900.0, 839.0], [1000.0, 843.0], [1100.0, 874.0], [1200.0, 838.0], [1300.0, 677.0], [1400.0, 663.0], [1500.0, 549.0], [100.0, 35.0], [1600.0, 439.0], [1700.0, 378.0], [1800.0, 309.0], [1900.0, 252.0], [2000.0, 184.0], [2100.0, 141.0], [2200.0, 99.0], [2300.0, 79.0], [2400.0, 50.0], [2500.0, 35.0], [2600.0, 32.0], [2700.0, 7.0], [2800.0, 12.0], [2900.0, 7.0], [3000.0, 10.0], [3100.0, 1.0], [200.0, 70.0], [3200.0, 4.0], [3300.0, 1.0], [3400.0, 1.0], [3600.0, 1.0], [4300.0, 1.0], [300.0, 148.0], [5400.0, 1.0], [400.0, 274.0], [500.0, 427.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[600.0, 2.0], [300.0, 1.0], [700.0, 1.0], [200.0, 10.0], [100.0, 99.0], [400.0, 1.0], [500.0, 1.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1215.0], [600.0, 553.0], [700.0, 665.0], [800.0, 751.0], [900.0, 867.0], [1000.0, 896.0], [1100.0, 914.0], [1200.0, 883.0], [1300.0, 678.0], [1400.0, 661.0], [1500.0, 542.0], [100.0, 40.0], [1600.0, 436.0], [1700.0, 339.0], [1800.0, 282.0], [1900.0, 248.0], [2000.0, 183.0], [2100.0, 144.0], [2200.0, 82.0], [2300.0, 72.0], [2400.0, 46.0], [2500.0, 33.0], [2600.0, 30.0], [2700.0, 21.0], [2800.0, 14.0], [2900.0, 6.0], [3000.0, 10.0], [3100.0, 3.0], [200.0, 73.0], [3200.0, 3.0], [3300.0, 1.0], [3400.0, 2.0], [3500.0, 1.0], [3600.0, 2.0], [3800.0, 1.0], [4300.0, 1.0], [4600.0, 1.0], [300.0, 131.0], [5700.0, 1.0], [400.0, 270.0], [500.0, 399.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 83.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 14408.0, "series": [{"data": [[0.0, 3555.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 14408.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5069.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 83.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.5854262E12, "maxY": 115.0, "series": [{"data": [[1.5854265E12, 115.0], [1.58542632E12, 115.0], [1.5854268E12, 71.40982546864892], [1.58542638E12, 115.0], [1.58542686E12, 1.0], [1.5854262E12, 66.09739368998623], [1.58542668E12, 115.0], [1.58542626E12, 114.48366313851811], [1.58542674E12, 114.58484573502732], [1.58542656E12, 115.0], [1.58542662E12, 115.0], [1.58542644E12, 115.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542686E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 32.0, "minX": 1.0, "maxY": 1395.3, "series": [{"data": [[2.0, 62.0], [3.0, 55.0], [4.0, 51.666666666666664], [5.0, 49.0], [6.0, 43.5], [7.0, 52.666666666666664], [8.0, 49.0], [9.0, 50.0], [10.0, 49.0], [11.0, 41.0], [12.0, 52.0], [13.0, 48.333333333333336], [14.0, 50.4], [15.0, 52.0], [16.0, 51.8], [17.0, 45.857142857142854], [18.0, 49.6], [19.0, 38.0], [20.0, 213.4], [21.0, 49.333333333333336], [22.0, 49.666666666666664], [23.0, 32.0], [24.0, 49.5], [25.0, 50.2], [26.0, 50.14285714285714], [27.0, 44.857142857142854], [28.0, 42.63636363636364], [29.0, 45.44444444444444], [30.0, 42.666666666666664], [31.0, 47.5], [32.0, 50.5], [33.0, 41.699999999999996], [34.0, 40.35714285714286], [35.0, 44.2], [36.0, 45.8235294117647], [37.0, 44.857142857142854], [38.0, 46.68421052631578], [39.0, 46.857142857142854], [40.0, 47.045454545454554], [41.0, 47.8], [42.0, 42.84615384615385], [43.0, 46.22222222222222], [44.0, 54.0], [45.0, 51.764705882352935], [46.0, 46.166666666666664], [47.0, 49.714285714285715], [48.0, 45.33333333333333], [49.0, 42.81818181818182], [50.0, 41.625], [51.0, 44.2], [52.0, 49.0], [53.0, 40.99999999999999], [54.0, 41.650000000000006], [55.0, 49.61111111111111], [56.0, 50.85714285714285], [57.0, 49.07692307692308], [58.0, 48.028571428571425], [59.0, 103.2], [60.0, 56.57142857142857], [61.0, 55.0], [62.0, 51.800000000000004], [63.0, 47.06666666666668], [64.0, 47.333333333333336], [65.0, 57.0], [66.0, 53.05882352941177], [67.0, 47.54545454545455], [68.0, 102.23809523809523], [69.0, 47.83870967741937], [70.0, 44.333333333333336], [71.0, 38.0], [72.0, 50.18181818181817], [73.0, 47.55], [74.0, 45.75757575757575], [75.0, 43.18518518518518], [76.0, 50.72727272727272], [77.0, 42.0], [78.0, 42.57142857142857], [79.0, 48.10000000000001], [80.0, 46.82352941176469], [81.0, 51.025], [82.0, 43.04761904761905], [83.0, 45.94444444444444], [84.0, 51.00000000000001], [85.0, 49.25], [86.0, 53.666666666666664], [87.0, 50.490909090909085], [88.0, 43.47826086956522], [89.0, 49.06249999999999], [90.0, 47.333333333333336], [91.0, 48.583333333333336], [92.0, 44.11111111111111], [93.0, 223.70000000000002], [94.0, 495.3529411764705], [95.0, 462.4130434782608], [96.0, 1155.125], [97.0, 1395.3], [98.0, 965.9285714285713], [99.0, 852.9999999999999], [100.0, 554.5294117647059], [101.0, 517.8235294117648], [102.0, 658.4615384615386], [103.0, 833.6027397260273], [104.0, 1063.8695652173913], [105.0, 1111.4166666666665], [106.0, 1258.0], [107.0, 1034.904761904762], [108.0, 1089.4], [109.0, 1063.111111111111], [110.0, 1197.3846153846155], [111.0, 1132.3823529411764], [112.0, 1228.5490196078435], [113.0, 1320.9473684210525], [114.0, 1220.1023622047242], [115.0, 1209.2088036117377], [1.0, 59.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[109.16139130434745, 1080.959217391306]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 184.0], [3.0, 205.0], [4.0, 166.0], [5.0, 167.0], [6.0, 277.0], [7.0, 169.0], [8.0, 167.0], [9.0, 156.0], [10.0, 168.0], [11.0, 152.0], [12.0, 166.0], [13.0, 168.0], [14.0, 168.0], [15.0, 157.0], [16.0, 166.0], [17.0, 186.0], [18.0, 150.0], [20.0, 408.5], [21.0, 156.0], [22.0, 154.0], [23.0, 150.0], [24.0, 171.0], [25.0, 184.0], [26.0, 178.0], [27.0, 186.0], [28.0, 165.0], [29.0, 151.0], [30.0, 150.0], [31.0, 159.0], [32.0, 175.0], [33.0, 166.0], [34.0, 194.0], [35.0, 165.0], [36.0, 161.0], [37.0, 153.0], [38.0, 180.0], [39.0, 154.0], [40.0, 164.0], [41.0, 164.0], [42.0, 175.0], [43.0, 197.0], [44.0, 176.0], [45.0, 162.0], [46.0, 167.0], [47.0, 158.0], [48.0, 160.0], [49.0, 163.0], [50.0, 158.0], [51.0, 188.0], [52.0, 165.0], [53.0, 161.0], [54.0, 174.0], [55.0, 174.0], [56.0, 165.0], [57.0, 175.0], [58.0, 172.0], [59.0, 166.0], [60.0, 208.0], [61.0, 158.0], [62.0, 163.0], [63.0, 165.0], [64.0, 174.0], [65.0, 153.0], [66.0, 162.0], [67.0, 160.0], [68.0, 405.0], [69.0, 172.0], [70.0, 183.0], [71.0, 172.0], [72.0, 160.0], [73.0, 159.0], [74.0, 188.0], [75.0, 149.0], [76.0, 175.0], [77.0, 188.0], [78.0, 166.0], [79.0, 149.0], [80.0, 267.0], [81.0, 171.0], [82.0, 162.0], [83.0, 156.0], [84.0, 185.0], [85.0, 187.0], [86.0, 170.0], [87.0, 190.0], [88.0, 180.0], [89.0, 158.0], [90.0, 194.0], [91.0, 168.0], [92.0, 170.0], [93.0, 151.0], [95.0, 414.5], [96.0, 293.0], [97.0, 158.0], [98.0, 200.0], [99.0, 157.0], [100.0, 167.0], [101.0, 163.0], [102.0, 196.0], [103.0, 327.0], [104.0, 146.0], [105.0, 173.0], [106.0, 166.0], [107.0, 170.0], [108.0, 145.0], [110.0, 521.0], [111.0, 509.0], [112.0, 242.0], [113.0, 164.0], [114.0, 160.0], [115.0, 206.0], [1.0, 235.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[58.03478260869566, 193.73043478260877]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[3.0, 59.0], [4.0, 51.2], [5.0, 51.5], [6.0, 57.0], [7.0, 68.0], [8.0, 50.0], [9.0, 48.5], [10.0, 46.5], [11.0, 50.0], [12.0, 45.0], [13.0, 49.0], [14.0, 45.0], [15.0, 53.0], [16.0, 47.25], [17.0, 49.75], [18.0, 45.714285714285715], [19.0, 59.0], [20.0, 154.6], [21.0, 50.0], [22.0, 46.2], [23.0, 57.0], [24.0, 46.833333333333336], [25.0, 49.666666666666664], [26.0, 44.5], [27.0, 46.5], [28.0, 42.22222222222222], [29.0, 50.5], [30.0, 44.72727272727272], [31.0, 47.0], [32.0, 51.5], [33.0, 45.42857142857142], [34.0, 46.64285714285714], [35.0, 50.5], [36.0, 50.230769230769226], [37.0, 43.6], [38.0, 49.78571428571429], [39.0, 44.699999999999996], [40.0, 44.173913043478265], [41.0, 51.5], [42.0, 44.84615384615384], [43.0, 50.18518518518519], [44.0, 43.57142857142857], [45.0, 51.8235294117647], [46.0, 48.8], [47.0, 44.300000000000004], [48.0, 43.81818181818182], [49.0, 42.6], [50.0, 43.09090909090909], [51.0, 48.875], [52.0, 46.46666666666666], [53.0, 42.66666666666666], [54.0, 50.05882352941176], [55.0, 50.85714285714287], [56.0, 53.35000000000001], [57.0, 48.72727272727273], [58.0, 48.82142857142857], [59.0, 91.77777777777777], [60.0, 50.47826086956521], [61.0, 51.888888888888886], [62.0, 49.70000000000001], [63.0, 51.0], [64.0, 46.81818181818181], [65.0, 50.22727272727272], [66.0, 46.75], [67.0, 46.666666666666664], [68.0, 97.10526315789473], [69.0, 49.48275862068966], [70.0, 46.87499999999999], [71.0, 44.89473684210526], [72.0, 44.6], [73.0, 49.269230769230774], [74.0, 45.95454545454546], [75.0, 43.85714285714285], [76.0, 55.434782608695656], [77.0, 46.38095238095238], [78.0, 44.476190476190474], [79.0, 48.900000000000006], [80.0, 50.49122807017544], [81.0, 50.479166666666664], [82.0, 45.777777777777786], [83.0, 45.1], [84.0, 49.63636363636364], [85.0, 46.857142857142854], [86.0, 53.70588235294118], [87.0, 50.463768115942024], [88.0, 43.2], [89.0, 45.47368421052632], [90.0, 53.70588235294118], [91.0, 53.36363636363637], [92.0, 50.99999999999999], [94.0, 656.6666666666666], [95.0, 609.5121951219512], [93.0, 68.66666666666667], [96.0, 1216.565217391304], [97.0, 1038.25], [98.0, 1362.3200000000004], [99.0, 1125.4999999999998], [100.0, 420.46153846153845], [101.0, 575.7894736842105], [102.0, 474.0], [103.0, 885.9636363636365], [104.0, 1076.037037037037], [105.0, 898.0999999999999], [106.0, 968.0], [107.0, 1087.0], [108.0, 783.3333333333333], [109.0, 1128.7857142857142], [110.0, 1122.7741935483868], [111.0, 1059.558823529412], [112.0, 1366.458333333333], [113.0, 1153.6818181818182], [114.0, 1271.3017241379312], [115.0, 1206.2722142417433]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[109.15730434782596, 1081.1281739130482]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 115.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7.166666666666667, "minX": 1.5854262E12, "maxY": 274106.3333333333, "series": [{"data": [[1.5854265E12, 259068.06666666668], [1.58542632E12, 269365.01666666666], [1.5854268E12, 183312.23333333334], [1.58542638E12, 266878.8], [1.58542686E12, 118.01666666666667], [1.5854262E12, 162744.48333333334], [1.58542668E12, 261569.28333333333], [1.58542626E12, 256471.1], [1.58542674E12, 261188.43333333332], [1.58542656E12, 261071.4], [1.58542662E12, 264338.06666666665], [1.58542644E12, 274106.3333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5854265E12, 15629.6], [1.58542632E12, 16252.1], [1.5854268E12, 11061.733333333334], [1.58542638E12, 16101.866666666667], [1.58542686E12, 7.166666666666667], [1.5854262E12, 10075.9], [1.58542668E12, 15787.066666666668], [1.58542626E12, 15499.566666666668], [1.58542674E12, 15758.733333333334], [1.58542656E12, 15751.533333333333], [1.58542662E12, 16423.666666666668], [1.58542644E12, 16538.066666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542686E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 59.0, "minX": 1.5854262E12, "maxY": 1289.2882629107994, "series": [{"data": [[1.5854265E12, 1282.3533210332114], [1.58542632E12, 1150.1595092024527], [1.5854268E12, 238.85642317380314], [1.58542638E12, 1186.7180851063813], [1.58542686E12, 59.0], [1.5854262E12, 174.15338345864663], [1.58542668E12, 1240.9663636363648], [1.58542626E12, 1289.2882629107994], [1.58542674E12, 1237.565099457504], [1.58542656E12, 1287.7961956521754], [1.58542662E12, 1114.288194444442], [1.58542644E12, 1096.7224137931028]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.5854262E12, 185.7115384615385], [1.58542626E12, 269.5454545454545]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.5854265E12, 1267.5045372050802], [1.58542632E12, 1161.9408127208449], [1.5854268E12, 244.37981407702503], [1.58542638E12, 1187.6539145907466], [1.5854262E12, 197.62699564586356], [1.58542668E12, 1248.352888086643], [1.58542626E12, 1273.6645396535985], [1.58542674E12, 1202.0455373406169], [1.58542656E12, 1265.4094631483163], [1.58542662E12, 1127.5336244541475], [1.58542644E12, 1113.459670424979]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542686E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 59.0, "minX": 1.5854262E12, "maxY": 1289.0854460093883, "series": [{"data": [[1.5854265E12, 1282.1309963099602], [1.58542632E12, 1149.9342681858027], [1.5854268E12, 238.59823677581875], [1.58542638E12, 1186.5044326241136], [1.58542686E12, 59.0], [1.5854262E12, 173.94586466165407], [1.58542668E12, 1240.7199999999982], [1.58542626E12, 1289.0854460093883], [1.58542674E12, 1237.311934900544], [1.58542656E12, 1287.5579710144916], [1.58542662E12, 1114.0303819444432], [1.58542644E12, 1096.4456896551706]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.5854262E12, 185.3846153846154], [1.58542626E12, 269.09090909090907]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.5854265E12, 1267.2649727767705], [1.58542632E12, 1161.692579505299], [1.5854268E12, 244.12483399734396], [1.58542638E12, 1187.4137010676175], [1.5854262E12, 197.40348330914375], [1.58542668E12, 1248.1173285198563], [1.58542626E12, 1273.4576116681856], [1.58542674E12, 1201.7686703096563], [1.58542656E12, 1265.161965423113], [1.58542662E12, 1127.2628820960695], [1.58542644E12, 1113.208152645272]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542686E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.5854262E12, "maxY": 1.4519230769230773, "series": [{"data": [[1.5854265E12, 0.49169741697416974], [1.58542632E12, 0.5503943908851892], [1.5854268E12, 0.10327455919395474], [1.58542638E12, 0.5452127659574473], [1.58542686E12, 0.0], [1.5854262E12, 0.20601503759398485], [1.58542668E12, 0.44090909090909064], [1.58542626E12, 0.5981220657276989], [1.58542674E12, 0.44665461121157285], [1.58542656E12, 0.5108695652173924], [1.58542662E12, 0.46527777777777735], [1.58542644E12, 0.45603448275862146]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.5854262E12, 1.4519230769230773], [1.58542626E12, 0.8181818181818182]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.5854265E12, 0.551724137931034], [1.58542632E12, 0.674911660777385], [1.5854268E12, 0.5936254980079683], [1.58542638E12, 0.675266903914591], [1.5854262E12, 0.7997097242380261], [1.58542668E12, 0.569494584837545], [1.58542626E12, 0.6736554238833179], [1.58542674E12, 0.5555555555555567], [1.58542656E12, 0.5759781619654235], [1.58542662E12, 0.6069868995633182], [1.58542644E12, 0.5810928013876849]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542686E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.5854262E12, "maxY": 3857.0, "series": [{"data": [[1.5854265E12, 3016.0], [1.58542632E12, 2847.0], [1.5854268E12, 2292.0], [1.58542638E12, 3071.0], [1.58542686E12, 59.0], [1.5854262E12, 2252.0], [1.58542668E12, 3624.0], [1.58542626E12, 3857.0], [1.58542674E12, 3291.0], [1.58542656E12, 3571.0], [1.58542662E12, 3175.0], [1.58542644E12, 3445.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5854265E12, 169.0], [1.58542632E12, 89.0], [1.5854268E12, 26.0], [1.58542638E12, 57.0], [1.58542686E12, 59.0], [1.5854262E12, 28.0], [1.58542668E12, 38.0], [1.58542626E12, 145.0], [1.58542674E12, 150.0], [1.58542656E12, 97.0], [1.58542662E12, 30.0], [1.58542644E12, 92.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5854265E12, 1836.0], [1.58542632E12, 1715.8000000000004], [1.5854268E12, 925.6000000000001], [1.58542638E12, 1822.0], [1.58542686E12, 59.0], [1.5854262E12, 601.1000000000001], [1.58542668E12, 1994.0], [1.58542626E12, 1930.6000000000001], [1.58542674E12, 1879.5], [1.58542656E12, 1914.6000000000001], [1.58542662E12, 1806.000000000001], [1.58542644E12, 1766.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5854265E12, 2478.7800000000007], [1.58542632E12, 2310.299999999999], [1.5854268E12, 1837.0799999999995], [1.58542638E12, 2411.979999999993], [1.58542686E12, 59.0], [1.5854262E12, 1780.4600000000005], [1.58542668E12, 2781.720000000001], [1.58542626E12, 2726.079999999998], [1.58542674E12, 2551.95], [1.58542656E12, 2579.96], [1.58542662E12, 2528.680000000004], [1.58542644E12, 2405.5800000000004]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5854265E12, 2061.3], [1.58542632E12, 1922.0], [1.5854268E12, 1273.6], [1.58542638E12, 2004.35], [1.58542686E12, 59.0], [1.5854262E12, 1160.5999999999995], [1.58542668E12, 2279.3999999999996], [1.58542626E12, 2147.899999999999], [1.58542674E12, 2099.75], [1.58542656E12, 2131.7999999999997], [1.58542662E12, 2047.5999999999985], [1.58542644E12, 2026.5999999999995]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542686E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11.0, "minX": 1.0, "maxY": 1352.0, "series": [{"data": [[2.0, 57.0], [3.0, 45.5], [4.0, 106.0], [5.0, 56.0], [6.0, 51.0], [7.0, 49.5], [8.0, 56.5], [10.0, 46.0], [11.0, 45.0], [12.0, 55.0], [13.0, 599.0], [14.0, 47.5], [16.0, 48.0], [17.0, 51.0], [19.0, 46.0], [20.0, 1352.0], [21.0, 383.5], [22.0, 53.0], [23.0, 1187.5], [24.0, 472.5], [25.0, 764.5], [26.0, 949.0], [27.0, 1042.5], [28.0, 1245.0], [29.0, 1167.0], [30.0, 1006.0], [31.0, 1255.0], [32.0, 1115.0], [33.0, 1165.0], [35.0, 1134.0], [34.0, 1281.0], [36.0, 1221.5], [37.0, 1157.0], [38.0, 1149.0], [39.0, 1098.0], [40.0, 1134.5], [41.0, 1057.0], [43.0, 1068.0], [42.0, 1120.0], [44.0, 1013.5], [45.0, 918.5], [47.0, 893.0], [46.0, 1073.0], [49.0, 773.0], [48.0, 1004.5], [50.0, 927.5], [51.0, 1054.0], [52.0, 828.5], [53.0, 1111.0], [55.0, 639.0], [54.0, 816.0], [57.0, 602.0], [56.0, 1042.0], [60.0, 1202.5], [63.0, 483.5], [1.0, 68.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 13.0], [34.0, 11.0], [38.0, 109.5], [42.0, 441.0], [57.0, 18.0], [60.0, 1065.0], [63.0, 11.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 63.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 11.0, "minX": 1.0, "maxY": 1351.5, "series": [{"data": [[2.0, 57.0], [3.0, 45.5], [4.0, 106.0], [5.0, 56.0], [6.0, 51.0], [7.0, 49.0], [8.0, 56.5], [10.0, 45.0], [11.0, 45.0], [12.0, 54.5], [13.0, 599.0], [14.0, 46.5], [16.0, 48.0], [17.0, 50.5], [19.0, 45.0], [20.0, 1351.5], [21.0, 383.0], [22.0, 52.5], [23.0, 1187.5], [24.0, 472.5], [25.0, 764.5], [26.0, 948.5], [27.0, 1042.5], [28.0, 1244.5], [29.0, 1166.5], [30.0, 1006.0], [31.0, 1255.0], [32.0, 1115.0], [33.0, 1165.0], [35.0, 1134.0], [34.0, 1281.0], [36.0, 1221.5], [37.0, 1157.0], [38.0, 1149.0], [39.0, 1098.0], [40.0, 1134.0], [41.0, 1057.0], [43.0, 1068.0], [42.0, 1120.0], [44.0, 1013.0], [45.0, 918.0], [47.0, 893.0], [46.0, 1073.0], [49.0, 772.0], [48.0, 1004.5], [50.0, 927.5], [51.0, 1054.0], [52.0, 828.5], [53.0, 1110.5], [55.0, 639.0], [54.0, 815.5], [57.0, 602.0], [56.0, 1041.5], [60.0, 1202.5], [63.0, 483.5], [1.0, 67.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 12.0], [34.0, 11.0], [38.0, 109.5], [42.0, 441.0], [57.0, 16.0], [60.0, 1064.0], [63.0, 11.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 63.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5854262E12, "maxY": 38.61666666666667, "series": [{"data": [[1.5854265E12, 36.35], [1.58542632E12, 37.85], [1.5854268E12, 24.883333333333333], [1.58542638E12, 37.516666666666666], [1.58542686E12, 0.016666666666666666], [1.5854262E12, 24.583333333333332], [1.58542668E12, 36.71666666666667], [1.58542626E12, 36.766666666666666], [1.58542674E12, 37.1], [1.58542656E12, 36.483333333333334], [1.58542662E12, 38.36666666666667], [1.58542644E12, 38.61666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542686E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5854262E12, "maxY": 38.55, "series": [{"data": [[1.5854265E12, 36.43333333333333], [1.58542632E12, 37.88333333333333], [1.5854268E12, 25.783333333333335], [1.58542638E12, 37.53333333333333], [1.58542686E12, 0.016666666666666666], [1.5854262E12, 24.3], [1.58542668E12, 36.78333333333333], [1.58542626E12, 36.21666666666667], [1.58542674E12, 36.733333333333334], [1.58542656E12, 36.71666666666667], [1.58542662E12, 36.916666666666664], [1.58542644E12, 38.55]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58542668E12, 0.016666666666666666], [1.58542662E12, 1.3666666666666667]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542686E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5854262E12, "maxY": 19.333333333333332, "series": [{"data": [[1.5854262E12, 1.7333333333333334], [1.58542626E12, 0.18333333333333332]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.5854265E12, 18.066666666666666], [1.58542632E12, 19.016666666666666], [1.5854268E12, 13.233333333333333], [1.58542638E12, 18.8], [1.58542686E12, 0.016666666666666666], [1.5854262E12, 11.083333333333334], [1.58542668E12, 18.316666666666666], [1.58542626E12, 17.75], [1.58542674E12, 18.433333333333334], [1.58542656E12, 18.4], [1.58542662E12, 18.4], [1.58542644E12, 19.333333333333332]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58542668E12, 0.016666666666666666], [1.58542662E12, 0.8]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.5854265E12, 18.366666666666667], [1.58542632E12, 18.866666666666667], [1.5854268E12, 12.55], [1.58542638E12, 18.733333333333334], [1.5854262E12, 11.483333333333333], [1.58542668E12, 18.466666666666665], [1.58542626E12, 18.283333333333335], [1.58542674E12, 18.3], [1.58542656E12, 18.316666666666666], [1.58542662E12, 18.516666666666666], [1.58542644E12, 19.216666666666665]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58542662E12, 0.5666666666666667]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542686E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5854262E12, "maxY": 38.55, "series": [{"data": [[1.5854265E12, 36.43333333333333], [1.58542632E12, 37.88333333333333], [1.5854268E12, 25.783333333333335], [1.58542638E12, 37.53333333333333], [1.58542686E12, 0.016666666666666666], [1.5854262E12, 24.3], [1.58542668E12, 36.78333333333333], [1.58542626E12, 36.21666666666667], [1.58542674E12, 36.733333333333334], [1.58542656E12, 36.71666666666667], [1.58542662E12, 36.916666666666664], [1.58542644E12, 38.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58542668E12, 0.016666666666666666], [1.58542662E12, 1.3666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542686E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

