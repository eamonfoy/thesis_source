/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 25.0, "minX": 0.0, "maxY": 3035.0, "series": [{"data": [[0.0, 25.0], [0.1, 29.0], [0.2, 30.0], [0.3, 31.0], [0.4, 32.0], [0.5, 32.0], [0.6, 33.0], [0.7, 33.0], [0.8, 33.0], [0.9, 34.0], [1.0, 34.0], [1.1, 35.0], [1.2, 35.0], [1.3, 35.0], [1.4, 35.0], [1.5, 35.0], [1.6, 36.0], [1.7, 36.0], [1.8, 36.0], [1.9, 36.0], [2.0, 36.0], [2.1, 36.0], [2.2, 37.0], [2.3, 37.0], [2.4, 37.0], [2.5, 37.0], [2.6, 37.0], [2.7, 37.0], [2.8, 37.0], [2.9, 37.0], [3.0, 38.0], [3.1, 38.0], [3.2, 38.0], [3.3, 38.0], [3.4, 38.0], [3.5, 38.0], [3.6, 38.0], [3.7, 38.0], [3.8, 38.0], [3.9, 39.0], [4.0, 39.0], [4.1, 39.0], [4.2, 39.0], [4.3, 39.0], [4.4, 39.0], [4.5, 39.0], [4.6, 39.0], [4.7, 39.0], [4.8, 39.0], [4.9, 39.0], [5.0, 40.0], [5.1, 40.0], [5.2, 40.0], [5.3, 40.0], [5.4, 40.0], [5.5, 40.0], [5.6, 40.0], [5.7, 40.0], [5.8, 40.0], [5.9, 40.0], [6.0, 40.0], [6.1, 40.0], [6.2, 41.0], [6.3, 41.0], [6.4, 41.0], [6.5, 41.0], [6.6, 41.0], [6.7, 41.0], [6.8, 41.0], [6.9, 41.0], [7.0, 41.0], [7.1, 41.0], [7.2, 41.0], [7.3, 41.0], [7.4, 42.0], [7.5, 42.0], [7.6, 42.0], [7.7, 42.0], [7.8, 42.0], [7.9, 42.0], [8.0, 42.0], [8.1, 42.0], [8.2, 42.0], [8.3, 42.0], [8.4, 42.0], [8.5, 42.0], [8.6, 42.0], [8.7, 42.0], [8.8, 42.0], [8.9, 42.0], [9.0, 42.0], [9.1, 43.0], [9.2, 43.0], [9.3, 43.0], [9.4, 43.0], [9.5, 43.0], [9.6, 43.0], [9.7, 43.0], [9.8, 43.0], [9.9, 43.0], [10.0, 43.0], [10.1, 43.0], [10.2, 43.0], [10.3, 43.0], [10.4, 43.0], [10.5, 43.0], [10.6, 44.0], [10.7, 44.0], [10.8, 44.0], [10.9, 44.0], [11.0, 44.0], [11.1, 44.0], [11.2, 44.0], [11.3, 44.0], [11.4, 44.0], [11.5, 44.0], [11.6, 44.0], [11.7, 44.0], [11.8, 44.0], [11.9, 44.0], [12.0, 44.0], [12.1, 45.0], [12.2, 45.0], [12.3, 45.0], [12.4, 45.0], [12.5, 45.0], [12.6, 45.0], [12.7, 45.0], [12.8, 45.0], [12.9, 45.0], [13.0, 45.0], [13.1, 45.0], [13.2, 45.0], [13.3, 45.0], [13.4, 45.0], [13.5, 45.0], [13.6, 46.0], [13.7, 46.0], [13.8, 46.0], [13.9, 46.0], [14.0, 46.0], [14.1, 46.0], [14.2, 46.0], [14.3, 46.0], [14.4, 46.0], [14.5, 46.0], [14.6, 46.0], [14.7, 46.0], [14.8, 46.0], [14.9, 46.0], [15.0, 46.0], [15.1, 46.0], [15.2, 46.0], [15.3, 47.0], [15.4, 47.0], [15.5, 47.0], [15.6, 47.0], [15.7, 47.0], [15.8, 47.0], [15.9, 47.0], [16.0, 47.0], [16.1, 47.0], [16.2, 47.0], [16.3, 47.0], [16.4, 47.0], [16.5, 47.0], [16.6, 47.0], [16.7, 48.0], [16.8, 48.0], [16.9, 48.0], [17.0, 48.0], [17.1, 48.0], [17.2, 48.0], [17.3, 48.0], [17.4, 48.0], [17.5, 48.0], [17.6, 48.0], [17.7, 48.0], [17.8, 48.0], [17.9, 48.0], [18.0, 48.0], [18.1, 48.0], [18.2, 49.0], [18.3, 49.0], [18.4, 49.0], [18.5, 49.0], [18.6, 49.0], [18.7, 49.0], [18.8, 49.0], [18.9, 49.0], [19.0, 49.0], [19.1, 49.0], [19.2, 49.0], [19.3, 50.0], [19.4, 50.0], [19.5, 50.0], [19.6, 50.0], [19.7, 50.0], [19.8, 50.0], [19.9, 50.0], [20.0, 50.0], [20.1, 50.0], [20.2, 50.0], [20.3, 50.0], [20.4, 50.0], [20.5, 51.0], [20.6, 51.0], [20.7, 51.0], [20.8, 51.0], [20.9, 51.0], [21.0, 51.0], [21.1, 51.0], [21.2, 51.0], [21.3, 51.0], [21.4, 51.0], [21.5, 51.0], [21.6, 52.0], [21.7, 52.0], [21.8, 52.0], [21.9, 52.0], [22.0, 52.0], [22.1, 52.0], [22.2, 52.0], [22.3, 52.0], [22.4, 52.0], [22.5, 53.0], [22.6, 53.0], [22.7, 53.0], [22.8, 53.0], [22.9, 53.0], [23.0, 53.0], [23.1, 53.0], [23.2, 53.0], [23.3, 54.0], [23.4, 54.0], [23.5, 54.0], [23.6, 54.0], [23.7, 54.0], [23.8, 54.0], [23.9, 54.0], [24.0, 54.0], [24.1, 54.0], [24.2, 54.0], [24.3, 55.0], [24.4, 55.0], [24.5, 55.0], [24.6, 55.0], [24.7, 55.0], [24.8, 55.0], [24.9, 56.0], [25.0, 56.0], [25.1, 56.0], [25.2, 56.0], [25.3, 56.0], [25.4, 56.0], [25.5, 56.0], [25.6, 57.0], [25.7, 57.0], [25.8, 57.0], [25.9, 57.0], [26.0, 58.0], [26.1, 58.0], [26.2, 58.0], [26.3, 58.0], [26.4, 59.0], [26.5, 59.0], [26.6, 59.0], [26.7, 59.0], [26.8, 60.0], [26.9, 60.0], [27.0, 60.0], [27.1, 60.0], [27.2, 61.0], [27.3, 61.0], [27.4, 61.0], [27.5, 62.0], [27.6, 62.0], [27.7, 62.0], [27.8, 62.0], [27.9, 63.0], [28.0, 63.0], [28.1, 64.0], [28.2, 64.0], [28.3, 65.0], [28.4, 65.0], [28.5, 66.0], [28.6, 66.0], [28.7, 67.0], [28.8, 67.0], [28.9, 68.0], [29.0, 69.0], [29.1, 71.0], [29.2, 72.0], [29.3, 73.0], [29.4, 75.0], [29.5, 77.0], [29.6, 79.0], [29.7, 82.0], [29.8, 87.0], [29.9, 90.0], [30.0, 98.0], [30.1, 117.0], [30.2, 126.0], [30.3, 137.0], [30.4, 144.0], [30.5, 154.0], [30.6, 166.0], [30.7, 186.0], [30.8, 195.0], [30.9, 200.0], [31.0, 208.0], [31.1, 215.0], [31.2, 226.0], [31.3, 232.0], [31.4, 238.0], [31.5, 248.0], [31.6, 255.0], [31.7, 260.0], [31.8, 266.0], [31.9, 273.0], [32.0, 283.0], [32.1, 288.0], [32.2, 293.0], [32.3, 299.0], [32.4, 302.0], [32.5, 307.0], [32.6, 313.0], [32.7, 318.0], [32.8, 322.0], [32.9, 328.0], [33.0, 334.0], [33.1, 336.0], [33.2, 341.0], [33.3, 345.0], [33.4, 348.0], [33.5, 351.0], [33.6, 356.0], [33.7, 362.0], [33.8, 366.0], [33.9, 371.0], [34.0, 375.0], [34.1, 377.0], [34.2, 380.0], [34.3, 385.0], [34.4, 389.0], [34.5, 392.0], [34.6, 394.0], [34.7, 399.0], [34.8, 402.0], [34.9, 406.0], [35.0, 408.0], [35.1, 410.0], [35.2, 414.0], [35.3, 418.0], [35.4, 420.0], [35.5, 424.0], [35.6, 427.0], [35.7, 429.0], [35.8, 431.0], [35.9, 435.0], [36.0, 437.0], [36.1, 440.0], [36.2, 442.0], [36.3, 445.0], [36.4, 447.0], [36.5, 450.0], [36.6, 452.0], [36.7, 456.0], [36.8, 458.0], [36.9, 460.0], [37.0, 462.0], [37.1, 464.0], [37.2, 467.0], [37.3, 469.0], [37.4, 472.0], [37.5, 474.0], [37.6, 476.0], [37.7, 479.0], [37.8, 481.0], [37.9, 484.0], [38.0, 486.0], [38.1, 488.0], [38.2, 490.0], [38.3, 492.0], [38.4, 496.0], [38.5, 499.0], [38.6, 501.0], [38.7, 505.0], [38.8, 507.0], [38.9, 508.0], [39.0, 510.0], [39.1, 513.0], [39.2, 516.0], [39.3, 519.0], [39.4, 520.0], [39.5, 522.0], [39.6, 524.0], [39.7, 528.0], [39.8, 529.0], [39.9, 532.0], [40.0, 535.0], [40.1, 538.0], [40.2, 539.0], [40.3, 540.0], [40.4, 542.0], [40.5, 544.0], [40.6, 545.0], [40.7, 547.0], [40.8, 548.0], [40.9, 552.0], [41.0, 553.0], [41.1, 555.0], [41.2, 557.0], [41.3, 560.0], [41.4, 562.0], [41.5, 564.0], [41.6, 566.0], [41.7, 568.0], [41.8, 569.0], [41.9, 571.0], [42.0, 573.0], [42.1, 575.0], [42.2, 577.0], [42.3, 580.0], [42.4, 582.0], [42.5, 584.0], [42.6, 587.0], [42.7, 588.0], [42.8, 591.0], [42.9, 593.0], [43.0, 595.0], [43.1, 597.0], [43.2, 598.0], [43.3, 600.0], [43.4, 602.0], [43.5, 603.0], [43.6, 605.0], [43.7, 608.0], [43.8, 609.0], [43.9, 611.0], [44.0, 614.0], [44.1, 616.0], [44.2, 617.0], [44.3, 619.0], [44.4, 620.0], [44.5, 621.0], [44.6, 623.0], [44.7, 625.0], [44.8, 627.0], [44.9, 628.0], [45.0, 629.0], [45.1, 631.0], [45.2, 632.0], [45.3, 634.0], [45.4, 636.0], [45.5, 638.0], [45.6, 640.0], [45.7, 641.0], [45.8, 642.0], [45.9, 644.0], [46.0, 646.0], [46.1, 648.0], [46.2, 649.0], [46.3, 650.0], [46.4, 651.0], [46.5, 652.0], [46.6, 653.0], [46.7, 655.0], [46.8, 656.0], [46.9, 657.0], [47.0, 660.0], [47.1, 661.0], [47.2, 662.0], [47.3, 664.0], [47.4, 666.0], [47.5, 667.0], [47.6, 670.0], [47.7, 671.0], [47.8, 674.0], [47.9, 675.0], [48.0, 676.0], [48.1, 678.0], [48.2, 679.0], [48.3, 681.0], [48.4, 682.0], [48.5, 684.0], [48.6, 685.0], [48.7, 686.0], [48.8, 688.0], [48.9, 689.0], [49.0, 690.0], [49.1, 692.0], [49.2, 693.0], [49.3, 694.0], [49.4, 696.0], [49.5, 699.0], [49.6, 701.0], [49.7, 702.0], [49.8, 703.0], [49.9, 705.0], [50.0, 706.0], [50.1, 708.0], [50.2, 710.0], [50.3, 711.0], [50.4, 713.0], [50.5, 714.0], [50.6, 716.0], [50.7, 717.0], [50.8, 718.0], [50.9, 720.0], [51.0, 721.0], [51.1, 722.0], [51.2, 725.0], [51.3, 726.0], [51.4, 728.0], [51.5, 729.0], [51.6, 731.0], [51.7, 733.0], [51.8, 734.0], [51.9, 736.0], [52.0, 738.0], [52.1, 740.0], [52.2, 741.0], [52.3, 743.0], [52.4, 744.0], [52.5, 745.0], [52.6, 746.0], [52.7, 748.0], [52.8, 749.0], [52.9, 750.0], [53.0, 751.0], [53.1, 753.0], [53.2, 754.0], [53.3, 756.0], [53.4, 757.0], [53.5, 758.0], [53.6, 760.0], [53.7, 762.0], [53.8, 762.0], [53.9, 764.0], [54.0, 766.0], [54.1, 767.0], [54.2, 770.0], [54.3, 772.0], [54.4, 773.0], [54.5, 774.0], [54.6, 775.0], [54.7, 776.0], [54.8, 777.0], [54.9, 779.0], [55.0, 780.0], [55.1, 781.0], [55.2, 782.0], [55.3, 783.0], [55.4, 784.0], [55.5, 786.0], [55.6, 787.0], [55.7, 789.0], [55.8, 790.0], [55.9, 792.0], [56.0, 794.0], [56.1, 795.0], [56.2, 796.0], [56.3, 798.0], [56.4, 799.0], [56.5, 801.0], [56.6, 802.0], [56.7, 804.0], [56.8, 805.0], [56.9, 806.0], [57.0, 808.0], [57.1, 808.0], [57.2, 810.0], [57.3, 811.0], [57.4, 812.0], [57.5, 813.0], [57.6, 815.0], [57.7, 817.0], [57.8, 818.0], [57.9, 820.0], [58.0, 821.0], [58.1, 822.0], [58.2, 823.0], [58.3, 824.0], [58.4, 825.0], [58.5, 826.0], [58.6, 828.0], [58.7, 828.0], [58.8, 830.0], [58.9, 831.0], [59.0, 833.0], [59.1, 835.0], [59.2, 836.0], [59.3, 837.0], [59.4, 838.0], [59.5, 840.0], [59.6, 842.0], [59.7, 844.0], [59.8, 846.0], [59.9, 847.0], [60.0, 848.0], [60.1, 850.0], [60.2, 851.0], [60.3, 853.0], [60.4, 854.0], [60.5, 856.0], [60.6, 857.0], [60.7, 858.0], [60.8, 860.0], [60.9, 861.0], [61.0, 862.0], [61.1, 865.0], [61.2, 866.0], [61.3, 868.0], [61.4, 869.0], [61.5, 870.0], [61.6, 871.0], [61.7, 873.0], [61.8, 874.0], [61.9, 875.0], [62.0, 877.0], [62.1, 879.0], [62.2, 880.0], [62.3, 881.0], [62.4, 882.0], [62.5, 884.0], [62.6, 885.0], [62.7, 886.0], [62.8, 887.0], [62.9, 889.0], [63.0, 891.0], [63.1, 893.0], [63.2, 894.0], [63.3, 896.0], [63.4, 897.0], [63.5, 898.0], [63.6, 899.0], [63.7, 900.0], [63.8, 901.0], [63.9, 902.0], [64.0, 903.0], [64.1, 905.0], [64.2, 906.0], [64.3, 907.0], [64.4, 909.0], [64.5, 910.0], [64.6, 912.0], [64.7, 913.0], [64.8, 915.0], [64.9, 916.0], [65.0, 918.0], [65.1, 919.0], [65.2, 922.0], [65.3, 923.0], [65.4, 926.0], [65.5, 927.0], [65.6, 929.0], [65.7, 930.0], [65.8, 932.0], [65.9, 933.0], [66.0, 934.0], [66.1, 935.0], [66.2, 937.0], [66.3, 938.0], [66.4, 940.0], [66.5, 942.0], [66.6, 943.0], [66.7, 945.0], [66.8, 947.0], [66.9, 949.0], [67.0, 951.0], [67.1, 953.0], [67.2, 954.0], [67.3, 955.0], [67.4, 957.0], [67.5, 958.0], [67.6, 961.0], [67.7, 962.0], [67.8, 963.0], [67.9, 965.0], [68.0, 967.0], [68.1, 969.0], [68.2, 970.0], [68.3, 971.0], [68.4, 972.0], [68.5, 973.0], [68.6, 974.0], [68.7, 976.0], [68.8, 978.0], [68.9, 979.0], [69.0, 981.0], [69.1, 983.0], [69.2, 985.0], [69.3, 986.0], [69.4, 987.0], [69.5, 988.0], [69.6, 989.0], [69.7, 991.0], [69.8, 992.0], [69.9, 994.0], [70.0, 996.0], [70.1, 997.0], [70.2, 999.0], [70.3, 1001.0], [70.4, 1004.0], [70.5, 1005.0], [70.6, 1007.0], [70.7, 1008.0], [70.8, 1009.0], [70.9, 1010.0], [71.0, 1012.0], [71.1, 1014.0], [71.2, 1016.0], [71.3, 1018.0], [71.4, 1020.0], [71.5, 1021.0], [71.6, 1023.0], [71.7, 1024.0], [71.8, 1026.0], [71.9, 1028.0], [72.0, 1029.0], [72.1, 1031.0], [72.2, 1032.0], [72.3, 1033.0], [72.4, 1034.0], [72.5, 1036.0], [72.6, 1037.0], [72.7, 1038.0], [72.8, 1039.0], [72.9, 1041.0], [73.0, 1042.0], [73.1, 1044.0], [73.2, 1045.0], [73.3, 1047.0], [73.4, 1049.0], [73.5, 1050.0], [73.6, 1052.0], [73.7, 1054.0], [73.8, 1056.0], [73.9, 1057.0], [74.0, 1058.0], [74.1, 1061.0], [74.2, 1062.0], [74.3, 1064.0], [74.4, 1065.0], [74.5, 1067.0], [74.6, 1068.0], [74.7, 1070.0], [74.8, 1073.0], [74.9, 1074.0], [75.0, 1076.0], [75.1, 1079.0], [75.2, 1080.0], [75.3, 1081.0], [75.4, 1083.0], [75.5, 1084.0], [75.6, 1087.0], [75.7, 1088.0], [75.8, 1090.0], [75.9, 1092.0], [76.0, 1094.0], [76.1, 1095.0], [76.2, 1096.0], [76.3, 1098.0], [76.4, 1100.0], [76.5, 1102.0], [76.6, 1104.0], [76.7, 1105.0], [76.8, 1107.0], [76.9, 1108.0], [77.0, 1111.0], [77.1, 1112.0], [77.2, 1114.0], [77.3, 1115.0], [77.4, 1117.0], [77.5, 1119.0], [77.6, 1121.0], [77.7, 1123.0], [77.8, 1124.0], [77.9, 1125.0], [78.0, 1126.0], [78.1, 1129.0], [78.2, 1130.0], [78.3, 1132.0], [78.4, 1134.0], [78.5, 1135.0], [78.6, 1137.0], [78.7, 1139.0], [78.8, 1140.0], [78.9, 1143.0], [79.0, 1144.0], [79.1, 1146.0], [79.2, 1148.0], [79.3, 1150.0], [79.4, 1152.0], [79.5, 1153.0], [79.6, 1155.0], [79.7, 1157.0], [79.8, 1158.0], [79.9, 1160.0], [80.0, 1162.0], [80.1, 1164.0], [80.2, 1165.0], [80.3, 1167.0], [80.4, 1169.0], [80.5, 1171.0], [80.6, 1172.0], [80.7, 1175.0], [80.8, 1177.0], [80.9, 1179.0], [81.0, 1180.0], [81.1, 1181.0], [81.2, 1183.0], [81.3, 1184.0], [81.4, 1186.0], [81.5, 1188.0], [81.6, 1190.0], [81.7, 1193.0], [81.8, 1194.0], [81.9, 1196.0], [82.0, 1199.0], [82.1, 1201.0], [82.2, 1203.0], [82.3, 1205.0], [82.4, 1207.0], [82.5, 1209.0], [82.6, 1211.0], [82.7, 1214.0], [82.8, 1215.0], [82.9, 1217.0], [83.0, 1220.0], [83.1, 1221.0], [83.2, 1223.0], [83.3, 1227.0], [83.4, 1228.0], [83.5, 1229.0], [83.6, 1232.0], [83.7, 1234.0], [83.8, 1236.0], [83.9, 1238.0], [84.0, 1241.0], [84.1, 1243.0], [84.2, 1245.0], [84.3, 1247.0], [84.4, 1250.0], [84.5, 1253.0], [84.6, 1255.0], [84.7, 1258.0], [84.8, 1259.0], [84.9, 1262.0], [85.0, 1264.0], [85.1, 1265.0], [85.2, 1269.0], [85.3, 1270.0], [85.4, 1274.0], [85.5, 1278.0], [85.6, 1281.0], [85.7, 1283.0], [85.8, 1285.0], [85.9, 1287.0], [86.0, 1288.0], [86.1, 1290.0], [86.2, 1295.0], [86.3, 1297.0], [86.4, 1298.0], [86.5, 1301.0], [86.6, 1303.0], [86.7, 1307.0], [86.8, 1311.0], [86.9, 1315.0], [87.0, 1316.0], [87.1, 1318.0], [87.2, 1320.0], [87.3, 1324.0], [87.4, 1325.0], [87.5, 1327.0], [87.6, 1330.0], [87.7, 1331.0], [87.8, 1333.0], [87.9, 1337.0], [88.0, 1340.0], [88.1, 1342.0], [88.2, 1344.0], [88.3, 1347.0], [88.4, 1350.0], [88.5, 1354.0], [88.6, 1357.0], [88.7, 1359.0], [88.8, 1362.0], [88.9, 1366.0], [89.0, 1367.0], [89.1, 1369.0], [89.2, 1372.0], [89.3, 1375.0], [89.4, 1378.0], [89.5, 1380.0], [89.6, 1385.0], [89.7, 1387.0], [89.8, 1391.0], [89.9, 1394.0], [90.0, 1397.0], [90.1, 1400.0], [90.2, 1402.0], [90.3, 1405.0], [90.4, 1406.0], [90.5, 1409.0], [90.6, 1411.0], [90.7, 1414.0], [90.8, 1416.0], [90.9, 1420.0], [91.0, 1423.0], [91.1, 1427.0], [91.2, 1430.0], [91.3, 1433.0], [91.4, 1437.0], [91.5, 1440.0], [91.6, 1444.0], [91.7, 1448.0], [91.8, 1452.0], [91.9, 1458.0], [92.0, 1459.0], [92.1, 1463.0], [92.2, 1466.0], [92.3, 1469.0], [92.4, 1472.0], [92.5, 1477.0], [92.6, 1480.0], [92.7, 1484.0], [92.8, 1487.0], [92.9, 1491.0], [93.0, 1494.0], [93.1, 1498.0], [93.2, 1501.0], [93.3, 1506.0], [93.4, 1509.0], [93.5, 1512.0], [93.6, 1516.0], [93.7, 1521.0], [93.8, 1524.0], [93.9, 1530.0], [94.0, 1536.0], [94.1, 1541.0], [94.2, 1551.0], [94.3, 1555.0], [94.4, 1559.0], [94.5, 1565.0], [94.6, 1573.0], [94.7, 1579.0], [94.8, 1583.0], [94.9, 1587.0], [95.0, 1592.0], [95.1, 1599.0], [95.2, 1605.0], [95.3, 1611.0], [95.4, 1617.0], [95.5, 1624.0], [95.6, 1631.0], [95.7, 1641.0], [95.8, 1645.0], [95.9, 1652.0], [96.0, 1660.0], [96.1, 1666.0], [96.2, 1672.0], [96.3, 1681.0], [96.4, 1684.0], [96.5, 1692.0], [96.6, 1700.0], [96.7, 1705.0], [96.8, 1715.0], [96.9, 1724.0], [97.0, 1735.0], [97.1, 1745.0], [97.2, 1755.0], [97.3, 1767.0], [97.4, 1779.0], [97.5, 1786.0], [97.6, 1794.0], [97.7, 1802.0], [97.8, 1813.0], [97.9, 1827.0], [98.0, 1833.0], [98.1, 1843.0], [98.2, 1847.0], [98.3, 1862.0], [98.4, 1879.0], [98.5, 1906.0], [98.6, 1917.0], [98.7, 1926.0], [98.8, 1945.0], [98.9, 1968.0], [99.0, 1990.0], [99.1, 2021.0], [99.2, 2046.0], [99.3, 2081.0], [99.4, 2122.0], [99.5, 2196.0], [99.6, 2239.0], [99.7, 2287.0], [99.8, 2379.0], [99.9, 2514.0], [100.0, 3035.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 138.0], [0.1, 138.0], [0.2, 138.0], [0.3, 138.0], [0.4, 138.0], [0.5, 138.0], [0.6, 138.0], [0.7, 138.0], [0.8, 138.0], [0.9, 138.0], [1.0, 146.0], [1.1, 146.0], [1.2, 146.0], [1.3, 146.0], [1.4, 146.0], [1.5, 146.0], [1.6, 146.0], [1.7, 146.0], [1.8, 146.0], [1.9, 146.0], [2.0, 149.0], [2.1, 149.0], [2.2, 149.0], [2.3, 149.0], [2.4, 149.0], [2.5, 149.0], [2.6, 149.0], [2.7, 149.0], [2.8, 149.0], [2.9, 150.0], [3.0, 150.0], [3.1, 150.0], [3.2, 150.0], [3.3, 150.0], [3.4, 150.0], [3.5, 150.0], [3.6, 150.0], [3.7, 150.0], [3.8, 150.0], [3.9, 152.0], [4.0, 152.0], [4.1, 152.0], [4.2, 152.0], [4.3, 152.0], [4.4, 152.0], [4.5, 152.0], [4.6, 152.0], [4.7, 152.0], [4.8, 153.0], [4.9, 153.0], [5.0, 153.0], [5.1, 153.0], [5.2, 153.0], [5.3, 153.0], [5.4, 153.0], [5.5, 153.0], [5.6, 153.0], [5.7, 153.0], [5.8, 154.0], [5.9, 154.0], [6.0, 154.0], [6.1, 154.0], [6.2, 154.0], [6.3, 154.0], [6.4, 154.0], [6.5, 154.0], [6.6, 154.0], [6.7, 154.0], [6.8, 154.0], [6.9, 154.0], [7.0, 154.0], [7.1, 154.0], [7.2, 154.0], [7.3, 154.0], [7.4, 154.0], [7.5, 154.0], [7.6, 154.0], [7.7, 155.0], [7.8, 155.0], [7.9, 155.0], [8.0, 155.0], [8.1, 155.0], [8.2, 155.0], [8.3, 155.0], [8.4, 155.0], [8.5, 155.0], [8.6, 156.0], [8.7, 156.0], [8.8, 156.0], [8.9, 156.0], [9.0, 156.0], [9.1, 156.0], [9.2, 156.0], [9.3, 156.0], [9.4, 156.0], [9.5, 156.0], [9.6, 156.0], [9.7, 156.0], [9.8, 156.0], [9.9, 156.0], [10.0, 156.0], [10.1, 156.0], [10.2, 156.0], [10.3, 156.0], [10.4, 156.0], [10.5, 156.0], [10.6, 156.0], [10.7, 156.0], [10.8, 156.0], [10.9, 156.0], [11.0, 156.0], [11.1, 156.0], [11.2, 156.0], [11.3, 156.0], [11.4, 156.0], [11.5, 157.0], [11.6, 157.0], [11.7, 157.0], [11.8, 157.0], [11.9, 157.0], [12.0, 157.0], [12.1, 157.0], [12.2, 157.0], [12.3, 157.0], [12.4, 157.0], [12.5, 157.0], [12.6, 157.0], [12.7, 157.0], [12.8, 157.0], [12.9, 157.0], [13.0, 157.0], [13.1, 157.0], [13.2, 157.0], [13.3, 157.0], [13.4, 158.0], [13.5, 158.0], [13.6, 158.0], [13.7, 158.0], [13.8, 158.0], [13.9, 158.0], [14.0, 158.0], [14.1, 158.0], [14.2, 158.0], [14.3, 158.0], [14.4, 158.0], [14.5, 158.0], [14.6, 158.0], [14.7, 158.0], [14.8, 158.0], [14.9, 158.0], [15.0, 158.0], [15.1, 158.0], [15.2, 158.0], [15.3, 158.0], [15.4, 158.0], [15.5, 158.0], [15.6, 158.0], [15.7, 158.0], [15.8, 158.0], [15.9, 158.0], [16.0, 158.0], [16.1, 158.0], [16.2, 158.0], [16.3, 158.0], [16.4, 158.0], [16.5, 158.0], [16.6, 158.0], [16.7, 158.0], [16.8, 158.0], [16.9, 158.0], [17.0, 158.0], [17.1, 158.0], [17.2, 159.0], [17.3, 159.0], [17.4, 159.0], [17.5, 159.0], [17.6, 159.0], [17.7, 159.0], [17.8, 159.0], [17.9, 159.0], [18.0, 159.0], [18.1, 159.0], [18.2, 159.0], [18.3, 159.0], [18.4, 159.0], [18.5, 159.0], [18.6, 159.0], [18.7, 159.0], [18.8, 159.0], [18.9, 159.0], [19.0, 159.0], [19.1, 159.0], [19.2, 159.0], [19.3, 159.0], [19.4, 159.0], [19.5, 159.0], [19.6, 159.0], [19.7, 159.0], [19.8, 159.0], [19.9, 159.0], [20.0, 160.0], [20.1, 160.0], [20.2, 160.0], [20.3, 160.0], [20.4, 160.0], [20.5, 160.0], [20.6, 160.0], [20.7, 160.0], [20.8, 160.0], [20.9, 160.0], [21.0, 160.0], [21.1, 160.0], [21.2, 160.0], [21.3, 160.0], [21.4, 160.0], [21.5, 160.0], [21.6, 160.0], [21.7, 160.0], [21.8, 160.0], [21.9, 160.0], [22.0, 160.0], [22.1, 160.0], [22.2, 160.0], [22.3, 160.0], [22.4, 160.0], [22.5, 160.0], [22.6, 160.0], [22.7, 160.0], [22.8, 160.0], [22.9, 160.0], [23.0, 160.0], [23.1, 160.0], [23.2, 160.0], [23.3, 160.0], [23.4, 160.0], [23.5, 160.0], [23.6, 160.0], [23.7, 160.0], [23.8, 160.0], [23.9, 161.0], [24.0, 161.0], [24.1, 161.0], [24.2, 161.0], [24.3, 161.0], [24.4, 161.0], [24.5, 161.0], [24.6, 161.0], [24.7, 161.0], [24.8, 161.0], [24.9, 161.0], [25.0, 161.0], [25.1, 161.0], [25.2, 161.0], [25.3, 161.0], [25.4, 161.0], [25.5, 161.0], [25.6, 161.0], [25.7, 161.0], [25.8, 161.0], [25.9, 161.0], [26.0, 161.0], [26.1, 161.0], [26.2, 161.0], [26.3, 161.0], [26.4, 161.0], [26.5, 161.0], [26.6, 161.0], [26.7, 161.0], [26.8, 161.0], [26.9, 161.0], [27.0, 161.0], [27.1, 161.0], [27.2, 161.0], [27.3, 161.0], [27.4, 161.0], [27.5, 161.0], [27.6, 161.0], [27.7, 161.0], [27.8, 161.0], [27.9, 161.0], [28.0, 161.0], [28.1, 161.0], [28.2, 161.0], [28.3, 161.0], [28.4, 161.0], [28.5, 161.0], [28.6, 161.0], [28.7, 161.0], [28.8, 161.0], [28.9, 161.0], [29.0, 161.0], [29.1, 161.0], [29.2, 161.0], [29.3, 161.0], [29.4, 161.0], [29.5, 161.0], [29.6, 162.0], [29.7, 162.0], [29.8, 162.0], [29.9, 162.0], [30.0, 162.0], [30.1, 162.0], [30.2, 162.0], [30.3, 162.0], [30.4, 162.0], [30.5, 162.0], [30.6, 162.0], [30.7, 162.0], [30.8, 162.0], [30.9, 162.0], [31.0, 162.0], [31.1, 162.0], [31.2, 162.0], [31.3, 162.0], [31.4, 162.0], [31.5, 163.0], [31.6, 163.0], [31.7, 163.0], [31.8, 163.0], [31.9, 163.0], [32.0, 163.0], [32.1, 163.0], [32.2, 163.0], [32.3, 163.0], [32.4, 164.0], [32.5, 164.0], [32.6, 164.0], [32.7, 164.0], [32.8, 164.0], [32.9, 164.0], [33.0, 164.0], [33.1, 164.0], [33.2, 164.0], [33.3, 164.0], [33.4, 164.0], [33.5, 164.0], [33.6, 164.0], [33.7, 164.0], [33.8, 164.0], [33.9, 164.0], [34.0, 164.0], [34.1, 164.0], [34.2, 164.0], [34.3, 164.0], [34.4, 164.0], [34.5, 164.0], [34.6, 164.0], [34.7, 164.0], [34.8, 164.0], [34.9, 164.0], [35.0, 164.0], [35.1, 164.0], [35.2, 164.0], [35.3, 165.0], [35.4, 165.0], [35.5, 165.0], [35.6, 165.0], [35.7, 165.0], [35.8, 165.0], [35.9, 165.0], [36.0, 165.0], [36.1, 165.0], [36.2, 165.0], [36.3, 165.0], [36.4, 165.0], [36.5, 165.0], [36.6, 165.0], [36.7, 165.0], [36.8, 165.0], [36.9, 165.0], [37.0, 165.0], [37.1, 165.0], [37.2, 165.0], [37.3, 165.0], [37.4, 165.0], [37.5, 165.0], [37.6, 165.0], [37.7, 165.0], [37.8, 165.0], [37.9, 165.0], [38.0, 165.0], [38.1, 165.0], [38.2, 165.0], [38.3, 165.0], [38.4, 165.0], [38.5, 165.0], [38.6, 165.0], [38.7, 165.0], [38.8, 165.0], [38.9, 165.0], [39.0, 165.0], [39.1, 165.0], [39.2, 165.0], [39.3, 165.0], [39.4, 165.0], [39.5, 165.0], [39.6, 165.0], [39.7, 165.0], [39.8, 165.0], [39.9, 165.0], [40.0, 166.0], [40.1, 166.0], [40.2, 166.0], [40.3, 166.0], [40.4, 166.0], [40.5, 166.0], [40.6, 166.0], [40.7, 166.0], [40.8, 166.0], [40.9, 166.0], [41.0, 166.0], [41.1, 166.0], [41.2, 166.0], [41.3, 166.0], [41.4, 166.0], [41.5, 166.0], [41.6, 166.0], [41.7, 166.0], [41.8, 166.0], [41.9, 166.0], [42.0, 166.0], [42.1, 166.0], [42.2, 166.0], [42.3, 166.0], [42.4, 166.0], [42.5, 166.0], [42.6, 166.0], [42.7, 166.0], [42.8, 166.0], [42.9, 167.0], [43.0, 167.0], [43.1, 167.0], [43.2, 167.0], [43.3, 167.0], [43.4, 167.0], [43.5, 167.0], [43.6, 167.0], [43.7, 167.0], [43.8, 167.0], [43.9, 167.0], [44.0, 167.0], [44.1, 167.0], [44.2, 167.0], [44.3, 167.0], [44.4, 167.0], [44.5, 167.0], [44.6, 167.0], [44.7, 167.0], [44.8, 167.0], [44.9, 167.0], [45.0, 167.0], [45.1, 167.0], [45.2, 167.0], [45.3, 167.0], [45.4, 167.0], [45.5, 167.0], [45.6, 167.0], [45.7, 167.0], [45.8, 167.0], [45.9, 167.0], [46.0, 167.0], [46.1, 167.0], [46.2, 167.0], [46.3, 167.0], [46.4, 167.0], [46.5, 167.0], [46.6, 167.0], [46.7, 167.0], [46.8, 167.0], [46.9, 167.0], [47.0, 167.0], [47.1, 167.0], [47.2, 167.0], [47.3, 167.0], [47.4, 167.0], [47.5, 167.0], [47.6, 167.0], [47.7, 167.0], [47.8, 167.0], [47.9, 167.0], [48.0, 167.0], [48.1, 167.0], [48.2, 167.0], [48.3, 167.0], [48.4, 167.0], [48.5, 167.0], [48.6, 167.0], [48.7, 167.0], [48.8, 167.0], [48.9, 167.0], [49.0, 167.0], [49.1, 167.0], [49.2, 167.0], [49.3, 167.0], [49.4, 167.0], [49.5, 167.0], [49.6, 168.0], [49.7, 168.0], [49.8, 168.0], [49.9, 168.0], [50.0, 168.0], [50.1, 168.0], [50.2, 168.0], [50.3, 168.0], [50.4, 168.0], [50.5, 168.0], [50.6, 168.0], [50.7, 168.0], [50.8, 168.0], [50.9, 168.0], [51.0, 168.0], [51.1, 168.0], [51.2, 168.0], [51.3, 168.0], [51.4, 168.0], [51.5, 168.0], [51.6, 168.0], [51.7, 168.0], [51.8, 168.0], [51.9, 168.0], [52.0, 168.0], [52.1, 168.0], [52.2, 168.0], [52.3, 168.0], [52.4, 169.0], [52.5, 169.0], [52.6, 169.0], [52.7, 169.0], [52.8, 169.0], [52.9, 169.0], [53.0, 169.0], [53.1, 169.0], [53.2, 169.0], [53.3, 169.0], [53.4, 169.0], [53.5, 169.0], [53.6, 169.0], [53.7, 169.0], [53.8, 169.0], [53.9, 169.0], [54.0, 169.0], [54.1, 169.0], [54.2, 169.0], [54.3, 169.0], [54.4, 169.0], [54.5, 169.0], [54.6, 169.0], [54.7, 169.0], [54.8, 169.0], [54.9, 169.0], [55.0, 169.0], [55.1, 169.0], [55.2, 169.0], [55.3, 171.0], [55.4, 171.0], [55.5, 171.0], [55.6, 171.0], [55.7, 171.0], [55.8, 171.0], [55.9, 171.0], [56.0, 171.0], [56.1, 171.0], [56.2, 171.0], [56.3, 171.0], [56.4, 171.0], [56.5, 171.0], [56.6, 171.0], [56.7, 171.0], [56.8, 171.0], [56.9, 171.0], [57.0, 171.0], [57.1, 171.0], [57.2, 171.0], [57.3, 171.0], [57.4, 171.0], [57.5, 171.0], [57.6, 171.0], [57.7, 171.0], [57.8, 171.0], [57.9, 171.0], [58.0, 171.0], [58.1, 172.0], [58.2, 172.0], [58.3, 172.0], [58.4, 172.0], [58.5, 172.0], [58.6, 172.0], [58.7, 172.0], [58.8, 172.0], [58.9, 172.0], [59.0, 172.0], [59.1, 173.0], [59.2, 173.0], [59.3, 173.0], [59.4, 173.0], [59.5, 173.0], [59.6, 173.0], [59.7, 173.0], [59.8, 173.0], [59.9, 173.0], [60.0, 173.0], [60.1, 173.0], [60.2, 173.0], [60.3, 173.0], [60.4, 173.0], [60.5, 173.0], [60.6, 173.0], [60.7, 173.0], [60.8, 173.0], [60.9, 173.0], [61.0, 173.0], [61.1, 173.0], [61.2, 173.0], [61.3, 173.0], [61.4, 173.0], [61.5, 173.0], [61.6, 173.0], [61.7, 173.0], [61.8, 173.0], [61.9, 173.0], [62.0, 173.0], [62.1, 173.0], [62.2, 173.0], [62.3, 173.0], [62.4, 173.0], [62.5, 173.0], [62.6, 173.0], [62.7, 173.0], [62.8, 173.0], [62.9, 173.0], [63.0, 173.0], [63.1, 173.0], [63.2, 173.0], [63.3, 173.0], [63.4, 173.0], [63.5, 173.0], [63.6, 173.0], [63.7, 173.0], [63.8, 173.0], [63.9, 174.0], [64.0, 174.0], [64.1, 174.0], [64.2, 174.0], [64.3, 174.0], [64.4, 174.0], [64.5, 174.0], [64.6, 174.0], [64.7, 174.0], [64.8, 175.0], [64.9, 175.0], [65.0, 175.0], [65.1, 175.0], [65.2, 175.0], [65.3, 175.0], [65.4, 175.0], [65.5, 175.0], [65.6, 175.0], [65.7, 175.0], [65.8, 176.0], [65.9, 176.0], [66.0, 176.0], [66.1, 176.0], [66.2, 176.0], [66.3, 176.0], [66.4, 176.0], [66.5, 176.0], [66.6, 176.0], [66.7, 177.0], [66.8, 177.0], [66.9, 177.0], [67.0, 177.0], [67.1, 177.0], [67.2, 177.0], [67.3, 177.0], [67.4, 177.0], [67.5, 177.0], [67.6, 177.0], [67.7, 178.0], [67.8, 178.0], [67.9, 178.0], [68.0, 178.0], [68.1, 178.0], [68.2, 178.0], [68.3, 178.0], [68.4, 178.0], [68.5, 178.0], [68.6, 179.0], [68.7, 179.0], [68.8, 179.0], [68.9, 179.0], [69.0, 179.0], [69.1, 179.0], [69.2, 179.0], [69.3, 179.0], [69.4, 179.0], [69.5, 179.0], [69.6, 179.0], [69.7, 179.0], [69.8, 179.0], [69.9, 179.0], [70.0, 179.0], [70.1, 179.0], [70.2, 179.0], [70.3, 179.0], [70.4, 179.0], [70.5, 180.0], [70.6, 180.0], [70.7, 180.0], [70.8, 180.0], [70.9, 180.0], [71.0, 180.0], [71.1, 180.0], [71.2, 180.0], [71.3, 180.0], [71.4, 180.0], [71.5, 181.0], [71.6, 181.0], [71.7, 181.0], [71.8, 181.0], [71.9, 181.0], [72.0, 181.0], [72.1, 181.0], [72.2, 181.0], [72.3, 181.0], [72.4, 181.0], [72.5, 181.0], [72.6, 181.0], [72.7, 181.0], [72.8, 181.0], [72.9, 181.0], [73.0, 181.0], [73.1, 181.0], [73.2, 181.0], [73.3, 181.0], [73.4, 182.0], [73.5, 182.0], [73.6, 182.0], [73.7, 182.0], [73.8, 182.0], [73.9, 182.0], [74.0, 182.0], [74.1, 182.0], [74.2, 182.0], [74.3, 186.0], [74.4, 186.0], [74.5, 186.0], [74.6, 186.0], [74.7, 186.0], [74.8, 186.0], [74.9, 186.0], [75.0, 186.0], [75.1, 186.0], [75.2, 186.0], [75.3, 187.0], [75.4, 187.0], [75.5, 187.0], [75.6, 187.0], [75.7, 187.0], [75.8, 187.0], [75.9, 187.0], [76.0, 187.0], [76.1, 187.0], [76.2, 187.0], [76.3, 187.0], [76.4, 187.0], [76.5, 187.0], [76.6, 187.0], [76.7, 187.0], [76.8, 187.0], [76.9, 187.0], [77.0, 187.0], [77.1, 187.0], [77.2, 189.0], [77.3, 189.0], [77.4, 189.0], [77.5, 189.0], [77.6, 189.0], [77.7, 189.0], [77.8, 189.0], [77.9, 189.0], [78.0, 189.0], [78.1, 191.0], [78.2, 191.0], [78.3, 191.0], [78.4, 191.0], [78.5, 191.0], [78.6, 191.0], [78.7, 191.0], [78.8, 191.0], [78.9, 191.0], [79.0, 191.0], [79.1, 191.0], [79.2, 191.0], [79.3, 191.0], [79.4, 191.0], [79.5, 191.0], [79.6, 191.0], [79.7, 191.0], [79.8, 191.0], [79.9, 191.0], [80.0, 191.0], [80.1, 191.0], [80.2, 191.0], [80.3, 191.0], [80.4, 191.0], [80.5, 191.0], [80.6, 191.0], [80.7, 191.0], [80.8, 191.0], [80.9, 191.0], [81.0, 191.0], [81.1, 191.0], [81.2, 191.0], [81.3, 191.0], [81.4, 191.0], [81.5, 191.0], [81.6, 191.0], [81.7, 191.0], [81.8, 191.0], [81.9, 191.0], [82.0, 193.0], [82.1, 193.0], [82.2, 193.0], [82.3, 193.0], [82.4, 193.0], [82.5, 193.0], [82.6, 193.0], [82.7, 193.0], [82.8, 193.0], [82.9, 197.0], [83.0, 197.0], [83.1, 197.0], [83.2, 197.0], [83.3, 197.0], [83.4, 197.0], [83.5, 197.0], [83.6, 197.0], [83.7, 197.0], [83.8, 197.0], [83.9, 197.0], [84.0, 197.0], [84.1, 197.0], [84.2, 197.0], [84.3, 197.0], [84.4, 197.0], [84.5, 197.0], [84.6, 197.0], [84.7, 197.0], [84.8, 202.0], [84.9, 202.0], [85.0, 202.0], [85.1, 202.0], [85.2, 202.0], [85.3, 202.0], [85.4, 202.0], [85.5, 202.0], [85.6, 202.0], [85.7, 202.0], [85.8, 202.0], [85.9, 202.0], [86.0, 202.0], [86.1, 202.0], [86.2, 202.0], [86.3, 202.0], [86.4, 202.0], [86.5, 202.0], [86.6, 202.0], [86.7, 203.0], [86.8, 203.0], [86.9, 203.0], [87.0, 203.0], [87.1, 203.0], [87.2, 203.0], [87.3, 203.0], [87.4, 203.0], [87.5, 203.0], [87.6, 203.0], [87.7, 203.0], [87.8, 203.0], [87.9, 203.0], [88.0, 203.0], [88.1, 203.0], [88.2, 203.0], [88.3, 203.0], [88.4, 203.0], [88.5, 203.0], [88.6, 205.0], [88.7, 205.0], [88.8, 205.0], [88.9, 205.0], [89.0, 205.0], [89.1, 205.0], [89.2, 205.0], [89.3, 205.0], [89.4, 205.0], [89.5, 205.0], [89.6, 212.0], [89.7, 212.0], [89.8, 212.0], [89.9, 212.0], [90.0, 212.0], [90.1, 212.0], [90.2, 212.0], [90.3, 212.0], [90.4, 212.0], [90.5, 218.0], [90.6, 218.0], [90.7, 218.0], [90.8, 218.0], [90.9, 218.0], [91.0, 218.0], [91.1, 218.0], [91.2, 218.0], [91.3, 218.0], [91.4, 218.0], [91.5, 220.0], [91.6, 220.0], [91.7, 220.0], [91.8, 220.0], [91.9, 220.0], [92.0, 220.0], [92.1, 220.0], [92.2, 220.0], [92.3, 220.0], [92.4, 223.0], [92.5, 223.0], [92.6, 223.0], [92.7, 223.0], [92.8, 223.0], [92.9, 223.0], [93.0, 223.0], [93.1, 223.0], [93.2, 223.0], [93.3, 223.0], [93.4, 235.0], [93.5, 235.0], [93.6, 235.0], [93.7, 235.0], [93.8, 235.0], [93.9, 235.0], [94.0, 235.0], [94.1, 235.0], [94.2, 235.0], [94.3, 241.0], [94.4, 241.0], [94.5, 241.0], [94.6, 241.0], [94.7, 241.0], [94.8, 241.0], [94.9, 241.0], [95.0, 241.0], [95.1, 241.0], [95.2, 241.0], [95.3, 281.0], [95.4, 281.0], [95.5, 281.0], [95.6, 281.0], [95.7, 281.0], [95.8, 281.0], [95.9, 281.0], [96.0, 281.0], [96.1, 281.0], [96.2, 285.0], [96.3, 285.0], [96.4, 285.0], [96.5, 285.0], [96.6, 285.0], [96.7, 285.0], [96.8, 285.0], [96.9, 285.0], [97.0, 285.0], [97.1, 285.0], [97.2, 307.0], [97.3, 307.0], [97.4, 307.0], [97.5, 307.0], [97.6, 307.0], [97.7, 307.0], [97.8, 307.0], [97.9, 307.0], [98.0, 307.0], [98.1, 397.0], [98.2, 397.0], [98.3, 397.0], [98.4, 397.0], [98.5, 397.0], [98.6, 397.0], [98.7, 397.0], [98.8, 397.0], [98.9, 397.0], [99.0, 397.0], [99.1, 547.0], [99.2, 547.0], [99.3, 547.0], [99.4, 547.0], [99.5, 547.0], [99.6, 547.0], [99.7, 547.0], [99.8, 547.0], [99.9, 547.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 27.0], [0.1, 29.0], [0.2, 31.0], [0.3, 32.0], [0.4, 32.0], [0.5, 32.0], [0.6, 33.0], [0.7, 33.0], [0.8, 34.0], [0.9, 34.0], [1.0, 34.0], [1.1, 35.0], [1.2, 35.0], [1.3, 35.0], [1.4, 35.0], [1.5, 36.0], [1.6, 36.0], [1.7, 36.0], [1.8, 36.0], [1.9, 36.0], [2.0, 36.0], [2.1, 36.0], [2.2, 37.0], [2.3, 37.0], [2.4, 37.0], [2.5, 37.0], [2.6, 37.0], [2.7, 37.0], [2.8, 38.0], [2.9, 38.0], [3.0, 38.0], [3.1, 38.0], [3.2, 38.0], [3.3, 38.0], [3.4, 38.0], [3.5, 38.0], [3.6, 38.0], [3.7, 39.0], [3.8, 39.0], [3.9, 39.0], [4.0, 39.0], [4.1, 39.0], [4.2, 39.0], [4.3, 39.0], [4.4, 39.0], [4.5, 39.0], [4.6, 40.0], [4.7, 40.0], [4.8, 40.0], [4.9, 40.0], [5.0, 40.0], [5.1, 40.0], [5.2, 40.0], [5.3, 40.0], [5.4, 40.0], [5.5, 40.0], [5.6, 40.0], [5.7, 41.0], [5.8, 41.0], [5.9, 41.0], [6.0, 41.0], [6.1, 41.0], [6.2, 41.0], [6.3, 41.0], [6.4, 41.0], [6.5, 41.0], [6.6, 41.0], [6.7, 41.0], [6.8, 41.0], [6.9, 41.0], [7.0, 41.0], [7.1, 42.0], [7.2, 42.0], [7.3, 42.0], [7.4, 42.0], [7.5, 42.0], [7.6, 42.0], [7.7, 42.0], [7.8, 42.0], [7.9, 42.0], [8.0, 42.0], [8.1, 42.0], [8.2, 42.0], [8.3, 43.0], [8.4, 43.0], [8.5, 43.0], [8.6, 43.0], [8.7, 43.0], [8.8, 43.0], [8.9, 43.0], [9.0, 43.0], [9.1, 43.0], [9.2, 43.0], [9.3, 43.0], [9.4, 43.0], [9.5, 43.0], [9.6, 43.0], [9.7, 43.0], [9.8, 43.0], [9.9, 44.0], [10.0, 44.0], [10.1, 44.0], [10.2, 44.0], [10.3, 44.0], [10.4, 44.0], [10.5, 44.0], [10.6, 44.0], [10.7, 44.0], [10.8, 44.0], [10.9, 44.0], [11.0, 44.0], [11.1, 44.0], [11.2, 44.0], [11.3, 44.0], [11.4, 45.0], [11.5, 45.0], [11.6, 45.0], [11.7, 45.0], [11.8, 45.0], [11.9, 45.0], [12.0, 45.0], [12.1, 45.0], [12.2, 45.0], [12.3, 45.0], [12.4, 45.0], [12.5, 45.0], [12.6, 45.0], [12.7, 45.0], [12.8, 46.0], [12.9, 46.0], [13.0, 46.0], [13.1, 46.0], [13.2, 46.0], [13.3, 46.0], [13.4, 46.0], [13.5, 46.0], [13.6, 46.0], [13.7, 46.0], [13.8, 46.0], [13.9, 46.0], [14.0, 46.0], [14.1, 46.0], [14.2, 46.0], [14.3, 46.0], [14.4, 47.0], [14.5, 47.0], [14.6, 47.0], [14.7, 47.0], [14.8, 47.0], [14.9, 47.0], [15.0, 47.0], [15.1, 47.0], [15.2, 47.0], [15.3, 47.0], [15.4, 47.0], [15.5, 47.0], [15.6, 47.0], [15.7, 47.0], [15.8, 48.0], [15.9, 48.0], [16.0, 48.0], [16.1, 48.0], [16.2, 48.0], [16.3, 48.0], [16.4, 48.0], [16.5, 48.0], [16.6, 48.0], [16.7, 48.0], [16.8, 48.0], [16.9, 48.0], [17.0, 49.0], [17.1, 49.0], [17.2, 49.0], [17.3, 49.0], [17.4, 49.0], [17.5, 49.0], [17.6, 49.0], [17.7, 49.0], [17.8, 49.0], [17.9, 49.0], [18.0, 49.0], [18.1, 49.0], [18.2, 49.0], [18.3, 50.0], [18.4, 50.0], [18.5, 50.0], [18.6, 50.0], [18.7, 50.0], [18.8, 50.0], [18.9, 50.0], [19.0, 50.0], [19.1, 50.0], [19.2, 50.0], [19.3, 50.0], [19.4, 51.0], [19.5, 51.0], [19.6, 51.0], [19.7, 51.0], [19.8, 51.0], [19.9, 51.0], [20.0, 51.0], [20.1, 51.0], [20.2, 51.0], [20.3, 51.0], [20.4, 51.0], [20.5, 51.0], [20.6, 52.0], [20.7, 52.0], [20.8, 52.0], [20.9, 52.0], [21.0, 52.0], [21.1, 52.0], [21.2, 52.0], [21.3, 52.0], [21.4, 52.0], [21.5, 53.0], [21.6, 53.0], [21.7, 53.0], [21.8, 53.0], [21.9, 53.0], [22.0, 53.0], [22.1, 53.0], [22.2, 53.0], [22.3, 53.0], [22.4, 54.0], [22.5, 54.0], [22.6, 54.0], [22.7, 54.0], [22.8, 54.0], [22.9, 54.0], [23.0, 54.0], [23.1, 54.0], [23.2, 54.0], [23.3, 55.0], [23.4, 55.0], [23.5, 55.0], [23.6, 55.0], [23.7, 55.0], [23.8, 55.0], [23.9, 55.0], [24.0, 56.0], [24.1, 56.0], [24.2, 56.0], [24.3, 56.0], [24.4, 56.0], [24.5, 56.0], [24.6, 56.0], [24.7, 57.0], [24.8, 57.0], [24.9, 57.0], [25.0, 57.0], [25.1, 57.0], [25.2, 58.0], [25.3, 58.0], [25.4, 58.0], [25.5, 58.0], [25.6, 58.0], [25.7, 59.0], [25.8, 59.0], [25.9, 59.0], [26.0, 59.0], [26.1, 59.0], [26.2, 60.0], [26.3, 60.0], [26.4, 60.0], [26.5, 60.0], [26.6, 61.0], [26.7, 61.0], [26.8, 61.0], [26.9, 61.0], [27.0, 62.0], [27.1, 62.0], [27.2, 62.0], [27.3, 63.0], [27.4, 63.0], [27.5, 64.0], [27.6, 64.0], [27.7, 64.0], [27.8, 65.0], [27.9, 65.0], [28.0, 66.0], [28.1, 67.0], [28.2, 68.0], [28.3, 68.0], [28.4, 69.0], [28.5, 70.0], [28.6, 71.0], [28.7, 72.0], [28.8, 73.0], [28.9, 74.0], [29.0, 76.0], [29.1, 79.0], [29.2, 80.0], [29.3, 85.0], [29.4, 94.0], [29.5, 101.0], [29.6, 105.0], [29.7, 113.0], [29.8, 130.0], [29.9, 140.0], [30.0, 151.0], [30.1, 165.0], [30.2, 179.0], [30.3, 186.0], [30.4, 199.0], [30.5, 205.0], [30.6, 216.0], [30.7, 224.0], [30.8, 230.0], [30.9, 240.0], [31.0, 247.0], [31.1, 253.0], [31.2, 260.0], [31.3, 264.0], [31.4, 270.0], [31.5, 279.0], [31.6, 283.0], [31.7, 288.0], [31.8, 295.0], [31.9, 299.0], [32.0, 308.0], [32.1, 312.0], [32.2, 314.0], [32.3, 319.0], [32.4, 324.0], [32.5, 330.0], [32.6, 332.0], [32.7, 336.0], [32.8, 340.0], [32.9, 345.0], [33.0, 350.0], [33.1, 353.0], [33.2, 356.0], [33.3, 361.0], [33.4, 365.0], [33.5, 369.0], [33.6, 372.0], [33.7, 376.0], [33.8, 379.0], [33.9, 382.0], [34.0, 387.0], [34.1, 392.0], [34.2, 395.0], [34.3, 402.0], [34.4, 404.0], [34.5, 408.0], [34.6, 411.0], [34.7, 414.0], [34.8, 416.0], [34.9, 421.0], [35.0, 424.0], [35.1, 427.0], [35.2, 429.0], [35.3, 431.0], [35.4, 435.0], [35.5, 438.0], [35.6, 441.0], [35.7, 444.0], [35.8, 446.0], [35.9, 452.0], [36.0, 454.0], [36.1, 458.0], [36.2, 461.0], [36.3, 464.0], [36.4, 466.0], [36.5, 468.0], [36.6, 470.0], [36.7, 474.0], [36.8, 477.0], [36.9, 480.0], [37.0, 482.0], [37.1, 486.0], [37.2, 488.0], [37.3, 491.0], [37.4, 493.0], [37.5, 495.0], [37.6, 495.0], [37.7, 498.0], [37.8, 500.0], [37.9, 501.0], [38.0, 503.0], [38.1, 506.0], [38.2, 508.0], [38.3, 511.0], [38.4, 512.0], [38.5, 514.0], [38.6, 516.0], [38.7, 518.0], [38.8, 519.0], [38.9, 522.0], [39.0, 524.0], [39.1, 527.0], [39.2, 529.0], [39.3, 532.0], [39.4, 534.0], [39.5, 536.0], [39.6, 539.0], [39.7, 541.0], [39.8, 543.0], [39.9, 545.0], [40.0, 547.0], [40.1, 549.0], [40.2, 551.0], [40.3, 552.0], [40.4, 554.0], [40.5, 555.0], [40.6, 557.0], [40.7, 558.0], [40.8, 560.0], [40.9, 563.0], [41.0, 564.0], [41.1, 566.0], [41.2, 567.0], [41.3, 570.0], [41.4, 572.0], [41.5, 573.0], [41.6, 574.0], [41.7, 577.0], [41.8, 579.0], [41.9, 581.0], [42.0, 584.0], [42.1, 587.0], [42.2, 588.0], [42.3, 590.0], [42.4, 592.0], [42.5, 594.0], [42.6, 594.0], [42.7, 596.0], [42.8, 597.0], [42.9, 600.0], [43.0, 602.0], [43.1, 602.0], [43.2, 604.0], [43.3, 606.0], [43.4, 607.0], [43.5, 609.0], [43.6, 612.0], [43.7, 613.0], [43.8, 614.0], [43.9, 616.0], [44.0, 617.0], [44.1, 619.0], [44.2, 621.0], [44.3, 623.0], [44.4, 624.0], [44.5, 626.0], [44.6, 627.0], [44.7, 629.0], [44.8, 630.0], [44.9, 632.0], [45.0, 635.0], [45.1, 636.0], [45.2, 638.0], [45.3, 640.0], [45.4, 642.0], [45.5, 644.0], [45.6, 646.0], [45.7, 648.0], [45.8, 650.0], [45.9, 652.0], [46.0, 654.0], [46.1, 656.0], [46.2, 658.0], [46.3, 659.0], [46.4, 660.0], [46.5, 662.0], [46.6, 663.0], [46.7, 666.0], [46.8, 667.0], [46.9, 668.0], [47.0, 670.0], [47.1, 673.0], [47.2, 674.0], [47.3, 676.0], [47.4, 678.0], [47.5, 679.0], [47.6, 680.0], [47.7, 683.0], [47.8, 684.0], [47.9, 685.0], [48.0, 687.0], [48.1, 688.0], [48.2, 689.0], [48.3, 691.0], [48.4, 692.0], [48.5, 694.0], [48.6, 695.0], [48.7, 697.0], [48.8, 698.0], [48.9, 700.0], [49.0, 701.0], [49.1, 703.0], [49.2, 704.0], [49.3, 705.0], [49.4, 707.0], [49.5, 708.0], [49.6, 709.0], [49.7, 710.0], [49.8, 712.0], [49.9, 714.0], [50.0, 715.0], [50.1, 716.0], [50.2, 719.0], [50.3, 721.0], [50.4, 722.0], [50.5, 724.0], [50.6, 726.0], [50.7, 727.0], [50.8, 729.0], [50.9, 729.0], [51.0, 731.0], [51.1, 732.0], [51.2, 734.0], [51.3, 735.0], [51.4, 737.0], [51.5, 738.0], [51.6, 739.0], [51.7, 741.0], [51.8, 742.0], [51.9, 744.0], [52.0, 746.0], [52.1, 748.0], [52.2, 750.0], [52.3, 751.0], [52.4, 752.0], [52.5, 753.0], [52.6, 754.0], [52.7, 756.0], [52.8, 758.0], [52.9, 760.0], [53.0, 762.0], [53.1, 764.0], [53.2, 765.0], [53.3, 767.0], [53.4, 768.0], [53.5, 771.0], [53.6, 772.0], [53.7, 773.0], [53.8, 774.0], [53.9, 776.0], [54.0, 778.0], [54.1, 780.0], [54.2, 781.0], [54.3, 782.0], [54.4, 784.0], [54.5, 785.0], [54.6, 786.0], [54.7, 788.0], [54.8, 789.0], [54.9, 791.0], [55.0, 792.0], [55.1, 794.0], [55.2, 796.0], [55.3, 797.0], [55.4, 799.0], [55.5, 801.0], [55.6, 802.0], [55.7, 803.0], [55.8, 804.0], [55.9, 806.0], [56.0, 807.0], [56.1, 809.0], [56.2, 810.0], [56.3, 811.0], [56.4, 813.0], [56.5, 814.0], [56.6, 816.0], [56.7, 817.0], [56.8, 818.0], [56.9, 821.0], [57.0, 821.0], [57.1, 823.0], [57.2, 825.0], [57.3, 826.0], [57.4, 828.0], [57.5, 829.0], [57.6, 831.0], [57.7, 833.0], [57.8, 835.0], [57.9, 836.0], [58.0, 837.0], [58.1, 839.0], [58.2, 840.0], [58.3, 842.0], [58.4, 844.0], [58.5, 845.0], [58.6, 847.0], [58.7, 848.0], [58.8, 850.0], [58.9, 852.0], [59.0, 852.0], [59.1, 854.0], [59.2, 855.0], [59.3, 857.0], [59.4, 858.0], [59.5, 860.0], [59.6, 861.0], [59.7, 863.0], [59.8, 863.0], [59.9, 865.0], [60.0, 866.0], [60.1, 868.0], [60.2, 869.0], [60.3, 871.0], [60.4, 872.0], [60.5, 874.0], [60.6, 876.0], [60.7, 877.0], [60.8, 878.0], [60.9, 880.0], [61.0, 881.0], [61.1, 883.0], [61.2, 884.0], [61.3, 885.0], [61.4, 887.0], [61.5, 888.0], [61.6, 889.0], [61.7, 891.0], [61.8, 892.0], [61.9, 893.0], [62.0, 894.0], [62.1, 895.0], [62.2, 897.0], [62.3, 898.0], [62.4, 900.0], [62.5, 901.0], [62.6, 902.0], [62.7, 904.0], [62.8, 905.0], [62.9, 906.0], [63.0, 908.0], [63.1, 909.0], [63.2, 909.0], [63.3, 911.0], [63.4, 912.0], [63.5, 914.0], [63.6, 915.0], [63.7, 916.0], [63.8, 917.0], [63.9, 919.0], [64.0, 921.0], [64.1, 922.0], [64.2, 924.0], [64.3, 925.0], [64.4, 926.0], [64.5, 928.0], [64.6, 930.0], [64.7, 930.0], [64.8, 932.0], [64.9, 934.0], [65.0, 935.0], [65.1, 938.0], [65.2, 939.0], [65.3, 940.0], [65.4, 941.0], [65.5, 942.0], [65.6, 944.0], [65.7, 946.0], [65.8, 948.0], [65.9, 949.0], [66.0, 951.0], [66.1, 953.0], [66.2, 956.0], [66.3, 959.0], [66.4, 960.0], [66.5, 962.0], [66.6, 964.0], [66.7, 966.0], [66.8, 967.0], [66.9, 969.0], [67.0, 971.0], [67.1, 972.0], [67.2, 974.0], [67.3, 975.0], [67.4, 977.0], [67.5, 979.0], [67.6, 980.0], [67.7, 982.0], [67.8, 983.0], [67.9, 984.0], [68.0, 986.0], [68.1, 988.0], [68.2, 990.0], [68.3, 992.0], [68.4, 993.0], [68.5, 995.0], [68.6, 996.0], [68.7, 998.0], [68.8, 999.0], [68.9, 1002.0], [69.0, 1003.0], [69.1, 1005.0], [69.2, 1006.0], [69.3, 1008.0], [69.4, 1008.0], [69.5, 1010.0], [69.6, 1012.0], [69.7, 1014.0], [69.8, 1015.0], [69.9, 1018.0], [70.0, 1018.0], [70.1, 1020.0], [70.2, 1022.0], [70.3, 1024.0], [70.4, 1026.0], [70.5, 1027.0], [70.6, 1028.0], [70.7, 1029.0], [70.8, 1030.0], [70.9, 1031.0], [71.0, 1032.0], [71.1, 1034.0], [71.2, 1035.0], [71.3, 1036.0], [71.4, 1038.0], [71.5, 1039.0], [71.6, 1041.0], [71.7, 1042.0], [71.8, 1045.0], [71.9, 1046.0], [72.0, 1048.0], [72.1, 1051.0], [72.2, 1054.0], [72.3, 1055.0], [72.4, 1058.0], [72.5, 1059.0], [72.6, 1060.0], [72.7, 1062.0], [72.8, 1064.0], [72.9, 1065.0], [73.0, 1067.0], [73.1, 1069.0], [73.2, 1070.0], [73.3, 1071.0], [73.4, 1073.0], [73.5, 1075.0], [73.6, 1076.0], [73.7, 1078.0], [73.8, 1079.0], [73.9, 1080.0], [74.0, 1082.0], [74.1, 1085.0], [74.2, 1087.0], [74.3, 1089.0], [74.4, 1090.0], [74.5, 1092.0], [74.6, 1093.0], [74.7, 1095.0], [74.8, 1097.0], [74.9, 1099.0], [75.0, 1101.0], [75.1, 1104.0], [75.2, 1105.0], [75.3, 1108.0], [75.4, 1109.0], [75.5, 1111.0], [75.6, 1113.0], [75.7, 1115.0], [75.8, 1117.0], [75.9, 1118.0], [76.0, 1121.0], [76.1, 1123.0], [76.2, 1124.0], [76.3, 1126.0], [76.4, 1128.0], [76.5, 1129.0], [76.6, 1131.0], [76.7, 1133.0], [76.8, 1135.0], [76.9, 1137.0], [77.0, 1138.0], [77.1, 1140.0], [77.2, 1142.0], [77.3, 1144.0], [77.4, 1146.0], [77.5, 1147.0], [77.6, 1149.0], [77.7, 1151.0], [77.8, 1154.0], [77.9, 1156.0], [78.0, 1158.0], [78.1, 1160.0], [78.2, 1162.0], [78.3, 1163.0], [78.4, 1165.0], [78.5, 1167.0], [78.6, 1169.0], [78.7, 1171.0], [78.8, 1172.0], [78.9, 1174.0], [79.0, 1175.0], [79.1, 1178.0], [79.2, 1180.0], [79.3, 1182.0], [79.4, 1183.0], [79.5, 1186.0], [79.6, 1188.0], [79.7, 1190.0], [79.8, 1192.0], [79.9, 1194.0], [80.0, 1197.0], [80.1, 1199.0], [80.2, 1200.0], [80.3, 1202.0], [80.4, 1204.0], [80.5, 1205.0], [80.6, 1207.0], [80.7, 1209.0], [80.8, 1212.0], [80.9, 1214.0], [81.0, 1215.0], [81.1, 1217.0], [81.2, 1219.0], [81.3, 1221.0], [81.4, 1223.0], [81.5, 1225.0], [81.6, 1226.0], [81.7, 1229.0], [81.8, 1232.0], [81.9, 1235.0], [82.0, 1237.0], [82.1, 1239.0], [82.2, 1241.0], [82.3, 1244.0], [82.4, 1246.0], [82.5, 1248.0], [82.6, 1250.0], [82.7, 1252.0], [82.8, 1254.0], [82.9, 1257.0], [83.0, 1259.0], [83.1, 1262.0], [83.2, 1264.0], [83.3, 1265.0], [83.4, 1267.0], [83.5, 1269.0], [83.6, 1271.0], [83.7, 1274.0], [83.8, 1276.0], [83.9, 1278.0], [84.0, 1279.0], [84.1, 1280.0], [84.2, 1282.0], [84.3, 1285.0], [84.4, 1286.0], [84.5, 1288.0], [84.6, 1290.0], [84.7, 1291.0], [84.8, 1293.0], [84.9, 1295.0], [85.0, 1298.0], [85.1, 1302.0], [85.2, 1304.0], [85.3, 1307.0], [85.4, 1309.0], [85.5, 1311.0], [85.6, 1314.0], [85.7, 1316.0], [85.8, 1319.0], [85.9, 1321.0], [86.0, 1323.0], [86.1, 1324.0], [86.2, 1327.0], [86.3, 1329.0], [86.4, 1332.0], [86.5, 1334.0], [86.6, 1336.0], [86.7, 1339.0], [86.8, 1343.0], [86.9, 1344.0], [87.0, 1346.0], [87.1, 1348.0], [87.2, 1351.0], [87.3, 1354.0], [87.4, 1356.0], [87.5, 1358.0], [87.6, 1361.0], [87.7, 1362.0], [87.8, 1364.0], [87.9, 1365.0], [88.0, 1369.0], [88.1, 1371.0], [88.2, 1374.0], [88.3, 1378.0], [88.4, 1381.0], [88.5, 1385.0], [88.6, 1387.0], [88.7, 1390.0], [88.8, 1391.0], [88.9, 1396.0], [89.0, 1399.0], [89.1, 1401.0], [89.2, 1404.0], [89.3, 1406.0], [89.4, 1409.0], [89.5, 1411.0], [89.6, 1416.0], [89.7, 1420.0], [89.8, 1424.0], [89.9, 1427.0], [90.0, 1431.0], [90.1, 1435.0], [90.2, 1438.0], [90.3, 1441.0], [90.4, 1443.0], [90.5, 1446.0], [90.6, 1449.0], [90.7, 1453.0], [90.8, 1458.0], [90.9, 1460.0], [91.0, 1463.0], [91.1, 1466.0], [91.2, 1468.0], [91.3, 1472.0], [91.4, 1475.0], [91.5, 1479.0], [91.6, 1481.0], [91.7, 1483.0], [91.8, 1487.0], [91.9, 1489.0], [92.0, 1493.0], [92.1, 1499.0], [92.2, 1503.0], [92.3, 1505.0], [92.4, 1511.0], [92.5, 1514.0], [92.6, 1519.0], [92.7, 1524.0], [92.8, 1526.0], [92.9, 1528.0], [93.0, 1532.0], [93.1, 1537.0], [93.2, 1542.0], [93.3, 1545.0], [93.4, 1549.0], [93.5, 1555.0], [93.6, 1559.0], [93.7, 1562.0], [93.8, 1565.0], [93.9, 1570.0], [94.0, 1574.0], [94.1, 1577.0], [94.2, 1581.0], [94.3, 1591.0], [94.4, 1596.0], [94.5, 1603.0], [94.6, 1608.0], [94.7, 1614.0], [94.8, 1621.0], [94.9, 1625.0], [95.0, 1628.0], [95.1, 1633.0], [95.2, 1636.0], [95.3, 1643.0], [95.4, 1649.0], [95.5, 1654.0], [95.6, 1658.0], [95.7, 1663.0], [95.8, 1669.0], [95.9, 1673.0], [96.0, 1676.0], [96.1, 1686.0], [96.2, 1693.0], [96.3, 1700.0], [96.4, 1708.0], [96.5, 1715.0], [96.6, 1723.0], [96.7, 1731.0], [96.8, 1740.0], [96.9, 1746.0], [97.0, 1753.0], [97.1, 1761.0], [97.2, 1772.0], [97.3, 1783.0], [97.4, 1796.0], [97.5, 1812.0], [97.6, 1821.0], [97.7, 1830.0], [97.8, 1842.0], [97.9, 1854.0], [98.0, 1871.0], [98.1, 1879.0], [98.2, 1888.0], [98.3, 1899.0], [98.4, 1910.0], [98.5, 1922.0], [98.6, 1934.0], [98.7, 1948.0], [98.8, 1968.0], [98.9, 1986.0], [99.0, 2008.0], [99.1, 2031.0], [99.2, 2053.0], [99.3, 2083.0], [99.4, 2125.0], [99.5, 2163.0], [99.6, 2207.0], [99.7, 2315.0], [99.8, 2462.0], [99.9, 2625.0], [100.0, 3004.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3152.0, "series": [{"data": [[0.0, 3152.0], [600.0, 655.0], [700.0, 721.0], [800.0, 764.0], [900.0, 685.0], [1000.0, 647.0], [1100.0, 596.0], [1200.0, 463.0], [1300.0, 383.0], [1400.0, 320.0], [1500.0, 207.0], [100.0, 91.0], [1600.0, 155.0], [1700.0, 115.0], [1800.0, 84.0], [1900.0, 57.0], [2000.0, 34.0], [2100.0, 16.0], [2200.0, 23.0], [2300.0, 10.0], [2400.0, 7.0], [2500.0, 3.0], [2600.0, 6.0], [2700.0, 1.0], [2800.0, 1.0], [3000.0, 1.0], [200.0, 149.0], [300.0, 253.0], [400.0, 400.0], [500.0, 501.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[300.0, 2.0], [200.0, 13.0], [100.0, 89.0], [500.0, 1.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 3094.0], [600.0, 631.0], [700.0, 688.0], [800.0, 728.0], [900.0, 674.0], [1000.0, 644.0], [1100.0, 544.0], [1200.0, 516.0], [1300.0, 420.0], [1400.0, 325.0], [1500.0, 244.0], [100.0, 99.0], [1600.0, 192.0], [1700.0, 121.0], [1800.0, 92.0], [1900.0, 67.0], [2000.0, 41.0], [2100.0, 26.0], [2200.0, 12.0], [2300.0, 7.0], [2400.0, 6.0], [2500.0, 8.0], [2600.0, 4.0], [2800.0, 3.0], [2700.0, 1.0], [2900.0, 2.0], [3000.0, 1.0], [200.0, 158.0], [300.0, 248.0], [400.0, 369.0], [500.0, 535.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1541.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 11436.0, "series": [{"data": [[0.0, 8128.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 11436.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1541.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 54.84995507637015, "minX": 1.585425E12, "maxY": 105.0, "series": [{"data": [[1.58542524E12, 105.0], [1.58542542E12, 105.0], [1.58542536E12, 105.0], [1.58542506E12, 102.94423480083859], [1.58542554E12, 54.90871369294607], [1.585425E12, 54.84995507637015], [1.58542548E12, 101.80318725099586], [1.58542518E12, 105.0], [1.58542512E12, 105.0], [1.5854253E12, 105.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542554E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 35.5, "minX": 1.0, "maxY": 1162.9999999999998, "series": [{"data": [[4.0, 54.0], [6.0, 57.666666666666664], [7.0, 51.0], [8.0, 44.0], [9.0, 60.0], [10.0, 52.666666666666664], [11.0, 61.25], [12.0, 56.0], [13.0, 49.0], [14.0, 48.142857142857146], [15.0, 52.0], [16.0, 44.375], [17.0, 44.333333333333336], [18.0, 43.0], [19.0, 53.166666666666664], [20.0, 46.16666666666667], [21.0, 40.8], [22.0, 50.2], [23.0, 50.0], [24.0, 46.125], [25.0, 42.285714285714285], [26.0, 48.166666666666664], [27.0, 47.333333333333336], [28.0, 49.4], [29.0, 46.375], [30.0, 52.111111111111114], [31.0, 46.57142857142857], [32.0, 44.55555555555556], [33.0, 48.66666666666667], [34.0, 43.5], [35.0, 51.0], [36.0, 39.333333333333336], [37.0, 83.18181818181819], [38.0, 50.3], [39.0, 47.0], [40.0, 45.12499999999999], [41.0, 47.84615384615385], [42.0, 47.08333333333333], [43.0, 44.8], [44.0, 47.416666666666664], [45.0, 47.285714285714285], [46.0, 53.09523809523809], [47.0, 49.37499999999999], [48.0, 45.526315789473685], [49.0, 45.57142857142857], [50.0, 49.0625], [51.0, 42.666666666666664], [52.0, 46.53846153846154], [53.0, 47.65217391304348], [54.0, 49.68750000000001], [55.0, 45.176470588235304], [56.0, 47.0], [57.0, 48.956521739130444], [58.0, 43.42857142857143], [59.0, 47.49999999999999], [60.0, 42.705882352941174], [61.0, 46.333333333333336], [62.0, 46.142857142857146], [63.0, 46.214285714285715], [64.0, 45.666666666666664], [65.0, 47.78260869565217], [66.0, 47.25000000000001], [67.0, 48.44897959183673], [68.0, 46.92307692307693], [69.0, 46.19999999999998], [70.0, 105.06666666666666], [71.0, 254.5294117647059], [72.0, 836.9285714285714], [73.0, 50.78260869565218], [74.0, 43.00000000000001], [75.0, 46.64705882352941], [76.0, 49.666666666666664], [77.0, 40.77777777777778], [78.0, 44.00000000000001], [79.0, 267.86111111111114], [80.0, 100.61538461538461], [81.0, 52.45283018867924], [82.0, 45.454545454545446], [83.0, 42.55555555555556], [84.0, 50.48275862068966], [85.0, 49.4074074074074], [86.0, 49.07692307692308], [87.0, 47.18181818181818], [88.0, 44.842105263157904], [89.0, 43.333333333333336], [90.0, 45.214285714285715], [91.0, 47.714285714285715], [92.0, 192.70370370370364], [93.0, 294.85714285714283], [94.0, 476.4285714285714], [95.0, 602.6000000000001], [96.0, 1099.4444444444443], [97.0, 257.4375000000001], [98.0, 322.34782608695656], [99.0, 853.9838709677422], [100.0, 1151.072727272727], [101.0, 841.1818181818184], [102.0, 245.33333333333331], [103.0, 242.96666666666667], [104.0, 959.451388888889], [105.0, 769.0984461835111], [1.0, 69.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[99.68609523809513, 686.2358095238066]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 173.0], [3.0, 167.0], [4.0, 176.0], [5.0, 158.0], [6.0, 191.0], [7.0, 164.0], [8.0, 163.0], [9.0, 179.0], [10.0, 162.0], [11.0, 197.0], [12.0, 166.0], [13.0, 149.0], [14.0, 155.0], [15.0, 161.0], [16.0, 161.0], [17.0, 167.0], [18.0, 167.0], [19.0, 156.0], [20.0, 161.0], [21.0, 159.0], [22.0, 181.0], [23.0, 161.0], [24.0, 174.0], [25.0, 191.0], [26.0, 168.0], [27.0, 159.0], [28.0, 156.0], [29.0, 160.0], [30.0, 160.0], [31.0, 171.0], [32.0, 167.0], [33.0, 153.0], [34.0, 165.0], [35.0, 168.0], [36.0, 202.0], [37.0, 156.0], [38.0, 307.0], [39.0, 161.0], [40.0, 212.0], [41.0, 154.0], [42.0, 241.0], [43.0, 169.0], [44.0, 154.0], [45.0, 187.0], [46.0, 173.0], [47.0, 180.0], [48.0, 162.0], [49.0, 173.0], [50.0, 166.0], [51.0, 177.0], [52.0, 160.0], [53.0, 187.0], [54.0, 175.0], [55.0, 167.0], [56.0, 235.0], [57.0, 165.0], [58.0, 157.0], [59.0, 158.0], [60.0, 161.0], [61.0, 160.0], [62.0, 166.0], [63.0, 165.0], [64.0, 202.0], [65.0, 182.0], [66.0, 169.0], [67.0, 146.0], [68.0, 159.0], [69.0, 164.0], [70.0, 397.0], [71.0, 285.0], [72.0, 191.0], [73.0, 171.0], [74.0, 186.0], [75.0, 191.0], [76.0, 171.0], [77.0, 152.0], [78.0, 158.0], [79.0, 165.0], [80.0, 150.0], [81.0, 218.0], [82.0, 157.0], [83.0, 181.0], [84.0, 203.0], [85.0, 138.0], [86.0, 169.0], [87.0, 173.0], [88.0, 173.0], [89.0, 220.0], [90.0, 164.0], [91.0, 197.0], [92.0, 178.0], [93.0, 167.0], [94.0, 547.0], [95.0, 189.0], [96.0, 203.0], [97.0, 167.0], [98.0, 223.0], [99.0, 205.0], [100.0, 168.0], [101.0, 179.0], [102.0, 165.0], [103.0, 158.0], [104.0, 193.0], [105.0, 172.0], [1.0, 281.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[53.0, 182.1238095238095]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[4.0, 47.0], [5.0, 55.0], [6.0, 64.0], [7.0, 40.0], [8.0, 35.5], [9.0, 38.0], [10.0, 53.666666666666664], [11.0, 46.0], [12.0, 57.5], [13.0, 45.5], [14.0, 52.0], [15.0, 54.4], [16.0, 50.777777777777786], [17.0, 45.0], [18.0, 51.0], [19.0, 51.0], [20.0, 51.83333333333333], [21.0, 39.5], [22.0, 46.0], [23.0, 45.4], [24.0, 42.2], [25.0, 49.2], [26.0, 47.75], [27.0, 50.692307692307686], [28.0, 49.8], [29.0, 49.07692307692307], [30.0, 46.12499999999999], [31.0, 43.5], [32.0, 41.63636363636364], [33.0, 53.142857142857146], [34.0, 52.57142857142857], [35.0, 52.5], [36.0, 47.888888888888886], [37.0, 105.8], [38.0, 50.5], [39.0, 48.1764705882353], [40.0, 48.5], [41.0, 45.46153846153846], [42.0, 47.6875], [43.0, 45.75], [44.0, 46.375], [45.0, 43.56521739130434], [46.0, 49.42857142857143], [47.0, 59.45], [48.0, 48.99999999999999], [49.0, 42.22222222222222], [50.0, 46.94444444444445], [51.0, 55.84615384615385], [52.0, 46.833333333333336], [53.0, 50.625], [54.0, 48.5], [55.0, 46.57142857142857], [56.0, 43.25], [57.0, 48.62962962962963], [58.0, 48.72727272727273], [59.0, 47.888888888888886], [60.0, 40.66666666666667], [61.0, 46.583333333333336], [62.0, 47.625], [63.0, 46.35294117647058], [64.0, 43.49999999999999], [65.0, 42.14285714285715], [66.0, 39.44444444444444], [67.0, 48.84745762711862], [68.0, 47.99999999999999], [69.0, 48.55555555555556], [70.0, 129.33333333333334], [71.0, 188.42857142857144], [72.0, 666.3333333333334], [73.0, 113.32432432432435], [74.0, 49.0], [75.0, 47.93749999999999], [76.0, 45.1], [77.0, 42.599999999999994], [78.0, 46.35714285714286], [79.0, 169.9787234042553], [80.0, 112.08333333333334], [81.0, 86.82222222222221], [82.0, 45.583333333333336], [83.0, 43.55555555555556], [84.0, 48.50000000000001], [85.0, 49.481481481481474], [86.0, 50.758620689655174], [87.0, 46.1764705882353], [88.0, 45.50000000000001], [89.0, 44.76923076923075], [90.0, 48.588235294117645], [91.0, 48.77777777777778], [93.0, 466.6363636363636], [94.0, 991.0000000000002], [95.0, 822.6363636363636], [92.0, 50.0], [96.0, 1162.9999999999998], [97.0, 504.18750000000017], [98.0, 358.78000000000014], [99.0, 910.9629629629629], [100.0, 1100.3281249999998], [101.0, 724.7727272727273], [102.0, 293.05263157894734], [103.0, 308.45161290322574], [104.0, 894.0633802816898], [105.0, 785.8998752693051]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[99.68800000000012, 702.0291428571435]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 105.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6893.1, "minX": 1.585425E12, "maxY": 314170.01666666666, "series": [{"data": [[1.58542524E12, 277780.5833333333], [1.58542542E12, 273516.25], [1.58542536E12, 278612.6], [1.58542506E12, 280616.48333333334], [1.58542554E12, 114227.28333333334], [1.585425E12, 123794.73333333334], [1.58542548E12, 297449.0333333333], [1.58542518E12, 267239.73333333334], [1.58542512E12, 263562.5333333333], [1.5854253E12, 314170.01666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58542524E12, 16759.7], [1.58542542E12, 16502.233333333334], [1.58542536E12, 16809.666666666668], [1.58542506E12, 16982.266666666666], [1.58542554E12, 6893.1], [1.585425E12, 7676.066666666667], [1.58542548E12, 17946.733333333334], [1.58542518E12, 16123.133333333333], [1.58542512E12, 15901.6], [1.5854253E12, 18954.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542554E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 64.74849094567408, "minX": 1.585425E12, "maxY": 952.7241379310337, "series": [{"data": [[1.58542524E12, 808.6034042553185], [1.58542542E12, 855.3714285714285], [1.58542536E12, 762.5867346938779], [1.58542506E12, 711.883701188455], [1.58542554E12, 64.74849094567408], [1.585425E12, 86.5620000000001], [1.58542548E12, 576.4778129952455], [1.58542518E12, 931.9039145907481], [1.58542512E12, 928.8866906474824], [1.5854253E12, 491.03255109765297]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58542506E12, 197.52380952380955], [1.585425E12, 178.27380952380952]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58542524E12, 820.8990590248078], [1.58542542E12, 854.0069384215086], [1.58542536E12, 806.8502127659581], [1.58542506E12, 727.4645868465442], [1.58542554E12, 66.50107066381165], [1.585425E12, 95.07372400756144], [1.58542548E12, 580.2988782051282], [1.58542518E12, 952.7241379310337], [1.58542512E12, 939.0899280575542], [1.5854253E12, 517.9105263157895]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542554E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 64.48692152917502, "minX": 1.585425E12, "maxY": 952.5172413793101, "series": [{"data": [[1.58542524E12, 808.3804255319153], [1.58542542E12, 855.0865800865797], [1.58542536E12, 762.3401360544218], [1.58542506E12, 711.669779286927], [1.58542554E12, 64.48692152917502], [1.585425E12, 86.36599999999997], [1.58542548E12, 576.2432646592711], [1.58542518E12, 931.7001779359431], [1.58542512E12, 928.651978417266], [1.5854253E12, 490.78728236184656]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58542506E12, 197.047619047619], [1.585425E12, 177.7976190476191]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58542524E12, 820.6569717707456], [1.58542542E12, 853.784908933217], [1.58542536E12, 806.616170212765], [1.58542506E12, 727.2537942664428], [1.58542554E12, 66.10920770877944], [1.585425E12, 94.875236294896], [1.58542548E12, 580.05128205128], [1.58542518E12, 952.5172413793101], [1.58542512E12, 938.8983812949641], [1.5854253E12, 517.6654135338345]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542554E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.002012072434607647, "minX": 1.585425E12, "maxY": 1.1666666666666665, "series": [{"data": [[1.58542524E12, 0.3676595744680848], [1.58542542E12, 0.37575757575757607], [1.58542536E12, 0.33673469387755145], [1.58542506E12, 0.35229202037351454], [1.58542554E12, 0.002012072434607647], [1.585425E12, 0.19600000000000015], [1.58542548E12, 0.23296354992076077], [1.58542518E12, 0.43416370106761526], [1.58542512E12, 0.42985611510791333], [1.5854253E12, 0.19984859954579898]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58542506E12, 0.9047619047619047], [1.585425E12, 1.1666666666666665]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58542524E12, 0.6304533789563729], [1.58542542E12, 0.8490893321769282], [1.58542536E12, 0.5872340425531911], [1.58542506E12, 0.705733558178753], [1.58542554E12, 0.8094218415417559], [1.585425E12, 0.8298676748582223], [1.58542548E12, 0.6249999999999993], [1.58542518E12, 0.7046861184792218], [1.58542512E12, 0.6744604316546763], [1.5854253E12, 0.5969924812030073]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542554E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.585425E12, "maxY": 3035.0, "series": [{"data": [[1.58542524E12, 2910.0], [1.58542542E12, 2548.0], [1.58542536E12, 3004.0], [1.58542506E12, 2101.0], [1.58542554E12, 973.0], [1.585425E12, 1395.0], [1.58542548E12, 2848.0], [1.58542518E12, 2862.0], [1.58542512E12, 3035.0], [1.5854253E12, 2374.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58542524E12, 28.0], [1.58542542E12, 33.0], [1.58542536E12, 31.0], [1.58542506E12, 27.0], [1.58542554E12, 29.0], [1.585425E12, 25.0], [1.58542548E12, 29.0], [1.58542518E12, 27.0], [1.58542512E12, 27.0], [1.5854253E12, 28.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58542524E12, 1542.5], [1.58542542E12, 1381.1], [1.58542536E12, 1417.8000000000002], [1.58542506E12, 1323.4], [1.58542554E12, 63.0], [1.585425E12, 166.0], [1.58542548E12, 1401.7000000000003], [1.58542518E12, 1591.4], [1.58542512E12, 1536.5], [1.5854253E12, 1288.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58542524E12, 2056.750000000008], [1.58542542E12, 1895.7299999999996], [1.58542536E12, 1924.6800000000003], [1.58542506E12, 1835.4199999999996], [1.58542554E12, 543.35], [1.585425E12, 1037.0799999999972], [1.58542548E12, 2141.579999999997], [1.58542518E12, 2290.0800000000004], [1.58542512E12, 2073.0], [1.5854253E12, 1833.88]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58542524E12, 1700.0], [1.58542542E12, 1554.2999999999984], [1.58542536E12, 1574.4], [1.58542506E12, 1503.0], [1.58542554E12, 110.75], [1.585425E12, 409.19999999999936], [1.58542548E12, 1644.4499999999998], [1.58542518E12, 1858.999999999999], [1.58542512E12, 1740.0], [1.5854253E12, 1486.2000000000003]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542554E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 45.0, "minX": 1.0, "maxY": 1010.0, "series": [{"data": [[2.0, 59.0], [4.0, 49.5], [5.0, 59.0], [6.0, 56.5], [7.0, 60.0], [8.0, 49.5], [9.0, 50.0], [10.0, 53.0], [11.0, 360.0], [12.0, 50.0], [13.0, 793.0], [14.0, 46.0], [15.0, 45.0], [16.0, 46.5], [17.0, 50.0], [18.0, 53.5], [19.0, 510.0], [20.0, 528.0], [21.0, 600.0], [22.0, 899.5], [23.0, 677.0], [24.0, 796.5], [25.0, 667.0], [26.0, 866.0], [27.0, 826.0], [28.0, 780.0], [29.0, 674.0], [30.0, 862.5], [31.0, 934.0], [32.0, 955.5], [33.0, 900.5], [35.0, 809.0], [34.0, 808.5], [36.0, 809.5], [37.0, 823.0], [39.0, 899.5], [38.0, 985.5], [41.0, 908.0], [40.0, 1010.0], [43.0, 859.5], [42.0, 971.5], [45.0, 959.0], [44.0, 736.5], [46.0, 748.0], [47.0, 518.0], [48.0, 64.5], [49.0, 500.0], [51.0, 394.0], [50.0, 803.5], [52.0, 51.0], [53.0, 56.0], [54.0, 62.0], [55.0, 68.5], [57.0, 61.0], [56.0, 54.0], [58.0, 56.0], [59.0, 56.0], [60.0, 48.0], [61.0, 50.0], [63.0, 538.5], [67.0, 281.0], [64.0, 45.5], [69.0, 623.0], [68.0, 361.5], [1.0, 118.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 69.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 45.0, "minX": 1.0, "maxY": 1010.0, "series": [{"data": [[2.0, 58.5], [4.0, 49.5], [5.0, 58.5], [6.0, 56.5], [7.0, 59.0], [8.0, 49.5], [9.0, 50.0], [10.0, 52.5], [11.0, 360.0], [12.0, 50.0], [13.0, 793.0], [14.0, 46.0], [15.0, 45.0], [16.0, 46.5], [17.0, 49.0], [18.0, 53.5], [19.0, 510.0], [20.0, 528.0], [21.0, 600.0], [22.0, 899.5], [23.0, 677.0], [24.0, 796.5], [25.0, 667.0], [26.0, 865.5], [27.0, 826.0], [28.0, 780.0], [29.0, 673.5], [30.0, 862.5], [31.0, 934.0], [32.0, 955.5], [33.0, 900.5], [35.0, 809.0], [34.0, 808.5], [36.0, 809.5], [37.0, 823.0], [39.0, 899.0], [38.0, 985.0], [41.0, 908.0], [40.0, 1010.0], [43.0, 859.5], [42.0, 971.5], [45.0, 959.0], [44.0, 736.5], [46.0, 748.0], [47.0, 518.0], [48.0, 64.0], [49.0, 500.0], [51.0, 394.0], [50.0, 803.0], [52.0, 51.0], [53.0, 55.0], [54.0, 62.0], [55.0, 68.5], [57.0, 61.0], [56.0, 53.0], [58.0, 55.5], [59.0, 56.0], [60.0, 48.0], [61.0, 50.0], [63.0, 538.5], [67.0, 281.0], [64.0, 45.0], [69.0, 623.0], [68.0, 361.5], [1.0, 117.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 69.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.0, "minX": 1.585425E12, "maxY": 44.0, "series": [{"data": [[1.58542524E12, 38.983333333333334], [1.58542542E12, 38.45], [1.58542536E12, 39.38333333333333], [1.58542506E12, 40.333333333333336], [1.58542554E12, 16.0], [1.585425E12, 18.6], [1.58542548E12, 41.21666666666667], [1.58542518E12, 37.416666666666664], [1.58542512E12, 37.36666666666667], [1.5854253E12, 44.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542554E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.066666666666666, "minX": 1.585425E12, "maxY": 44.18333333333333, "series": [{"data": [[1.58542524E12, 39.06666666666667], [1.58542542E12, 38.46666666666667], [1.58542536E12, 39.18333333333333], [1.58542506E12, 39.75], [1.58542554E12, 16.066666666666666], [1.585425E12, 18.55], [1.58542548E12, 41.833333333333336], [1.58542518E12, 37.583333333333336], [1.58542512E12, 37.06666666666667], [1.5854253E12, 44.18333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542554E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.585425E12, "maxY": 22.166666666666668, "series": [{"data": [[1.58542506E12, 0.35], [1.585425E12, 1.4]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58542524E12, 19.583333333333332], [1.58542542E12, 19.25], [1.58542536E12, 19.6], [1.58542506E12, 19.633333333333333], [1.58542554E12, 8.283333333333333], [1.585425E12, 8.333333333333334], [1.58542548E12, 21.033333333333335], [1.58542518E12, 18.733333333333334], [1.58542512E12, 18.533333333333335], [1.5854253E12, 22.016666666666666]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58542524E12, 19.483333333333334], [1.58542542E12, 19.216666666666665], [1.58542536E12, 19.583333333333332], [1.58542506E12, 19.766666666666666], [1.58542554E12, 7.783333333333333], [1.585425E12, 8.816666666666666], [1.58542548E12, 20.8], [1.58542518E12, 18.85], [1.58542512E12, 18.533333333333335], [1.5854253E12, 22.166666666666668]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542554E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.066666666666666, "minX": 1.585425E12, "maxY": 44.18333333333333, "series": [{"data": [[1.58542524E12, 39.06666666666667], [1.58542542E12, 38.46666666666667], [1.58542536E12, 39.18333333333333], [1.58542506E12, 39.75], [1.58542554E12, 16.066666666666666], [1.585425E12, 18.55], [1.58542548E12, 41.833333333333336], [1.58542518E12, 37.583333333333336], [1.58542512E12, 37.06666666666667], [1.5854253E12, 44.18333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542554E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

