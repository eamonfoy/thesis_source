/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 4936.0, "series": [{"data": [[0.0, 7.0], [0.1, 10.0], [0.2, 17.0], [0.3, 30.0], [0.4, 31.0], [0.5, 32.0], [0.6, 33.0], [0.7, 34.0], [0.8, 34.0], [0.9, 35.0], [1.0, 35.0], [1.1, 36.0], [1.2, 36.0], [1.3, 36.0], [1.4, 36.0], [1.5, 37.0], [1.6, 37.0], [1.7, 38.0], [1.8, 38.0], [1.9, 38.0], [2.0, 38.0], [2.1, 39.0], [2.2, 39.0], [2.3, 39.0], [2.4, 39.0], [2.5, 40.0], [2.6, 40.0], [2.7, 40.0], [2.8, 40.0], [2.9, 40.0], [3.0, 41.0], [3.1, 41.0], [3.2, 41.0], [3.3, 41.0], [3.4, 41.0], [3.5, 41.0], [3.6, 42.0], [3.7, 42.0], [3.8, 42.0], [3.9, 42.0], [4.0, 42.0], [4.1, 42.0], [4.2, 43.0], [4.3, 43.0], [4.4, 43.0], [4.5, 43.0], [4.6, 43.0], [4.7, 44.0], [4.8, 44.0], [4.9, 44.0], [5.0, 44.0], [5.1, 44.0], [5.2, 44.0], [5.3, 45.0], [5.4, 45.0], [5.5, 45.0], [5.6, 45.0], [5.7, 45.0], [5.8, 45.0], [5.9, 45.0], [6.0, 46.0], [6.1, 46.0], [6.2, 46.0], [6.3, 46.0], [6.4, 46.0], [6.5, 46.0], [6.6, 46.0], [6.7, 47.0], [6.8, 47.0], [6.9, 47.0], [7.0, 47.0], [7.1, 47.0], [7.2, 47.0], [7.3, 47.0], [7.4, 47.0], [7.5, 48.0], [7.6, 48.0], [7.7, 48.0], [7.8, 48.0], [7.9, 48.0], [8.0, 48.0], [8.1, 49.0], [8.2, 49.0], [8.3, 49.0], [8.4, 49.0], [8.5, 49.0], [8.6, 49.0], [8.7, 50.0], [8.8, 50.0], [8.9, 50.0], [9.0, 50.0], [9.1, 50.0], [9.2, 51.0], [9.3, 51.0], [9.4, 51.0], [9.5, 51.0], [9.6, 51.0], [9.7, 51.0], [9.8, 52.0], [9.9, 52.0], [10.0, 52.0], [10.1, 52.0], [10.2, 53.0], [10.3, 53.0], [10.4, 53.0], [10.5, 54.0], [10.6, 54.0], [10.7, 54.0], [10.8, 54.0], [10.9, 54.0], [11.0, 55.0], [11.1, 55.0], [11.2, 55.0], [11.3, 56.0], [11.4, 56.0], [11.5, 56.0], [11.6, 57.0], [11.7, 57.0], [11.8, 57.0], [11.9, 57.0], [12.0, 58.0], [12.1, 58.0], [12.2, 58.0], [12.3, 58.0], [12.4, 59.0], [12.5, 60.0], [12.6, 60.0], [12.7, 61.0], [12.8, 61.0], [12.9, 62.0], [13.0, 62.0], [13.1, 62.0], [13.2, 63.0], [13.3, 63.0], [13.4, 64.0], [13.5, 64.0], [13.6, 65.0], [13.7, 65.0], [13.8, 67.0], [13.9, 68.0], [14.0, 69.0], [14.1, 70.0], [14.2, 70.0], [14.3, 72.0], [14.4, 73.0], [14.5, 75.0], [14.6, 77.0], [14.7, 78.0], [14.8, 79.0], [14.9, 81.0], [15.0, 83.0], [15.1, 85.0], [15.2, 86.0], [15.3, 88.0], [15.4, 91.0], [15.5, 93.0], [15.6, 97.0], [15.7, 99.0], [15.8, 101.0], [15.9, 104.0], [16.0, 106.0], [16.1, 112.0], [16.2, 116.0], [16.3, 122.0], [16.4, 128.0], [16.5, 139.0], [16.6, 148.0], [16.7, 159.0], [16.8, 170.0], [16.9, 191.0], [17.0, 208.0], [17.1, 237.0], [17.2, 256.0], [17.3, 267.0], [17.4, 287.0], [17.5, 300.0], [17.6, 314.0], [17.7, 325.0], [17.8, 342.0], [17.9, 353.0], [18.0, 370.0], [18.1, 378.0], [18.2, 390.0], [18.3, 400.0], [18.4, 411.0], [18.5, 417.0], [18.6, 424.0], [18.7, 433.0], [18.8, 437.0], [18.9, 447.0], [19.0, 452.0], [19.1, 458.0], [19.2, 465.0], [19.3, 469.0], [19.4, 472.0], [19.5, 476.0], [19.6, 480.0], [19.7, 488.0], [19.8, 494.0], [19.9, 502.0], [20.0, 510.0], [20.1, 517.0], [20.2, 522.0], [20.3, 527.0], [20.4, 530.0], [20.5, 534.0], [20.6, 539.0], [20.7, 543.0], [20.8, 545.0], [20.9, 549.0], [21.0, 552.0], [21.1, 555.0], [21.2, 557.0], [21.3, 560.0], [21.4, 566.0], [21.5, 568.0], [21.6, 572.0], [21.7, 577.0], [21.8, 579.0], [21.9, 583.0], [22.0, 587.0], [22.1, 589.0], [22.2, 592.0], [22.3, 598.0], [22.4, 601.0], [22.5, 608.0], [22.6, 612.0], [22.7, 616.0], [22.8, 618.0], [22.9, 622.0], [23.0, 627.0], [23.1, 631.0], [23.2, 633.0], [23.3, 636.0], [23.4, 639.0], [23.5, 641.0], [23.6, 644.0], [23.7, 647.0], [23.8, 652.0], [23.9, 656.0], [24.0, 659.0], [24.1, 662.0], [24.2, 663.0], [24.3, 666.0], [24.4, 668.0], [24.5, 670.0], [24.6, 674.0], [24.7, 678.0], [24.8, 680.0], [24.9, 683.0], [25.0, 686.0], [25.1, 689.0], [25.2, 690.0], [25.3, 693.0], [25.4, 697.0], [25.5, 699.0], [25.6, 702.0], [25.7, 704.0], [25.8, 707.0], [25.9, 710.0], [26.0, 712.0], [26.1, 714.0], [26.2, 717.0], [26.3, 719.0], [26.4, 723.0], [26.5, 726.0], [26.6, 730.0], [26.7, 732.0], [26.8, 734.0], [26.9, 737.0], [27.0, 738.0], [27.1, 740.0], [27.2, 742.0], [27.3, 745.0], [27.4, 747.0], [27.5, 749.0], [27.6, 752.0], [27.7, 755.0], [27.8, 757.0], [27.9, 759.0], [28.0, 762.0], [28.1, 764.0], [28.2, 767.0], [28.3, 768.0], [28.4, 770.0], [28.5, 773.0], [28.6, 776.0], [28.7, 778.0], [28.8, 780.0], [28.9, 782.0], [29.0, 784.0], [29.1, 786.0], [29.2, 788.0], [29.3, 790.0], [29.4, 793.0], [29.5, 795.0], [29.6, 799.0], [29.7, 800.0], [29.8, 803.0], [29.9, 804.0], [30.0, 806.0], [30.1, 809.0], [30.2, 812.0], [30.3, 814.0], [30.4, 815.0], [30.5, 818.0], [30.6, 820.0], [30.7, 822.0], [30.8, 823.0], [30.9, 825.0], [31.0, 828.0], [31.1, 830.0], [31.2, 832.0], [31.3, 835.0], [31.4, 837.0], [31.5, 839.0], [31.6, 841.0], [31.7, 844.0], [31.8, 846.0], [31.9, 848.0], [32.0, 851.0], [32.1, 853.0], [32.2, 855.0], [32.3, 857.0], [32.4, 859.0], [32.5, 861.0], [32.6, 864.0], [32.7, 866.0], [32.8, 867.0], [32.9, 870.0], [33.0, 872.0], [33.1, 875.0], [33.2, 877.0], [33.3, 879.0], [33.4, 880.0], [33.5, 882.0], [33.6, 884.0], [33.7, 885.0], [33.8, 887.0], [33.9, 888.0], [34.0, 891.0], [34.1, 893.0], [34.2, 894.0], [34.3, 897.0], [34.4, 898.0], [34.5, 900.0], [34.6, 903.0], [34.7, 904.0], [34.8, 906.0], [34.9, 907.0], [35.0, 908.0], [35.1, 911.0], [35.2, 913.0], [35.3, 914.0], [35.4, 917.0], [35.5, 919.0], [35.6, 922.0], [35.7, 923.0], [35.8, 925.0], [35.9, 926.0], [36.0, 927.0], [36.1, 928.0], [36.2, 930.0], [36.3, 931.0], [36.4, 932.0], [36.5, 934.0], [36.6, 936.0], [36.7, 937.0], [36.8, 938.0], [36.9, 940.0], [37.0, 941.0], [37.1, 944.0], [37.2, 946.0], [37.3, 948.0], [37.4, 949.0], [37.5, 950.0], [37.6, 952.0], [37.7, 954.0], [37.8, 955.0], [37.9, 957.0], [38.0, 958.0], [38.1, 960.0], [38.2, 961.0], [38.3, 962.0], [38.4, 963.0], [38.5, 965.0], [38.6, 967.0], [38.7, 968.0], [38.8, 969.0], [38.9, 971.0], [39.0, 974.0], [39.1, 976.0], [39.2, 977.0], [39.3, 979.0], [39.4, 980.0], [39.5, 982.0], [39.6, 984.0], [39.7, 987.0], [39.8, 988.0], [39.9, 990.0], [40.0, 991.0], [40.1, 993.0], [40.2, 994.0], [40.3, 995.0], [40.4, 998.0], [40.5, 1000.0], [40.6, 1002.0], [40.7, 1003.0], [40.8, 1004.0], [40.9, 1005.0], [41.0, 1007.0], [41.1, 1010.0], [41.2, 1012.0], [41.3, 1013.0], [41.4, 1016.0], [41.5, 1018.0], [41.6, 1019.0], [41.7, 1021.0], [41.8, 1022.0], [41.9, 1023.0], [42.0, 1025.0], [42.1, 1026.0], [42.2, 1028.0], [42.3, 1029.0], [42.4, 1032.0], [42.5, 1033.0], [42.6, 1035.0], [42.7, 1036.0], [42.8, 1038.0], [42.9, 1039.0], [43.0, 1041.0], [43.1, 1043.0], [43.2, 1044.0], [43.3, 1046.0], [43.4, 1047.0], [43.5, 1048.0], [43.6, 1049.0], [43.7, 1051.0], [43.8, 1052.0], [43.9, 1053.0], [44.0, 1055.0], [44.1, 1057.0], [44.2, 1059.0], [44.3, 1061.0], [44.4, 1062.0], [44.5, 1064.0], [44.6, 1065.0], [44.7, 1066.0], [44.8, 1068.0], [44.9, 1069.0], [45.0, 1071.0], [45.1, 1073.0], [45.2, 1074.0], [45.3, 1076.0], [45.4, 1077.0], [45.5, 1079.0], [45.6, 1080.0], [45.7, 1082.0], [45.8, 1082.0], [45.9, 1083.0], [46.0, 1085.0], [46.1, 1087.0], [46.2, 1088.0], [46.3, 1090.0], [46.4, 1091.0], [46.5, 1093.0], [46.6, 1094.0], [46.7, 1096.0], [46.8, 1099.0], [46.9, 1100.0], [47.0, 1101.0], [47.1, 1103.0], [47.2, 1104.0], [47.3, 1106.0], [47.4, 1107.0], [47.5, 1109.0], [47.6, 1110.0], [47.7, 1112.0], [47.8, 1113.0], [47.9, 1115.0], [48.0, 1116.0], [48.1, 1117.0], [48.2, 1119.0], [48.3, 1121.0], [48.4, 1122.0], [48.5, 1124.0], [48.6, 1126.0], [48.7, 1128.0], [48.8, 1129.0], [48.9, 1131.0], [49.0, 1132.0], [49.1, 1135.0], [49.2, 1137.0], [49.3, 1138.0], [49.4, 1139.0], [49.5, 1141.0], [49.6, 1143.0], [49.7, 1144.0], [49.8, 1146.0], [49.9, 1147.0], [50.0, 1148.0], [50.1, 1150.0], [50.2, 1151.0], [50.3, 1152.0], [50.4, 1153.0], [50.5, 1155.0], [50.6, 1157.0], [50.7, 1158.0], [50.8, 1159.0], [50.9, 1161.0], [51.0, 1164.0], [51.1, 1167.0], [51.2, 1168.0], [51.3, 1169.0], [51.4, 1171.0], [51.5, 1172.0], [51.6, 1175.0], [51.7, 1177.0], [51.8, 1178.0], [51.9, 1179.0], [52.0, 1180.0], [52.1, 1181.0], [52.2, 1182.0], [52.3, 1184.0], [52.4, 1185.0], [52.5, 1186.0], [52.6, 1187.0], [52.7, 1189.0], [52.8, 1191.0], [52.9, 1193.0], [53.0, 1194.0], [53.1, 1196.0], [53.2, 1198.0], [53.3, 1199.0], [53.4, 1200.0], [53.5, 1202.0], [53.6, 1203.0], [53.7, 1204.0], [53.8, 1206.0], [53.9, 1207.0], [54.0, 1209.0], [54.1, 1210.0], [54.2, 1211.0], [54.3, 1212.0], [54.4, 1213.0], [54.5, 1214.0], [54.6, 1216.0], [54.7, 1218.0], [54.8, 1219.0], [54.9, 1221.0], [55.0, 1222.0], [55.1, 1224.0], [55.2, 1225.0], [55.3, 1226.0], [55.4, 1228.0], [55.5, 1229.0], [55.6, 1231.0], [55.7, 1232.0], [55.8, 1234.0], [55.9, 1236.0], [56.0, 1238.0], [56.1, 1239.0], [56.2, 1240.0], [56.3, 1241.0], [56.4, 1244.0], [56.5, 1246.0], [56.6, 1247.0], [56.7, 1249.0], [56.8, 1250.0], [56.9, 1252.0], [57.0, 1253.0], [57.1, 1255.0], [57.2, 1257.0], [57.3, 1258.0], [57.4, 1260.0], [57.5, 1262.0], [57.6, 1263.0], [57.7, 1264.0], [57.8, 1265.0], [57.9, 1268.0], [58.0, 1270.0], [58.1, 1272.0], [58.2, 1274.0], [58.3, 1275.0], [58.4, 1276.0], [58.5, 1278.0], [58.6, 1280.0], [58.7, 1281.0], [58.8, 1282.0], [58.9, 1283.0], [59.0, 1284.0], [59.1, 1286.0], [59.2, 1288.0], [59.3, 1290.0], [59.4, 1291.0], [59.5, 1293.0], [59.6, 1295.0], [59.7, 1296.0], [59.8, 1298.0], [59.9, 1300.0], [60.0, 1302.0], [60.1, 1304.0], [60.2, 1306.0], [60.3, 1308.0], [60.4, 1310.0], [60.5, 1311.0], [60.6, 1312.0], [60.7, 1314.0], [60.8, 1316.0], [60.9, 1317.0], [61.0, 1319.0], [61.1, 1321.0], [61.2, 1323.0], [61.3, 1325.0], [61.4, 1326.0], [61.5, 1328.0], [61.6, 1330.0], [61.7, 1332.0], [61.8, 1333.0], [61.9, 1335.0], [62.0, 1336.0], [62.1, 1338.0], [62.2, 1339.0], [62.3, 1341.0], [62.4, 1343.0], [62.5, 1344.0], [62.6, 1345.0], [62.7, 1347.0], [62.8, 1349.0], [62.9, 1350.0], [63.0, 1352.0], [63.1, 1353.0], [63.2, 1355.0], [63.3, 1356.0], [63.4, 1358.0], [63.5, 1359.0], [63.6, 1361.0], [63.7, 1363.0], [63.8, 1365.0], [63.9, 1367.0], [64.0, 1368.0], [64.1, 1369.0], [64.2, 1371.0], [64.3, 1372.0], [64.4, 1375.0], [64.5, 1377.0], [64.6, 1379.0], [64.7, 1379.0], [64.8, 1381.0], [64.9, 1383.0], [65.0, 1385.0], [65.1, 1388.0], [65.2, 1389.0], [65.3, 1391.0], [65.4, 1393.0], [65.5, 1395.0], [65.6, 1397.0], [65.7, 1398.0], [65.8, 1400.0], [65.9, 1401.0], [66.0, 1403.0], [66.1, 1404.0], [66.2, 1406.0], [66.3, 1408.0], [66.4, 1410.0], [66.5, 1412.0], [66.6, 1413.0], [66.7, 1415.0], [66.8, 1416.0], [66.9, 1417.0], [67.0, 1418.0], [67.1, 1420.0], [67.2, 1421.0], [67.3, 1423.0], [67.4, 1424.0], [67.5, 1426.0], [67.6, 1427.0], [67.7, 1429.0], [67.8, 1430.0], [67.9, 1433.0], [68.0, 1436.0], [68.1, 1437.0], [68.2, 1439.0], [68.3, 1440.0], [68.4, 1442.0], [68.5, 1444.0], [68.6, 1446.0], [68.7, 1448.0], [68.8, 1450.0], [68.9, 1451.0], [69.0, 1454.0], [69.1, 1455.0], [69.2, 1456.0], [69.3, 1458.0], [69.4, 1461.0], [69.5, 1462.0], [69.6, 1463.0], [69.7, 1464.0], [69.8, 1466.0], [69.9, 1469.0], [70.0, 1470.0], [70.1, 1471.0], [70.2, 1473.0], [70.3, 1475.0], [70.4, 1476.0], [70.5, 1479.0], [70.6, 1481.0], [70.7, 1482.0], [70.8, 1484.0], [70.9, 1485.0], [71.0, 1487.0], [71.1, 1489.0], [71.2, 1490.0], [71.3, 1491.0], [71.4, 1493.0], [71.5, 1495.0], [71.6, 1497.0], [71.7, 1499.0], [71.8, 1500.0], [71.9, 1502.0], [72.0, 1504.0], [72.1, 1506.0], [72.2, 1507.0], [72.3, 1511.0], [72.4, 1512.0], [72.5, 1513.0], [72.6, 1515.0], [72.7, 1518.0], [72.8, 1519.0], [72.9, 1521.0], [73.0, 1522.0], [73.1, 1523.0], [73.2, 1524.0], [73.3, 1526.0], [73.4, 1527.0], [73.5, 1530.0], [73.6, 1531.0], [73.7, 1533.0], [73.8, 1535.0], [73.9, 1538.0], [74.0, 1541.0], [74.1, 1543.0], [74.2, 1544.0], [74.3, 1544.0], [74.4, 1547.0], [74.5, 1548.0], [74.6, 1550.0], [74.7, 1552.0], [74.8, 1555.0], [74.9, 1557.0], [75.0, 1559.0], [75.1, 1561.0], [75.2, 1564.0], [75.3, 1565.0], [75.4, 1567.0], [75.5, 1569.0], [75.6, 1571.0], [75.7, 1573.0], [75.8, 1575.0], [75.9, 1576.0], [76.0, 1578.0], [76.1, 1581.0], [76.2, 1582.0], [76.3, 1584.0], [76.4, 1587.0], [76.5, 1589.0], [76.6, 1590.0], [76.7, 1592.0], [76.8, 1595.0], [76.9, 1597.0], [77.0, 1600.0], [77.1, 1602.0], [77.2, 1604.0], [77.3, 1606.0], [77.4, 1608.0], [77.5, 1609.0], [77.6, 1612.0], [77.7, 1615.0], [77.8, 1617.0], [77.9, 1620.0], [78.0, 1622.0], [78.1, 1624.0], [78.2, 1626.0], [78.3, 1627.0], [78.4, 1630.0], [78.5, 1631.0], [78.6, 1633.0], [78.7, 1636.0], [78.8, 1637.0], [78.9, 1639.0], [79.0, 1643.0], [79.1, 1645.0], [79.2, 1647.0], [79.3, 1648.0], [79.4, 1650.0], [79.5, 1653.0], [79.6, 1654.0], [79.7, 1657.0], [79.8, 1658.0], [79.9, 1660.0], [80.0, 1663.0], [80.1, 1665.0], [80.2, 1667.0], [80.3, 1670.0], [80.4, 1672.0], [80.5, 1675.0], [80.6, 1679.0], [80.7, 1681.0], [80.8, 1685.0], [80.9, 1686.0], [81.0, 1688.0], [81.1, 1691.0], [81.2, 1693.0], [81.3, 1695.0], [81.4, 1698.0], [81.5, 1700.0], [81.6, 1702.0], [81.7, 1704.0], [81.8, 1707.0], [81.9, 1710.0], [82.0, 1712.0], [82.1, 1715.0], [82.2, 1718.0], [82.3, 1720.0], [82.4, 1722.0], [82.5, 1724.0], [82.6, 1727.0], [82.7, 1730.0], [82.8, 1734.0], [82.9, 1737.0], [83.0, 1740.0], [83.1, 1744.0], [83.2, 1745.0], [83.3, 1748.0], [83.4, 1750.0], [83.5, 1753.0], [83.6, 1756.0], [83.7, 1758.0], [83.8, 1759.0], [83.9, 1763.0], [84.0, 1767.0], [84.1, 1770.0], [84.2, 1773.0], [84.3, 1775.0], [84.4, 1777.0], [84.5, 1780.0], [84.6, 1782.0], [84.7, 1785.0], [84.8, 1788.0], [84.9, 1789.0], [85.0, 1792.0], [85.1, 1795.0], [85.2, 1797.0], [85.3, 1800.0], [85.4, 1803.0], [85.5, 1806.0], [85.6, 1808.0], [85.7, 1810.0], [85.8, 1813.0], [85.9, 1816.0], [86.0, 1819.0], [86.1, 1821.0], [86.2, 1824.0], [86.3, 1828.0], [86.4, 1831.0], [86.5, 1835.0], [86.6, 1837.0], [86.7, 1839.0], [86.8, 1844.0], [86.9, 1846.0], [87.0, 1849.0], [87.1, 1852.0], [87.2, 1854.0], [87.3, 1857.0], [87.4, 1859.0], [87.5, 1862.0], [87.6, 1866.0], [87.7, 1869.0], [87.8, 1872.0], [87.9, 1875.0], [88.0, 1879.0], [88.1, 1881.0], [88.2, 1887.0], [88.3, 1889.0], [88.4, 1892.0], [88.5, 1895.0], [88.6, 1897.0], [88.7, 1901.0], [88.8, 1906.0], [88.9, 1909.0], [89.0, 1913.0], [89.1, 1918.0], [89.2, 1920.0], [89.3, 1923.0], [89.4, 1928.0], [89.5, 1933.0], [89.6, 1938.0], [89.7, 1943.0], [89.8, 1946.0], [89.9, 1950.0], [90.0, 1956.0], [90.1, 1959.0], [90.2, 1965.0], [90.3, 1972.0], [90.4, 1976.0], [90.5, 1980.0], [90.6, 1984.0], [90.7, 1988.0], [90.8, 1991.0], [90.9, 1996.0], [91.0, 2002.0], [91.1, 2007.0], [91.2, 2010.0], [91.3, 2014.0], [91.4, 2017.0], [91.5, 2022.0], [91.6, 2026.0], [91.7, 2030.0], [91.8, 2037.0], [91.9, 2041.0], [92.0, 2044.0], [92.1, 2048.0], [92.2, 2051.0], [92.3, 2054.0], [92.4, 2058.0], [92.5, 2063.0], [92.6, 2066.0], [92.7, 2069.0], [92.8, 2073.0], [92.9, 2079.0], [93.0, 2085.0], [93.1, 2089.0], [93.2, 2092.0], [93.3, 2096.0], [93.4, 2102.0], [93.5, 2107.0], [93.6, 2113.0], [93.7, 2120.0], [93.8, 2123.0], [93.9, 2127.0], [94.0, 2133.0], [94.1, 2140.0], [94.2, 2144.0], [94.3, 2153.0], [94.4, 2160.0], [94.5, 2166.0], [94.6, 2172.0], [94.7, 2176.0], [94.8, 2185.0], [94.9, 2191.0], [95.0, 2198.0], [95.1, 2206.0], [95.2, 2213.0], [95.3, 2217.0], [95.4, 2227.0], [95.5, 2234.0], [95.6, 2243.0], [95.7, 2250.0], [95.8, 2260.0], [95.9, 2265.0], [96.0, 2277.0], [96.1, 2285.0], [96.2, 2293.0], [96.3, 2298.0], [96.4, 2312.0], [96.5, 2317.0], [96.6, 2328.0], [96.7, 2338.0], [96.8, 2349.0], [96.9, 2362.0], [97.0, 2372.0], [97.1, 2391.0], [97.2, 2398.0], [97.3, 2406.0], [97.4, 2420.0], [97.5, 2428.0], [97.6, 2440.0], [97.7, 2453.0], [97.8, 2465.0], [97.9, 2486.0], [98.0, 2502.0], [98.1, 2519.0], [98.2, 2534.0], [98.3, 2549.0], [98.4, 2564.0], [98.5, 2577.0], [98.6, 2587.0], [98.7, 2616.0], [98.8, 2642.0], [98.9, 2659.0], [99.0, 2680.0], [99.1, 2705.0], [99.2, 2734.0], [99.3, 2767.0], [99.4, 2814.0], [99.5, 2882.0], [99.6, 2953.0], [99.7, 3075.0], [99.8, 3247.0], [99.9, 3452.0], [100.0, 4534.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 150.0], [0.1, 150.0], [0.2, 150.0], [0.3, 150.0], [0.4, 150.0], [0.5, 150.0], [0.6, 150.0], [0.7, 150.0], [0.8, 150.0], [0.9, 150.0], [1.0, 150.0], [1.1, 150.0], [1.2, 150.0], [1.3, 150.0], [1.4, 150.0], [1.5, 150.0], [1.6, 150.0], [1.7, 152.0], [1.8, 152.0], [1.9, 152.0], [2.0, 152.0], [2.1, 152.0], [2.2, 152.0], [2.3, 152.0], [2.4, 152.0], [2.5, 152.0], [2.6, 152.0], [2.7, 152.0], [2.8, 152.0], [2.9, 152.0], [3.0, 152.0], [3.1, 152.0], [3.2, 152.0], [3.3, 152.0], [3.4, 152.0], [3.5, 152.0], [3.6, 152.0], [3.7, 152.0], [3.8, 152.0], [3.9, 152.0], [4.0, 152.0], [4.1, 152.0], [4.2, 154.0], [4.3, 154.0], [4.4, 154.0], [4.5, 154.0], [4.6, 154.0], [4.7, 154.0], [4.8, 154.0], [4.9, 154.0], [5.0, 154.0], [5.1, 154.0], [5.2, 154.0], [5.3, 154.0], [5.4, 154.0], [5.5, 154.0], [5.6, 154.0], [5.7, 154.0], [5.8, 154.0], [5.9, 154.0], [6.0, 154.0], [6.1, 154.0], [6.2, 154.0], [6.3, 154.0], [6.4, 154.0], [6.5, 154.0], [6.6, 154.0], [6.7, 155.0], [6.8, 155.0], [6.9, 155.0], [7.0, 155.0], [7.1, 155.0], [7.2, 155.0], [7.3, 155.0], [7.4, 155.0], [7.5, 155.0], [7.6, 155.0], [7.7, 155.0], [7.8, 155.0], [7.9, 155.0], [8.0, 155.0], [8.1, 155.0], [8.2, 155.0], [8.3, 155.0], [8.4, 155.0], [8.5, 155.0], [8.6, 155.0], [8.7, 155.0], [8.8, 155.0], [8.9, 155.0], [9.0, 155.0], [9.1, 155.0], [9.2, 156.0], [9.3, 156.0], [9.4, 156.0], [9.5, 156.0], [9.6, 156.0], [9.7, 156.0], [9.8, 156.0], [9.9, 156.0], [10.0, 156.0], [10.1, 157.0], [10.2, 157.0], [10.3, 157.0], [10.4, 157.0], [10.5, 157.0], [10.6, 157.0], [10.7, 157.0], [10.8, 157.0], [10.9, 157.0], [11.0, 157.0], [11.1, 157.0], [11.2, 157.0], [11.3, 157.0], [11.4, 157.0], [11.5, 157.0], [11.6, 157.0], [11.7, 157.0], [11.8, 157.0], [11.9, 157.0], [12.0, 157.0], [12.1, 157.0], [12.2, 157.0], [12.3, 157.0], [12.4, 157.0], [12.5, 157.0], [12.6, 158.0], [12.7, 158.0], [12.8, 158.0], [12.9, 158.0], [13.0, 158.0], [13.1, 158.0], [13.2, 158.0], [13.3, 158.0], [13.4, 158.0], [13.5, 158.0], [13.6, 158.0], [13.7, 158.0], [13.8, 158.0], [13.9, 158.0], [14.0, 158.0], [14.1, 158.0], [14.2, 158.0], [14.3, 158.0], [14.4, 158.0], [14.5, 158.0], [14.6, 158.0], [14.7, 158.0], [14.8, 158.0], [14.9, 158.0], [15.0, 158.0], [15.1, 159.0], [15.2, 159.0], [15.3, 159.0], [15.4, 159.0], [15.5, 159.0], [15.6, 159.0], [15.7, 159.0], [15.8, 159.0], [15.9, 160.0], [16.0, 160.0], [16.1, 160.0], [16.2, 160.0], [16.3, 160.0], [16.4, 160.0], [16.5, 160.0], [16.6, 160.0], [16.7, 160.0], [16.8, 160.0], [16.9, 160.0], [17.0, 160.0], [17.1, 160.0], [17.2, 160.0], [17.3, 160.0], [17.4, 160.0], [17.5, 160.0], [17.6, 160.0], [17.7, 160.0], [17.8, 160.0], [17.9, 160.0], [18.0, 160.0], [18.1, 160.0], [18.2, 160.0], [18.3, 160.0], [18.4, 160.0], [18.5, 160.0], [18.6, 160.0], [18.7, 160.0], [18.8, 160.0], [18.9, 160.0], [19.0, 160.0], [19.1, 160.0], [19.2, 160.0], [19.3, 160.0], [19.4, 160.0], [19.5, 160.0], [19.6, 160.0], [19.7, 160.0], [19.8, 160.0], [19.9, 160.0], [20.0, 160.0], [20.1, 161.0], [20.2, 161.0], [20.3, 161.0], [20.4, 161.0], [20.5, 161.0], [20.6, 161.0], [20.7, 161.0], [20.8, 161.0], [20.9, 161.0], [21.0, 161.0], [21.1, 161.0], [21.2, 161.0], [21.3, 161.0], [21.4, 161.0], [21.5, 161.0], [21.6, 161.0], [21.7, 161.0], [21.8, 161.0], [21.9, 161.0], [22.0, 161.0], [22.1, 161.0], [22.2, 161.0], [22.3, 161.0], [22.4, 161.0], [22.5, 161.0], [22.6, 161.0], [22.7, 161.0], [22.8, 161.0], [22.9, 161.0], [23.0, 161.0], [23.1, 161.0], [23.2, 161.0], [23.3, 161.0], [23.4, 161.0], [23.5, 161.0], [23.6, 161.0], [23.7, 161.0], [23.8, 161.0], [23.9, 161.0], [24.0, 161.0], [24.1, 161.0], [24.2, 161.0], [24.3, 161.0], [24.4, 161.0], [24.5, 161.0], [24.6, 161.0], [24.7, 161.0], [24.8, 161.0], [24.9, 161.0], [25.0, 161.0], [25.1, 161.0], [25.2, 161.0], [25.3, 161.0], [25.4, 161.0], [25.5, 161.0], [25.6, 161.0], [25.7, 161.0], [25.8, 161.0], [25.9, 161.0], [26.0, 161.0], [26.1, 161.0], [26.2, 161.0], [26.3, 161.0], [26.4, 161.0], [26.5, 161.0], [26.6, 161.0], [26.7, 161.0], [26.8, 161.0], [26.9, 161.0], [27.0, 161.0], [27.1, 161.0], [27.2, 161.0], [27.3, 161.0], [27.4, 161.0], [27.5, 161.0], [27.6, 162.0], [27.7, 162.0], [27.8, 162.0], [27.9, 162.0], [28.0, 162.0], [28.1, 162.0], [28.2, 162.0], [28.3, 162.0], [28.4, 162.0], [28.5, 162.0], [28.6, 162.0], [28.7, 162.0], [28.8, 162.0], [28.9, 162.0], [29.0, 162.0], [29.1, 162.0], [29.2, 162.0], [29.3, 162.0], [29.4, 162.0], [29.5, 162.0], [29.6, 162.0], [29.7, 162.0], [29.8, 162.0], [29.9, 162.0], [30.0, 162.0], [30.1, 162.0], [30.2, 162.0], [30.3, 162.0], [30.4, 162.0], [30.5, 162.0], [30.6, 162.0], [30.7, 162.0], [30.8, 162.0], [30.9, 162.0], [31.0, 162.0], [31.1, 162.0], [31.2, 162.0], [31.3, 162.0], [31.4, 162.0], [31.5, 162.0], [31.6, 162.0], [31.7, 162.0], [31.8, 162.0], [31.9, 162.0], [32.0, 162.0], [32.1, 162.0], [32.2, 162.0], [32.3, 162.0], [32.4, 162.0], [32.5, 163.0], [32.6, 163.0], [32.7, 163.0], [32.8, 163.0], [32.9, 163.0], [33.0, 163.0], [33.1, 163.0], [33.2, 163.0], [33.3, 163.0], [33.4, 163.0], [33.5, 163.0], [33.6, 163.0], [33.7, 163.0], [33.8, 163.0], [33.9, 163.0], [34.0, 163.0], [34.1, 163.0], [34.2, 164.0], [34.3, 164.0], [34.4, 164.0], [34.5, 164.0], [34.6, 164.0], [34.7, 164.0], [34.8, 164.0], [34.9, 164.0], [35.0, 164.0], [35.1, 164.0], [35.2, 164.0], [35.3, 164.0], [35.4, 164.0], [35.5, 164.0], [35.6, 164.0], [35.7, 164.0], [35.8, 164.0], [35.9, 164.0], [36.0, 164.0], [36.1, 164.0], [36.2, 164.0], [36.3, 164.0], [36.4, 164.0], [36.5, 164.0], [36.6, 164.0], [36.7, 164.0], [36.8, 164.0], [36.9, 164.0], [37.0, 164.0], [37.1, 164.0], [37.2, 164.0], [37.3, 164.0], [37.4, 164.0], [37.5, 164.0], [37.6, 164.0], [37.7, 164.0], [37.8, 164.0], [37.9, 164.0], [38.0, 164.0], [38.1, 164.0], [38.2, 164.0], [38.3, 164.0], [38.4, 164.0], [38.5, 164.0], [38.6, 164.0], [38.7, 164.0], [38.8, 164.0], [38.9, 164.0], [39.0, 164.0], [39.1, 164.0], [39.2, 164.0], [39.3, 164.0], [39.4, 164.0], [39.5, 164.0], [39.6, 164.0], [39.7, 164.0], [39.8, 164.0], [39.9, 164.0], [40.0, 164.0], [40.1, 164.0], [40.2, 164.0], [40.3, 164.0], [40.4, 164.0], [40.5, 164.0], [40.6, 164.0], [40.7, 164.0], [40.8, 164.0], [40.9, 165.0], [41.0, 165.0], [41.1, 165.0], [41.2, 165.0], [41.3, 165.0], [41.4, 165.0], [41.5, 165.0], [41.6, 165.0], [41.7, 165.0], [41.8, 165.0], [41.9, 165.0], [42.0, 165.0], [42.1, 165.0], [42.2, 165.0], [42.3, 165.0], [42.4, 165.0], [42.5, 165.0], [42.6, 165.0], [42.7, 165.0], [42.8, 165.0], [42.9, 165.0], [43.0, 165.0], [43.1, 165.0], [43.2, 165.0], [43.3, 165.0], [43.4, 165.0], [43.5, 165.0], [43.6, 165.0], [43.7, 165.0], [43.8, 165.0], [43.9, 165.0], [44.0, 165.0], [44.1, 165.0], [44.2, 165.0], [44.3, 165.0], [44.4, 165.0], [44.5, 165.0], [44.6, 165.0], [44.7, 165.0], [44.8, 165.0], [44.9, 165.0], [45.0, 165.0], [45.1, 165.0], [45.2, 165.0], [45.3, 165.0], [45.4, 165.0], [45.5, 165.0], [45.6, 165.0], [45.7, 165.0], [45.8, 165.0], [45.9, 165.0], [46.0, 165.0], [46.1, 165.0], [46.2, 165.0], [46.3, 165.0], [46.4, 165.0], [46.5, 165.0], [46.6, 165.0], [46.7, 166.0], [46.8, 166.0], [46.9, 166.0], [47.0, 166.0], [47.1, 166.0], [47.2, 166.0], [47.3, 166.0], [47.4, 166.0], [47.5, 166.0], [47.6, 166.0], [47.7, 166.0], [47.8, 166.0], [47.9, 166.0], [48.0, 166.0], [48.1, 166.0], [48.2, 166.0], [48.3, 166.0], [48.4, 166.0], [48.5, 166.0], [48.6, 166.0], [48.7, 166.0], [48.8, 166.0], [48.9, 166.0], [49.0, 166.0], [49.1, 166.0], [49.2, 167.0], [49.3, 167.0], [49.4, 167.0], [49.5, 167.0], [49.6, 167.0], [49.7, 167.0], [49.8, 167.0], [49.9, 167.0], [50.0, 167.0], [50.1, 167.0], [50.2, 167.0], [50.3, 167.0], [50.4, 167.0], [50.5, 167.0], [50.6, 167.0], [50.7, 167.0], [50.8, 167.0], [50.9, 168.0], [51.0, 168.0], [51.1, 168.0], [51.2, 168.0], [51.3, 168.0], [51.4, 168.0], [51.5, 168.0], [51.6, 168.0], [51.7, 168.0], [51.8, 168.0], [51.9, 168.0], [52.0, 168.0], [52.1, 168.0], [52.2, 168.0], [52.3, 168.0], [52.4, 168.0], [52.5, 168.0], [52.6, 168.0], [52.7, 168.0], [52.8, 168.0], [52.9, 168.0], [53.0, 168.0], [53.1, 168.0], [53.2, 168.0], [53.3, 168.0], [53.4, 169.0], [53.5, 169.0], [53.6, 169.0], [53.7, 169.0], [53.8, 169.0], [53.9, 169.0], [54.0, 169.0], [54.1, 169.0], [54.2, 169.0], [54.3, 169.0], [54.4, 169.0], [54.5, 169.0], [54.6, 169.0], [54.7, 169.0], [54.8, 169.0], [54.9, 169.0], [55.0, 169.0], [55.1, 169.0], [55.2, 169.0], [55.3, 169.0], [55.4, 169.0], [55.5, 169.0], [55.6, 169.0], [55.7, 169.0], [55.8, 169.0], [55.9, 169.0], [56.0, 169.0], [56.1, 169.0], [56.2, 169.0], [56.3, 169.0], [56.4, 169.0], [56.5, 169.0], [56.6, 169.0], [56.7, 169.0], [56.8, 169.0], [56.9, 169.0], [57.0, 169.0], [57.1, 169.0], [57.2, 169.0], [57.3, 169.0], [57.4, 169.0], [57.5, 169.0], [57.6, 169.0], [57.7, 169.0], [57.8, 169.0], [57.9, 169.0], [58.0, 169.0], [58.1, 169.0], [58.2, 169.0], [58.3, 169.0], [58.4, 170.0], [58.5, 170.0], [58.6, 170.0], [58.7, 170.0], [58.8, 170.0], [58.9, 170.0], [59.0, 170.0], [59.1, 170.0], [59.2, 170.0], [59.3, 170.0], [59.4, 170.0], [59.5, 170.0], [59.6, 170.0], [59.7, 170.0], [59.8, 170.0], [59.9, 170.0], [60.0, 170.0], [60.1, 170.0], [60.2, 170.0], [60.3, 170.0], [60.4, 170.0], [60.5, 170.0], [60.6, 170.0], [60.7, 170.0], [60.8, 170.0], [60.9, 171.0], [61.0, 171.0], [61.1, 171.0], [61.2, 171.0], [61.3, 171.0], [61.4, 171.0], [61.5, 171.0], [61.6, 171.0], [61.7, 172.0], [61.8, 172.0], [61.9, 172.0], [62.0, 172.0], [62.1, 172.0], [62.2, 172.0], [62.3, 172.0], [62.4, 172.0], [62.5, 174.0], [62.6, 174.0], [62.7, 174.0], [62.8, 174.0], [62.9, 174.0], [63.0, 174.0], [63.1, 174.0], [63.2, 174.0], [63.3, 174.0], [63.4, 174.0], [63.5, 174.0], [63.6, 174.0], [63.7, 174.0], [63.8, 174.0], [63.9, 174.0], [64.0, 174.0], [64.1, 174.0], [64.2, 174.0], [64.3, 174.0], [64.4, 174.0], [64.5, 174.0], [64.6, 174.0], [64.7, 174.0], [64.8, 174.0], [64.9, 174.0], [65.0, 175.0], [65.1, 175.0], [65.2, 175.0], [65.3, 175.0], [65.4, 175.0], [65.5, 175.0], [65.6, 175.0], [65.7, 175.0], [65.8, 175.0], [65.9, 175.0], [66.0, 175.0], [66.1, 175.0], [66.2, 175.0], [66.3, 175.0], [66.4, 175.0], [66.5, 175.0], [66.6, 175.0], [66.7, 176.0], [66.8, 176.0], [66.9, 176.0], [67.0, 176.0], [67.1, 176.0], [67.2, 176.0], [67.3, 176.0], [67.4, 176.0], [67.5, 178.0], [67.6, 178.0], [67.7, 178.0], [67.8, 178.0], [67.9, 178.0], [68.0, 178.0], [68.1, 178.0], [68.2, 178.0], [68.3, 178.0], [68.4, 179.0], [68.5, 179.0], [68.6, 179.0], [68.7, 179.0], [68.8, 179.0], [68.9, 179.0], [69.0, 179.0], [69.1, 179.0], [69.2, 179.0], [69.3, 179.0], [69.4, 179.0], [69.5, 179.0], [69.6, 179.0], [69.7, 179.0], [69.8, 179.0], [69.9, 179.0], [70.0, 179.0], [70.1, 179.0], [70.2, 179.0], [70.3, 179.0], [70.4, 179.0], [70.5, 179.0], [70.6, 179.0], [70.7, 179.0], [70.8, 179.0], [70.9, 179.0], [71.0, 179.0], [71.1, 179.0], [71.2, 179.0], [71.3, 179.0], [71.4, 179.0], [71.5, 179.0], [71.6, 179.0], [71.7, 179.0], [71.8, 179.0], [71.9, 179.0], [72.0, 179.0], [72.1, 179.0], [72.2, 179.0], [72.3, 179.0], [72.4, 179.0], [72.5, 179.0], [72.6, 179.0], [72.7, 179.0], [72.8, 179.0], [72.9, 179.0], [73.0, 179.0], [73.1, 179.0], [73.2, 179.0], [73.3, 179.0], [73.4, 179.0], [73.5, 179.0], [73.6, 179.0], [73.7, 179.0], [73.8, 179.0], [73.9, 179.0], [74.0, 179.0], [74.1, 179.0], [74.2, 179.0], [74.3, 179.0], [74.4, 179.0], [74.5, 179.0], [74.6, 179.0], [74.7, 179.0], [74.8, 179.0], [74.9, 179.0], [75.0, 179.0], [75.1, 179.0], [75.2, 179.0], [75.3, 179.0], [75.4, 179.0], [75.5, 179.0], [75.6, 179.0], [75.7, 179.0], [75.8, 179.0], [75.9, 180.0], [76.0, 180.0], [76.1, 180.0], [76.2, 180.0], [76.3, 180.0], [76.4, 180.0], [76.5, 180.0], [76.6, 180.0], [76.7, 181.0], [76.8, 181.0], [76.9, 181.0], [77.0, 181.0], [77.1, 181.0], [77.2, 181.0], [77.3, 181.0], [77.4, 181.0], [77.5, 181.0], [77.6, 181.0], [77.7, 181.0], [77.8, 181.0], [77.9, 181.0], [78.0, 181.0], [78.1, 181.0], [78.2, 181.0], [78.3, 181.0], [78.4, 183.0], [78.5, 183.0], [78.6, 183.0], [78.7, 183.0], [78.8, 183.0], [78.9, 183.0], [79.0, 183.0], [79.1, 183.0], [79.2, 183.0], [79.3, 183.0], [79.4, 183.0], [79.5, 183.0], [79.6, 183.0], [79.7, 183.0], [79.8, 183.0], [79.9, 183.0], [80.0, 183.0], [80.1, 183.0], [80.2, 183.0], [80.3, 183.0], [80.4, 183.0], [80.5, 183.0], [80.6, 183.0], [80.7, 183.0], [80.8, 183.0], [80.9, 184.0], [81.0, 184.0], [81.1, 184.0], [81.2, 184.0], [81.3, 184.0], [81.4, 184.0], [81.5, 184.0], [81.6, 184.0], [81.7, 185.0], [81.8, 185.0], [81.9, 185.0], [82.0, 185.0], [82.1, 185.0], [82.2, 185.0], [82.3, 185.0], [82.4, 185.0], [82.5, 185.0], [82.6, 185.0], [82.7, 185.0], [82.8, 185.0], [82.9, 185.0], [83.0, 185.0], [83.1, 185.0], [83.2, 185.0], [83.3, 185.0], [83.4, 186.0], [83.5, 186.0], [83.6, 186.0], [83.7, 186.0], [83.8, 186.0], [83.9, 186.0], [84.0, 186.0], [84.1, 186.0], [84.2, 189.0], [84.3, 189.0], [84.4, 189.0], [84.5, 189.0], [84.6, 189.0], [84.7, 189.0], [84.8, 189.0], [84.9, 189.0], [85.0, 191.0], [85.1, 191.0], [85.2, 191.0], [85.3, 191.0], [85.4, 191.0], [85.5, 191.0], [85.6, 191.0], [85.7, 191.0], [85.8, 191.0], [85.9, 191.0], [86.0, 191.0], [86.1, 191.0], [86.2, 191.0], [86.3, 191.0], [86.4, 191.0], [86.5, 191.0], [86.6, 191.0], [86.7, 192.0], [86.8, 192.0], [86.9, 192.0], [87.0, 192.0], [87.1, 192.0], [87.2, 192.0], [87.3, 192.0], [87.4, 192.0], [87.5, 194.0], [87.6, 194.0], [87.7, 194.0], [87.8, 194.0], [87.9, 194.0], [88.0, 194.0], [88.1, 194.0], [88.2, 194.0], [88.3, 194.0], [88.4, 195.0], [88.5, 195.0], [88.6, 195.0], [88.7, 195.0], [88.8, 195.0], [88.9, 195.0], [89.0, 195.0], [89.1, 195.0], [89.2, 196.0], [89.3, 196.0], [89.4, 196.0], [89.5, 196.0], [89.6, 196.0], [89.7, 196.0], [89.8, 196.0], [89.9, 196.0], [90.0, 197.0], [90.1, 197.0], [90.2, 197.0], [90.3, 197.0], [90.4, 197.0], [90.5, 197.0], [90.6, 197.0], [90.7, 197.0], [90.8, 197.0], [90.9, 197.0], [91.0, 197.0], [91.1, 197.0], [91.2, 197.0], [91.3, 197.0], [91.4, 197.0], [91.5, 197.0], [91.6, 197.0], [91.7, 202.0], [91.8, 202.0], [91.9, 202.0], [92.0, 202.0], [92.1, 202.0], [92.2, 202.0], [92.3, 202.0], [92.4, 202.0], [92.5, 207.0], [92.6, 207.0], [92.7, 207.0], [92.8, 207.0], [92.9, 207.0], [93.0, 207.0], [93.1, 207.0], [93.2, 207.0], [93.3, 207.0], [93.4, 210.0], [93.5, 210.0], [93.6, 210.0], [93.7, 210.0], [93.8, 210.0], [93.9, 210.0], [94.0, 210.0], [94.1, 210.0], [94.2, 213.0], [94.3, 213.0], [94.4, 213.0], [94.5, 213.0], [94.6, 213.0], [94.7, 213.0], [94.8, 213.0], [94.9, 213.0], [95.0, 214.0], [95.1, 214.0], [95.2, 214.0], [95.3, 214.0], [95.4, 214.0], [95.5, 214.0], [95.6, 214.0], [95.7, 214.0], [95.8, 214.0], [95.9, 226.0], [96.0, 226.0], [96.1, 226.0], [96.2, 226.0], [96.3, 226.0], [96.4, 226.0], [96.5, 226.0], [96.6, 226.0], [96.7, 236.0], [96.8, 236.0], [96.9, 236.0], [97.0, 236.0], [97.1, 236.0], [97.2, 236.0], [97.3, 236.0], [97.4, 236.0], [97.5, 267.0], [97.6, 267.0], [97.7, 267.0], [97.8, 267.0], [97.9, 267.0], [98.0, 267.0], [98.1, 267.0], [98.2, 267.0], [98.3, 267.0], [98.4, 273.0], [98.5, 273.0], [98.6, 273.0], [98.7, 273.0], [98.8, 273.0], [98.9, 273.0], [99.0, 273.0], [99.1, 273.0], [99.2, 362.0], [99.3, 362.0], [99.4, 362.0], [99.5, 362.0], [99.6, 362.0], [99.7, 362.0], [99.8, 362.0], [99.9, 362.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 6.0], [0.1, 10.0], [0.2, 19.0], [0.3, 31.0], [0.4, 33.0], [0.5, 34.0], [0.6, 34.0], [0.7, 35.0], [0.8, 35.0], [0.9, 35.0], [1.0, 36.0], [1.1, 36.0], [1.2, 37.0], [1.3, 37.0], [1.4, 38.0], [1.5, 38.0], [1.6, 38.0], [1.7, 39.0], [1.8, 39.0], [1.9, 39.0], [2.0, 39.0], [2.1, 40.0], [2.2, 40.0], [2.3, 40.0], [2.4, 40.0], [2.5, 40.0], [2.6, 41.0], [2.7, 41.0], [2.8, 41.0], [2.9, 41.0], [3.0, 41.0], [3.1, 42.0], [3.2, 42.0], [3.3, 42.0], [3.4, 42.0], [3.5, 42.0], [3.6, 42.0], [3.7, 42.0], [3.8, 43.0], [3.9, 43.0], [4.0, 43.0], [4.1, 43.0], [4.2, 43.0], [4.3, 43.0], [4.4, 44.0], [4.5, 44.0], [4.6, 44.0], [4.7, 44.0], [4.8, 44.0], [4.9, 45.0], [5.0, 45.0], [5.1, 45.0], [5.2, 45.0], [5.3, 45.0], [5.4, 45.0], [5.5, 45.0], [5.6, 46.0], [5.7, 46.0], [5.8, 46.0], [5.9, 46.0], [6.0, 46.0], [6.1, 46.0], [6.2, 47.0], [6.3, 47.0], [6.4, 47.0], [6.5, 47.0], [6.6, 47.0], [6.7, 47.0], [6.8, 47.0], [6.9, 48.0], [7.0, 48.0], [7.1, 48.0], [7.2, 48.0], [7.3, 48.0], [7.4, 48.0], [7.5, 49.0], [7.6, 49.0], [7.7, 49.0], [7.8, 49.0], [7.9, 49.0], [8.0, 49.0], [8.1, 50.0], [8.2, 50.0], [8.3, 50.0], [8.4, 50.0], [8.5, 50.0], [8.6, 51.0], [8.7, 51.0], [8.8, 51.0], [8.9, 51.0], [9.0, 51.0], [9.1, 51.0], [9.2, 51.0], [9.3, 52.0], [9.4, 52.0], [9.5, 52.0], [9.6, 52.0], [9.7, 53.0], [9.8, 53.0], [9.9, 53.0], [10.0, 53.0], [10.1, 53.0], [10.2, 54.0], [10.3, 54.0], [10.4, 54.0], [10.5, 54.0], [10.6, 55.0], [10.7, 55.0], [10.8, 55.0], [10.9, 55.0], [11.0, 56.0], [11.1, 56.0], [11.2, 56.0], [11.3, 57.0], [11.4, 57.0], [11.5, 57.0], [11.6, 58.0], [11.7, 58.0], [11.8, 58.0], [11.9, 59.0], [12.0, 59.0], [12.1, 59.0], [12.2, 60.0], [12.3, 60.0], [12.4, 61.0], [12.5, 61.0], [12.6, 61.0], [12.7, 62.0], [12.8, 62.0], [12.9, 63.0], [13.0, 63.0], [13.1, 64.0], [13.2, 65.0], [13.3, 65.0], [13.4, 66.0], [13.5, 67.0], [13.6, 67.0], [13.7, 68.0], [13.8, 69.0], [13.9, 69.0], [14.0, 70.0], [14.1, 71.0], [14.2, 72.0], [14.3, 74.0], [14.4, 75.0], [14.5, 76.0], [14.6, 78.0], [14.7, 80.0], [14.8, 81.0], [14.9, 84.0], [15.0, 86.0], [15.1, 90.0], [15.2, 93.0], [15.3, 97.0], [15.4, 100.0], [15.5, 104.0], [15.6, 108.0], [15.7, 113.0], [15.8, 120.0], [15.9, 128.0], [16.0, 135.0], [16.1, 144.0], [16.2, 154.0], [16.3, 164.0], [16.4, 176.0], [16.5, 186.0], [16.6, 193.0], [16.7, 201.0], [16.8, 215.0], [16.9, 227.0], [17.0, 240.0], [17.1, 259.0], [17.2, 279.0], [17.3, 292.0], [17.4, 312.0], [17.5, 325.0], [17.6, 336.0], [17.7, 345.0], [17.8, 360.0], [17.9, 367.0], [18.0, 377.0], [18.1, 385.0], [18.2, 392.0], [18.3, 398.0], [18.4, 410.0], [18.5, 417.0], [18.6, 425.0], [18.7, 438.0], [18.8, 446.0], [18.9, 450.0], [19.0, 456.0], [19.1, 460.0], [19.2, 466.0], [19.3, 470.0], [19.4, 476.0], [19.5, 485.0], [19.6, 492.0], [19.7, 495.0], [19.8, 502.0], [19.9, 507.0], [20.0, 514.0], [20.1, 517.0], [20.2, 523.0], [20.3, 528.0], [20.4, 533.0], [20.5, 536.0], [20.6, 541.0], [20.7, 546.0], [20.8, 550.0], [20.9, 557.0], [21.0, 561.0], [21.1, 567.0], [21.2, 570.0], [21.3, 573.0], [21.4, 578.0], [21.5, 581.0], [21.6, 584.0], [21.7, 589.0], [21.8, 593.0], [21.9, 597.0], [22.0, 603.0], [22.1, 608.0], [22.2, 611.0], [22.3, 614.0], [22.4, 618.0], [22.5, 621.0], [22.6, 624.0], [22.7, 628.0], [22.8, 631.0], [22.9, 633.0], [23.0, 637.0], [23.1, 638.0], [23.2, 640.0], [23.3, 642.0], [23.4, 645.0], [23.5, 646.0], [23.6, 652.0], [23.7, 656.0], [23.8, 659.0], [23.9, 661.0], [24.0, 666.0], [24.1, 671.0], [24.2, 674.0], [24.3, 677.0], [24.4, 680.0], [24.5, 683.0], [24.6, 686.0], [24.7, 688.0], [24.8, 691.0], [24.9, 694.0], [25.0, 698.0], [25.1, 701.0], [25.2, 703.0], [25.3, 705.0], [25.4, 707.0], [25.5, 710.0], [25.6, 713.0], [25.7, 715.0], [25.8, 718.0], [25.9, 721.0], [26.0, 723.0], [26.1, 725.0], [26.2, 728.0], [26.3, 730.0], [26.4, 732.0], [26.5, 734.0], [26.6, 737.0], [26.7, 741.0], [26.8, 743.0], [26.9, 745.0], [27.0, 747.0], [27.1, 749.0], [27.2, 751.0], [27.3, 752.0], [27.4, 754.0], [27.5, 757.0], [27.6, 759.0], [27.7, 762.0], [27.8, 763.0], [27.9, 765.0], [28.0, 767.0], [28.1, 769.0], [28.2, 771.0], [28.3, 773.0], [28.4, 776.0], [28.5, 778.0], [28.6, 781.0], [28.7, 782.0], [28.8, 786.0], [28.9, 788.0], [29.0, 790.0], [29.1, 792.0], [29.2, 792.0], [29.3, 794.0], [29.4, 797.0], [29.5, 799.0], [29.6, 802.0], [29.7, 804.0], [29.8, 807.0], [29.9, 809.0], [30.0, 811.0], [30.1, 812.0], [30.2, 814.0], [30.3, 817.0], [30.4, 820.0], [30.5, 821.0], [30.6, 823.0], [30.7, 825.0], [30.8, 828.0], [30.9, 830.0], [31.0, 831.0], [31.1, 834.0], [31.2, 836.0], [31.3, 837.0], [31.4, 839.0], [31.5, 841.0], [31.6, 843.0], [31.7, 845.0], [31.8, 848.0], [31.9, 850.0], [32.0, 852.0], [32.1, 853.0], [32.2, 854.0], [32.3, 856.0], [32.4, 858.0], [32.5, 860.0], [32.6, 863.0], [32.7, 865.0], [32.8, 866.0], [32.9, 868.0], [33.0, 870.0], [33.1, 871.0], [33.2, 874.0], [33.3, 876.0], [33.4, 879.0], [33.5, 881.0], [33.6, 882.0], [33.7, 885.0], [33.8, 886.0], [33.9, 888.0], [34.0, 890.0], [34.1, 892.0], [34.2, 893.0], [34.3, 895.0], [34.4, 897.0], [34.5, 898.0], [34.6, 900.0], [34.7, 901.0], [34.8, 903.0], [34.9, 906.0], [35.0, 908.0], [35.1, 911.0], [35.2, 913.0], [35.3, 914.0], [35.4, 916.0], [35.5, 917.0], [35.6, 918.0], [35.7, 920.0], [35.8, 922.0], [35.9, 924.0], [36.0, 925.0], [36.1, 927.0], [36.2, 928.0], [36.3, 929.0], [36.4, 931.0], [36.5, 932.0], [36.6, 934.0], [36.7, 936.0], [36.8, 939.0], [36.9, 941.0], [37.0, 942.0], [37.1, 943.0], [37.2, 945.0], [37.3, 947.0], [37.4, 949.0], [37.5, 951.0], [37.6, 953.0], [37.7, 954.0], [37.8, 955.0], [37.9, 956.0], [38.0, 957.0], [38.1, 960.0], [38.2, 962.0], [38.3, 963.0], [38.4, 965.0], [38.5, 966.0], [38.6, 967.0], [38.7, 969.0], [38.8, 971.0], [38.9, 973.0], [39.0, 975.0], [39.1, 978.0], [39.2, 979.0], [39.3, 980.0], [39.4, 982.0], [39.5, 983.0], [39.6, 984.0], [39.7, 985.0], [39.8, 986.0], [39.9, 988.0], [40.0, 991.0], [40.1, 993.0], [40.2, 995.0], [40.3, 996.0], [40.4, 998.0], [40.5, 999.0], [40.6, 1001.0], [40.7, 1002.0], [40.8, 1003.0], [40.9, 1005.0], [41.0, 1006.0], [41.1, 1008.0], [41.2, 1009.0], [41.3, 1010.0], [41.4, 1012.0], [41.5, 1013.0], [41.6, 1015.0], [41.7, 1016.0], [41.8, 1018.0], [41.9, 1020.0], [42.0, 1022.0], [42.1, 1022.0], [42.2, 1024.0], [42.3, 1025.0], [42.4, 1027.0], [42.5, 1028.0], [42.6, 1029.0], [42.7, 1029.0], [42.8, 1031.0], [42.9, 1033.0], [43.0, 1034.0], [43.1, 1036.0], [43.2, 1038.0], [43.3, 1039.0], [43.4, 1040.0], [43.5, 1043.0], [43.6, 1044.0], [43.7, 1045.0], [43.8, 1047.0], [43.9, 1048.0], [44.0, 1050.0], [44.1, 1050.0], [44.2, 1053.0], [44.3, 1055.0], [44.4, 1057.0], [44.5, 1059.0], [44.6, 1060.0], [44.7, 1062.0], [44.8, 1064.0], [44.9, 1065.0], [45.0, 1067.0], [45.1, 1069.0], [45.2, 1070.0], [45.3, 1071.0], [45.4, 1073.0], [45.5, 1076.0], [45.6, 1077.0], [45.7, 1079.0], [45.8, 1081.0], [45.9, 1082.0], [46.0, 1084.0], [46.1, 1087.0], [46.2, 1089.0], [46.3, 1090.0], [46.4, 1093.0], [46.5, 1094.0], [46.6, 1095.0], [46.7, 1098.0], [46.8, 1100.0], [46.9, 1102.0], [47.0, 1103.0], [47.1, 1104.0], [47.2, 1106.0], [47.3, 1108.0], [47.4, 1110.0], [47.5, 1112.0], [47.6, 1113.0], [47.7, 1115.0], [47.8, 1116.0], [47.9, 1118.0], [48.0, 1120.0], [48.1, 1121.0], [48.2, 1122.0], [48.3, 1124.0], [48.4, 1125.0], [48.5, 1127.0], [48.6, 1128.0], [48.7, 1130.0], [48.8, 1131.0], [48.9, 1132.0], [49.0, 1134.0], [49.1, 1135.0], [49.2, 1137.0], [49.3, 1138.0], [49.4, 1139.0], [49.5, 1141.0], [49.6, 1143.0], [49.7, 1144.0], [49.8, 1145.0], [49.9, 1146.0], [50.0, 1147.0], [50.1, 1149.0], [50.2, 1150.0], [50.3, 1152.0], [50.4, 1154.0], [50.5, 1155.0], [50.6, 1156.0], [50.7, 1157.0], [50.8, 1159.0], [50.9, 1160.0], [51.0, 1162.0], [51.1, 1163.0], [51.2, 1164.0], [51.3, 1166.0], [51.4, 1167.0], [51.5, 1168.0], [51.6, 1170.0], [51.7, 1172.0], [51.8, 1173.0], [51.9, 1175.0], [52.0, 1177.0], [52.1, 1180.0], [52.2, 1181.0], [52.3, 1182.0], [52.4, 1183.0], [52.5, 1185.0], [52.6, 1187.0], [52.7, 1189.0], [52.8, 1190.0], [52.9, 1192.0], [53.0, 1194.0], [53.1, 1195.0], [53.2, 1196.0], [53.3, 1198.0], [53.4, 1199.0], [53.5, 1200.0], [53.6, 1202.0], [53.7, 1203.0], [53.8, 1205.0], [53.9, 1206.0], [54.0, 1209.0], [54.1, 1210.0], [54.2, 1212.0], [54.3, 1213.0], [54.4, 1215.0], [54.5, 1217.0], [54.6, 1219.0], [54.7, 1221.0], [54.8, 1221.0], [54.9, 1223.0], [55.0, 1225.0], [55.1, 1225.0], [55.2, 1227.0], [55.3, 1229.0], [55.4, 1230.0], [55.5, 1232.0], [55.6, 1233.0], [55.7, 1234.0], [55.8, 1235.0], [55.9, 1236.0], [56.0, 1238.0], [56.1, 1239.0], [56.2, 1241.0], [56.3, 1242.0], [56.4, 1244.0], [56.5, 1245.0], [56.6, 1247.0], [56.7, 1248.0], [56.8, 1250.0], [56.9, 1251.0], [57.0, 1253.0], [57.1, 1255.0], [57.2, 1256.0], [57.3, 1257.0], [57.4, 1259.0], [57.5, 1261.0], [57.6, 1262.0], [57.7, 1264.0], [57.8, 1265.0], [57.9, 1266.0], [58.0, 1268.0], [58.1, 1269.0], [58.2, 1270.0], [58.3, 1273.0], [58.4, 1274.0], [58.5, 1275.0], [58.6, 1276.0], [58.7, 1278.0], [58.8, 1280.0], [58.9, 1281.0], [59.0, 1283.0], [59.1, 1285.0], [59.2, 1288.0], [59.3, 1290.0], [59.4, 1292.0], [59.5, 1293.0], [59.6, 1296.0], [59.7, 1298.0], [59.8, 1300.0], [59.9, 1302.0], [60.0, 1304.0], [60.1, 1305.0], [60.2, 1306.0], [60.3, 1308.0], [60.4, 1309.0], [60.5, 1311.0], [60.6, 1312.0], [60.7, 1314.0], [60.8, 1315.0], [60.9, 1317.0], [61.0, 1317.0], [61.1, 1319.0], [61.2, 1320.0], [61.3, 1321.0], [61.4, 1323.0], [61.5, 1325.0], [61.6, 1327.0], [61.7, 1327.0], [61.8, 1329.0], [61.9, 1331.0], [62.0, 1332.0], [62.1, 1334.0], [62.2, 1335.0], [62.3, 1336.0], [62.4, 1337.0], [62.5, 1339.0], [62.6, 1341.0], [62.7, 1343.0], [62.8, 1344.0], [62.9, 1346.0], [63.0, 1348.0], [63.1, 1349.0], [63.2, 1351.0], [63.3, 1351.0], [63.4, 1354.0], [63.5, 1355.0], [63.6, 1357.0], [63.7, 1359.0], [63.8, 1362.0], [63.9, 1364.0], [64.0, 1365.0], [64.1, 1367.0], [64.2, 1368.0], [64.3, 1370.0], [64.4, 1372.0], [64.5, 1374.0], [64.6, 1376.0], [64.7, 1377.0], [64.8, 1379.0], [64.9, 1380.0], [65.0, 1382.0], [65.1, 1383.0], [65.2, 1385.0], [65.3, 1387.0], [65.4, 1388.0], [65.5, 1390.0], [65.6, 1392.0], [65.7, 1394.0], [65.8, 1395.0], [65.9, 1397.0], [66.0, 1399.0], [66.1, 1400.0], [66.2, 1402.0], [66.3, 1404.0], [66.4, 1407.0], [66.5, 1410.0], [66.6, 1411.0], [66.7, 1413.0], [66.8, 1415.0], [66.9, 1416.0], [67.0, 1418.0], [67.1, 1420.0], [67.2, 1422.0], [67.3, 1424.0], [67.4, 1425.0], [67.5, 1428.0], [67.6, 1429.0], [67.7, 1431.0], [67.8, 1433.0], [67.9, 1435.0], [68.0, 1437.0], [68.1, 1438.0], [68.2, 1440.0], [68.3, 1441.0], [68.4, 1443.0], [68.5, 1444.0], [68.6, 1445.0], [68.7, 1447.0], [68.8, 1448.0], [68.9, 1449.0], [69.0, 1451.0], [69.1, 1453.0], [69.2, 1455.0], [69.3, 1456.0], [69.4, 1457.0], [69.5, 1459.0], [69.6, 1461.0], [69.7, 1464.0], [69.8, 1465.0], [69.9, 1466.0], [70.0, 1469.0], [70.1, 1470.0], [70.2, 1471.0], [70.3, 1473.0], [70.4, 1475.0], [70.5, 1476.0], [70.6, 1478.0], [70.7, 1479.0], [70.8, 1480.0], [70.9, 1482.0], [71.0, 1484.0], [71.1, 1486.0], [71.2, 1488.0], [71.3, 1491.0], [71.4, 1494.0], [71.5, 1496.0], [71.6, 1497.0], [71.7, 1498.0], [71.8, 1499.0], [71.9, 1501.0], [72.0, 1503.0], [72.1, 1506.0], [72.2, 1508.0], [72.3, 1509.0], [72.4, 1512.0], [72.5, 1513.0], [72.6, 1515.0], [72.7, 1518.0], [72.8, 1520.0], [72.9, 1521.0], [73.0, 1523.0], [73.1, 1525.0], [73.2, 1526.0], [73.3, 1527.0], [73.4, 1529.0], [73.5, 1531.0], [73.6, 1534.0], [73.7, 1537.0], [73.8, 1538.0], [73.9, 1542.0], [74.0, 1543.0], [74.1, 1545.0], [74.2, 1547.0], [74.3, 1548.0], [74.4, 1551.0], [74.5, 1553.0], [74.6, 1555.0], [74.7, 1557.0], [74.8, 1559.0], [74.9, 1560.0], [75.0, 1562.0], [75.1, 1563.0], [75.2, 1564.0], [75.3, 1566.0], [75.4, 1567.0], [75.5, 1569.0], [75.6, 1571.0], [75.7, 1573.0], [75.8, 1575.0], [75.9, 1578.0], [76.0, 1580.0], [76.1, 1583.0], [76.2, 1585.0], [76.3, 1587.0], [76.4, 1588.0], [76.5, 1590.0], [76.6, 1592.0], [76.7, 1594.0], [76.8, 1595.0], [76.9, 1597.0], [77.0, 1600.0], [77.1, 1602.0], [77.2, 1603.0], [77.3, 1606.0], [77.4, 1607.0], [77.5, 1611.0], [77.6, 1613.0], [77.7, 1615.0], [77.8, 1618.0], [77.9, 1620.0], [78.0, 1622.0], [78.1, 1624.0], [78.2, 1627.0], [78.3, 1628.0], [78.4, 1631.0], [78.5, 1633.0], [78.6, 1635.0], [78.7, 1637.0], [78.8, 1638.0], [78.9, 1640.0], [79.0, 1643.0], [79.1, 1645.0], [79.2, 1647.0], [79.3, 1649.0], [79.4, 1651.0], [79.5, 1654.0], [79.6, 1656.0], [79.7, 1659.0], [79.8, 1662.0], [79.9, 1663.0], [80.0, 1666.0], [80.1, 1669.0], [80.2, 1670.0], [80.3, 1671.0], [80.4, 1673.0], [80.5, 1675.0], [80.6, 1677.0], [80.7, 1680.0], [80.8, 1683.0], [80.9, 1685.0], [81.0, 1688.0], [81.1, 1691.0], [81.2, 1693.0], [81.3, 1694.0], [81.4, 1695.0], [81.5, 1698.0], [81.6, 1701.0], [81.7, 1703.0], [81.8, 1705.0], [81.9, 1707.0], [82.0, 1709.0], [82.1, 1713.0], [82.2, 1715.0], [82.3, 1717.0], [82.4, 1721.0], [82.5, 1724.0], [82.6, 1728.0], [82.7, 1731.0], [82.8, 1733.0], [82.9, 1735.0], [83.0, 1737.0], [83.1, 1739.0], [83.2, 1743.0], [83.3, 1745.0], [83.4, 1746.0], [83.5, 1749.0], [83.6, 1750.0], [83.7, 1753.0], [83.8, 1756.0], [83.9, 1758.0], [84.0, 1762.0], [84.1, 1765.0], [84.2, 1768.0], [84.3, 1770.0], [84.4, 1772.0], [84.5, 1774.0], [84.6, 1777.0], [84.7, 1779.0], [84.8, 1781.0], [84.9, 1784.0], [85.0, 1786.0], [85.1, 1788.0], [85.2, 1792.0], [85.3, 1793.0], [85.4, 1796.0], [85.5, 1800.0], [85.6, 1803.0], [85.7, 1806.0], [85.8, 1810.0], [85.9, 1812.0], [86.0, 1814.0], [86.1, 1818.0], [86.2, 1820.0], [86.3, 1825.0], [86.4, 1828.0], [86.5, 1830.0], [86.6, 1832.0], [86.7, 1834.0], [86.8, 1836.0], [86.9, 1839.0], [87.0, 1840.0], [87.1, 1844.0], [87.2, 1847.0], [87.3, 1851.0], [87.4, 1855.0], [87.5, 1858.0], [87.6, 1860.0], [87.7, 1862.0], [87.8, 1865.0], [87.9, 1871.0], [88.0, 1874.0], [88.1, 1878.0], [88.2, 1882.0], [88.3, 1887.0], [88.4, 1892.0], [88.5, 1896.0], [88.6, 1900.0], [88.7, 1901.0], [88.8, 1904.0], [88.9, 1907.0], [89.0, 1909.0], [89.1, 1912.0], [89.2, 1916.0], [89.3, 1920.0], [89.4, 1922.0], [89.5, 1925.0], [89.6, 1930.0], [89.7, 1934.0], [89.8, 1939.0], [89.9, 1943.0], [90.0, 1947.0], [90.1, 1950.0], [90.2, 1953.0], [90.3, 1956.0], [90.4, 1962.0], [90.5, 1966.0], [90.6, 1969.0], [90.7, 1972.0], [90.8, 1976.0], [90.9, 1979.0], [91.0, 1983.0], [91.1, 1987.0], [91.2, 1991.0], [91.3, 1995.0], [91.4, 1997.0], [91.5, 2001.0], [91.6, 2007.0], [91.7, 2010.0], [91.8, 2014.0], [91.9, 2018.0], [92.0, 2023.0], [92.1, 2030.0], [92.2, 2033.0], [92.3, 2037.0], [92.4, 2041.0], [92.5, 2043.0], [92.6, 2048.0], [92.7, 2053.0], [92.8, 2059.0], [92.9, 2064.0], [93.0, 2068.0], [93.1, 2071.0], [93.2, 2076.0], [93.3, 2083.0], [93.4, 2086.0], [93.5, 2091.0], [93.6, 2095.0], [93.7, 2100.0], [93.8, 2108.0], [93.9, 2112.0], [94.0, 2117.0], [94.1, 2122.0], [94.2, 2127.0], [94.3, 2132.0], [94.4, 2137.0], [94.5, 2142.0], [94.6, 2148.0], [94.7, 2158.0], [94.8, 2168.0], [94.9, 2171.0], [95.0, 2179.0], [95.1, 2187.0], [95.2, 2193.0], [95.3, 2204.0], [95.4, 2209.0], [95.5, 2217.0], [95.6, 2225.0], [95.7, 2234.0], [95.8, 2242.0], [95.9, 2246.0], [96.0, 2257.0], [96.1, 2266.0], [96.2, 2272.0], [96.3, 2279.0], [96.4, 2290.0], [96.5, 2305.0], [96.6, 2315.0], [96.7, 2324.0], [96.8, 2331.0], [96.9, 2342.0], [97.0, 2357.0], [97.1, 2365.0], [97.2, 2376.0], [97.3, 2386.0], [97.4, 2397.0], [97.5, 2406.0], [97.6, 2418.0], [97.7, 2430.0], [97.8, 2441.0], [97.9, 2449.0], [98.0, 2465.0], [98.1, 2478.0], [98.2, 2505.0], [98.3, 2519.0], [98.4, 2537.0], [98.5, 2550.0], [98.6, 2571.0], [98.7, 2608.0], [98.8, 2635.0], [98.9, 2655.0], [99.0, 2674.0], [99.1, 2714.0], [99.2, 2759.0], [99.3, 2792.0], [99.4, 2860.0], [99.5, 2914.0], [99.6, 3021.0], [99.7, 3108.0], [99.8, 3223.0], [99.9, 3469.0], [100.0, 4936.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1889.0, "series": [{"data": [[0.0, 1889.0], [600.0, 380.0], [700.0, 493.0], [800.0, 580.0], [900.0, 724.0], [1000.0, 764.0], [1100.0, 779.0], [1200.0, 778.0], [1300.0, 711.0], [1400.0, 718.0], [1500.0, 629.0], [100.0, 146.0], [1600.0, 540.0], [1700.0, 455.0], [1800.0, 405.0], [1900.0, 275.0], [2000.0, 288.0], [2100.0, 202.0], [2200.0, 153.0], [2300.0, 109.0], [2400.0, 93.0], [2500.0, 84.0], [2600.0, 47.0], [2700.0, 32.0], [2800.0, 20.0], [2900.0, 12.0], [3000.0, 11.0], [3100.0, 6.0], [200.0, 65.0], [3200.0, 8.0], [3300.0, 4.0], [3400.0, 6.0], [3500.0, 4.0], [3600.0, 3.0], [3700.0, 1.0], [4000.0, 1.0], [4100.0, 1.0], [4500.0, 1.0], [300.0, 95.0], [400.0, 189.0], [500.0, 299.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[300.0, 1.0], [200.0, 9.0], [100.0, 110.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1846.0], [600.0, 370.0], [700.0, 536.0], [800.0, 607.0], [900.0, 713.0], [1000.0, 751.0], [1100.0, 803.0], [1200.0, 760.0], [1300.0, 748.0], [1400.0, 693.0], [1500.0, 621.0], [100.0, 157.0], [1600.0, 546.0], [1700.0, 473.0], [1800.0, 374.0], [1900.0, 341.0], [2000.0, 271.0], [2100.0, 186.0], [2200.0, 147.0], [2300.0, 116.0], [2400.0, 88.0], [2500.0, 58.0], [2600.0, 45.0], [2700.0, 35.0], [2800.0, 19.0], [2900.0, 11.0], [3000.0, 14.0], [3100.0, 12.0], [200.0, 77.0], [3300.0, 3.0], [3200.0, 5.0], [3400.0, 8.0], [3500.0, 2.0], [3700.0, 2.0], [3800.0, 1.0], [4000.0, 1.0], [4200.0, 1.0], [4400.0, 1.0], [300.0, 117.0], [4700.0, 1.0], [4900.0, 1.0], [400.0, 176.0], [500.0, 263.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 89.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 12474.0, "series": [{"data": [[0.0, 4815.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 12474.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6742.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 89.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.962962962962962, "minX": 1.58542686E12, "maxY": 120.0, "series": [{"data": [[1.58542746E12, 76.86912181303121], [1.58542698E12, 120.0], [1.58542728E12, 120.0], [1.58542734E12, 120.0], [1.58542686E12, 71.47390776699048], [1.58542716E12, 120.0], [1.58542722E12, 120.0], [1.58542704E12, 120.0], [1.58542752E12, 7.962962962962962], [1.5854271E12, 120.0], [1.5854274E12, 119.43258204824055], [1.58542692E12, 119.34036733098878]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542752E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 39.0, "minX": 1.0, "maxY": 1272.9317746649187, "series": [{"data": [[2.0, 61.0], [5.0, 56.0], [6.0, 239.25], [7.0, 62.0], [8.0, 60.0], [9.0, 39.0], [10.0, 154.0], [11.0, 43.0], [12.0, 47.4], [13.0, 52.0], [14.0, 60.25], [15.0, 51.666666666666664], [16.0, 42.8], [17.0, 48.0], [18.0, 48.0], [19.0, 271.0], [20.0, 51.2], [21.0, 49.4], [22.0, 42.25], [23.0, 59.0], [24.0, 49.0], [25.0, 58.75], [26.0, 52.333333333333336], [27.0, 44.166666666666664], [28.0, 42.2], [29.0, 40.75], [30.0, 52.0], [31.0, 55.81818181818181], [32.0, 52.30769230769231], [33.0, 49.833333333333336], [34.0, 46.25], [35.0, 49.333333333333336], [36.0, 45.2], [37.0, 51.25], [38.0, 40.4], [39.0, 50.0], [40.0, 136.39999999999998], [41.0, 50.65909090909091], [42.0, 48.80952380952382], [43.0, 45.5], [44.0, 59.272727272727266], [45.0, 50.6], [46.0, 49.42857142857142], [47.0, 53.5], [48.0, 45.00000000000001], [49.0, 44.95], [50.0, 58.54545454545455], [51.0, 47.875], [52.0, 142.88888888888889], [53.0, 127.10000000000001], [54.0, 48.846153846153854], [55.0, 43.9], [56.0, 42.333333333333336], [57.0, 46.142857142857146], [58.0, 49.24444444444444], [59.0, 50.099999999999994], [60.0, 44.45454545454546], [61.0, 51.03846153846155], [62.0, 50.63636363636363], [63.0, 49.8], [64.0, 51.32], [65.0, 59.9375], [66.0, 45.5], [67.0, 222.9024390243903], [68.0, 308.125], [69.0, 91.11111111111111], [70.0, 47.9375], [71.0, 45.86206896551724], [72.0, 47.0], [73.0, 51.8421052631579], [74.0, 47.13333333333333], [75.0, 380.2758620689656], [76.0, 77.0625], [77.0, 316.6], [78.0, 163.07407407407408], [79.0, 521.9166666666665], [80.0, 426.375], [81.0, 314.15], [82.0, 78.26086956521739], [83.0, 49.11764705882353], [84.0, 56.44444444444444], [85.0, 350.3666666666667], [86.0, 235.60000000000002], [87.0, 63.23076923076923], [88.0, 58.1111111111111], [89.0, 140.2909090909091], [90.0, 66.5], [91.0, 80.03333333333335], [92.0, 93.02127659574467], [93.0, 241.84375000000006], [94.0, 45.54545454545454], [95.0, 395.7647058823529], [96.0, 422.05], [97.0, 458.7586206896552], [98.0, 380.0], [99.0, 343.88888888888886], [100.0, 318.65], [101.0, 301.29411764705884], [102.0, 371.8], [103.0, 536.6176470588236], [104.0, 767.5250000000002], [105.0, 556.2432432432432], [106.0, 163.3846153846154], [107.0, 687.7666666666667], [108.0, 731.4545454545456], [109.0, 329.07142857142856], [110.0, 807.2045454545455], [111.0, 63.3], [112.0, 615.1549295774647], [113.0, 422.0714285714286], [114.0, 665.7021276595743], [115.0, 54.9], [116.0, 437.5], [117.0, 848.5918367346939], [118.0, 886.6944444444445], [119.0, 1084.9605263157896], [120.0, 1272.9317746649187]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[113.52725000000011, 1112.7495833333332]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 196.0], [3.0, 168.0], [4.0, 183.0], [5.0, 164.0], [6.0, 155.0], [7.0, 179.0], [8.0, 168.0], [9.0, 191.0], [10.0, 362.0], [11.0, 161.0], [12.0, 165.0], [13.0, 152.0], [14.0, 214.0], [15.0, 164.0], [16.0, 165.0], [17.0, 164.0], [18.0, 165.0], [19.0, 161.0], [20.0, 210.0], [21.0, 162.0], [22.0, 162.0], [23.0, 166.0], [24.0, 162.0], [25.0, 172.0], [26.0, 165.0], [27.0, 192.0], [28.0, 161.0], [29.0, 152.0], [30.0, 166.0], [31.0, 186.0], [32.0, 157.0], [33.0, 185.0], [34.0, 181.0], [35.0, 179.0], [36.0, 184.0], [37.0, 161.0], [38.0, 161.0], [39.0, 154.0], [40.0, 162.0], [41.0, 170.0], [42.0, 162.0], [43.0, 157.0], [44.0, 202.0], [45.0, 169.0], [46.0, 156.0], [47.0, 164.0], [48.0, 179.0], [49.0, 150.0], [50.0, 179.0], [51.0, 179.0], [52.0, 152.0], [53.0, 164.0], [54.0, 165.0], [55.0, 161.0], [56.0, 179.0], [57.0, 150.0], [58.0, 155.0], [59.0, 169.0], [60.0, 154.0], [61.0, 158.0], [62.0, 191.0], [63.0, 180.0], [64.0, 170.0], [65.0, 166.0], [66.0, 160.0], [67.0, 179.0], [68.0, 154.0], [69.0, 181.0], [70.0, 160.0], [71.0, 174.0], [72.0, 273.0], [73.0, 164.0], [74.0, 162.0], [75.0, 161.0], [76.0, 161.0], [77.0, 171.0], [78.0, 155.0], [79.0, 163.0], [80.0, 165.0], [81.0, 194.0], [82.0, 169.0], [83.0, 169.0], [84.0, 178.0], [85.0, 197.0], [86.0, 207.0], [87.0, 169.0], [88.0, 163.0], [89.0, 183.0], [90.0, 158.0], [91.0, 160.0], [92.0, 164.0], [93.0, 164.0], [94.0, 175.0], [95.0, 167.0], [96.0, 179.0], [97.0, 160.0], [98.0, 267.0], [99.0, 160.0], [100.0, 195.0], [101.0, 213.0], [102.0, 169.0], [103.0, 185.0], [104.0, 170.0], [105.0, 189.0], [106.0, 179.0], [107.0, 158.0], [108.0, 161.0], [109.0, 167.0], [110.0, 159.0], [111.0, 165.0], [112.0, 183.0], [113.0, 157.0], [114.0, 236.0], [115.0, 168.0], [116.0, 174.0], [117.0, 176.0], [118.0, 174.0], [119.0, 197.0], [120.0, 175.0], [1.0, 226.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[60.5, 174.83333333333334]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[2.0, 57.0], [4.0, 52.5], [6.0, 51.0], [7.0, 55.0], [8.0, 54.2], [9.0, 48.0], [10.0, 221.5], [11.0, 53.666666666666664], [13.0, 67.5], [14.0, 53.833333333333336], [15.0, 50.81818181818182], [16.0, 53.666666666666664], [17.0, 48.333333333333336], [18.0, 68.0], [19.0, 229.8], [20.0, 66.0], [21.0, 59.5], [22.0, 60.0], [23.0, 58.705882352941174], [24.0, 57.4], [25.0, 53.285714285714285], [26.0, 45.75], [27.0, 50.6], [28.0, 47.6], [29.0, 52.0], [30.0, 49.5], [31.0, 49.57142857142858], [32.0, 52.4], [33.0, 55.00000000000001], [34.0, 50.333333333333336], [35.0, 77.83333333333334], [36.0, 55.5], [37.0, 40.75], [38.0, 44.77777777777778], [39.0, 120.14285714285714], [40.0, 46.8], [41.0, 50.354166666666664], [42.0, 46.909090909090914], [43.0, 45.62499999999999], [44.0, 53.47058823529412], [45.0, 47.8], [46.0, 56.0], [47.0, 49.25], [48.0, 42.57142857142857], [49.0, 44.692307692307686], [50.0, 53.666666666666664], [51.0, 40.8], [52.0, 289.16666666666663], [53.0, 286.31249999999994], [54.0, 49.14285714285714], [55.0, 46.09090909090909], [56.0, 45.666666666666664], [57.0, 42.06250000000001], [58.0, 46.06666666666666], [59.0, 51.166666666666664], [60.0, 46.06666666666667], [61.0, 52.9767441860465], [62.0, 53.53846153846154], [63.0, 51.0], [64.0, 48.73684210526316], [65.0, 58.23529411764706], [66.0, 51.42857142857143], [67.0, 229.48936170212772], [68.0, 273.0625], [69.0, 210.6], [70.0, 46.95238095238094], [71.0, 47.411764705882355], [72.0, 45.63636363636364], [73.0, 52.29411764705883], [74.0, 49.529411764705884], [75.0, 377.969696969697], [76.0, 255.28571428571428], [77.0, 294.8333333333333], [78.0, 200.0285714285714], [79.0, 439.9565217391304], [80.0, 146.9375], [81.0, 240.56000000000003], [82.0, 76.0], [83.0, 43.111111111111114], [84.0, 96.14285714285714], [85.0, 284.69047619047626], [86.0, 180.06666666666666], [87.0, 65.78571428571428], [88.0, 55.599999999999994], [89.0, 171.07692307692307], [90.0, 60.89473684210526], [91.0, 99.33333333333334], [92.0, 89.40540540540542], [93.0, 241.05000000000004], [94.0, 145.75], [95.0, 209.66666666666663], [96.0, 361.99999999999994], [97.0, 672.2941176470589], [98.0, 269.57894736842104], [99.0, 231.42857142857144], [100.0, 294.53846153846155], [101.0, 253.0], [102.0, 222.49999999999997], [103.0, 483.13333333333327], [104.0, 873.3392857142859], [105.0, 442.44444444444446], [106.0, 140.77777777777777], [107.0, 828.1052631578949], [108.0, 772.6071428571429], [109.0, 194.8181818181818], [110.0, 746.8863636363634], [111.0, 55.00000000000001], [112.0, 655.4250000000001], [113.0, 400.1666666666666], [114.0, 735.2666666666665], [115.0, 110.57142857142857], [116.0, 475.2352941176471], [117.0, 1149.7435897435896], [118.0, 776.5869565217392], [119.0, 1044.9605263157896], [120.0, 1270.8758558195693]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[113.54733333333331, 1112.620583333345]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 120.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 193.16666666666666, "minX": 1.58542686E12, "maxY": 302206.4666666667, "series": [{"data": [[1.58542746E12, 209150.0], [1.58542698E12, 253255.75], [1.58542728E12, 267831.7833333333], [1.58542734E12, 269769.26666666666], [1.58542686E12, 184781.21666666667], [1.58542716E12, 267715.73333333334], [1.58542722E12, 262018.48333333334], [1.58542704E12, 261306.45], [1.58542752E12, 3196.2833333333333], [1.5854271E12, 260481.31666666668], [1.5854274E12, 296525.8333333333], [1.58542692E12, 302206.4666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58542746E12, 12620.333333333334], [1.58542698E12, 15279.433333333332], [1.58542728E12, 16158.9], [1.58542734E12, 16602.733333333334], [1.58542686E12, 11417.533333333333], [1.58542716E12, 16151.666666666666], [1.58542722E12, 15808.766666666666], [1.58542704E12, 15765.9], [1.58542752E12, 193.16666666666666], [1.5854271E12, 15715.7], [1.5854274E12, 18082.1], [1.58542692E12, 18259.766666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542752E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 50.523872679045105, "minX": 1.58542686E12, "maxY": 1518.7014925373137, "series": [{"data": [[1.58542746E12, 416.4488888888885], [1.58542698E12, 1502.7446009389685], [1.58542728E12, 1321.4960070984935], [1.58542734E12, 1229.0068143100493], [1.58542686E12, 50.523872679045105], [1.58542716E12, 1320.281138790035], [1.58542722E12, 1374.1722272317395], [1.58542704E12, 1385.3794037940386], [1.58542752E12, 95.3529411764706], [1.5854271E12, 1391.1683348498636], [1.5854274E12, 954.5330151153546], [1.58542692E12, 896.2604577742696]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58542686E12, 174.45871559633025], [1.58542692E12, 178.54545454545456]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58542746E12, 437.94566473988465], [1.58542698E12, 1518.7014925373137], [1.58542728E12, 1309.1615180935585], [1.58542734E12, 1254.8135888501738], [1.58542686E12, 51.659872611464955], [1.58542716E12, 1302.8933920704853], [1.58542722E12, 1386.4346642468245], [1.58542704E12, 1370.3196721311451], [1.58542752E12, 56.3], [1.5854271E12, 1396.6296633303027], [1.5854274E12, 947.1320754716978], [1.58542692E12, 881.1553473848545]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542752E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 50.35145888594163, "minX": 1.58542686E12, "maxY": 1518.452425373134, "series": [{"data": [[1.58542746E12, 416.21999999999963], [1.58542698E12, 1502.5295774647886], [1.58542728E12, 1321.2715173025724], [1.58542734E12, 1228.760647359457], [1.58542686E12, 50.35145888594163], [1.58542716E12, 1320.0524911032007], [1.58542722E12, 1373.9314697926065], [1.58542704E12, 1385.1147244805802], [1.58542752E12, 95.17647058823528], [1.5854271E12, 1390.9090081892634], [1.5854274E12, 954.2975338106609], [1.58542692E12, 896.0544593528018]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58542686E12, 174.16513761467894], [1.58542692E12, 177.8181818181818]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58542746E12, 437.6890173410403], [1.58542698E12, 1518.452425373134], [1.58542728E12, 1308.9293909973537], [1.58542734E12, 1254.5705574912888], [1.58542686E12, 51.489171974522215], [1.58542716E12, 1302.644052863435], [1.58542722E12, 1386.1733212341196], [1.58542704E12, 1370.0464480874307], [1.58542752E12, 56.3], [1.5854271E12, 1396.3912647861687], [1.5854274E12, 946.9072327044023], [1.58542692E12, 880.9539422326299]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542752E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58542686E12, "maxY": 1.4128440366972472, "series": [{"data": [[1.58542746E12, 0.17666666666666617], [1.58542698E12, 0.6422535211267607], [1.58542728E12, 0.5261756876663711], [1.58542734E12, 0.5383304940374791], [1.58542686E12, 0.13793103448275845], [1.58542716E12, 0.5177935943060503], [1.58542722E12, 0.5446348061316496], [1.58542704E12, 0.5871725383920501], [1.58542752E12, 0.0], [1.5854271E12, 0.5068243858052777], [1.5854274E12, 0.393794749403341], [1.58542692E12, 0.3804262036306233]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58542686E12, 1.4128440366972472], [1.58542692E12, 0.6363636363636364]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58542746E12, 0.6624277456647403], [1.58542698E12, 0.6707089552238793], [1.58542728E12, 0.6310679611650487], [1.58542734E12, 0.6202090592334495], [1.58542686E12, 0.7566878980891721], [1.58542716E12, 0.624669603524229], [1.58542722E12, 0.7186932849364801], [1.58542704E12, 0.6739526411657559], [1.58542752E12, 0.7], [1.5854271E12, 0.6232939035486801], [1.5854274E12, 0.6029874213836479], [1.58542692E12, 0.7017954722872757]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542752E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.58542686E12, "maxY": 4412.0, "series": [{"data": [[1.58542746E12, 2369.0], [1.58542698E12, 4412.0], [1.58542728E12, 3223.0], [1.58542734E12, 3140.0], [1.58542686E12, 517.0], [1.58542716E12, 4065.0], [1.58542722E12, 3656.0], [1.58542704E12, 3411.0], [1.58542752E12, 439.0], [1.5854271E12, 3515.0], [1.5854274E12, 2634.0], [1.58542692E12, 3248.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58542746E12, 29.0], [1.58542698E12, 138.0], [1.58542728E12, 95.0], [1.58542734E12, 33.0], [1.58542686E12, 26.0], [1.58542716E12, 216.0], [1.58542722E12, 145.0], [1.58542704E12, 109.0], [1.58542752E12, 32.0], [1.5854271E12, 155.0], [1.5854274E12, 27.0], [1.58542692E12, 27.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58542746E12, 1146.4], [1.58542698E12, 2333.4], [1.58542728E12, 1988.9], [1.58542734E12, 1949.6000000000004], [1.58542686E12, 77.0], [1.58542716E12, 2030.0], [1.58542722E12, 2030.8], [1.58542704E12, 2084.4], [1.58542752E12, 145.19999999999976], [1.5854271E12, 2070.1000000000004], [1.5854274E12, 1609.2000000000003], [1.58542692E12, 1865.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58542746E12, 1786.0999999999988], [1.58542698E12, 3349.6799999999985], [1.58542728E12, 2641.6799999999985], [1.58542734E12, 2521.34], [1.58542686E12, 199.54999999999995], [1.58542716E12, 2725.8], [1.58542722E12, 2754.76], [1.58542704E12, 2776.2800000000007], [1.58542752E12, 439.0], [1.5854271E12, 2723.1499999999965], [1.5854274E12, 2161.2599999999998], [1.58542692E12, 2486.400000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58542746E12, 1341.6999999999998], [1.58542698E12, 2575.1], [1.58542728E12, 2200.0], [1.58542734E12, 2127.0999999999995], [1.58542686E12, 162.0], [1.58542716E12, 2255.0], [1.58542722E12, 2285.6000000000004], [1.58542704E12, 2310.5999999999985], [1.58542752E12, 422.5999999999999], [1.5854271E12, 2317.0999999999995], [1.5854274E12, 1804.1999999999998], [1.58542692E12, 2073.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542752E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 9.0, "minX": 1.0, "maxY": 1469.0, "series": [{"data": [[2.0, 61.0], [3.0, 55.5], [4.0, 111.5], [5.0, 63.0], [6.0, 57.5], [7.0, 52.0], [9.0, 49.0], [10.0, 184.5], [11.0, 55.0], [12.0, 62.0], [13.0, 51.0], [14.0, 50.0], [15.0, 51.0], [16.0, 53.0], [17.0, 1469.0], [18.0, 56.0], [19.0, 46.0], [20.0, 1128.5], [21.0, 48.0], [22.0, 378.0], [23.0, 291.0], [24.0, 1049.0], [25.0, 889.0], [26.0, 1014.0], [27.0, 1290.0], [28.0, 1357.5], [29.0, 1231.0], [30.0, 1335.0], [31.0, 1324.5], [33.0, 1306.0], [32.0, 1179.0], [35.0, 1128.0], [34.0, 1323.0], [37.0, 1210.5], [36.0, 1305.0], [39.0, 1206.0], [38.0, 1273.0], [41.0, 1309.0], [40.0, 1329.0], [42.0, 1276.5], [43.0, 1308.0], [45.0, 1217.5], [44.0, 1131.5], [46.0, 1260.0], [47.0, 853.0], [48.0, 916.0], [49.0, 1029.0], [51.0, 310.0], [50.0, 1036.5], [53.0, 448.0], [52.0, 866.5], [55.0, 67.0], [54.0, 234.0], [57.0, 372.0], [59.0, 69.0], [58.0, 889.0], [61.0, 50.0], [63.0, 51.0], [62.0, 62.5], [64.0, 54.0], [67.0, 62.0], [65.0, 48.0], [66.0, 1117.5], [68.0, 48.0], [69.0, 50.0], [71.0, 465.0], [78.0, 58.0], [82.0, 47.0], [1.0, 57.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[66.0, 870.0], [71.0, 12.0], [39.0, 9.0], [82.0, 11.5], [43.0, 65.0], [44.0, 143.0], [58.0, 11.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 82.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 9.0, "minX": 1.0, "maxY": 1469.0, "series": [{"data": [[2.0, 61.0], [3.0, 55.5], [4.0, 111.5], [5.0, 62.0], [6.0, 57.5], [7.0, 51.0], [9.0, 49.0], [10.0, 184.5], [11.0, 55.0], [12.0, 62.0], [13.0, 51.0], [14.0, 50.0], [15.0, 50.0], [16.0, 52.0], [17.0, 1469.0], [18.0, 56.0], [19.0, 46.0], [20.0, 1128.5], [21.0, 48.0], [22.0, 378.0], [23.0, 291.0], [24.0, 1049.0], [25.0, 889.0], [26.0, 1013.0], [27.0, 1290.0], [28.0, 1357.5], [29.0, 1231.0], [30.0, 1335.0], [31.0, 1324.0], [33.0, 1306.0], [32.0, 1179.0], [35.0, 1127.5], [34.0, 1323.0], [37.0, 1210.5], [36.0, 1305.0], [39.0, 1206.0], [38.0, 1273.0], [41.0, 1309.0], [40.0, 1328.5], [42.0, 1276.5], [43.0, 1308.0], [45.0, 1217.5], [44.0, 1131.5], [46.0, 1259.5], [47.0, 853.0], [48.0, 915.5], [49.0, 1028.5], [51.0, 309.5], [50.0, 1036.5], [53.0, 447.5], [52.0, 866.0], [55.0, 67.0], [54.0, 234.0], [57.0, 372.0], [59.0, 68.0], [58.0, 889.0], [61.0, 50.0], [63.0, 51.0], [62.0, 62.0], [64.0, 54.0], [67.0, 62.0], [65.0, 48.0], [66.0, 1117.0], [68.0, 48.0], [69.0, 50.0], [71.0, 465.0], [78.0, 57.5], [82.0, 47.0], [1.0, 57.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[66.0, 870.0], [71.0, 11.5], [39.0, 9.0], [82.0, 11.0], [43.0, 65.0], [44.0, 142.5], [58.0, 11.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 82.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.45, "minX": 1.58542686E12, "maxY": 43.766666666666666, "series": [{"data": [[1.58542746E12, 28.933333333333334], [1.58542698E12, 35.15], [1.58542728E12, 37.68333333333333], [1.58542734E12, 37.86666666666667], [1.58542686E12, 27.5], [1.58542716E12, 37.78333333333333], [1.58542722E12, 36.833333333333336], [1.58542704E12, 36.88333333333333], [1.58542752E12, 0.45], [1.5854271E12, 36.61666666666667], [1.5854274E12, 42.53333333333333], [1.58542692E12, 43.766666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542752E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.45, "minX": 1.58542686E12, "maxY": 42.65, "series": [{"data": [[1.58542746E12, 29.416666666666668], [1.58542698E12, 35.61666666666667], [1.58542728E12, 37.666666666666664], [1.58542734E12, 37.75], [1.58542686E12, 27.466666666666665], [1.58542716E12, 37.65], [1.58542722E12, 36.85], [1.58542704E12, 36.75], [1.58542752E12, 0.45], [1.5854271E12, 36.63333333333333], [1.5854274E12, 41.61666666666667], [1.58542692E12, 42.65]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58542734E12, 0.95], [1.5854274E12, 0.5333333333333333]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542752E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.58542686E12, "maxY": 21.35, "series": [{"data": [[1.58542686E12, 1.8166666666666667], [1.58542692E12, 0.18333333333333332]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58542746E12, 15.0], [1.58542698E12, 17.75], [1.58542728E12, 18.783333333333335], [1.58542734E12, 19.0], [1.58542686E12, 12.566666666666666], [1.58542716E12, 18.733333333333334], [1.58542722E12, 18.483333333333334], [1.58542704E12, 18.45], [1.58542752E12, 0.2833333333333333], [1.5854271E12, 18.316666666666666], [1.5854274E12, 20.766666666666666], [1.58542692E12, 21.116666666666667]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58542734E12, 0.5666666666666667], [1.5854274E12, 0.18333333333333332]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.58542746E12, 14.416666666666666], [1.58542698E12, 17.866666666666667], [1.58542728E12, 18.883333333333333], [1.58542734E12, 18.75], [1.58542686E12, 13.083333333333334], [1.58542716E12, 18.916666666666668], [1.58542722E12, 18.366666666666667], [1.58542704E12, 18.3], [1.58542752E12, 0.16666666666666666], [1.5854271E12, 18.316666666666666], [1.5854274E12, 20.85], [1.58542692E12, 21.35]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58542734E12, 0.38333333333333336], [1.5854274E12, 0.35]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542752E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.45, "minX": 1.58542686E12, "maxY": 42.65, "series": [{"data": [[1.58542746E12, 29.416666666666668], [1.58542698E12, 35.61666666666667], [1.58542728E12, 37.666666666666664], [1.58542734E12, 37.75], [1.58542686E12, 27.466666666666665], [1.58542716E12, 37.65], [1.58542722E12, 36.85], [1.58542704E12, 36.75], [1.58542752E12, 0.45], [1.5854271E12, 36.63333333333333], [1.5854274E12, 41.61666666666667], [1.58542692E12, 42.65]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58542734E12, 0.95], [1.5854274E12, 0.5333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542752E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

