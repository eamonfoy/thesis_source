/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 20007.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 1.0], [41.8, 1.0], [41.9, 1.0], [42.0, 1.0], [42.1, 1.0], [42.2, 1.0], [42.3, 1.0], [42.4, 1.0], [42.5, 1.0], [42.6, 1.0], [42.7, 1.0], [42.8, 1.0], [42.9, 1.0], [43.0, 1.0], [43.1, 1.0], [43.2, 1.0], [43.3, 1.0], [43.4, 1.0], [43.5, 1.0], [43.6, 1.0], [43.7, 1.0], [43.8, 1.0], [43.9, 1.0], [44.0, 1.0], [44.1, 1.0], [44.2, 1.0], [44.3, 1.0], [44.4, 1.0], [44.5, 1.0], [44.6, 1.0], [44.7, 1.0], [44.8, 1.0], [44.9, 1.0], [45.0, 1.0], [45.1, 1.0], [45.2, 1.0], [45.3, 1.0], [45.4, 1.0], [45.5, 1.0], [45.6, 1.0], [45.7, 1.0], [45.8, 1.0], [45.9, 1.0], [46.0, 1.0], [46.1, 1.0], [46.2, 1.0], [46.3, 1.0], [46.4, 1.0], [46.5, 1.0], [46.6, 1.0], [46.7, 1.0], [46.8, 1.0], [46.9, 1.0], [47.0, 1.0], [47.1, 1.0], [47.2, 1.0], [47.3, 1.0], [47.4, 1.0], [47.5, 1.0], [47.6, 1.0], [47.7, 1.0], [47.8, 1.0], [47.9, 1.0], [48.0, 1.0], [48.1, 1.0], [48.2, 1.0], [48.3, 1.0], [48.4, 1.0], [48.5, 1.0], [48.6, 1.0], [48.7, 1.0], [48.8, 1.0], [48.9, 1.0], [49.0, 1.0], [49.1, 1.0], [49.2, 1.0], [49.3, 1.0], [49.4, 1.0], [49.5, 1.0], [49.6, 1.0], [49.7, 1.0], [49.8, 1.0], [49.9, 1.0], [50.0, 1.0], [50.1, 1.0], [50.2, 1.0], [50.3, 1.0], [50.4, 1.0], [50.5, 1.0], [50.6, 1.0], [50.7, 1.0], [50.8, 1.0], [50.9, 1.0], [51.0, 1.0], [51.1, 1.0], [51.2, 1.0], [51.3, 1.0], [51.4, 1.0], [51.5, 1.0], [51.6, 1.0], [51.7, 1.0], [51.8, 1.0], [51.9, 1.0], [52.0, 1.0], [52.1, 1.0], [52.2, 1.0], [52.3, 1.0], [52.4, 1.0], [52.5, 1.0], [52.6, 1.0], [52.7, 1.0], [52.8, 1.0], [52.9, 1.0], [53.0, 1.0], [53.1, 1.0], [53.2, 1.0], [53.3, 1.0], [53.4, 1.0], [53.5, 1.0], [53.6, 1.0], [53.7, 1.0], [53.8, 1.0], [53.9, 1.0], [54.0, 1.0], [54.1, 1.0], [54.2, 1.0], [54.3, 1.0], [54.4, 1.0], [54.5, 1.0], [54.6, 1.0], [54.7, 1.0], [54.8, 1.0], [54.9, 1.0], [55.0, 1.0], [55.1, 1.0], [55.2, 1.0], [55.3, 1.0], [55.4, 1.0], [55.5, 1.0], [55.6, 1.0], [55.7, 1.0], [55.8, 1.0], [55.9, 1.0], [56.0, 1.0], [56.1, 1.0], [56.2, 1.0], [56.3, 1.0], [56.4, 1.0], [56.5, 1.0], [56.6, 1.0], [56.7, 1.0], [56.8, 1.0], [56.9, 1.0], [57.0, 1.0], [57.1, 1.0], [57.2, 1.0], [57.3, 1.0], [57.4, 1.0], [57.5, 1.0], [57.6, 1.0], [57.7, 1.0], [57.8, 1.0], [57.9, 1.0], [58.0, 1.0], [58.1, 1.0], [58.2, 1.0], [58.3, 1.0], [58.4, 1.0], [58.5, 1.0], [58.6, 1.0], [58.7, 1.0], [58.8, 1.0], [58.9, 1.0], [59.0, 1.0], [59.1, 1.0], [59.2, 1.0], [59.3, 1.0], [59.4, 1.0], [59.5, 1.0], [59.6, 1.0], [59.7, 1.0], [59.8, 1.0], [59.9, 1.0], [60.0, 1.0], [60.1, 1.0], [60.2, 1.0], [60.3, 1.0], [60.4, 1.0], [60.5, 1.0], [60.6, 1.0], [60.7, 1.0], [60.8, 1.0], [60.9, 1.0], [61.0, 1.0], [61.1, 1.0], [61.2, 1.0], [61.3, 1.0], [61.4, 1.0], [61.5, 1.0], [61.6, 1.0], [61.7, 1.0], [61.8, 1.0], [61.9, 1.0], [62.0, 1.0], [62.1, 1.0], [62.2, 1.0], [62.3, 1.0], [62.4, 1.0], [62.5, 1.0], [62.6, 1.0], [62.7, 1.0], [62.8, 1.0], [62.9, 1.0], [63.0, 1.0], [63.1, 1.0], [63.2, 1.0], [63.3, 1.0], [63.4, 1.0], [63.5, 1.0], [63.6, 1.0], [63.7, 1.0], [63.8, 1.0], [63.9, 2.0], [64.0, 2.0], [64.1, 2.0], [64.2, 2.0], [64.3, 2.0], [64.4, 2.0], [64.5, 2.0], [64.6, 2.0], [64.7, 2.0], [64.8, 2.0], [64.9, 2.0], [65.0, 2.0], [65.1, 2.0], [65.2, 2.0], [65.3, 2.0], [65.4, 2.0], [65.5, 2.0], [65.6, 2.0], [65.7, 2.0], [65.8, 2.0], [65.9, 2.0], [66.0, 2.0], [66.1, 2.0], [66.2, 2.0], [66.3, 2.0], [66.4, 2.0], [66.5, 2.0], [66.6, 2.0], [66.7, 2.0], [66.8, 2.0], [66.9, 2.0], [67.0, 2.0], [67.1, 2.0], [67.2, 2.0], [67.3, 2.0], [67.4, 2.0], [67.5, 2.0], [67.6, 2.0], [67.7, 2.0], [67.8, 2.0], [67.9, 2.0], [68.0, 2.0], [68.1, 2.0], [68.2, 2.0], [68.3, 2.0], [68.4, 2.0], [68.5, 2.0], [68.6, 2.0], [68.7, 2.0], [68.8, 2.0], [68.9, 2.0], [69.0, 2.0], [69.1, 2.0], [69.2, 2.0], [69.3, 2.0], [69.4, 2.0], [69.5, 2.0], [69.6, 2.0], [69.7, 2.0], [69.8, 2.0], [69.9, 3.0], [70.0, 3.0], [70.1, 3.0], [70.2, 3.0], [70.3, 3.0], [70.4, 3.0], [70.5, 3.0], [70.6, 4.0], [70.7, 4.0], [70.8, 4.0], [70.9, 4.0], [71.0, 5.0], [71.1, 5.0], [71.2, 6.0], [71.3, 7.0], [71.4, 8.0], [71.5, 9.0], [71.6, 11.0], [71.7, 16.0], [71.8, 23.0], [71.9, 35.0], [72.0, 39.0], [72.1, 40.0], [72.2, 42.0], [72.3, 43.0], [72.4, 45.0], [72.5, 46.0], [72.6, 47.0], [72.7, 49.0], [72.8, 51.0], [72.9, 52.0], [73.0, 54.0], [73.1, 57.0], [73.2, 59.0], [73.3, 60.0], [73.4, 62.0], [73.5, 65.0], [73.6, 69.0], [73.7, 74.0], [73.8, 80.0], [73.9, 87.0], [74.0, 99.0], [74.1, 115.0], [74.2, 143.0], [74.3, 239.0], [74.4, 331.0], [74.5, 475.0], [74.6, 544.0], [74.7, 599.0], [74.8, 669.0], [74.9, 720.0], [75.0, 767.0], [75.1, 822.0], [75.2, 875.0], [75.3, 904.0], [75.4, 942.0], [75.5, 971.0], [75.6, 993.0], [75.7, 1009.0], [75.8, 1036.0], [75.9, 1063.0], [76.0, 1085.0], [76.1, 1112.0], [76.2, 1139.0], [76.3, 1167.0], [76.4, 1191.0], [76.5, 1215.0], [76.6, 1237.0], [76.7, 1258.0], [76.8, 1275.0], [76.9, 1287.0], [77.0, 1308.0], [77.1, 1335.0], [77.2, 1357.0], [77.3, 1371.0], [77.4, 1386.0], [77.5, 1409.0], [77.6, 1422.0], [77.7, 1436.0], [77.8, 1449.0], [77.9, 1465.0], [78.0, 1489.0], [78.1, 1504.0], [78.2, 1518.0], [78.3, 1540.0], [78.4, 1557.0], [78.5, 1573.0], [78.6, 1590.0], [78.7, 1605.0], [78.8, 1616.0], [78.9, 1635.0], [79.0, 1652.0], [79.1, 1670.0], [79.2, 1684.0], [79.3, 1697.0], [79.4, 1720.0], [79.5, 1733.0], [79.6, 1744.0], [79.7, 1755.0], [79.8, 1768.0], [79.9, 1782.0], [80.0, 1796.0], [80.1, 1810.0], [80.2, 1826.0], [80.3, 1840.0], [80.4, 1856.0], [80.5, 1872.0], [80.6, 1884.0], [80.7, 1904.0], [80.8, 1920.0], [80.9, 1934.0], [81.0, 1951.0], [81.1, 1972.0], [81.2, 1995.0], [81.3, 2013.0], [81.4, 2026.0], [81.5, 2043.0], [81.6, 2059.0], [81.7, 2076.0], [81.8, 2090.0], [81.9, 2104.0], [82.0, 2119.0], [82.1, 2142.0], [82.2, 2154.0], [82.3, 2179.0], [82.4, 2202.0], [82.5, 2216.0], [82.6, 2234.0], [82.7, 2249.0], [82.8, 2266.0], [82.9, 2285.0], [83.0, 2297.0], [83.1, 2311.0], [83.2, 2324.0], [83.3, 2338.0], [83.4, 2351.0], [83.5, 2373.0], [83.6, 2390.0], [83.7, 2402.0], [83.8, 2416.0], [83.9, 2432.0], [84.0, 2448.0], [84.1, 2462.0], [84.2, 2478.0], [84.3, 2493.0], [84.4, 2514.0], [84.5, 2529.0], [84.6, 2544.0], [84.7, 2557.0], [84.8, 2572.0], [84.9, 2589.0], [85.0, 2604.0], [85.1, 2618.0], [85.2, 2631.0], [85.3, 2640.0], [85.4, 2655.0], [85.5, 2669.0], [85.6, 2678.0], [85.7, 2692.0], [85.8, 2704.0], [85.9, 2721.0], [86.0, 2736.0], [86.1, 2747.0], [86.2, 2759.0], [86.3, 2769.0], [86.4, 2778.0], [86.5, 2786.0], [86.6, 2797.0], [86.7, 2807.0], [86.8, 2818.0], [86.9, 2830.0], [87.0, 2840.0], [87.1, 2852.0], [87.2, 2863.0], [87.3, 2876.0], [87.4, 2895.0], [87.5, 2907.0], [87.6, 2918.0], [87.7, 2928.0], [87.8, 2938.0], [87.9, 2947.0], [88.0, 2954.0], [88.1, 2962.0], [88.2, 2970.0], [88.3, 2982.0], [88.4, 2991.0], [88.5, 3002.0], [88.6, 3009.0], [88.7, 3020.0], [88.8, 3034.0], [88.9, 3042.0], [89.0, 3050.0], [89.1, 3060.0], [89.2, 3067.0], [89.3, 3077.0], [89.4, 3086.0], [89.5, 3097.0], [89.6, 3107.0], [89.7, 3115.0], [89.8, 3124.0], [89.9, 3142.0], [90.0, 3153.0], [90.1, 3161.0], [90.2, 3176.0], [90.3, 3188.0], [90.4, 3200.0], [90.5, 3212.0], [90.6, 3230.0], [90.7, 3246.0], [90.8, 3256.0], [90.9, 3272.0], [91.0, 3286.0], [91.1, 3299.0], [91.2, 3311.0], [91.3, 3326.0], [91.4, 3339.0], [91.5, 3350.0], [91.6, 3366.0], [91.7, 3379.0], [91.8, 3393.0], [91.9, 3418.0], [92.0, 3439.0], [92.1, 3459.0], [92.2, 3487.0], [92.3, 3504.0], [92.4, 3523.0], [92.5, 3546.0], [92.6, 3559.0], [92.7, 3587.0], [92.8, 3609.0], [92.9, 3626.0], [93.0, 3650.0], [93.1, 3667.0], [93.2, 3677.0], [93.3, 3701.0], [93.4, 3718.0], [93.5, 3741.0], [93.6, 3761.0], [93.7, 3789.0], [93.8, 3810.0], [93.9, 3834.0], [94.0, 3851.0], [94.1, 3873.0], [94.2, 3894.0], [94.3, 3909.0], [94.4, 3924.0], [94.5, 3943.0], [94.6, 3960.0], [94.7, 3983.0], [94.8, 3996.0], [94.9, 4014.0], [95.0, 4030.0], [95.1, 4052.0], [95.2, 4066.0], [95.3, 4086.0], [95.4, 4102.0], [95.5, 4119.0], [95.6, 4132.0], [95.7, 4150.0], [95.8, 4172.0], [95.9, 4185.0], [96.0, 4201.0], [96.1, 4221.0], [96.2, 4236.0], [96.3, 4255.0], [96.4, 4276.0], [96.5, 4294.0], [96.6, 4313.0], [96.7, 4331.0], [96.8, 4352.0], [96.9, 4367.0], [97.0, 4388.0], [97.1, 4404.0], [97.2, 4423.0], [97.3, 4443.0], [97.4, 4463.0], [97.5, 4492.0], [97.6, 4511.0], [97.7, 4546.0], [97.8, 4571.0], [97.9, 4597.0], [98.0, 4617.0], [98.1, 4654.0], [98.2, 4680.0], [98.3, 4701.0], [98.4, 4731.0], [98.5, 4780.0], [98.6, 4824.0], [98.7, 4872.0], [98.8, 4902.0], [98.9, 4956.0], [99.0, 4993.0], [99.1, 5035.0], [99.2, 5089.0], [99.3, 5132.0], [99.4, 5189.0], [99.5, 5245.0], [99.6, 5305.0], [99.7, 5424.0], [99.8, 5534.0], [99.9, 5702.0], [100.0, 6685.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 162.0], [0.1, 162.0], [0.2, 162.0], [0.3, 162.0], [0.4, 162.0], [0.5, 162.0], [0.6, 164.0], [0.7, 164.0], [0.8, 164.0], [0.9, 164.0], [1.0, 164.0], [1.1, 166.0], [1.2, 166.0], [1.3, 166.0], [1.4, 166.0], [1.5, 166.0], [1.6, 171.0], [1.7, 171.0], [1.8, 171.0], [1.9, 171.0], [2.0, 171.0], [2.1, 172.0], [2.2, 172.0], [2.3, 172.0], [2.4, 172.0], [2.5, 172.0], [2.6, 173.0], [2.7, 173.0], [2.8, 173.0], [2.9, 173.0], [3.0, 173.0], [3.1, 173.0], [3.2, 173.0], [3.3, 173.0], [3.4, 173.0], [3.5, 173.0], [3.6, 178.0], [3.7, 178.0], [3.8, 178.0], [3.9, 178.0], [4.0, 178.0], [4.1, 178.0], [4.2, 180.0], [4.3, 180.0], [4.4, 180.0], [4.5, 180.0], [4.6, 180.0], [4.7, 182.0], [4.8, 182.0], [4.9, 182.0], [5.0, 182.0], [5.1, 182.0], [5.2, 183.0], [5.3, 183.0], [5.4, 183.0], [5.5, 183.0], [5.6, 183.0], [5.7, 186.0], [5.8, 186.0], [5.9, 186.0], [6.0, 186.0], [6.1, 186.0], [6.2, 193.0], [6.3, 193.0], [6.4, 193.0], [6.5, 193.0], [6.6, 193.0], [6.7, 193.0], [6.8, 193.0], [6.9, 193.0], [7.0, 193.0], [7.1, 193.0], [7.2, 193.0], [7.3, 193.0], [7.4, 193.0], [7.5, 193.0], [7.6, 193.0], [7.7, 194.0], [7.8, 194.0], [7.9, 194.0], [8.0, 194.0], [8.1, 194.0], [8.2, 194.0], [8.3, 194.0], [8.4, 194.0], [8.5, 194.0], [8.6, 194.0], [8.7, 194.0], [8.8, 195.0], [8.9, 195.0], [9.0, 195.0], [9.1, 195.0], [9.2, 195.0], [9.3, 197.0], [9.4, 197.0], [9.5, 197.0], [9.6, 197.0], [9.7, 197.0], [9.8, 197.0], [9.9, 197.0], [10.0, 197.0], [10.1, 197.0], [10.2, 197.0], [10.3, 200.0], [10.4, 200.0], [10.5, 200.0], [10.6, 200.0], [10.7, 200.0], [10.8, 201.0], [10.9, 201.0], [11.0, 201.0], [11.1, 201.0], [11.2, 201.0], [11.3, 201.0], [11.4, 201.0], [11.5, 201.0], [11.6, 201.0], [11.7, 201.0], [11.8, 207.0], [11.9, 207.0], [12.0, 207.0], [12.1, 207.0], [12.2, 207.0], [12.3, 207.0], [12.4, 210.0], [12.5, 210.0], [12.6, 210.0], [12.7, 210.0], [12.8, 210.0], [12.9, 212.0], [13.0, 212.0], [13.1, 212.0], [13.2, 212.0], [13.3, 212.0], [13.4, 214.0], [13.5, 214.0], [13.6, 214.0], [13.7, 214.0], [13.8, 214.0], [13.9, 214.0], [14.0, 214.0], [14.1, 214.0], [14.2, 214.0], [14.3, 214.0], [14.4, 215.0], [14.5, 215.0], [14.6, 215.0], [14.7, 215.0], [14.8, 215.0], [14.9, 218.0], [15.0, 218.0], [15.1, 218.0], [15.2, 218.0], [15.3, 218.0], [15.4, 218.0], [15.5, 218.0], [15.6, 218.0], [15.7, 218.0], [15.8, 218.0], [15.9, 219.0], [16.0, 219.0], [16.1, 219.0], [16.2, 219.0], [16.3, 219.0], [16.4, 219.0], [16.5, 223.0], [16.6, 223.0], [16.7, 223.0], [16.8, 223.0], [16.9, 223.0], [17.0, 223.0], [17.1, 223.0], [17.2, 223.0], [17.3, 223.0], [17.4, 223.0], [17.5, 225.0], [17.6, 225.0], [17.7, 225.0], [17.8, 225.0], [17.9, 225.0], [18.0, 227.0], [18.1, 227.0], [18.2, 227.0], [18.3, 227.0], [18.4, 227.0], [18.5, 227.0], [18.6, 227.0], [18.7, 227.0], [18.8, 227.0], [18.9, 227.0], [19.0, 228.0], [19.1, 228.0], [19.2, 228.0], [19.3, 228.0], [19.4, 228.0], [19.5, 229.0], [19.6, 229.0], [19.7, 229.0], [19.8, 229.0], [19.9, 229.0], [20.0, 229.0], [20.1, 229.0], [20.2, 229.0], [20.3, 229.0], [20.4, 229.0], [20.5, 229.0], [20.6, 232.0], [20.7, 232.0], [20.8, 232.0], [20.9, 232.0], [21.0, 232.0], [21.1, 235.0], [21.2, 235.0], [21.3, 235.0], [21.4, 235.0], [21.5, 235.0], [21.6, 240.0], [21.7, 240.0], [21.8, 240.0], [21.9, 240.0], [22.0, 240.0], [22.1, 246.0], [22.2, 246.0], [22.3, 246.0], [22.4, 246.0], [22.5, 246.0], [22.6, 251.0], [22.7, 251.0], [22.8, 251.0], [22.9, 251.0], [23.0, 251.0], [23.1, 252.0], [23.2, 252.0], [23.3, 252.0], [23.4, 252.0], [23.5, 252.0], [23.6, 254.0], [23.7, 254.0], [23.8, 254.0], [23.9, 254.0], [24.0, 254.0], [24.1, 254.0], [24.2, 255.0], [24.3, 255.0], [24.4, 255.0], [24.5, 255.0], [24.6, 255.0], [24.7, 257.0], [24.8, 257.0], [24.9, 257.0], [25.0, 257.0], [25.1, 257.0], [25.2, 259.0], [25.3, 259.0], [25.4, 259.0], [25.5, 259.0], [25.6, 259.0], [25.7, 260.0], [25.8, 260.0], [25.9, 260.0], [26.0, 260.0], [26.1, 260.0], [26.2, 266.0], [26.3, 266.0], [26.4, 266.0], [26.5, 266.0], [26.6, 266.0], [26.7, 270.0], [26.8, 270.0], [26.9, 270.0], [27.0, 270.0], [27.1, 270.0], [27.2, 271.0], [27.3, 271.0], [27.4, 271.0], [27.5, 271.0], [27.6, 271.0], [27.7, 272.0], [27.8, 272.0], [27.9, 272.0], [28.0, 272.0], [28.1, 272.0], [28.2, 272.0], [28.3, 279.0], [28.4, 279.0], [28.5, 279.0], [28.6, 279.0], [28.7, 279.0], [28.8, 280.0], [28.9, 280.0], [29.0, 280.0], [29.1, 280.0], [29.2, 280.0], [29.3, 281.0], [29.4, 281.0], [29.5, 281.0], [29.6, 281.0], [29.7, 281.0], [29.8, 290.0], [29.9, 290.0], [30.0, 290.0], [30.1, 290.0], [30.2, 290.0], [30.3, 292.0], [30.4, 292.0], [30.5, 292.0], [30.6, 292.0], [30.7, 292.0], [30.8, 293.0], [30.9, 293.0], [31.0, 293.0], [31.1, 293.0], [31.2, 293.0], [31.3, 297.0], [31.4, 297.0], [31.5, 297.0], [31.6, 297.0], [31.7, 297.0], [31.8, 303.0], [31.9, 303.0], [32.0, 303.0], [32.1, 303.0], [32.2, 303.0], [32.3, 303.0], [32.4, 309.0], [32.5, 309.0], [32.6, 309.0], [32.7, 309.0], [32.8, 309.0], [32.9, 314.0], [33.0, 314.0], [33.1, 314.0], [33.2, 314.0], [33.3, 314.0], [33.4, 325.0], [33.5, 325.0], [33.6, 325.0], [33.7, 325.0], [33.8, 325.0], [33.9, 336.0], [34.0, 336.0], [34.1, 336.0], [34.2, 336.0], [34.3, 336.0], [34.4, 343.0], [34.5, 343.0], [34.6, 343.0], [34.7, 343.0], [34.8, 343.0], [34.9, 344.0], [35.0, 344.0], [35.1, 344.0], [35.2, 344.0], [35.3, 344.0], [35.4, 353.0], [35.5, 353.0], [35.6, 353.0], [35.7, 353.0], [35.8, 353.0], [35.9, 353.0], [36.0, 353.0], [36.1, 353.0], [36.2, 353.0], [36.3, 353.0], [36.4, 353.0], [36.5, 364.0], [36.6, 364.0], [36.7, 364.0], [36.8, 364.0], [36.9, 364.0], [37.0, 375.0], [37.1, 375.0], [37.2, 375.0], [37.3, 375.0], [37.4, 375.0], [37.5, 378.0], [37.6, 378.0], [37.7, 378.0], [37.8, 378.0], [37.9, 378.0], [38.0, 389.0], [38.1, 389.0], [38.2, 389.0], [38.3, 389.0], [38.4, 389.0], [38.5, 390.0], [38.6, 390.0], [38.7, 390.0], [38.8, 390.0], [38.9, 390.0], [39.0, 405.0], [39.1, 405.0], [39.2, 405.0], [39.3, 405.0], [39.4, 405.0], [39.5, 419.0], [39.6, 419.0], [39.7, 419.0], [39.8, 419.0], [39.9, 419.0], [40.0, 420.0], [40.1, 420.0], [40.2, 420.0], [40.3, 420.0], [40.4, 420.0], [40.5, 420.0], [40.6, 423.0], [40.7, 423.0], [40.8, 423.0], [40.9, 423.0], [41.0, 423.0], [41.1, 428.0], [41.2, 428.0], [41.3, 428.0], [41.4, 428.0], [41.5, 428.0], [41.6, 444.0], [41.7, 444.0], [41.8, 444.0], [41.9, 444.0], [42.0, 444.0], [42.1, 463.0], [42.2, 463.0], [42.3, 463.0], [42.4, 463.0], [42.5, 463.0], [42.6, 476.0], [42.7, 476.0], [42.8, 476.0], [42.9, 476.0], [43.0, 476.0], [43.1, 489.0], [43.2, 489.0], [43.3, 489.0], [43.4, 489.0], [43.5, 489.0], [43.6, 490.0], [43.7, 490.0], [43.8, 490.0], [43.9, 490.0], [44.0, 490.0], [44.1, 490.0], [44.2, 494.0], [44.3, 494.0], [44.4, 494.0], [44.5, 494.0], [44.6, 494.0], [44.7, 502.0], [44.8, 502.0], [44.9, 502.0], [45.0, 502.0], [45.1, 502.0], [45.2, 519.0], [45.3, 519.0], [45.4, 519.0], [45.5, 519.0], [45.6, 519.0], [45.7, 519.0], [45.8, 519.0], [45.9, 519.0], [46.0, 519.0], [46.1, 519.0], [46.2, 520.0], [46.3, 520.0], [46.4, 520.0], [46.5, 520.0], [46.6, 520.0], [46.7, 565.0], [46.8, 565.0], [46.9, 565.0], [47.0, 565.0], [47.1, 565.0], [47.2, 571.0], [47.3, 571.0], [47.4, 571.0], [47.5, 571.0], [47.6, 571.0], [47.7, 574.0], [47.8, 574.0], [47.9, 574.0], [48.0, 574.0], [48.1, 574.0], [48.2, 574.0], [48.3, 578.0], [48.4, 578.0], [48.5, 578.0], [48.6, 578.0], [48.7, 578.0], [48.8, 585.0], [48.9, 585.0], [49.0, 585.0], [49.1, 585.0], [49.2, 585.0], [49.3, 590.0], [49.4, 590.0], [49.5, 590.0], [49.6, 590.0], [49.7, 590.0], [49.8, 625.0], [49.9, 625.0], [50.0, 625.0], [50.1, 625.0], [50.2, 625.0], [50.3, 639.0], [50.4, 639.0], [50.5, 639.0], [50.6, 639.0], [50.7, 639.0], [50.8, 659.0], [50.9, 659.0], [51.0, 659.0], [51.1, 659.0], [51.2, 659.0], [51.3, 692.0], [51.4, 692.0], [51.5, 692.0], [51.6, 692.0], [51.7, 692.0], [51.8, 712.0], [51.9, 712.0], [52.0, 712.0], [52.1, 712.0], [52.2, 712.0], [52.3, 712.0], [52.4, 760.0], [52.5, 760.0], [52.6, 760.0], [52.7, 760.0], [52.8, 760.0], [52.9, 866.0], [53.0, 866.0], [53.1, 866.0], [53.2, 866.0], [53.3, 866.0], [53.4, 869.0], [53.5, 869.0], [53.6, 869.0], [53.7, 869.0], [53.8, 869.0], [53.9, 873.0], [54.0, 873.0], [54.1, 873.0], [54.2, 873.0], [54.3, 873.0], [54.4, 907.0], [54.5, 907.0], [54.6, 907.0], [54.7, 907.0], [54.8, 907.0], [54.9, 907.0], [55.0, 907.0], [55.1, 907.0], [55.2, 907.0], [55.3, 907.0], [55.4, 953.0], [55.5, 953.0], [55.6, 953.0], [55.7, 953.0], [55.8, 953.0], [55.9, 956.0], [56.0, 956.0], [56.1, 956.0], [56.2, 956.0], [56.3, 956.0], [56.4, 956.0], [56.5, 967.0], [56.6, 967.0], [56.7, 967.0], [56.8, 967.0], [56.9, 967.0], [57.0, 969.0], [57.1, 969.0], [57.2, 969.0], [57.3, 969.0], [57.4, 969.0], [57.5, 969.0], [57.6, 969.0], [57.7, 969.0], [57.8, 969.0], [57.9, 969.0], [58.0, 981.0], [58.1, 981.0], [58.2, 981.0], [58.3, 981.0], [58.4, 981.0], [58.5, 1013.0], [58.6, 1013.0], [58.7, 1013.0], [58.8, 1013.0], [58.9, 1013.0], [59.0, 1025.0], [59.1, 1025.0], [59.2, 1025.0], [59.3, 1025.0], [59.4, 1025.0], [59.5, 1025.0], [59.6, 1025.0], [59.7, 1025.0], [59.8, 1025.0], [59.9, 1025.0], [60.0, 1037.0], [60.1, 1037.0], [60.2, 1037.0], [60.3, 1037.0], [60.4, 1037.0], [60.5, 1037.0], [60.6, 1054.0], [60.7, 1054.0], [60.8, 1054.0], [60.9, 1054.0], [61.0, 1054.0], [61.1, 1085.0], [61.2, 1085.0], [61.3, 1085.0], [61.4, 1085.0], [61.5, 1085.0], [61.6, 1105.0], [61.7, 1105.0], [61.8, 1105.0], [61.9, 1105.0], [62.0, 1105.0], [62.1, 1115.0], [62.2, 1115.0], [62.3, 1115.0], [62.4, 1115.0], [62.5, 1115.0], [62.6, 1116.0], [62.7, 1116.0], [62.8, 1116.0], [62.9, 1116.0], [63.0, 1116.0], [63.1, 1137.0], [63.2, 1137.0], [63.3, 1137.0], [63.4, 1137.0], [63.5, 1137.0], [63.6, 1175.0], [63.7, 1175.0], [63.8, 1175.0], [63.9, 1175.0], [64.0, 1175.0], [64.1, 1175.0], [64.2, 1190.0], [64.3, 1190.0], [64.4, 1190.0], [64.5, 1190.0], [64.6, 1190.0], [64.7, 1206.0], [64.8, 1206.0], [64.9, 1206.0], [65.0, 1206.0], [65.1, 1206.0], [65.2, 1212.0], [65.3, 1212.0], [65.4, 1212.0], [65.5, 1212.0], [65.6, 1212.0], [65.7, 1215.0], [65.8, 1215.0], [65.9, 1215.0], [66.0, 1215.0], [66.1, 1215.0], [66.2, 1228.0], [66.3, 1228.0], [66.4, 1228.0], [66.5, 1228.0], [66.6, 1228.0], [66.7, 1239.0], [66.8, 1239.0], [66.9, 1239.0], [67.0, 1239.0], [67.1, 1239.0], [67.2, 1241.0], [67.3, 1241.0], [67.4, 1241.0], [67.5, 1241.0], [67.6, 1241.0], [67.7, 1269.0], [67.8, 1269.0], [67.9, 1269.0], [68.0, 1269.0], [68.1, 1269.0], [68.2, 1269.0], [68.3, 1287.0], [68.4, 1287.0], [68.5, 1287.0], [68.6, 1287.0], [68.7, 1287.0], [68.8, 1337.0], [68.9, 1337.0], [69.0, 1337.0], [69.1, 1337.0], [69.2, 1337.0], [69.3, 1340.0], [69.4, 1340.0], [69.5, 1340.0], [69.6, 1340.0], [69.7, 1340.0], [69.8, 1341.0], [69.9, 1341.0], [70.0, 1341.0], [70.1, 1341.0], [70.2, 1341.0], [70.3, 1370.0], [70.4, 1370.0], [70.5, 1370.0], [70.6, 1370.0], [70.7, 1370.0], [70.8, 1377.0], [70.9, 1377.0], [71.0, 1377.0], [71.1, 1377.0], [71.2, 1377.0], [71.3, 1382.0], [71.4, 1382.0], [71.5, 1382.0], [71.6, 1382.0], [71.7, 1382.0], [71.8, 1389.0], [71.9, 1389.0], [72.0, 1389.0], [72.1, 1389.0], [72.2, 1389.0], [72.3, 1389.0], [72.4, 1395.0], [72.5, 1395.0], [72.6, 1395.0], [72.7, 1395.0], [72.8, 1395.0], [72.9, 1430.0], [73.0, 1430.0], [73.1, 1430.0], [73.2, 1430.0], [73.3, 1430.0], [73.4, 1444.0], [73.5, 1444.0], [73.6, 1444.0], [73.7, 1444.0], [73.8, 1444.0], [73.9, 1459.0], [74.0, 1459.0], [74.1, 1459.0], [74.2, 1459.0], [74.3, 1459.0], [74.4, 1460.0], [74.5, 1460.0], [74.6, 1460.0], [74.7, 1460.0], [74.8, 1460.0], [74.9, 1467.0], [75.0, 1467.0], [75.1, 1467.0], [75.2, 1467.0], [75.3, 1467.0], [75.4, 1472.0], [75.5, 1472.0], [75.6, 1472.0], [75.7, 1472.0], [75.8, 1472.0], [75.9, 1476.0], [76.0, 1476.0], [76.1, 1476.0], [76.2, 1476.0], [76.3, 1476.0], [76.4, 1476.0], [76.5, 1477.0], [76.6, 1477.0], [76.7, 1477.0], [76.8, 1477.0], [76.9, 1477.0], [77.0, 1499.0], [77.1, 1499.0], [77.2, 1499.0], [77.3, 1499.0], [77.4, 1499.0], [77.5, 1513.0], [77.6, 1513.0], [77.7, 1513.0], [77.8, 1513.0], [77.9, 1513.0], [78.0, 1525.0], [78.1, 1525.0], [78.2, 1525.0], [78.3, 1525.0], [78.4, 1525.0], [78.5, 1530.0], [78.6, 1530.0], [78.7, 1530.0], [78.8, 1530.0], [78.9, 1530.0], [79.0, 1531.0], [79.1, 1531.0], [79.2, 1531.0], [79.3, 1531.0], [79.4, 1531.0], [79.5, 1572.0], [79.6, 1572.0], [79.7, 1572.0], [79.8, 1572.0], [79.9, 1572.0], [80.0, 1612.0], [80.1, 1612.0], [80.2, 1612.0], [80.3, 1612.0], [80.4, 1612.0], [80.5, 1612.0], [80.6, 1616.0], [80.7, 1616.0], [80.8, 1616.0], [80.9, 1616.0], [81.0, 1616.0], [81.1, 1647.0], [81.2, 1647.0], [81.3, 1647.0], [81.4, 1647.0], [81.5, 1647.0], [81.6, 1649.0], [81.7, 1649.0], [81.8, 1649.0], [81.9, 1649.0], [82.0, 1649.0], [82.1, 1652.0], [82.2, 1652.0], [82.3, 1652.0], [82.4, 1652.0], [82.5, 1652.0], [82.6, 1680.0], [82.7, 1680.0], [82.8, 1680.0], [82.9, 1680.0], [83.0, 1680.0], [83.1, 1696.0], [83.2, 1696.0], [83.3, 1696.0], [83.4, 1696.0], [83.5, 1696.0], [83.6, 1702.0], [83.7, 1702.0], [83.8, 1702.0], [83.9, 1702.0], [84.0, 1702.0], [84.1, 1702.0], [84.2, 1733.0], [84.3, 1733.0], [84.4, 1733.0], [84.5, 1733.0], [84.6, 1733.0], [84.7, 1768.0], [84.8, 1768.0], [84.9, 1768.0], [85.0, 1768.0], [85.1, 1768.0], [85.2, 1775.0], [85.3, 1775.0], [85.4, 1775.0], [85.5, 1775.0], [85.6, 1775.0], [85.7, 1811.0], [85.8, 1811.0], [85.9, 1811.0], [86.0, 1811.0], [86.1, 1811.0], [86.2, 1813.0], [86.3, 1813.0], [86.4, 1813.0], [86.5, 1813.0], [86.6, 1813.0], [86.7, 1835.0], [86.8, 1835.0], [86.9, 1835.0], [87.0, 1835.0], [87.1, 1835.0], [87.2, 1852.0], [87.3, 1852.0], [87.4, 1852.0], [87.5, 1852.0], [87.6, 1852.0], [87.7, 1873.0], [87.8, 1873.0], [87.9, 1873.0], [88.0, 1873.0], [88.1, 1873.0], [88.2, 1873.0], [88.3, 1874.0], [88.4, 1874.0], [88.5, 1874.0], [88.6, 1874.0], [88.7, 1874.0], [88.8, 1905.0], [88.9, 1905.0], [89.0, 1905.0], [89.1, 1905.0], [89.2, 1905.0], [89.3, 1946.0], [89.4, 1946.0], [89.5, 1946.0], [89.6, 1946.0], [89.7, 1946.0], [89.8, 1971.0], [89.9, 1971.0], [90.0, 1971.0], [90.1, 1971.0], [90.2, 1971.0], [90.3, 2036.0], [90.4, 2036.0], [90.5, 2036.0], [90.6, 2036.0], [90.7, 2036.0], [90.8, 2078.0], [90.9, 2078.0], [91.0, 2078.0], [91.1, 2078.0], [91.2, 2078.0], [91.3, 2098.0], [91.4, 2098.0], [91.5, 2098.0], [91.6, 2098.0], [91.7, 2098.0], [91.8, 2360.0], [91.9, 2360.0], [92.0, 2360.0], [92.1, 2360.0], [92.2, 2360.0], [92.3, 2360.0], [92.4, 2396.0], [92.5, 2396.0], [92.6, 2396.0], [92.7, 2396.0], [92.8, 2396.0], [92.9, 2450.0], [93.0, 2450.0], [93.1, 2450.0], [93.2, 2450.0], [93.3, 2450.0], [93.4, 2557.0], [93.5, 2557.0], [93.6, 2557.0], [93.7, 2557.0], [93.8, 2557.0], [93.9, 2597.0], [94.0, 2597.0], [94.1, 2597.0], [94.2, 2597.0], [94.3, 2597.0], [94.4, 2658.0], [94.5, 2658.0], [94.6, 2658.0], [94.7, 2658.0], [94.8, 2658.0], [94.9, 2688.0], [95.0, 2688.0], [95.1, 2688.0], [95.2, 2688.0], [95.3, 2688.0], [95.4, 2898.0], [95.5, 2898.0], [95.6, 2898.0], [95.7, 2898.0], [95.8, 2898.0], [95.9, 2947.0], [96.0, 2947.0], [96.1, 2947.0], [96.2, 2947.0], [96.3, 2947.0], [96.4, 2947.0], [96.5, 2986.0], [96.6, 2986.0], [96.7, 2986.0], [96.8, 2986.0], [96.9, 2986.0], [97.0, 3036.0], [97.1, 3036.0], [97.2, 3036.0], [97.3, 3036.0], [97.4, 3036.0], [97.5, 3095.0], [97.6, 3095.0], [97.7, 3095.0], [97.8, 3095.0], [97.9, 3095.0], [98.0, 3533.0], [98.1, 3533.0], [98.2, 3533.0], [98.3, 3533.0], [98.4, 3533.0], [98.5, 3659.0], [98.6, 3659.0], [98.7, 3659.0], [98.8, 3659.0], [98.9, 3659.0], [99.0, 3981.0], [99.1, 3981.0], [99.2, 3981.0], [99.3, 3981.0], [99.4, 3981.0], [99.5, 4203.0], [99.6, 4203.0], [99.7, 4203.0], [99.8, 4203.0], [99.9, 4203.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 1.0], [41.8, 1.0], [41.9, 1.0], [42.0, 1.0], [42.1, 1.0], [42.2, 1.0], [42.3, 1.0], [42.4, 1.0], [42.5, 1.0], [42.6, 1.0], [42.7, 1.0], [42.8, 1.0], [42.9, 1.0], [43.0, 1.0], [43.1, 1.0], [43.2, 1.0], [43.3, 1.0], [43.4, 1.0], [43.5, 1.0], [43.6, 1.0], [43.7, 1.0], [43.8, 1.0], [43.9, 1.0], [44.0, 1.0], [44.1, 1.0], [44.2, 1.0], [44.3, 1.0], [44.4, 1.0], [44.5, 1.0], [44.6, 1.0], [44.7, 1.0], [44.8, 1.0], [44.9, 1.0], [45.0, 1.0], [45.1, 1.0], [45.2, 1.0], [45.3, 1.0], [45.4, 1.0], [45.5, 1.0], [45.6, 1.0], [45.7, 1.0], [45.8, 1.0], [45.9, 1.0], [46.0, 1.0], [46.1, 1.0], [46.2, 1.0], [46.3, 1.0], [46.4, 1.0], [46.5, 1.0], [46.6, 1.0], [46.7, 1.0], [46.8, 1.0], [46.9, 1.0], [47.0, 1.0], [47.1, 1.0], [47.2, 1.0], [47.3, 1.0], [47.4, 1.0], [47.5, 1.0], [47.6, 1.0], [47.7, 1.0], [47.8, 1.0], [47.9, 1.0], [48.0, 1.0], [48.1, 1.0], [48.2, 1.0], [48.3, 1.0], [48.4, 1.0], [48.5, 1.0], [48.6, 1.0], [48.7, 1.0], [48.8, 1.0], [48.9, 1.0], [49.0, 1.0], [49.1, 1.0], [49.2, 1.0], [49.3, 1.0], [49.4, 1.0], [49.5, 1.0], [49.6, 1.0], [49.7, 1.0], [49.8, 1.0], [49.9, 1.0], [50.0, 1.0], [50.1, 1.0], [50.2, 1.0], [50.3, 1.0], [50.4, 1.0], [50.5, 1.0], [50.6, 1.0], [50.7, 1.0], [50.8, 1.0], [50.9, 1.0], [51.0, 1.0], [51.1, 1.0], [51.2, 1.0], [51.3, 1.0], [51.4, 1.0], [51.5, 1.0], [51.6, 1.0], [51.7, 1.0], [51.8, 1.0], [51.9, 1.0], [52.0, 1.0], [52.1, 1.0], [52.2, 1.0], [52.3, 1.0], [52.4, 1.0], [52.5, 1.0], [52.6, 1.0], [52.7, 1.0], [52.8, 1.0], [52.9, 1.0], [53.0, 1.0], [53.1, 1.0], [53.2, 1.0], [53.3, 1.0], [53.4, 1.0], [53.5, 1.0], [53.6, 1.0], [53.7, 1.0], [53.8, 1.0], [53.9, 1.0], [54.0, 1.0], [54.1, 1.0], [54.2, 1.0], [54.3, 1.0], [54.4, 1.0], [54.5, 1.0], [54.6, 1.0], [54.7, 1.0], [54.8, 1.0], [54.9, 1.0], [55.0, 1.0], [55.1, 1.0], [55.2, 1.0], [55.3, 1.0], [55.4, 1.0], [55.5, 1.0], [55.6, 1.0], [55.7, 1.0], [55.8, 1.0], [55.9, 1.0], [56.0, 1.0], [56.1, 1.0], [56.2, 1.0], [56.3, 1.0], [56.4, 1.0], [56.5, 1.0], [56.6, 1.0], [56.7, 1.0], [56.8, 1.0], [56.9, 1.0], [57.0, 1.0], [57.1, 1.0], [57.2, 1.0], [57.3, 1.0], [57.4, 1.0], [57.5, 1.0], [57.6, 1.0], [57.7, 1.0], [57.8, 1.0], [57.9, 1.0], [58.0, 1.0], [58.1, 1.0], [58.2, 1.0], [58.3, 1.0], [58.4, 1.0], [58.5, 1.0], [58.6, 1.0], [58.7, 1.0], [58.8, 1.0], [58.9, 1.0], [59.0, 1.0], [59.1, 1.0], [59.2, 1.0], [59.3, 1.0], [59.4, 1.0], [59.5, 1.0], [59.6, 1.0], [59.7, 1.0], [59.8, 1.0], [59.9, 1.0], [60.0, 1.0], [60.1, 1.0], [60.2, 1.0], [60.3, 1.0], [60.4, 1.0], [60.5, 1.0], [60.6, 1.0], [60.7, 1.0], [60.8, 1.0], [60.9, 1.0], [61.0, 1.0], [61.1, 1.0], [61.2, 1.0], [61.3, 1.0], [61.4, 2.0], [61.5, 2.0], [61.6, 2.0], [61.7, 2.0], [61.8, 2.0], [61.9, 2.0], [62.0, 2.0], [62.1, 2.0], [62.2, 2.0], [62.3, 2.0], [62.4, 2.0], [62.5, 2.0], [62.6, 2.0], [62.7, 2.0], [62.8, 2.0], [62.9, 2.0], [63.0, 2.0], [63.1, 2.0], [63.2, 2.0], [63.3, 2.0], [63.4, 2.0], [63.5, 2.0], [63.6, 2.0], [63.7, 2.0], [63.8, 2.0], [63.9, 2.0], [64.0, 2.0], [64.1, 2.0], [64.2, 2.0], [64.3, 2.0], [64.4, 2.0], [64.5, 2.0], [64.6, 2.0], [64.7, 2.0], [64.8, 2.0], [64.9, 2.0], [65.0, 2.0], [65.1, 2.0], [65.2, 2.0], [65.3, 2.0], [65.4, 2.0], [65.5, 2.0], [65.6, 2.0], [65.7, 2.0], [65.8, 2.0], [65.9, 2.0], [66.0, 2.0], [66.1, 2.0], [66.2, 2.0], [66.3, 2.0], [66.4, 2.0], [66.5, 2.0], [66.6, 2.0], [66.7, 2.0], [66.8, 2.0], [66.9, 2.0], [67.0, 2.0], [67.1, 3.0], [67.2, 3.0], [67.3, 3.0], [67.4, 3.0], [67.5, 3.0], [67.6, 3.0], [67.7, 3.0], [67.8, 3.0], [67.9, 4.0], [68.0, 4.0], [68.1, 4.0], [68.2, 4.0], [68.3, 4.0], [68.4, 4.0], [68.5, 5.0], [68.6, 5.0], [68.7, 5.0], [68.8, 6.0], [68.9, 7.0], [69.0, 9.0], [69.1, 13.0], [69.2, 22.0], [69.3, 34.0], [69.4, 37.0], [69.5, 40.0], [69.6, 42.0], [69.7, 44.0], [69.8, 46.0], [69.9, 47.0], [70.0, 48.0], [70.1, 50.0], [70.2, 51.0], [70.3, 53.0], [70.4, 54.0], [70.5, 56.0], [70.6, 60.0], [70.7, 62.0], [70.8, 64.0], [70.9, 66.0], [71.0, 69.0], [71.1, 76.0], [71.2, 81.0], [71.3, 90.0], [71.4, 102.0], [71.5, 123.0], [71.6, 155.0], [71.7, 228.0], [71.8, 350.0], [71.9, 451.0], [72.0, 508.0], [72.1, 589.0], [72.2, 646.0], [72.3, 675.0], [72.4, 715.0], [72.5, 746.0], [72.6, 777.0], [72.7, 802.0], [72.8, 834.0], [72.9, 866.0], [73.0, 896.0], [73.1, 915.0], [73.2, 940.0], [73.3, 968.0], [73.4, 992.0], [73.5, 1011.0], [73.6, 1041.0], [73.7, 1056.0], [73.8, 1083.0], [73.9, 1120.0], [74.0, 1146.0], [74.1, 1168.0], [74.2, 1191.0], [74.3, 1217.0], [74.4, 1237.0], [74.5, 1266.0], [74.6, 1280.0], [74.7, 1299.0], [74.8, 1317.0], [74.9, 1333.0], [75.0, 1358.0], [75.1, 1387.0], [75.2, 1405.0], [75.3, 1420.0], [75.4, 1439.0], [75.5, 1450.0], [75.6, 1468.0], [75.7, 1484.0], [75.8, 1497.0], [75.9, 1513.0], [76.0, 1528.0], [76.1, 1543.0], [76.2, 1554.0], [76.3, 1569.0], [76.4, 1585.0], [76.5, 1594.0], [76.6, 1609.0], [76.7, 1622.0], [76.8, 1634.0], [76.9, 1651.0], [77.0, 1661.0], [77.1, 1676.0], [77.2, 1689.0], [77.3, 1707.0], [77.4, 1714.0], [77.5, 1728.0], [77.6, 1739.0], [77.7, 1752.0], [77.8, 1762.0], [77.9, 1775.0], [78.0, 1785.0], [78.1, 1796.0], [78.2, 1802.0], [78.3, 1817.0], [78.4, 1830.0], [78.5, 1842.0], [78.6, 1854.0], [78.7, 1874.0], [78.8, 1885.0], [78.9, 1897.0], [79.0, 1913.0], [79.1, 1931.0], [79.2, 1946.0], [79.3, 1958.0], [79.4, 1972.0], [79.5, 1980.0], [79.6, 1992.0], [79.7, 2008.0], [79.8, 2027.0], [79.9, 2042.0], [80.0, 2055.0], [80.1, 2066.0], [80.2, 2078.0], [80.3, 2100.0], [80.4, 2113.0], [80.5, 2129.0], [80.6, 2144.0], [80.7, 2166.0], [80.8, 2190.0], [80.9, 2203.0], [81.0, 2221.0], [81.1, 2239.0], [81.2, 2249.0], [81.3, 2264.0], [81.4, 2282.0], [81.5, 2302.0], [81.6, 2317.0], [81.7, 2333.0], [81.8, 2351.0], [81.9, 2372.0], [82.0, 2385.0], [82.1, 2395.0], [82.2, 2415.0], [82.3, 2431.0], [82.4, 2441.0], [82.5, 2454.0], [82.6, 2477.0], [82.7, 2488.0], [82.8, 2501.0], [82.9, 2512.0], [83.0, 2525.0], [83.1, 2536.0], [83.2, 2550.0], [83.3, 2558.0], [83.4, 2569.0], [83.5, 2579.0], [83.6, 2594.0], [83.7, 2607.0], [83.8, 2619.0], [83.9, 2633.0], [84.0, 2652.0], [84.1, 2666.0], [84.2, 2679.0], [84.3, 2693.0], [84.4, 2704.0], [84.5, 2721.0], [84.6, 2732.0], [84.7, 2741.0], [84.8, 2753.0], [84.9, 2772.0], [85.0, 2787.0], [85.1, 2801.0], [85.2, 2810.0], [85.3, 2823.0], [85.4, 2835.0], [85.5, 2845.0], [85.6, 2859.0], [85.7, 2868.0], [85.8, 2876.0], [85.9, 2884.0], [86.0, 2896.0], [86.1, 2906.0], [86.2, 2920.0], [86.3, 2929.0], [86.4, 2936.0], [86.5, 2946.0], [86.6, 2956.0], [86.7, 2970.0], [86.8, 2976.0], [86.9, 2988.0], [87.0, 2999.0], [87.1, 3004.0], [87.2, 3005.0], [87.3, 3006.0], [87.4, 3008.0], [87.5, 3017.0], [87.6, 3027.0], [87.7, 3039.0], [87.8, 3050.0], [87.9, 3063.0], [88.0, 3072.0], [88.1, 3082.0], [88.2, 3090.0], [88.3, 3103.0], [88.4, 3113.0], [88.5, 3123.0], [88.6, 3132.0], [88.7, 3146.0], [88.8, 3160.0], [88.9, 3173.0], [89.0, 3186.0], [89.1, 3197.0], [89.2, 3209.0], [89.3, 3226.0], [89.4, 3238.0], [89.5, 3250.0], [89.6, 3264.0], [89.7, 3282.0], [89.8, 3295.0], [89.9, 3313.0], [90.0, 3326.0], [90.1, 3341.0], [90.2, 3352.0], [90.3, 3374.0], [90.4, 3386.0], [90.5, 3405.0], [90.6, 3415.0], [90.7, 3436.0], [90.8, 3459.0], [90.9, 3482.0], [91.0, 3500.0], [91.1, 3521.0], [91.2, 3538.0], [91.3, 3554.0], [91.4, 3576.0], [91.5, 3605.0], [91.6, 3626.0], [91.7, 3650.0], [91.8, 3663.0], [91.9, 3678.0], [92.0, 3694.0], [92.1, 3709.0], [92.2, 3727.0], [92.3, 3743.0], [92.4, 3756.0], [92.5, 3767.0], [92.6, 3784.0], [92.7, 3802.0], [92.8, 3816.0], [92.9, 3829.0], [93.0, 3847.0], [93.1, 3858.0], [93.2, 3875.0], [93.3, 3900.0], [93.4, 3914.0], [93.5, 3933.0], [93.6, 3949.0], [93.7, 3965.0], [93.8, 3981.0], [93.9, 4002.0], [94.0, 4018.0], [94.1, 4033.0], [94.2, 4047.0], [94.3, 4065.0], [94.4, 4082.0], [94.5, 4110.0], [94.6, 4122.0], [94.7, 4140.0], [94.8, 4162.0], [94.9, 4190.0], [95.0, 4206.0], [95.1, 4226.0], [95.2, 4240.0], [95.3, 4261.0], [95.4, 4279.0], [95.5, 4307.0], [95.6, 4326.0], [95.7, 4346.0], [95.8, 4364.0], [95.9, 4376.0], [96.0, 4404.0], [96.1, 4426.0], [96.2, 4449.0], [96.3, 4479.0], [96.4, 4531.0], [96.5, 4560.0], [96.6, 4590.0], [96.7, 4616.0], [96.8, 4641.0], [96.9, 4674.0], [97.0, 4706.0], [97.1, 4734.0], [97.2, 4766.0], [97.3, 4792.0], [97.4, 4834.0], [97.5, 4872.0], [97.6, 4908.0], [97.7, 4943.0], [97.8, 4974.0], [97.9, 5009.0], [98.0, 5046.0], [98.1, 5102.0], [98.2, 5137.0], [98.3, 5201.0], [98.4, 5274.0], [98.5, 5340.0], [98.6, 5419.0], [98.7, 5603.0], [98.8, 5781.0], [98.9, 6398.0], [99.0, 7805.0], [99.1, 12006.0], [99.2, 12007.0], [99.3, 16008.0], [99.4, 20005.0], [99.5, 20005.0], [99.6, 20005.0], [99.7, 20005.0], [99.8, 20006.0], [99.9, 20006.0], [100.0, 20007.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 14432.0, "series": [{"data": [[0.0, 14432.0], [600.0, 31.0], [700.0, 40.0], [800.0, 42.0], [900.0, 67.0], [1000.0, 83.0], [1100.0, 74.0], [1200.0, 105.0], [1300.0, 96.0], [1400.0, 118.0], [1500.0, 116.0], [1600.0, 126.0], [1700.0, 140.0], [1800.0, 126.0], [1900.0, 108.0], [2000.0, 126.0], [2100.0, 99.0], [2300.0, 133.0], [2200.0, 124.0], [2400.0, 121.0], [2500.0, 124.0], [2600.0, 161.0], [2800.0, 156.0], [2700.0, 168.0], [2900.0, 202.0], [3000.0, 203.0], [3100.0, 171.0], [3300.0, 140.0], [3200.0, 138.0], [3400.0, 87.0], [3500.0, 98.0], [3700.0, 88.0], [3600.0, 102.0], [3800.0, 95.0], [3900.0, 116.0], [4000.0, 109.0], [4200.0, 103.0], [4100.0, 119.0], [4300.0, 108.0], [4500.0, 75.0], [4600.0, 71.0], [4400.0, 90.0], [4700.0, 50.0], [4800.0, 47.0], [4900.0, 45.0], [5100.0, 37.0], [5000.0, 41.0], [5200.0, 35.0], [5300.0, 19.0], [5400.0, 13.0], [5600.0, 11.0], [5500.0, 16.0], [5700.0, 9.0], [5800.0, 5.0], [6000.0, 2.0], [6100.0, 1.0], [5900.0, 1.0], [6200.0, 1.0], [6600.0, 1.0], [100.0, 51.0], [200.0, 18.0], [300.0, 17.0], [400.0, 20.0], [500.0, 29.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[600.0, 4.0], [700.0, 2.0], [800.0, 3.0], [900.0, 8.0], [1000.0, 6.0], [1100.0, 6.0], [1200.0, 8.0], [1300.0, 8.0], [1400.0, 9.0], [1500.0, 5.0], [100.0, 20.0], [1600.0, 7.0], [1700.0, 4.0], [1800.0, 6.0], [1900.0, 3.0], [2000.0, 3.0], [2300.0, 2.0], [2400.0, 1.0], [2500.0, 2.0], [2600.0, 2.0], [2800.0, 1.0], [2900.0, 2.0], [3000.0, 2.0], [200.0, 42.0], [3500.0, 1.0], [3600.0, 1.0], [3900.0, 1.0], [4200.0, 1.0], [300.0, 14.0], [400.0, 11.0], [500.0, 10.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 13920.0], [600.0, 43.0], [700.0, 67.0], [800.0, 65.0], [900.0, 79.0], [1000.0, 80.0], [1100.0, 74.0], [1200.0, 94.0], [1300.0, 93.0], [1400.0, 123.0], [1500.0, 143.0], [1600.0, 140.0], [1700.0, 175.0], [1800.0, 149.0], [1900.0, 141.0], [2000.0, 127.0], [2100.0, 113.0], [2200.0, 120.0], [2300.0, 125.0], [2400.0, 126.0], [2500.0, 169.0], [2600.0, 141.0], [2800.0, 185.0], [2700.0, 139.0], [2900.0, 190.0], [3000.0, 245.0], [3100.0, 166.0], [3200.0, 141.0], [3300.0, 125.0], [3400.0, 101.0], [3500.0, 95.0], [3600.0, 106.0], [3700.0, 128.0], [3800.0, 120.0], [3900.0, 115.0], [4000.0, 114.0], [4100.0, 94.0], [4200.0, 100.0], [4300.0, 101.0], [4600.0, 68.0], [4500.0, 61.0], [4400.0, 64.0], [4700.0, 65.0], [4800.0, 52.0], [5000.0, 46.0], [4900.0, 56.0], [5100.0, 39.0], [5300.0, 30.0], [5200.0, 27.0], [5600.0, 12.0], [5500.0, 8.0], [5400.0, 12.0], [5700.0, 11.0], [5800.0, 4.0], [6100.0, 2.0], [5900.0, 5.0], [6300.0, 6.0], [6200.0, 1.0], [6400.0, 3.0], [6500.0, 1.0], [6600.0, 2.0], [6700.0, 7.0], [7100.0, 1.0], [7300.0, 2.0], [7700.0, 2.0], [7800.0, 1.0], [12000.0, 45.0], [16000.0, 16.0], [20000.0, 134.0], [100.0, 58.0], [200.0, 10.0], [300.0, 23.0], [400.0, 27.0], [500.0, 27.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1480.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 26967.0, "series": [{"data": [[0.0, 2082.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1480.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 8666.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 26967.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 19.351851851851855, "minX": 1.58543706E12, "maxY": 195.0, "series": [{"data": [[1.5854376E12, 194.89424622307936], [1.58543712E12, 126.41183986371392], [1.5854373E12, 195.0], [1.58543748E12, 195.0], [1.58543766E12, 137.7808310991956], [1.58543718E12, 195.0], [1.58543736E12, 195.0], [1.58543754E12, 195.0], [1.58543706E12, 19.351851851851855], [1.58543724E12, 195.0], [1.58543742E12, 195.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543766E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 3273.714285714286, "series": [{"data": [[6.0, 1.5], [10.0, 1.5], [11.0, 1.3333333333333333], [12.0, 1.5], [13.0, 1.3333333333333333], [16.0, 1.0], [17.0, 1.0], [18.0, 2.0], [22.0, 37.333333333333336], [23.0, 45.2], [24.0, 32.5], [25.0, 9.909090909090907], [26.0, 20.2], [27.0, 20.0], [28.0, 42.0], [29.0, 17.0], [33.0, 1008.5], [32.0, 1.0], [34.0, 72.0], [35.0, 134.0], [36.0, 35.285714285714285], [37.0, 44.0], [38.0, 65.5], [39.0, 35.66666666666667], [40.0, 22.181818181818183], [41.0, 13.666666666666668], [43.0, 45.0], [42.0, 2.0], [45.0, 31.77777777777778], [44.0, 1.0], [46.0, 55.333333333333336], [47.0, 55.0], [48.0, 9.719999999999997], [49.0, 56.875], [50.0, 36.77777777777778], [51.0, 49.666666666666664], [52.0, 30.5], [53.0, 31.200000000000003], [54.0, 11.083333333333334], [55.0, 60.0], [56.0, 19.8], [57.0, 58.75], [58.0, 33.42857142857142], [59.0, 67.6], [60.0, 50.714285714285715], [61.0, 31.142857142857146], [62.0, 51.8], [63.0, 33.44444444444444], [64.0, 29.538461538461533], [65.0, 44.75], [66.0, 34.0], [67.0, 8.142857142857144], [68.0, 91.2], [69.0, 41.4], [70.0, 37.5], [71.0, 26.857142857142858], [72.0, 42.1], [73.0, 52.333333333333336], [74.0, 38.347826086956516], [75.0, 24.949999999999996], [76.0, 21.666666666666664], [77.0, 27.16666666666668], [78.0, 26.16666666666667], [79.0, 42.375], [80.0, 21.200000000000003], [81.0, 24.36363636363636], [82.0, 53.142857142857146], [83.0, 11.249999999999998], [84.0, 75.57142857142857], [85.0, 26.78571428571428], [86.0, 46.090909090909086], [87.0, 14.857142857142858], [88.0, 48.25], [89.0, 84.11111111111111], [90.0, 32.31249999999999], [91.0, 48.0], [92.0, 34.42857142857143], [93.0, 28.444444444444443], [94.0, 10.57142857142857], [95.0, 28.333333333333336], [96.0, 17.071428571428573], [97.0, 35.81818181818183], [98.0, 31.407407407407412], [99.0, 63.27272727272726], [100.0, 29.78947368421053], [101.0, 45.1], [102.0, 54.625], [103.0, 45.46666666666666], [104.0, 55.0], [105.0, 69.0909090909091], [106.0, 104.36363636363637], [107.0, 1.4], [108.0, 206.9411764705882], [109.0, 119.83870967741939], [110.0, 211.9090909090909], [111.0, 1.0], [112.0, 482.31818181818164], [113.0, 329.2727272727273], [114.0, 524.1818181818181], [115.0, 473.125], [116.0, 537.9999999999999], [117.0, 909.8], [118.0, 670.125], [119.0, 869.0555555555557], [120.0, 301.375], [121.0, 247.1724137931035], [122.0, 523.4210526315788], [123.0, 350.7857142857143], [124.0, 636.1666666666667], [125.0, 596.5882352941177], [126.0, 72.55555555555554], [127.0, 338.25], [128.0, 513.909090909091], [129.0, 411.1904761904761], [130.0, 25.27999999999999], [131.0, 92.83783783783781], [132.0, 448.0769230769231], [133.0, 1118.4285714285716], [134.0, 1320.25], [135.0, 875.7], [136.0, 210.41666666666666], [137.0, 1060.8571428571427], [138.0, 942.6], [139.0, 773.1538461538462], [140.0, 1213.375], [141.0, 653.9375000000001], [142.0, 456.75000000000006], [143.0, 274.29032258064507], [144.0, 944.0], [145.0, 455.52], [146.0, 634.8823529411764], [147.0, 244.5882352941177], [148.0, 1828.7777777777778], [149.0, 416.8333333333333], [150.0, 792.4285714285713], [151.0, 849.7142857142858], [152.0, 698.2307692307693], [153.0, 772.2666666666665], [154.0, 101.56756756756758], [155.0, 373.3333333333333], [156.0, 1253.3076923076924], [157.0, 1723.3333333333333], [158.0, 1484.8333333333335], [159.0, 986.2727272727273], [160.0, 263.42105263157896], [161.0, 183.81250000000003], [162.0, 348.7916666666665], [163.0, 820.6521739130437], [164.0, 219.77777777777777], [165.0, 269.16666666666663], [166.0, 815.1363636363634], [167.0, 124.86440677966101], [168.0, 1059.25], [169.0, 1020.0000000000001], [170.0, 982.1304347826087], [171.0, 1964.6666666666667], [172.0, 104.13043478260876], [173.0, 1209.7222222222226], [174.0, 406.82608695652175], [175.0, 556.181818181818], [176.0, 1261.25], [177.0, 506.09090909090907], [178.0, 352.57142857142867], [179.0, 1031.5555555555557], [180.0, 855.6666666666667], [181.0, 177.58064516129036], [182.0, 1891.0], [183.0, 568.1111111111111], [185.0, 151.69736842105263], [186.0, 2018.6999999999998], [187.0, 489.3939393939394], [188.0, 1486.0], [189.0, 168.10344827586215], [190.0, 509.83783783783804], [191.0, 880.7894736842105], [184.0, 1.01980198019802], [192.0, 505.8947368421054], [193.0, 127.02380952380949], [194.0, 51.16666666666669], [195.0, 806.1563001247564], [1.0, 1.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[186.7232820512829, 738.0041538461531]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[14.0, 3273.714285714286], [15.0, 2104.0], [16.0, 1965.0], [17.0, 1154.6666666666667], [18.0, 953.0], [19.0, 651.0], [20.0, 308.5], [21.0, 197.0], [23.0, 210.0], [26.0, 254.0], [27.0, 880.75], [30.0, 447.0], [31.0, 193.0], [32.0, 259.0], [34.0, 344.0], [35.0, 419.0], [36.0, 339.0], [37.0, 246.0], [38.0, 173.0], [39.0, 173.0], [40.0, 255.0], [41.0, 227.0], [42.0, 164.0], [43.0, 219.0], [44.0, 207.0], [45.0, 201.0], [46.0, 309.0], [47.0, 201.0], [48.0, 223.0], [49.0, 178.0], [50.0, 252.0], [51.0, 194.0], [52.0, 180.0], [53.0, 297.0], [54.0, 293.0], [56.0, 354.0], [57.0, 272.0], [58.0, 271.0], [59.0, 195.0], [60.0, 182.0], [61.0, 229.0], [62.0, 225.0], [63.0, 218.0], [64.0, 172.0], [65.0, 251.0], [66.0, 214.0], [68.0, 574.0], [69.0, 298.0], [70.0, 193.0], [71.0, 194.0], [73.0, 378.0], [74.0, 463.0], [75.0, 290.0], [76.0, 171.0], [77.0, 218.0], [78.0, 197.0], [79.0, 183.0], [81.0, 290.5], [82.0, 215.0], [83.0, 200.0], [84.0, 257.0], [86.0, 291.0], [88.0, 494.0], [89.0, 359.0], [90.0, 260.0], [91.0, 290.0], [92.0, 281.0], [93.0, 279.0], [94.0, 235.0], [96.0, 317.0], [98.0, 336.0], [99.0, 390.0], [100.0, 255.5], [101.0, 240.0], [103.0, 444.0], [104.0, 625.0], [105.0, 519.0], [106.0, 519.0], [107.0, 578.0], [108.0, 571.0], [109.0, 386.0], [111.0, 343.0], [112.0, 490.0], [114.0, 586.5], [116.0, 967.0], [118.0, 1115.0], [119.0, 1175.0], [120.0, 1054.0], [121.0, 981.0], [122.0, 714.5], [123.0, 947.0], [124.0, 476.0], [125.0, 268.5], [127.0, 423.0], [129.0, 672.5], [130.0, 565.0], [132.0, 639.0], [134.0, 956.0], [135.0, 969.0], [136.0, 1037.0], [137.0, 1212.0], [138.0, 969.0], [140.0, 1370.0], [141.0, 1382.0], [142.0, 1340.0], [144.0, 1510.5], [145.0, 1287.0], [147.0, 1516.0], [148.0, 1241.0], [149.0, 1049.0], [153.0, 1616.0], [154.0, 1459.0], [155.0, 1389.0], [156.0, 1395.0], [157.0, 1337.0], [158.0, 1089.6666666666667], [160.0, 1116.0], [163.0, 1105.0], [164.0, 1670.5], [165.0, 1472.0], [166.0, 1444.0], [169.0, 1874.0], [170.0, 1651.0], [171.0, 1873.0], [172.0, 1768.0], [173.0, 1647.0], [174.0, 1649.0], [175.0, 1702.0], [176.0, 1525.0], [178.0, 1758.5], [179.0, 1480.5], [180.0, 1377.0], [181.0, 1269.0], [183.0, 1477.0], [184.0, 1357.5], [186.0, 1616.0], [188.0, 1775.0], [189.0, 1813.0], [190.0, 1946.0], [192.0, 1971.0], [194.0, 2450.0], [195.0, 2602.6666666666665]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[100.40512820512825, 963.5794871794868]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[10.0, 1.0], [11.0, 2.0], [12.0, 1.0], [13.0, 1.0], [17.0, 45.0], [18.0, 112.5], [19.0, 123.42857142857144], [20.0, 65.0], [21.0, 53.75], [22.0, 23.0], [23.0, 33.25], [24.0, 54.0], [25.0, 13.666666666666668], [26.0, 1.0], [27.0, 2.0], [28.0, 54.0], [30.0, 45.5], [31.0, 57.8], [32.0, 593.0], [33.0, 222.69230769230768], [34.0, 24.374999999999996], [35.0, 74.0], [36.0, 39.75], [37.0, 54.0], [39.0, 51.0], [38.0, 1.0], [40.0, 16.166666666666664], [41.0, 44.0], [42.0, 53.0], [43.0, 48.666666666666664], [44.0, 40.4], [45.0, 39.75], [46.0, 55.875], [47.0, 47.4], [48.0, 19.529411764705884], [49.0, 34.714285714285715], [50.0, 20.5], [51.0, 40.0], [52.0, 12.555555555555557], [53.0, 28.57894736842105], [54.0, 37.25], [55.0, 158.0], [56.0, 34.21052631578947], [57.0, 52.0], [58.0, 52.333333333333336], [59.0, 63.8], [60.0, 45.285714285714285], [61.0, 34.499999999999986], [62.0, 48.2], [63.0, 24.75], [64.0, 21.0], [65.0, 30.555555555555557], [66.0, 45.0], [67.0, 20.749999999999996], [68.0, 85.2], [69.0, 51.2], [70.0, 54.22222222222222], [71.0, 38.33333333333333], [72.0, 46.625], [73.0, 52.333333333333336], [74.0, 51.86666666666666], [75.0, 14.615384615384617], [76.0, 25.5], [77.0, 18.21052631578947], [78.0, 18.785714285714285], [79.0, 29.8], [80.0, 57.16666666666667], [81.0, 62.249999999999986], [82.0, 58.30769230769231], [83.0, 20.0], [84.0, 52.666666666666664], [85.0, 26.249999999999996], [86.0, 22.40000000000001], [87.0, 21.71428571428571], [88.0, 24.57142857142857], [89.0, 73.42857142857143], [90.0, 43.18181818181819], [91.0, 48.0], [92.0, 51.00000000000001], [93.0, 65.00000000000001], [94.0, 15.075000000000005], [95.0, 49.72727272727273], [96.0, 29.952380952380956], [97.0, 44.714285714285715], [98.0, 30.25925925925926], [99.0, 40.22222222222222], [100.0, 29.187499999999996], [101.0, 57.44444444444444], [102.0, 35.25], [103.0, 42.07142857142857], [104.0, 92.57142857142857], [105.0, 70.125], [106.0, 117.7894736842105], [107.0, 1.1666666666666667], [108.0, 86.8888888888889], [109.0, 279.2258064516129], [110.0, 333.24999999999994], [111.0, 208.86363636363637], [112.0, 204.58333333333337], [113.0, 725.0909090909092], [114.0, 449.0833333333333], [115.0, 383.125], [116.0, 807.0], [117.0, 1404.0], [118.0, 431.38461538461536], [119.0, 1131.8], [120.0, 226.66666666666663], [121.0, 287.969696969697], [122.0, 587.5], [123.0, 27.666666666666664], [124.0, 668.4666666666666], [125.0, 354.30000000000007], [126.0, 258.625], [127.0, 693.3333333333333], [128.0, 555.6153846153846], [129.0, 328.037037037037], [130.0, 248.24999999999994], [131.0, 177.24242424242428], [132.0, 531.6363636363635], [133.0, 1151.5], [134.0, 1323.8333333333333], [135.0, 1132.2727272727273], [136.0, 403.7222222222223], [137.0, 1186.4166666666667], [138.0, 607.8], [139.0, 565.6666666666667], [140.0, 1371.888888888889], [141.0, 669.9999999999999], [142.0, 658.0], [143.0, 472.2400000000003], [144.0, 554.2000000000002], [145.0, 158.24999999999997], [146.0, 321.7878787878788], [147.0, 774.1538461538462], [148.0, 1718.090909090909], [149.0, 411.55555555555543], [150.0, 481.9999999999999], [151.0, 824.0], [152.0, 867.25], [153.0, 1061.5000000000002], [154.0, 518.9062499999999], [155.0, 375.2608695652173], [156.0, 1214.6363636363637], [157.0, 1468.2], [158.0, 1751.6000000000004], [159.0, 1141.0], [160.0, 530.2413793103448], [161.0, 481.0], [162.0, 235.44736842105257], [163.0, 499.99999999999994], [164.0, 464.1333333333335], [165.0, 483.5249999999996], [166.0, 512.8571428571429], [167.0, 115.73469387755107], [168.0, 1209.8], [169.0, 1221.2727272727273], [170.0, 656.8], [171.0, 1745.0], [172.0, 128.76595744680853], [173.0, 980.6666666666667], [174.0, 257.19047619047626], [175.0, 488.2926829268291], [176.0, 1544.9444444444441], [177.0, 748.8666666666666], [178.0, 550.6153846153845], [179.0, 1077.8000000000002], [180.0, 1010.2500000000002], [181.0, 381.3636363636365], [182.0, 1256.0], [183.0, 1111.3478260869565], [184.0, 63.09401709401707], [185.0, 277.076923076923], [186.0, 1694.2], [187.0, 535.814814814815], [188.0, 1707.2], [189.0, 157.0333333333333], [190.0, 381.09756097560955], [191.0, 402.58333333333337], [192.0, 493.84210526315786], [193.0, 249.87012987012974], [194.0, 84.02395209580831], [195.0, 1051.5483045806104], [1.0, 1.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[186.68779487179378, 952.8183589743604]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 195.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.58543706E12, "maxY": 276703.86666666664, "series": [{"data": [[1.5854376E12, 214140.5], [1.58543712E12, 261573.53333333333], [1.5854373E12, 266473.7], [1.58543748E12, 214347.0], [1.58543766E12, 102699.33333333333], [1.58543718E12, 276703.86666666664], [1.58543736E12, 227711.58333333334], [1.58543754E12, 213417.75], [1.58543706E12, 4276.9], [1.58543724E12, 253924.73333333334], [1.58543742E12, 167299.41666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5854376E12, 0.0], [1.58543712E12, 16207.366666666667], [1.5854373E12, 16695.866666666665], [1.58543748E12, 0.0], [1.58543766E12, 0.0], [1.58543718E12, 18825.333333333332], [1.58543736E12, 17316.1], [1.58543754E12, 0.0], [1.58543706E12, 312.26666666666665], [1.58543724E12, 17759.633333333335], [1.58543742E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543766E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1.0215989684074818, "minX": 1.58543706E12, "maxY": 3189.9582245430834, "series": [{"data": [[1.5854376E12, 1.0327447833065837], [1.58543712E12, 1188.8417540514786], [1.5854373E12, 3159.9721753794265], [1.58543748E12, 1.0262820512820494], [1.58543766E12, 1.0559210526315812], [1.58543718E12, 2336.0719530102765], [1.58543736E12, 2277.4931921331286], [1.58543754E12, 1.0215989684074818], [1.58543706E12, 48.083333333333336], [1.58543724E12, 2413.629068887205], [1.58543742E12, 1.4675867837724803]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543712E12, 855.4739884393061], [1.58543706E12, 1813.681818181818]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.5854376E12, 1.035725780495653], [1.58543712E12, 1181.9937833037302], [1.5854373E12, 3189.9582245430834], [1.58543748E12, 1.042149292149291], [1.58543766E12, 1.0635245901639352], [1.58543718E12, 2477.715750915747], [1.58543736E12, 2514.1238095238077], [1.58543754E12, 1.3452726686027714], [1.58543706E12, 84.4], [1.58543724E12, 2658.064564564567], [1.58543742E12, 1408.696356275303]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543766E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58543706E12, "maxY": 3189.4107919930393, "series": [{"data": [[1.5854376E12, 0.0], [1.58543712E12, 1188.0505243088649], [1.5854373E12, 3159.483979763911], [1.58543748E12, 0.0], [1.58543766E12, 0.0], [1.58543718E12, 2333.4464023494843], [1.58543736E12, 2276.888804841149], [1.58543754E12, 0.0], [1.58543706E12, 47.75], [1.58543724E12, 2412.672218016653], [1.58543742E12, 0.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543712E12, 852.8959537572255], [1.58543706E12, 1812.7272727272725]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.5854376E12, 0.0], [1.58543712E12, 1181.3001776198937], [1.5854373E12, 3189.4107919930393], [1.58543748E12, 0.0], [1.58543766E12, 0.0], [1.58543718E12, 2457.3208791208826], [1.58543736E12, 2513.760317460312], [1.58543754E12, 0.0], [1.58543706E12, 82.60000000000002], [1.58543724E12, 2539.859609609614], [1.58543742E12, 0.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543766E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58543706E12, "maxY": 2.0909090909090913, "series": [{"data": [[1.5854376E12, 0.5325842696629217], [1.58543712E12, 0.46329837940896146], [1.5854373E12, 0.6559865092748737], [1.58543748E12, 0.5250000000000016], [1.58543766E12, 0.53092105263158], [1.58543718E12, 0.6123348017621146], [1.58543736E12, 0.48033282904689917], [1.58543754E12, 0.5070921985815597], [1.58543706E12, 0.0], [1.58543724E12, 0.6828160484481458], [1.58543742E12, 0.9485570890840631]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543712E12, 0.8901734104046244], [1.58543706E12, 2.0909090909090913]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.5854376E12, 0.5123913743160595], [1.58543712E12, 0.7229129662522209], [1.5854373E12, 0.6118363794604009], [1.58543748E12, 0.5392535392535396], [1.58543766E12, 0.5566939890710378], [1.58543718E12, 0.652747252747253], [1.58543736E12, 0.5658730158730148], [1.58543754E12, 0.8354307841239119], [1.58543706E12, 1.3], [1.58543724E12, 0.7432432432432426], [1.58543742E12, 0.5060728744939276]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543766E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.58543706E12, "maxY": 7805.0, "series": [{"data": [[1.58543712E12, 4186.0], [1.5854373E12, 6685.0], [1.58543718E12, 6257.0], [1.58543736E12, 5869.0], [1.58543706E12, 4203.0], [1.58543724E12, 7805.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58543712E12, 31.0], [1.5854373E12, 2.0], [1.58543718E12, 1.0], [1.58543736E12, 1.0], [1.58543706E12, 34.0], [1.58543724E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58543712E12, 2558.1], [1.5854373E12, 5098.9], [1.58543718E12, 4057.2], [1.58543736E12, 4269.799999999999], [1.58543706E12, 2966.5], [1.58543724E12, 4118.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58543712E12, 3448.6899999999955], [1.5854373E12, 5711.37], [1.58543718E12, 5128.600000000001], [1.58543736E12, 4973.58], [1.58543706E12, 4203.0], [1.58543724E12, 6256.1600000000035]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58543712E12, 2983.4999999999973], [1.5854373E12, 5316.749999999999], [1.58543718E12, 4530.599999999999], [1.58543736E12, 4447.599999999999], [1.58543706E12, 3739.5], [1.58543724E12, 4473.749999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543736E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 20005.0, "series": [{"data": [[7.0, 60.0], [9.0, 953.0], [10.0, 2966.5], [13.0, 52.0], [17.0, 62.0], [18.0, 51.0], [20.0, 3127.0], [22.0, 48.5], [23.0, 3843.0], [24.0, 2339.0], [25.0, 1558.0], [26.0, 76.0], [27.0, 3486.0], [28.0, 3313.0], [29.0, 3433.5], [30.0, 2377.0], [31.0, 3335.5], [32.0, 3316.5], [33.0, 3230.0], [34.0, 2972.0], [35.0, 2603.5], [36.0, 3312.5], [37.0, 2754.0], [39.0, 3142.0], [38.0, 2558.0], [40.0, 2747.5], [41.0, 2715.0], [42.0, 2629.0], [43.0, 2569.0], [44.0, 2532.0], [45.0, 2929.0], [47.0, 1950.5], [46.0, 2927.0], [49.0, 2509.0], [48.0, 2986.5], [51.0, 1435.0], [50.0, 2668.5], [53.0, 1699.5], [52.0, 2637.0], [55.0, 2914.0], [54.0, 1102.0], [56.0, 1920.0], [58.0, 1626.0], [60.0, 1543.0], [62.0, 61.0], [63.0, 602.0], [74.0, 995.0], [76.0, 8.0], [77.0, 875.0], [78.0, 22.0], [80.0, 779.0], [81.0, 3.0], [87.0, 725.0], [89.0, 1577.5], [91.0, 3.0], [92.0, 2006.0], [99.0, 3.0], [102.0, 2435.5], [103.0, 3.0], [105.0, 239.5], [104.0, 3.0], [112.0, 1016.0], [116.0, 114.0], [162.0, 2462.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 1.5], [5.0, 1.0], [8.0, 1.0], [9.0, 1.0], [12.0, 1.0], [14.0, 1502.5], [17.0, 1.0], [18.0, 1.0], [20.0, 1.0], [22.0, 1.0], [25.0, 1.0], [26.0, 1.0], [27.0, 1.0], [30.0, 844.0], [31.0, 0.5], [32.0, 1.0], [34.0, 1.0], [35.0, 1.0], [36.0, 1.0], [38.0, 3006.0], [41.0, 1.0], [42.0, 1.0], [44.0, 1.0], [45.0, 6003.0], [47.0, 1.0], [46.0, 1.0], [48.0, 1.0], [50.0, 1.0], [53.0, 1.0], [52.0, 1.0], [54.0, 4123.0], [55.0, 20005.0], [56.0, 1.0], [58.0, 1.0], [59.0, 1.0], [61.0, 1.0], [63.0, 0.0], [62.0, 1.0], [65.0, 1.0], [69.0, 1.0], [71.0, 1.0], [72.0, 1.0], [73.0, 1.0], [75.0, 1.0], [74.0, 1.0], [76.0, 2243.0], [78.0, 0.0], [77.0, 1.0], [83.0, 1.0], [80.0, 1.0], [87.0, 1.0], [84.0, 1.0], [86.0, 1.0], [85.0, 1.0], [89.0, 1.0], [88.0, 1.0], [91.0, 1.0], [90.0, 1.0], [92.0, 1.0], [95.0, 1.0], [93.0, 1.0], [94.0, 1.0], [99.0, 1.0], [98.0, 1.0], [96.0, 1.0], [97.0, 1.0], [101.0, 1.0], [102.0, 1.0], [103.0, 1.0], [100.0, 1.0], [105.0, 1.0], [104.0, 1.0], [107.0, 1.0], [106.0, 1.0], [111.0, 1.0], [109.0, 1.0], [108.0, 1.0], [110.0, 1.0], [112.0, 1.0], [113.0, 1.0], [115.0, 1.0], [114.0, 1.0], [116.0, 1.0], [118.0, 1.0], [117.0, 1.0], [119.0, 1.0], [123.0, 1.0], [122.0, 1.0], [121.0, 1.0], [124.0, 1.0], [127.0, 1.0], [128.0, 1.0], [130.0, 1.0], [129.0, 1.0], [136.0, 1.0], [141.0, 1.0], [158.0, 1.0], [1.0, 1.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 162.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 4122.0, "series": [{"data": [[7.0, 60.0], [9.0, 953.0], [10.0, 2964.0], [13.0, 51.0], [17.0, 56.5], [18.0, 51.0], [20.0, 3126.0], [22.0, 48.0], [23.0, 3842.0], [24.0, 2337.0], [25.0, 1557.5], [26.0, 68.5], [27.0, 3486.0], [28.0, 3313.0], [29.0, 3433.5], [30.0, 2377.0], [31.0, 3335.5], [32.0, 3316.5], [33.0, 3229.0], [34.0, 2971.0], [35.0, 2603.5], [36.0, 3312.0], [37.0, 2754.0], [39.0, 3141.5], [38.0, 2558.0], [40.0, 2747.0], [41.0, 2715.0], [42.0, 2629.0], [43.0, 2568.5], [44.0, 2531.0], [45.0, 2928.0], [47.0, 1950.0], [46.0, 2926.5], [49.0, 2508.0], [48.0, 2986.5], [51.0, 1435.0], [50.0, 2668.0], [53.0, 1699.0], [52.0, 2636.5], [55.0, 2914.0], [54.0, 1102.0], [56.0, 1920.0], [58.0, 1626.0], [60.0, 1542.5], [62.0, 60.5], [63.0, 602.0], [74.0, 994.5], [76.0, 8.0], [77.0, 875.0], [78.0, 22.0], [80.0, 779.0], [81.0, 3.0], [87.0, 724.5], [89.0, 1577.0], [91.0, 3.0], [92.0, 2004.0], [99.0, 3.0], [102.0, 2435.5], [103.0, 3.0], [105.0, 239.5], [104.0, 3.0], [112.0, 1016.0], [116.0, 114.0], [162.0, 2462.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [5.0, 0.0], [8.0, 0.0], [9.0, 0.0], [12.0, 0.0], [14.0, 0.0], [17.0, 0.0], [18.0, 0.0], [20.0, 0.0], [22.0, 0.0], [25.0, 0.0], [26.0, 0.0], [27.0, 0.0], [30.0, 843.5], [31.0, 0.0], [32.0, 0.0], [34.0, 0.0], [35.0, 0.0], [36.0, 0.0], [38.0, 0.0], [41.0, 0.0], [42.0, 0.0], [44.0, 0.0], [45.0, 0.0], [47.0, 0.0], [46.0, 0.0], [48.0, 0.0], [50.0, 0.0], [53.0, 0.0], [52.0, 0.0], [54.0, 4122.0], [55.0, 0.0], [56.0, 0.0], [58.0, 0.0], [59.0, 0.0], [61.0, 0.0], [63.0, 0.0], [62.0, 0.0], [65.0, 0.0], [69.0, 0.0], [71.0, 0.0], [72.0, 0.0], [73.0, 0.0], [75.0, 0.0], [74.0, 0.0], [76.0, 2243.0], [78.0, 0.0], [77.0, 0.0], [83.0, 0.0], [80.0, 0.0], [87.0, 0.0], [84.0, 0.0], [86.0, 0.0], [85.0, 0.0], [89.0, 0.0], [88.0, 0.0], [91.0, 0.0], [90.0, 0.0], [92.0, 0.0], [95.0, 0.0], [93.0, 0.0], [94.0, 0.0], [99.0, 0.0], [98.0, 0.0], [96.0, 0.0], [97.0, 0.0], [101.0, 0.0], [102.0, 0.0], [103.0, 0.0], [100.0, 0.0], [105.0, 0.0], [104.0, 0.0], [107.0, 0.0], [106.0, 0.0], [111.0, 0.0], [109.0, 0.0], [108.0, 0.0], [110.0, 0.0], [112.0, 0.0], [113.0, 0.0], [115.0, 0.0], [114.0, 0.0], [116.0, 0.0], [118.0, 0.0], [117.0, 0.0], [119.0, 0.0], [123.0, 0.0], [122.0, 0.0], [121.0, 0.0], [124.0, 0.0], [127.0, 0.0], [128.0, 0.0], [130.0, 0.0], [129.0, 0.0], [136.0, 0.0], [141.0, 0.0], [158.0, 0.0], [1.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 162.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.9666666666666667, "minX": 1.58543706E12, "maxY": 103.8, "series": [{"data": [[1.5854376E12, 103.7], [1.58543712E12, 41.25], [1.5854373E12, 38.65], [1.58543748E12, 103.8], [1.58543766E12, 49.733333333333334], [1.58543718E12, 45.43333333333333], [1.58543736E12, 44.416666666666664], [1.58543754E12, 103.35], [1.58543706E12, 0.9666666666666667], [1.58543724E12, 44.18333333333333], [1.58543742E12, 77.76666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543766E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.58543706E12, "maxY": 103.8, "series": [{"data": [[1.58543712E12, 39.13333333333333], [1.5854373E12, 38.666666666666664], [1.58543718E12, 43.55], [1.58543736E12, 40.21666666666667], [1.58543706E12, 0.9], [1.58543724E12, 41.333333333333336]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.5854373E12, 0.25], [1.58543718E12, 0.31666666666666665], [1.58543736E12, 0.15], [1.58543724E12, 0.05]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.58543736E12, 0.1], [1.58543724E12, 0.05]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.TruncatedChunkException", "isController": false}, {"data": [[1.5854376E12, 103.7], [1.58543748E12, 103.8], [1.58543766E12, 49.733333333333334], [1.58543718E12, 1.0666666666666667], [1.58543736E12, 2.3666666666666667], [1.58543754E12, 103.35], [1.58543724E12, 2.2333333333333334], [1.58543742E12, 81.01666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.58543718E12, 0.016666666666666666], [1.58543724E12, 0.016666666666666666]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.58543718E12, 0.5], [1.58543736E12, 0.2], [1.58543724E12, 0.5333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543766E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.58543706E12, "maxY": 52.0, "series": [{"data": [[1.58543712E12, 2.8833333333333333], [1.58543706E12, 0.36666666666666664]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58543712E12, 17.483333333333334], [1.5854373E12, 19.633333333333333], [1.58543718E12, 21.466666666666665], [1.58543736E12, 19.516666666666666], [1.58543706E12, 0.2], [1.58543724E12, 20.166666666666668]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.5854376E12, 51.916666666666664], [1.5854373E12, 0.13333333333333333], [1.58543748E12, 52.0], [1.58543766E12, 25.333333333333332], [1.58543718E12, 1.2333333333333334], [1.58543736E12, 2.5166666666666666], [1.58543754E12, 51.7], [1.58543724E12, 1.85], [1.58543742E12, 39.85]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.58543712E12, 18.766666666666666], [1.5854373E12, 19.033333333333335], [1.58543718E12, 22.083333333333332], [1.58543736E12, 20.7], [1.58543706E12, 0.3333333333333333], [1.58543724E12, 21.166666666666668]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.5854376E12, 51.78333333333333], [1.5854373E12, 0.11666666666666667], [1.58543748E12, 51.8], [1.58543766E12, 24.4], [1.58543718E12, 0.6666666666666666], [1.58543736E12, 0.3], [1.58543754E12, 51.65], [1.58543724E12, 1.0333333333333334], [1.58543742E12, 41.166666666666664]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543766E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.58543706E12, "maxY": 103.8, "series": [{"data": [[1.58543712E12, 39.13333333333333], [1.5854373E12, 38.666666666666664], [1.58543718E12, 43.55], [1.58543736E12, 40.21666666666667], [1.58543706E12, 0.9], [1.58543724E12, 41.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.5854376E12, 103.7], [1.5854373E12, 0.25], [1.58543748E12, 103.8], [1.58543766E12, 49.733333333333334], [1.58543718E12, 1.9], [1.58543736E12, 2.816666666666667], [1.58543754E12, 103.35], [1.58543724E12, 2.8833333333333333], [1.58543742E12, 81.01666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543766E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

