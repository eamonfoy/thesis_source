/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 20576.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 1.0], [41.8, 1.0], [41.9, 1.0], [42.0, 1.0], [42.1, 1.0], [42.2, 1.0], [42.3, 1.0], [42.4, 1.0], [42.5, 1.0], [42.6, 1.0], [42.7, 1.0], [42.8, 1.0], [42.9, 1.0], [43.0, 1.0], [43.1, 1.0], [43.2, 1.0], [43.3, 1.0], [43.4, 1.0], [43.5, 1.0], [43.6, 1.0], [43.7, 1.0], [43.8, 1.0], [43.9, 1.0], [44.0, 1.0], [44.1, 1.0], [44.2, 1.0], [44.3, 1.0], [44.4, 1.0], [44.5, 1.0], [44.6, 1.0], [44.7, 1.0], [44.8, 2.0], [44.9, 2.0], [45.0, 2.0], [45.1, 2.0], [45.2, 2.0], [45.3, 2.0], [45.4, 2.0], [45.5, 2.0], [45.6, 2.0], [45.7, 2.0], [45.8, 2.0], [45.9, 2.0], [46.0, 2.0], [46.1, 2.0], [46.2, 2.0], [46.3, 2.0], [46.4, 2.0], [46.5, 2.0], [46.6, 2.0], [46.7, 2.0], [46.8, 2.0], [46.9, 2.0], [47.0, 2.0], [47.1, 2.0], [47.2, 2.0], [47.3, 2.0], [47.4, 2.0], [47.5, 2.0], [47.6, 2.0], [47.7, 2.0], [47.8, 2.0], [47.9, 2.0], [48.0, 2.0], [48.1, 2.0], [48.2, 2.0], [48.3, 2.0], [48.4, 2.0], [48.5, 2.0], [48.6, 2.0], [48.7, 2.0], [48.8, 2.0], [48.9, 2.0], [49.0, 2.0], [49.1, 2.0], [49.2, 2.0], [49.3, 3.0], [49.4, 3.0], [49.5, 3.0], [49.6, 3.0], [49.7, 3.0], [49.8, 3.0], [49.9, 4.0], [50.0, 4.0], [50.1, 4.0], [50.2, 4.0], [50.3, 4.0], [50.4, 5.0], [50.5, 5.0], [50.6, 6.0], [50.7, 6.0], [50.8, 7.0], [50.9, 8.0], [51.0, 11.0], [51.1, 17.0], [51.2, 26.0], [51.3, 34.0], [51.4, 38.0], [51.5, 40.0], [51.6, 41.0], [51.7, 42.0], [51.8, 43.0], [51.9, 44.0], [52.0, 45.0], [52.1, 46.0], [52.2, 47.0], [52.3, 48.0], [52.4, 49.0], [52.5, 50.0], [52.6, 51.0], [52.7, 51.0], [52.8, 52.0], [52.9, 53.0], [53.0, 54.0], [53.1, 55.0], [53.2, 56.0], [53.3, 57.0], [53.4, 58.0], [53.5, 60.0], [53.6, 61.0], [53.7, 63.0], [53.8, 65.0], [53.9, 67.0], [54.0, 70.0], [54.1, 74.0], [54.2, 78.0], [54.3, 80.0], [54.4, 83.0], [54.5, 86.0], [54.6, 89.0], [54.7, 91.0], [54.8, 94.0], [54.9, 97.0], [55.0, 100.0], [55.1, 102.0], [55.2, 106.0], [55.3, 111.0], [55.4, 115.0], [55.5, 118.0], [55.6, 120.0], [55.7, 124.0], [55.8, 129.0], [55.9, 132.0], [56.0, 137.0], [56.1, 143.0], [56.2, 148.0], [56.3, 153.0], [56.4, 156.0], [56.5, 162.0], [56.6, 166.0], [56.7, 176.0], [56.8, 210.0], [56.9, 255.0], [57.0, 297.0], [57.1, 333.0], [57.2, 349.0], [57.3, 380.0], [57.4, 401.0], [57.5, 433.0], [57.6, 460.0], [57.7, 480.0], [57.8, 501.0], [57.9, 519.0], [58.0, 537.0], [58.1, 553.0], [58.2, 568.0], [58.3, 586.0], [58.4, 602.0], [58.5, 617.0], [58.6, 634.0], [58.7, 648.0], [58.8, 670.0], [58.9, 686.0], [59.0, 704.0], [59.1, 725.0], [59.2, 740.0], [59.3, 753.0], [59.4, 770.0], [59.5, 785.0], [59.6, 806.0], [59.7, 823.0], [59.8, 839.0], [59.9, 854.0], [60.0, 868.0], [60.1, 886.0], [60.2, 896.0], [60.3, 913.0], [60.4, 926.0], [60.5, 939.0], [60.6, 953.0], [60.7, 964.0], [60.8, 983.0], [60.9, 995.0], [61.0, 1005.0], [61.1, 1019.0], [61.2, 1027.0], [61.3, 1037.0], [61.4, 1047.0], [61.5, 1056.0], [61.6, 1063.0], [61.7, 1073.0], [61.8, 1087.0], [61.9, 1096.0], [62.0, 1110.0], [62.1, 1120.0], [62.2, 1132.0], [62.3, 1146.0], [62.4, 1159.0], [62.5, 1169.0], [62.6, 1177.0], [62.7, 1188.0], [62.8, 1198.0], [62.9, 1206.0], [63.0, 1216.0], [63.1, 1225.0], [63.2, 1236.0], [63.3, 1247.0], [63.4, 1258.0], [63.5, 1268.0], [63.6, 1275.0], [63.7, 1288.0], [63.8, 1301.0], [63.9, 1313.0], [64.0, 1318.0], [64.1, 1328.0], [64.2, 1338.0], [64.3, 1346.0], [64.4, 1354.0], [64.5, 1364.0], [64.6, 1372.0], [64.7, 1380.0], [64.8, 1389.0], [64.9, 1396.0], [65.0, 1405.0], [65.1, 1413.0], [65.2, 1417.0], [65.3, 1425.0], [65.4, 1432.0], [65.5, 1439.0], [65.6, 1447.0], [65.7, 1454.0], [65.8, 1461.0], [65.9, 1469.0], [66.0, 1476.0], [66.1, 1483.0], [66.2, 1490.0], [66.3, 1497.0], [66.4, 1508.0], [66.5, 1513.0], [66.6, 1519.0], [66.7, 1525.0], [66.8, 1534.0], [66.9, 1542.0], [67.0, 1551.0], [67.1, 1558.0], [67.2, 1571.0], [67.3, 1582.0], [67.4, 1592.0], [67.5, 1599.0], [67.6, 1610.0], [67.7, 1616.0], [67.8, 1625.0], [67.9, 1637.0], [68.0, 1643.0], [68.1, 1654.0], [68.2, 1660.0], [68.3, 1666.0], [68.4, 1673.0], [68.5, 1680.0], [68.6, 1693.0], [68.7, 1697.0], [68.8, 1703.0], [68.9, 1712.0], [69.0, 1719.0], [69.1, 1728.0], [69.2, 1736.0], [69.3, 1744.0], [69.4, 1749.0], [69.5, 1754.0], [69.6, 1765.0], [69.7, 1775.0], [69.8, 1781.0], [69.9, 1791.0], [70.0, 1797.0], [70.1, 1809.0], [70.2, 1821.0], [70.3, 1829.0], [70.4, 1838.0], [70.5, 1849.0], [70.6, 1856.0], [70.7, 1862.0], [70.8, 1873.0], [70.9, 1879.0], [71.0, 1886.0], [71.1, 1891.0], [71.2, 1898.0], [71.3, 1905.0], [71.4, 1915.0], [71.5, 1926.0], [71.6, 1932.0], [71.7, 1937.0], [71.8, 1944.0], [71.9, 1950.0], [72.0, 1955.0], [72.1, 1962.0], [72.2, 1969.0], [72.3, 1975.0], [72.4, 1983.0], [72.5, 1989.0], [72.6, 1998.0], [72.7, 2008.0], [72.8, 2014.0], [72.9, 2020.0], [73.0, 2029.0], [73.1, 2038.0], [73.2, 2046.0], [73.3, 2056.0], [73.4, 2065.0], [73.5, 2074.0], [73.6, 2083.0], [73.7, 2090.0], [73.8, 2096.0], [73.9, 2104.0], [74.0, 2109.0], [74.1, 2116.0], [74.2, 2125.0], [74.3, 2135.0], [74.4, 2140.0], [74.5, 2151.0], [74.6, 2161.0], [74.7, 2171.0], [74.8, 2178.0], [74.9, 2186.0], [75.0, 2195.0], [75.1, 2201.0], [75.2, 2211.0], [75.3, 2221.0], [75.4, 2229.0], [75.5, 2237.0], [75.6, 2243.0], [75.7, 2252.0], [75.8, 2258.0], [75.9, 2265.0], [76.0, 2271.0], [76.1, 2277.0], [76.2, 2285.0], [76.3, 2292.0], [76.4, 2300.0], [76.5, 2306.0], [76.6, 2314.0], [76.7, 2320.0], [76.8, 2328.0], [76.9, 2334.0], [77.0, 2338.0], [77.1, 2345.0], [77.2, 2350.0], [77.3, 2358.0], [77.4, 2364.0], [77.5, 2371.0], [77.6, 2376.0], [77.7, 2384.0], [77.8, 2392.0], [77.9, 2399.0], [78.0, 2408.0], [78.1, 2413.0], [78.2, 2420.0], [78.3, 2427.0], [78.4, 2432.0], [78.5, 2441.0], [78.6, 2449.0], [78.7, 2456.0], [78.8, 2461.0], [78.9, 2467.0], [79.0, 2472.0], [79.1, 2479.0], [79.2, 2489.0], [79.3, 2494.0], [79.4, 2501.0], [79.5, 2505.0], [79.6, 2512.0], [79.7, 2518.0], [79.8, 2523.0], [79.9, 2530.0], [80.0, 2536.0], [80.1, 2544.0], [80.2, 2550.0], [80.3, 2556.0], [80.4, 2560.0], [80.5, 2566.0], [80.6, 2573.0], [80.7, 2578.0], [80.8, 2583.0], [80.9, 2592.0], [81.0, 2599.0], [81.1, 2602.0], [81.2, 2607.0], [81.3, 2613.0], [81.4, 2617.0], [81.5, 2621.0], [81.6, 2626.0], [81.7, 2631.0], [81.8, 2638.0], [81.9, 2642.0], [82.0, 2646.0], [82.1, 2652.0], [82.2, 2657.0], [82.3, 2661.0], [82.4, 2669.0], [82.5, 2674.0], [82.6, 2683.0], [82.7, 2686.0], [82.8, 2694.0], [82.9, 2698.0], [83.0, 2704.0], [83.1, 2709.0], [83.2, 2714.0], [83.3, 2720.0], [83.4, 2726.0], [83.5, 2731.0], [83.6, 2736.0], [83.7, 2742.0], [83.8, 2747.0], [83.9, 2753.0], [84.0, 2757.0], [84.1, 2762.0], [84.2, 2767.0], [84.3, 2771.0], [84.4, 2777.0], [84.5, 2783.0], [84.6, 2789.0], [84.7, 2795.0], [84.8, 2800.0], [84.9, 2804.0], [85.0, 2809.0], [85.1, 2814.0], [85.2, 2817.0], [85.3, 2820.0], [85.4, 2826.0], [85.5, 2832.0], [85.6, 2837.0], [85.7, 2842.0], [85.8, 2848.0], [85.9, 2856.0], [86.0, 2860.0], [86.1, 2866.0], [86.2, 2871.0], [86.3, 2878.0], [86.4, 2883.0], [86.5, 2888.0], [86.6, 2893.0], [86.7, 2898.0], [86.8, 2906.0], [86.9, 2909.0], [87.0, 2915.0], [87.1, 2923.0], [87.2, 2929.0], [87.3, 2935.0], [87.4, 2937.0], [87.5, 2945.0], [87.6, 2951.0], [87.7, 2957.0], [87.8, 2965.0], [87.9, 2970.0], [88.0, 2975.0], [88.1, 2980.0], [88.2, 2985.0], [88.3, 2995.0], [88.4, 3004.0], [88.5, 3009.0], [88.6, 3016.0], [88.7, 3024.0], [88.8, 3031.0], [88.9, 3039.0], [89.0, 3046.0], [89.1, 3057.0], [89.2, 3062.0], [89.3, 3068.0], [89.4, 3073.0], [89.5, 3078.0], [89.6, 3084.0], [89.7, 3092.0], [89.8, 3100.0], [89.9, 3105.0], [90.0, 3112.0], [90.1, 3117.0], [90.2, 3127.0], [90.3, 3133.0], [90.4, 3137.0], [90.5, 3143.0], [90.6, 3153.0], [90.7, 3161.0], [90.8, 3169.0], [90.9, 3180.0], [91.0, 3187.0], [91.1, 3193.0], [91.2, 3199.0], [91.3, 3209.0], [91.4, 3216.0], [91.5, 3224.0], [91.6, 3231.0], [91.7, 3237.0], [91.8, 3244.0], [91.9, 3257.0], [92.0, 3263.0], [92.1, 3269.0], [92.2, 3277.0], [92.3, 3285.0], [92.4, 3294.0], [92.5, 3301.0], [92.6, 3307.0], [92.7, 3316.0], [92.8, 3324.0], [92.9, 3331.0], [93.0, 3339.0], [93.1, 3347.0], [93.2, 3359.0], [93.3, 3370.0], [93.4, 3374.0], [93.5, 3384.0], [93.6, 3388.0], [93.7, 3397.0], [93.8, 3406.0], [93.9, 3415.0], [94.0, 3427.0], [94.1, 3438.0], [94.2, 3446.0], [94.3, 3454.0], [94.4, 3463.0], [94.5, 3473.0], [94.6, 3485.0], [94.7, 3496.0], [94.8, 3510.0], [94.9, 3523.0], [95.0, 3536.0], [95.1, 3545.0], [95.2, 3554.0], [95.3, 3565.0], [95.4, 3581.0], [95.5, 3589.0], [95.6, 3598.0], [95.7, 3608.0], [95.8, 3617.0], [95.9, 3627.0], [96.0, 3646.0], [96.1, 3668.0], [96.2, 3677.0], [96.3, 3687.0], [96.4, 3704.0], [96.5, 3721.0], [96.6, 3744.0], [96.7, 3759.0], [96.8, 3777.0], [96.9, 3802.0], [97.0, 3827.0], [97.1, 3839.0], [97.2, 3864.0], [97.3, 3892.0], [97.4, 3907.0], [97.5, 3921.0], [97.6, 3941.0], [97.7, 3963.0], [97.8, 3984.0], [97.9, 4006.0], [98.0, 4023.0], [98.1, 4046.0], [98.2, 4076.0], [98.3, 4102.0], [98.4, 4129.0], [98.5, 4171.0], [98.6, 4198.0], [98.7, 4228.0], [98.8, 4273.0], [98.9, 4302.0], [99.0, 4346.0], [99.1, 4390.0], [99.2, 4426.0], [99.3, 4497.0], [99.4, 4535.0], [99.5, 4608.0], [99.6, 4690.0], [99.7, 4782.0], [99.8, 4880.0], [99.9, 5038.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 160.0], [0.1, 160.0], [0.2, 160.0], [0.3, 160.0], [0.4, 160.0], [0.5, 160.0], [0.6, 162.0], [0.7, 162.0], [0.8, 162.0], [0.9, 162.0], [1.0, 162.0], [1.1, 162.0], [1.2, 165.0], [1.3, 165.0], [1.4, 165.0], [1.5, 165.0], [1.6, 165.0], [1.7, 165.0], [1.8, 179.0], [1.9, 179.0], [2.0, 179.0], [2.1, 179.0], [2.2, 179.0], [2.3, 179.0], [2.4, 180.0], [2.5, 180.0], [2.6, 180.0], [2.7, 180.0], [2.8, 180.0], [2.9, 180.0], [3.0, 186.0], [3.1, 186.0], [3.2, 186.0], [3.3, 186.0], [3.4, 186.0], [3.5, 186.0], [3.6, 192.0], [3.7, 192.0], [3.8, 192.0], [3.9, 192.0], [4.0, 192.0], [4.1, 192.0], [4.2, 201.0], [4.3, 201.0], [4.4, 201.0], [4.5, 201.0], [4.6, 201.0], [4.7, 201.0], [4.8, 203.0], [4.9, 203.0], [5.0, 203.0], [5.1, 203.0], [5.2, 203.0], [5.3, 213.0], [5.4, 213.0], [5.5, 213.0], [5.6, 213.0], [5.7, 213.0], [5.8, 213.0], [5.9, 217.0], [6.0, 217.0], [6.1, 217.0], [6.2, 217.0], [6.3, 217.0], [6.4, 217.0], [6.5, 230.0], [6.6, 230.0], [6.7, 230.0], [6.8, 230.0], [6.9, 230.0], [7.0, 230.0], [7.1, 237.0], [7.2, 237.0], [7.3, 237.0], [7.4, 237.0], [7.5, 237.0], [7.6, 237.0], [7.7, 253.0], [7.8, 253.0], [7.9, 253.0], [8.0, 253.0], [8.1, 253.0], [8.2, 253.0], [8.3, 256.0], [8.4, 256.0], [8.5, 256.0], [8.6, 256.0], [8.7, 256.0], [8.8, 256.0], [8.9, 260.0], [9.0, 260.0], [9.1, 260.0], [9.2, 260.0], [9.3, 260.0], [9.4, 260.0], [9.5, 265.0], [9.6, 265.0], [9.7, 265.0], [9.8, 265.0], [9.9, 265.0], [10.0, 283.0], [10.1, 283.0], [10.2, 283.0], [10.3, 283.0], [10.4, 283.0], [10.5, 283.0], [10.6, 293.0], [10.7, 293.0], [10.8, 293.0], [10.9, 293.0], [11.0, 293.0], [11.1, 293.0], [11.2, 293.0], [11.3, 293.0], [11.4, 293.0], [11.5, 293.0], [11.6, 293.0], [11.7, 293.0], [11.8, 295.0], [11.9, 295.0], [12.0, 295.0], [12.1, 295.0], [12.2, 295.0], [12.3, 295.0], [12.4, 303.0], [12.5, 303.0], [12.6, 303.0], [12.7, 303.0], [12.8, 303.0], [12.9, 303.0], [13.0, 303.0], [13.1, 303.0], [13.2, 303.0], [13.3, 303.0], [13.4, 303.0], [13.5, 303.0], [13.6, 309.0], [13.7, 309.0], [13.8, 309.0], [13.9, 309.0], [14.0, 309.0], [14.1, 309.0], [14.2, 310.0], [14.3, 310.0], [14.4, 310.0], [14.5, 310.0], [14.6, 310.0], [14.7, 310.0], [14.8, 322.0], [14.9, 322.0], [15.0, 322.0], [15.1, 322.0], [15.2, 322.0], [15.3, 330.0], [15.4, 330.0], [15.5, 330.0], [15.6, 330.0], [15.7, 330.0], [15.8, 330.0], [15.9, 331.0], [16.0, 331.0], [16.1, 331.0], [16.2, 331.0], [16.3, 331.0], [16.4, 331.0], [16.5, 334.0], [16.6, 334.0], [16.7, 334.0], [16.8, 334.0], [16.9, 334.0], [17.0, 334.0], [17.1, 340.0], [17.2, 340.0], [17.3, 340.0], [17.4, 340.0], [17.5, 340.0], [17.6, 340.0], [17.7, 347.0], [17.8, 347.0], [17.9, 347.0], [18.0, 347.0], [18.1, 347.0], [18.2, 347.0], [18.3, 369.0], [18.4, 369.0], [18.5, 369.0], [18.6, 369.0], [18.7, 369.0], [18.8, 369.0], [18.9, 386.0], [19.0, 386.0], [19.1, 386.0], [19.2, 386.0], [19.3, 386.0], [19.4, 386.0], [19.5, 387.0], [19.6, 387.0], [19.7, 387.0], [19.8, 387.0], [19.9, 387.0], [20.0, 387.0], [20.1, 389.0], [20.2, 389.0], [20.3, 389.0], [20.4, 389.0], [20.5, 389.0], [20.6, 409.0], [20.7, 409.0], [20.8, 409.0], [20.9, 409.0], [21.0, 409.0], [21.1, 409.0], [21.2, 415.0], [21.3, 415.0], [21.4, 415.0], [21.5, 415.0], [21.6, 415.0], [21.7, 415.0], [21.8, 420.0], [21.9, 420.0], [22.0, 420.0], [22.1, 420.0], [22.2, 420.0], [22.3, 420.0], [22.4, 435.0], [22.5, 435.0], [22.6, 435.0], [22.7, 435.0], [22.8, 435.0], [22.9, 435.0], [23.0, 445.0], [23.1, 445.0], [23.2, 445.0], [23.3, 445.0], [23.4, 445.0], [23.5, 445.0], [23.6, 456.0], [23.7, 456.0], [23.8, 456.0], [23.9, 456.0], [24.0, 456.0], [24.1, 456.0], [24.2, 462.0], [24.3, 462.0], [24.4, 462.0], [24.5, 462.0], [24.6, 462.0], [24.7, 462.0], [24.8, 471.0], [24.9, 471.0], [25.0, 471.0], [25.1, 471.0], [25.2, 471.0], [25.3, 497.0], [25.4, 497.0], [25.5, 497.0], [25.6, 497.0], [25.7, 497.0], [25.8, 497.0], [25.9, 505.0], [26.0, 505.0], [26.1, 505.0], [26.2, 505.0], [26.3, 505.0], [26.4, 505.0], [26.5, 511.0], [26.6, 511.0], [26.7, 511.0], [26.8, 511.0], [26.9, 511.0], [27.0, 511.0], [27.1, 523.0], [27.2, 523.0], [27.3, 523.0], [27.4, 523.0], [27.5, 523.0], [27.6, 523.0], [27.7, 532.0], [27.8, 532.0], [27.9, 532.0], [28.0, 532.0], [28.1, 532.0], [28.2, 532.0], [28.3, 539.0], [28.4, 539.0], [28.5, 539.0], [28.6, 539.0], [28.7, 539.0], [28.8, 539.0], [28.9, 548.0], [29.0, 548.0], [29.1, 548.0], [29.2, 548.0], [29.3, 548.0], [29.4, 548.0], [29.5, 551.0], [29.6, 551.0], [29.7, 551.0], [29.8, 551.0], [29.9, 551.0], [30.0, 551.0], [30.1, 557.0], [30.2, 557.0], [30.3, 557.0], [30.4, 557.0], [30.5, 557.0], [30.6, 559.0], [30.7, 559.0], [30.8, 559.0], [30.9, 559.0], [31.0, 559.0], [31.1, 559.0], [31.2, 569.0], [31.3, 569.0], [31.4, 569.0], [31.5, 569.0], [31.6, 569.0], [31.7, 569.0], [31.8, 576.0], [31.9, 576.0], [32.0, 576.0], [32.1, 576.0], [32.2, 576.0], [32.3, 576.0], [32.4, 584.0], [32.5, 584.0], [32.6, 584.0], [32.7, 584.0], [32.8, 584.0], [32.9, 584.0], [33.0, 584.0], [33.1, 584.0], [33.2, 584.0], [33.3, 584.0], [33.4, 584.0], [33.5, 584.0], [33.6, 594.0], [33.7, 594.0], [33.8, 594.0], [33.9, 594.0], [34.0, 594.0], [34.1, 594.0], [34.2, 610.0], [34.3, 610.0], [34.4, 610.0], [34.5, 610.0], [34.6, 610.0], [34.7, 610.0], [34.8, 617.0], [34.9, 617.0], [35.0, 617.0], [35.1, 617.0], [35.2, 617.0], [35.3, 628.0], [35.4, 628.0], [35.5, 628.0], [35.6, 628.0], [35.7, 628.0], [35.8, 628.0], [35.9, 631.0], [36.0, 631.0], [36.1, 631.0], [36.2, 631.0], [36.3, 631.0], [36.4, 631.0], [36.5, 631.0], [36.6, 631.0], [36.7, 631.0], [36.8, 631.0], [36.9, 631.0], [37.0, 631.0], [37.1, 634.0], [37.2, 634.0], [37.3, 634.0], [37.4, 634.0], [37.5, 634.0], [37.6, 634.0], [37.7, 641.0], [37.8, 641.0], [37.9, 641.0], [38.0, 641.0], [38.1, 641.0], [38.2, 641.0], [38.3, 644.0], [38.4, 644.0], [38.5, 644.0], [38.6, 644.0], [38.7, 644.0], [38.8, 644.0], [38.9, 652.0], [39.0, 652.0], [39.1, 652.0], [39.2, 652.0], [39.3, 652.0], [39.4, 652.0], [39.5, 654.0], [39.6, 654.0], [39.7, 654.0], [39.8, 654.0], [39.9, 654.0], [40.0, 654.0], [40.1, 656.0], [40.2, 656.0], [40.3, 656.0], [40.4, 656.0], [40.5, 656.0], [40.6, 659.0], [40.7, 659.0], [40.8, 659.0], [40.9, 659.0], [41.0, 659.0], [41.1, 659.0], [41.2, 661.0], [41.3, 661.0], [41.4, 661.0], [41.5, 661.0], [41.6, 661.0], [41.7, 661.0], [41.8, 663.0], [41.9, 663.0], [42.0, 663.0], [42.1, 663.0], [42.2, 663.0], [42.3, 663.0], [42.4, 665.0], [42.5, 665.0], [42.6, 665.0], [42.7, 665.0], [42.8, 665.0], [42.9, 665.0], [43.0, 668.0], [43.1, 668.0], [43.2, 668.0], [43.3, 668.0], [43.4, 668.0], [43.5, 668.0], [43.6, 671.0], [43.7, 671.0], [43.8, 671.0], [43.9, 671.0], [44.0, 671.0], [44.1, 671.0], [44.2, 673.0], [44.3, 673.0], [44.4, 673.0], [44.5, 673.0], [44.6, 673.0], [44.7, 673.0], [44.8, 675.0], [44.9, 675.0], [45.0, 675.0], [45.1, 675.0], [45.2, 675.0], [45.3, 700.0], [45.4, 700.0], [45.5, 700.0], [45.6, 700.0], [45.7, 700.0], [45.8, 700.0], [45.9, 701.0], [46.0, 701.0], [46.1, 701.0], [46.2, 701.0], [46.3, 701.0], [46.4, 701.0], [46.5, 708.0], [46.6, 708.0], [46.7, 708.0], [46.8, 708.0], [46.9, 708.0], [47.0, 708.0], [47.1, 710.0], [47.2, 710.0], [47.3, 710.0], [47.4, 710.0], [47.5, 710.0], [47.6, 710.0], [47.7, 720.0], [47.8, 720.0], [47.9, 720.0], [48.0, 720.0], [48.1, 720.0], [48.2, 720.0], [48.3, 738.0], [48.4, 738.0], [48.5, 738.0], [48.6, 738.0], [48.7, 738.0], [48.8, 738.0], [48.9, 739.0], [49.0, 739.0], [49.1, 739.0], [49.2, 739.0], [49.3, 739.0], [49.4, 739.0], [49.5, 741.0], [49.6, 741.0], [49.7, 741.0], [49.8, 741.0], [49.9, 741.0], [50.0, 744.0], [50.1, 744.0], [50.2, 744.0], [50.3, 744.0], [50.4, 744.0], [50.5, 744.0], [50.6, 749.0], [50.7, 749.0], [50.8, 749.0], [50.9, 749.0], [51.0, 749.0], [51.1, 749.0], [51.2, 759.0], [51.3, 759.0], [51.4, 759.0], [51.5, 759.0], [51.6, 759.0], [51.7, 759.0], [51.8, 759.0], [51.9, 759.0], [52.0, 759.0], [52.1, 759.0], [52.2, 759.0], [52.3, 759.0], [52.4, 762.0], [52.5, 762.0], [52.6, 762.0], [52.7, 762.0], [52.8, 762.0], [52.9, 762.0], [53.0, 769.0], [53.1, 769.0], [53.2, 769.0], [53.3, 769.0], [53.4, 769.0], [53.5, 769.0], [53.6, 783.0], [53.7, 783.0], [53.8, 783.0], [53.9, 783.0], [54.0, 783.0], [54.1, 783.0], [54.2, 792.0], [54.3, 792.0], [54.4, 792.0], [54.5, 792.0], [54.6, 792.0], [54.7, 792.0], [54.8, 793.0], [54.9, 793.0], [55.0, 793.0], [55.1, 793.0], [55.2, 793.0], [55.3, 800.0], [55.4, 800.0], [55.5, 800.0], [55.6, 800.0], [55.7, 800.0], [55.8, 800.0], [55.9, 812.0], [56.0, 812.0], [56.1, 812.0], [56.2, 812.0], [56.3, 812.0], [56.4, 812.0], [56.5, 812.0], [56.6, 812.0], [56.7, 812.0], [56.8, 812.0], [56.9, 812.0], [57.0, 812.0], [57.1, 823.0], [57.2, 823.0], [57.3, 823.0], [57.4, 823.0], [57.5, 823.0], [57.6, 823.0], [57.7, 842.0], [57.8, 842.0], [57.9, 842.0], [58.0, 842.0], [58.1, 842.0], [58.2, 842.0], [58.3, 845.0], [58.4, 845.0], [58.5, 845.0], [58.6, 845.0], [58.7, 845.0], [58.8, 845.0], [58.9, 849.0], [59.0, 849.0], [59.1, 849.0], [59.2, 849.0], [59.3, 849.0], [59.4, 849.0], [59.5, 850.0], [59.6, 850.0], [59.7, 850.0], [59.8, 850.0], [59.9, 850.0], [60.0, 862.0], [60.1, 862.0], [60.2, 862.0], [60.3, 862.0], [60.4, 862.0], [60.5, 862.0], [60.6, 881.0], [60.7, 881.0], [60.8, 881.0], [60.9, 881.0], [61.0, 881.0], [61.1, 881.0], [61.2, 901.0], [61.3, 901.0], [61.4, 901.0], [61.5, 901.0], [61.6, 901.0], [61.7, 901.0], [61.8, 903.0], [61.9, 903.0], [62.0, 903.0], [62.1, 903.0], [62.2, 903.0], [62.3, 903.0], [62.4, 913.0], [62.5, 913.0], [62.6, 913.0], [62.7, 913.0], [62.8, 913.0], [62.9, 913.0], [63.0, 913.0], [63.1, 913.0], [63.2, 913.0], [63.3, 913.0], [63.4, 913.0], [63.5, 913.0], [63.6, 914.0], [63.7, 914.0], [63.8, 914.0], [63.9, 914.0], [64.0, 914.0], [64.1, 914.0], [64.2, 919.0], [64.3, 919.0], [64.4, 919.0], [64.5, 919.0], [64.6, 919.0], [64.7, 919.0], [64.8, 926.0], [64.9, 926.0], [65.0, 926.0], [65.1, 926.0], [65.2, 926.0], [65.3, 938.0], [65.4, 938.0], [65.5, 938.0], [65.6, 938.0], [65.7, 938.0], [65.8, 938.0], [65.9, 955.0], [66.0, 955.0], [66.1, 955.0], [66.2, 955.0], [66.3, 955.0], [66.4, 955.0], [66.5, 969.0], [66.6, 969.0], [66.7, 969.0], [66.8, 969.0], [66.9, 969.0], [67.0, 969.0], [67.1, 973.0], [67.2, 973.0], [67.3, 973.0], [67.4, 973.0], [67.5, 973.0], [67.6, 973.0], [67.7, 973.0], [67.8, 973.0], [67.9, 973.0], [68.0, 973.0], [68.1, 973.0], [68.2, 973.0], [68.3, 988.0], [68.4, 988.0], [68.5, 988.0], [68.6, 988.0], [68.7, 988.0], [68.8, 988.0], [68.9, 1023.0], [69.0, 1023.0], [69.1, 1023.0], [69.2, 1023.0], [69.3, 1023.0], [69.4, 1023.0], [69.5, 1030.0], [69.6, 1030.0], [69.7, 1030.0], [69.8, 1030.0], [69.9, 1030.0], [70.0, 1128.0], [70.1, 1128.0], [70.2, 1128.0], [70.3, 1128.0], [70.4, 1128.0], [70.5, 1128.0], [70.6, 1219.0], [70.7, 1219.0], [70.8, 1219.0], [70.9, 1219.0], [71.0, 1219.0], [71.1, 1219.0], [71.2, 1259.0], [71.3, 1259.0], [71.4, 1259.0], [71.5, 1259.0], [71.6, 1259.0], [71.7, 1259.0], [71.8, 1320.0], [71.9, 1320.0], [72.0, 1320.0], [72.1, 1320.0], [72.2, 1320.0], [72.3, 1320.0], [72.4, 1326.0], [72.5, 1326.0], [72.6, 1326.0], [72.7, 1326.0], [72.8, 1326.0], [72.9, 1326.0], [73.0, 1332.0], [73.1, 1332.0], [73.2, 1332.0], [73.3, 1332.0], [73.4, 1332.0], [73.5, 1332.0], [73.6, 1354.0], [73.7, 1354.0], [73.8, 1354.0], [73.9, 1354.0], [74.0, 1354.0], [74.1, 1354.0], [74.2, 1361.0], [74.3, 1361.0], [74.4, 1361.0], [74.5, 1361.0], [74.6, 1361.0], [74.7, 1361.0], [74.8, 1398.0], [74.9, 1398.0], [75.0, 1398.0], [75.1, 1398.0], [75.2, 1398.0], [75.3, 1431.0], [75.4, 1431.0], [75.5, 1431.0], [75.6, 1431.0], [75.7, 1431.0], [75.8, 1431.0], [75.9, 1473.0], [76.0, 1473.0], [76.1, 1473.0], [76.2, 1473.0], [76.3, 1473.0], [76.4, 1473.0], [76.5, 1476.0], [76.6, 1476.0], [76.7, 1476.0], [76.8, 1476.0], [76.9, 1476.0], [77.0, 1476.0], [77.1, 1478.0], [77.2, 1478.0], [77.3, 1478.0], [77.4, 1478.0], [77.5, 1478.0], [77.6, 1478.0], [77.7, 1497.0], [77.8, 1497.0], [77.9, 1497.0], [78.0, 1497.0], [78.1, 1497.0], [78.2, 1497.0], [78.3, 1498.0], [78.4, 1498.0], [78.5, 1498.0], [78.6, 1498.0], [78.7, 1498.0], [78.8, 1498.0], [78.9, 1546.0], [79.0, 1546.0], [79.1, 1546.0], [79.2, 1546.0], [79.3, 1546.0], [79.4, 1546.0], [79.5, 1561.0], [79.6, 1561.0], [79.7, 1561.0], [79.8, 1561.0], [79.9, 1561.0], [80.0, 1561.0], [80.1, 1573.0], [80.2, 1573.0], [80.3, 1573.0], [80.4, 1573.0], [80.5, 1573.0], [80.6, 1586.0], [80.7, 1586.0], [80.8, 1586.0], [80.9, 1586.0], [81.0, 1586.0], [81.1, 1586.0], [81.2, 1597.0], [81.3, 1597.0], [81.4, 1597.0], [81.5, 1597.0], [81.6, 1597.0], [81.7, 1597.0], [81.8, 1598.0], [81.9, 1598.0], [82.0, 1598.0], [82.1, 1598.0], [82.2, 1598.0], [82.3, 1598.0], [82.4, 1606.0], [82.5, 1606.0], [82.6, 1606.0], [82.7, 1606.0], [82.8, 1606.0], [82.9, 1606.0], [83.0, 1635.0], [83.1, 1635.0], [83.2, 1635.0], [83.3, 1635.0], [83.4, 1635.0], [83.5, 1635.0], [83.6, 1641.0], [83.7, 1641.0], [83.8, 1641.0], [83.9, 1641.0], [84.0, 1641.0], [84.1, 1641.0], [84.2, 1644.0], [84.3, 1644.0], [84.4, 1644.0], [84.5, 1644.0], [84.6, 1644.0], [84.7, 1644.0], [84.8, 1662.0], [84.9, 1662.0], [85.0, 1662.0], [85.1, 1662.0], [85.2, 1662.0], [85.3, 1687.0], [85.4, 1687.0], [85.5, 1687.0], [85.6, 1687.0], [85.7, 1687.0], [85.8, 1687.0], [85.9, 1697.0], [86.0, 1697.0], [86.1, 1697.0], [86.2, 1697.0], [86.3, 1697.0], [86.4, 1697.0], [86.5, 1714.0], [86.6, 1714.0], [86.7, 1714.0], [86.8, 1714.0], [86.9, 1714.0], [87.0, 1714.0], [87.1, 1717.0], [87.2, 1717.0], [87.3, 1717.0], [87.4, 1717.0], [87.5, 1717.0], [87.6, 1717.0], [87.7, 1733.0], [87.8, 1733.0], [87.9, 1733.0], [88.0, 1733.0], [88.1, 1733.0], [88.2, 1733.0], [88.3, 1738.0], [88.4, 1738.0], [88.5, 1738.0], [88.6, 1738.0], [88.7, 1738.0], [88.8, 1738.0], [88.9, 1786.0], [89.0, 1786.0], [89.1, 1786.0], [89.2, 1786.0], [89.3, 1786.0], [89.4, 1786.0], [89.5, 1787.0], [89.6, 1787.0], [89.7, 1787.0], [89.8, 1787.0], [89.9, 1787.0], [90.0, 1787.0], [90.1, 1789.0], [90.2, 1789.0], [90.3, 1789.0], [90.4, 1789.0], [90.5, 1789.0], [90.6, 1807.0], [90.7, 1807.0], [90.8, 1807.0], [90.9, 1807.0], [91.0, 1807.0], [91.1, 1807.0], [91.2, 1814.0], [91.3, 1814.0], [91.4, 1814.0], [91.5, 1814.0], [91.6, 1814.0], [91.7, 1814.0], [91.8, 1821.0], [91.9, 1821.0], [92.0, 1821.0], [92.1, 1821.0], [92.2, 1821.0], [92.3, 1821.0], [92.4, 1852.0], [92.5, 1852.0], [92.6, 1852.0], [92.7, 1852.0], [92.8, 1852.0], [92.9, 1852.0], [93.0, 1861.0], [93.1, 1861.0], [93.2, 1861.0], [93.3, 1861.0], [93.4, 1861.0], [93.5, 1861.0], [93.6, 1879.0], [93.7, 1879.0], [93.8, 1879.0], [93.9, 1879.0], [94.0, 1879.0], [94.1, 1879.0], [94.2, 2009.0], [94.3, 2009.0], [94.4, 2009.0], [94.5, 2009.0], [94.6, 2009.0], [94.7, 2009.0], [94.8, 2034.0], [94.9, 2034.0], [95.0, 2034.0], [95.1, 2034.0], [95.2, 2034.0], [95.3, 2411.0], [95.4, 2411.0], [95.5, 2411.0], [95.6, 2411.0], [95.7, 2411.0], [95.8, 2411.0], [95.9, 2508.0], [96.0, 2508.0], [96.1, 2508.0], [96.2, 2508.0], [96.3, 2508.0], [96.4, 2508.0], [96.5, 2667.0], [96.6, 2667.0], [96.7, 2667.0], [96.8, 2667.0], [96.9, 2667.0], [97.0, 2667.0], [97.1, 2866.0], [97.2, 2866.0], [97.3, 2866.0], [97.4, 2866.0], [97.5, 2866.0], [97.6, 2866.0], [97.7, 3308.0], [97.8, 3308.0], [97.9, 3308.0], [98.0, 3308.0], [98.1, 3308.0], [98.2, 3308.0], [98.3, 3605.0], [98.4, 3605.0], [98.5, 3605.0], [98.6, 3605.0], [98.7, 3605.0], [98.8, 3605.0], [98.9, 4152.0], [99.0, 4152.0], [99.1, 4152.0], [99.2, 4152.0], [99.3, 4152.0], [99.4, 4152.0], [99.5, 4519.0], [99.6, 4519.0], [99.7, 4519.0], [99.8, 4519.0], [99.9, 4519.0], [100.0, 4519.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 2.0], [41.8, 2.0], [41.9, 2.0], [42.0, 2.0], [42.1, 2.0], [42.2, 2.0], [42.3, 2.0], [42.4, 2.0], [42.5, 2.0], [42.6, 2.0], [42.7, 2.0], [42.8, 2.0], [42.9, 2.0], [43.0, 2.0], [43.1, 2.0], [43.2, 2.0], [43.3, 2.0], [43.4, 2.0], [43.5, 2.0], [43.6, 2.0], [43.7, 2.0], [43.8, 2.0], [43.9, 2.0], [44.0, 2.0], [44.1, 2.0], [44.2, 2.0], [44.3, 2.0], [44.4, 2.0], [44.5, 2.0], [44.6, 2.0], [44.7, 2.0], [44.8, 2.0], [44.9, 2.0], [45.0, 2.0], [45.1, 2.0], [45.2, 2.0], [45.3, 2.0], [45.4, 2.0], [45.5, 2.0], [45.6, 2.0], [45.7, 2.0], [45.8, 2.0], [45.9, 3.0], [46.0, 3.0], [46.1, 3.0], [46.2, 3.0], [46.3, 3.0], [46.4, 4.0], [46.5, 4.0], [46.6, 4.0], [46.7, 4.0], [46.8, 4.0], [46.9, 5.0], [47.0, 5.0], [47.1, 5.0], [47.2, 6.0], [47.3, 7.0], [47.4, 11.0], [47.5, 18.0], [47.6, 32.0], [47.7, 38.0], [47.8, 40.0], [47.9, 41.0], [48.0, 42.0], [48.1, 43.0], [48.2, 44.0], [48.3, 45.0], [48.4, 46.0], [48.5, 47.0], [48.6, 48.0], [48.7, 49.0], [48.8, 49.0], [48.9, 50.0], [49.0, 52.0], [49.1, 52.0], [49.2, 54.0], [49.3, 55.0], [49.4, 56.0], [49.5, 57.0], [49.6, 58.0], [49.7, 59.0], [49.8, 62.0], [49.9, 64.0], [50.0, 66.0], [50.1, 68.0], [50.2, 69.0], [50.3, 72.0], [50.4, 74.0], [50.5, 77.0], [50.6, 79.0], [50.7, 84.0], [50.8, 87.0], [50.9, 90.0], [51.0, 93.0], [51.1, 95.0], [51.2, 98.0], [51.3, 102.0], [51.4, 105.0], [51.5, 108.0], [51.6, 111.0], [51.7, 115.0], [51.8, 119.0], [51.9, 123.0], [52.0, 127.0], [52.1, 132.0], [52.2, 135.0], [52.3, 138.0], [52.4, 143.0], [52.5, 148.0], [52.6, 154.0], [52.7, 158.0], [52.8, 166.0], [52.9, 172.0], [53.0, 188.0], [53.1, 231.0], [53.2, 262.0], [53.3, 298.0], [53.4, 325.0], [53.5, 349.0], [53.6, 367.0], [53.7, 389.0], [53.8, 407.0], [53.9, 428.0], [54.0, 436.0], [54.1, 454.0], [54.2, 480.0], [54.3, 500.0], [54.4, 514.0], [54.5, 523.0], [54.6, 535.0], [54.7, 549.0], [54.8, 567.0], [54.9, 587.0], [55.0, 609.0], [55.1, 622.0], [55.2, 638.0], [55.3, 649.0], [55.4, 665.0], [55.5, 679.0], [55.6, 694.0], [55.7, 716.0], [55.8, 726.0], [55.9, 737.0], [56.0, 749.0], [56.1, 769.0], [56.2, 784.0], [56.3, 806.0], [56.4, 822.0], [56.5, 831.0], [56.6, 846.0], [56.7, 854.0], [56.8, 868.0], [56.9, 879.0], [57.0, 898.0], [57.1, 908.0], [57.2, 919.0], [57.3, 931.0], [57.4, 942.0], [57.5, 956.0], [57.6, 966.0], [57.7, 976.0], [57.8, 986.0], [57.9, 999.0], [58.0, 1006.0], [58.1, 1015.0], [58.2, 1026.0], [58.3, 1035.0], [58.4, 1050.0], [58.5, 1058.0], [58.6, 1067.0], [58.7, 1079.0], [58.8, 1092.0], [58.9, 1104.0], [59.0, 1115.0], [59.1, 1124.0], [59.2, 1132.0], [59.3, 1144.0], [59.4, 1154.0], [59.5, 1162.0], [59.6, 1173.0], [59.7, 1180.0], [59.8, 1188.0], [59.9, 1198.0], [60.0, 1207.0], [60.1, 1213.0], [60.2, 1222.0], [60.3, 1231.0], [60.4, 1237.0], [60.5, 1251.0], [60.6, 1259.0], [60.7, 1271.0], [60.8, 1281.0], [60.9, 1289.0], [61.0, 1300.0], [61.1, 1309.0], [61.2, 1319.0], [61.3, 1326.0], [61.4, 1332.0], [61.5, 1340.0], [61.6, 1350.0], [61.7, 1356.0], [61.8, 1361.0], [61.9, 1371.0], [62.0, 1380.0], [62.1, 1386.0], [62.2, 1392.0], [62.3, 1399.0], [62.4, 1409.0], [62.5, 1416.0], [62.6, 1426.0], [62.7, 1431.0], [62.8, 1441.0], [62.9, 1445.0], [63.0, 1453.0], [63.1, 1458.0], [63.2, 1464.0], [63.3, 1470.0], [63.4, 1478.0], [63.5, 1485.0], [63.6, 1493.0], [63.7, 1499.0], [63.8, 1508.0], [63.9, 1516.0], [64.0, 1523.0], [64.1, 1529.0], [64.2, 1537.0], [64.3, 1544.0], [64.4, 1548.0], [64.5, 1554.0], [64.6, 1563.0], [64.7, 1569.0], [64.8, 1578.0], [64.9, 1587.0], [65.0, 1596.0], [65.1, 1603.0], [65.2, 1614.0], [65.3, 1621.0], [65.4, 1629.0], [65.5, 1643.0], [65.6, 1648.0], [65.7, 1654.0], [65.8, 1660.0], [65.9, 1665.0], [66.0, 1673.0], [66.1, 1680.0], [66.2, 1689.0], [66.3, 1698.0], [66.4, 1705.0], [66.5, 1711.0], [66.6, 1720.0], [66.7, 1729.0], [66.8, 1738.0], [66.9, 1748.0], [67.0, 1758.0], [67.1, 1763.0], [67.2, 1770.0], [67.3, 1778.0], [67.4, 1786.0], [67.5, 1793.0], [67.6, 1800.0], [67.7, 1809.0], [67.8, 1815.0], [67.9, 1820.0], [68.0, 1826.0], [68.1, 1837.0], [68.2, 1846.0], [68.3, 1853.0], [68.4, 1860.0], [68.5, 1869.0], [68.6, 1876.0], [68.7, 1883.0], [68.8, 1890.0], [68.9, 1899.0], [69.0, 1904.0], [69.1, 1911.0], [69.2, 1918.0], [69.3, 1924.0], [69.4, 1930.0], [69.5, 1934.0], [69.6, 1941.0], [69.7, 1949.0], [69.8, 1957.0], [69.9, 1964.0], [70.0, 1969.0], [70.1, 1977.0], [70.2, 1985.0], [70.3, 1991.0], [70.4, 1997.0], [70.5, 2002.0], [70.6, 2006.0], [70.7, 2012.0], [70.8, 2019.0], [70.9, 2028.0], [71.0, 2037.0], [71.1, 2044.0], [71.2, 2049.0], [71.3, 2055.0], [71.4, 2064.0], [71.5, 2071.0], [71.6, 2078.0], [71.7, 2086.0], [71.8, 2090.0], [71.9, 2098.0], [72.0, 2103.0], [72.1, 2108.0], [72.2, 2113.0], [72.3, 2119.0], [72.4, 2126.0], [72.5, 2131.0], [72.6, 2137.0], [72.7, 2145.0], [72.8, 2153.0], [72.9, 2160.0], [73.0, 2168.0], [73.1, 2176.0], [73.2, 2182.0], [73.3, 2189.0], [73.4, 2195.0], [73.5, 2205.0], [73.6, 2213.0], [73.7, 2220.0], [73.8, 2226.0], [73.9, 2232.0], [74.0, 2238.0], [74.1, 2247.0], [74.2, 2256.0], [74.3, 2261.0], [74.4, 2267.0], [74.5, 2274.0], [74.6, 2280.0], [74.7, 2287.0], [74.8, 2293.0], [74.9, 2298.0], [75.0, 2305.0], [75.1, 2311.0], [75.2, 2318.0], [75.3, 2324.0], [75.4, 2331.0], [75.5, 2337.0], [75.6, 2343.0], [75.7, 2351.0], [75.8, 2356.0], [75.9, 2362.0], [76.0, 2368.0], [76.1, 2374.0], [76.2, 2379.0], [76.3, 2386.0], [76.4, 2391.0], [76.5, 2396.0], [76.6, 2399.0], [76.7, 2403.0], [76.8, 2408.0], [76.9, 2414.0], [77.0, 2420.0], [77.1, 2428.0], [77.2, 2433.0], [77.3, 2441.0], [77.4, 2449.0], [77.5, 2455.0], [77.6, 2460.0], [77.7, 2468.0], [77.8, 2472.0], [77.9, 2477.0], [78.0, 2482.0], [78.1, 2489.0], [78.2, 2494.0], [78.3, 2499.0], [78.4, 2507.0], [78.5, 2512.0], [78.6, 2519.0], [78.7, 2525.0], [78.8, 2531.0], [78.9, 2537.0], [79.0, 2542.0], [79.1, 2547.0], [79.2, 2553.0], [79.3, 2558.0], [79.4, 2564.0], [79.5, 2570.0], [79.6, 2579.0], [79.7, 2585.0], [79.8, 2591.0], [79.9, 2594.0], [80.0, 2597.0], [80.1, 2601.0], [80.2, 2609.0], [80.3, 2613.0], [80.4, 2617.0], [80.5, 2623.0], [80.6, 2626.0], [80.7, 2631.0], [80.8, 2637.0], [80.9, 2643.0], [81.0, 2647.0], [81.1, 2653.0], [81.2, 2660.0], [81.3, 2665.0], [81.4, 2672.0], [81.5, 2675.0], [81.6, 2681.0], [81.7, 2687.0], [81.8, 2692.0], [81.9, 2696.0], [82.0, 2701.0], [82.1, 2707.0], [82.2, 2712.0], [82.3, 2716.0], [82.4, 2721.0], [82.5, 2727.0], [82.6, 2733.0], [82.7, 2738.0], [82.8, 2742.0], [82.9, 2747.0], [83.0, 2754.0], [83.1, 2758.0], [83.2, 2764.0], [83.3, 2770.0], [83.4, 2776.0], [83.5, 2784.0], [83.6, 2788.0], [83.7, 2793.0], [83.8, 2800.0], [83.9, 2804.0], [84.0, 2808.0], [84.1, 2814.0], [84.2, 2819.0], [84.3, 2823.0], [84.4, 2828.0], [84.5, 2833.0], [84.6, 2842.0], [84.7, 2847.0], [84.8, 2853.0], [84.9, 2858.0], [85.0, 2863.0], [85.1, 2867.0], [85.2, 2873.0], [85.3, 2876.0], [85.4, 2881.0], [85.5, 2889.0], [85.6, 2892.0], [85.7, 2896.0], [85.8, 2900.0], [85.9, 2906.0], [86.0, 2909.0], [86.1, 2915.0], [86.2, 2919.0], [86.3, 2925.0], [86.4, 2931.0], [86.5, 2939.0], [86.6, 2947.0], [86.7, 2953.0], [86.8, 2957.0], [86.9, 2965.0], [87.0, 2974.0], [87.1, 2985.0], [87.2, 2992.0], [87.3, 2999.0], [87.4, 3005.0], [87.5, 3013.0], [87.6, 3019.0], [87.7, 3026.0], [87.8, 3031.0], [87.9, 3040.0], [88.0, 3050.0], [88.1, 3058.0], [88.2, 3065.0], [88.3, 3073.0], [88.4, 3082.0], [88.5, 3088.0], [88.6, 3095.0], [88.7, 3101.0], [88.8, 3107.0], [88.9, 3115.0], [89.0, 3120.0], [89.1, 3129.0], [89.2, 3136.0], [89.3, 3142.0], [89.4, 3150.0], [89.5, 3157.0], [89.6, 3164.0], [89.7, 3171.0], [89.8, 3182.0], [89.9, 3192.0], [90.0, 3200.0], [90.1, 3212.0], [90.2, 3218.0], [90.3, 3227.0], [90.4, 3238.0], [90.5, 3244.0], [90.6, 3252.0], [90.7, 3261.0], [90.8, 3271.0], [90.9, 3278.0], [91.0, 3284.0], [91.1, 3296.0], [91.2, 3306.0], [91.3, 3316.0], [91.4, 3326.0], [91.5, 3335.0], [91.6, 3348.0], [91.7, 3357.0], [91.8, 3367.0], [91.9, 3375.0], [92.0, 3385.0], [92.1, 3397.0], [92.2, 3406.0], [92.3, 3416.0], [92.4, 3431.0], [92.5, 3443.0], [92.6, 3457.0], [92.7, 3467.0], [92.8, 3478.0], [92.9, 3498.0], [93.0, 3505.0], [93.1, 3520.0], [93.2, 3532.0], [93.3, 3547.0], [93.4, 3563.0], [93.5, 3575.0], [93.6, 3591.0], [93.7, 3605.0], [93.8, 3623.0], [93.9, 3641.0], [94.0, 3655.0], [94.1, 3667.0], [94.2, 3678.0], [94.3, 3696.0], [94.4, 3713.0], [94.5, 3723.0], [94.6, 3740.0], [94.7, 3758.0], [94.8, 3772.0], [94.9, 3782.0], [95.0, 3803.0], [95.1, 3830.0], [95.2, 3844.0], [95.3, 3857.0], [95.4, 3880.0], [95.5, 3901.0], [95.6, 3921.0], [95.7, 3943.0], [95.8, 3974.0], [95.9, 4011.0], [96.0, 4041.0], [96.1, 4072.0], [96.2, 4099.0], [96.3, 4128.0], [96.4, 4147.0], [96.5, 4174.0], [96.6, 4210.0], [96.7, 4246.0], [96.8, 4272.0], [96.9, 4310.0], [97.0, 4356.0], [97.1, 4400.0], [97.2, 4427.0], [97.3, 4506.0], [97.4, 4542.0], [97.5, 4617.0], [97.6, 4667.0], [97.7, 4751.0], [97.8, 4882.0], [97.9, 5086.0], [98.0, 5547.0], [98.1, 12005.0], [98.2, 12006.0], [98.3, 12007.0], [98.4, 16007.0], [98.5, 19969.0], [98.6, 20004.0], [98.7, 20004.0], [98.8, 20005.0], [98.9, 20005.0], [99.0, 20005.0], [99.1, 20005.0], [99.2, 20006.0], [99.3, 20006.0], [99.4, 20006.0], [99.5, 20006.0], [99.6, 20006.0], [99.7, 20007.0], [99.8, 20046.0], [99.9, 20228.0], [100.0, 20576.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 9345.0, "series": [{"data": [[0.0, 9345.0], [600.0, 105.0], [700.0, 102.0], [800.0, 109.0], [900.0, 120.0], [1000.0, 172.0], [1100.0, 152.0], [1200.0, 161.0], [1300.0, 197.0], [1400.0, 237.0], [1500.0, 201.0], [1600.0, 208.0], [1700.0, 221.0], [1800.0, 203.0], [1900.0, 234.0], [2000.0, 210.0], [2100.0, 207.0], [2200.0, 226.0], [2300.0, 257.0], [2400.0, 251.0], [2500.0, 276.0], [2600.0, 326.0], [2800.0, 324.0], [2700.0, 319.0], [2900.0, 280.0], [3000.0, 244.0], [3100.0, 241.0], [3300.0, 213.0], [3200.0, 217.0], [3400.0, 168.0], [3500.0, 151.0], [3700.0, 86.0], [3600.0, 131.0], [3800.0, 81.0], [3900.0, 84.0], [4000.0, 73.0], [4100.0, 54.0], [4200.0, 50.0], [4300.0, 38.0], [4400.0, 33.0], [4600.0, 20.0], [4500.0, 30.0], [4800.0, 18.0], [4700.0, 18.0], [4900.0, 12.0], [5100.0, 4.0], [5000.0, 9.0], [5200.0, 2.0], [5500.0, 2.0], [5400.0, 2.0], [100.0, 307.0], [200.0, 38.0], [300.0, 66.0], [400.0, 67.0], [500.0, 98.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[600.0, 19.0], [700.0, 17.0], [800.0, 10.0], [900.0, 13.0], [1000.0, 2.0], [1100.0, 1.0], [1200.0, 2.0], [1300.0, 6.0], [1400.0, 6.0], [1500.0, 6.0], [100.0, 7.0], [1600.0, 7.0], [1700.0, 7.0], [1800.0, 6.0], [2000.0, 2.0], [2400.0, 1.0], [2500.0, 1.0], [2600.0, 1.0], [2800.0, 1.0], [3300.0, 1.0], [200.0, 14.0], [3600.0, 1.0], [4100.0, 1.0], [4500.0, 1.0], [300.0, 14.0], [400.0, 9.0], [500.0, 14.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 8714.0], [600.0, 109.0], [700.0, 111.0], [800.0, 131.0], [900.0, 153.0], [1000.0, 161.0], [1100.0, 176.0], [1200.0, 184.0], [1300.0, 223.0], [1400.0, 238.0], [1500.0, 228.0], [1600.0, 218.0], [1700.0, 216.0], [1800.0, 224.0], [1900.0, 260.0], [2000.0, 252.0], [2100.0, 262.0], [2200.0, 249.0], [2300.0, 284.0], [2400.0, 290.0], [2500.0, 295.0], [2600.0, 328.0], [2700.0, 310.0], [2800.0, 337.0], [2900.0, 260.0], [3000.0, 231.0], [3100.0, 226.0], [3200.0, 193.0], [3300.0, 168.0], [3400.0, 136.0], [3500.0, 125.0], [3700.0, 111.0], [3600.0, 114.0], [3800.0, 88.0], [3900.0, 58.0], [4000.0, 62.0], [4200.0, 54.0], [4300.0, 37.0], [4100.0, 61.0], [4600.0, 29.0], [4400.0, 32.0], [4500.0, 31.0], [4700.0, 17.0], [4800.0, 12.0], [4900.0, 10.0], [5100.0, 7.0], [5000.0, 6.0], [5300.0, 4.0], [5200.0, 5.0], [5500.0, 1.0], [12000.0, 57.0], [16000.0, 16.0], [20000.0, 226.0], [19800.0, 3.0], [19700.0, 1.0], [19900.0, 9.0], [20100.0, 8.0], [20200.0, 9.0], [20400.0, 5.0], [20300.0, 5.0], [20500.0, 1.0], [100.0, 302.0], [200.0, 46.0], [300.0, 78.0], [400.0, 90.0], [500.0, 113.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2999.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 16542.0, "series": [{"data": [[0.0, 2999.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3092.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 11537.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 16542.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 48.16589861751149, "minX": 1.58543388E12, "maxY": 170.0, "series": [{"data": [[1.58543412E12, 170.0], [1.58543442E12, 169.68571428571425], [1.5854343E12, 170.0], [1.58543424E12, 170.0], [1.58543394E12, 170.0], [1.58543388E12, 103.36522148916113], [1.58543406E12, 170.0], [1.58543448E12, 129.6724531749658], [1.585434E12, 170.0], [1.58543454E12, 48.16589861751149], [1.58543418E12, 170.0], [1.58543436E12, 170.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543454E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 41.0, "minX": 1.0, "maxY": 3259.6666666666665, "series": [{"data": [[4.0, 58.0], [6.0, 53.0], [7.0, 69.0], [8.0, 230.0], [9.0, 49.5], [10.0, 54.0], [13.0, 52.5], [14.0, 53.0], [16.0, 50.75], [17.0, 54.5], [18.0, 72.0], [19.0, 62.6], [20.0, 68.5], [21.0, 64.33333333333333], [22.0, 55.5], [23.0, 43.0], [24.0, 50.0], [25.0, 80.0], [26.0, 56.5], [27.0, 43.333333333333336], [28.0, 80.0], [29.0, 64.0], [30.0, 55.29999999999999], [31.0, 47.625], [32.0, 58.4], [33.0, 51.8], [34.0, 46.0], [35.0, 57.0], [36.0, 47.0], [37.0, 109.33333333333333], [38.0, 67.41666666666667], [39.0, 56.0], [40.0, 122.0], [41.0, 82.14285714285715], [42.0, 60.111111111111114], [43.0, 92.2], [44.0, 49.07142857142857], [45.0, 54.3076923076923], [46.0, 89.0], [47.0, 59.375], [48.0, 56.8], [49.0, 56.75], [50.0, 59.666666666666664], [51.0, 95.42857142857143], [52.0, 87.66666666666667], [53.0, 63.00000000000001], [54.0, 53.63636363636363], [55.0, 71.33333333333333], [56.0, 94.53846153846153], [57.0, 114.0], [58.0, 146.33333333333334], [59.0, 72.28571428571429], [60.0, 110.625], [61.0, 83.41666666666667], [62.0, 72.33333333333334], [63.0, 80.0909090909091], [64.0, 106.81818181818181], [65.0, 76.66666666666666], [66.0, 95.37499999999999], [67.0, 105.08333333333333], [68.0, 533.090909090909], [69.0, 324.25], [70.0, 115.0], [71.0, 74.85714285714285], [72.0, 72.66666666666667], [73.0, 92.5], [74.0, 87.93333333333334], [75.0, 84.60000000000001], [76.0, 494.257142857143], [77.0, 92.5], [78.0, 506.925925925926], [79.0, 262.14285714285717], [80.0, 113.33333333333333], [81.0, 298.7142857142857], [82.0, 214.93749999999997], [83.0, 517.4], [84.0, 435.6842105263158], [85.0, 195.0], [86.0, 627.65], [87.0, 372.66666666666663], [88.0, 447.25], [89.0, 695.4444444444445], [90.0, 543.2307692307693], [91.0, 565.0952380952381], [92.0, 739.2], [93.0, 725.3], [94.0, 312.4], [95.0, 231.0], [96.0, 339.59999999999997], [97.0, 776.0], [98.0, 679.0714285714286], [99.0, 548.2352941176471], [100.0, 698.9230769230769], [101.0, 325.8888888888889], [102.0, 305.3888888888889], [103.0, 132.5], [104.0, 479.3333333333333], [105.0, 459.31250000000006], [106.0, 132.5], [107.0, 129.57142857142858], [108.0, 674.6071428571428], [109.0, 841.1666666666666], [110.0, 680.6666666666666], [111.0, 837.2666666666665], [112.0, 927.3636363636363], [113.0, 1101.7777777777778], [114.0, 633.3333333333333], [115.0, 492.2142857142857], [116.0, 1197.8717948717947], [117.0, 479.5], [118.0, 1404.21875], [119.0, 879.6428571428571], [120.0, 779.3636363636364], [121.0, 981.9090909090909], [122.0, 1097.7037037037037], [123.0, 1075.4545454545455], [124.0, 1271.1764705882351], [125.0, 611.6666666666666], [126.0, 1777.2368421052633], [127.0, 878.5999999999999], [128.0, 1841.965517241379], [129.0, 1884.6315789473686], [130.0, 1781.8684210526314], [131.0, 1176.2727272727273], [132.0, 1398.2222222222222], [133.0, 1559.5757575757577], [134.0, 1493.8], [135.0, 1341.75], [136.0, 1534.2727272727273], [137.0, 2026.941176470589], [138.0, 2019.685714285714], [139.0, 1691.7777777777778], [140.0, 1379.5454545454545], [141.0, 1529.3076923076924], [142.0, 1615.1], [143.0, 1389.6153846153845], [144.0, 1658.6363636363635], [145.0, 1824.7142857142856], [146.0, 1906.0909090909092], [147.0, 1472.375], [148.0, 2263.816326530612], [149.0, 2000.2666666666667], [150.0, 1713.25], [151.0, 1921.7], [152.0, 2007.27027027027], [153.0, 2337.4615384615386], [154.0, 2037.0588235294117], [155.0, 1959.8095238095236], [156.0, 2320.556962025316], [157.0, 1898.0312499999998], [158.0, 1643.857142857143], [159.0, 1943.7096774193549], [160.0, 2123.2153846153847], [161.0, 1706.3448275862072], [162.0, 1550.0], [163.0, 1591.25], [164.0, 1560.2222222222222], [165.0, 1711.6], [166.0, 2218.8333333333335], [167.0, 2275.574074074074], [168.0, 78.48214285714288], [169.0, 48.92105263157893], [170.0, 1035.7766210173347], [1.0, 44.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[162.0428823529414, 1028.0026470588246]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[12.0, 3259.6666666666665], [13.0, 3156.6], [14.0, 1302.6], [15.0, 422.5], [17.0, 389.0], [18.0, 548.0], [19.0, 369.0], [20.0, 309.0], [21.0, 293.0], [22.0, 180.0], [23.0, 230.0], [24.0, 162.0], [25.0, 213.0], [26.0, 179.0], [27.0, 160.0], [28.0, 253.0], [29.0, 334.0], [30.0, 331.0], [31.0, 265.0], [32.0, 283.0], [33.0, 256.0], [34.0, 186.0], [35.0, 165.0], [36.0, 310.0], [38.0, 415.0], [39.0, 462.0], [40.0, 409.0], [41.0, 383.0], [42.0, 260.0], [44.0, 301.5], [46.0, 375.0], [47.0, 201.0], [48.0, 203.0], [49.0, 237.0], [50.0, 340.0], [52.0, 452.0], [53.0, 303.0], [54.0, 192.0], [55.0, 303.0], [57.0, 644.0], [58.0, 387.0], [59.0, 584.0], [60.0, 668.0], [61.0, 617.0], [62.0, 551.0], [63.0, 701.0], [65.0, 724.0], [66.0, 628.0], [67.0, 511.0], [68.0, 435.0], [69.0, 641.0], [71.0, 724.0], [72.0, 569.0], [73.0, 369.0], [74.0, 456.0], [75.0, 505.0], [76.0, 576.0], [77.0, 497.0], [78.0, 634.0], [79.0, 594.0], [80.0, 539.0], [82.0, 862.0], [83.0, 913.0], [84.0, 849.0], [85.0, 881.0], [86.0, 747.0], [88.0, 903.0], [89.0, 679.5], [90.0, 559.0], [91.0, 584.0], [93.0, 794.5], [95.0, 842.0], [96.0, 695.0], [98.0, 687.5], [99.0, 661.0], [101.0, 723.0], [103.0, 759.0], [104.0, 695.5], [106.0, 901.0], [107.0, 845.0], [108.0, 988.0], [109.0, 762.0], [110.0, 913.0], [111.0, 741.0], [112.0, 769.0], [113.0, 691.0], [114.0, 656.0], [116.0, 914.0], [117.0, 938.0], [118.0, 734.0], [119.0, 673.0], [121.0, 708.0], [122.0, 756.0], [123.0, 659.0], [125.0, 800.0], [126.0, 812.0], [127.0, 919.0], [128.0, 955.0], [129.0, 973.0], [130.0, 969.0], [131.0, 1030.0], [133.0, 1075.5], [135.0, 1259.0], [137.0, 1476.0], [138.0, 1478.0], [139.0, 1413.5], [141.0, 1308.5], [142.0, 1332.0], [144.0, 1375.5], [145.0, 1326.0], [148.0, 1715.5], [149.0, 1635.0], [150.0, 1597.0], [151.0, 1497.0], [152.0, 1586.0], [153.0, 1641.0], [154.0, 1498.0], [156.0, 1733.0], [157.0, 1814.0], [158.0, 1687.0], [159.0, 1757.0], [161.0, 1786.0], [162.0, 1642.0], [163.0, 1561.0], [164.0, 1606.0], [166.0, 1726.0], [168.0, 1697.0], [169.0, 1717.0], [170.0, 1941.3333333333333]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[87.60000000000001, 963.5235294117647]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[4.0, 41.0], [8.0, 297.3333333333333], [9.0, 70.0], [10.0, 55.75], [16.0, 88.57142857142857], [17.0, 93.55555555555556], [18.0, 106.0], [19.0, 46.5], [21.0, 55.0], [22.0, 64.0], [23.0, 59.0], [24.0, 63.0], [25.0, 52.2], [26.0, 56.0], [27.0, 51.333333333333336], [28.0, 65.0], [29.0, 75.33333333333333], [30.0, 59.83333333333333], [31.0, 62.5], [32.0, 50.95652173913042], [33.0, 62.8], [34.0, 47.0], [35.0, 43.0], [36.0, 74.5], [37.0, 90.625], [38.0, 74.88888888888889], [39.0, 79.4], [40.0, 99.33333333333334], [41.0, 43.0], [42.0, 68.0], [43.0, 114.0], [44.0, 50.666666666666664], [45.0, 60.0], [46.0, 90.0], [47.0, 56.53846153846155], [48.0, 50.23529411764706], [49.0, 63.1111111111111], [50.0, 84.33333333333333], [51.0, 113.25], [52.0, 93.33333333333334], [53.0, 71.16666666666667], [54.0, 59.92], [55.0, 61.14285714285714], [56.0, 113.9], [57.0, 52.166666666666664], [58.0, 116.0], [59.0, 67.41176470588235], [60.0, 96.60000000000001], [61.0, 97.69999999999999], [62.0, 98.33333333333334], [63.0, 95.125], [64.0, 118.25], [65.0, 68.5], [66.0, 87.66666666666667], [67.0, 141.3214285714286], [68.0, 541.75], [69.0, 394.5833333333333], [70.0, 124.44444444444444], [71.0, 828.2307692307693], [72.0, 115.5], [73.0, 95.66666666666667], [74.0, 84.99999999999999], [75.0, 94.75], [76.0, 432.33333333333337], [77.0, 302.25], [78.0, 323.34999999999997], [79.0, 306.1], [80.0, 121.22222222222223], [81.0, 263.00000000000006], [82.0, 338.2857142857142], [83.0, 418.2777777777778], [84.0, 385.5], [85.0, 467.2857142857143], [86.0, 512.8181818181818], [87.0, 235.45454545454547], [88.0, 370.25000000000006], [89.0, 572.7058823529412], [90.0, 541.6875], [91.0, 496.5833333333333], [92.0, 575.5882352941177], [93.0, 655.9090909090909], [94.0, 434.6666666666667], [95.0, 93.375], [96.0, 516.6666666666667], [97.0, 735.95], [98.0, 404.7], [99.0, 747.5714285714287], [100.0, 553.3888888888889], [101.0, 308.3076923076923], [102.0, 296.3076923076923], [103.0, 138.57142857142858], [104.0, 349.2], [105.0, 229.86666666666665], [106.0, 220.83333333333331], [107.0, 113.4], [108.0, 649.0000000000001], [109.0, 738.4375], [110.0, 684.7058823529412], [111.0, 837.8518518518518], [112.0, 582.9], [113.0, 1071.7894736842104], [114.0, 685.8181818181818], [115.0, 429.7857142857143], [116.0, 1395.516129032258], [117.0, 335.0], [118.0, 1190.8823529411766], [119.0, 1371.3750000000002], [120.0, 882.1818181818181], [121.0, 1217.7692307692307], [122.0, 1022.5882352941177], [123.0, 1051.4545454545455], [124.0, 1222.0000000000002], [125.0, 854.9999999999999], [126.0, 1644.375], [127.0, 1186.4444444444443], [128.0, 1715.8260869565217], [129.0, 1458.5833333333333], [130.0, 1899.1081081081084], [131.0, 1176.6], [132.0, 1336.5263157894735], [133.0, 1586.75], [134.0, 1598.4782608695652], [135.0, 1367.0], [136.0, 1656.2], [137.0, 1821.8749999999998], [138.0, 1871.9062500000002], [139.0, 1681.7959183673468], [140.0, 1455.2916666666667], [141.0, 1437.9999999999998], [142.0, 1465.0833333333333], [143.0, 1346.1764705882354], [144.0, 1573.7857142857142], [145.0, 1780.8749999999998], [146.0, 1684.214285714286], [147.0, 1534.4166666666667], [148.0, 2028.3], [149.0, 2101.5769230769233], [150.0, 1699.3000000000002], [151.0, 1997.8], [152.0, 1980.7619047619044], [153.0, 2074.6666666666665], [154.0, 1951.923076923077], [155.0, 1893.2142857142858], [156.0, 2227.5624999999995], [157.0, 1875.032786885246], [158.0, 1742.1666666666665], [159.0, 1922.4666666666672], [160.0, 1954.8888888888887], [161.0, 1578.0], [162.0, 1579.4117647058824], [163.0, 1586.4166666666667], [164.0, 1540.6666666666667], [165.0, 2244.802816901408], [166.0, 2631.5], [167.0, 2347.5737704918024], [168.0, 104.18644067796605], [169.0, 58.220264317180586], [170.0, 1489.0676460300954]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[162.0665882352949, 1408.3545882353005]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 170.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.58543388E12, "maxY": 273698.4166666667, "series": [{"data": [[1.58543412E12, 219904.66666666666], [1.58543442E12, 190576.1], [1.5854343E12, 177865.33333333334], [1.58543424E12, 182425.93333333332], [1.58543394E12, 260862.1], [1.58543388E12, 235461.85], [1.58543406E12, 273698.4166666667], [1.58543448E12, 259376.88333333333], [1.585434E12, 263351.98333333334], [1.58543454E12, 51425.73333333333], [1.58543418E12, 214039.68333333332], [1.58543436E12, 186744.83333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58543412E12, 16379.666666666666], [1.58543442E12, 1350.7333333333333], [1.5854343E12, 0.0], [1.58543424E12, 12492.6], [1.58543394E12, 16659.666666666668], [1.58543388E12, 14615.1], [1.58543406E12, 17216.433333333334], [1.58543448E12, 15652.633333333333], [1.585434E12, 16930.233333333334], [1.58543454E12, 3103.3333333333335], [1.58543418E12, 11588.5], [1.58543436E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543454E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1.0350294985250705, "minX": 1.58543388E12, "maxY": 4204.079148936177, "series": [{"data": [[1.58543412E12, 1738.9651347068138], [1.58543442E12, 69.24722222222222], [1.5854343E12, 1.180680484943292], [1.58543424E12, 2380.7391304347802], [1.58543394E12, 2257.7493734335867], [1.58543388E12, 595.8518518518513], [1.58543406E12, 2253.3671300081696], [1.58543448E12, 1705.7378640776697], [1.585434E12, 2255.8048979591863], [1.58543454E12, 88.80803571428572], [1.58543418E12, 2008.8105360443612], [1.58543436E12, 1.0350294985250705]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543394E12, 2028.25], [1.58543388E12, 937.867469879518]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58543412E12, 1916.5510204081654], [1.58543442E12, 119.41330724070455], [1.5854343E12, 1303.6311757947137], [1.58543424E12, 2525.7920193470395], [1.58543394E12, 2391.889530090683], [1.58543388E12, 592.6528189910978], [1.58543406E12, 2290.839256865914], [1.58543448E12, 1656.4005681818194], [1.585434E12, 2327.1433278418467], [1.58543454E12, 175.65714285714276], [1.58543418E12, 4204.079148936177], [1.58543436E12, 1.056374355195286]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543454E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58543388E12, "maxY": 2602.762553191491, "series": [{"data": [[1.58543412E12, 1738.28288431062], [1.58543442E12, 68.134126984127], [1.5854343E12, 0.0], [1.58543424E12, 2380.405434782608], [1.58543394E12, 2254.3776106933983], [1.58543388E12, 594.0814814814814], [1.58543406E12, 2252.7604251839753], [1.58543448E12, 1704.9382171226837], [1.585434E12, 2255.266122448976], [1.58543454E12, 88.25000000000001], [1.58543418E12, 2007.9075785582247], [1.58543436E12, 0.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543394E12, 2027.0], [1.58543388E12, 934.861445783132]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58543412E12, 1916.0348639455794], [1.58543442E12, 117.70724070450098], [1.5854343E12, 0.0], [1.58543424E12, 2525.4401451027793], [1.58543394E12, 2391.1096455070033], [1.58543388E12, 590.9109792284868], [1.58543406E12, 2290.24636510501], [1.58543448E12, 1655.730113636363], [1.585434E12, 2324.1013179571632], [1.58543454E12, 174.6666666666667], [1.58543418E12, 2602.762553191491], [1.58543436E12, 0.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543454E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.044642857142857095, "minX": 1.58543388E12, "maxY": 1.1024096385542175, "series": [{"data": [[1.58543412E12, 0.41759112519809827], [1.58543442E12, 0.5515873015873007], [1.5854343E12, 0.657802111849826], [1.58543424E12, 0.5684782608695653], [1.58543394E12, 0.5497076023391813], [1.58543388E12, 0.2825396825396827], [1.58543406E12, 0.5453802125919861], [1.58543448E12, 0.5472197705207417], [1.585434E12, 0.5608163265306119], [1.58543454E12, 0.044642857142857095], [1.58543418E12, 0.5868761552680226], [1.58543436E12, 0.5317109144542775]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543394E12, 0.5], [1.58543388E12, 1.1024096385542175]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58543412E12, 0.5450680272108848], [1.58543442E12, 1.0270058708414838], [1.5854343E12, 0.6300268096514754], [1.58543424E12, 0.588875453446192], [1.58543394E12, 0.6578730420445185], [1.58543388E12, 0.7428288822947577], [1.58543406E12, 0.5686591276252019], [1.58543448E12, 0.5568181818181817], [1.585434E12, 0.674629324546953], [1.58543454E12, 0.6571428571428571], [1.58543418E12, 0.6527659574468084], [1.58543436E12, 0.5397936624907892]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543454E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.58543388E12, "maxY": 20576.0, "series": [{"data": [[1.58543412E12, 4312.0], [1.58543442E12, 3372.0], [1.58543424E12, 4076.0], [1.58543394E12, 5566.0], [1.58543388E12, 4519.0], [1.58543406E12, 5405.0], [1.58543448E12, 2909.0], [1.585434E12, 5150.0], [1.58543454E12, 2139.0], [1.58543418E12, 20576.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58543412E12, 1.0], [1.58543442E12, 1546.0], [1.58543424E12, 1.0], [1.58543394E12, 2.0], [1.58543388E12, 32.0], [1.58543406E12, 1.0], [1.58543448E12, 34.0], [1.585434E12, 2.0], [1.58543454E12, 32.0], [1.58543418E12, 63.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58543412E12, 3319.7], [1.58543442E12, 3091.0], [1.58543424E12, 3182.2000000000003], [1.58543394E12, 3774.7000000000003], [1.58543388E12, 1551.0], [1.58543406E12, 3940.0], [1.58543448E12, 2370.0], [1.585434E12, 4117.5], [1.58543454E12, 290.0], [1.58543418E12, 3502.3999999999996]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58543412E12, 3779.74], [1.58543442E12, 3337.7999999999997], [1.58543424E12, 3696.399999999999], [1.58543394E12, 5077.08], [1.58543388E12, 1974.0], [1.58543406E12, 4732.560000000001], [1.58543448E12, 2694.999999999999], [1.585434E12, 4665.349999999999], [1.58543454E12, 1776.2499999999964], [1.58543418E12, 20255.18]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58543412E12, 3475.7], [1.58543442E12, 3203.5], [1.58543424E12, 3367.0], [1.58543394E12, 4514.4], [1.58543388E12, 1707.2499999999995], [1.58543406E12, 4212.4], [1.58543448E12, 2504.0], [1.585434E12, 4335.75], [1.58543454E12, 649.75], [1.58543418E12, 3694.8999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543454E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 20366.5, "series": [{"data": [[3.0, 56.0], [4.0, 51.0], [6.0, 188.0], [9.0, 2866.0], [10.0, 53.5], [11.0, 107.5], [12.0, 50.0], [14.0, 75.5], [15.0, 75.0], [16.0, 23.0], [18.0, 52.0], [20.0, 86.5], [22.0, 56.5], [24.0, 2360.5], [25.0, 112.5], [26.0, 2249.5], [27.0, 2685.5], [28.0, 1200.0], [29.0, 2412.0], [30.0, 2397.0], [31.0, 2719.0], [32.0, 2689.5], [33.0, 2375.0], [35.0, 2615.0], [34.0, 2475.5], [37.0, 2160.0], [36.0, 2559.0], [38.0, 2490.5], [39.0, 2353.5], [40.0, 2392.0], [41.0, 2098.5], [42.0, 2020.5], [43.0, 2600.0], [44.0, 2049.5], [45.0, 2255.0], [46.0, 1042.0], [47.0, 1693.0], [48.0, 1417.0], [49.0, 1546.0], [50.0, 1607.0], [51.0, 733.0], [53.0, 1091.0], [52.0, 969.5], [55.0, 2822.5], [54.0, 544.0], [57.0, 1857.0], [56.0, 2647.0], [59.0, 747.0], [58.0, 1040.5], [63.0, 56.0], [62.0, 3.0], [65.0, 1020.5], [66.0, 1828.5], [69.0, 40.5], [68.0, 623.0], [71.0, 826.0], [74.0, 1749.5], [72.0, 54.0], [76.0, 14.0], [77.0, 40.0], [79.0, 43.0], [78.0, 242.0], [81.0, 893.0], [82.0, 4.0], [84.0, 28.0], [86.0, 48.0], [85.0, 230.0], [106.0, 20366.5], [109.0, 20130.0], [126.0, 1912.5], [130.0, 1168.0], [129.0, 847.5], [1.0, 44.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[5.0, 1.0], [7.0, 12005.0], [14.0, 0.0], [18.0, 1.0], [20.0, 1.0], [21.0, 20006.0], [28.0, 1.0], [30.0, 0.0], [31.0, 1322.5], [33.0, 1.0], [37.0, 3756.5], [36.0, 1.0], [39.0, 2135.0], [41.0, 1463.0], [40.0, 1.0], [42.0, 912.5], [45.0, 1.0], [46.0, 759.0], [47.0, 1056.0], [51.0, 1.0], [50.0, 12006.0], [52.0, 1.0], [55.0, 2438.0], [54.0, 1.0], [58.0, 1.0], [63.0, 0.0], [65.0, 2.0], [66.0, 1.0], [69.0, 20005.0], [68.0, 1.0], [71.0, 1.0], [74.0, 2964.5], [72.0, 0.0], [73.0, 2.0], [79.0, 1.0], [78.0, 1.0], [77.0, 1.0], [80.0, 1.0], [82.0, 1.0], [81.0, 1.0], [83.0, 1.0], [86.0, 1.0], [85.0, 1.0], [84.0, 1.0], [87.0, 1.0], [89.0, 1.0], [91.0, 1.0], [88.0, 1.0], [90.0, 1.0], [93.0, 1.0], [92.0, 1.0], [94.0, 1.0], [95.0, 1.0], [99.0, 1.0], [97.0, 1.0], [96.0, 1.0], [98.0, 1.0], [100.0, 1.0], [103.0, 1.0], [102.0, 1.0], [101.0, 1.0], [106.0, 1.0], [105.0, 1.0], [104.0, 1.0], [109.0, 1.0], [125.0, 2.0], [130.0, 4642.0], [129.0, 2671.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 130.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 20365.5, "series": [{"data": [[3.0, 55.5], [4.0, 50.0], [6.0, 188.0], [9.0, 2861.0], [10.0, 53.0], [11.0, 106.5], [12.0, 50.0], [14.0, 73.5], [15.0, 75.0], [16.0, 23.0], [18.0, 51.0], [20.0, 80.5], [22.0, 56.0], [24.0, 2360.0], [25.0, 110.0], [26.0, 2248.5], [27.0, 2685.5], [28.0, 1200.0], [29.0, 2412.0], [30.0, 2396.0], [31.0, 2718.0], [32.0, 2689.5], [33.0, 2374.5], [35.0, 2614.0], [34.0, 2474.5], [37.0, 2159.0], [36.0, 2559.0], [38.0, 2490.0], [39.0, 2353.0], [40.0, 2391.5], [41.0, 2098.5], [42.0, 2020.0], [43.0, 2600.0], [44.0, 2048.5], [45.0, 2245.5], [46.0, 1042.0], [47.0, 1693.0], [48.0, 1417.0], [49.0, 1545.0], [50.0, 1606.5], [51.0, 732.5], [53.0, 1091.0], [52.0, 969.0], [55.0, 2822.0], [54.0, 544.0], [57.0, 1856.0], [56.0, 2647.0], [59.0, 747.0], [58.0, 1040.5], [63.0, 56.0], [62.0, 3.0], [65.0, 1020.0], [66.0, 1828.5], [69.0, 39.5], [68.0, 623.0], [71.0, 825.0], [74.0, 1748.5], [72.0, 54.0], [76.0, 14.0], [77.0, 39.0], [79.0, 43.0], [78.0, 242.0], [81.0, 892.0], [82.0, 4.0], [84.0, 28.0], [86.0, 47.5], [85.0, 230.0], [106.0, 20365.5], [109.0, 20130.0], [126.0, 1912.5], [130.0, 1167.5], [129.0, 847.5], [1.0, 44.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[5.0, 0.0], [7.0, 0.0], [14.0, 0.0], [18.0, 0.0], [20.0, 0.0], [21.0, 0.0], [28.0, 0.0], [30.0, 0.0], [31.0, 1322.5], [33.0, 0.0], [37.0, 3756.0], [36.0, 0.0], [39.0, 2135.0], [41.0, 1328.0], [40.0, 0.0], [42.0, 447.5], [45.0, 0.0], [46.0, 759.0], [47.0, 1056.0], [51.0, 0.0], [50.0, 0.0], [52.0, 0.0], [55.0, 2437.0], [54.0, 0.0], [58.0, 0.0], [63.0, 0.0], [65.0, 0.0], [66.0, 0.0], [69.0, 0.0], [68.0, 0.0], [71.0, 0.0], [74.0, 2964.0], [72.0, 0.0], [73.0, 0.0], [79.0, 0.0], [78.0, 0.0], [77.0, 0.0], [80.0, 0.0], [82.0, 0.0], [81.0, 0.0], [83.0, 0.0], [86.0, 0.0], [85.0, 0.0], [84.0, 0.0], [87.0, 0.0], [89.0, 0.0], [91.0, 0.0], [88.0, 0.0], [90.0, 0.0], [93.0, 0.0], [92.0, 0.0], [94.0, 0.0], [95.0, 0.0], [99.0, 0.0], [97.0, 0.0], [96.0, 0.0], [98.0, 0.0], [100.0, 0.0], [103.0, 0.0], [102.0, 0.0], [101.0, 0.0], [106.0, 0.0], [105.0, 0.0], [104.0, 0.0], [109.0, 0.0], [125.0, 0.0], [130.0, 4641.5], [129.0, 2668.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 130.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.58543382E12, "maxY": 90.43333333333334, "series": [{"data": [[1.5854343E12, 83.3], [1.58543424E12, 29.983333333333334], [1.58543394E12, 40.233333333333334], [1.58543406E12, 41.166666666666664], [1.585434E12, 40.766666666666666], [1.58543436E12, 90.43333333333334], [1.58543412E12, 41.6], [1.58543442E12, 85.86666666666666], [1.58543382E12, 0.05], [1.58543388E12, 36.916666666666664], [1.58543448E12, 35.43333333333333], [1.58543454E12, 7.0], [1.58543418E12, 36.75]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543454E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.58543388E12, "maxY": 90.43333333333334, "series": [{"data": [[1.58543412E12, 37.7], [1.58543442E12, 3.15], [1.58543424E12, 29.05], [1.58543394E12, 38.7], [1.58543388E12, 35.36666666666667], [1.58543406E12, 39.86666666666667], [1.58543448E12, 36.483333333333334], [1.585434E12, 39.233333333333334], [1.58543454E12, 7.233333333333333], [1.58543418E12, 27.016666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58543412E12, 0.48333333333333334], [1.58543424E12, 0.06666666666666667], [1.58543394E12, 0.16666666666666666], [1.58543406E12, 0.26666666666666666], [1.585434E12, 0.23333333333333334]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.58543394E12, 0.11666666666666667], [1.58543406E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.TruncatedChunkException", "isController": false}, {"data": [[1.58543412E12, 2.3833333333333333], [1.58543442E12, 81.43333333333334], [1.5854343E12, 86.13333333333334], [1.58543394E12, 0.5166666666666667], [1.58543406E12, 0.48333333333333334], [1.585434E12, 1.1833333333333333], [1.58543418E12, 10.6], [1.58543436E12, 90.43333333333334]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.58543412E12, 0.06666666666666667], [1.58543394E12, 0.7333333333333333], [1.58543406E12, 0.38333333333333336]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543454E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.58543388E12, "maxY": 45.233333333333334, "series": [{"data": [[1.58543394E12, 0.06666666666666667], [1.58543388E12, 2.7666666666666666]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58543412E12, 18.283333333333335], [1.58543442E12, 1.2666666666666666], [1.58543424E12, 15.266666666666667], [1.58543394E12, 18.966666666666665], [1.58543388E12, 15.75], [1.58543406E12, 19.533333333333335], [1.58543448E12, 18.883333333333333], [1.585434E12, 19.15], [1.58543454E12, 3.7333333333333334], [1.58543418E12, 12.683333333333334]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58543412E12, 2.75], [1.58543442E12, 40.733333333333334], [1.5854343E12, 42.61666666666667], [1.58543424E12, 0.06666666666666667], [1.58543394E12, 0.9833333333333333], [1.58543406E12, 0.85], [1.585434E12, 1.2666666666666666], [1.58543418E12, 5.35], [1.58543436E12, 45.2]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.58543412E12, 19.416666666666668], [1.58543442E12, 1.8833333333333333], [1.58543424E12, 13.783333333333333], [1.58543394E12, 19.666666666666668], [1.58543388E12, 16.85], [1.58543406E12, 20.333333333333332], [1.58543448E12, 17.6], [1.585434E12, 20.083333333333332], [1.58543454E12, 3.5], [1.58543418E12, 14.333333333333334]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58543412E12, 0.18333333333333332], [1.58543442E12, 40.7], [1.5854343E12, 43.516666666666666], [1.58543394E12, 0.55], [1.58543406E12, 0.3], [1.585434E12, 0.15], [1.58543418E12, 5.25], [1.58543436E12, 45.233333333333334]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543454E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.58543388E12, "maxY": 90.43333333333334, "series": [{"data": [[1.58543412E12, 37.7], [1.58543442E12, 3.15], [1.58543424E12, 29.05], [1.58543394E12, 38.7], [1.58543388E12, 35.36666666666667], [1.58543406E12, 39.86666666666667], [1.58543448E12, 36.483333333333334], [1.585434E12, 39.233333333333334], [1.58543454E12, 7.233333333333333], [1.58543418E12, 27.016666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58543412E12, 2.933333333333333], [1.58543442E12, 81.43333333333334], [1.5854343E12, 86.13333333333334], [1.58543424E12, 0.06666666666666667], [1.58543394E12, 1.5333333333333334], [1.58543406E12, 1.15], [1.585434E12, 1.4166666666666667], [1.58543418E12, 10.6], [1.58543436E12, 90.43333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543454E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

