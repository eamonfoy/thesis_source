/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "maxY": 3147.0, "series": [{"data": [[0.0, 26.0], [0.1, 28.0], [0.2, 29.0], [0.3, 29.0], [0.4, 30.0], [0.5, 30.0], [0.6, 31.0], [0.7, 31.0], [0.8, 31.0], [0.9, 31.0], [1.0, 32.0], [1.1, 32.0], [1.2, 32.0], [1.3, 32.0], [1.4, 32.0], [1.5, 33.0], [1.6, 33.0], [1.7, 33.0], [1.8, 33.0], [1.9, 33.0], [2.0, 33.0], [2.1, 34.0], [2.2, 34.0], [2.3, 34.0], [2.4, 34.0], [2.5, 34.0], [2.6, 34.0], [2.7, 34.0], [2.8, 34.0], [2.9, 34.0], [3.0, 35.0], [3.1, 35.0], [3.2, 35.0], [3.3, 35.0], [3.4, 35.0], [3.5, 35.0], [3.6, 35.0], [3.7, 35.0], [3.8, 35.0], [3.9, 35.0], [4.0, 35.0], [4.1, 36.0], [4.2, 36.0], [4.3, 36.0], [4.4, 36.0], [4.5, 36.0], [4.6, 36.0], [4.7, 36.0], [4.8, 36.0], [4.9, 36.0], [5.0, 36.0], [5.1, 36.0], [5.2, 36.0], [5.3, 36.0], [5.4, 36.0], [5.5, 37.0], [5.6, 37.0], [5.7, 37.0], [5.8, 37.0], [5.9, 37.0], [6.0, 37.0], [6.1, 37.0], [6.2, 37.0], [6.3, 37.0], [6.4, 37.0], [6.5, 37.0], [6.6, 37.0], [6.7, 37.0], [6.8, 37.0], [6.9, 37.0], [7.0, 37.0], [7.1, 38.0], [7.2, 38.0], [7.3, 38.0], [7.4, 38.0], [7.5, 38.0], [7.6, 38.0], [7.7, 38.0], [7.8, 38.0], [7.9, 38.0], [8.0, 38.0], [8.1, 38.0], [8.2, 38.0], [8.3, 38.0], [8.4, 38.0], [8.5, 38.0], [8.6, 38.0], [8.7, 39.0], [8.8, 39.0], [8.9, 39.0], [9.0, 39.0], [9.1, 39.0], [9.2, 39.0], [9.3, 39.0], [9.4, 39.0], [9.5, 39.0], [9.6, 39.0], [9.7, 39.0], [9.8, 39.0], [9.9, 39.0], [10.0, 39.0], [10.1, 39.0], [10.2, 39.0], [10.3, 39.0], [10.4, 39.0], [10.5, 39.0], [10.6, 39.0], [10.7, 40.0], [10.8, 40.0], [10.9, 40.0], [11.0, 40.0], [11.1, 40.0], [11.2, 40.0], [11.3, 40.0], [11.4, 40.0], [11.5, 40.0], [11.6, 40.0], [11.7, 40.0], [11.8, 40.0], [11.9, 40.0], [12.0, 40.0], [12.1, 40.0], [12.2, 40.0], [12.3, 40.0], [12.4, 40.0], [12.5, 40.0], [12.6, 40.0], [12.7, 40.0], [12.8, 40.0], [12.9, 40.0], [13.0, 40.0], [13.1, 41.0], [13.2, 41.0], [13.3, 41.0], [13.4, 41.0], [13.5, 41.0], [13.6, 41.0], [13.7, 41.0], [13.8, 41.0], [13.9, 41.0], [14.0, 41.0], [14.1, 41.0], [14.2, 41.0], [14.3, 41.0], [14.4, 41.0], [14.5, 41.0], [14.6, 41.0], [14.7, 41.0], [14.8, 41.0], [14.9, 41.0], [15.0, 41.0], [15.1, 41.0], [15.2, 41.0], [15.3, 41.0], [15.4, 41.0], [15.5, 41.0], [15.6, 42.0], [15.7, 42.0], [15.8, 42.0], [15.9, 42.0], [16.0, 42.0], [16.1, 42.0], [16.2, 42.0], [16.3, 42.0], [16.4, 42.0], [16.5, 42.0], [16.6, 42.0], [16.7, 42.0], [16.8, 42.0], [16.9, 42.0], [17.0, 42.0], [17.1, 42.0], [17.2, 42.0], [17.3, 42.0], [17.4, 42.0], [17.5, 42.0], [17.6, 42.0], [17.7, 42.0], [17.8, 42.0], [17.9, 42.0], [18.0, 42.0], [18.1, 42.0], [18.2, 42.0], [18.3, 42.0], [18.4, 42.0], [18.5, 42.0], [18.6, 43.0], [18.7, 43.0], [18.8, 43.0], [18.9, 43.0], [19.0, 43.0], [19.1, 43.0], [19.2, 43.0], [19.3, 43.0], [19.4, 43.0], [19.5, 43.0], [19.6, 43.0], [19.7, 43.0], [19.8, 43.0], [19.9, 43.0], [20.0, 43.0], [20.1, 43.0], [20.2, 43.0], [20.3, 43.0], [20.4, 43.0], [20.5, 43.0], [20.6, 43.0], [20.7, 43.0], [20.8, 43.0], [20.9, 43.0], [21.0, 43.0], [21.1, 43.0], [21.2, 43.0], [21.3, 43.0], [21.4, 44.0], [21.5, 44.0], [21.6, 44.0], [21.7, 44.0], [21.8, 44.0], [21.9, 44.0], [22.0, 44.0], [22.1, 44.0], [22.2, 44.0], [22.3, 44.0], [22.4, 44.0], [22.5, 44.0], [22.6, 44.0], [22.7, 44.0], [22.8, 44.0], [22.9, 44.0], [23.0, 44.0], [23.1, 44.0], [23.2, 44.0], [23.3, 44.0], [23.4, 44.0], [23.5, 44.0], [23.6, 44.0], [23.7, 44.0], [23.8, 44.0], [23.9, 44.0], [24.0, 44.0], [24.1, 44.0], [24.2, 44.0], [24.3, 44.0], [24.4, 45.0], [24.5, 45.0], [24.6, 45.0], [24.7, 45.0], [24.8, 45.0], [24.9, 45.0], [25.0, 45.0], [25.1, 45.0], [25.2, 45.0], [25.3, 45.0], [25.4, 45.0], [25.5, 45.0], [25.6, 45.0], [25.7, 45.0], [25.8, 45.0], [25.9, 45.0], [26.0, 45.0], [26.1, 45.0], [26.2, 45.0], [26.3, 45.0], [26.4, 45.0], [26.5, 45.0], [26.6, 45.0], [26.7, 45.0], [26.8, 45.0], [26.9, 45.0], [27.0, 45.0], [27.1, 45.0], [27.2, 45.0], [27.3, 45.0], [27.4, 45.0], [27.5, 46.0], [27.6, 46.0], [27.7, 46.0], [27.8, 46.0], [27.9, 46.0], [28.0, 46.0], [28.1, 46.0], [28.2, 46.0], [28.3, 46.0], [28.4, 46.0], [28.5, 46.0], [28.6, 46.0], [28.7, 46.0], [28.8, 46.0], [28.9, 46.0], [29.0, 46.0], [29.1, 46.0], [29.2, 46.0], [29.3, 46.0], [29.4, 46.0], [29.5, 46.0], [29.6, 46.0], [29.7, 46.0], [29.8, 46.0], [29.9, 46.0], [30.0, 46.0], [30.1, 46.0], [30.2, 46.0], [30.3, 46.0], [30.4, 46.0], [30.5, 46.0], [30.6, 47.0], [30.7, 47.0], [30.8, 47.0], [30.9, 47.0], [31.0, 47.0], [31.1, 47.0], [31.2, 47.0], [31.3, 47.0], [31.4, 47.0], [31.5, 47.0], [31.6, 47.0], [31.7, 47.0], [31.8, 47.0], [31.9, 47.0], [32.0, 47.0], [32.1, 47.0], [32.2, 47.0], [32.3, 47.0], [32.4, 47.0], [32.5, 47.0], [32.6, 47.0], [32.7, 47.0], [32.8, 47.0], [32.9, 47.0], [33.0, 47.0], [33.1, 47.0], [33.2, 47.0], [33.3, 47.0], [33.4, 48.0], [33.5, 48.0], [33.6, 48.0], [33.7, 48.0], [33.8, 48.0], [33.9, 48.0], [34.0, 48.0], [34.1, 48.0], [34.2, 48.0], [34.3, 48.0], [34.4, 48.0], [34.5, 48.0], [34.6, 48.0], [34.7, 48.0], [34.8, 48.0], [34.9, 48.0], [35.0, 48.0], [35.1, 48.0], [35.2, 48.0], [35.3, 48.0], [35.4, 48.0], [35.5, 48.0], [35.6, 48.0], [35.7, 48.0], [35.8, 48.0], [35.9, 48.0], [36.0, 49.0], [36.1, 49.0], [36.2, 49.0], [36.3, 49.0], [36.4, 49.0], [36.5, 49.0], [36.6, 49.0], [36.7, 49.0], [36.8, 49.0], [36.9, 49.0], [37.0, 49.0], [37.1, 49.0], [37.2, 49.0], [37.3, 49.0], [37.4, 49.0], [37.5, 49.0], [37.6, 49.0], [37.7, 49.0], [37.8, 49.0], [37.9, 49.0], [38.0, 49.0], [38.1, 49.0], [38.2, 49.0], [38.3, 49.0], [38.4, 50.0], [38.5, 50.0], [38.6, 50.0], [38.7, 50.0], [38.8, 50.0], [38.9, 50.0], [39.0, 50.0], [39.1, 50.0], [39.2, 50.0], [39.3, 50.0], [39.4, 50.0], [39.5, 50.0], [39.6, 50.0], [39.7, 50.0], [39.8, 50.0], [39.9, 50.0], [40.0, 50.0], [40.1, 50.0], [40.2, 50.0], [40.3, 50.0], [40.4, 50.0], [40.5, 50.0], [40.6, 50.0], [40.7, 50.0], [40.8, 51.0], [40.9, 51.0], [41.0, 51.0], [41.1, 51.0], [41.2, 51.0], [41.3, 51.0], [41.4, 51.0], [41.5, 51.0], [41.6, 51.0], [41.7, 51.0], [41.8, 51.0], [41.9, 51.0], [42.0, 51.0], [42.1, 51.0], [42.2, 51.0], [42.3, 51.0], [42.4, 51.0], [42.5, 51.0], [42.6, 51.0], [42.7, 51.0], [42.8, 51.0], [42.9, 52.0], [43.0, 52.0], [43.1, 52.0], [43.2, 52.0], [43.3, 52.0], [43.4, 52.0], [43.5, 52.0], [43.6, 52.0], [43.7, 52.0], [43.8, 52.0], [43.9, 52.0], [44.0, 52.0], [44.1, 52.0], [44.2, 52.0], [44.3, 52.0], [44.4, 52.0], [44.5, 52.0], [44.6, 52.0], [44.7, 52.0], [44.8, 52.0], [44.9, 52.0], [45.0, 53.0], [45.1, 53.0], [45.2, 53.0], [45.3, 53.0], [45.4, 53.0], [45.5, 53.0], [45.6, 53.0], [45.7, 53.0], [45.8, 53.0], [45.9, 53.0], [46.0, 53.0], [46.1, 53.0], [46.2, 53.0], [46.3, 53.0], [46.4, 53.0], [46.5, 53.0], [46.6, 53.0], [46.7, 53.0], [46.8, 54.0], [46.9, 54.0], [47.0, 54.0], [47.1, 54.0], [47.2, 54.0], [47.3, 54.0], [47.4, 54.0], [47.5, 54.0], [47.6, 54.0], [47.7, 54.0], [47.8, 54.0], [47.9, 54.0], [48.0, 54.0], [48.1, 54.0], [48.2, 54.0], [48.3, 55.0], [48.4, 55.0], [48.5, 55.0], [48.6, 55.0], [48.7, 55.0], [48.8, 55.0], [48.9, 55.0], [49.0, 55.0], [49.1, 55.0], [49.2, 55.0], [49.3, 55.0], [49.4, 55.0], [49.5, 55.0], [49.6, 55.0], [49.7, 56.0], [49.8, 56.0], [49.9, 56.0], [50.0, 56.0], [50.1, 56.0], [50.2, 56.0], [50.3, 56.0], [50.4, 56.0], [50.5, 56.0], [50.6, 56.0], [50.7, 57.0], [50.8, 57.0], [50.9, 57.0], [51.0, 57.0], [51.1, 57.0], [51.2, 57.0], [51.3, 57.0], [51.4, 57.0], [51.5, 57.0], [51.6, 57.0], [51.7, 57.0], [51.8, 58.0], [51.9, 58.0], [52.0, 58.0], [52.1, 58.0], [52.2, 58.0], [52.3, 58.0], [52.4, 58.0], [52.5, 58.0], [52.6, 58.0], [52.7, 58.0], [52.8, 59.0], [52.9, 59.0], [53.0, 59.0], [53.1, 59.0], [53.2, 59.0], [53.3, 59.0], [53.4, 60.0], [53.5, 60.0], [53.6, 60.0], [53.7, 60.0], [53.8, 60.0], [53.9, 60.0], [54.0, 60.0], [54.1, 61.0], [54.2, 61.0], [54.3, 61.0], [54.4, 61.0], [54.5, 61.0], [54.6, 61.0], [54.7, 61.0], [54.8, 62.0], [54.9, 62.0], [55.0, 62.0], [55.1, 62.0], [55.2, 62.0], [55.3, 63.0], [55.4, 63.0], [55.5, 63.0], [55.6, 63.0], [55.7, 63.0], [55.8, 63.0], [55.9, 64.0], [56.0, 64.0], [56.1, 64.0], [56.2, 65.0], [56.3, 65.0], [56.4, 65.0], [56.5, 66.0], [56.6, 66.0], [56.7, 66.0], [56.8, 67.0], [56.9, 67.0], [57.0, 67.0], [57.1, 68.0], [57.2, 68.0], [57.3, 68.0], [57.4, 69.0], [57.5, 70.0], [57.6, 70.0], [57.7, 71.0], [57.8, 72.0], [57.9, 72.0], [58.0, 73.0], [58.1, 73.0], [58.2, 74.0], [58.3, 75.0], [58.4, 75.0], [58.5, 76.0], [58.6, 78.0], [58.7, 79.0], [58.8, 80.0], [58.9, 82.0], [59.0, 83.0], [59.1, 86.0], [59.2, 87.0], [59.3, 90.0], [59.4, 96.0], [59.5, 101.0], [59.6, 106.0], [59.7, 112.0], [59.8, 119.0], [59.9, 127.0], [60.0, 130.0], [60.1, 138.0], [60.2, 149.0], [60.3, 159.0], [60.4, 166.0], [60.5, 173.0], [60.6, 180.0], [60.7, 191.0], [60.8, 201.0], [60.9, 210.0], [61.0, 217.0], [61.1, 222.0], [61.2, 227.0], [61.3, 231.0], [61.4, 238.0], [61.5, 247.0], [61.6, 254.0], [61.7, 258.0], [61.8, 265.0], [61.9, 276.0], [62.0, 285.0], [62.1, 292.0], [62.2, 297.0], [62.3, 306.0], [62.4, 314.0], [62.5, 317.0], [62.6, 320.0], [62.7, 324.0], [62.8, 328.0], [62.9, 333.0], [63.0, 346.0], [63.1, 349.0], [63.2, 352.0], [63.3, 357.0], [63.4, 363.0], [63.5, 369.0], [63.6, 378.0], [63.7, 383.0], [63.8, 386.0], [63.9, 389.0], [64.0, 394.0], [64.1, 397.0], [64.2, 401.0], [64.3, 404.0], [64.4, 410.0], [64.5, 412.0], [64.6, 416.0], [64.7, 421.0], [64.8, 424.0], [64.9, 427.0], [65.0, 430.0], [65.1, 433.0], [65.2, 437.0], [65.3, 440.0], [65.4, 444.0], [65.5, 447.0], [65.6, 453.0], [65.7, 455.0], [65.8, 458.0], [65.9, 462.0], [66.0, 465.0], [66.1, 469.0], [66.2, 473.0], [66.3, 475.0], [66.4, 477.0], [66.5, 482.0], [66.6, 485.0], [66.7, 489.0], [66.8, 493.0], [66.9, 495.0], [67.0, 497.0], [67.1, 501.0], [67.2, 506.0], [67.3, 508.0], [67.4, 511.0], [67.5, 514.0], [67.6, 517.0], [67.7, 519.0], [67.8, 522.0], [67.9, 526.0], [68.0, 528.0], [68.1, 530.0], [68.2, 534.0], [68.3, 539.0], [68.4, 541.0], [68.5, 543.0], [68.6, 545.0], [68.7, 548.0], [68.8, 550.0], [68.9, 553.0], [69.0, 556.0], [69.1, 560.0], [69.2, 563.0], [69.3, 566.0], [69.4, 569.0], [69.5, 572.0], [69.6, 575.0], [69.7, 578.0], [69.8, 580.0], [69.9, 582.0], [70.0, 584.0], [70.1, 585.0], [70.2, 587.0], [70.3, 589.0], [70.4, 592.0], [70.5, 596.0], [70.6, 600.0], [70.7, 601.0], [70.8, 604.0], [70.9, 606.0], [71.0, 607.0], [71.1, 610.0], [71.2, 611.0], [71.3, 615.0], [71.4, 618.0], [71.5, 622.0], [71.6, 625.0], [71.7, 627.0], [71.8, 630.0], [71.9, 632.0], [72.0, 635.0], [72.1, 636.0], [72.2, 638.0], [72.3, 640.0], [72.4, 643.0], [72.5, 647.0], [72.6, 648.0], [72.7, 652.0], [72.8, 654.0], [72.9, 656.0], [73.0, 658.0], [73.1, 662.0], [73.2, 664.0], [73.3, 667.0], [73.4, 669.0], [73.5, 671.0], [73.6, 672.0], [73.7, 674.0], [73.8, 676.0], [73.9, 679.0], [74.0, 681.0], [74.1, 684.0], [74.2, 687.0], [74.3, 690.0], [74.4, 693.0], [74.5, 696.0], [74.6, 698.0], [74.7, 701.0], [74.8, 703.0], [74.9, 705.0], [75.0, 707.0], [75.1, 710.0], [75.2, 712.0], [75.3, 714.0], [75.4, 718.0], [75.5, 721.0], [75.6, 723.0], [75.7, 725.0], [75.8, 729.0], [75.9, 732.0], [76.0, 736.0], [76.1, 738.0], [76.2, 741.0], [76.3, 742.0], [76.4, 745.0], [76.5, 747.0], [76.6, 748.0], [76.7, 750.0], [76.8, 753.0], [76.9, 754.0], [77.0, 758.0], [77.1, 759.0], [77.2, 761.0], [77.3, 765.0], [77.4, 768.0], [77.5, 771.0], [77.6, 773.0], [77.7, 775.0], [77.8, 778.0], [77.9, 781.0], [78.0, 782.0], [78.1, 785.0], [78.2, 786.0], [78.3, 788.0], [78.4, 791.0], [78.5, 794.0], [78.6, 797.0], [78.7, 799.0], [78.8, 801.0], [78.9, 803.0], [79.0, 805.0], [79.1, 806.0], [79.2, 809.0], [79.3, 812.0], [79.4, 815.0], [79.5, 817.0], [79.6, 820.0], [79.7, 824.0], [79.8, 826.0], [79.9, 830.0], [80.0, 834.0], [80.1, 836.0], [80.2, 839.0], [80.3, 842.0], [80.4, 843.0], [80.5, 845.0], [80.6, 847.0], [80.7, 850.0], [80.8, 852.0], [80.9, 855.0], [81.0, 859.0], [81.1, 861.0], [81.2, 863.0], [81.3, 867.0], [81.4, 869.0], [81.5, 871.0], [81.6, 873.0], [81.7, 875.0], [81.8, 877.0], [81.9, 878.0], [82.0, 882.0], [82.1, 885.0], [82.2, 888.0], [82.3, 892.0], [82.4, 895.0], [82.5, 897.0], [82.6, 899.0], [82.7, 903.0], [82.8, 905.0], [82.9, 908.0], [83.0, 911.0], [83.1, 914.0], [83.2, 915.0], [83.3, 917.0], [83.4, 920.0], [83.5, 923.0], [83.6, 925.0], [83.7, 929.0], [83.8, 932.0], [83.9, 935.0], [84.0, 938.0], [84.1, 941.0], [84.2, 944.0], [84.3, 946.0], [84.4, 949.0], [84.5, 952.0], [84.6, 955.0], [84.7, 958.0], [84.8, 960.0], [84.9, 963.0], [85.0, 965.0], [85.1, 967.0], [85.2, 970.0], [85.3, 973.0], [85.4, 976.0], [85.5, 979.0], [85.6, 983.0], [85.7, 985.0], [85.8, 987.0], [85.9, 990.0], [86.0, 992.0], [86.1, 994.0], [86.2, 998.0], [86.3, 999.0], [86.4, 1002.0], [86.5, 1006.0], [86.6, 1009.0], [86.7, 1011.0], [86.8, 1013.0], [86.9, 1015.0], [87.0, 1018.0], [87.1, 1025.0], [87.2, 1028.0], [87.3, 1031.0], [87.4, 1035.0], [87.5, 1040.0], [87.6, 1043.0], [87.7, 1045.0], [87.8, 1047.0], [87.9, 1051.0], [88.0, 1052.0], [88.1, 1055.0], [88.2, 1058.0], [88.3, 1063.0], [88.4, 1067.0], [88.5, 1070.0], [88.6, 1073.0], [88.7, 1077.0], [88.8, 1079.0], [88.9, 1082.0], [89.0, 1087.0], [89.1, 1090.0], [89.2, 1092.0], [89.3, 1096.0], [89.4, 1099.0], [89.5, 1103.0], [89.6, 1105.0], [89.7, 1107.0], [89.8, 1111.0], [89.9, 1115.0], [90.0, 1118.0], [90.1, 1123.0], [90.2, 1126.0], [90.3, 1130.0], [90.4, 1137.0], [90.5, 1143.0], [90.6, 1146.0], [90.7, 1150.0], [90.8, 1155.0], [90.9, 1158.0], [91.0, 1162.0], [91.1, 1165.0], [91.2, 1169.0], [91.3, 1172.0], [91.4, 1174.0], [91.5, 1177.0], [91.6, 1181.0], [91.7, 1185.0], [91.8, 1188.0], [91.9, 1194.0], [92.0, 1198.0], [92.1, 1202.0], [92.2, 1207.0], [92.3, 1214.0], [92.4, 1218.0], [92.5, 1226.0], [92.6, 1231.0], [92.7, 1235.0], [92.8, 1240.0], [92.9, 1247.0], [93.0, 1252.0], [93.1, 1259.0], [93.2, 1264.0], [93.3, 1270.0], [93.4, 1273.0], [93.5, 1277.0], [93.6, 1281.0], [93.7, 1284.0], [93.8, 1292.0], [93.9, 1297.0], [94.0, 1301.0], [94.1, 1304.0], [94.2, 1312.0], [94.3, 1319.0], [94.4, 1323.0], [94.5, 1330.0], [94.6, 1334.0], [94.7, 1339.0], [94.8, 1347.0], [94.9, 1351.0], [95.0, 1357.0], [95.1, 1361.0], [95.2, 1367.0], [95.3, 1373.0], [95.4, 1379.0], [95.5, 1385.0], [95.6, 1391.0], [95.7, 1398.0], [95.8, 1404.0], [95.9, 1412.0], [96.0, 1420.0], [96.1, 1428.0], [96.2, 1433.0], [96.3, 1438.0], [96.4, 1448.0], [96.5, 1454.0], [96.6, 1460.0], [96.7, 1465.0], [96.8, 1473.0], [96.9, 1478.0], [97.0, 1486.0], [97.1, 1499.0], [97.2, 1512.0], [97.3, 1516.0], [97.4, 1526.0], [97.5, 1535.0], [97.6, 1544.0], [97.7, 1555.0], [97.8, 1572.0], [97.9, 1579.0], [98.0, 1585.0], [98.1, 1595.0], [98.2, 1614.0], [98.3, 1630.0], [98.4, 1640.0], [98.5, 1655.0], [98.6, 1677.0], [98.7, 1696.0], [98.8, 1715.0], [98.9, 1738.0], [99.0, 1757.0], [99.1, 1787.0], [99.2, 1802.0], [99.3, 1820.0], [99.4, 1855.0], [99.5, 1904.0], [99.6, 1969.0], [99.7, 2019.0], [99.8, 2114.0], [99.9, 2269.0], [100.0, 2823.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 144.0], [0.1, 144.0], [0.2, 144.0], [0.3, 144.0], [0.4, 144.0], [0.5, 144.0], [0.6, 144.0], [0.7, 144.0], [0.8, 144.0], [0.9, 144.0], [1.0, 145.0], [1.1, 145.0], [1.2, 145.0], [1.3, 145.0], [1.4, 145.0], [1.5, 145.0], [1.6, 145.0], [1.7, 145.0], [1.8, 145.0], [1.9, 145.0], [2.0, 149.0], [2.1, 149.0], [2.2, 149.0], [2.3, 149.0], [2.4, 149.0], [2.5, 149.0], [2.6, 149.0], [2.7, 149.0], [2.8, 149.0], [2.9, 149.0], [3.0, 151.0], [3.1, 151.0], [3.2, 151.0], [3.3, 151.0], [3.4, 151.0], [3.5, 151.0], [3.6, 151.0], [3.7, 151.0], [3.8, 151.0], [3.9, 151.0], [4.0, 152.0], [4.1, 152.0], [4.2, 152.0], [4.3, 152.0], [4.4, 152.0], [4.5, 152.0], [4.6, 152.0], [4.7, 152.0], [4.8, 152.0], [4.9, 152.0], [5.0, 153.0], [5.1, 153.0], [5.2, 153.0], [5.3, 153.0], [5.4, 153.0], [5.5, 153.0], [5.6, 153.0], [5.7, 153.0], [5.8, 153.0], [5.9, 153.0], [6.0, 153.0], [6.1, 153.0], [6.2, 153.0], [6.3, 153.0], [6.4, 153.0], [6.5, 153.0], [6.6, 153.0], [6.7, 153.0], [6.8, 153.0], [6.9, 153.0], [7.0, 154.0], [7.1, 154.0], [7.2, 154.0], [7.3, 154.0], [7.4, 154.0], [7.5, 154.0], [7.6, 154.0], [7.7, 154.0], [7.8, 154.0], [7.9, 154.0], [8.0, 154.0], [8.1, 154.0], [8.2, 154.0], [8.3, 154.0], [8.4, 154.0], [8.5, 154.0], [8.6, 154.0], [8.7, 154.0], [8.8, 154.0], [8.9, 154.0], [9.0, 155.0], [9.1, 155.0], [9.2, 155.0], [9.3, 155.0], [9.4, 155.0], [9.5, 155.0], [9.6, 155.0], [9.7, 155.0], [9.8, 155.0], [9.9, 155.0], [10.0, 155.0], [10.1, 155.0], [10.2, 155.0], [10.3, 155.0], [10.4, 155.0], [10.5, 155.0], [10.6, 155.0], [10.7, 155.0], [10.8, 155.0], [10.9, 155.0], [11.0, 155.0], [11.1, 155.0], [11.2, 155.0], [11.3, 155.0], [11.4, 155.0], [11.5, 155.0], [11.6, 155.0], [11.7, 155.0], [11.8, 155.0], [11.9, 155.0], [12.0, 155.0], [12.1, 155.0], [12.2, 155.0], [12.3, 155.0], [12.4, 155.0], [12.5, 155.0], [12.6, 155.0], [12.7, 155.0], [12.8, 155.0], [12.9, 155.0], [13.0, 155.0], [13.1, 155.0], [13.2, 155.0], [13.3, 155.0], [13.4, 155.0], [13.5, 155.0], [13.6, 155.0], [13.7, 155.0], [13.8, 155.0], [13.9, 155.0], [14.0, 156.0], [14.1, 156.0], [14.2, 156.0], [14.3, 156.0], [14.4, 156.0], [14.5, 156.0], [14.6, 156.0], [14.7, 156.0], [14.8, 156.0], [14.9, 156.0], [15.0, 156.0], [15.1, 156.0], [15.2, 156.0], [15.3, 156.0], [15.4, 156.0], [15.5, 156.0], [15.6, 156.0], [15.7, 156.0], [15.8, 156.0], [15.9, 156.0], [16.0, 156.0], [16.1, 156.0], [16.2, 156.0], [16.3, 156.0], [16.4, 156.0], [16.5, 156.0], [16.6, 156.0], [16.7, 156.0], [16.8, 156.0], [16.9, 156.0], [17.0, 156.0], [17.1, 156.0], [17.2, 156.0], [17.3, 156.0], [17.4, 156.0], [17.5, 156.0], [17.6, 156.0], [17.7, 156.0], [17.8, 156.0], [17.9, 156.0], [18.0, 157.0], [18.1, 157.0], [18.2, 157.0], [18.3, 157.0], [18.4, 157.0], [18.5, 157.0], [18.6, 157.0], [18.7, 157.0], [18.8, 157.0], [18.9, 157.0], [19.0, 159.0], [19.1, 159.0], [19.2, 159.0], [19.3, 159.0], [19.4, 159.0], [19.5, 159.0], [19.6, 159.0], [19.7, 159.0], [19.8, 159.0], [19.9, 159.0], [20.0, 159.0], [20.1, 159.0], [20.2, 159.0], [20.3, 159.0], [20.4, 159.0], [20.5, 159.0], [20.6, 159.0], [20.7, 159.0], [20.8, 159.0], [20.9, 159.0], [21.0, 159.0], [21.1, 159.0], [21.2, 159.0], [21.3, 159.0], [21.4, 159.0], [21.5, 159.0], [21.6, 159.0], [21.7, 159.0], [21.8, 159.0], [21.9, 159.0], [22.0, 159.0], [22.1, 159.0], [22.2, 159.0], [22.3, 159.0], [22.4, 159.0], [22.5, 159.0], [22.6, 159.0], [22.7, 159.0], [22.8, 159.0], [22.9, 159.0], [23.0, 160.0], [23.1, 160.0], [23.2, 160.0], [23.3, 160.0], [23.4, 160.0], [23.5, 160.0], [23.6, 160.0], [23.7, 160.0], [23.8, 160.0], [23.9, 160.0], [24.0, 160.0], [24.1, 160.0], [24.2, 160.0], [24.3, 160.0], [24.4, 160.0], [24.5, 160.0], [24.6, 160.0], [24.7, 160.0], [24.8, 160.0], [24.9, 160.0], [25.0, 161.0], [25.1, 161.0], [25.2, 161.0], [25.3, 161.0], [25.4, 161.0], [25.5, 161.0], [25.6, 161.0], [25.7, 161.0], [25.8, 161.0], [25.9, 161.0], [26.0, 161.0], [26.1, 161.0], [26.2, 161.0], [26.3, 161.0], [26.4, 161.0], [26.5, 161.0], [26.6, 161.0], [26.7, 161.0], [26.8, 161.0], [26.9, 161.0], [27.0, 161.0], [27.1, 161.0], [27.2, 161.0], [27.3, 161.0], [27.4, 161.0], [27.5, 161.0], [27.6, 161.0], [27.7, 161.0], [27.8, 161.0], [27.9, 161.0], [28.0, 162.0], [28.1, 162.0], [28.2, 162.0], [28.3, 162.0], [28.4, 162.0], [28.5, 162.0], [28.6, 162.0], [28.7, 162.0], [28.8, 162.0], [28.9, 162.0], [29.0, 163.0], [29.1, 163.0], [29.2, 163.0], [29.3, 163.0], [29.4, 163.0], [29.5, 163.0], [29.6, 163.0], [29.7, 163.0], [29.8, 163.0], [29.9, 163.0], [30.0, 163.0], [30.1, 163.0], [30.2, 163.0], [30.3, 163.0], [30.4, 163.0], [30.5, 163.0], [30.6, 163.0], [30.7, 163.0], [30.8, 163.0], [30.9, 163.0], [31.0, 163.0], [31.1, 163.0], [31.2, 163.0], [31.3, 163.0], [31.4, 163.0], [31.5, 163.0], [31.6, 163.0], [31.7, 163.0], [31.8, 163.0], [31.9, 163.0], [32.0, 163.0], [32.1, 163.0], [32.2, 163.0], [32.3, 163.0], [32.4, 163.0], [32.5, 163.0], [32.6, 163.0], [32.7, 163.0], [32.8, 163.0], [32.9, 163.0], [33.0, 163.0], [33.1, 163.0], [33.2, 163.0], [33.3, 163.0], [33.4, 163.0], [33.5, 163.0], [33.6, 163.0], [33.7, 163.0], [33.8, 163.0], [33.9, 163.0], [34.0, 163.0], [34.1, 163.0], [34.2, 163.0], [34.3, 163.0], [34.4, 163.0], [34.5, 163.0], [34.6, 163.0], [34.7, 163.0], [34.8, 163.0], [34.9, 163.0], [35.0, 163.0], [35.1, 163.0], [35.2, 163.0], [35.3, 163.0], [35.4, 163.0], [35.5, 163.0], [35.6, 163.0], [35.7, 163.0], [35.8, 163.0], [35.9, 163.0], [36.0, 163.0], [36.1, 163.0], [36.2, 163.0], [36.3, 163.0], [36.4, 163.0], [36.5, 163.0], [36.6, 163.0], [36.7, 163.0], [36.8, 163.0], [36.9, 163.0], [37.0, 164.0], [37.1, 164.0], [37.2, 164.0], [37.3, 164.0], [37.4, 164.0], [37.5, 164.0], [37.6, 164.0], [37.7, 164.0], [37.8, 164.0], [37.9, 164.0], [38.0, 164.0], [38.1, 164.0], [38.2, 164.0], [38.3, 164.0], [38.4, 164.0], [38.5, 164.0], [38.6, 164.0], [38.7, 164.0], [38.8, 164.0], [38.9, 164.0], [39.0, 164.0], [39.1, 164.0], [39.2, 164.0], [39.3, 164.0], [39.4, 164.0], [39.5, 164.0], [39.6, 164.0], [39.7, 164.0], [39.8, 164.0], [39.9, 164.0], [40.0, 164.0], [40.1, 164.0], [40.2, 164.0], [40.3, 164.0], [40.4, 164.0], [40.5, 164.0], [40.6, 164.0], [40.7, 164.0], [40.8, 164.0], [40.9, 164.0], [41.0, 165.0], [41.1, 165.0], [41.2, 165.0], [41.3, 165.0], [41.4, 165.0], [41.5, 165.0], [41.6, 165.0], [41.7, 165.0], [41.8, 165.0], [41.9, 165.0], [42.0, 165.0], [42.1, 165.0], [42.2, 165.0], [42.3, 165.0], [42.4, 165.0], [42.5, 165.0], [42.6, 165.0], [42.7, 165.0], [42.8, 165.0], [42.9, 165.0], [43.0, 165.0], [43.1, 165.0], [43.2, 165.0], [43.3, 165.0], [43.4, 165.0], [43.5, 165.0], [43.6, 165.0], [43.7, 165.0], [43.8, 165.0], [43.9, 165.0], [44.0, 166.0], [44.1, 166.0], [44.2, 166.0], [44.3, 166.0], [44.4, 166.0], [44.5, 166.0], [44.6, 166.0], [44.7, 166.0], [44.8, 166.0], [44.9, 166.0], [45.0, 166.0], [45.1, 166.0], [45.2, 166.0], [45.3, 166.0], [45.4, 166.0], [45.5, 166.0], [45.6, 166.0], [45.7, 166.0], [45.8, 166.0], [45.9, 166.0], [46.0, 166.0], [46.1, 166.0], [46.2, 166.0], [46.3, 166.0], [46.4, 166.0], [46.5, 166.0], [46.6, 166.0], [46.7, 166.0], [46.8, 166.0], [46.9, 166.0], [47.0, 167.0], [47.1, 167.0], [47.2, 167.0], [47.3, 167.0], [47.4, 167.0], [47.5, 167.0], [47.6, 167.0], [47.7, 167.0], [47.8, 167.0], [47.9, 167.0], [48.0, 167.0], [48.1, 167.0], [48.2, 167.0], [48.3, 167.0], [48.4, 167.0], [48.5, 167.0], [48.6, 167.0], [48.7, 167.0], [48.8, 167.0], [48.9, 167.0], [49.0, 168.0], [49.1, 168.0], [49.2, 168.0], [49.3, 168.0], [49.4, 168.0], [49.5, 168.0], [49.6, 168.0], [49.7, 168.0], [49.8, 168.0], [49.9, 168.0], [50.0, 168.0], [50.1, 168.0], [50.2, 168.0], [50.3, 168.0], [50.4, 168.0], [50.5, 168.0], [50.6, 168.0], [50.7, 168.0], [50.8, 168.0], [50.9, 168.0], [51.0, 169.0], [51.1, 169.0], [51.2, 169.0], [51.3, 169.0], [51.4, 169.0], [51.5, 169.0], [51.6, 169.0], [51.7, 169.0], [51.8, 169.0], [51.9, 169.0], [52.0, 170.0], [52.1, 170.0], [52.2, 170.0], [52.3, 170.0], [52.4, 170.0], [52.5, 170.0], [52.6, 170.0], [52.7, 170.0], [52.8, 170.0], [52.9, 170.0], [53.0, 170.0], [53.1, 170.0], [53.2, 170.0], [53.3, 170.0], [53.4, 170.0], [53.5, 170.0], [53.6, 170.0], [53.7, 170.0], [53.8, 170.0], [53.9, 170.0], [54.0, 170.0], [54.1, 170.0], [54.2, 170.0], [54.3, 170.0], [54.4, 170.0], [54.5, 170.0], [54.6, 170.0], [54.7, 170.0], [54.8, 170.0], [54.9, 170.0], [55.0, 170.0], [55.1, 170.0], [55.2, 170.0], [55.3, 170.0], [55.4, 170.0], [55.5, 170.0], [55.6, 170.0], [55.7, 170.0], [55.8, 170.0], [55.9, 170.0], [56.0, 171.0], [56.1, 171.0], [56.2, 171.0], [56.3, 171.0], [56.4, 171.0], [56.5, 171.0], [56.6, 171.0], [56.7, 171.0], [56.8, 171.0], [56.9, 171.0], [57.0, 171.0], [57.1, 171.0], [57.2, 171.0], [57.3, 171.0], [57.4, 171.0], [57.5, 171.0], [57.6, 171.0], [57.7, 171.0], [57.8, 171.0], [57.9, 171.0], [58.0, 171.0], [58.1, 171.0], [58.2, 171.0], [58.3, 171.0], [58.4, 171.0], [58.5, 171.0], [58.6, 171.0], [58.7, 171.0], [58.8, 171.0], [58.9, 171.0], [59.0, 172.0], [59.1, 172.0], [59.2, 172.0], [59.3, 172.0], [59.4, 172.0], [59.5, 172.0], [59.6, 172.0], [59.7, 172.0], [59.8, 172.0], [59.9, 172.0], [60.0, 172.0], [60.1, 172.0], [60.2, 172.0], [60.3, 172.0], [60.4, 172.0], [60.5, 172.0], [60.6, 172.0], [60.7, 172.0], [60.8, 172.0], [60.9, 172.0], [61.0, 172.0], [61.1, 172.0], [61.2, 172.0], [61.3, 172.0], [61.4, 172.0], [61.5, 172.0], [61.6, 172.0], [61.7, 172.0], [61.8, 172.0], [61.9, 172.0], [62.0, 173.0], [62.1, 173.0], [62.2, 173.0], [62.3, 173.0], [62.4, 173.0], [62.5, 173.0], [62.6, 173.0], [62.7, 173.0], [62.8, 173.0], [62.9, 173.0], [63.0, 173.0], [63.1, 173.0], [63.2, 173.0], [63.3, 173.0], [63.4, 173.0], [63.5, 173.0], [63.6, 173.0], [63.7, 173.0], [63.8, 173.0], [63.9, 173.0], [64.0, 173.0], [64.1, 173.0], [64.2, 173.0], [64.3, 173.0], [64.4, 173.0], [64.5, 173.0], [64.6, 173.0], [64.7, 173.0], [64.8, 173.0], [64.9, 173.0], [65.0, 174.0], [65.1, 174.0], [65.2, 174.0], [65.3, 174.0], [65.4, 174.0], [65.5, 174.0], [65.6, 174.0], [65.7, 174.0], [65.8, 174.0], [65.9, 174.0], [66.0, 175.0], [66.1, 175.0], [66.2, 175.0], [66.3, 175.0], [66.4, 175.0], [66.5, 175.0], [66.6, 175.0], [66.7, 175.0], [66.8, 175.0], [66.9, 175.0], [67.0, 175.0], [67.1, 175.0], [67.2, 175.0], [67.3, 175.0], [67.4, 175.0], [67.5, 175.0], [67.6, 175.0], [67.7, 175.0], [67.8, 175.0], [67.9, 175.0], [68.0, 175.0], [68.1, 175.0], [68.2, 175.0], [68.3, 175.0], [68.4, 175.0], [68.5, 175.0], [68.6, 175.0], [68.7, 175.0], [68.8, 175.0], [68.9, 175.0], [69.0, 176.0], [69.1, 176.0], [69.2, 176.0], [69.3, 176.0], [69.4, 176.0], [69.5, 176.0], [69.6, 176.0], [69.7, 176.0], [69.8, 176.0], [69.9, 176.0], [70.0, 176.0], [70.1, 176.0], [70.2, 176.0], [70.3, 176.0], [70.4, 176.0], [70.5, 176.0], [70.6, 176.0], [70.7, 176.0], [70.8, 176.0], [70.9, 176.0], [71.0, 176.0], [71.1, 176.0], [71.2, 176.0], [71.3, 176.0], [71.4, 176.0], [71.5, 176.0], [71.6, 176.0], [71.7, 176.0], [71.8, 176.0], [71.9, 176.0], [72.0, 176.0], [72.1, 176.0], [72.2, 176.0], [72.3, 176.0], [72.4, 176.0], [72.5, 176.0], [72.6, 176.0], [72.7, 176.0], [72.8, 176.0], [72.9, 176.0], [73.0, 177.0], [73.1, 177.0], [73.2, 177.0], [73.3, 177.0], [73.4, 177.0], [73.5, 177.0], [73.6, 177.0], [73.7, 177.0], [73.8, 177.0], [73.9, 177.0], [74.0, 177.0], [74.1, 177.0], [74.2, 177.0], [74.3, 177.0], [74.4, 177.0], [74.5, 177.0], [74.6, 177.0], [74.7, 177.0], [74.8, 177.0], [74.9, 177.0], [75.0, 177.0], [75.1, 177.0], [75.2, 177.0], [75.3, 177.0], [75.4, 177.0], [75.5, 177.0], [75.6, 177.0], [75.7, 177.0], [75.8, 177.0], [75.9, 177.0], [76.0, 178.0], [76.1, 178.0], [76.2, 178.0], [76.3, 178.0], [76.4, 178.0], [76.5, 178.0], [76.6, 178.0], [76.7, 178.0], [76.8, 178.0], [76.9, 178.0], [77.0, 179.0], [77.1, 179.0], [77.2, 179.0], [77.3, 179.0], [77.4, 179.0], [77.5, 179.0], [77.6, 179.0], [77.7, 179.0], [77.8, 179.0], [77.9, 179.0], [78.0, 179.0], [78.1, 179.0], [78.2, 179.0], [78.3, 179.0], [78.4, 179.0], [78.5, 179.0], [78.6, 179.0], [78.7, 179.0], [78.8, 179.0], [78.9, 179.0], [79.0, 180.0], [79.1, 180.0], [79.2, 180.0], [79.3, 180.0], [79.4, 180.0], [79.5, 180.0], [79.6, 180.0], [79.7, 180.0], [79.8, 180.0], [79.9, 180.0], [80.0, 180.0], [80.1, 180.0], [80.2, 180.0], [80.3, 180.0], [80.4, 180.0], [80.5, 180.0], [80.6, 180.0], [80.7, 180.0], [80.8, 180.0], [80.9, 180.0], [81.0, 180.0], [81.1, 180.0], [81.2, 180.0], [81.3, 180.0], [81.4, 180.0], [81.5, 180.0], [81.6, 180.0], [81.7, 180.0], [81.8, 180.0], [81.9, 180.0], [82.0, 181.0], [82.1, 181.0], [82.2, 181.0], [82.3, 181.0], [82.4, 181.0], [82.5, 181.0], [82.6, 181.0], [82.7, 181.0], [82.8, 181.0], [82.9, 181.0], [83.0, 182.0], [83.1, 182.0], [83.2, 182.0], [83.3, 182.0], [83.4, 182.0], [83.5, 182.0], [83.6, 182.0], [83.7, 182.0], [83.8, 182.0], [83.9, 182.0], [84.0, 184.0], [84.1, 184.0], [84.2, 184.0], [84.3, 184.0], [84.4, 184.0], [84.5, 184.0], [84.6, 184.0], [84.7, 184.0], [84.8, 184.0], [84.9, 184.0], [85.0, 185.0], [85.1, 185.0], [85.2, 185.0], [85.3, 185.0], [85.4, 185.0], [85.5, 185.0], [85.6, 185.0], [85.7, 185.0], [85.8, 185.0], [85.9, 185.0], [86.0, 185.0], [86.1, 185.0], [86.2, 185.0], [86.3, 185.0], [86.4, 185.0], [86.5, 185.0], [86.6, 185.0], [86.7, 185.0], [86.8, 185.0], [86.9, 185.0], [87.0, 186.0], [87.1, 186.0], [87.2, 186.0], [87.3, 186.0], [87.4, 186.0], [87.5, 186.0], [87.6, 186.0], [87.7, 186.0], [87.8, 186.0], [87.9, 186.0], [88.0, 188.0], [88.1, 188.0], [88.2, 188.0], [88.3, 188.0], [88.4, 188.0], [88.5, 188.0], [88.6, 188.0], [88.7, 188.0], [88.8, 188.0], [88.9, 188.0], [89.0, 188.0], [89.1, 188.0], [89.2, 188.0], [89.3, 188.0], [89.4, 188.0], [89.5, 188.0], [89.6, 188.0], [89.7, 188.0], [89.8, 188.0], [89.9, 188.0], [90.0, 189.0], [90.1, 189.0], [90.2, 189.0], [90.3, 189.0], [90.4, 189.0], [90.5, 189.0], [90.6, 189.0], [90.7, 189.0], [90.8, 189.0], [90.9, 189.0], [91.0, 190.0], [91.1, 190.0], [91.2, 190.0], [91.3, 190.0], [91.4, 190.0], [91.5, 190.0], [91.6, 190.0], [91.7, 190.0], [91.8, 190.0], [91.9, 190.0], [92.0, 196.0], [92.1, 196.0], [92.2, 196.0], [92.3, 196.0], [92.4, 196.0], [92.5, 196.0], [92.6, 196.0], [92.7, 196.0], [92.8, 196.0], [92.9, 196.0], [93.0, 197.0], [93.1, 197.0], [93.2, 197.0], [93.3, 197.0], [93.4, 197.0], [93.5, 197.0], [93.6, 197.0], [93.7, 197.0], [93.8, 197.0], [93.9, 197.0], [94.0, 199.0], [94.1, 199.0], [94.2, 199.0], [94.3, 199.0], [94.4, 199.0], [94.5, 199.0], [94.6, 199.0], [94.7, 199.0], [94.8, 199.0], [94.9, 199.0], [95.0, 202.0], [95.1, 202.0], [95.2, 202.0], [95.3, 202.0], [95.4, 202.0], [95.5, 202.0], [95.6, 202.0], [95.7, 202.0], [95.8, 202.0], [95.9, 202.0], [96.0, 204.0], [96.1, 204.0], [96.2, 204.0], [96.3, 204.0], [96.4, 204.0], [96.5, 204.0], [96.6, 204.0], [96.7, 204.0], [96.8, 204.0], [96.9, 204.0], [97.0, 209.0], [97.1, 209.0], [97.2, 209.0], [97.3, 209.0], [97.4, 209.0], [97.5, 209.0], [97.6, 209.0], [97.7, 209.0], [97.8, 209.0], [97.9, 209.0], [98.0, 210.0], [98.1, 210.0], [98.2, 210.0], [98.3, 210.0], [98.4, 210.0], [98.5, 210.0], [98.6, 210.0], [98.7, 210.0], [98.8, 210.0], [98.9, 210.0], [99.0, 283.0], [99.1, 283.0], [99.2, 283.0], [99.3, 283.0], [99.4, 283.0], [99.5, 283.0], [99.6, 283.0], [99.7, 283.0], [99.8, 283.0], [99.9, 283.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 26.0], [0.1, 28.0], [0.2, 29.0], [0.3, 29.0], [0.4, 30.0], [0.5, 30.0], [0.6, 31.0], [0.7, 31.0], [0.8, 32.0], [0.9, 32.0], [1.0, 32.0], [1.1, 32.0], [1.2, 33.0], [1.3, 33.0], [1.4, 33.0], [1.5, 33.0], [1.6, 33.0], [1.7, 34.0], [1.8, 34.0], [1.9, 34.0], [2.0, 34.0], [2.1, 34.0], [2.2, 34.0], [2.3, 35.0], [2.4, 35.0], [2.5, 35.0], [2.6, 35.0], [2.7, 35.0], [2.8, 35.0], [2.9, 35.0], [3.0, 35.0], [3.1, 35.0], [3.2, 36.0], [3.3, 36.0], [3.4, 36.0], [3.5, 36.0], [3.6, 36.0], [3.7, 36.0], [3.8, 36.0], [3.9, 36.0], [4.0, 36.0], [4.1, 36.0], [4.2, 36.0], [4.3, 37.0], [4.4, 37.0], [4.5, 37.0], [4.6, 37.0], [4.7, 37.0], [4.8, 37.0], [4.9, 37.0], [5.0, 37.0], [5.1, 37.0], [5.2, 37.0], [5.3, 37.0], [5.4, 37.0], [5.5, 37.0], [5.6, 37.0], [5.7, 38.0], [5.8, 38.0], [5.9, 38.0], [6.0, 38.0], [6.1, 38.0], [6.2, 38.0], [6.3, 38.0], [6.4, 38.0], [6.5, 38.0], [6.6, 38.0], [6.7, 38.0], [6.8, 38.0], [6.9, 38.0], [7.0, 38.0], [7.1, 38.0], [7.2, 38.0], [7.3, 38.0], [7.4, 39.0], [7.5, 39.0], [7.6, 39.0], [7.7, 39.0], [7.8, 39.0], [7.9, 39.0], [8.0, 39.0], [8.1, 39.0], [8.2, 39.0], [8.3, 39.0], [8.4, 39.0], [8.5, 39.0], [8.6, 39.0], [8.7, 39.0], [8.8, 39.0], [8.9, 39.0], [9.0, 39.0], [9.1, 39.0], [9.2, 40.0], [9.3, 40.0], [9.4, 40.0], [9.5, 40.0], [9.6, 40.0], [9.7, 40.0], [9.8, 40.0], [9.9, 40.0], [10.0, 40.0], [10.1, 40.0], [10.2, 40.0], [10.3, 40.0], [10.4, 40.0], [10.5, 40.0], [10.6, 40.0], [10.7, 40.0], [10.8, 40.0], [10.9, 40.0], [11.0, 40.0], [11.1, 40.0], [11.2, 40.0], [11.3, 40.0], [11.4, 41.0], [11.5, 41.0], [11.6, 41.0], [11.7, 41.0], [11.8, 41.0], [11.9, 41.0], [12.0, 41.0], [12.1, 41.0], [12.2, 41.0], [12.3, 41.0], [12.4, 41.0], [12.5, 41.0], [12.6, 41.0], [12.7, 41.0], [12.8, 41.0], [12.9, 41.0], [13.0, 41.0], [13.1, 41.0], [13.2, 41.0], [13.3, 41.0], [13.4, 41.0], [13.5, 41.0], [13.6, 41.0], [13.7, 41.0], [13.8, 41.0], [13.9, 41.0], [14.0, 42.0], [14.1, 42.0], [14.2, 42.0], [14.3, 42.0], [14.4, 42.0], [14.5, 42.0], [14.6, 42.0], [14.7, 42.0], [14.8, 42.0], [14.9, 42.0], [15.0, 42.0], [15.1, 42.0], [15.2, 42.0], [15.3, 42.0], [15.4, 42.0], [15.5, 42.0], [15.6, 42.0], [15.7, 42.0], [15.8, 42.0], [15.9, 42.0], [16.0, 42.0], [16.1, 42.0], [16.2, 42.0], [16.3, 42.0], [16.4, 42.0], [16.5, 42.0], [16.6, 43.0], [16.7, 43.0], [16.8, 43.0], [16.9, 43.0], [17.0, 43.0], [17.1, 43.0], [17.2, 43.0], [17.3, 43.0], [17.4, 43.0], [17.5, 43.0], [17.6, 43.0], [17.7, 43.0], [17.8, 43.0], [17.9, 43.0], [18.0, 43.0], [18.1, 43.0], [18.2, 43.0], [18.3, 43.0], [18.4, 43.0], [18.5, 43.0], [18.6, 43.0], [18.7, 43.0], [18.8, 43.0], [18.9, 43.0], [19.0, 43.0], [19.1, 43.0], [19.2, 43.0], [19.3, 43.0], [19.4, 43.0], [19.5, 43.0], [19.6, 44.0], [19.7, 44.0], [19.8, 44.0], [19.9, 44.0], [20.0, 44.0], [20.1, 44.0], [20.2, 44.0], [20.3, 44.0], [20.4, 44.0], [20.5, 44.0], [20.6, 44.0], [20.7, 44.0], [20.8, 44.0], [20.9, 44.0], [21.0, 44.0], [21.1, 44.0], [21.2, 44.0], [21.3, 44.0], [21.4, 44.0], [21.5, 44.0], [21.6, 44.0], [21.7, 44.0], [21.8, 44.0], [21.9, 44.0], [22.0, 44.0], [22.1, 44.0], [22.2, 44.0], [22.3, 44.0], [22.4, 44.0], [22.5, 44.0], [22.6, 45.0], [22.7, 45.0], [22.8, 45.0], [22.9, 45.0], [23.0, 45.0], [23.1, 45.0], [23.2, 45.0], [23.3, 45.0], [23.4, 45.0], [23.5, 45.0], [23.6, 45.0], [23.7, 45.0], [23.8, 45.0], [23.9, 45.0], [24.0, 45.0], [24.1, 45.0], [24.2, 45.0], [24.3, 45.0], [24.4, 45.0], [24.5, 45.0], [24.6, 45.0], [24.7, 45.0], [24.8, 45.0], [24.9, 45.0], [25.0, 45.0], [25.1, 45.0], [25.2, 45.0], [25.3, 45.0], [25.4, 45.0], [25.5, 45.0], [25.6, 46.0], [25.7, 46.0], [25.8, 46.0], [25.9, 46.0], [26.0, 46.0], [26.1, 46.0], [26.2, 46.0], [26.3, 46.0], [26.4, 46.0], [26.5, 46.0], [26.6, 46.0], [26.7, 46.0], [26.8, 46.0], [26.9, 46.0], [27.0, 46.0], [27.1, 46.0], [27.2, 46.0], [27.3, 46.0], [27.4, 46.0], [27.5, 46.0], [27.6, 46.0], [27.7, 46.0], [27.8, 46.0], [27.9, 46.0], [28.0, 46.0], [28.1, 46.0], [28.2, 46.0], [28.3, 46.0], [28.4, 46.0], [28.5, 46.0], [28.6, 46.0], [28.7, 47.0], [28.8, 47.0], [28.9, 47.0], [29.0, 47.0], [29.1, 47.0], [29.2, 47.0], [29.3, 47.0], [29.4, 47.0], [29.5, 47.0], [29.6, 47.0], [29.7, 47.0], [29.8, 47.0], [29.9, 47.0], [30.0, 47.0], [30.1, 47.0], [30.2, 47.0], [30.3, 47.0], [30.4, 47.0], [30.5, 47.0], [30.6, 47.0], [30.7, 47.0], [30.8, 47.0], [30.9, 47.0], [31.0, 47.0], [31.1, 47.0], [31.2, 47.0], [31.3, 47.0], [31.4, 47.0], [31.5, 47.0], [31.6, 47.0], [31.7, 48.0], [31.8, 48.0], [31.9, 48.0], [32.0, 48.0], [32.1, 48.0], [32.2, 48.0], [32.3, 48.0], [32.4, 48.0], [32.5, 48.0], [32.6, 48.0], [32.7, 48.0], [32.8, 48.0], [32.9, 48.0], [33.0, 48.0], [33.1, 48.0], [33.2, 48.0], [33.3, 48.0], [33.4, 48.0], [33.5, 48.0], [33.6, 48.0], [33.7, 48.0], [33.8, 48.0], [33.9, 48.0], [34.0, 48.0], [34.1, 48.0], [34.2, 48.0], [34.3, 49.0], [34.4, 49.0], [34.5, 49.0], [34.6, 49.0], [34.7, 49.0], [34.8, 49.0], [34.9, 49.0], [35.0, 49.0], [35.1, 49.0], [35.2, 49.0], [35.3, 49.0], [35.4, 49.0], [35.5, 49.0], [35.6, 49.0], [35.7, 49.0], [35.8, 49.0], [35.9, 49.0], [36.0, 49.0], [36.1, 49.0], [36.2, 49.0], [36.3, 49.0], [36.4, 49.0], [36.5, 49.0], [36.6, 49.0], [36.7, 49.0], [36.8, 49.0], [36.9, 49.0], [37.0, 49.0], [37.1, 50.0], [37.2, 50.0], [37.3, 50.0], [37.4, 50.0], [37.5, 50.0], [37.6, 50.0], [37.7, 50.0], [37.8, 50.0], [37.9, 50.0], [38.0, 50.0], [38.1, 50.0], [38.2, 50.0], [38.3, 50.0], [38.4, 50.0], [38.5, 50.0], [38.6, 50.0], [38.7, 50.0], [38.8, 50.0], [38.9, 50.0], [39.0, 50.0], [39.1, 50.0], [39.2, 50.0], [39.3, 50.0], [39.4, 50.0], [39.5, 50.0], [39.6, 51.0], [39.7, 51.0], [39.8, 51.0], [39.9, 51.0], [40.0, 51.0], [40.1, 51.0], [40.2, 51.0], [40.3, 51.0], [40.4, 51.0], [40.5, 51.0], [40.6, 51.0], [40.7, 51.0], [40.8, 51.0], [40.9, 51.0], [41.0, 51.0], [41.1, 51.0], [41.2, 51.0], [41.3, 51.0], [41.4, 51.0], [41.5, 51.0], [41.6, 51.0], [41.7, 51.0], [41.8, 52.0], [41.9, 52.0], [42.0, 52.0], [42.1, 52.0], [42.2, 52.0], [42.3, 52.0], [42.4, 52.0], [42.5, 52.0], [42.6, 52.0], [42.7, 52.0], [42.8, 52.0], [42.9, 52.0], [43.0, 52.0], [43.1, 52.0], [43.2, 52.0], [43.3, 52.0], [43.4, 52.0], [43.5, 52.0], [43.6, 52.0], [43.7, 52.0], [43.8, 53.0], [43.9, 53.0], [44.0, 53.0], [44.1, 53.0], [44.2, 53.0], [44.3, 53.0], [44.4, 53.0], [44.5, 53.0], [44.6, 53.0], [44.7, 53.0], [44.8, 53.0], [44.9, 53.0], [45.0, 53.0], [45.1, 53.0], [45.2, 53.0], [45.3, 53.0], [45.4, 53.0], [45.5, 53.0], [45.6, 53.0], [45.7, 54.0], [45.8, 54.0], [45.9, 54.0], [46.0, 54.0], [46.1, 54.0], [46.2, 54.0], [46.3, 54.0], [46.4, 54.0], [46.5, 54.0], [46.6, 54.0], [46.7, 54.0], [46.8, 54.0], [46.9, 54.0], [47.0, 54.0], [47.1, 54.0], [47.2, 54.0], [47.3, 55.0], [47.4, 55.0], [47.5, 55.0], [47.6, 55.0], [47.7, 55.0], [47.8, 55.0], [47.9, 55.0], [48.0, 55.0], [48.1, 55.0], [48.2, 55.0], [48.3, 55.0], [48.4, 55.0], [48.5, 55.0], [48.6, 55.0], [48.7, 55.0], [48.8, 56.0], [48.9, 56.0], [49.0, 56.0], [49.1, 56.0], [49.2, 56.0], [49.3, 56.0], [49.4, 56.0], [49.5, 56.0], [49.6, 56.0], [49.7, 56.0], [49.8, 56.0], [49.9, 56.0], [50.0, 56.0], [50.1, 56.0], [50.2, 57.0], [50.3, 57.0], [50.4, 57.0], [50.5, 57.0], [50.6, 57.0], [50.7, 57.0], [50.8, 57.0], [50.9, 57.0], [51.0, 57.0], [51.1, 57.0], [51.2, 57.0], [51.3, 58.0], [51.4, 58.0], [51.5, 58.0], [51.6, 58.0], [51.7, 58.0], [51.8, 58.0], [51.9, 58.0], [52.0, 58.0], [52.1, 58.0], [52.2, 58.0], [52.3, 59.0], [52.4, 59.0], [52.5, 59.0], [52.6, 59.0], [52.7, 59.0], [52.8, 59.0], [52.9, 59.0], [53.0, 59.0], [53.1, 59.0], [53.2, 60.0], [53.3, 60.0], [53.4, 60.0], [53.5, 60.0], [53.6, 60.0], [53.7, 60.0], [53.8, 60.0], [53.9, 60.0], [54.0, 60.0], [54.1, 61.0], [54.2, 61.0], [54.3, 61.0], [54.4, 61.0], [54.5, 61.0], [54.6, 61.0], [54.7, 61.0], [54.8, 62.0], [54.9, 62.0], [55.0, 62.0], [55.1, 62.0], [55.2, 62.0], [55.3, 62.0], [55.4, 63.0], [55.5, 63.0], [55.6, 63.0], [55.7, 63.0], [55.8, 63.0], [55.9, 63.0], [56.0, 64.0], [56.1, 64.0], [56.2, 64.0], [56.3, 64.0], [56.4, 65.0], [56.5, 65.0], [56.6, 65.0], [56.7, 65.0], [56.8, 66.0], [56.9, 66.0], [57.0, 66.0], [57.1, 66.0], [57.2, 67.0], [57.3, 67.0], [57.4, 67.0], [57.5, 68.0], [57.6, 68.0], [57.7, 69.0], [57.8, 70.0], [57.9, 70.0], [58.0, 71.0], [58.1, 72.0], [58.2, 72.0], [58.3, 73.0], [58.4, 73.0], [58.5, 75.0], [58.6, 76.0], [58.7, 78.0], [58.8, 78.0], [58.9, 79.0], [59.0, 82.0], [59.1, 83.0], [59.2, 85.0], [59.3, 88.0], [59.4, 92.0], [59.5, 98.0], [59.6, 104.0], [59.7, 111.0], [59.8, 115.0], [59.9, 121.0], [60.0, 125.0], [60.1, 137.0], [60.2, 149.0], [60.3, 156.0], [60.4, 163.0], [60.5, 171.0], [60.6, 178.0], [60.7, 183.0], [60.8, 191.0], [60.9, 200.0], [61.0, 207.0], [61.1, 214.0], [61.2, 219.0], [61.3, 224.0], [61.4, 238.0], [61.5, 243.0], [61.6, 252.0], [61.7, 258.0], [61.8, 268.0], [61.9, 277.0], [62.0, 283.0], [62.1, 289.0], [62.2, 298.0], [62.3, 301.0], [62.4, 307.0], [62.5, 313.0], [62.6, 321.0], [62.7, 323.0], [62.8, 330.0], [62.9, 338.0], [63.0, 344.0], [63.1, 350.0], [63.2, 356.0], [63.3, 359.0], [63.4, 366.0], [63.5, 370.0], [63.6, 376.0], [63.7, 381.0], [63.8, 387.0], [63.9, 392.0], [64.0, 395.0], [64.1, 399.0], [64.2, 403.0], [64.3, 407.0], [64.4, 410.0], [64.5, 414.0], [64.6, 416.0], [64.7, 421.0], [64.8, 426.0], [64.9, 430.0], [65.0, 433.0], [65.1, 437.0], [65.2, 443.0], [65.3, 445.0], [65.4, 450.0], [65.5, 452.0], [65.6, 456.0], [65.7, 459.0], [65.8, 464.0], [65.9, 467.0], [66.0, 470.0], [66.1, 471.0], [66.2, 477.0], [66.3, 481.0], [66.4, 485.0], [66.5, 488.0], [66.6, 492.0], [66.7, 496.0], [66.8, 499.0], [66.9, 503.0], [67.0, 505.0], [67.1, 508.0], [67.2, 510.0], [67.3, 514.0], [67.4, 516.0], [67.5, 519.0], [67.6, 521.0], [67.7, 526.0], [67.8, 529.0], [67.9, 532.0], [68.0, 534.0], [68.1, 537.0], [68.2, 540.0], [68.3, 542.0], [68.4, 547.0], [68.5, 551.0], [68.6, 555.0], [68.7, 560.0], [68.8, 564.0], [68.9, 566.0], [69.0, 568.0], [69.1, 572.0], [69.2, 577.0], [69.3, 578.0], [69.4, 579.0], [69.5, 581.0], [69.6, 585.0], [69.7, 588.0], [69.8, 590.0], [69.9, 593.0], [70.0, 595.0], [70.1, 597.0], [70.2, 600.0], [70.3, 604.0], [70.4, 605.0], [70.5, 607.0], [70.6, 608.0], [70.7, 611.0], [70.8, 612.0], [70.9, 615.0], [71.0, 620.0], [71.1, 622.0], [71.2, 625.0], [71.3, 627.0], [71.4, 629.0], [71.5, 631.0], [71.6, 633.0], [71.7, 635.0], [71.8, 637.0], [71.9, 639.0], [72.0, 641.0], [72.1, 643.0], [72.2, 645.0], [72.3, 648.0], [72.4, 652.0], [72.5, 654.0], [72.6, 657.0], [72.7, 658.0], [72.8, 661.0], [72.9, 662.0], [73.0, 666.0], [73.1, 670.0], [73.2, 672.0], [73.3, 673.0], [73.4, 675.0], [73.5, 678.0], [73.6, 679.0], [73.7, 682.0], [73.8, 684.0], [73.9, 687.0], [74.0, 689.0], [74.1, 693.0], [74.2, 695.0], [74.3, 696.0], [74.4, 699.0], [74.5, 702.0], [74.6, 704.0], [74.7, 707.0], [74.8, 711.0], [74.9, 713.0], [75.0, 716.0], [75.1, 718.0], [75.2, 722.0], [75.3, 723.0], [75.4, 726.0], [75.5, 729.0], [75.6, 731.0], [75.7, 733.0], [75.8, 737.0], [75.9, 739.0], [76.0, 741.0], [76.1, 743.0], [76.2, 745.0], [76.3, 747.0], [76.4, 750.0], [76.5, 753.0], [76.6, 755.0], [76.7, 758.0], [76.8, 761.0], [76.9, 765.0], [77.0, 767.0], [77.1, 770.0], [77.2, 772.0], [77.3, 774.0], [77.4, 777.0], [77.5, 779.0], [77.6, 780.0], [77.7, 782.0], [77.8, 785.0], [77.9, 788.0], [78.0, 790.0], [78.1, 792.0], [78.2, 795.0], [78.3, 796.0], [78.4, 798.0], [78.5, 800.0], [78.6, 803.0], [78.7, 809.0], [78.8, 812.0], [78.9, 814.0], [79.0, 817.0], [79.1, 819.0], [79.2, 821.0], [79.3, 824.0], [79.4, 826.0], [79.5, 830.0], [79.6, 833.0], [79.7, 836.0], [79.8, 840.0], [79.9, 842.0], [80.0, 844.0], [80.1, 845.0], [80.2, 848.0], [80.3, 851.0], [80.4, 853.0], [80.5, 855.0], [80.6, 858.0], [80.7, 861.0], [80.8, 863.0], [80.9, 866.0], [81.0, 868.0], [81.1, 870.0], [81.2, 873.0], [81.3, 877.0], [81.4, 880.0], [81.5, 882.0], [81.6, 885.0], [81.7, 888.0], [81.8, 891.0], [81.9, 894.0], [82.0, 897.0], [82.1, 900.0], [82.2, 901.0], [82.3, 904.0], [82.4, 906.0], [82.5, 910.0], [82.6, 914.0], [82.7, 917.0], [82.8, 921.0], [82.9, 924.0], [83.0, 926.0], [83.1, 929.0], [83.2, 931.0], [83.3, 935.0], [83.4, 937.0], [83.5, 940.0], [83.6, 943.0], [83.7, 946.0], [83.8, 949.0], [83.9, 951.0], [84.0, 953.0], [84.1, 955.0], [84.2, 959.0], [84.3, 963.0], [84.4, 965.0], [84.5, 967.0], [84.6, 970.0], [84.7, 971.0], [84.8, 974.0], [84.9, 977.0], [85.0, 979.0], [85.1, 981.0], [85.2, 985.0], [85.3, 987.0], [85.4, 989.0], [85.5, 993.0], [85.6, 997.0], [85.7, 999.0], [85.8, 1004.0], [85.9, 1007.0], [86.0, 1010.0], [86.1, 1014.0], [86.2, 1016.0], [86.3, 1019.0], [86.4, 1022.0], [86.5, 1025.0], [86.6, 1030.0], [86.7, 1036.0], [86.8, 1040.0], [86.9, 1043.0], [87.0, 1046.0], [87.1, 1047.0], [87.2, 1050.0], [87.3, 1052.0], [87.4, 1056.0], [87.5, 1059.0], [87.6, 1062.0], [87.7, 1065.0], [87.8, 1066.0], [87.9, 1068.0], [88.0, 1071.0], [88.1, 1077.0], [88.2, 1078.0], [88.3, 1082.0], [88.4, 1085.0], [88.5, 1089.0], [88.6, 1091.0], [88.7, 1094.0], [88.8, 1096.0], [88.9, 1099.0], [89.0, 1102.0], [89.1, 1105.0], [89.2, 1108.0], [89.3, 1111.0], [89.4, 1112.0], [89.5, 1117.0], [89.6, 1121.0], [89.7, 1125.0], [89.8, 1128.0], [89.9, 1132.0], [90.0, 1134.0], [90.1, 1140.0], [90.2, 1144.0], [90.3, 1148.0], [90.4, 1152.0], [90.5, 1158.0], [90.6, 1160.0], [90.7, 1164.0], [90.8, 1166.0], [90.9, 1171.0], [91.0, 1177.0], [91.1, 1180.0], [91.2, 1183.0], [91.3, 1185.0], [91.4, 1190.0], [91.5, 1196.0], [91.6, 1202.0], [91.7, 1208.0], [91.8, 1213.0], [91.9, 1216.0], [92.0, 1221.0], [92.1, 1226.0], [92.2, 1231.0], [92.3, 1237.0], [92.4, 1241.0], [92.5, 1247.0], [92.6, 1252.0], [92.7, 1255.0], [92.8, 1260.0], [92.9, 1266.0], [93.0, 1270.0], [93.1, 1273.0], [93.2, 1276.0], [93.3, 1280.0], [93.4, 1285.0], [93.5, 1289.0], [93.6, 1297.0], [93.7, 1301.0], [93.8, 1306.0], [93.9, 1312.0], [94.0, 1315.0], [94.1, 1323.0], [94.2, 1329.0], [94.3, 1334.0], [94.4, 1339.0], [94.5, 1346.0], [94.6, 1351.0], [94.7, 1354.0], [94.8, 1362.0], [94.9, 1373.0], [95.0, 1379.0], [95.1, 1385.0], [95.2, 1392.0], [95.3, 1395.0], [95.4, 1405.0], [95.5, 1412.0], [95.6, 1421.0], [95.7, 1433.0], [95.8, 1442.0], [95.9, 1451.0], [96.0, 1457.0], [96.1, 1468.0], [96.2, 1475.0], [96.3, 1482.0], [96.4, 1492.0], [96.5, 1503.0], [96.6, 1513.0], [96.7, 1525.0], [96.8, 1530.0], [96.9, 1541.0], [97.0, 1549.0], [97.1, 1555.0], [97.2, 1563.0], [97.3, 1570.0], [97.4, 1580.0], [97.5, 1585.0], [97.6, 1597.0], [97.7, 1611.0], [97.8, 1624.0], [97.9, 1641.0], [98.0, 1652.0], [98.1, 1667.0], [98.2, 1683.0], [98.3, 1701.0], [98.4, 1715.0], [98.5, 1735.0], [98.6, 1749.0], [98.7, 1765.0], [98.8, 1801.0], [98.9, 1820.0], [99.0, 1845.0], [99.1, 1866.0], [99.2, 1896.0], [99.3, 1932.0], [99.4, 1963.0], [99.5, 2020.0], [99.6, 2094.0], [99.7, 2234.0], [99.8, 2306.0], [99.9, 2528.0], [100.0, 3147.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 5951.0, "series": [{"data": [[0.0, 5945.0], [600.0, 406.0], [700.0, 407.0], [800.0, 389.0], [900.0, 370.0], [1000.0, 310.0], [1100.0, 262.0], [1200.0, 192.0], [1300.0, 176.0], [1400.0, 139.0], [1500.0, 102.0], [100.0, 132.0], [1600.0, 60.0], [1700.0, 46.0], [1800.0, 31.0], [1900.0, 15.0], [2000.0, 14.0], [2100.0, 8.0], [2200.0, 4.0], [2300.0, 1.0], [2400.0, 3.0], [2500.0, 3.0], [2600.0, 2.0], [2800.0, 1.0], [200.0, 147.0], [300.0, 192.0], [400.0, 289.0], [500.0, 354.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[100.0, 95.0], [200.0, 5.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 5951.0], [600.0, 426.0], [700.0, 407.0], [800.0, 358.0], [900.0, 366.0], [1000.0, 318.0], [1100.0, 265.0], [1200.0, 207.0], [1300.0, 171.0], [1400.0, 112.0], [1500.0, 116.0], [100.0, 138.0], [1600.0, 67.0], [1700.0, 48.0], [1800.0, 43.0], [1900.0, 24.0], [2000.0, 18.0], [2100.0, 5.0], [2200.0, 11.0], [2300.0, 6.0], [2400.0, 5.0], [2500.0, 3.0], [2600.0, 4.0], [2800.0, 2.0], [2700.0, 1.0], [3100.0, 1.0], [200.0, 136.0], [300.0, 186.0], [400.0, 270.0], [500.0, 335.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 642.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 13492.0, "series": [{"data": [[0.0, 13492.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5966.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 642.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.545454545454545, "minX": 1.58542446E12, "maxY": 100.0, "series": [{"data": [[1.58542476E12, 100.0], [1.58542494E12, 70.41738629821533], [1.58542446E12, 28.853868194842406], [1.58542488E12, 100.0], [1.58542458E12, 100.0], [1.585425E12, 7.545454545454545], [1.58542452E12, 87.56877470355751], [1.5854247E12, 100.0], [1.58542464E12, 100.0], [1.58542482E12, 100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.585425E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 33.0, "minX": 1.0, "maxY": 670.8666666666667, "series": [{"data": [[3.0, 47.0], [5.0, 67.0], [6.0, 53.0], [7.0, 57.5], [8.0, 62.0], [9.0, 49.0], [10.0, 53.0], [11.0, 49.0], [12.0, 56.333333333333336], [13.0, 43.666666666666664], [14.0, 44.0], [15.0, 51.0], [16.0, 55.0], [17.0, 51.14285714285714], [18.0, 49.6], [19.0, 34.666666666666664], [20.0, 59.5], [21.0, 45.5], [22.0, 45.75], [23.0, 45.666666666666664], [24.0, 128.1764705882353], [25.0, 48.4], [26.0, 44.666666666666664], [27.0, 50.142857142857146], [28.0, 52.36363636363636], [29.0, 52.44444444444444], [30.0, 193.8], [31.0, 44.25], [32.0, 51.85714285714286], [33.0, 47.285714285714285], [34.0, 45.81818181818182], [35.0, 61.95833333333333], [36.0, 218.78571428571428], [37.0, 268.0], [38.0, 45.666666666666664], [39.0, 57.28571428571429], [40.0, 49.08333333333333], [41.0, 43.5], [42.0, 38.900000000000006], [43.0, 51.875], [44.0, 46.416666666666664], [45.0, 89.54545454545453], [46.0, 47.5], [47.0, 50.666666666666664], [48.0, 49.18181818181817], [49.0, 53.07692307692307], [50.0, 47.875], [51.0, 47.66666666666668], [52.0, 47.16666666666667], [53.0, 44.99999999999999], [54.0, 45.142857142857146], [55.0, 47.785714285714285], [56.0, 49.875], [57.0, 44.16666666666666], [58.0, 45.628571428571426], [59.0, 41.46666666666666], [60.0, 45.20689655172414], [61.0, 47.43749999999999], [62.0, 49.599999999999994], [63.0, 47.588235294117645], [64.0, 46.529411764705884], [65.0, 48.47619047619048], [66.0, 45.57142857142857], [67.0, 670.8666666666667], [68.0, 52.07142857142858], [69.0, 45.764705882352935], [70.0, 42.9], [71.0, 45.2], [72.0, 43.68749999999999], [73.0, 47.083333333333336], [74.0, 42.93333333333333], [75.0, 46.46153846153847], [76.0, 44.142857142857146], [77.0, 46.2], [78.0, 103.42424242424242], [79.0, 172.59090909090907], [80.0, 45.64705882352942], [81.0, 49.78124999999998], [82.0, 56.28571428571429], [83.0, 44.88235294117647], [84.0, 43.900000000000006], [85.0, 48.15], [86.0, 48.45454545454545], [87.0, 58.0], [88.0, 45.5], [89.0, 120.52941176470591], [90.0, 196.37499999999994], [91.0, 266.5757575757575], [92.0, 82.80487804878048], [93.0, 50.23999999999999], [94.0, 47.732142857142854], [95.0, 45.13333333333334], [96.0, 208.93023255813955], [97.0, 239.16666666666669], [98.0, 313.44444444444446], [99.0, 651.4029850746269], [100.0, 427.7764594209776]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[94.76089999999965, 379.09570000000156]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 145.0], [3.0, 157.0], [4.0, 163.0], [5.0, 163.0], [6.0, 170.0], [7.0, 197.0], [8.0, 159.0], [9.0, 159.0], [10.0, 154.0], [11.0, 163.0], [12.0, 156.0], [13.0, 172.0], [14.0, 156.0], [15.0, 164.0], [16.0, 170.0], [17.0, 167.0], [18.0, 159.0], [19.0, 173.0], [20.0, 156.0], [21.0, 149.0], [22.0, 196.0], [23.0, 153.0], [24.0, 177.0], [25.0, 181.0], [26.0, 165.0], [27.0, 164.0], [28.0, 210.0], [29.0, 169.0], [30.0, 161.0], [31.0, 164.0], [32.0, 184.0], [33.0, 174.0], [34.0, 166.0], [35.0, 163.0], [36.0, 155.0], [37.0, 170.0], [38.0, 175.0], [39.0, 283.0], [40.0, 182.0], [41.0, 204.0], [42.0, 165.0], [43.0, 177.0], [44.0, 160.0], [45.0, 168.0], [46.0, 188.0], [47.0, 180.0], [48.0, 189.0], [49.0, 163.0], [50.0, 175.0], [51.0, 177.0], [52.0, 172.0], [53.0, 180.0], [54.0, 163.0], [55.0, 154.0], [56.0, 165.0], [57.0, 152.0], [58.0, 185.0], [59.0, 161.0], [60.0, 166.0], [61.0, 179.0], [62.0, 161.0], [63.0, 171.0], [64.0, 153.0], [65.0, 186.0], [66.0, 188.0], [67.0, 202.0], [68.0, 155.0], [69.0, 176.0], [70.0, 171.0], [71.0, 163.0], [72.0, 156.0], [73.0, 163.0], [74.0, 151.0], [75.0, 190.0], [76.0, 167.0], [77.0, 173.0], [78.0, 164.0], [79.0, 176.0], [80.0, 185.0], [81.0, 171.0], [82.0, 179.0], [83.0, 175.0], [84.0, 159.0], [85.0, 178.0], [86.0, 160.0], [87.0, 155.0], [88.0, 209.0], [89.0, 199.0], [90.0, 176.0], [91.0, 166.0], [92.0, 144.0], [93.0, 155.0], [94.0, 155.0], [95.0, 162.0], [96.0, 168.0], [97.0, 176.0], [98.0, 173.0], [99.0, 172.0], [100.0, 170.0], [1.0, 180.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[50.5, 171.00000000000003]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[3.0, 46.25], [4.0, 35.0], [5.0, 52.0], [6.0, 46.0], [7.0, 56.0], [8.0, 57.5], [9.0, 58.0], [10.0, 48.0], [11.0, 48.0], [12.0, 48.666666666666664], [13.0, 36.666666666666664], [14.0, 33.0], [15.0, 46.0], [16.0, 56.75], [17.0, 50.46666666666666], [18.0, 50.0], [19.0, 42.8], [20.0, 57.333333333333336], [21.0, 50.75], [22.0, 49.4], [23.0, 45.714285714285715], [24.0, 239.0], [25.0, 45.0], [26.0, 40.333333333333336], [27.0, 55.42857142857143], [28.0, 43.3], [29.0, 50.22222222222222], [30.0, 265.6923076923077], [31.0, 43.25], [32.0, 45.66666666666667], [33.0, 46.77777777777778], [34.0, 46.833333333333336], [35.0, 101.35000000000001], [36.0, 92.33333333333334], [37.0, 381.1538461538462], [38.0, 55.0], [39.0, 50.54545454545454], [40.0, 51.75], [41.0, 44.333333333333336], [42.0, 46.875], [43.0, 49.28571428571428], [44.0, 48.8125], [45.0, 62.6], [46.0, 47.27777777777779], [47.0, 47.714285714285715], [48.0, 106.93103448275862], [49.0, 50.99999999999999], [50.0, 48.84210526315789], [51.0, 48.555555555555564], [52.0, 47.375], [53.0, 42.86111111111111], [54.0, 48.28571428571429], [55.0, 50.0625], [56.0, 86.0], [57.0, 45.43749999999999], [58.0, 45.27777777777778], [59.0, 41.58333333333333], [60.0, 45.361111111111114], [61.0, 119.94736842105264], [62.0, 45.15625000000001], [63.0, 46.14285714285714], [64.0, 45.00000000000001], [65.0, 49.125], [66.0, 46.63636363636363], [67.0, 564.7333333333332], [68.0, 46.764705882352935], [69.0, 49.800000000000004], [70.0, 51.00000000000001], [71.0, 47.867924528301884], [72.0, 49.333333333333336], [73.0, 46.55555555555555], [74.0, 46.10000000000001], [75.0, 46.470588235294116], [76.0, 47.888888888888886], [77.0, 46.153846153846146], [78.0, 81.91176470588239], [79.0, 177.52380952380952], [80.0, 47.00000000000001], [81.0, 49.91666666666666], [82.0, 61.533333333333346], [83.0, 47.52777777777778], [84.0, 49.120000000000005], [85.0, 43.099999999999994], [86.0, 47.578947368421055], [87.0, 54.285714285714285], [88.0, 50.8], [89.0, 91.28571428571429], [90.0, 286.87500000000006], [91.0, 421.4230769230769], [92.0, 122.36507936507934], [93.0, 48.27272727272727], [94.0, 46.333333333333336], [95.0, 48.63157894736842], [96.0, 250.0163934426228], [97.0, 443.1428571428571], [98.0, 190.59375], [99.0, 544.3650793650795], [100.0, 435.7245516094561]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[94.7641, 386.46380000000136]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 157.36666666666667, "minX": 1.58542446E12, "maxY": 319728.6, "series": [{"data": [[1.58542476E12, 290702.4166666667], [1.58542494E12, 205832.75], [1.58542446E12, 37116.76666666667], [1.58542488E12, 317482.35], [1.58542458E12, 319728.6], [1.585425E12, 2605.2166666666667], [1.58542452E12, 294423.05], [1.5854247E12, 298163.0333333333], [1.58542464E12, 314406.05], [1.58542482E12, 291891.43333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58542476E12, 17538.9], [1.58542494E12, 12420.1], [1.58542446E12, 2347.6], [1.58542488E12, 19154.9], [1.58542458E12, 19290.933333333334], [1.585425E12, 157.36666666666667], [1.58542452E12, 17901.566666666666], [1.5854247E12, 17989.533333333333], [1.58542464E12, 18968.833333333332], [1.58542482E12, 17610.266666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.585425E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 48.44444444444444, "minX": 1.58542446E12, "maxY": 552.4656426839128, "series": [{"data": [[1.58542476E12, 537.1624489795923], [1.58542494E12, 196.7299435028251], [1.58542446E12, 74.2816901408451], [1.58542488E12, 363.8538404175987], [1.58542458E12, 341.8805309734514], [1.585425E12, 54.07692307692308], [1.58542452E12, 157.553382233089], [1.5854247E12, 534.2654516640252], [1.58542464E12, 342.1269841269841], [1.58542482E12, 551.2748776508962]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58542446E12, 171.13636363636368], [1.58542452E12, 170.8928571428571]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58542476E12, 548.0219869706843], [1.58542494E12, 209.9483568075118], [1.58542446E12, 79.12269938650309], [1.58542488E12, 378.0037369207776], [1.58542458E12, 342.6020864381522], [1.585425E12, 48.44444444444444], [1.58542452E12, 169.67682437850834], [1.5854247E12, 547.1036682615621], [1.58542464E12, 340.4977443609022], [1.58542482E12, 552.4656426839128]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.585425E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 48.333333333333336, "minX": 1.58542446E12, "maxY": 552.2425222312045, "series": [{"data": [[1.58542476E12, 536.9420408163267], [1.58542494E12, 196.46553672316398], [1.58542446E12, 74.12676056338026], [1.58542488E12, 363.6055182699477], [1.58542458E12, 341.67625368731524], [1.585425E12, 53.0], [1.58542452E12, 157.34881825590878], [1.5854247E12, 534.0483359746431], [1.58542464E12, 341.8994708994705], [1.58542482E12, 551.0407830342576]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58542446E12, 170.8409090909091], [1.58542452E12, 170.55357142857142]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58542476E12, 547.7825732899012], [1.58542494E12, 209.66901408450715], [1.58542446E12, 78.90184049079755], [1.58542488E12, 377.7817638266066], [1.58542458E12, 342.39195230998536], [1.585425E12, 48.333333333333336], [1.58542452E12, 169.4643143544506], [1.5854247E12, 546.8795853269534], [1.58542464E12, 340.24887218045103], [1.58542482E12, 552.2425222312045]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.585425E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58542446E12, "maxY": 1.5909090909090915, "series": [{"data": [[1.58542476E12, 0.21224489795918358], [1.58542494E12, 0.07005649717514145], [1.58542446E12, 0.38732394366197137], [1.58542488E12, 0.11931394481730069], [1.58542458E12, 0.1438053097345133], [1.585425E12, 0.0], [1.58542452E12, 0.0904645476772616], [1.5854247E12, 0.25277337559429464], [1.58542464E12, 0.14436885865457302], [1.58542482E12, 0.2104404567699837]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58542446E12, 1.5909090909090915], [1.58542452E12, 0.9285714285714286]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58542476E12, 0.5822475570032571], [1.58542494E12, 0.6197183098591554], [1.58542446E12, 0.9141104294478526], [1.58542488E12, 0.5979073243647235], [1.58542458E12, 0.7004470938897165], [1.585425E12, 0.7777777777777778], [1.58542452E12, 0.7802726543704891], [1.5854247E12, 0.6196172248803828], [1.58542464E12, 0.7413533834586458], [1.58542482E12, 0.6038803556992713]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.585425E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.58542446E12, "maxY": 3147.0, "series": [{"data": [[1.58542476E12, 2529.0], [1.58542494E12, 1833.0], [1.58542446E12, 1276.0], [1.58542488E12, 2890.0], [1.58542458E12, 2055.0], [1.585425E12, 75.0], [1.58542452E12, 2675.0], [1.5854247E12, 2696.0], [1.58542464E12, 2145.0], [1.58542482E12, 3147.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58542476E12, 29.0], [1.58542494E12, 26.0], [1.58542446E12, 28.0], [1.58542488E12, 26.0], [1.58542458E12, 27.0], [1.585425E12, 35.0], [1.58542452E12, 26.0], [1.5854247E12, 26.0], [1.58542464E12, 27.0], [1.58542482E12, 27.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58542476E12, 1190.6], [1.58542494E12, 765.8000000000002], [1.58542446E12, 169.0], [1.58542488E12, 1313.0], [1.58542458E12, 1103.1999999999998], [1.585425E12, 67.19999999999999], [1.58542452E12, 417.7000000000003], [1.5854247E12, 1260.0], [1.58542464E12, 1102.6], [1.58542482E12, 1215.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58542476E12, 1751.38], [1.58542494E12, 1407.0999999999995], [1.58542446E12, 798.5], [1.58542488E12, 2244.5999999999995], [1.58542458E12, 1665.0999999999976], [1.585425E12, 75.0], [1.58542452E12, 1809.9000000000005], [1.5854247E12, 1847.2599999999984], [1.58542464E12, 1637.46], [1.58542482E12, 1762.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58542476E12, 1392.2999999999997], [1.58542494E12, 1008.8999999999992], [1.58542446E12, 232.5], [1.58542488E12, 1602.0], [1.58542458E12, 1334.199999999999], [1.585425E12, 74.1], [1.58542452E12, 959.8499999999976], [1.5854247E12, 1460.4500000000003], [1.58542464E12, 1289.2999999999997], [1.58542482E12, 1399.7999999999997]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.585425E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 43.0, "minX": 1.0, "maxY": 976.5, "series": [{"data": [[2.0, 102.5], [3.0, 48.0], [4.0, 52.5], [5.0, 49.0], [6.0, 58.5], [7.0, 52.0], [8.0, 49.5], [9.0, 52.5], [10.0, 54.5], [11.0, 50.0], [12.0, 58.0], [13.0, 229.0], [14.0, 400.0], [15.0, 51.0], [16.0, 53.5], [17.0, 396.0], [18.0, 47.5], [19.0, 58.0], [20.0, 457.0], [21.0, 52.0], [22.0, 282.0], [23.0, 52.0], [24.0, 435.5], [25.0, 549.0], [26.0, 55.0], [27.0, 50.0], [28.0, 759.0], [29.0, 575.5], [30.0, 843.5], [31.0, 770.0], [32.0, 766.5], [33.0, 834.0], [35.0, 835.0], [34.0, 850.0], [36.0, 250.5], [37.0, 838.0], [38.0, 854.5], [39.0, 634.0], [41.0, 697.0], [40.0, 976.5], [43.0, 57.0], [42.0, 520.0], [44.0, 54.0], [45.0, 49.0], [46.0, 63.0], [47.0, 48.0], [49.0, 49.0], [48.0, 49.0], [51.0, 52.0], [50.0, 48.0], [53.0, 49.0], [52.0, 51.0], [54.0, 47.0], [55.0, 50.0], [56.0, 48.0], [57.0, 48.0], [58.0, 50.0], [59.0, 49.0], [61.0, 50.0], [60.0, 49.0], [63.0, 48.0], [62.0, 43.0], [65.0, 46.0], [64.0, 48.0], [69.0, 548.0], [1.0, 59.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 69.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 43.0, "minX": 1.0, "maxY": 976.0, "series": [{"data": [[2.0, 102.5], [3.0, 47.5], [4.0, 52.5], [5.0, 49.0], [6.0, 57.0], [7.0, 52.0], [8.0, 49.5], [9.0, 52.5], [10.0, 54.0], [11.0, 50.0], [12.0, 57.5], [13.0, 229.0], [14.0, 400.0], [15.0, 51.0], [16.0, 53.5], [17.0, 396.0], [18.0, 47.5], [19.0, 57.5], [20.0, 456.0], [21.0, 52.0], [22.0, 282.0], [23.0, 52.0], [24.0, 435.5], [25.0, 549.0], [26.0, 55.0], [27.0, 49.0], [28.0, 759.0], [29.0, 575.0], [30.0, 843.0], [31.0, 770.0], [32.0, 766.5], [33.0, 834.0], [35.0, 835.0], [34.0, 849.5], [36.0, 250.0], [37.0, 838.0], [38.0, 854.5], [39.0, 634.0], [41.0, 697.0], [40.0, 976.0], [43.0, 57.0], [42.0, 519.5], [44.0, 54.0], [45.0, 49.0], [46.0, 62.5], [47.0, 48.0], [49.0, 49.0], [48.0, 49.0], [51.0, 51.5], [50.0, 48.0], [53.0, 49.0], [52.0, 51.0], [54.0, 47.0], [55.0, 50.0], [56.0, 48.0], [57.0, 48.0], [58.0, 49.5], [59.0, 49.0], [61.0, 49.5], [60.0, 49.0], [63.0, 48.0], [62.0, 43.0], [65.0, 46.0], [64.0, 48.0], [69.0, 548.0], [1.0, 58.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 69.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.36666666666666664, "minX": 1.58542446E12, "maxY": 45.21666666666667, "series": [{"data": [[1.58542476E12, 41.36666666666667], [1.58542494E12, 28.483333333333334], [1.58542446E12, 5.816666666666666], [1.58542488E12, 44.38333333333333], [1.58542458E12, 44.983333333333334], [1.585425E12, 0.36666666666666664], [1.58542452E12, 42.18333333333333], [1.5854247E12, 40.93333333333333], [1.58542464E12, 45.21666666666667], [1.58542482E12, 41.266666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.585425E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.36666666666666664, "minX": 1.58542446E12, "maxY": 44.96666666666667, "series": [{"data": [[1.58542476E12, 40.88333333333333], [1.58542494E12, 28.95], [1.58542446E12, 5.816666666666666], [1.58542488E12, 44.65], [1.58542458E12, 44.96666666666667], [1.585425E12, 0.36666666666666664], [1.58542452E12, 42.166666666666664], [1.5854247E12, 41.93333333333333], [1.58542464E12, 44.21666666666667], [1.58542482E12, 41.05]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.585425E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.58542446E12, "maxY": 22.6, "series": [{"data": [[1.58542446E12, 0.7333333333333333], [1.58542452E12, 0.9333333333333333]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58542476E12, 20.416666666666668], [1.58542494E12, 14.75], [1.58542446E12, 2.3666666666666667], [1.58542488E12, 22.35], [1.58542458E12, 22.6], [1.585425E12, 0.21666666666666667], [1.58542452E12, 20.45], [1.5854247E12, 21.033333333333335], [1.58542464E12, 22.05], [1.58542482E12, 20.433333333333334]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58542476E12, 20.466666666666665], [1.58542494E12, 14.2], [1.58542446E12, 2.716666666666667], [1.58542488E12, 22.3], [1.58542458E12, 22.366666666666667], [1.585425E12, 0.15], [1.58542452E12, 20.783333333333335], [1.5854247E12, 20.9], [1.58542464E12, 22.166666666666668], [1.58542482E12, 20.616666666666667]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.585425E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.36666666666666664, "minX": 1.58542446E12, "maxY": 44.96666666666667, "series": [{"data": [[1.58542476E12, 40.88333333333333], [1.58542494E12, 28.95], [1.58542446E12, 5.816666666666666], [1.58542488E12, 44.65], [1.58542458E12, 44.96666666666667], [1.585425E12, 0.36666666666666664], [1.58542452E12, 42.166666666666664], [1.5854247E12, 41.93333333333333], [1.58542464E12, 44.21666666666667], [1.58542482E12, 41.05]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.585425E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

