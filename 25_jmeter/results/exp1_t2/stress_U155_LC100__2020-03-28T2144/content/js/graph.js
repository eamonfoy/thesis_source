/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 20008.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 2.0], [41.3, 2.0], [41.4, 2.0], [41.5, 2.0], [41.6, 2.0], [41.7, 2.0], [41.8, 2.0], [41.9, 2.0], [42.0, 2.0], [42.1, 2.0], [42.2, 2.0], [42.3, 2.0], [42.4, 2.0], [42.5, 2.0], [42.6, 2.0], [42.7, 2.0], [42.8, 2.0], [42.9, 2.0], [43.0, 2.0], [43.1, 2.0], [43.2, 2.0], [43.3, 2.0], [43.4, 2.0], [43.5, 2.0], [43.6, 2.0], [43.7, 2.0], [43.8, 2.0], [43.9, 2.0], [44.0, 2.0], [44.1, 2.0], [44.2, 2.0], [44.3, 2.0], [44.4, 2.0], [44.5, 2.0], [44.6, 2.0], [44.7, 2.0], [44.8, 2.0], [44.9, 2.0], [45.0, 2.0], [45.1, 2.0], [45.2, 2.0], [45.3, 2.0], [45.4, 2.0], [45.5, 2.0], [45.6, 2.0], [45.7, 2.0], [45.8, 2.0], [45.9, 2.0], [46.0, 3.0], [46.1, 3.0], [46.2, 3.0], [46.3, 3.0], [46.4, 3.0], [46.5, 3.0], [46.6, 3.0], [46.7, 3.0], [46.8, 3.0], [46.9, 3.0], [47.0, 4.0], [47.1, 4.0], [47.2, 4.0], [47.3, 4.0], [47.4, 4.0], [47.5, 5.0], [47.6, 5.0], [47.7, 6.0], [47.8, 8.0], [47.9, 11.0], [48.0, 14.0], [48.1, 16.0], [48.2, 20.0], [48.3, 26.0], [48.4, 32.0], [48.5, 39.0], [48.6, 42.0], [48.7, 43.0], [48.8, 45.0], [48.9, 47.0], [49.0, 49.0], [49.1, 51.0], [49.2, 52.0], [49.3, 54.0], [49.4, 56.0], [49.5, 57.0], [49.6, 58.0], [49.7, 60.0], [49.8, 62.0], [49.9, 65.0], [50.0, 68.0], [50.1, 70.0], [50.2, 74.0], [50.3, 76.0], [50.4, 78.0], [50.5, 80.0], [50.6, 83.0], [50.7, 85.0], [50.8, 87.0], [50.9, 88.0], [51.0, 90.0], [51.1, 92.0], [51.2, 95.0], [51.3, 98.0], [51.4, 101.0], [51.5, 105.0], [51.6, 108.0], [51.7, 110.0], [51.8, 113.0], [51.9, 115.0], [52.0, 119.0], [52.1, 122.0], [52.2, 124.0], [52.3, 127.0], [52.4, 132.0], [52.5, 135.0], [52.6, 139.0], [52.7, 143.0], [52.8, 146.0], [52.9, 150.0], [53.0, 156.0], [53.1, 157.0], [53.2, 164.0], [53.3, 170.0], [53.4, 178.0], [53.5, 196.0], [53.6, 222.0], [53.7, 259.0], [53.8, 287.0], [53.9, 327.0], [54.0, 358.0], [54.1, 388.0], [54.2, 410.0], [54.3, 430.0], [54.4, 450.0], [54.5, 473.0], [54.6, 501.0], [54.7, 527.0], [54.8, 549.0], [54.9, 567.0], [55.0, 586.0], [55.1, 601.0], [55.2, 614.0], [55.3, 629.0], [55.4, 646.0], [55.5, 664.0], [55.6, 674.0], [55.7, 690.0], [55.8, 710.0], [55.9, 732.0], [56.0, 742.0], [56.1, 758.0], [56.2, 786.0], [56.3, 807.0], [56.4, 821.0], [56.5, 844.0], [56.6, 853.0], [56.7, 867.0], [56.8, 880.0], [56.9, 891.0], [57.0, 901.0], [57.1, 912.0], [57.2, 927.0], [57.3, 946.0], [57.4, 961.0], [57.5, 977.0], [57.6, 989.0], [57.7, 1000.0], [57.8, 1011.0], [57.9, 1026.0], [58.0, 1035.0], [58.1, 1047.0], [58.2, 1054.0], [58.3, 1067.0], [58.4, 1079.0], [58.5, 1091.0], [58.6, 1100.0], [58.7, 1106.0], [58.8, 1116.0], [58.9, 1125.0], [59.0, 1134.0], [59.1, 1142.0], [59.2, 1152.0], [59.3, 1162.0], [59.4, 1171.0], [59.5, 1182.0], [59.6, 1192.0], [59.7, 1196.0], [59.8, 1204.0], [59.9, 1211.0], [60.0, 1221.0], [60.1, 1233.0], [60.2, 1246.0], [60.3, 1257.0], [60.4, 1263.0], [60.5, 1274.0], [60.6, 1285.0], [60.7, 1302.0], [60.8, 1314.0], [60.9, 1325.0], [61.0, 1332.0], [61.1, 1340.0], [61.2, 1346.0], [61.3, 1356.0], [61.4, 1366.0], [61.5, 1378.0], [61.6, 1388.0], [61.7, 1399.0], [61.8, 1408.0], [61.9, 1420.0], [62.0, 1430.0], [62.1, 1440.0], [62.2, 1445.0], [62.3, 1453.0], [62.4, 1462.0], [62.5, 1469.0], [62.6, 1473.0], [62.7, 1487.0], [62.8, 1493.0], [62.9, 1499.0], [63.0, 1507.0], [63.1, 1513.0], [63.2, 1526.0], [63.3, 1532.0], [63.4, 1537.0], [63.5, 1544.0], [63.6, 1548.0], [63.7, 1555.0], [63.8, 1567.0], [63.9, 1574.0], [64.0, 1580.0], [64.1, 1587.0], [64.2, 1596.0], [64.3, 1608.0], [64.4, 1616.0], [64.5, 1622.0], [64.6, 1628.0], [64.7, 1633.0], [64.8, 1640.0], [64.9, 1646.0], [65.0, 1653.0], [65.1, 1663.0], [65.2, 1672.0], [65.3, 1676.0], [65.4, 1684.0], [65.5, 1689.0], [65.6, 1695.0], [65.7, 1700.0], [65.8, 1708.0], [65.9, 1714.0], [66.0, 1723.0], [66.1, 1731.0], [66.2, 1738.0], [66.3, 1746.0], [66.4, 1750.0], [66.5, 1755.0], [66.6, 1759.0], [66.7, 1768.0], [66.8, 1772.0], [66.9, 1778.0], [67.0, 1784.0], [67.1, 1789.0], [67.2, 1794.0], [67.3, 1798.0], [67.4, 1806.0], [67.5, 1813.0], [67.6, 1819.0], [67.7, 1825.0], [67.8, 1834.0], [67.9, 1838.0], [68.0, 1843.0], [68.1, 1850.0], [68.2, 1855.0], [68.3, 1862.0], [68.4, 1869.0], [68.5, 1874.0], [68.6, 1879.0], [68.7, 1884.0], [68.8, 1890.0], [68.9, 1894.0], [69.0, 1899.0], [69.1, 1908.0], [69.2, 1913.0], [69.3, 1920.0], [69.4, 1926.0], [69.5, 1933.0], [69.6, 1939.0], [69.7, 1946.0], [69.8, 1950.0], [69.9, 1956.0], [70.0, 1961.0], [70.1, 1965.0], [70.2, 1972.0], [70.3, 1977.0], [70.4, 1982.0], [70.5, 1985.0], [70.6, 1987.0], [70.7, 1993.0], [70.8, 1998.0], [70.9, 2000.0], [71.0, 2006.0], [71.1, 2011.0], [71.2, 2015.0], [71.3, 2018.0], [71.4, 2023.0], [71.5, 2026.0], [71.6, 2029.0], [71.7, 2033.0], [71.8, 2037.0], [71.9, 2042.0], [72.0, 2046.0], [72.1, 2050.0], [72.2, 2053.0], [72.3, 2058.0], [72.4, 2063.0], [72.5, 2068.0], [72.6, 2072.0], [72.7, 2074.0], [72.8, 2079.0], [72.9, 2083.0], [73.0, 2086.0], [73.1, 2089.0], [73.2, 2094.0], [73.3, 2098.0], [73.4, 2102.0], [73.5, 2105.0], [73.6, 2109.0], [73.7, 2113.0], [73.8, 2116.0], [73.9, 2120.0], [74.0, 2125.0], [74.1, 2128.0], [74.2, 2132.0], [74.3, 2136.0], [74.4, 2140.0], [74.5, 2144.0], [74.6, 2148.0], [74.7, 2153.0], [74.8, 2156.0], [74.9, 2160.0], [75.0, 2164.0], [75.1, 2169.0], [75.2, 2172.0], [75.3, 2177.0], [75.4, 2181.0], [75.5, 2184.0], [75.6, 2188.0], [75.7, 2191.0], [75.8, 2194.0], [75.9, 2198.0], [76.0, 2200.0], [76.1, 2203.0], [76.2, 2206.0], [76.3, 2209.0], [76.4, 2213.0], [76.5, 2216.0], [76.6, 2219.0], [76.7, 2223.0], [76.8, 2226.0], [76.9, 2228.0], [77.0, 2232.0], [77.1, 2234.0], [77.2, 2237.0], [77.3, 2241.0], [77.4, 2244.0], [77.5, 2250.0], [77.6, 2252.0], [77.7, 2254.0], [77.8, 2259.0], [77.9, 2263.0], [78.0, 2266.0], [78.1, 2272.0], [78.2, 2275.0], [78.3, 2280.0], [78.4, 2284.0], [78.5, 2287.0], [78.6, 2290.0], [78.7, 2293.0], [78.8, 2296.0], [78.9, 2300.0], [79.0, 2304.0], [79.1, 2307.0], [79.2, 2309.0], [79.3, 2312.0], [79.4, 2315.0], [79.5, 2319.0], [79.6, 2323.0], [79.7, 2326.0], [79.8, 2329.0], [79.9, 2332.0], [80.0, 2337.0], [80.1, 2340.0], [80.2, 2343.0], [80.3, 2346.0], [80.4, 2349.0], [80.5, 2352.0], [80.6, 2355.0], [80.7, 2358.0], [80.8, 2361.0], [80.9, 2363.0], [81.0, 2366.0], [81.1, 2369.0], [81.2, 2371.0], [81.3, 2375.0], [81.4, 2379.0], [81.5, 2381.0], [81.6, 2384.0], [81.7, 2387.0], [81.8, 2391.0], [81.9, 2395.0], [82.0, 2399.0], [82.1, 2404.0], [82.2, 2407.0], [82.3, 2411.0], [82.4, 2413.0], [82.5, 2417.0], [82.6, 2421.0], [82.7, 2426.0], [82.8, 2430.0], [82.9, 2432.0], [83.0, 2437.0], [83.1, 2440.0], [83.2, 2443.0], [83.3, 2449.0], [83.4, 2452.0], [83.5, 2457.0], [83.6, 2461.0], [83.7, 2466.0], [83.8, 2470.0], [83.9, 2473.0], [84.0, 2477.0], [84.1, 2480.0], [84.2, 2483.0], [84.3, 2487.0], [84.4, 2490.0], [84.5, 2495.0], [84.6, 2498.0], [84.7, 2503.0], [84.8, 2506.0], [84.9, 2511.0], [85.0, 2513.0], [85.1, 2518.0], [85.2, 2522.0], [85.3, 2527.0], [85.4, 2530.0], [85.5, 2534.0], [85.6, 2538.0], [85.7, 2541.0], [85.8, 2545.0], [85.9, 2549.0], [86.0, 2551.0], [86.1, 2556.0], [86.2, 2559.0], [86.3, 2562.0], [86.4, 2566.0], [86.5, 2570.0], [86.6, 2574.0], [86.7, 2577.0], [86.8, 2582.0], [86.9, 2588.0], [87.0, 2592.0], [87.1, 2596.0], [87.2, 2600.0], [87.3, 2605.0], [87.4, 2611.0], [87.5, 2615.0], [87.6, 2620.0], [87.7, 2623.0], [87.8, 2628.0], [87.9, 2634.0], [88.0, 2639.0], [88.1, 2643.0], [88.2, 2646.0], [88.3, 2650.0], [88.4, 2655.0], [88.5, 2660.0], [88.6, 2665.0], [88.7, 2671.0], [88.8, 2679.0], [88.9, 2683.0], [89.0, 2687.0], [89.1, 2690.0], [89.2, 2695.0], [89.3, 2699.0], [89.4, 2703.0], [89.5, 2708.0], [89.6, 2713.0], [89.7, 2720.0], [89.8, 2725.0], [89.9, 2732.0], [90.0, 2736.0], [90.1, 2741.0], [90.2, 2747.0], [90.3, 2751.0], [90.4, 2756.0], [90.5, 2759.0], [90.6, 2768.0], [90.7, 2774.0], [90.8, 2780.0], [90.9, 2788.0], [91.0, 2795.0], [91.1, 2802.0], [91.2, 2808.0], [91.3, 2818.0], [91.4, 2826.0], [91.5, 2831.0], [91.6, 2838.0], [91.7, 2842.0], [91.8, 2846.0], [91.9, 2854.0], [92.0, 2862.0], [92.1, 2872.0], [92.2, 2878.0], [92.3, 2885.0], [92.4, 2893.0], [92.5, 2901.0], [92.6, 2907.0], [92.7, 2915.0], [92.8, 2921.0], [92.9, 2931.0], [93.0, 2938.0], [93.1, 2944.0], [93.2, 2954.0], [93.3, 2964.0], [93.4, 2972.0], [93.5, 2980.0], [93.6, 2991.0], [93.7, 2999.0], [93.8, 3006.0], [93.9, 3016.0], [94.0, 3023.0], [94.1, 3032.0], [94.2, 3041.0], [94.3, 3049.0], [94.4, 3058.0], [94.5, 3072.0], [94.6, 3088.0], [94.7, 3101.0], [94.8, 3109.0], [94.9, 3121.0], [95.0, 3136.0], [95.1, 3144.0], [95.2, 3156.0], [95.3, 3171.0], [95.4, 3182.0], [95.5, 3192.0], [95.6, 3200.0], [95.7, 3214.0], [95.8, 3227.0], [95.9, 3238.0], [96.0, 3249.0], [96.1, 3262.0], [96.2, 3277.0], [96.3, 3294.0], [96.4, 3315.0], [96.5, 3328.0], [96.6, 3343.0], [96.7, 3360.0], [96.8, 3379.0], [96.9, 3388.0], [97.0, 3401.0], [97.1, 3412.0], [97.2, 3428.0], [97.3, 3452.0], [97.4, 3483.0], [97.5, 3503.0], [97.6, 3528.0], [97.7, 3549.0], [97.8, 3567.0], [97.9, 3591.0], [98.0, 3620.0], [98.1, 3644.0], [98.2, 3678.0], [98.3, 3713.0], [98.4, 3760.0], [98.5, 3791.0], [98.6, 3815.0], [98.7, 3865.0], [98.8, 3917.0], [98.9, 3968.0], [99.0, 4004.0], [99.1, 4057.0], [99.2, 4135.0], [99.3, 4249.0], [99.4, 4379.0], [99.5, 4532.0], [99.6, 4734.0], [99.7, 4935.0], [99.8, 5231.0], [99.9, 5610.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 161.0], [0.1, 161.0], [0.2, 161.0], [0.3, 161.0], [0.4, 161.0], [0.5, 161.0], [0.6, 161.0], [0.7, 164.0], [0.8, 164.0], [0.9, 164.0], [1.0, 164.0], [1.1, 164.0], [1.2, 164.0], [1.3, 165.0], [1.4, 165.0], [1.5, 165.0], [1.6, 165.0], [1.7, 165.0], [1.8, 165.0], [1.9, 165.0], [2.0, 167.0], [2.1, 167.0], [2.2, 167.0], [2.3, 167.0], [2.4, 167.0], [2.5, 167.0], [2.6, 167.0], [2.7, 167.0], [2.8, 167.0], [2.9, 167.0], [3.0, 167.0], [3.1, 167.0], [3.2, 167.0], [3.3, 169.0], [3.4, 169.0], [3.5, 169.0], [3.6, 169.0], [3.7, 169.0], [3.8, 169.0], [3.9, 178.0], [4.0, 178.0], [4.1, 178.0], [4.2, 178.0], [4.3, 178.0], [4.4, 178.0], [4.5, 178.0], [4.6, 182.0], [4.7, 182.0], [4.8, 182.0], [4.9, 182.0], [5.0, 182.0], [5.1, 182.0], [5.2, 182.0], [5.3, 182.0], [5.4, 182.0], [5.5, 182.0], [5.6, 182.0], [5.7, 182.0], [5.8, 182.0], [5.9, 186.0], [6.0, 186.0], [6.1, 186.0], [6.2, 186.0], [6.3, 186.0], [6.4, 186.0], [6.5, 189.0], [6.6, 189.0], [6.7, 189.0], [6.8, 189.0], [6.9, 189.0], [7.0, 189.0], [7.1, 191.0], [7.2, 191.0], [7.3, 191.0], [7.4, 191.0], [7.5, 191.0], [7.6, 191.0], [7.7, 191.0], [7.8, 195.0], [7.9, 195.0], [8.0, 195.0], [8.1, 195.0], [8.2, 195.0], [8.3, 195.0], [8.4, 202.0], [8.5, 202.0], [8.6, 202.0], [8.7, 202.0], [8.8, 202.0], [8.9, 202.0], [9.0, 202.0], [9.1, 206.0], [9.2, 206.0], [9.3, 206.0], [9.4, 206.0], [9.5, 206.0], [9.6, 206.0], [9.7, 212.0], [9.8, 212.0], [9.9, 212.0], [10.0, 212.0], [10.1, 212.0], [10.2, 212.0], [10.3, 212.0], [10.4, 214.0], [10.5, 214.0], [10.6, 214.0], [10.7, 214.0], [10.8, 214.0], [10.9, 214.0], [11.0, 222.0], [11.1, 222.0], [11.2, 222.0], [11.3, 222.0], [11.4, 222.0], [11.5, 222.0], [11.6, 222.0], [11.7, 235.0], [11.8, 235.0], [11.9, 235.0], [12.0, 235.0], [12.1, 235.0], [12.2, 235.0], [12.3, 237.0], [12.4, 237.0], [12.5, 237.0], [12.6, 237.0], [12.7, 237.0], [12.8, 237.0], [12.9, 237.0], [13.0, 250.0], [13.1, 250.0], [13.2, 250.0], [13.3, 250.0], [13.4, 250.0], [13.5, 250.0], [13.6, 253.0], [13.7, 253.0], [13.8, 253.0], [13.9, 253.0], [14.0, 253.0], [14.1, 253.0], [14.2, 270.0], [14.3, 270.0], [14.4, 270.0], [14.5, 270.0], [14.6, 270.0], [14.7, 270.0], [14.8, 270.0], [14.9, 271.0], [15.0, 271.0], [15.1, 271.0], [15.2, 271.0], [15.3, 271.0], [15.4, 271.0], [15.5, 286.0], [15.6, 286.0], [15.7, 286.0], [15.8, 286.0], [15.9, 286.0], [16.0, 286.0], [16.1, 286.0], [16.2, 296.0], [16.3, 296.0], [16.4, 296.0], [16.5, 296.0], [16.6, 296.0], [16.7, 296.0], [16.8, 310.0], [16.9, 310.0], [17.0, 310.0], [17.1, 310.0], [17.2, 310.0], [17.3, 310.0], [17.4, 310.0], [17.5, 313.0], [17.6, 313.0], [17.7, 313.0], [17.8, 313.0], [17.9, 313.0], [18.0, 313.0], [18.1, 340.0], [18.2, 340.0], [18.3, 340.0], [18.4, 340.0], [18.5, 340.0], [18.6, 340.0], [18.7, 340.0], [18.8, 346.0], [18.9, 346.0], [19.0, 346.0], [19.1, 346.0], [19.2, 346.0], [19.3, 346.0], [19.4, 361.0], [19.5, 361.0], [19.6, 361.0], [19.7, 361.0], [19.8, 361.0], [19.9, 361.0], [20.0, 367.0], [20.1, 367.0], [20.2, 367.0], [20.3, 367.0], [20.4, 367.0], [20.5, 367.0], [20.6, 367.0], [20.7, 372.0], [20.8, 372.0], [20.9, 372.0], [21.0, 372.0], [21.1, 372.0], [21.2, 372.0], [21.3, 389.0], [21.4, 389.0], [21.5, 389.0], [21.6, 389.0], [21.7, 389.0], [21.8, 389.0], [21.9, 389.0], [22.0, 396.0], [22.1, 396.0], [22.2, 396.0], [22.3, 396.0], [22.4, 396.0], [22.5, 396.0], [22.6, 412.0], [22.7, 412.0], [22.8, 412.0], [22.9, 412.0], [23.0, 412.0], [23.1, 412.0], [23.2, 412.0], [23.3, 427.0], [23.4, 427.0], [23.5, 427.0], [23.6, 427.0], [23.7, 427.0], [23.8, 427.0], [23.9, 429.0], [24.0, 429.0], [24.1, 429.0], [24.2, 429.0], [24.3, 429.0], [24.4, 429.0], [24.5, 429.0], [24.6, 434.0], [24.7, 434.0], [24.8, 434.0], [24.9, 434.0], [25.0, 434.0], [25.1, 434.0], [25.2, 435.0], [25.3, 435.0], [25.4, 435.0], [25.5, 435.0], [25.6, 435.0], [25.7, 435.0], [25.8, 435.0], [25.9, 441.0], [26.0, 441.0], [26.1, 441.0], [26.2, 441.0], [26.3, 441.0], [26.4, 441.0], [26.5, 448.0], [26.6, 448.0], [26.7, 448.0], [26.8, 448.0], [26.9, 448.0], [27.0, 448.0], [27.1, 448.0], [27.2, 448.0], [27.3, 448.0], [27.4, 448.0], [27.5, 448.0], [27.6, 448.0], [27.7, 448.0], [27.8, 452.0], [27.9, 452.0], [28.0, 452.0], [28.1, 452.0], [28.2, 452.0], [28.3, 452.0], [28.4, 463.0], [28.5, 463.0], [28.6, 463.0], [28.7, 463.0], [28.8, 463.0], [28.9, 463.0], [29.0, 463.0], [29.1, 464.0], [29.2, 464.0], [29.3, 464.0], [29.4, 464.0], [29.5, 464.0], [29.6, 464.0], [29.7, 469.0], [29.8, 469.0], [29.9, 469.0], [30.0, 469.0], [30.1, 469.0], [30.2, 469.0], [30.3, 469.0], [30.4, 471.0], [30.5, 471.0], [30.6, 471.0], [30.7, 471.0], [30.8, 471.0], [30.9, 471.0], [31.0, 491.0], [31.1, 491.0], [31.2, 491.0], [31.3, 491.0], [31.4, 491.0], [31.5, 491.0], [31.6, 491.0], [31.7, 496.0], [31.8, 496.0], [31.9, 496.0], [32.0, 496.0], [32.1, 496.0], [32.2, 496.0], [32.3, 496.0], [32.4, 496.0], [32.5, 496.0], [32.6, 496.0], [32.7, 496.0], [32.8, 496.0], [32.9, 496.0], [33.0, 501.0], [33.1, 501.0], [33.2, 501.0], [33.3, 501.0], [33.4, 501.0], [33.5, 501.0], [33.6, 503.0], [33.7, 503.0], [33.8, 503.0], [33.9, 503.0], [34.0, 503.0], [34.1, 503.0], [34.2, 507.0], [34.3, 507.0], [34.4, 507.0], [34.5, 507.0], [34.6, 507.0], [34.7, 507.0], [34.8, 507.0], [34.9, 509.0], [35.0, 509.0], [35.1, 509.0], [35.2, 509.0], [35.3, 509.0], [35.4, 509.0], [35.5, 510.0], [35.6, 510.0], [35.7, 510.0], [35.8, 510.0], [35.9, 510.0], [36.0, 510.0], [36.1, 510.0], [36.2, 511.0], [36.3, 511.0], [36.4, 511.0], [36.5, 511.0], [36.6, 511.0], [36.7, 511.0], [36.8, 514.0], [36.9, 514.0], [37.0, 514.0], [37.1, 514.0], [37.2, 514.0], [37.3, 514.0], [37.4, 514.0], [37.5, 515.0], [37.6, 515.0], [37.7, 515.0], [37.8, 515.0], [37.9, 515.0], [38.0, 515.0], [38.1, 525.0], [38.2, 525.0], [38.3, 525.0], [38.4, 525.0], [38.5, 525.0], [38.6, 525.0], [38.7, 525.0], [38.8, 530.0], [38.9, 530.0], [39.0, 530.0], [39.1, 530.0], [39.2, 530.0], [39.3, 530.0], [39.4, 535.0], [39.5, 535.0], [39.6, 535.0], [39.7, 535.0], [39.8, 535.0], [39.9, 535.0], [40.0, 535.0], [40.1, 546.0], [40.2, 546.0], [40.3, 546.0], [40.4, 546.0], [40.5, 546.0], [40.6, 546.0], [40.7, 546.0], [40.8, 546.0], [40.9, 546.0], [41.0, 546.0], [41.1, 546.0], [41.2, 546.0], [41.3, 547.0], [41.4, 547.0], [41.5, 547.0], [41.6, 547.0], [41.7, 547.0], [41.8, 547.0], [41.9, 547.0], [42.0, 548.0], [42.1, 548.0], [42.2, 548.0], [42.3, 548.0], [42.4, 548.0], [42.5, 548.0], [42.6, 548.0], [42.7, 548.0], [42.8, 548.0], [42.9, 548.0], [43.0, 548.0], [43.1, 548.0], [43.2, 548.0], [43.3, 553.0], [43.4, 553.0], [43.5, 553.0], [43.6, 553.0], [43.7, 553.0], [43.8, 553.0], [43.9, 554.0], [44.0, 554.0], [44.1, 554.0], [44.2, 554.0], [44.3, 554.0], [44.4, 554.0], [44.5, 554.0], [44.6, 555.0], [44.7, 555.0], [44.8, 555.0], [44.9, 555.0], [45.0, 555.0], [45.1, 555.0], [45.2, 559.0], [45.3, 559.0], [45.4, 559.0], [45.5, 559.0], [45.6, 559.0], [45.7, 559.0], [45.8, 559.0], [45.9, 560.0], [46.0, 560.0], [46.1, 560.0], [46.2, 560.0], [46.3, 560.0], [46.4, 560.0], [46.5, 561.0], [46.6, 561.0], [46.7, 561.0], [46.8, 561.0], [46.9, 561.0], [47.0, 561.0], [47.1, 566.0], [47.2, 566.0], [47.3, 566.0], [47.4, 566.0], [47.5, 566.0], [47.6, 566.0], [47.7, 566.0], [47.8, 571.0], [47.9, 571.0], [48.0, 571.0], [48.1, 571.0], [48.2, 571.0], [48.3, 571.0], [48.4, 572.0], [48.5, 572.0], [48.6, 572.0], [48.7, 572.0], [48.8, 572.0], [48.9, 572.0], [49.0, 572.0], [49.1, 574.0], [49.2, 574.0], [49.3, 574.0], [49.4, 574.0], [49.5, 574.0], [49.6, 574.0], [49.7, 585.0], [49.8, 585.0], [49.9, 585.0], [50.0, 585.0], [50.1, 585.0], [50.2, 585.0], [50.3, 585.0], [50.4, 587.0], [50.5, 587.0], [50.6, 587.0], [50.7, 587.0], [50.8, 587.0], [50.9, 587.0], [51.0, 591.0], [51.1, 591.0], [51.2, 591.0], [51.3, 591.0], [51.4, 591.0], [51.5, 591.0], [51.6, 591.0], [51.7, 595.0], [51.8, 595.0], [51.9, 595.0], [52.0, 595.0], [52.1, 595.0], [52.2, 595.0], [52.3, 598.0], [52.4, 598.0], [52.5, 598.0], [52.6, 598.0], [52.7, 598.0], [52.8, 598.0], [52.9, 598.0], [53.0, 600.0], [53.1, 600.0], [53.2, 600.0], [53.3, 600.0], [53.4, 600.0], [53.5, 600.0], [53.6, 603.0], [53.7, 603.0], [53.8, 603.0], [53.9, 603.0], [54.0, 603.0], [54.1, 603.0], [54.2, 614.0], [54.3, 614.0], [54.4, 614.0], [54.5, 614.0], [54.6, 614.0], [54.7, 614.0], [54.8, 614.0], [54.9, 615.0], [55.0, 615.0], [55.1, 615.0], [55.2, 615.0], [55.3, 615.0], [55.4, 615.0], [55.5, 618.0], [55.6, 618.0], [55.7, 618.0], [55.8, 618.0], [55.9, 618.0], [56.0, 618.0], [56.1, 618.0], [56.2, 618.0], [56.3, 618.0], [56.4, 618.0], [56.5, 618.0], [56.6, 618.0], [56.7, 618.0], [56.8, 651.0], [56.9, 651.0], [57.0, 651.0], [57.1, 651.0], [57.2, 651.0], [57.3, 651.0], [57.4, 651.0], [57.5, 658.0], [57.6, 658.0], [57.7, 658.0], [57.8, 658.0], [57.9, 658.0], [58.0, 658.0], [58.1, 658.0], [58.2, 658.0], [58.3, 658.0], [58.4, 658.0], [58.5, 658.0], [58.6, 658.0], [58.7, 658.0], [58.8, 679.0], [58.9, 679.0], [59.0, 679.0], [59.1, 679.0], [59.2, 679.0], [59.3, 679.0], [59.4, 683.0], [59.5, 683.0], [59.6, 683.0], [59.7, 683.0], [59.8, 683.0], [59.9, 683.0], [60.0, 683.0], [60.1, 707.0], [60.2, 707.0], [60.3, 707.0], [60.4, 707.0], [60.5, 707.0], [60.6, 707.0], [60.7, 707.0], [60.8, 707.0], [60.9, 707.0], [61.0, 707.0], [61.1, 707.0], [61.2, 707.0], [61.3, 709.0], [61.4, 709.0], [61.5, 709.0], [61.6, 709.0], [61.7, 709.0], [61.8, 709.0], [61.9, 709.0], [62.0, 733.0], [62.1, 733.0], [62.2, 733.0], [62.3, 733.0], [62.4, 733.0], [62.5, 733.0], [62.6, 750.0], [62.7, 750.0], [62.8, 750.0], [62.9, 750.0], [63.0, 750.0], [63.1, 750.0], [63.2, 750.0], [63.3, 753.0], [63.4, 753.0], [63.5, 753.0], [63.6, 753.0], [63.7, 753.0], [63.8, 753.0], [63.9, 768.0], [64.0, 768.0], [64.1, 768.0], [64.2, 768.0], [64.3, 768.0], [64.4, 768.0], [64.5, 768.0], [64.6, 782.0], [64.7, 782.0], [64.8, 782.0], [64.9, 782.0], [65.0, 782.0], [65.1, 782.0], [65.2, 784.0], [65.3, 784.0], [65.4, 784.0], [65.5, 784.0], [65.6, 784.0], [65.7, 784.0], [65.8, 784.0], [65.9, 870.0], [66.0, 870.0], [66.1, 870.0], [66.2, 870.0], [66.3, 870.0], [66.4, 870.0], [66.5, 878.0], [66.6, 878.0], [66.7, 878.0], [66.8, 878.0], [66.9, 878.0], [67.0, 878.0], [67.1, 882.0], [67.2, 882.0], [67.3, 882.0], [67.4, 882.0], [67.5, 882.0], [67.6, 882.0], [67.7, 882.0], [67.8, 891.0], [67.9, 891.0], [68.0, 891.0], [68.1, 891.0], [68.2, 891.0], [68.3, 891.0], [68.4, 898.0], [68.5, 898.0], [68.6, 898.0], [68.7, 898.0], [68.8, 898.0], [68.9, 898.0], [69.0, 898.0], [69.1, 914.0], [69.2, 914.0], [69.3, 914.0], [69.4, 914.0], [69.5, 914.0], [69.6, 914.0], [69.7, 916.0], [69.8, 916.0], [69.9, 916.0], [70.0, 916.0], [70.1, 916.0], [70.2, 916.0], [70.3, 916.0], [70.4, 933.0], [70.5, 933.0], [70.6, 933.0], [70.7, 933.0], [70.8, 933.0], [70.9, 933.0], [71.0, 960.0], [71.1, 960.0], [71.2, 960.0], [71.3, 960.0], [71.4, 960.0], [71.5, 960.0], [71.6, 960.0], [71.7, 964.0], [71.8, 964.0], [71.9, 964.0], [72.0, 964.0], [72.1, 964.0], [72.2, 964.0], [72.3, 982.0], [72.4, 982.0], [72.5, 982.0], [72.6, 982.0], [72.7, 982.0], [72.8, 982.0], [72.9, 982.0], [73.0, 984.0], [73.1, 984.0], [73.2, 984.0], [73.3, 984.0], [73.4, 984.0], [73.5, 984.0], [73.6, 992.0], [73.7, 992.0], [73.8, 992.0], [73.9, 992.0], [74.0, 992.0], [74.1, 992.0], [74.2, 993.0], [74.3, 993.0], [74.4, 993.0], [74.5, 993.0], [74.6, 993.0], [74.7, 993.0], [74.8, 993.0], [74.9, 994.0], [75.0, 994.0], [75.1, 994.0], [75.2, 994.0], [75.3, 994.0], [75.4, 994.0], [75.5, 1001.0], [75.6, 1001.0], [75.7, 1001.0], [75.8, 1001.0], [75.9, 1001.0], [76.0, 1001.0], [76.1, 1001.0], [76.2, 1011.0], [76.3, 1011.0], [76.4, 1011.0], [76.5, 1011.0], [76.6, 1011.0], [76.7, 1011.0], [76.8, 1047.0], [76.9, 1047.0], [77.0, 1047.0], [77.1, 1047.0], [77.2, 1047.0], [77.3, 1047.0], [77.4, 1047.0], [77.5, 1053.0], [77.6, 1053.0], [77.7, 1053.0], [77.8, 1053.0], [77.9, 1053.0], [78.0, 1053.0], [78.1, 1113.0], [78.2, 1113.0], [78.3, 1113.0], [78.4, 1113.0], [78.5, 1113.0], [78.6, 1113.0], [78.7, 1113.0], [78.8, 1120.0], [78.9, 1120.0], [79.0, 1120.0], [79.1, 1120.0], [79.2, 1120.0], [79.3, 1120.0], [79.4, 1147.0], [79.5, 1147.0], [79.6, 1147.0], [79.7, 1147.0], [79.8, 1147.0], [79.9, 1147.0], [80.0, 1205.0], [80.1, 1205.0], [80.2, 1205.0], [80.3, 1205.0], [80.4, 1205.0], [80.5, 1205.0], [80.6, 1205.0], [80.7, 1210.0], [80.8, 1210.0], [80.9, 1210.0], [81.0, 1210.0], [81.1, 1210.0], [81.2, 1210.0], [81.3, 1229.0], [81.4, 1229.0], [81.5, 1229.0], [81.6, 1229.0], [81.7, 1229.0], [81.8, 1229.0], [81.9, 1229.0], [82.0, 1253.0], [82.1, 1253.0], [82.2, 1253.0], [82.3, 1253.0], [82.4, 1253.0], [82.5, 1253.0], [82.6, 1267.0], [82.7, 1267.0], [82.8, 1267.0], [82.9, 1267.0], [83.0, 1267.0], [83.1, 1267.0], [83.2, 1267.0], [83.3, 1297.0], [83.4, 1297.0], [83.5, 1297.0], [83.6, 1297.0], [83.7, 1297.0], [83.8, 1297.0], [83.9, 1340.0], [84.0, 1340.0], [84.1, 1340.0], [84.2, 1340.0], [84.3, 1340.0], [84.4, 1340.0], [84.5, 1340.0], [84.6, 1406.0], [84.7, 1406.0], [84.8, 1406.0], [84.9, 1406.0], [85.0, 1406.0], [85.1, 1406.0], [85.2, 1410.0], [85.3, 1410.0], [85.4, 1410.0], [85.5, 1410.0], [85.6, 1410.0], [85.7, 1410.0], [85.8, 1410.0], [85.9, 1436.0], [86.0, 1436.0], [86.1, 1436.0], [86.2, 1436.0], [86.3, 1436.0], [86.4, 1436.0], [86.5, 1501.0], [86.6, 1501.0], [86.7, 1501.0], [86.8, 1501.0], [86.9, 1501.0], [87.0, 1501.0], [87.1, 1526.0], [87.2, 1526.0], [87.3, 1526.0], [87.4, 1526.0], [87.5, 1526.0], [87.6, 1526.0], [87.7, 1526.0], [87.8, 1572.0], [87.9, 1572.0], [88.0, 1572.0], [88.1, 1572.0], [88.2, 1572.0], [88.3, 1572.0], [88.4, 1590.0], [88.5, 1590.0], [88.6, 1590.0], [88.7, 1590.0], [88.8, 1590.0], [88.9, 1590.0], [89.0, 1590.0], [89.1, 1630.0], [89.2, 1630.0], [89.3, 1630.0], [89.4, 1630.0], [89.5, 1630.0], [89.6, 1630.0], [89.7, 1796.0], [89.8, 1796.0], [89.9, 1796.0], [90.0, 1796.0], [90.1, 1796.0], [90.2, 1796.0], [90.3, 1796.0], [90.4, 1812.0], [90.5, 1812.0], [90.6, 1812.0], [90.7, 1812.0], [90.8, 1812.0], [90.9, 1812.0], [91.0, 1830.0], [91.1, 1830.0], [91.2, 1830.0], [91.3, 1830.0], [91.4, 1830.0], [91.5, 1830.0], [91.6, 1830.0], [91.7, 1848.0], [91.8, 1848.0], [91.9, 1848.0], [92.0, 1848.0], [92.1, 1848.0], [92.2, 1848.0], [92.3, 1865.0], [92.4, 1865.0], [92.5, 1865.0], [92.6, 1865.0], [92.7, 1865.0], [92.8, 1865.0], [92.9, 1865.0], [93.0, 1891.0], [93.1, 1891.0], [93.2, 1891.0], [93.3, 1891.0], [93.4, 1891.0], [93.5, 1891.0], [93.6, 1899.0], [93.7, 1899.0], [93.8, 1899.0], [93.9, 1899.0], [94.0, 1899.0], [94.1, 1899.0], [94.2, 1982.0], [94.3, 1982.0], [94.4, 1982.0], [94.5, 1982.0], [94.6, 1982.0], [94.7, 1982.0], [94.8, 1982.0], [94.9, 2036.0], [95.0, 2036.0], [95.1, 2036.0], [95.2, 2036.0], [95.3, 2036.0], [95.4, 2036.0], [95.5, 2092.0], [95.6, 2092.0], [95.7, 2092.0], [95.8, 2092.0], [95.9, 2092.0], [96.0, 2092.0], [96.1, 2092.0], [96.2, 2124.0], [96.3, 2124.0], [96.4, 2124.0], [96.5, 2124.0], [96.6, 2124.0], [96.7, 2124.0], [96.8, 2292.0], [96.9, 2292.0], [97.0, 2292.0], [97.1, 2292.0], [97.2, 2292.0], [97.3, 2292.0], [97.4, 2292.0], [97.5, 2363.0], [97.6, 2363.0], [97.7, 2363.0], [97.8, 2363.0], [97.9, 2363.0], [98.0, 2363.0], [98.1, 2438.0], [98.2, 2438.0], [98.3, 2438.0], [98.4, 2438.0], [98.5, 2438.0], [98.6, 2438.0], [98.7, 2438.0], [98.8, 2842.0], [98.9, 2842.0], [99.0, 2842.0], [99.1, 2842.0], [99.2, 2842.0], [99.3, 2842.0], [99.4, 3162.0], [99.5, 3162.0], [99.6, 3162.0], [99.7, 3162.0], [99.8, 3162.0], [99.9, 3162.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 2.0], [37.9, 2.0], [38.0, 2.0], [38.1, 2.0], [38.2, 2.0], [38.3, 2.0], [38.4, 2.0], [38.5, 2.0], [38.6, 2.0], [38.7, 2.0], [38.8, 2.0], [38.9, 2.0], [39.0, 2.0], [39.1, 2.0], [39.2, 2.0], [39.3, 2.0], [39.4, 2.0], [39.5, 2.0], [39.6, 2.0], [39.7, 2.0], [39.8, 2.0], [39.9, 2.0], [40.0, 2.0], [40.1, 2.0], [40.2, 2.0], [40.3, 2.0], [40.4, 2.0], [40.5, 2.0], [40.6, 2.0], [40.7, 2.0], [40.8, 2.0], [40.9, 2.0], [41.0, 2.0], [41.1, 2.0], [41.2, 2.0], [41.3, 2.0], [41.4, 2.0], [41.5, 2.0], [41.6, 2.0], [41.7, 2.0], [41.8, 2.0], [41.9, 3.0], [42.0, 3.0], [42.1, 3.0], [42.2, 3.0], [42.3, 3.0], [42.4, 3.0], [42.5, 3.0], [42.6, 3.0], [42.7, 3.0], [42.8, 4.0], [42.9, 4.0], [43.0, 4.0], [43.1, 4.0], [43.2, 4.0], [43.3, 4.0], [43.4, 4.0], [43.5, 4.0], [43.6, 4.0], [43.7, 4.0], [43.8, 5.0], [43.9, 5.0], [44.0, 5.0], [44.1, 6.0], [44.2, 6.0], [44.3, 8.0], [44.4, 10.0], [44.5, 13.0], [44.6, 17.0], [44.7, 29.0], [44.8, 39.0], [44.9, 42.0], [45.0, 44.0], [45.1, 46.0], [45.2, 47.0], [45.3, 49.0], [45.4, 50.0], [45.5, 52.0], [45.6, 53.0], [45.7, 55.0], [45.8, 57.0], [45.9, 59.0], [46.0, 60.0], [46.1, 62.0], [46.2, 63.0], [46.3, 66.0], [46.4, 69.0], [46.5, 71.0], [46.6, 73.0], [46.7, 75.0], [46.8, 78.0], [46.9, 79.0], [47.0, 82.0], [47.1, 84.0], [47.2, 86.0], [47.3, 88.0], [47.4, 92.0], [47.5, 95.0], [47.6, 98.0], [47.7, 100.0], [47.8, 102.0], [47.9, 103.0], [48.0, 108.0], [48.1, 110.0], [48.2, 113.0], [48.3, 116.0], [48.4, 119.0], [48.5, 122.0], [48.6, 124.0], [48.7, 129.0], [48.8, 133.0], [48.9, 136.0], [49.0, 140.0], [49.1, 143.0], [49.2, 148.0], [49.3, 151.0], [49.4, 155.0], [49.5, 159.0], [49.6, 164.0], [49.7, 172.0], [49.8, 179.0], [49.9, 190.0], [50.0, 226.0], [50.1, 254.0], [50.2, 275.0], [50.3, 312.0], [50.4, 330.0], [50.5, 357.0], [50.6, 385.0], [50.7, 412.0], [50.8, 438.0], [50.9, 463.0], [51.0, 489.0], [51.1, 512.0], [51.2, 535.0], [51.3, 546.0], [51.4, 560.0], [51.5, 576.0], [51.6, 592.0], [51.7, 607.0], [51.8, 617.0], [51.9, 636.0], [52.0, 648.0], [52.1, 663.0], [52.2, 683.0], [52.3, 696.0], [52.4, 710.0], [52.5, 731.0], [52.6, 743.0], [52.7, 758.0], [52.8, 771.0], [52.9, 781.0], [53.0, 789.0], [53.1, 805.0], [53.2, 818.0], [53.3, 829.0], [53.4, 844.0], [53.5, 858.0], [53.6, 871.0], [53.7, 879.0], [53.8, 892.0], [53.9, 899.0], [54.0, 908.0], [54.1, 913.0], [54.2, 926.0], [54.3, 938.0], [54.4, 947.0], [54.5, 956.0], [54.6, 966.0], [54.7, 974.0], [54.8, 985.0], [54.9, 995.0], [55.0, 1002.0], [55.1, 1012.0], [55.2, 1022.0], [55.3, 1032.0], [55.4, 1038.0], [55.5, 1051.0], [55.6, 1056.0], [55.7, 1062.0], [55.8, 1068.0], [55.9, 1073.0], [56.0, 1079.0], [56.1, 1087.0], [56.2, 1094.0], [56.3, 1103.0], [56.4, 1113.0], [56.5, 1125.0], [56.6, 1134.0], [56.7, 1145.0], [56.8, 1152.0], [56.9, 1162.0], [57.0, 1167.0], [57.1, 1177.0], [57.2, 1184.0], [57.3, 1191.0], [57.4, 1200.0], [57.5, 1210.0], [57.6, 1220.0], [57.7, 1231.0], [57.8, 1236.0], [57.9, 1246.0], [58.0, 1253.0], [58.1, 1259.0], [58.2, 1269.0], [58.3, 1275.0], [58.4, 1281.0], [58.5, 1289.0], [58.6, 1294.0], [58.7, 1302.0], [58.8, 1313.0], [58.9, 1320.0], [59.0, 1328.0], [59.1, 1337.0], [59.2, 1345.0], [59.3, 1354.0], [59.4, 1359.0], [59.5, 1365.0], [59.6, 1373.0], [59.7, 1384.0], [59.8, 1390.0], [59.9, 1394.0], [60.0, 1402.0], [60.1, 1407.0], [60.2, 1412.0], [60.3, 1418.0], [60.4, 1426.0], [60.5, 1434.0], [60.6, 1441.0], [60.7, 1452.0], [60.8, 1457.0], [60.9, 1472.0], [61.0, 1476.0], [61.1, 1481.0], [61.2, 1487.0], [61.3, 1495.0], [61.4, 1501.0], [61.5, 1506.0], [61.6, 1515.0], [61.7, 1522.0], [61.8, 1525.0], [61.9, 1531.0], [62.0, 1540.0], [62.1, 1545.0], [62.2, 1552.0], [62.3, 1560.0], [62.4, 1563.0], [62.5, 1574.0], [62.6, 1579.0], [62.7, 1585.0], [62.8, 1593.0], [62.9, 1597.0], [63.0, 1602.0], [63.1, 1612.0], [63.2, 1618.0], [63.3, 1623.0], [63.4, 1630.0], [63.5, 1638.0], [63.6, 1643.0], [63.7, 1651.0], [63.8, 1654.0], [63.9, 1659.0], [64.0, 1663.0], [64.1, 1669.0], [64.2, 1675.0], [64.3, 1684.0], [64.4, 1690.0], [64.5, 1698.0], [64.6, 1704.0], [64.7, 1710.0], [64.8, 1714.0], [64.9, 1720.0], [65.0, 1726.0], [65.1, 1734.0], [65.2, 1740.0], [65.3, 1748.0], [65.4, 1752.0], [65.5, 1758.0], [65.6, 1764.0], [65.7, 1772.0], [65.8, 1776.0], [65.9, 1784.0], [66.0, 1789.0], [66.1, 1794.0], [66.2, 1799.0], [66.3, 1807.0], [66.4, 1813.0], [66.5, 1818.0], [66.6, 1822.0], [66.7, 1828.0], [66.8, 1834.0], [66.9, 1838.0], [67.0, 1842.0], [67.1, 1846.0], [67.2, 1850.0], [67.3, 1858.0], [67.4, 1863.0], [67.5, 1866.0], [67.6, 1871.0], [67.7, 1876.0], [67.8, 1881.0], [67.9, 1888.0], [68.0, 1893.0], [68.1, 1897.0], [68.2, 1902.0], [68.3, 1906.0], [68.4, 1912.0], [68.5, 1917.0], [68.6, 1922.0], [68.7, 1926.0], [68.8, 1931.0], [68.9, 1936.0], [69.0, 1943.0], [69.1, 1949.0], [69.2, 1952.0], [69.3, 1956.0], [69.4, 1961.0], [69.5, 1966.0], [69.6, 1972.0], [69.7, 1975.0], [69.8, 1980.0], [69.9, 1985.0], [70.0, 1989.0], [70.1, 1994.0], [70.2, 2000.0], [70.3, 2003.0], [70.4, 2008.0], [70.5, 2014.0], [70.6, 2018.0], [70.7, 2021.0], [70.8, 2024.0], [70.9, 2027.0], [71.0, 2030.0], [71.1, 2033.0], [71.2, 2036.0], [71.3, 2039.0], [71.4, 2044.0], [71.5, 2048.0], [71.6, 2053.0], [71.7, 2058.0], [71.8, 2062.0], [71.9, 2066.0], [72.0, 2068.0], [72.1, 2071.0], [72.2, 2075.0], [72.3, 2080.0], [72.4, 2083.0], [72.5, 2086.0], [72.6, 2090.0], [72.7, 2093.0], [72.8, 2097.0], [72.9, 2102.0], [73.0, 2104.0], [73.1, 2107.0], [73.2, 2111.0], [73.3, 2116.0], [73.4, 2120.0], [73.5, 2125.0], [73.6, 2129.0], [73.7, 2132.0], [73.8, 2135.0], [73.9, 2139.0], [74.0, 2143.0], [74.1, 2149.0], [74.2, 2153.0], [74.3, 2156.0], [74.4, 2158.0], [74.5, 2163.0], [74.6, 2167.0], [74.7, 2170.0], [74.8, 2175.0], [74.9, 2180.0], [75.0, 2184.0], [75.1, 2187.0], [75.2, 2191.0], [75.3, 2195.0], [75.4, 2198.0], [75.5, 2203.0], [75.6, 2207.0], [75.7, 2211.0], [75.8, 2215.0], [75.9, 2219.0], [76.0, 2223.0], [76.1, 2225.0], [76.2, 2229.0], [76.3, 2234.0], [76.4, 2237.0], [76.5, 2242.0], [76.6, 2244.0], [76.7, 2248.0], [76.8, 2251.0], [76.9, 2255.0], [77.0, 2260.0], [77.1, 2264.0], [77.2, 2268.0], [77.3, 2271.0], [77.4, 2275.0], [77.5, 2279.0], [77.6, 2283.0], [77.7, 2287.0], [77.8, 2292.0], [77.9, 2295.0], [78.0, 2298.0], [78.1, 2304.0], [78.2, 2308.0], [78.3, 2310.0], [78.4, 2314.0], [78.5, 2317.0], [78.6, 2319.0], [78.7, 2323.0], [78.8, 2328.0], [78.9, 2334.0], [79.0, 2338.0], [79.1, 2342.0], [79.2, 2347.0], [79.3, 2351.0], [79.4, 2355.0], [79.5, 2359.0], [79.6, 2363.0], [79.7, 2366.0], [79.8, 2370.0], [79.9, 2374.0], [80.0, 2378.0], [80.1, 2381.0], [80.2, 2385.0], [80.3, 2391.0], [80.4, 2395.0], [80.5, 2400.0], [80.6, 2404.0], [80.7, 2409.0], [80.8, 2412.0], [80.9, 2415.0], [81.0, 2420.0], [81.1, 2423.0], [81.2, 2428.0], [81.3, 2431.0], [81.4, 2435.0], [81.5, 2438.0], [81.6, 2444.0], [81.7, 2449.0], [81.8, 2453.0], [81.9, 2457.0], [82.0, 2462.0], [82.1, 2466.0], [82.2, 2470.0], [82.3, 2474.0], [82.4, 2481.0], [82.5, 2488.0], [82.6, 2492.0], [82.7, 2495.0], [82.8, 2501.0], [82.9, 2505.0], [83.0, 2509.0], [83.1, 2515.0], [83.2, 2518.0], [83.3, 2523.0], [83.4, 2525.0], [83.5, 2529.0], [83.6, 2535.0], [83.7, 2538.0], [83.8, 2542.0], [83.9, 2546.0], [84.0, 2552.0], [84.1, 2555.0], [84.2, 2563.0], [84.3, 2566.0], [84.4, 2570.0], [84.5, 2575.0], [84.6, 2579.0], [84.7, 2583.0], [84.8, 2589.0], [84.9, 2596.0], [85.0, 2602.0], [85.1, 2608.0], [85.2, 2615.0], [85.3, 2623.0], [85.4, 2628.0], [85.5, 2633.0], [85.6, 2640.0], [85.7, 2644.0], [85.8, 2649.0], [85.9, 2653.0], [86.0, 2659.0], [86.1, 2664.0], [86.2, 2668.0], [86.3, 2674.0], [86.4, 2679.0], [86.5, 2687.0], [86.6, 2694.0], [86.7, 2699.0], [86.8, 2704.0], [86.9, 2710.0], [87.0, 2716.0], [87.1, 2721.0], [87.2, 2728.0], [87.3, 2734.0], [87.4, 2740.0], [87.5, 2745.0], [87.6, 2748.0], [87.7, 2753.0], [87.8, 2757.0], [87.9, 2763.0], [88.0, 2770.0], [88.1, 2775.0], [88.2, 2781.0], [88.3, 2787.0], [88.4, 2796.0], [88.5, 2801.0], [88.6, 2806.0], [88.7, 2813.0], [88.8, 2820.0], [88.9, 2828.0], [89.0, 2835.0], [89.1, 2840.0], [89.2, 2846.0], [89.3, 2852.0], [89.4, 2858.0], [89.5, 2870.0], [89.6, 2873.0], [89.7, 2880.0], [89.8, 2886.0], [89.9, 2892.0], [90.0, 2902.0], [90.1, 2918.0], [90.2, 2927.0], [90.3, 2940.0], [90.4, 2950.0], [90.5, 2958.0], [90.6, 2965.0], [90.7, 2970.0], [90.8, 2979.0], [90.9, 2988.0], [91.0, 2994.0], [91.1, 3008.0], [91.2, 3014.0], [91.3, 3022.0], [91.4, 3028.0], [91.5, 3039.0], [91.6, 3049.0], [91.7, 3062.0], [91.8, 3071.0], [91.9, 3078.0], [92.0, 3092.0], [92.1, 3102.0], [92.2, 3120.0], [92.3, 3131.0], [92.4, 3145.0], [92.5, 3155.0], [92.6, 3169.0], [92.7, 3182.0], [92.8, 3190.0], [92.9, 3205.0], [93.0, 3222.0], [93.1, 3233.0], [93.2, 3246.0], [93.3, 3259.0], [93.4, 3268.0], [93.5, 3281.0], [93.6, 3298.0], [93.7, 3312.0], [93.8, 3322.0], [93.9, 3340.0], [94.0, 3359.0], [94.1, 3379.0], [94.2, 3398.0], [94.3, 3411.0], [94.4, 3430.0], [94.5, 3447.0], [94.6, 3462.0], [94.7, 3483.0], [94.8, 3504.0], [94.9, 3537.0], [95.0, 3559.0], [95.1, 3581.0], [95.2, 3605.0], [95.3, 3636.0], [95.4, 3658.0], [95.5, 3683.0], [95.6, 3709.0], [95.7, 3736.0], [95.8, 3785.0], [95.9, 3807.0], [96.0, 3851.0], [96.1, 3886.0], [96.2, 3922.0], [96.3, 3975.0], [96.4, 4025.0], [96.5, 4086.0], [96.6, 4175.0], [96.7, 4234.0], [96.8, 4332.0], [96.9, 4441.0], [97.0, 4494.0], [97.1, 4638.0], [97.2, 4825.0], [97.3, 4992.0], [97.4, 5144.0], [97.5, 5306.0], [97.6, 5577.0], [97.7, 5959.0], [97.8, 6902.0], [97.9, 7229.0], [98.0, 8005.0], [98.1, 8008.0], [98.2, 12005.0], [98.3, 12006.0], [98.4, 12007.0], [98.5, 12007.0], [98.6, 16004.0], [98.7, 16005.0], [98.8, 16006.0], [98.9, 16007.0], [99.0, 20004.0], [99.1, 20004.0], [99.2, 20005.0], [99.3, 20005.0], [99.4, 20005.0], [99.5, 20005.0], [99.6, 20006.0], [99.7, 20006.0], [99.8, 20006.0], [99.9, 20006.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 7961.0, "series": [{"data": [[0.0, 7961.0], [600.0, 100.0], [700.0, 82.0], [800.0, 109.0], [900.0, 112.0], [1000.0, 138.0], [1100.0, 178.0], [1200.0, 148.0], [1300.0, 158.0], [1400.0, 186.0], [1500.0, 206.0], [1600.0, 227.0], [1700.0, 249.0], [1800.0, 264.0], [1900.0, 290.0], [2000.0, 378.0], [2100.0, 410.0], [2200.0, 455.0], [2300.0, 483.0], [2400.0, 405.0], [2500.0, 397.0], [2600.0, 328.0], [2700.0, 272.0], [2800.0, 220.0], [2900.0, 193.0], [3000.0, 149.0], [3100.0, 142.0], [3300.0, 105.0], [3200.0, 112.0], [3400.0, 75.0], [3500.0, 69.0], [3600.0, 54.0], [3700.0, 41.0], [3800.0, 33.0], [3900.0, 37.0], [4000.0, 25.0], [4100.0, 18.0], [4200.0, 11.0], [4300.0, 13.0], [4400.0, 10.0], [4500.0, 6.0], [4600.0, 7.0], [4800.0, 6.0], [4700.0, 10.0], [4900.0, 8.0], [5000.0, 3.0], [5100.0, 5.0], [5200.0, 8.0], [5300.0, 2.0], [5400.0, 4.0], [5600.0, 2.0], [5500.0, 4.0], [5700.0, 1.0], [5800.0, 1.0], [6000.0, 2.0], [5900.0, 3.0], [6100.0, 2.0], [6300.0, 1.0], [6400.0, 1.0], [6800.0, 1.0], [19400.0, 2.0], [100.0, 334.0], [200.0, 47.0], [300.0, 52.0], [400.0, 67.0], [500.0, 78.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[600.0, 11.0], [700.0, 9.0], [800.0, 5.0], [900.0, 10.0], [1000.0, 4.0], [1100.0, 3.0], [1200.0, 6.0], [1300.0, 1.0], [1400.0, 3.0], [1500.0, 4.0], [1600.0, 1.0], [100.0, 13.0], [1700.0, 1.0], [1800.0, 6.0], [1900.0, 1.0], [2000.0, 2.0], [2100.0, 1.0], [2300.0, 1.0], [2200.0, 1.0], [2400.0, 1.0], [2800.0, 1.0], [3100.0, 1.0], [200.0, 13.0], [300.0, 9.0], [400.0, 16.0], [500.0, 31.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 7393.0], [600.0, 102.0], [700.0, 118.0], [800.0, 130.0], [900.0, 161.0], [1000.0, 203.0], [1100.0, 174.0], [1200.0, 200.0], [1300.0, 201.0], [1400.0, 217.0], [1500.0, 244.0], [1600.0, 244.0], [1700.0, 261.0], [1800.0, 304.0], [1900.0, 314.0], [2000.0, 411.0], [2100.0, 401.0], [2300.0, 379.0], [2200.0, 406.0], [2400.0, 353.0], [2500.0, 341.0], [2600.0, 269.0], [2800.0, 235.0], [2700.0, 271.0], [2900.0, 163.0], [3000.0, 159.0], [3100.0, 128.0], [3300.0, 95.0], [3200.0, 114.0], [3400.0, 87.0], [3500.0, 59.0], [3600.0, 64.0], [3700.0, 43.0], [3800.0, 47.0], [3900.0, 31.0], [4000.0, 22.0], [4100.0, 22.0], [4200.0, 21.0], [4300.0, 14.0], [4400.0, 21.0], [4500.0, 10.0], [4600.0, 7.0], [4800.0, 11.0], [4700.0, 12.0], [4900.0, 6.0], [5100.0, 9.0], [5000.0, 12.0], [5300.0, 10.0], [5200.0, 7.0], [5400.0, 3.0], [5600.0, 3.0], [5500.0, 7.0], [5800.0, 5.0], [5700.0, 3.0], [6100.0, 3.0], [5900.0, 3.0], [6000.0, 1.0], [6300.0, 4.0], [6200.0, 4.0], [6600.0, 1.0], [6700.0, 2.0], [6900.0, 3.0], [7100.0, 8.0], [7000.0, 2.0], [7200.0, 5.0], [7300.0, 4.0], [7400.0, 2.0], [7500.0, 1.0], [7600.0, 1.0], [7800.0, 2.0], [7900.0, 2.0], [8000.0, 24.0], [8200.0, 1.0], [12000.0, 69.0], [16000.0, 52.0], [20000.0, 165.0], [100.0, 346.0], [200.0, 49.0], [300.0, 65.0], [400.0, 56.0], [500.0, 98.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2955.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 13876.0, "series": [{"data": [[0.0, 2973.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2955.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 11351.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 13876.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 28.307291666666668, "minX": 1.5854319E12, "maxY": 155.0, "series": [{"data": [[1.5854319E12, 93.0337837837837], [1.5854322E12, 155.0], [1.58543238E12, 155.0], [1.58543202E12, 155.0], [1.58543232E12, 155.0], [1.5854325E12, 128.8518418929821], [1.58543214E12, 155.0], [1.58543244E12, 155.0], [1.58543196E12, 154.96305953933089], [1.58543256E12, 28.307291666666668], [1.58543208E12, 155.0], [1.58543226E12, 155.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543256E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17.769230769230774, "minX": 1.0, "maxY": 2124.0, "series": [{"data": [[4.0, 62.333333333333336], [8.0, 45.0], [9.0, 52.0], [13.0, 59.25], [14.0, 55.85714285714286], [15.0, 73.8], [16.0, 51.0], [17.0, 91.8], [18.0, 62.0], [19.0, 48.666666666666664], [20.0, 50.5], [21.0, 61.0], [22.0, 66.0], [23.0, 53.00000000000001], [24.0, 58.25], [25.0, 48.5], [26.0, 54.333333333333336], [27.0, 82.0], [28.0, 67.0], [29.0, 76.5], [30.0, 52.4], [31.0, 58.57142857142858], [32.0, 76.9], [33.0, 64.0], [34.0, 89.0], [35.0, 88.42857142857142], [36.0, 77.5], [37.0, 50.6], [38.0, 57.8], [39.0, 59.111111111111114], [40.0, 335.92307692307696], [41.0, 166.16666666666669], [42.0, 113.66666666666667], [43.0, 92.0], [44.0, 102.42857142857143], [45.0, 88.5], [46.0, 84.0], [47.0, 97.0], [48.0, 93.5], [49.0, 72.0], [50.0, 101.16666666666667], [51.0, 87.625], [52.0, 90.66666666666667], [53.0, 117.0], [54.0, 532.6], [55.0, 188.41666666666663], [56.0, 97.8], [57.0, 70.2], [58.0, 112.25], [59.0, 156.57142857142856], [60.0, 84.33333333333333], [61.0, 93.0], [62.0, 1455.2], [63.0, 129.0], [64.0, 119.8], [65.0, 120.88888888888889], [66.0, 120.625], [67.0, 75.33333333333333], [68.0, 116.89999999999999], [69.0, 34.8125], [70.0, 55.91999999999999], [71.0, 52.0], [72.0, 44.000000000000014], [73.0, 46.25], [74.0, 22.06666666666667], [75.0, 38.599999999999994], [76.0, 49.333333333333336], [77.0, 101.71428571428572], [78.0, 109.25], [79.0, 63.41666666666668], [80.0, 94.60000000000001], [81.0, 98.8181818181818], [82.0, 43.58823529411763], [83.0, 33.230769230769226], [84.0, 41.47058823529413], [85.0, 27.499999999999996], [86.0, 264.49999999999994], [87.0, 78.31578947368422], [88.0, 267.3846153846154], [89.0, 53.826086956521735], [90.0, 38.235294117647065], [91.0, 96.7777777777778], [92.0, 82.43589743589743], [93.0, 150.61904761904765], [94.0, 332.08333333333337], [95.0, 356.1333333333333], [96.0, 227.33333333333331], [97.0, 392.74999999999994], [98.0, 545.2142857142858], [99.0, 640.0], [100.0, 399.4117647058823], [101.0, 63.2093023255814], [102.0, 421.1111111111111], [103.0, 322.8571428571429], [104.0, 270.6666666666666], [105.0, 251.33333333333337], [106.0, 102.63636363636365], [107.0, 118.1], [108.0, 69.875], [109.0, 41.699999999999996], [110.0, 245.69230769230768], [111.0, 27.406250000000007], [112.0, 26.499999999999993], [113.0, 55.42105263157895], [114.0, 88.20000000000002], [115.0, 127.07142857142858], [116.0, 58.12500000000001], [117.0, 107.46666666666668], [118.0, 70.8], [119.0, 65.3404255319149], [121.0, 304.95833333333326], [122.0, 437.33333333333337], [123.0, 211.14705882352942], [124.0, 774.4285714285713], [125.0, 544.4285714285714], [126.0, 801.0], [127.0, 756.125], [128.0, 531.25], [129.0, 330.02857142857147], [130.0, 475.2499999999999], [131.0, 484.29411764705884], [132.0, 305.72727272727275], [133.0, 109.57407407407406], [134.0, 363.69387755102036], [135.0, 776.842105263158], [136.0, 626.8461538461538], [137.0, 390.6666666666667], [138.0, 275.7272727272727], [139.0, 72.60416666666669], [140.0, 92.14285714285717], [141.0, 216.90909090909093], [142.0, 466.58620689655174], [143.0, 247.39999999999998], [144.0, 72.51063829787235], [145.0, 180.39393939393923], [146.0, 246.65217391304358], [147.0, 176.6315789473684], [148.0, 670.5714285714287], [149.0, 104.48648648648654], [150.0, 144.81538461538463], [151.0, 129.65714285714287], [152.0, 56.53061224489798], [153.0, 97.16568047337276], [154.0, 256.5609756097561], [155.0, 1191.6252422668408], [1.0, 51.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[147.61561290322672, 1022.7118064516131]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[9.0, 1739.333333333333], [10.0, 178.0], [11.0, 167.0], [12.0, 164.0], [13.0, 389.0], [14.0, 161.0], [15.0, 222.0], [16.0, 235.0], [17.0, 286.0], [18.0, 182.0], [19.0, 191.0], [20.0, 169.0], [21.0, 165.0], [22.0, 250.0], [23.0, 206.0], [24.0, 271.0], [25.0, 212.0], [26.0, 270.0], [27.0, 296.0], [28.0, 313.0], [29.0, 310.0], [30.0, 167.0], [31.0, 189.0], [32.0, 202.0], [33.0, 195.0], [34.0, 340.0], [35.0, 372.0], [36.0, 346.0], [37.0, 214.0], [38.0, 237.0], [39.0, 253.0], [40.0, 186.0], [41.0, 182.0], [43.0, 427.0], [44.0, 496.0], [45.0, 429.0], [46.0, 511.0], [47.0, 614.0], [48.0, 412.0], [49.0, 435.5], [51.0, 448.0], [52.0, 618.0], [53.0, 658.0], [54.0, 525.0], [55.0, 530.0], [56.0, 415.0], [58.0, 435.0], [59.0, 535.0], [60.0, 434.0], [61.0, 547.0], [62.0, 471.0], [63.0, 554.0], [64.0, 553.0], [65.0, 587.0], [66.0, 503.0], [67.0, 566.0], [68.0, 768.0], [69.0, 683.0], [70.0, 585.0], [71.0, 784.0], [72.0, 591.0], [73.0, 707.0], [74.0, 618.0], [75.0, 603.0], [76.0, 507.0], [77.0, 515.0], [78.0, 615.0], [79.0, 548.0], [80.0, 464.0], [81.0, 469.0], [82.0, 651.0], [83.0, 571.0], [84.0, 572.0], [85.0, 509.0], [86.0, 491.0], [87.0, 707.0], [88.0, 496.0], [89.0, 452.0], [90.0, 548.0], [91.0, 546.0], [92.0, 501.0], [93.0, 514.0], [94.0, 560.0], [95.0, 574.0], [96.0, 679.0], [97.0, 441.0], [100.0, 1129.0], [101.0, 933.0], [102.0, 826.0], [104.0, 993.0], [105.0, 1001.0], [106.0, 878.0], [107.0, 811.5], [108.0, 546.0], [109.0, 559.0], [110.0, 658.0], [111.0, 555.0], [112.0, 600.0], [114.0, 984.0], [116.0, 1163.0], [117.0, 753.0], [118.0, 1267.0], [119.0, 964.0], [120.0, 740.0], [121.0, 448.0], [123.0, 898.0], [124.0, 960.0], [126.0, 1210.0], [127.0, 1229.0], [128.0, 1123.5], [129.0, 1047.0], [130.0, 982.0], [131.0, 992.0], [132.0, 1113.0], [134.0, 1436.0], [135.0, 1297.0], [137.0, 1572.0], [138.0, 1590.0], [139.0, 1188.0], [140.0, 655.5], [141.0, 595.0], [144.0, 1120.0], [146.0, 1420.5], [149.0, 2124.0], [150.0, 2092.0], [151.0, 1982.0], [152.0, 1891.0], [153.0, 1865.0], [154.0, 1899.0], [155.0, 1990.1666666666665]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[79.51612903225809, 795.3096774193547]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[3.0, 52.0], [4.0, 44.0], [7.0, 70.0], [8.0, 59.0], [9.0, 61.333333333333336], [11.0, 45.5], [12.0, 68.8], [13.0, 82.6], [14.0, 46.0], [15.0, 59.666666666666664], [16.0, 43.0], [17.0, 58.285714285714285], [18.0, 58.666666666666664], [19.0, 46.0], [20.0, 49.25], [21.0, 55.25], [22.0, 60.666666666666664], [23.0, 53.142857142857146], [24.0, 90.66666666666667], [25.0, 60.25], [26.0, 68.33333333333333], [27.0, 51.09090909090909], [28.0, 83.0], [29.0, 75.85714285714285], [30.0, 51.25], [31.0, 49.28571428571429], [32.0, 60.666666666666664], [34.0, 74.14285714285715], [35.0, 82.75], [36.0, 136.66666666666666], [37.0, 46.0], [38.0, 64.83333333333334], [39.0, 61.8], [40.0, 345.1111111111111], [41.0, 220.26666666666665], [42.0, 87.5], [43.0, 105.0], [44.0, 83.2], [45.0, 74.15384615384616], [46.0, 75.71428571428572], [47.0, 128.42857142857144], [48.0, 74.14285714285714], [49.0, 64.0], [50.0, 80.2], [51.0, 74.85714285714286], [52.0, 101.12499999999999], [53.0, 116.12500000000003], [54.0, 620.6], [55.0, 230.5384615384616], [56.0, 70.0], [57.0, 106.57142857142857], [58.0, 92.0], [59.0, 145.8], [60.0, 70.0], [61.0, 114.3], [62.0, 1199.121951219512], [63.0, 93.99999999999999], [64.0, 98.5], [65.0, 125.5], [66.0, 122.69999999999999], [67.0, 108.5], [68.0, 125.49999999999999], [69.0, 32.33333333333333], [70.0, 32.0], [71.0, 33.78947368421053], [72.0, 54.074074074074076], [73.0, 96.42857142857143], [74.0, 17.769230769230774], [75.0, 33.65384615384616], [76.0, 37.65217391304347], [77.0, 92.33333333333334], [78.0, 84.45454545454545], [79.0, 41.64285714285713], [80.0, 117.0], [81.0, 117.16666666666667], [82.0, 79.1111111111111], [83.0, 61.75000000000001], [84.0, 83.21428571428571], [85.0, 25.181818181818183], [86.0, 134.33333333333334], [87.0, 111.05263157894737], [88.0, 297.50000000000006], [89.0, 56.121951219512184], [90.0, 94.0], [91.0, 183.0], [92.0, 55.89655172413791], [93.0, 117.57894736842107], [94.0, 210.00000000000003], [95.0, 360.4], [96.0, 209.41176470588238], [97.0, 345.3125], [98.0, 405.25], [99.0, 891.6999999999999], [100.0, 370.94444444444446], [101.0, 205.3666666666667], [102.0, 542.75], [103.0, 302.17647058823536], [104.0, 228.85185185185188], [105.0, 95.17142857142859], [106.0, 105.0], [107.0, 107.00000000000001], [108.0, 66.52941176470588], [109.0, 30.923076923076913], [110.0, 231.41666666666666], [111.0, 65.90322580645162], [112.0, 41.294117647058826], [113.0, 44.28571428571429], [114.0, 70.55], [115.0, 117.22222222222223], [116.0, 41.95652173913042], [117.0, 117.83333333333334], [118.0, 64.44444444444446], [119.0, 65.9555555555555], [120.0, 203.33333333333331], [121.0, 403.4166666666667], [122.0, 692.7142857142857], [123.0, 385.73529411764696], [124.0, 915.2857142857142], [125.0, 471.99999999999994], [126.0, 883.5625000000001], [127.0, 791.105263157895], [128.0, 204.04999999999998], [129.0, 338.2083333333333], [130.0, 363.7142857142857], [131.0, 657.8999999999999], [132.0, 266.89655172413785], [133.0, 112.95121951219511], [134.0, 110.96551724137932], [135.0, 895.9999999999999], [136.0, 682.2222222222223], [137.0, 468.5909090909091], [138.0, 338.30769230769226], [139.0, 61.61904761904764], [140.0, 47.88], [141.0, 124.16666666666666], [142.0, 148.63333333333335], [143.0, 241.7391304347826], [144.0, 189.41176470588246], [145.0, 202.20833333333331], [146.0, 166.8260869565217], [147.0, 776.3333333333334], [148.0, 1184.6470588235295], [149.0, 379.4047619047618], [150.0, 208.6938775510203], [151.0, 197.85897435897428], [152.0, 132.32432432432438], [153.0, 71.1607142857143], [154.0, 496.9047619047618], [155.0, 1617.1983073219956]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[147.59870967741966, 1378.6213548386995]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 155.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.5854319E12, "maxY": 274427.85, "series": [{"data": [[1.5854319E12, 213929.38333333333], [1.5854322E12, 245750.98333333334], [1.58543238E12, 135877.0], [1.58543202E12, 260544.1], [1.58543232E12, 221233.38333333333], [1.5854325E12, 138585.23333333334], [1.58543214E12, 262635.75], [1.58543244E12, 170190.41666666666], [1.58543196E12, 161140.4], [1.58543256E12, 22745.733333333334], [1.58543208E12, 252017.61666666667], [1.58543226E12, 274427.85]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5854319E12, 13266.433333333332], [1.5854322E12, 16780.5], [1.58543238E12, 0.0], [1.58543202E12, 15407.466666666667], [1.58543232E12, 15372.566666666668], [1.5854325E12, 901.1], [1.58543214E12, 17530.633333333335], [1.58543244E12, 0.0], [1.58543196E12, 9936.766666666666], [1.58543256E12, 1373.0666666666666], [1.58543208E12, 15179.666666666666], [1.58543226E12, 17616.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543256E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1.0503246753246753, "minX": 1.5854319E12, "maxY": 3269.758650519031, "series": [{"data": [[1.5854319E12, 447.68961493582253], [1.5854322E12, 1881.1915240423791], [1.58543238E12, 1.5606372045220998], [1.58543202E12, 2081.527633851468], [1.58543232E12, 2022.5615114235472], [1.5854325E12, 29.715125601282743], [1.58543214E12, 1749.835820895522], [1.58543244E12, 1.451833937928255], [1.58543196E12, 1143.378521126762], [1.58543256E12, 96.59615384615385], [1.58543208E12, 2445.2381395348766], [1.58543226E12, 1799.6150729335482]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.5854319E12, 723.8150684931505], [1.58543196E12, 1955.1111111111109]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.5854319E12, 468.7774158523342], [1.5854322E12, 2113.8999999999965], [1.58543238E12, 1328.1143856143844], [1.58543202E12, 2056.765217391302], [1.58543232E12, 2148.84436160298], [1.5854325E12, 28.31168831168831], [1.58543214E12, 1830.9812206572763], [1.58543244E12, 1.0503246753246753], [1.58543196E12, 3269.758650519031], [1.58543256E12, 110.15909090909092], [1.58543208E12, 2495.909943714821], [1.58543226E12, 1777.2104430379748]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543256E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.5854319E12, "maxY": 2495.315196998122, "series": [{"data": [[1.5854319E12, 445.67794632438756], [1.5854322E12, 1880.1597392013055], [1.58543238E12, 0.0], [1.58543202E12, 2080.544041450778], [1.58543232E12, 2022.1818980667815], [1.5854325E12, 28.63388562266169], [1.58543214E12, 1749.4304791830343], [1.58543244E12, 0.0], [1.58543196E12, 1142.30457746479], [1.58543256E12, 95.50961538461534], [1.58543208E12, 2444.799999999996], [1.58543226E12, 1798.8014586709867]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.5854319E12, 719.150684931507], [1.58543196E12, 1954.888888888889]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.5854319E12, 467.0456026058632], [1.5854322E12, 2112.8235294117635], [1.58543238E12, 0.0], [1.58543202E12, 2055.832173913042], [1.58543232E12, 2148.4930102516314], [1.5854325E12, 27.266233766233764], [1.58543214E12, 1827.9248826291084], [1.58543244E12, 0.0], [1.58543196E12, 1109.2932525951537], [1.58543256E12, 109.37499999999997], [1.58543208E12, 2495.315196998122], [1.58543226E12, 1776.4367088607548]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543256E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.028846153846153848, "minX": 1.5854319E12, "maxY": 1.051387461459404, "series": [{"data": [[1.5854319E12, 0.25554259043173844], [1.5854322E12, 0.49388753056234685], [1.58543238E12, 1.051387461459404], [1.58543202E12, 0.6278065630397229], [1.58543232E12, 0.4850615114235495], [1.5854325E12, 0.5205772314270447], [1.58543214E12, 0.5145326001571098], [1.58543244E12, 0.9431680773881491], [1.58543196E12, 0.6179577464788731], [1.58543256E12, 0.028846153846153848], [1.58543208E12, 0.6065116279069771], [1.58543226E12, 0.43760129659643415]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.5854319E12, 1.0410958904109584], [1.58543196E12, 0.7777777777777778]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.5854319E12, 1.0358306188925088], [1.5854322E12, 0.5647058823529407], [1.58543238E12, 0.580919080919081], [1.58543202E12, 0.6391304347826092], [1.58543232E12, 0.5936626281453862], [1.5854325E12, 0.5438311688311681], [1.58543214E12, 0.6134585289514858], [1.58543244E12, 0.5280032467532467], [1.58543196E12, 0.6929065743944636], [1.58543256E12, 0.5568181818181819], [1.58543208E12, 0.6088180112570359], [1.58543226E12, 0.5150316455696198]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543256E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.5854319E12, "maxY": 19456.0, "series": [{"data": [[1.5854319E12, 3162.0], [1.5854322E12, 8222.0], [1.58543202E12, 19456.0], [1.58543232E12, 3807.0], [1.5854325E12, 2185.0], [1.58543214E12, 4816.0], [1.58543196E12, 3466.0], [1.58543256E12, 863.0], [1.58543208E12, 7138.0], [1.58543226E12, 4430.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5854319E12, 39.0], [1.5854322E12, 1.0], [1.58543202E12, 57.0], [1.58543232E12, 1.0], [1.5854325E12, 36.0], [1.58543214E12, 2.0], [1.58543196E12, 2.0], [1.58543256E12, 32.0], [1.58543208E12, 319.0], [1.58543226E12, 2.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5854319E12, 1181.5], [1.5854322E12, 2726.4000000000005], [1.58543202E12, 3608.8000000000006], [1.58543232E12, 3045.0], [1.5854325E12, 1892.5], [1.58543214E12, 3144.0], [1.58543196E12, 2756.0], [1.58543256E12, 171.70000000000087], [1.58543208E12, 4005.600000000002], [1.58543226E12, 2783.5000000000005]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5854319E12, 1982.75], [1.5854322E12, 7173.0700000000015], [1.58543202E12, 4210.200000000001], [1.58543232E12, 3446.0], [1.5854325E12, 2166.9100000000003], [1.58543214E12, 3994.759999999999], [1.58543196E12, 3147.24], [1.58543256E12, 803.4799999999996], [1.58543208E12, 5783.19999999999], [1.58543226E12, 3333.309999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5854319E12, 1487.0], [1.5854322E12, 3617.1999999999935], [1.58543202E12, 3854.7999999999993], [1.58543232E12, 3182.5], [1.5854325E12, 2015.6], [1.58543214E12, 3476.2], [1.58543196E12, 2936.7999999999997], [1.58543256E12, 572.5499999999998], [1.58543208E12, 4736.8], [1.58543226E12, 2956.7999999999993]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543256E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 8007.0, "series": [{"data": [[2.0, 69.0], [3.0, 58.0], [5.0, 817.0], [6.0, 43.5], [7.0, 58.5], [9.0, 54.0], [10.0, 186.5], [11.0, 61.0], [12.0, 63.5], [13.0, 56.0], [15.0, 58.0], [16.0, 56.5], [17.0, 61.0], [18.0, 531.5], [20.0, 108.5], [21.0, 79.0], [22.0, 946.0], [23.0, 707.0], [24.0, 791.5], [25.0, 79.0], [26.0, 2359.0], [27.0, 154.0], [28.0, 2455.0], [29.0, 2545.5], [30.0, 2512.0], [31.0, 2474.0], [33.0, 2183.5], [32.0, 2232.0], [35.0, 2364.0], [34.0, 2373.5], [37.0, 2042.5], [36.0, 2286.0], [38.0, 2129.0], [39.0, 2277.0], [40.0, 2228.0], [41.0, 2155.5], [42.0, 2101.5], [43.0, 2135.5], [44.0, 1419.0], [45.0, 2007.0], [47.0, 2167.5], [46.0, 1711.5], [49.0, 1259.5], [48.0, 2039.0], [51.0, 2433.0], [50.0, 2085.0], [52.0, 438.5], [53.0, 2389.5], [55.0, 121.5], [54.0, 1615.5], [56.0, 111.5], [57.0, 1351.0], [58.0, 412.0], [59.0, 1740.0], [60.0, 2060.0], [61.0, 1732.0], [62.0, 975.0], [63.0, 40.0], [64.0, 1163.0], [66.0, 154.0], [69.0, 43.0], [68.0, 103.0], [73.0, 4.0], [72.0, 1659.5], [78.0, 580.5], [79.0, 3.0], [83.0, 4.0], [82.0, 12.5], [81.0, 90.0], [84.0, 4.0], [87.0, 3.0], [91.0, 1845.0], [89.0, 761.5], [107.0, 575.0], [108.0, 476.0], [126.0, 1392.0], [1.0, 60.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 1.0], [8.0, 1.0], [10.0, 8005.5], [12.0, 1.0], [16.0, 8007.0], [20.0, 1.0], [23.0, 2.0], [25.0, 1.0], [26.0, 2846.0], [28.0, 1.0], [29.0, 1.0], [31.0, 2232.0], [32.0, 1.0], [34.0, 0.0], [37.0, 1.0], [36.0, 0.0], [39.0, 1.0], [38.0, 2.0], [40.0, 1.0], [41.0, 1583.0], [43.0, 1.0], [42.0, 1.0], [44.0, 2109.0], [45.0, 1.0], [46.0, 1.0], [47.0, 1.0], [49.0, 1.0], [48.0, 1.0], [51.0, 2.0], [50.0, 1.0], [53.0, 1.0], [52.0, 1.0], [55.0, 0.0], [56.0, 1.0], [57.0, 1.0], [59.0, 1.0], [58.0, 629.0], [63.0, 0.0], [62.0, 1.0], [65.0, 1.0], [66.0, 1.0], [67.0, 1.0], [64.0, 1.0], [69.0, 1.0], [68.0, 1.0], [70.0, 1.0], [71.0, 1.0], [72.0, 1.0], [73.0, 1.0], [75.0, 1.0], [74.0, 1.0], [79.0, 1.0], [76.0, 1.0], [77.0, 1.0], [78.0, 1.0], [82.0, 1.0], [81.0, 1.0], [80.0, 1.0], [83.0, 1.0], [84.0, 1.0], [85.0, 1.0], [86.0, 1.0], [87.0, 1.0], [88.0, 1.0], [89.0, 1983.0], [90.0, 1.0], [93.0, 1.0], [94.0, 1.0], [92.0, 1.0], [95.0, 1.0], [98.0, 1.0], [96.0, 1.0], [97.0, 1.0], [103.0, 1.0], [102.0, 1.0], [107.0, 2345.0], [106.0, 1.0], [108.0, 1.0], [115.0, 1.0], [114.0, 1.0], [126.0, 2296.0], [1.0, 1.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 126.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 2846.0, "series": [{"data": [[2.0, 67.5], [3.0, 57.0], [5.0, 788.0], [6.0, 43.0], [7.0, 57.5], [9.0, 53.0], [10.0, 186.0], [11.0, 60.0], [12.0, 63.0], [13.0, 56.0], [15.0, 57.5], [16.0, 55.5], [17.0, 59.5], [18.0, 530.5], [20.0, 107.5], [21.0, 70.0], [22.0, 945.0], [23.0, 706.0], [24.0, 791.0], [25.0, 78.0], [26.0, 2359.0], [27.0, 154.0], [28.0, 2454.0], [29.0, 2545.5], [30.0, 2511.0], [31.0, 2474.0], [33.0, 2183.5], [32.0, 2232.0], [35.0, 2364.0], [34.0, 2372.5], [37.0, 2042.0], [36.0, 2286.0], [38.0, 2128.0], [39.0, 2276.0], [40.0, 2227.5], [41.0, 2155.0], [42.0, 2101.5], [43.0, 2135.0], [44.0, 1418.0], [45.0, 2006.0], [47.0, 2166.5], [46.0, 1711.0], [49.0, 1257.5], [48.0, 2038.0], [51.0, 2432.0], [50.0, 2085.0], [52.0, 438.0], [53.0, 2389.0], [55.0, 121.0], [54.0, 1614.5], [56.0, 110.0], [57.0, 1350.0], [58.0, 412.0], [59.0, 1739.5], [60.0, 2059.0], [61.0, 1731.0], [62.0, 974.5], [63.0, 39.0], [64.0, 1162.5], [66.0, 153.5], [69.0, 43.0], [68.0, 102.0], [73.0, 4.0], [72.0, 1659.5], [78.0, 580.5], [79.0, 3.0], [83.0, 4.0], [82.0, 12.5], [81.0, 90.0], [84.0, 4.0], [87.0, 3.0], [91.0, 1845.0], [89.0, 761.5], [107.0, 575.0], [108.0, 476.0], [126.0, 1392.0], [1.0, 59.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [8.0, 0.0], [10.0, 0.0], [12.0, 0.0], [16.0, 0.0], [20.0, 0.0], [23.0, 0.0], [25.0, 0.0], [26.0, 2846.0], [28.0, 0.0], [29.0, 0.0], [31.0, 2232.0], [32.0, 0.0], [34.0, 0.0], [37.0, 0.0], [36.0, 0.0], [39.0, 0.0], [38.0, 0.0], [40.0, 0.0], [41.0, 1582.5], [43.0, 0.0], [42.0, 0.0], [44.0, 2109.0], [45.0, 0.0], [46.0, 0.0], [47.0, 0.0], [49.0, 0.0], [48.0, 0.0], [51.0, 0.0], [50.0, 0.0], [53.0, 0.0], [52.0, 0.0], [55.0, 0.0], [56.0, 0.0], [57.0, 0.0], [59.0, 0.0], [58.0, 629.0], [63.0, 0.0], [62.0, 0.0], [65.0, 0.0], [66.0, 0.0], [67.0, 0.0], [64.0, 0.0], [69.0, 0.0], [68.0, 0.0], [70.0, 0.0], [71.0, 0.0], [72.0, 0.0], [73.0, 0.0], [75.0, 0.0], [74.0, 0.0], [79.0, 0.0], [76.0, 0.0], [77.0, 0.0], [78.0, 0.0], [82.0, 0.0], [81.0, 0.0], [80.0, 0.0], [83.0, 0.0], [84.0, 0.0], [85.0, 0.0], [86.0, 0.0], [87.0, 0.0], [88.0, 0.0], [89.0, 1983.0], [90.0, 0.0], [93.0, 0.0], [94.0, 0.0], [92.0, 0.0], [95.0, 0.0], [98.0, 0.0], [96.0, 0.0], [97.0, 0.0], [103.0, 0.0], [102.0, 0.0], [107.0, 2345.0], [106.0, 0.0], [108.0, 0.0], [115.0, 0.0], [114.0, 0.0], [126.0, 2296.0], [1.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 126.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.1333333333333333, "minX": 1.5854319E12, "maxY": 82.41666666666667, "series": [{"data": [[1.5854319E12, 33.416666666666664], [1.5854322E12, 39.916666666666664], [1.58543238E12, 63.21666666666667], [1.58543202E12, 40.15], [1.58543232E12, 37.833333333333336], [1.5854325E12, 62.05], [1.58543214E12, 42.1], [1.58543244E12, 82.41666666666667], [1.58543196E12, 37.03333333333333], [1.58543256E12, 3.1333333333333333], [1.58543208E12, 35.56666666666667], [1.58543226E12, 42.416666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543256E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5854319E12, "maxY": 82.41666666666667, "series": [{"data": [[1.5854319E12, 32.06666666666667], [1.5854322E12, 38.86666666666667], [1.58543202E12, 35.916666666666664], [1.58543232E12, 35.81666666666667], [1.5854325E12, 2.1], [1.58543214E12, 40.583333333333336], [1.58543196E12, 23.216666666666665], [1.58543256E12, 3.2], [1.58543208E12, 35.38333333333333], [1.58543226E12, 40.833333333333336]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.5854322E12, 0.25], [1.58543232E12, 0.016666666666666666], [1.58543214E12, 0.2833333333333333], [1.58543196E12, 0.016666666666666666], [1.58543226E12, 0.21666666666666667]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.58543214E12, 0.016666666666666666], [1.58543208E12, 0.1]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.TruncatedChunkException", "isController": false}, {"data": [[1.5854322E12, 1.1666666666666667], [1.58543238E12, 65.8], [1.58543202E12, 2.3333333333333335], [1.58543232E12, 1.0166666666666666], [1.5854325E12, 59.88333333333333], [1.58543214E12, 1.0833333333333333], [1.58543244E12, 82.41666666666667], [1.58543196E12, 15.116666666666667], [1.58543208E12, 0.016666666666666666], [1.58543226E12, 0.45]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.58543226E12, 0.016666666666666666]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.58543202E12, 0.21666666666666667], [1.58543214E12, 0.55], [1.58543208E12, 0.18333333333333332], [1.58543226E12, 0.11666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543256E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5854319E12, "maxY": 41.35, "series": [{"data": [[1.5854319E12, 2.433333333333333], [1.58543196E12, 0.15]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.5854319E12, 14.283333333333333], [1.5854322E12, 19.133333333333333], [1.58543202E12, 17.566666666666666], [1.58543232E12, 17.95], [1.5854325E12, 1.15], [1.58543214E12, 19.616666666666667], [1.58543196E12, 11.45], [1.58543256E12, 1.7333333333333334], [1.58543208E12, 17.8], [1.58543226E12, 19.883333333333333]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.5854322E12, 1.3166666666666667], [1.58543238E12, 32.43333333333333], [1.58543202E12, 1.7333333333333334], [1.58543232E12, 1.0166666666666666], [1.5854325E12, 30.033333333333335], [1.58543214E12, 1.6], [1.58543244E12, 41.35], [1.58543196E12, 7.483333333333333], [1.58543208E12, 0.11666666666666667], [1.58543226E12, 0.6833333333333333]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.5854319E12, 15.35], [1.5854322E12, 19.733333333333334], [1.58543202E12, 18.35], [1.58543232E12, 17.866666666666667], [1.5854325E12, 0.95], [1.58543214E12, 20.966666666666665], [1.58543196E12, 11.616666666666667], [1.58543256E12, 1.4666666666666666], [1.58543208E12, 17.583333333333332], [1.58543226E12, 20.95]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.5854322E12, 0.1], [1.58543238E12, 33.36666666666667], [1.58543202E12, 0.8166666666666667], [1.58543232E12, 0.016666666666666666], [1.5854325E12, 29.85], [1.58543214E12, 0.3333333333333333], [1.58543244E12, 41.06666666666667], [1.58543196E12, 7.65], [1.58543208E12, 0.18333333333333332], [1.58543226E12, 0.11666666666666667]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543256E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.5854319E12, "maxY": 82.41666666666667, "series": [{"data": [[1.5854319E12, 32.06666666666667], [1.5854322E12, 38.86666666666667], [1.58543202E12, 35.916666666666664], [1.58543232E12, 35.81666666666667], [1.5854325E12, 2.1], [1.58543214E12, 40.583333333333336], [1.58543196E12, 23.216666666666665], [1.58543256E12, 3.2], [1.58543208E12, 35.38333333333333], [1.58543226E12, 40.833333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.5854322E12, 1.4166666666666667], [1.58543238E12, 65.8], [1.58543202E12, 2.55], [1.58543232E12, 1.0333333333333334], [1.5854325E12, 59.88333333333333], [1.58543214E12, 1.9333333333333333], [1.58543244E12, 82.41666666666667], [1.58543196E12, 15.133333333333333], [1.58543208E12, 0.3], [1.58543226E12, 0.8]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543256E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

