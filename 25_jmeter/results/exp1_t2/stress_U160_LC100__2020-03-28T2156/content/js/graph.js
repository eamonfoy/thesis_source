/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 21011.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 1.0], [41.8, 1.0], [41.9, 1.0], [42.0, 1.0], [42.1, 1.0], [42.2, 1.0], [42.3, 1.0], [42.4, 1.0], [42.5, 1.0], [42.6, 1.0], [42.7, 1.0], [42.8, 1.0], [42.9, 1.0], [43.0, 1.0], [43.1, 1.0], [43.2, 1.0], [43.3, 1.0], [43.4, 1.0], [43.5, 1.0], [43.6, 1.0], [43.7, 1.0], [43.8, 1.0], [43.9, 1.0], [44.0, 1.0], [44.1, 1.0], [44.2, 1.0], [44.3, 1.0], [44.4, 1.0], [44.5, 1.0], [44.6, 1.0], [44.7, 1.0], [44.8, 1.0], [44.9, 1.0], [45.0, 1.0], [45.1, 1.0], [45.2, 1.0], [45.3, 1.0], [45.4, 1.0], [45.5, 1.0], [45.6, 1.0], [45.7, 1.0], [45.8, 1.0], [45.9, 1.0], [46.0, 1.0], [46.1, 1.0], [46.2, 1.0], [46.3, 1.0], [46.4, 1.0], [46.5, 1.0], [46.6, 1.0], [46.7, 1.0], [46.8, 2.0], [46.9, 2.0], [47.0, 2.0], [47.1, 2.0], [47.2, 2.0], [47.3, 2.0], [47.4, 2.0], [47.5, 2.0], [47.6, 2.0], [47.7, 2.0], [47.8, 2.0], [47.9, 2.0], [48.0, 2.0], [48.1, 2.0], [48.2, 2.0], [48.3, 2.0], [48.4, 2.0], [48.5, 2.0], [48.6, 2.0], [48.7, 2.0], [48.8, 2.0], [48.9, 2.0], [49.0, 2.0], [49.1, 2.0], [49.2, 2.0], [49.3, 2.0], [49.4, 2.0], [49.5, 2.0], [49.6, 2.0], [49.7, 2.0], [49.8, 2.0], [49.9, 2.0], [50.0, 2.0], [50.1, 2.0], [50.2, 2.0], [50.3, 2.0], [50.4, 2.0], [50.5, 2.0], [50.6, 2.0], [50.7, 2.0], [50.8, 2.0], [50.9, 2.0], [51.0, 2.0], [51.1, 2.0], [51.2, 2.0], [51.3, 2.0], [51.4, 2.0], [51.5, 2.0], [51.6, 2.0], [51.7, 2.0], [51.8, 2.0], [51.9, 2.0], [52.0, 2.0], [52.1, 2.0], [52.2, 2.0], [52.3, 3.0], [52.4, 3.0], [52.5, 3.0], [52.6, 3.0], [52.7, 3.0], [52.8, 3.0], [52.9, 4.0], [53.0, 4.0], [53.1, 4.0], [53.2, 4.0], [53.3, 4.0], [53.4, 5.0], [53.5, 5.0], [53.6, 5.0], [53.7, 6.0], [53.8, 7.0], [53.9, 9.0], [54.0, 11.0], [54.1, 16.0], [54.2, 20.0], [54.3, 26.0], [54.4, 34.0], [54.5, 36.0], [54.6, 39.0], [54.7, 40.0], [54.8, 42.0], [54.9, 42.0], [55.0, 43.0], [55.1, 44.0], [55.2, 45.0], [55.3, 45.0], [55.4, 46.0], [55.5, 47.0], [55.6, 47.0], [55.7, 48.0], [55.8, 49.0], [55.9, 49.0], [56.0, 50.0], [56.1, 51.0], [56.2, 52.0], [56.3, 52.0], [56.4, 53.0], [56.5, 54.0], [56.6, 55.0], [56.7, 55.0], [56.8, 56.0], [56.9, 57.0], [57.0, 58.0], [57.1, 59.0], [57.2, 60.0], [57.3, 61.0], [57.4, 63.0], [57.5, 65.0], [57.6, 66.0], [57.7, 68.0], [57.8, 70.0], [57.9, 72.0], [58.0, 75.0], [58.1, 77.0], [58.2, 79.0], [58.3, 82.0], [58.4, 84.0], [58.5, 87.0], [58.6, 91.0], [58.7, 93.0], [58.8, 97.0], [58.9, 100.0], [59.0, 103.0], [59.1, 107.0], [59.2, 113.0], [59.3, 118.0], [59.4, 124.0], [59.5, 129.0], [59.6, 135.0], [59.7, 140.0], [59.8, 144.0], [59.9, 150.0], [60.0, 154.0], [60.1, 160.0], [60.2, 171.0], [60.3, 199.0], [60.4, 230.0], [60.5, 269.0], [60.6, 306.0], [60.7, 345.0], [60.8, 383.0], [60.9, 407.0], [61.0, 437.0], [61.1, 479.0], [61.2, 517.0], [61.3, 547.0], [61.4, 579.0], [61.5, 600.0], [61.6, 624.0], [61.7, 655.0], [61.8, 677.0], [61.9, 698.0], [62.0, 723.0], [62.1, 749.0], [62.2, 767.0], [62.3, 778.0], [62.4, 794.0], [62.5, 804.0], [62.6, 822.0], [62.7, 842.0], [62.8, 860.0], [62.9, 877.0], [63.0, 892.0], [63.1, 911.0], [63.2, 927.0], [63.3, 938.0], [63.4, 953.0], [63.5, 969.0], [63.6, 985.0], [63.7, 1003.0], [63.8, 1023.0], [63.9, 1033.0], [64.0, 1051.0], [64.1, 1072.0], [64.2, 1085.0], [64.3, 1102.0], [64.4, 1117.0], [64.5, 1124.0], [64.6, 1138.0], [64.7, 1149.0], [64.8, 1167.0], [64.9, 1183.0], [65.0, 1196.0], [65.1, 1206.0], [65.2, 1221.0], [65.3, 1235.0], [65.4, 1245.0], [65.5, 1260.0], [65.6, 1275.0], [65.7, 1289.0], [65.8, 1302.0], [65.9, 1311.0], [66.0, 1324.0], [66.1, 1339.0], [66.2, 1349.0], [66.3, 1358.0], [66.4, 1374.0], [66.5, 1387.0], [66.6, 1400.0], [66.7, 1413.0], [66.8, 1430.0], [66.9, 1452.0], [67.0, 1462.0], [67.1, 1470.0], [67.2, 1483.0], [67.3, 1496.0], [67.4, 1506.0], [67.5, 1522.0], [67.6, 1543.0], [67.7, 1554.0], [67.8, 1572.0], [67.9, 1583.0], [68.0, 1593.0], [68.1, 1601.0], [68.2, 1614.0], [68.3, 1629.0], [68.4, 1640.0], [68.5, 1655.0], [68.6, 1666.0], [68.7, 1676.0], [68.8, 1688.0], [68.9, 1705.0], [69.0, 1715.0], [69.1, 1724.0], [69.2, 1731.0], [69.3, 1744.0], [69.4, 1753.0], [69.5, 1767.0], [69.6, 1778.0], [69.7, 1784.0], [69.8, 1795.0], [69.9, 1806.0], [70.0, 1813.0], [70.1, 1824.0], [70.2, 1836.0], [70.3, 1849.0], [70.4, 1860.0], [70.5, 1867.0], [70.6, 1877.0], [70.7, 1884.0], [70.8, 1892.0], [70.9, 1897.0], [71.0, 1903.0], [71.1, 1912.0], [71.2, 1920.0], [71.3, 1926.0], [71.4, 1932.0], [71.5, 1939.0], [71.6, 1947.0], [71.7, 1954.0], [71.8, 1964.0], [71.9, 1972.0], [72.0, 1982.0], [72.1, 1989.0], [72.2, 1999.0], [72.3, 2003.0], [72.4, 2009.0], [72.5, 2017.0], [72.6, 2024.0], [72.7, 2032.0], [72.8, 2042.0], [72.9, 2048.0], [73.0, 2055.0], [73.1, 2061.0], [73.2, 2066.0], [73.3, 2072.0], [73.4, 2079.0], [73.5, 2085.0], [73.6, 2091.0], [73.7, 2098.0], [73.8, 2104.0], [73.9, 2109.0], [74.0, 2114.0], [74.1, 2118.0], [74.2, 2122.0], [74.3, 2126.0], [74.4, 2133.0], [74.5, 2138.0], [74.6, 2142.0], [74.7, 2148.0], [74.8, 2152.0], [74.9, 2157.0], [75.0, 2163.0], [75.1, 2167.0], [75.2, 2173.0], [75.3, 2178.0], [75.4, 2182.0], [75.5, 2185.0], [75.6, 2190.0], [75.7, 2196.0], [75.8, 2200.0], [75.9, 2205.0], [76.0, 2210.0], [76.1, 2214.0], [76.2, 2218.0], [76.3, 2226.0], [76.4, 2230.0], [76.5, 2235.0], [76.6, 2239.0], [76.7, 2245.0], [76.8, 2250.0], [76.9, 2255.0], [77.0, 2258.0], [77.1, 2265.0], [77.2, 2270.0], [77.3, 2276.0], [77.4, 2280.0], [77.5, 2284.0], [77.6, 2291.0], [77.7, 2296.0], [77.8, 2300.0], [77.9, 2303.0], [78.0, 2307.0], [78.1, 2312.0], [78.2, 2321.0], [78.3, 2326.0], [78.4, 2329.0], [78.5, 2334.0], [78.6, 2339.0], [78.7, 2342.0], [78.8, 2346.0], [78.9, 2349.0], [79.0, 2353.0], [79.1, 2356.0], [79.2, 2359.0], [79.3, 2365.0], [79.4, 2370.0], [79.5, 2374.0], [79.6, 2379.0], [79.7, 2382.0], [79.8, 2387.0], [79.9, 2392.0], [80.0, 2396.0], [80.1, 2400.0], [80.2, 2405.0], [80.3, 2408.0], [80.4, 2412.0], [80.5, 2414.0], [80.6, 2418.0], [80.7, 2421.0], [80.8, 2427.0], [80.9, 2432.0], [81.0, 2436.0], [81.1, 2439.0], [81.2, 2441.0], [81.3, 2444.0], [81.4, 2449.0], [81.5, 2453.0], [81.6, 2457.0], [81.7, 2463.0], [81.8, 2467.0], [81.9, 2469.0], [82.0, 2472.0], [82.1, 2478.0], [82.2, 2483.0], [82.3, 2488.0], [82.4, 2492.0], [82.5, 2497.0], [82.6, 2500.0], [82.7, 2503.0], [82.8, 2507.0], [82.9, 2509.0], [83.0, 2513.0], [83.1, 2517.0], [83.2, 2521.0], [83.3, 2525.0], [83.4, 2529.0], [83.5, 2535.0], [83.6, 2539.0], [83.7, 2542.0], [83.8, 2545.0], [83.9, 2547.0], [84.0, 2550.0], [84.1, 2553.0], [84.2, 2557.0], [84.3, 2559.0], [84.4, 2563.0], [84.5, 2567.0], [84.6, 2571.0], [84.7, 2574.0], [84.8, 2577.0], [84.9, 2580.0], [85.0, 2582.0], [85.1, 2586.0], [85.2, 2590.0], [85.3, 2595.0], [85.4, 2599.0], [85.5, 2603.0], [85.6, 2606.0], [85.7, 2608.0], [85.8, 2612.0], [85.9, 2615.0], [86.0, 2618.0], [86.1, 2621.0], [86.2, 2625.0], [86.3, 2629.0], [86.4, 2634.0], [86.5, 2638.0], [86.6, 2643.0], [86.7, 2645.0], [86.8, 2648.0], [86.9, 2651.0], [87.0, 2656.0], [87.1, 2659.0], [87.2, 2663.0], [87.3, 2667.0], [87.4, 2671.0], [87.5, 2676.0], [87.6, 2681.0], [87.7, 2684.0], [87.8, 2687.0], [87.9, 2691.0], [88.0, 2694.0], [88.1, 2699.0], [88.2, 2702.0], [88.3, 2706.0], [88.4, 2711.0], [88.5, 2715.0], [88.6, 2721.0], [88.7, 2726.0], [88.8, 2730.0], [88.9, 2734.0], [89.0, 2740.0], [89.1, 2745.0], [89.2, 2751.0], [89.3, 2756.0], [89.4, 2760.0], [89.5, 2765.0], [89.6, 2769.0], [89.7, 2773.0], [89.8, 2777.0], [89.9, 2782.0], [90.0, 2786.0], [90.1, 2791.0], [90.2, 2796.0], [90.3, 2800.0], [90.4, 2804.0], [90.5, 2808.0], [90.6, 2813.0], [90.7, 2816.0], [90.8, 2822.0], [90.9, 2826.0], [91.0, 2831.0], [91.1, 2836.0], [91.2, 2842.0], [91.3, 2845.0], [91.4, 2850.0], [91.5, 2854.0], [91.6, 2859.0], [91.7, 2863.0], [91.8, 2871.0], [91.9, 2877.0], [92.0, 2883.0], [92.1, 2887.0], [92.2, 2892.0], [92.3, 2896.0], [92.4, 2900.0], [92.5, 2906.0], [92.6, 2913.0], [92.7, 2917.0], [92.8, 2921.0], [92.9, 2924.0], [93.0, 2933.0], [93.1, 2945.0], [93.2, 2952.0], [93.3, 2959.0], [93.4, 2971.0], [93.5, 2977.0], [93.6, 2981.0], [93.7, 2988.0], [93.8, 2996.0], [93.9, 3003.0], [94.0, 3009.0], [94.1, 3019.0], [94.2, 3027.0], [94.3, 3035.0], [94.4, 3042.0], [94.5, 3057.0], [94.6, 3068.0], [94.7, 3076.0], [94.8, 3083.0], [94.9, 3089.0], [95.0, 3103.0], [95.1, 3115.0], [95.2, 3131.0], [95.3, 3139.0], [95.4, 3157.0], [95.5, 3169.0], [95.6, 3179.0], [95.7, 3189.0], [95.8, 3199.0], [95.9, 3213.0], [96.0, 3225.0], [96.1, 3237.0], [96.2, 3247.0], [96.3, 3261.0], [96.4, 3279.0], [96.5, 3297.0], [96.6, 3310.0], [96.7, 3341.0], [96.8, 3359.0], [96.9, 3374.0], [97.0, 3383.0], [97.1, 3406.0], [97.2, 3434.0], [97.3, 3450.0], [97.4, 3463.0], [97.5, 3485.0], [97.6, 3509.0], [97.7, 3542.0], [97.8, 3561.0], [97.9, 3583.0], [98.0, 3622.0], [98.1, 3678.0], [98.2, 3709.0], [98.3, 3752.0], [98.4, 3777.0], [98.5, 3812.0], [98.6, 3856.0], [98.7, 3879.0], [98.8, 3916.0], [98.9, 3968.0], [99.0, 4024.0], [99.1, 4111.0], [99.2, 4191.0], [99.3, 4264.0], [99.4, 4332.0], [99.5, 4418.0], [99.6, 4594.0], [99.7, 4787.0], [99.8, 4979.0], [99.9, 5209.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 161.0], [0.1, 161.0], [0.2, 161.0], [0.3, 161.0], [0.4, 161.0], [0.5, 161.0], [0.6, 161.0], [0.7, 161.0], [0.8, 161.0], [0.9, 161.0], [1.0, 161.0], [1.1, 161.0], [1.2, 161.0], [1.3, 167.0], [1.4, 167.0], [1.5, 167.0], [1.6, 167.0], [1.7, 167.0], [1.8, 167.0], [1.9, 169.0], [2.0, 169.0], [2.1, 169.0], [2.2, 169.0], [2.3, 169.0], [2.4, 169.0], [2.5, 170.0], [2.6, 170.0], [2.7, 170.0], [2.8, 170.0], [2.9, 170.0], [3.0, 170.0], [3.1, 170.0], [3.2, 172.0], [3.3, 172.0], [3.4, 172.0], [3.5, 172.0], [3.6, 172.0], [3.7, 172.0], [3.8, 174.0], [3.9, 174.0], [4.0, 174.0], [4.1, 174.0], [4.2, 174.0], [4.3, 174.0], [4.4, 175.0], [4.5, 175.0], [4.6, 175.0], [4.7, 175.0], [4.8, 175.0], [4.9, 175.0], [5.0, 178.0], [5.1, 178.0], [5.2, 178.0], [5.3, 178.0], [5.4, 178.0], [5.5, 178.0], [5.6, 178.0], [5.7, 179.0], [5.8, 179.0], [5.9, 179.0], [6.0, 179.0], [6.1, 179.0], [6.2, 179.0], [6.3, 180.0], [6.4, 180.0], [6.5, 180.0], [6.6, 180.0], [6.7, 180.0], [6.8, 180.0], [6.9, 184.0], [7.0, 184.0], [7.1, 184.0], [7.2, 184.0], [7.3, 184.0], [7.4, 184.0], [7.5, 184.0], [7.6, 184.0], [7.7, 184.0], [7.8, 184.0], [7.9, 184.0], [8.0, 184.0], [8.1, 184.0], [8.2, 185.0], [8.3, 185.0], [8.4, 185.0], [8.5, 185.0], [8.6, 185.0], [8.7, 185.0], [8.8, 186.0], [8.9, 186.0], [9.0, 186.0], [9.1, 186.0], [9.2, 186.0], [9.3, 186.0], [9.4, 188.0], [9.5, 188.0], [9.6, 188.0], [9.7, 188.0], [9.8, 188.0], [9.9, 188.0], [10.0, 190.0], [10.1, 190.0], [10.2, 190.0], [10.3, 190.0], [10.4, 190.0], [10.5, 190.0], [10.6, 190.0], [10.7, 195.0], [10.8, 195.0], [10.9, 195.0], [11.0, 195.0], [11.1, 195.0], [11.2, 195.0], [11.3, 195.0], [11.4, 195.0], [11.5, 195.0], [11.6, 195.0], [11.7, 195.0], [11.8, 195.0], [11.9, 196.0], [12.0, 196.0], [12.1, 196.0], [12.2, 196.0], [12.3, 196.0], [12.4, 196.0], [12.5, 203.0], [12.6, 203.0], [12.7, 203.0], [12.8, 203.0], [12.9, 203.0], [13.0, 203.0], [13.1, 203.0], [13.2, 203.0], [13.3, 203.0], [13.4, 203.0], [13.5, 203.0], [13.6, 203.0], [13.7, 203.0], [13.8, 208.0], [13.9, 208.0], [14.0, 208.0], [14.1, 208.0], [14.2, 208.0], [14.3, 208.0], [14.4, 210.0], [14.5, 210.0], [14.6, 210.0], [14.7, 210.0], [14.8, 210.0], [14.9, 210.0], [15.0, 211.0], [15.1, 211.0], [15.2, 211.0], [15.3, 211.0], [15.4, 211.0], [15.5, 211.0], [15.6, 211.0], [15.7, 213.0], [15.8, 213.0], [15.9, 213.0], [16.0, 213.0], [16.1, 213.0], [16.2, 213.0], [16.3, 214.0], [16.4, 214.0], [16.5, 214.0], [16.6, 214.0], [16.7, 214.0], [16.8, 214.0], [16.9, 217.0], [17.0, 217.0], [17.1, 217.0], [17.2, 217.0], [17.3, 217.0], [17.4, 217.0], [17.5, 219.0], [17.6, 219.0], [17.7, 219.0], [17.8, 219.0], [17.9, 219.0], [18.0, 219.0], [18.1, 219.0], [18.2, 221.0], [18.3, 221.0], [18.4, 221.0], [18.5, 221.0], [18.6, 221.0], [18.7, 221.0], [18.8, 223.0], [18.9, 223.0], [19.0, 223.0], [19.1, 223.0], [19.2, 223.0], [19.3, 223.0], [19.4, 250.0], [19.5, 250.0], [19.6, 250.0], [19.7, 250.0], [19.8, 250.0], [19.9, 250.0], [20.0, 254.0], [20.1, 254.0], [20.2, 254.0], [20.3, 254.0], [20.4, 254.0], [20.5, 254.0], [20.6, 254.0], [20.7, 255.0], [20.8, 255.0], [20.9, 255.0], [21.0, 255.0], [21.1, 255.0], [21.2, 255.0], [21.3, 256.0], [21.4, 256.0], [21.5, 256.0], [21.6, 256.0], [21.7, 256.0], [21.8, 256.0], [21.9, 258.0], [22.0, 258.0], [22.1, 258.0], [22.2, 258.0], [22.3, 258.0], [22.4, 258.0], [22.5, 259.0], [22.6, 259.0], [22.7, 259.0], [22.8, 259.0], [22.9, 259.0], [23.0, 259.0], [23.1, 259.0], [23.2, 262.0], [23.3, 262.0], [23.4, 262.0], [23.5, 262.0], [23.6, 262.0], [23.7, 262.0], [23.8, 266.0], [23.9, 266.0], [24.0, 266.0], [24.1, 266.0], [24.2, 266.0], [24.3, 266.0], [24.4, 270.0], [24.5, 270.0], [24.6, 270.0], [24.7, 270.0], [24.8, 270.0], [24.9, 270.0], [25.0, 271.0], [25.1, 271.0], [25.2, 271.0], [25.3, 271.0], [25.4, 271.0], [25.5, 271.0], [25.6, 271.0], [25.7, 272.0], [25.8, 272.0], [25.9, 272.0], [26.0, 272.0], [26.1, 272.0], [26.2, 272.0], [26.3, 278.0], [26.4, 278.0], [26.5, 278.0], [26.6, 278.0], [26.7, 278.0], [26.8, 278.0], [26.9, 282.0], [27.0, 282.0], [27.1, 282.0], [27.2, 282.0], [27.3, 282.0], [27.4, 282.0], [27.5, 303.0], [27.6, 303.0], [27.7, 303.0], [27.8, 303.0], [27.9, 303.0], [28.0, 303.0], [28.1, 303.0], [28.2, 319.0], [28.3, 319.0], [28.4, 319.0], [28.5, 319.0], [28.6, 319.0], [28.7, 319.0], [28.8, 326.0], [28.9, 326.0], [29.0, 326.0], [29.1, 326.0], [29.2, 326.0], [29.3, 326.0], [29.4, 328.0], [29.5, 328.0], [29.6, 328.0], [29.7, 328.0], [29.8, 328.0], [29.9, 328.0], [30.0, 333.0], [30.1, 333.0], [30.2, 333.0], [30.3, 333.0], [30.4, 333.0], [30.5, 333.0], [30.6, 333.0], [30.7, 341.0], [30.8, 341.0], [30.9, 341.0], [31.0, 341.0], [31.1, 341.0], [31.2, 341.0], [31.3, 344.0], [31.4, 344.0], [31.5, 344.0], [31.6, 344.0], [31.7, 344.0], [31.8, 344.0], [31.9, 345.0], [32.0, 345.0], [32.1, 345.0], [32.2, 345.0], [32.3, 345.0], [32.4, 345.0], [32.5, 350.0], [32.6, 350.0], [32.7, 350.0], [32.8, 350.0], [32.9, 350.0], [33.0, 350.0], [33.1, 350.0], [33.2, 354.0], [33.3, 354.0], [33.4, 354.0], [33.5, 354.0], [33.6, 354.0], [33.7, 354.0], [33.8, 371.0], [33.9, 371.0], [34.0, 371.0], [34.1, 371.0], [34.2, 371.0], [34.3, 371.0], [34.4, 378.0], [34.5, 378.0], [34.6, 378.0], [34.7, 378.0], [34.8, 378.0], [34.9, 378.0], [35.0, 381.0], [35.1, 381.0], [35.2, 381.0], [35.3, 381.0], [35.4, 381.0], [35.5, 381.0], [35.6, 381.0], [35.7, 383.0], [35.8, 383.0], [35.9, 383.0], [36.0, 383.0], [36.1, 383.0], [36.2, 383.0], [36.3, 388.0], [36.4, 388.0], [36.5, 388.0], [36.6, 388.0], [36.7, 388.0], [36.8, 388.0], [36.9, 400.0], [37.0, 400.0], [37.1, 400.0], [37.2, 400.0], [37.3, 400.0], [37.4, 400.0], [37.5, 409.0], [37.6, 409.0], [37.7, 409.0], [37.8, 409.0], [37.9, 409.0], [38.0, 409.0], [38.1, 409.0], [38.2, 411.0], [38.3, 411.0], [38.4, 411.0], [38.5, 411.0], [38.6, 411.0], [38.7, 411.0], [38.8, 412.0], [38.9, 412.0], [39.0, 412.0], [39.1, 412.0], [39.2, 412.0], [39.3, 412.0], [39.4, 421.0], [39.5, 421.0], [39.6, 421.0], [39.7, 421.0], [39.8, 421.0], [39.9, 421.0], [40.0, 421.0], [40.1, 421.0], [40.2, 421.0], [40.3, 421.0], [40.4, 421.0], [40.5, 421.0], [40.6, 421.0], [40.7, 426.0], [40.8, 426.0], [40.9, 426.0], [41.0, 426.0], [41.1, 426.0], [41.2, 426.0], [41.3, 434.0], [41.4, 434.0], [41.5, 434.0], [41.6, 434.0], [41.7, 434.0], [41.8, 434.0], [41.9, 450.0], [42.0, 450.0], [42.1, 450.0], [42.2, 450.0], [42.3, 450.0], [42.4, 450.0], [42.5, 466.0], [42.6, 466.0], [42.7, 466.0], [42.8, 466.0], [42.9, 466.0], [43.0, 466.0], [43.1, 466.0], [43.2, 481.0], [43.3, 481.0], [43.4, 481.0], [43.5, 481.0], [43.6, 481.0], [43.7, 481.0], [43.8, 487.0], [43.9, 487.0], [44.0, 487.0], [44.1, 487.0], [44.2, 487.0], [44.3, 487.0], [44.4, 488.0], [44.5, 488.0], [44.6, 488.0], [44.7, 488.0], [44.8, 488.0], [44.9, 488.0], [45.0, 495.0], [45.1, 495.0], [45.2, 495.0], [45.3, 495.0], [45.4, 495.0], [45.5, 495.0], [45.6, 495.0], [45.7, 496.0], [45.8, 496.0], [45.9, 496.0], [46.0, 496.0], [46.1, 496.0], [46.2, 496.0], [46.3, 502.0], [46.4, 502.0], [46.5, 502.0], [46.6, 502.0], [46.7, 502.0], [46.8, 502.0], [46.9, 505.0], [47.0, 505.0], [47.1, 505.0], [47.2, 505.0], [47.3, 505.0], [47.4, 505.0], [47.5, 508.0], [47.6, 508.0], [47.7, 508.0], [47.8, 508.0], [47.9, 508.0], [48.0, 508.0], [48.1, 508.0], [48.2, 515.0], [48.3, 515.0], [48.4, 515.0], [48.5, 515.0], [48.6, 515.0], [48.7, 515.0], [48.8, 527.0], [48.9, 527.0], [49.0, 527.0], [49.1, 527.0], [49.2, 527.0], [49.3, 527.0], [49.4, 527.0], [49.5, 527.0], [49.6, 527.0], [49.7, 527.0], [49.8, 527.0], [49.9, 527.0], [50.0, 531.0], [50.1, 531.0], [50.2, 531.0], [50.3, 531.0], [50.4, 531.0], [50.5, 531.0], [50.6, 531.0], [50.7, 532.0], [50.8, 532.0], [50.9, 532.0], [51.0, 532.0], [51.1, 532.0], [51.2, 532.0], [51.3, 549.0], [51.4, 549.0], [51.5, 549.0], [51.6, 549.0], [51.7, 549.0], [51.8, 549.0], [51.9, 559.0], [52.0, 559.0], [52.1, 559.0], [52.2, 559.0], [52.3, 559.0], [52.4, 559.0], [52.5, 565.0], [52.6, 565.0], [52.7, 565.0], [52.8, 565.0], [52.9, 565.0], [53.0, 565.0], [53.1, 565.0], [53.2, 579.0], [53.3, 579.0], [53.4, 579.0], [53.5, 579.0], [53.6, 579.0], [53.7, 579.0], [53.8, 589.0], [53.9, 589.0], [54.0, 589.0], [54.1, 589.0], [54.2, 589.0], [54.3, 589.0], [54.4, 590.0], [54.5, 590.0], [54.6, 590.0], [54.7, 590.0], [54.8, 590.0], [54.9, 590.0], [55.0, 592.0], [55.1, 592.0], [55.2, 592.0], [55.3, 592.0], [55.4, 592.0], [55.5, 592.0], [55.6, 592.0], [55.7, 597.0], [55.8, 597.0], [55.9, 597.0], [56.0, 597.0], [56.1, 597.0], [56.2, 597.0], [56.3, 623.0], [56.4, 623.0], [56.5, 623.0], [56.6, 623.0], [56.7, 623.0], [56.8, 623.0], [56.9, 658.0], [57.0, 658.0], [57.1, 658.0], [57.2, 658.0], [57.3, 658.0], [57.4, 658.0], [57.5, 673.0], [57.6, 673.0], [57.7, 673.0], [57.8, 673.0], [57.9, 673.0], [58.0, 673.0], [58.1, 673.0], [58.2, 675.0], [58.3, 675.0], [58.4, 675.0], [58.5, 675.0], [58.6, 675.0], [58.7, 675.0], [58.8, 682.0], [58.9, 682.0], [59.0, 682.0], [59.1, 682.0], [59.2, 682.0], [59.3, 682.0], [59.4, 685.0], [59.5, 685.0], [59.6, 685.0], [59.7, 685.0], [59.8, 685.0], [59.9, 685.0], [60.0, 698.0], [60.1, 698.0], [60.2, 698.0], [60.3, 698.0], [60.4, 698.0], [60.5, 698.0], [60.6, 698.0], [60.7, 703.0], [60.8, 703.0], [60.9, 703.0], [61.0, 703.0], [61.1, 703.0], [61.2, 703.0], [61.3, 718.0], [61.4, 718.0], [61.5, 718.0], [61.6, 718.0], [61.7, 718.0], [61.8, 718.0], [61.9, 725.0], [62.0, 725.0], [62.1, 725.0], [62.2, 725.0], [62.3, 725.0], [62.4, 725.0], [62.5, 749.0], [62.6, 749.0], [62.7, 749.0], [62.8, 749.0], [62.9, 749.0], [63.0, 749.0], [63.1, 749.0], [63.2, 756.0], [63.3, 756.0], [63.4, 756.0], [63.5, 756.0], [63.6, 756.0], [63.7, 756.0], [63.8, 770.0], [63.9, 770.0], [64.0, 770.0], [64.1, 770.0], [64.2, 770.0], [64.3, 770.0], [64.4, 806.0], [64.5, 806.0], [64.6, 806.0], [64.7, 806.0], [64.8, 806.0], [64.9, 806.0], [65.0, 820.0], [65.1, 820.0], [65.2, 820.0], [65.3, 820.0], [65.4, 820.0], [65.5, 820.0], [65.6, 820.0], [65.7, 823.0], [65.8, 823.0], [65.9, 823.0], [66.0, 823.0], [66.1, 823.0], [66.2, 823.0], [66.3, 834.0], [66.4, 834.0], [66.5, 834.0], [66.6, 834.0], [66.7, 834.0], [66.8, 834.0], [66.9, 855.0], [67.0, 855.0], [67.1, 855.0], [67.2, 855.0], [67.3, 855.0], [67.4, 855.0], [67.5, 877.0], [67.6, 877.0], [67.7, 877.0], [67.8, 877.0], [67.9, 877.0], [68.0, 877.0], [68.1, 877.0], [68.2, 895.0], [68.3, 895.0], [68.4, 895.0], [68.5, 895.0], [68.6, 895.0], [68.7, 895.0], [68.8, 942.0], [68.9, 942.0], [69.0, 942.0], [69.1, 942.0], [69.2, 942.0], [69.3, 942.0], [69.4, 945.0], [69.5, 945.0], [69.6, 945.0], [69.7, 945.0], [69.8, 945.0], [69.9, 945.0], [70.0, 973.0], [70.1, 973.0], [70.2, 973.0], [70.3, 973.0], [70.4, 973.0], [70.5, 973.0], [70.6, 973.0], [70.7, 982.0], [70.8, 982.0], [70.9, 982.0], [71.0, 982.0], [71.1, 982.0], [71.2, 982.0], [71.3, 1003.0], [71.4, 1003.0], [71.5, 1003.0], [71.6, 1003.0], [71.7, 1003.0], [71.8, 1003.0], [71.9, 1072.0], [72.0, 1072.0], [72.1, 1072.0], [72.2, 1072.0], [72.3, 1072.0], [72.4, 1072.0], [72.5, 1079.0], [72.6, 1079.0], [72.7, 1079.0], [72.8, 1079.0], [72.9, 1079.0], [73.0, 1079.0], [73.1, 1079.0], [73.2, 1094.0], [73.3, 1094.0], [73.4, 1094.0], [73.5, 1094.0], [73.6, 1094.0], [73.7, 1094.0], [73.8, 1106.0], [73.9, 1106.0], [74.0, 1106.0], [74.1, 1106.0], [74.2, 1106.0], [74.3, 1106.0], [74.4, 1110.0], [74.5, 1110.0], [74.6, 1110.0], [74.7, 1110.0], [74.8, 1110.0], [74.9, 1110.0], [75.0, 1155.0], [75.1, 1155.0], [75.2, 1155.0], [75.3, 1155.0], [75.4, 1155.0], [75.5, 1155.0], [75.6, 1155.0], [75.7, 1159.0], [75.8, 1159.0], [75.9, 1159.0], [76.0, 1159.0], [76.1, 1159.0], [76.2, 1159.0], [76.3, 1181.0], [76.4, 1181.0], [76.5, 1181.0], [76.6, 1181.0], [76.7, 1181.0], [76.8, 1181.0], [76.9, 1220.0], [77.0, 1220.0], [77.1, 1220.0], [77.2, 1220.0], [77.3, 1220.0], [77.4, 1220.0], [77.5, 1232.0], [77.6, 1232.0], [77.7, 1232.0], [77.8, 1232.0], [77.9, 1232.0], [78.0, 1232.0], [78.1, 1232.0], [78.2, 1235.0], [78.3, 1235.0], [78.4, 1235.0], [78.5, 1235.0], [78.6, 1235.0], [78.7, 1235.0], [78.8, 1243.0], [78.9, 1243.0], [79.0, 1243.0], [79.1, 1243.0], [79.2, 1243.0], [79.3, 1243.0], [79.4, 1262.0], [79.5, 1262.0], [79.6, 1262.0], [79.7, 1262.0], [79.8, 1262.0], [79.9, 1262.0], [80.0, 1268.0], [80.1, 1268.0], [80.2, 1268.0], [80.3, 1268.0], [80.4, 1268.0], [80.5, 1268.0], [80.6, 1268.0], [80.7, 1270.0], [80.8, 1270.0], [80.9, 1270.0], [81.0, 1270.0], [81.1, 1270.0], [81.2, 1270.0], [81.3, 1283.0], [81.4, 1283.0], [81.5, 1283.0], [81.6, 1283.0], [81.7, 1283.0], [81.8, 1283.0], [81.9, 1350.0], [82.0, 1350.0], [82.1, 1350.0], [82.2, 1350.0], [82.3, 1350.0], [82.4, 1350.0], [82.5, 1369.0], [82.6, 1369.0], [82.7, 1369.0], [82.8, 1369.0], [82.9, 1369.0], [83.0, 1369.0], [83.1, 1369.0], [83.2, 1386.0], [83.3, 1386.0], [83.4, 1386.0], [83.5, 1386.0], [83.6, 1386.0], [83.7, 1386.0], [83.8, 1499.0], [83.9, 1499.0], [84.0, 1499.0], [84.1, 1499.0], [84.2, 1499.0], [84.3, 1499.0], [84.4, 1508.0], [84.5, 1508.0], [84.6, 1508.0], [84.7, 1508.0], [84.8, 1508.0], [84.9, 1508.0], [85.0, 1569.0], [85.1, 1569.0], [85.2, 1569.0], [85.3, 1569.0], [85.4, 1569.0], [85.5, 1569.0], [85.6, 1569.0], [85.7, 1575.0], [85.8, 1575.0], [85.9, 1575.0], [86.0, 1575.0], [86.1, 1575.0], [86.2, 1575.0], [86.3, 1632.0], [86.4, 1632.0], [86.5, 1632.0], [86.6, 1632.0], [86.7, 1632.0], [86.8, 1632.0], [86.9, 1641.0], [87.0, 1641.0], [87.1, 1641.0], [87.2, 1641.0], [87.3, 1641.0], [87.4, 1641.0], [87.5, 1700.0], [87.6, 1700.0], [87.7, 1700.0], [87.8, 1700.0], [87.9, 1700.0], [88.0, 1700.0], [88.1, 1700.0], [88.2, 1886.0], [88.3, 1886.0], [88.4, 1886.0], [88.5, 1886.0], [88.6, 1886.0], [88.7, 1886.0], [88.8, 1933.0], [88.9, 1933.0], [89.0, 1933.0], [89.1, 1933.0], [89.2, 1933.0], [89.3, 1933.0], [89.4, 1956.0], [89.5, 1956.0], [89.6, 1956.0], [89.7, 1956.0], [89.8, 1956.0], [89.9, 1956.0], [90.0, 1970.0], [90.1, 1970.0], [90.2, 1970.0], [90.3, 1970.0], [90.4, 1970.0], [90.5, 1970.0], [90.6, 1970.0], [90.7, 1983.0], [90.8, 1983.0], [90.9, 1983.0], [91.0, 1983.0], [91.1, 1983.0], [91.2, 1983.0], [91.3, 1993.0], [91.4, 1993.0], [91.5, 1993.0], [91.6, 1993.0], [91.7, 1993.0], [91.8, 1993.0], [91.9, 2001.0], [92.0, 2001.0], [92.1, 2001.0], [92.2, 2001.0], [92.3, 2001.0], [92.4, 2001.0], [92.5, 2035.0], [92.6, 2035.0], [92.7, 2035.0], [92.8, 2035.0], [92.9, 2035.0], [93.0, 2035.0], [93.1, 2035.0], [93.2, 2112.0], [93.3, 2112.0], [93.4, 2112.0], [93.5, 2112.0], [93.6, 2112.0], [93.7, 2112.0], [93.8, 2119.0], [93.9, 2119.0], [94.0, 2119.0], [94.1, 2119.0], [94.2, 2119.0], [94.3, 2119.0], [94.4, 2120.0], [94.5, 2120.0], [94.6, 2120.0], [94.7, 2120.0], [94.8, 2120.0], [94.9, 2120.0], [95.0, 2131.0], [95.1, 2131.0], [95.2, 2131.0], [95.3, 2131.0], [95.4, 2131.0], [95.5, 2131.0], [95.6, 2131.0], [95.7, 2132.0], [95.8, 2132.0], [95.9, 2132.0], [96.0, 2132.0], [96.1, 2132.0], [96.2, 2132.0], [96.3, 2136.0], [96.4, 2136.0], [96.5, 2136.0], [96.6, 2136.0], [96.7, 2136.0], [96.8, 2136.0], [96.9, 2173.0], [97.0, 2173.0], [97.1, 2173.0], [97.2, 2173.0], [97.3, 2173.0], [97.4, 2173.0], [97.5, 2242.0], [97.6, 2242.0], [97.7, 2242.0], [97.8, 2242.0], [97.9, 2242.0], [98.0, 2242.0], [98.1, 2242.0], [98.2, 2303.0], [98.3, 2303.0], [98.4, 2303.0], [98.5, 2303.0], [98.6, 2303.0], [98.7, 2303.0], [98.8, 2359.0], [98.9, 2359.0], [99.0, 2359.0], [99.1, 2359.0], [99.2, 2359.0], [99.3, 2359.0], [99.4, 2760.0], [99.5, 2760.0], [99.6, 2760.0], [99.7, 2760.0], [99.8, 2760.0], [99.9, 2760.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 1.0], [41.8, 1.0], [41.9, 1.0], [42.0, 1.0], [42.1, 1.0], [42.2, 1.0], [42.3, 1.0], [42.4, 1.0], [42.5, 1.0], [42.6, 1.0], [42.7, 1.0], [42.8, 1.0], [42.9, 1.0], [43.0, 1.0], [43.1, 1.0], [43.2, 1.0], [43.3, 1.0], [43.4, 1.0], [43.5, 1.0], [43.6, 1.0], [43.7, 1.0], [43.8, 1.0], [43.9, 2.0], [44.0, 2.0], [44.1, 2.0], [44.2, 2.0], [44.3, 2.0], [44.4, 2.0], [44.5, 2.0], [44.6, 2.0], [44.7, 2.0], [44.8, 2.0], [44.9, 2.0], [45.0, 2.0], [45.1, 2.0], [45.2, 2.0], [45.3, 2.0], [45.4, 2.0], [45.5, 2.0], [45.6, 2.0], [45.7, 2.0], [45.8, 2.0], [45.9, 2.0], [46.0, 2.0], [46.1, 2.0], [46.2, 2.0], [46.3, 2.0], [46.4, 2.0], [46.5, 2.0], [46.6, 2.0], [46.7, 2.0], [46.8, 2.0], [46.9, 2.0], [47.0, 2.0], [47.1, 2.0], [47.2, 2.0], [47.3, 2.0], [47.4, 2.0], [47.5, 2.0], [47.6, 2.0], [47.7, 2.0], [47.8, 2.0], [47.9, 2.0], [48.0, 2.0], [48.1, 2.0], [48.2, 2.0], [48.3, 2.0], [48.4, 2.0], [48.5, 2.0], [48.6, 2.0], [48.7, 3.0], [48.8, 3.0], [48.9, 3.0], [49.0, 3.0], [49.1, 3.0], [49.2, 3.0], [49.3, 3.0], [49.4, 3.0], [49.5, 4.0], [49.6, 4.0], [49.7, 4.0], [49.8, 4.0], [49.9, 4.0], [50.0, 4.0], [50.1, 5.0], [50.2, 5.0], [50.3, 6.0], [50.4, 6.0], [50.5, 7.0], [50.6, 10.0], [50.7, 17.0], [50.8, 27.0], [50.9, 33.0], [51.0, 38.0], [51.1, 39.0], [51.2, 41.0], [51.3, 42.0], [51.4, 42.0], [51.5, 43.0], [51.6, 44.0], [51.7, 45.0], [51.8, 46.0], [51.9, 47.0], [52.0, 47.0], [52.1, 48.0], [52.2, 48.0], [52.3, 49.0], [52.4, 50.0], [52.5, 50.0], [52.6, 51.0], [52.7, 51.0], [52.8, 52.0], [52.9, 53.0], [53.0, 54.0], [53.1, 55.0], [53.2, 56.0], [53.3, 57.0], [53.4, 58.0], [53.5, 59.0], [53.6, 59.0], [53.7, 60.0], [53.8, 62.0], [53.9, 63.0], [54.0, 64.0], [54.1, 65.0], [54.2, 67.0], [54.3, 69.0], [54.4, 70.0], [54.5, 72.0], [54.6, 74.0], [54.7, 76.0], [54.8, 78.0], [54.9, 80.0], [55.0, 82.0], [55.1, 84.0], [55.2, 86.0], [55.3, 89.0], [55.4, 91.0], [55.5, 95.0], [55.6, 100.0], [55.7, 104.0], [55.8, 106.0], [55.9, 108.0], [56.0, 112.0], [56.1, 116.0], [56.2, 121.0], [56.3, 128.0], [56.4, 131.0], [56.5, 135.0], [56.6, 142.0], [56.7, 150.0], [56.8, 157.0], [56.9, 165.0], [57.0, 175.0], [57.1, 200.0], [57.2, 243.0], [57.3, 276.0], [57.4, 324.0], [57.5, 386.0], [57.6, 434.0], [57.7, 477.0], [57.8, 524.0], [57.9, 548.0], [58.0, 578.0], [58.1, 605.0], [58.2, 643.0], [58.3, 675.0], [58.4, 698.0], [58.5, 716.0], [58.6, 738.0], [58.7, 756.0], [58.8, 772.0], [58.9, 791.0], [59.0, 802.0], [59.1, 816.0], [59.2, 826.0], [59.3, 847.0], [59.4, 862.0], [59.5, 879.0], [59.6, 903.0], [59.7, 917.0], [59.8, 931.0], [59.9, 947.0], [60.0, 957.0], [60.1, 973.0], [60.2, 988.0], [60.3, 1002.0], [60.4, 1020.0], [60.5, 1034.0], [60.6, 1047.0], [60.7, 1059.0], [60.8, 1067.0], [60.9, 1084.0], [61.0, 1101.0], [61.1, 1115.0], [61.2, 1125.0], [61.3, 1138.0], [61.4, 1149.0], [61.5, 1163.0], [61.6, 1177.0], [61.7, 1190.0], [61.8, 1203.0], [61.9, 1213.0], [62.0, 1227.0], [62.1, 1240.0], [62.2, 1250.0], [62.3, 1262.0], [62.4, 1271.0], [62.5, 1282.0], [62.6, 1293.0], [62.7, 1307.0], [62.8, 1319.0], [62.9, 1328.0], [63.0, 1341.0], [63.1, 1352.0], [63.2, 1360.0], [63.3, 1371.0], [63.4, 1376.0], [63.5, 1385.0], [63.6, 1397.0], [63.7, 1407.0], [63.8, 1420.0], [63.9, 1432.0], [64.0, 1439.0], [64.1, 1449.0], [64.2, 1459.0], [64.3, 1468.0], [64.4, 1479.0], [64.5, 1488.0], [64.6, 1498.0], [64.7, 1515.0], [64.8, 1522.0], [64.9, 1531.0], [65.0, 1544.0], [65.1, 1555.0], [65.2, 1566.0], [65.3, 1573.0], [65.4, 1582.0], [65.5, 1590.0], [65.6, 1598.0], [65.7, 1607.0], [65.8, 1615.0], [65.9, 1620.0], [66.0, 1628.0], [66.1, 1641.0], [66.2, 1650.0], [66.3, 1659.0], [66.4, 1668.0], [66.5, 1680.0], [66.6, 1688.0], [66.7, 1698.0], [66.8, 1703.0], [66.9, 1711.0], [67.0, 1723.0], [67.1, 1729.0], [67.2, 1736.0], [67.3, 1744.0], [67.4, 1755.0], [67.5, 1770.0], [67.6, 1775.0], [67.7, 1782.0], [67.8, 1792.0], [67.9, 1801.0], [68.0, 1811.0], [68.1, 1817.0], [68.2, 1823.0], [68.3, 1832.0], [68.4, 1844.0], [68.5, 1852.0], [68.6, 1860.0], [68.7, 1871.0], [68.8, 1877.0], [68.9, 1883.0], [69.0, 1890.0], [69.1, 1897.0], [69.2, 1905.0], [69.3, 1913.0], [69.4, 1921.0], [69.5, 1929.0], [69.6, 1937.0], [69.7, 1944.0], [69.8, 1950.0], [69.9, 1958.0], [70.0, 1964.0], [70.1, 1969.0], [70.2, 1975.0], [70.3, 1980.0], [70.4, 1985.0], [70.5, 1990.0], [70.6, 1997.0], [70.7, 2004.0], [70.8, 2011.0], [70.9, 2018.0], [71.0, 2025.0], [71.1, 2031.0], [71.2, 2035.0], [71.3, 2041.0], [71.4, 2048.0], [71.5, 2053.0], [71.6, 2059.0], [71.7, 2066.0], [71.8, 2070.0], [71.9, 2075.0], [72.0, 2079.0], [72.1, 2085.0], [72.2, 2089.0], [72.3, 2093.0], [72.4, 2099.0], [72.5, 2104.0], [72.6, 2112.0], [72.7, 2116.0], [72.8, 2123.0], [72.9, 2126.0], [73.0, 2132.0], [73.1, 2136.0], [73.2, 2141.0], [73.3, 2144.0], [73.4, 2150.0], [73.5, 2158.0], [73.6, 2161.0], [73.7, 2168.0], [73.8, 2173.0], [73.9, 2178.0], [74.0, 2183.0], [74.1, 2188.0], [74.2, 2193.0], [74.3, 2195.0], [74.4, 2202.0], [74.5, 2207.0], [74.6, 2212.0], [74.7, 2216.0], [74.8, 2220.0], [74.9, 2226.0], [75.0, 2229.0], [75.1, 2233.0], [75.2, 2236.0], [75.3, 2241.0], [75.4, 2245.0], [75.5, 2250.0], [75.6, 2254.0], [75.7, 2258.0], [75.8, 2264.0], [75.9, 2267.0], [76.0, 2272.0], [76.1, 2276.0], [76.2, 2280.0], [76.3, 2283.0], [76.4, 2288.0], [76.5, 2293.0], [76.6, 2298.0], [76.7, 2302.0], [76.8, 2308.0], [76.9, 2314.0], [77.0, 2319.0], [77.1, 2322.0], [77.2, 2327.0], [77.3, 2330.0], [77.4, 2335.0], [77.5, 2341.0], [77.6, 2344.0], [77.7, 2348.0], [77.8, 2354.0], [77.9, 2357.0], [78.0, 2361.0], [78.1, 2367.0], [78.2, 2370.0], [78.3, 2374.0], [78.4, 2378.0], [78.5, 2387.0], [78.6, 2391.0], [78.7, 2395.0], [78.8, 2399.0], [78.9, 2402.0], [79.0, 2405.0], [79.1, 2410.0], [79.2, 2416.0], [79.3, 2419.0], [79.4, 2423.0], [79.5, 2428.0], [79.6, 2432.0], [79.7, 2437.0], [79.8, 2439.0], [79.9, 2444.0], [80.0, 2447.0], [80.1, 2450.0], [80.2, 2455.0], [80.3, 2459.0], [80.4, 2462.0], [80.5, 2465.0], [80.6, 2469.0], [80.7, 2471.0], [80.8, 2474.0], [80.9, 2478.0], [81.0, 2481.0], [81.1, 2483.0], [81.2, 2487.0], [81.3, 2491.0], [81.4, 2496.0], [81.5, 2500.0], [81.6, 2504.0], [81.7, 2509.0], [81.8, 2514.0], [81.9, 2522.0], [82.0, 2525.0], [82.1, 2528.0], [82.2, 2533.0], [82.3, 2535.0], [82.4, 2538.0], [82.5, 2545.0], [82.6, 2548.0], [82.7, 2552.0], [82.8, 2556.0], [82.9, 2559.0], [83.0, 2563.0], [83.1, 2567.0], [83.2, 2572.0], [83.3, 2575.0], [83.4, 2579.0], [83.5, 2585.0], [83.6, 2590.0], [83.7, 2593.0], [83.8, 2594.0], [83.9, 2598.0], [84.0, 2601.0], [84.1, 2605.0], [84.2, 2609.0], [84.3, 2615.0], [84.4, 2620.0], [84.5, 2624.0], [84.6, 2627.0], [84.7, 2634.0], [84.8, 2638.0], [84.9, 2640.0], [85.0, 2643.0], [85.1, 2646.0], [85.2, 2651.0], [85.3, 2654.0], [85.4, 2658.0], [85.5, 2663.0], [85.6, 2666.0], [85.7, 2671.0], [85.8, 2674.0], [85.9, 2676.0], [86.0, 2679.0], [86.1, 2682.0], [86.2, 2687.0], [86.3, 2690.0], [86.4, 2696.0], [86.5, 2700.0], [86.6, 2703.0], [86.7, 2707.0], [86.8, 2711.0], [86.9, 2717.0], [87.0, 2722.0], [87.1, 2725.0], [87.2, 2728.0], [87.3, 2732.0], [87.4, 2737.0], [87.5, 2740.0], [87.6, 2743.0], [87.7, 2748.0], [87.8, 2751.0], [87.9, 2754.0], [88.0, 2759.0], [88.1, 2762.0], [88.2, 2765.0], [88.3, 2769.0], [88.4, 2772.0], [88.5, 2779.0], [88.6, 2783.0], [88.7, 2789.0], [88.8, 2795.0], [88.9, 2802.0], [89.0, 2807.0], [89.1, 2811.0], [89.2, 2817.0], [89.3, 2822.0], [89.4, 2826.0], [89.5, 2830.0], [89.6, 2833.0], [89.7, 2840.0], [89.8, 2847.0], [89.9, 2854.0], [90.0, 2859.0], [90.1, 2865.0], [90.2, 2870.0], [90.3, 2875.0], [90.4, 2881.0], [90.5, 2889.0], [90.6, 2896.0], [90.7, 2903.0], [90.8, 2908.0], [90.9, 2914.0], [91.0, 2918.0], [91.1, 2923.0], [91.2, 2929.0], [91.3, 2937.0], [91.4, 2947.0], [91.5, 2958.0], [91.6, 2964.0], [91.7, 2972.0], [91.8, 2981.0], [91.9, 2987.0], [92.0, 2995.0], [92.1, 3003.0], [92.2, 3005.0], [92.3, 3006.0], [92.4, 3007.0], [92.5, 3012.0], [92.6, 3022.0], [92.7, 3029.0], [92.8, 3040.0], [92.9, 3050.0], [93.0, 3058.0], [93.1, 3071.0], [93.2, 3081.0], [93.3, 3092.0], [93.4, 3103.0], [93.5, 3114.0], [93.6, 3130.0], [93.7, 3142.0], [93.8, 3154.0], [93.9, 3172.0], [94.0, 3187.0], [94.1, 3199.0], [94.2, 3217.0], [94.3, 3228.0], [94.4, 3245.0], [94.5, 3259.0], [94.6, 3283.0], [94.7, 3301.0], [94.8, 3329.0], [94.9, 3354.0], [95.0, 3378.0], [95.1, 3399.0], [95.2, 3427.0], [95.3, 3445.0], [95.4, 3485.0], [95.5, 3511.0], [95.6, 3538.0], [95.7, 3554.0], [95.8, 3599.0], [95.9, 3639.0], [96.0, 3681.0], [96.1, 3718.0], [96.2, 3755.0], [96.3, 3814.0], [96.4, 3857.0], [96.5, 3903.0], [96.6, 3956.0], [96.7, 3998.0], [96.8, 4053.0], [96.9, 4133.0], [97.0, 4191.0], [97.1, 4293.0], [97.2, 4371.0], [97.3, 4470.0], [97.4, 4684.0], [97.5, 4841.0], [97.6, 5188.0], [97.7, 5491.0], [97.8, 5787.0], [97.9, 6737.0], [98.0, 8005.0], [98.1, 8006.0], [98.2, 8008.0], [98.3, 12006.0], [98.4, 16004.0], [98.5, 16005.0], [98.6, 16005.0], [98.7, 16006.0], [98.8, 16006.0], [98.9, 16007.0], [99.0, 20004.0], [99.1, 20004.0], [99.2, 20005.0], [99.3, 20005.0], [99.4, 20005.0], [99.5, 20005.0], [99.6, 20006.0], [99.7, 20006.0], [99.8, 20006.0], [99.9, 20006.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 9422.0, "series": [{"data": [[0.0, 9422.0], [600.0, 67.0], [700.0, 90.0], [800.0, 90.0], [900.0, 104.0], [1000.0, 95.0], [1100.0, 121.0], [1200.0, 118.0], [1300.0, 131.0], [1400.0, 116.0], [1500.0, 124.0], [1600.0, 127.0], [1700.0, 152.0], [1800.0, 178.0], [1900.0, 202.0], [2000.0, 243.0], [2100.0, 330.0], [2300.0, 370.0], [2200.0, 319.0], [2400.0, 401.0], [2500.0, 449.0], [2600.0, 433.0], [2700.0, 348.0], [2800.0, 335.0], [2900.0, 234.0], [3000.0, 179.0], [3100.0, 135.0], [3300.0, 88.0], [3200.0, 112.0], [3400.0, 79.0], [3500.0, 64.0], [3700.0, 45.0], [3600.0, 38.0], [3800.0, 45.0], [3900.0, 35.0], [4000.0, 18.0], [4200.0, 27.0], [4300.0, 16.0], [4100.0, 20.0], [4600.0, 9.0], [4500.0, 8.0], [4400.0, 13.0], [4800.0, 6.0], [4700.0, 8.0], [5100.0, 8.0], [4900.0, 12.0], [5000.0, 3.0], [5200.0, 5.0], [5300.0, 2.0], [5400.0, 1.0], [5600.0, 1.0], [5800.0, 1.0], [6000.0, 1.0], [20000.0, 6.0], [100.0, 226.0], [200.0, 47.0], [300.0, 42.0], [400.0, 51.0], [500.0, 50.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[2100.0, 7.0], [2300.0, 2.0], [2200.0, 1.0], [600.0, 7.0], [2700.0, 1.0], [700.0, 6.0], [800.0, 7.0], [200.0, 24.0], [900.0, 4.0], [1000.0, 4.0], [1100.0, 5.0], [300.0, 15.0], [1200.0, 8.0], [1300.0, 3.0], [1400.0, 1.0], [1500.0, 3.0], [100.0, 20.0], [400.0, 15.0], [1600.0, 2.0], [1700.0, 1.0], [1800.0, 1.0], [1900.0, 5.0], [500.0, 16.0], [2000.0, 2.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 8893.0], [600.0, 52.0], [700.0, 92.0], [800.0, 96.0], [900.0, 110.0], [1000.0, 113.0], [1100.0, 125.0], [1200.0, 141.0], [1300.0, 156.0], [1400.0, 159.0], [1500.0, 160.0], [1600.0, 180.0], [1700.0, 182.0], [1800.0, 200.0], [1900.0, 243.0], [2000.0, 282.0], [2100.0, 310.0], [2200.0, 366.0], [2300.0, 348.0], [2400.0, 430.0], [2500.0, 390.0], [2600.0, 408.0], [2700.0, 378.0], [2800.0, 288.0], [2900.0, 225.0], [3000.0, 210.0], [3100.0, 119.0], [3200.0, 93.0], [3300.0, 68.0], [3400.0, 55.0], [3500.0, 57.0], [3600.0, 40.0], [3700.0, 31.0], [3800.0, 39.0], [3900.0, 33.0], [4000.0, 23.0], [4200.0, 18.0], [4100.0, 26.0], [4300.0, 15.0], [4400.0, 19.0], [4600.0, 8.0], [4500.0, 5.0], [4700.0, 12.0], [4800.0, 6.0], [4900.0, 3.0], [5000.0, 7.0], [5100.0, 2.0], [5300.0, 2.0], [5200.0, 8.0], [5500.0, 4.0], [5600.0, 7.0], [5400.0, 6.0], [5700.0, 5.0], [5800.0, 2.0], [6000.0, 2.0], [5900.0, 2.0], [6200.0, 2.0], [6300.0, 3.0], [6400.0, 2.0], [6600.0, 2.0], [6700.0, 1.0], [6900.0, 2.0], [6800.0, 2.0], [7200.0, 1.0], [7400.0, 3.0], [7300.0, 1.0], [7500.0, 1.0], [7700.0, 3.0], [7800.0, 1.0], [8000.0, 45.0], [12000.0, 15.0], [16000.0, 97.0], [20000.0, 163.0], [21000.0, 1.0], [100.0, 242.0], [200.0, 42.0], [300.0, 26.0], [400.0, 38.0], [500.0, 53.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2141.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 16455.0, "series": [{"data": [[0.0, 3126.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2141.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 10438.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 16455.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 38.96024464831806, "minX": 1.58543256E12, "maxY": 160.0, "series": [{"data": [[1.58543268E12, 160.0], [1.58543316E12, 137.41601460615556], [1.58543286E12, 160.0], [1.5854328E12, 160.0], [1.58543298E12, 160.0], [1.58543292E12, 160.0], [1.58543262E12, 144.16207529843882], [1.5854331E12, 160.0], [1.58543256E12, 61.28848223896666], [1.58543304E12, 160.0], [1.58543274E12, 160.0], [1.58543322E12, 38.96024464831806]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543322E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.2, "minX": 2.0, "maxY": 2242.0, "series": [{"data": [[2.0, 59.0], [4.0, 53.333333333333336], [5.0, 49.0], [6.0, 67.0], [7.0, 53.0], [9.0, 51.666666666666664], [11.0, 59.0], [13.0, 41.0], [14.0, 50.0], [15.0, 66.0], [16.0, 46.0], [17.0, 54.12500000000001], [18.0, 49.333333333333336], [19.0, 62.5], [20.0, 60.25], [21.0, 50.39999999999999], [22.0, 59.0], [23.0, 50.57142857142857], [24.0, 47.666666666666664], [25.0, 52.22222222222222], [26.0, 49.4], [27.0, 75.6], [28.0, 54.5], [29.0, 49.5], [30.0, 47.66666666666667], [31.0, 71.0], [32.0, 129.33333333333334], [33.0, 183.8], [34.0, 289.44444444444446], [35.0, 53.625], [36.0, 53.142857142857146], [37.0, 47.285714285714285], [38.0, 51.666666666666664], [39.0, 55.0], [40.0, 62.2], [41.0, 105.5], [42.0, 46.9], [43.0, 80.5], [44.0, 93.1], [45.0, 76.28571428571429], [46.0, 65.57142857142857], [47.0, 54.75], [48.0, 59.25], [49.0, 61.7], [50.0, 58.22222222222222], [51.0, 55.00000000000001], [52.0, 108.85714285714286], [53.0, 74.88888888888889], [54.0, 101.57142857142857], [55.0, 71.85714285714286], [56.0, 47.3], [57.0, 69.0], [58.0, 58.57894736842105], [59.0, 62.45], [60.0, 71.875], [61.0, 62.9090909090909], [62.0, 118.28571428571428], [63.0, 89.25], [64.0, 105.23076923076924], [65.0, 82.92307692307693], [66.0, 62.99999999999999], [67.0, 58.51612903225807], [68.0, 91.125], [69.0, 78.44444444444443], [70.0, 51.88888888888889], [71.0, 54.15384615384615], [72.0, 63.12500000000001], [73.0, 80.46666666666667], [74.0, 65.26666666666668], [75.0, 56.35000000000001], [76.0, 55.19047619047619], [77.0, 61.53846153846155], [78.0, 75.83333333333334], [79.0, 512.0952380952382], [80.0, 59.5], [81.0, 415.76923076923083], [82.0, 600.4166666666667], [83.0, 756.1290322580645], [84.0, 575.8333333333333], [85.0, 154.36363636363637], [86.0, 224.125], [87.0, 149.9090909090909], [88.0, 94.25000000000001], [89.0, 83.06666666666665], [90.0, 97.63636363636364], [91.0, 78.16666666666667], [92.0, 100.18750000000001], [93.0, 81.9230769230769], [94.0, 107.09999999999998], [95.0, 86.71428571428571], [96.0, 112.27777777777781], [97.0, 253.36363636363635], [98.0, 545.0769230769231], [99.0, 294.83333333333337], [100.0, 223.25], [101.0, 367.54166666666663], [102.0, 372.30434782608694], [103.0, 503.375], [104.0, 1589.6829268292686], [105.0, 357.5], [106.0, 486.625], [107.0, 641.5], [108.0, 737.6249999999999], [109.0, 494.8888888888889], [110.0, 211.61904761904765], [111.0, 282.99999999999994], [112.0, 384.4117647058824], [113.0, 324.69230769230774], [114.0, 435.5000000000001], [115.0, 382.8750000000001], [116.0, 792.5], [117.0, 812.8333333333334], [118.0, 596.8888888888889], [119.0, 492.7222222222223], [120.0, 723.7777777777778], [122.0, 827.5000000000001], [123.0, 169.75], [121.0, 1.2], [124.0, 555.5555555555557], [125.0, 609.1428571428571], [126.0, 289.44827586206895], [127.0, 393.0], [128.0, 1028.875], [129.0, 978.0000000000001], [130.0, 485.62499999999994], [131.0, 552.3548387096771], [132.0, 335.3235294117647], [133.0, 227.1935483870968], [134.0, 704.2142857142857], [135.0, 553.2142857142858], [136.0, 607.7500000000001], [137.0, 515.9999999999998], [138.0, 466.9090909090909], [139.0, 436.46153846153845], [140.0, 579.8636363636363], [141.0, 509.5], [142.0, 769.2500000000001], [143.0, 461.5], [144.0, 994.3000000000001], [145.0, 885.0666666666667], [146.0, 323.6923076923077], [147.0, 300.77272727272725], [148.0, 736.3076923076924], [149.0, 523.4545454545455], [150.0, 442.5666666666666], [151.0, 988.6470588235296], [152.0, 402.0204081632653], [153.0, 204.18749999999991], [154.0, 1155.5], [155.0, 321.7333333333335], [156.0, 546.5263157894736], [157.0, 877.4999999999999], [158.0, 299.0681818181818], [159.0, 1526.3333333333335], [160.0, 1016.9074047344169]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[152.51093750000004, 926.5438124999998]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[8.0, 1803.0], [9.0, 546.3333333333334], [10.0, 203.0], [11.0, 221.0], [12.0, 282.0], [13.0, 303.0], [14.0, 161.0], [15.0, 266.0], [16.0, 175.0], [17.0, 190.0], [18.0, 196.0], [19.0, 172.0], [20.0, 174.0], [21.0, 184.0], [22.0, 180.0], [23.0, 188.0], [24.0, 167.0], [25.0, 203.0], [26.0, 178.0], [27.0, 350.0], [28.0, 185.0], [29.0, 169.0], [30.0, 161.0], [31.0, 208.0], [33.0, 372.5], [34.0, 186.0], [35.0, 258.0], [36.0, 270.0], [37.0, 195.0], [38.0, 170.0], [39.0, 219.0], [40.0, 271.0], [41.0, 326.0], [42.0, 344.0], [43.0, 319.0], [45.0, 531.0], [46.0, 316.5], [47.0, 184.0], [48.0, 272.0], [49.0, 250.0], [50.0, 259.0], [52.0, 381.0], [53.0, 409.0], [54.0, 495.0], [55.0, 349.5], [56.0, 213.0], [57.0, 217.0], [58.0, 179.0], [60.0, 388.0], [61.0, 481.0], [62.0, 502.0], [63.0, 515.0], [64.0, 527.0], [65.0, 466.0], [66.0, 505.0], [67.0, 377.0], [68.0, 371.0], [69.0, 354.0], [70.0, 195.0], [71.0, 210.0], [72.0, 328.0], [73.0, 341.0], [74.0, 262.0], [75.0, 211.0], [76.0, 214.0], [77.0, 223.0], [79.0, 532.0], [80.0, 353.0], [82.0, 559.0], [83.0, 675.0], [84.0, 597.0], [85.0, 383.0], [86.0, 426.0], [87.0, 549.0], [88.0, 412.0], [89.0, 487.0], [90.0, 434.0], [91.0, 527.0], [92.0, 658.0], [93.0, 718.0], [94.0, 698.0], [95.0, 623.0], [96.0, 590.0], [97.0, 496.0], [98.0, 589.0], [99.0, 725.0], [100.0, 579.0], [101.0, 673.0], [102.0, 703.0], [104.0, 667.5], [105.0, 488.0], [106.0, 411.0], [107.0, 592.0], [109.0, 756.0], [110.0, 820.0], [111.0, 895.0], [113.0, 991.0], [114.0, 768.5], [116.0, 1003.0], [117.0, 806.0], [118.0, 945.0], [119.0, 759.5], [121.0, 749.0], [122.0, 982.0], [124.0, 1113.5], [126.0, 1186.0], [128.0, 1283.0], [129.0, 1243.0], [131.0, 1641.0], [132.0, 1429.0], [133.0, 1235.0], [134.0, 1181.0], [135.0, 942.0], [137.0, 1220.0], [138.0, 1155.5], [140.0, 1106.0], [141.0, 1270.0], [143.0, 1442.5], [144.0, 1369.0], [146.0, 1569.0], [147.0, 1632.0], [148.0, 1700.0], [150.0, 1886.0], [151.0, 1933.0], [152.0, 1983.0], [154.0, 2211.5], [156.0, 2173.0], [157.0, 2242.0], [158.0, 2131.0], [159.0, 2052.5], [160.0, 2063.166666666667]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[82.025, 778.0250000000002]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[2.0, 58.0], [4.0, 55.0], [5.0, 50.0], [7.0, 61.666666666666664], [10.0, 56.5], [11.0, 56.166666666666664], [12.0, 53.6], [13.0, 41.0], [14.0, 44.0], [15.0, 49.0], [17.0, 52.14285714285714], [19.0, 49.0], [20.0, 50.22222222222222], [21.0, 52.00000000000001], [22.0, 56.285714285714285], [23.0, 39.0], [24.0, 54.75], [25.0, 44.8], [26.0, 46.0], [27.0, 62.5], [28.0, 47.0], [29.0, 48.0], [30.0, 57.16666666666667], [31.0, 48.857142857142854], [32.0, 96.57142857142857], [33.0, 247.0], [34.0, 356.55555555555554], [35.0, 63.5], [36.0, 55.666666666666664], [37.0, 49.0], [38.0, 43.5], [39.0, 55.25], [40.0, 64.30000000000001], [41.0, 64.33333333333333], [42.0, 54.89473684210527], [43.0, 101.8], [44.0, 114.0], [45.0, 128.0], [46.0, 59.0], [47.0, 50.666666666666664], [48.0, 70.0], [49.0, 56.529411764705884], [50.0, 56.0], [51.0, 68.0], [52.0, 87.0], [53.0, 64.13333333333334], [54.0, 67.66666666666667], [55.0, 43.857142857142854], [56.0, 50.8], [57.0, 62.25], [58.0, 52.23529411764705], [59.0, 58.73684210526317], [60.0, 109.10000000000001], [61.0, 63.166666666666664], [62.0, 101.19999999999999], [63.0, 95.875], [64.0, 109.44444444444443], [65.0, 94.5], [66.0, 54.61538461538462], [67.0, 61.0], [68.0, 73.36363636363636], [69.0, 75.0], [70.0, 48.71428571428571], [71.0, 53.76190476190475], [72.0, 76.875], [73.0, 66.78947368421052], [74.0, 62.12500000000001], [75.0, 57.733333333333334], [76.0, 57.85714285714286], [77.0, 60.0], [78.0, 92.33333333333336], [79.0, 328.14285714285717], [80.0, 253.50000000000003], [81.0, 586.0588235294117], [82.0, 393.76470588235287], [83.0, 618.8750000000001], [84.0, 533.1764705882352], [85.0, 74.25000000000001], [86.0, 251.62500000000003], [87.0, 122.25], [88.0, 79.08000000000001], [89.0, 76.11111111111109], [90.0, 90.08333333333333], [91.0, 90.70588235294117], [92.0, 103.78571428571428], [93.0, 95.9090909090909], [94.0, 103.3076923076923], [95.0, 95.92307692307692], [96.0, 131.97101449275362], [97.0, 339.93749999999994], [98.0, 551.05], [99.0, 190.07142857142858], [100.0, 319.3333333333333], [101.0, 325.2631578947368], [102.0, 172.84615384615384], [103.0, 764.7272727272727], [104.0, 1748.5205479452056], [105.0, 437.7], [106.0, 647.4285714285714], [107.0, 632.7142857142857], [108.0, 718.2], [109.0, 657.4444444444445], [110.0, 192.090909090909], [111.0, 494.84615384615387], [112.0, 560.0], [113.0, 399.8235294117648], [114.0, 612.6], [115.0, 497.5714285714285], [116.0, 831.1428571428571], [117.0, 493.27272727272725], [118.0, 485.0], [119.0, 389.0625], [120.0, 774.7500000000001], [121.0, 505.2380952380953], [122.0, 720.1111111111112], [123.0, 233.97142857142853], [124.0, 549.4000000000001], [125.0, 817.5714285714286], [126.0, 249.82352941176472], [127.0, 522.4285714285714], [128.0, 877.4166666666667], [129.0, 1070.0], [130.0, 593.25], [131.0, 279.89285714285717], [132.0, 387.05263157894717], [133.0, 289.153846153846], [134.0, 508.84999999999997], [135.0, 437.42857142857144], [136.0, 673.6470588235293], [137.0, 423.82352941176475], [138.0, 437.89473684210526], [139.0, 675.6923076923076], [140.0, 662.3571428571429], [141.0, 538.75], [142.0, 1249.8181818181818], [143.0, 736.3913043478262], [144.0, 1157.8181818181818], [145.0, 488.5652173913044], [146.0, 396.5238095238096], [147.0, 213.6744186046512], [148.0, 1279.6363636363637], [149.0, 363.2500000000001], [150.0, 750.4545454545454], [151.0, 649.6153846153846], [152.0, 397.97435897435906], [153.0, 210.46511627906958], [154.0, 683.3636363636364], [155.0, 417.6086956521739], [156.0, 434.55555555555554], [157.0, 1328.2], [158.0, 220.48000000000008], [159.0, 1550.4], [160.0, 1418.2069040225426]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[152.49600000000032, 1277.1258749999893]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 160.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.58543256E12, "maxY": 265304.48333333334, "series": [{"data": [[1.58543268E12, 232598.41666666666], [1.58543316E12, 198463.61666666667], [1.58543286E12, 259499.31666666668], [1.5854328E12, 228602.1], [1.58543298E12, 139408.03333333333], [1.58543292E12, 261982.75], [1.58543262E12, 186894.58333333334], [1.5854331E12, 175834.75], [1.58543256E12, 101218.88333333333], [1.58543304E12, 175249.66666666666], [1.58543274E12, 265304.48333333334], [1.58543322E12, 38742.88333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58543268E12, 11489.433333333332], [1.58543316E12, 5655.866666666667], [1.58543286E12, 15608.566666666668], [1.5854328E12, 16694.133333333335], [1.58543298E12, 7815.433333333333], [1.58543292E12, 16594.733333333334], [1.58543262E12, 12999.066666666668], [1.5854331E12, 0.0], [1.58543256E12, 6333.566666666667], [1.58543304E12, 0.0], [1.58543274E12, 16688.3], [1.58543322E12, 2338.366666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543322E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1.0410156249999971, "minX": 1.58543256E12, "maxY": 3294.6931818181756, "series": [{"data": [[1.58543268E12, 1409.8141025641023], [1.58543316E12, 94.22032141005701], [1.58543286E12, 2556.25524156791], [1.5854328E12, 1683.322426177176], [1.58543298E12, 897.9649122807032], [1.58543292E12, 2257.032229965159], [1.58543262E12, 1186.9943074003802], [1.5854331E12, 1.0410156249999971], [1.58543256E12, 88.95511221945145], [1.58543304E12, 1.068128425998434], [1.58543274E12, 2327.0034100596736], [1.58543322E12, 65.34104046242778]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543262E12, 1249.6470588235288], [1.58543256E12, 429.4347826086957]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58543268E12, 2589.669461914744], [1.58543316E12, 111.69816272965876], [1.58543286E12, 2609.5111706881157], [1.5854328E12, 1866.2383627608344], [1.58543298E12, 3294.6931818181756], [1.58543292E12, 2253.8985507246393], [1.58543262E12, 1748.1373106060614], [1.5854331E12, 1.4405649274225185], [1.58543256E12, 82.71559633027522], [1.58543304E12, 1.0579196217494096], [1.58543274E12, 2297.2945736434112], [1.58543322E12, 74.92207792207795]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543322E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58543256E12, "maxY": 2607.7569258266285, "series": [{"data": [[1.58543268E12, 1322.9878917378935], [1.58543316E12, 93.08709175738717], [1.58543286E12, 2555.1358249772134], [1.5854328E12, 1682.9377494014373], [1.58543298E12, 897.3038277511957], [1.58543292E12, 2256.562717770036], [1.58543262E12, 1186.3396584440231], [1.5854331E12, 0.0], [1.58543256E12, 86.66084788029931], [1.58543304E12, 0.0], [1.58543274E12, 2326.4816709292395], [1.58543322E12, 64.69364161849711]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543262E12, 1249.1176470588232], [1.58543256E12, 427.82608695652164]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58543268E12, 1338.333333333333], [1.58543316E12, 110.52703412073494], [1.58543286E12, 2607.7569258266285], [1.5854328E12, 1757.389245585871], [1.58543298E12, 821.8100649350648], [1.58543292E12, 2253.4654731457767], [1.58543262E12, 1243.3200757575762], [1.5854331E12, 0.0], [1.58543256E12, 80.02064220183482], [1.58543304E12, 0.0], [1.58543274E12, 2296.822566752796], [1.58543322E12, 74.18831168831171]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543322E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58543256E12, "maxY": 2.119565217391304, "series": [{"data": [[1.58543268E12, 0.6559829059829059], [1.58543316E12, 0.4774494556765163], [1.58543286E12, 0.7201458523245214], [1.5854328E12, 0.428571428571429], [1.58543298E12, 0.49282296650717694], [1.58543292E12, 0.5836236933797907], [1.58543262E12, 0.4857685009487666], [1.5854331E12, 0.5164062500000001], [1.58543256E12, 0.20199501246882784], [1.58543304E12, 0.5360219263899751], [1.58543274E12, 0.5694799658994026], [1.58543322E12, 0.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543262E12, 0.9705882352941174], [1.58543256E12, 2.119565217391304]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58543268E12, 1.0104821802935016], [1.58543316E12, 0.5506561679790023], [1.58543286E12, 0.620196604110814], [1.5854328E12, 0.5561797752808979], [1.58543298E12, 1.3847402597402612], [1.58543292E12, 0.7749360613810746], [1.58543262E12, 0.6534090909090908], [1.5854331E12, 0.9403687720674769], [1.58543256E12, 1.1766055045871555], [1.58543304E12, 0.5338849487785667], [1.58543274E12, 0.6210163652024109], [1.58543322E12, 0.6168831168831169]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543322E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.58543256E12, "maxY": 8024.0, "series": [{"data": [[1.58543268E12, 3709.0], [1.58543316E12, 2425.0], [1.58543286E12, 8024.0], [1.5854328E12, 5657.0], [1.58543298E12, 3636.0], [1.58543292E12, 4410.0], [1.58543262E12, 3554.0], [1.58543256E12, 2760.0], [1.58543274E12, 6023.0], [1.58543322E12, 799.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58543268E12, 557.0], [1.58543316E12, 35.0], [1.58543286E12, 1036.0], [1.5854328E12, 1.0], [1.58543298E12, 1.0], [1.58543292E12, 3.0], [1.58543262E12, 1.0], [1.58543256E12, 33.0], [1.58543274E12, 2.0], [1.58543322E12, 30.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58543268E12, 2876.2000000000003], [1.58543316E12, 1709.0], [1.58543286E12, 3278.600000000001], [1.5854328E12, 2962.0], [1.58543298E12, 3009.0], [1.58543292E12, 3286.3], [1.58543262E12, 2781.0], [1.58543256E12, 181.0], [1.58543274E12, 3929.1], [1.58543322E12, 64.19999999999999]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58543268E12, 3377.92], [1.58543316E12, 2209.000000000001], [1.58543286E12, 6383.079999999998], [1.5854328E12, 4149.4], [1.58543298E12, 3364.26], [1.58543292E12, 4022.2999999999993], [1.58543262E12, 3111.6], [1.58543256E12, 669.9000000000008], [1.58543274E12, 5152.009999999998], [1.58543322E12, 714.8399999999964]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58543268E12, 3109.3999999999996], [1.58543316E12, 1966.0], [1.58543286E12, 3760.9999999999973], [1.5854328E12, 3221.25], [1.58543298E12, 3111.399999999999], [1.58543292E12, 3622.0], [1.58543262E12, 2908.0], [1.58543256E12, 322.5], [1.58543274E12, 4381.849999999995], [1.58543322E12, 84.79999999999973]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543322E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 16006.0, "series": [{"data": [[2.0, 55.0], [3.0, 53.5], [4.0, 53.5], [5.0, 508.0], [6.0, 53.0], [8.0, 48.5], [9.0, 51.0], [10.0, 469.0], [11.0, 57.0], [12.0, 48.5], [13.0, 1579.0], [14.0, 55.5], [15.0, 48.0], [17.0, 49.0], [18.0, 41.5], [19.0, 110.0], [20.0, 352.5], [21.0, 60.0], [22.0, 1291.5], [23.0, 2419.0], [24.0, 58.5], [25.0, 2098.0], [26.0, 2641.5], [27.0, 1072.5], [28.0, 744.5], [29.0, 2392.0], [30.0, 2530.5], [31.0, 2557.5], [33.0, 2529.0], [32.0, 2270.5], [35.0, 2502.0], [34.0, 2490.0], [36.0, 2294.5], [37.0, 2287.5], [38.0, 2359.5], [39.0, 2349.0], [41.0, 1890.0], [40.0, 2207.5], [42.0, 2521.0], [43.0, 2106.0], [44.0, 1355.0], [45.0, 2204.5], [46.0, 2112.0], [47.0, 2042.5], [48.0, 1854.5], [49.0, 1042.5], [50.0, 2109.0], [51.0, 1640.0], [53.0, 2058.0], [55.0, 1989.0], [56.0, 116.5], [59.0, 911.0], [58.0, 66.0], [60.0, 820.5], [61.0, 2625.0], [62.0, 1997.0], [65.0, 2653.0], [73.0, 662.0], [78.0, 4.0], [76.0, 4.0], [79.0, 4.0], [82.0, 1408.5], [83.0, 10.0], [80.0, 1420.0], [86.0, 3.0], [85.0, 26.0], [94.0, 1366.5], [99.0, 1688.0], [97.0, 3.0], [102.0, 646.0], [122.0, 893.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3.0, 0.0], [4.0, 0.0], [5.0, 2.0], [7.0, 0.0], [10.0, 1.5], [13.0, 2302.0], [14.0, 8007.0], [18.0, 16005.5], [19.0, 1.0], [22.0, 3006.0], [23.0, 3006.0], [26.0, 16006.0], [27.0, 1.0], [28.0, 1.0], [30.0, 8005.0], [31.0, 1.0], [32.0, 1.0], [34.0, 1.0], [37.0, 1.0], [38.0, 1.0], [39.0, 1.0], [41.0, 1.0], [42.0, 1.0], [43.0, 0.0], [45.0, 1.0], [46.0, 0.0], [49.0, 0.0], [53.0, 1795.0], [55.0, 1.0], [56.0, 1.0], [57.0, 1.0], [58.0, 2.0], [59.0, 1.0], [60.0, 2.0], [61.0, 1.0], [63.0, 1.0], [66.0, 1.0], [64.0, 1.0], [69.0, 1.0], [70.0, 1.0], [71.0, 1.0], [74.0, 1.0], [73.0, 1.0], [72.0, 1.0], [75.0, 1.0], [76.0, 1.0], [78.0, 1.0], [79.0, 1.0], [81.0, 1.0], [83.0, 1.0], [82.0, 1.0], [80.0, 1.0], [86.0, 1.0], [85.0, 1.0], [87.0, 1.0], [84.0, 1.0], [90.0, 1.0], [88.0, 1.0], [89.0, 1.0], [91.0, 1.0], [94.0, 1.0], [93.0, 1.0], [92.0, 1.0], [99.0, 1.0], [97.0, 1.0], [96.0, 1.0], [102.0, 1.0], [103.0, 1.0], [101.0, 1.0], [104.0, 1.0], [110.0, 1.0], [114.0, 1.0], [113.0, 1.0], [122.0, 3631.0], [1.0, 1.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 122.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 3630.5, "series": [{"data": [[2.0, 54.0], [3.0, 53.0], [4.0, 53.0], [5.0, 507.0], [6.0, 52.0], [8.0, 48.0], [9.0, 50.5], [10.0, 466.0], [11.0, 56.0], [12.0, 48.5], [13.0, 1579.0], [14.0, 54.0], [15.0, 47.5], [17.0, 48.0], [18.0, 40.5], [19.0, 102.0], [20.0, 351.5], [21.0, 60.0], [22.0, 1291.0], [23.0, 2418.0], [24.0, 58.0], [25.0, 2096.5], [26.0, 2640.5], [27.0, 1072.0], [28.0, 743.5], [29.0, 2391.0], [30.0, 2530.0], [31.0, 2556.5], [33.0, 2529.0], [32.0, 2270.5], [35.0, 2502.0], [34.0, 2489.0], [36.0, 2294.0], [37.0, 2285.0], [38.0, 2351.5], [39.0, 2347.0], [41.0, 1890.0], [40.0, 2202.0], [42.0, 2521.0], [43.0, 2105.5], [44.0, 1354.5], [45.0, 2204.5], [46.0, 2107.5], [47.0, 2041.0], [48.0, 1854.5], [49.0, 1041.0], [50.0, 2109.0], [51.0, 1639.0], [53.0, 2058.0], [55.0, 1988.5], [56.0, 110.5], [59.0, 911.0], [58.0, 65.5], [60.0, 820.0], [61.0, 2624.0], [62.0, 1996.5], [65.0, 2652.0], [73.0, 661.0], [78.0, 4.0], [76.0, 4.0], [79.0, 4.0], [82.0, 1408.5], [83.0, 10.0], [80.0, 1420.0], [86.0, 3.0], [85.0, 26.0], [94.0, 1366.5], [99.0, 1688.0], [97.0, 3.0], [102.0, 646.0], [122.0, 893.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3.0, 0.0], [4.0, 0.0], [5.0, 0.0], [7.0, 0.0], [10.0, 0.0], [13.0, 2302.0], [14.0, 0.0], [18.0, 0.0], [19.0, 0.0], [22.0, 0.0], [23.0, 0.0], [26.0, 0.0], [27.0, 0.0], [28.0, 0.0], [30.0, 0.0], [31.0, 0.0], [32.0, 0.0], [34.0, 0.0], [37.0, 0.0], [38.0, 0.0], [39.0, 0.0], [41.0, 0.0], [42.0, 0.0], [43.0, 0.0], [45.0, 0.0], [46.0, 0.0], [49.0, 0.0], [53.0, 1795.0], [55.0, 0.0], [56.0, 0.0], [57.0, 0.0], [58.0, 0.0], [59.0, 0.0], [60.0, 0.0], [61.0, 0.0], [63.0, 0.0], [66.0, 0.0], [64.0, 0.0], [69.0, 0.0], [70.0, 0.0], [71.0, 0.0], [74.0, 0.0], [73.0, 0.0], [72.0, 0.0], [75.0, 0.0], [76.0, 0.0], [78.0, 0.0], [79.0, 0.0], [81.0, 0.0], [83.0, 0.0], [82.0, 0.0], [80.0, 0.0], [86.0, 0.0], [85.0, 0.0], [87.0, 0.0], [84.0, 0.0], [90.0, 0.0], [88.0, 0.0], [89.0, 0.0], [91.0, 0.0], [94.0, 0.0], [93.0, 0.0], [92.0, 0.0], [99.0, 0.0], [97.0, 0.0], [96.0, 0.0], [102.0, 0.0], [103.0, 0.0], [101.0, 0.0], [104.0, 0.0], [110.0, 0.0], [114.0, 0.0], [113.0, 0.0], [122.0, 3630.5], [1.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 122.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.4, "minX": 1.58543256E12, "maxY": 85.16666666666667, "series": [{"data": [[1.58543268E12, 46.88333333333333], [1.58543316E12, 63.93333333333333], [1.58543286E12, 35.85], [1.5854328E12, 43.733333333333334], [1.58543298E12, 39.666666666666664], [1.58543292E12, 38.88333333333333], [1.58543262E12, 38.0], [1.5854331E12, 85.16666666666667], [1.58543256E12, 15.566666666666666], [1.58543304E12, 84.86666666666666], [1.58543274E12, 38.05], [1.58543322E12, 5.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543322E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.58543256E12, "maxY": 85.15, "series": [{"data": [[1.58543268E12, 26.783333333333335], [1.58543316E12, 13.183333333333334], [1.58543286E12, 36.38333333333333], [1.5854328E12, 38.56666666666667], [1.58543298E12, 18.016666666666666], [1.58543292E12, 38.6], [1.58543262E12, 30.65], [1.58543256E12, 15.483333333333333], [1.58543274E12, 38.63333333333333], [1.58543322E12, 5.45]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.5854328E12, 0.35], [1.58543298E12, 0.2], [1.58543292E12, 0.08333333333333333], [1.58543262E12, 0.18333333333333332], [1.58543274E12, 0.26666666666666666]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.58543268E12, 0.03333333333333333], [1.58543286E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.TruncatedChunkException", "isController": false}, {"data": [[1.58543268E12, 20.266666666666666], [1.58543316E12, 50.71666666666667], [1.5854328E12, 2.683333333333333], [1.58543298E12, 23.216666666666665], [1.58543262E12, 5.466666666666667], [1.5854331E12, 85.15], [1.58543304E12, 84.86666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.58543268E12, 0.16666666666666666], [1.58543286E12, 0.5166666666666667], [1.5854328E12, 0.05]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543322E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.58543256E12, "maxY": 42.666666666666664, "series": [{"data": [[1.58543262E12, 1.1333333333333333], [1.58543256E12, 1.5333333333333334]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58543268E12, 13.083333333333334], [1.58543316E12, 6.7], [1.58543286E12, 18.25], [1.5854328E12, 18.766666666666666], [1.58543298E12, 9.233333333333333], [1.58543292E12, 19.1], [1.58543262E12, 14.45], [1.58543256E12, 6.683333333333334], [1.58543274E12, 19.4], [1.58543322E12, 2.8833333333333333]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58543268E12, 10.316666666666666], [1.58543316E12, 25.45], [1.58543286E12, 0.03333333333333333], [1.5854328E12, 2.1166666666666667], [1.58543298E12, 11.666666666666666], [1.58543292E12, 0.03333333333333333], [1.58543262E12, 3.1166666666666667], [1.5854331E12, 42.666666666666664], [1.58543304E12, 42.56666666666667], [1.58543274E12, 0.15]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.58543268E12, 13.7], [1.58543316E12, 6.483333333333333], [1.58543286E12, 18.133333333333333], [1.5854328E12, 19.8], [1.58543298E12, 8.783333333333333], [1.58543292E12, 19.5], [1.58543262E12, 15.066666666666666], [1.58543256E12, 7.266666666666667], [1.58543274E12, 19.233333333333334], [1.58543322E12, 2.566666666666667]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58543268E12, 10.15], [1.58543316E12, 25.266666666666666], [1.58543286E12, 0.5166666666666667], [1.5854328E12, 0.9666666666666667], [1.58543298E12, 11.75], [1.58543292E12, 0.05], [1.58543262E12, 2.533333333333333], [1.5854331E12, 42.483333333333334], [1.58543304E12, 42.3], [1.58543274E12, 0.11666666666666667]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543322E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.58543256E12, "maxY": 85.15, "series": [{"data": [[1.58543268E12, 26.783333333333335], [1.58543316E12, 13.183333333333334], [1.58543286E12, 36.38333333333333], [1.5854328E12, 38.56666666666667], [1.58543298E12, 18.016666666666666], [1.58543292E12, 38.6], [1.58543262E12, 30.65], [1.58543256E12, 15.483333333333333], [1.58543274E12, 38.63333333333333], [1.58543322E12, 5.45]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58543268E12, 20.466666666666665], [1.58543316E12, 50.71666666666667], [1.58543286E12, 0.55], [1.5854328E12, 3.0833333333333335], [1.58543298E12, 23.416666666666668], [1.58543292E12, 0.08333333333333333], [1.58543262E12, 5.65], [1.5854331E12, 85.15], [1.58543304E12, 84.86666666666666], [1.58543274E12, 0.26666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543322E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

