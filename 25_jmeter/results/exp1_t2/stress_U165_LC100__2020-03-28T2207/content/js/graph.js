/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 20007.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 1.0], [41.8, 1.0], [41.9, 1.0], [42.0, 1.0], [42.1, 1.0], [42.2, 1.0], [42.3, 1.0], [42.4, 1.0], [42.5, 1.0], [42.6, 1.0], [42.7, 1.0], [42.8, 1.0], [42.9, 1.0], [43.0, 1.0], [43.1, 1.0], [43.2, 1.0], [43.3, 1.0], [43.4, 1.0], [43.5, 1.0], [43.6, 1.0], [43.7, 1.0], [43.8, 1.0], [43.9, 1.0], [44.0, 1.0], [44.1, 1.0], [44.2, 1.0], [44.3, 1.0], [44.4, 1.0], [44.5, 1.0], [44.6, 1.0], [44.7, 1.0], [44.8, 1.0], [44.9, 1.0], [45.0, 1.0], [45.1, 1.0], [45.2, 1.0], [45.3, 1.0], [45.4, 1.0], [45.5, 1.0], [45.6, 1.0], [45.7, 1.0], [45.8, 1.0], [45.9, 1.0], [46.0, 1.0], [46.1, 1.0], [46.2, 1.0], [46.3, 1.0], [46.4, 1.0], [46.5, 1.0], [46.6, 1.0], [46.7, 1.0], [46.8, 1.0], [46.9, 1.0], [47.0, 1.0], [47.1, 1.0], [47.2, 1.0], [47.3, 1.0], [47.4, 1.0], [47.5, 1.0], [47.6, 1.0], [47.7, 1.0], [47.8, 1.0], [47.9, 1.0], [48.0, 1.0], [48.1, 1.0], [48.2, 1.0], [48.3, 1.0], [48.4, 1.0], [48.5, 1.0], [48.6, 1.0], [48.7, 1.0], [48.8, 1.0], [48.9, 1.0], [49.0, 1.0], [49.1, 1.0], [49.2, 1.0], [49.3, 1.0], [49.4, 1.0], [49.5, 1.0], [49.6, 1.0], [49.7, 1.0], [49.8, 1.0], [49.9, 1.0], [50.0, 1.0], [50.1, 1.0], [50.2, 1.0], [50.3, 1.0], [50.4, 1.0], [50.5, 1.0], [50.6, 1.0], [50.7, 1.0], [50.8, 1.0], [50.9, 1.0], [51.0, 1.0], [51.1, 1.0], [51.2, 1.0], [51.3, 1.0], [51.4, 1.0], [51.5, 1.0], [51.6, 1.0], [51.7, 1.0], [51.8, 1.0], [51.9, 1.0], [52.0, 2.0], [52.1, 2.0], [52.2, 2.0], [52.3, 2.0], [52.4, 2.0], [52.5, 2.0], [52.6, 2.0], [52.7, 2.0], [52.8, 2.0], [52.9, 2.0], [53.0, 2.0], [53.1, 2.0], [53.2, 2.0], [53.3, 2.0], [53.4, 2.0], [53.5, 2.0], [53.6, 2.0], [53.7, 2.0], [53.8, 2.0], [53.9, 2.0], [54.0, 2.0], [54.1, 2.0], [54.2, 2.0], [54.3, 2.0], [54.4, 2.0], [54.5, 2.0], [54.6, 2.0], [54.7, 2.0], [54.8, 2.0], [54.9, 2.0], [55.0, 2.0], [55.1, 2.0], [55.2, 2.0], [55.3, 2.0], [55.4, 2.0], [55.5, 2.0], [55.6, 2.0], [55.7, 2.0], [55.8, 2.0], [55.9, 2.0], [56.0, 2.0], [56.1, 2.0], [56.2, 2.0], [56.3, 2.0], [56.4, 2.0], [56.5, 2.0], [56.6, 2.0], [56.7, 2.0], [56.8, 2.0], [56.9, 2.0], [57.0, 2.0], [57.1, 2.0], [57.2, 2.0], [57.3, 2.0], [57.4, 2.0], [57.5, 2.0], [57.6, 2.0], [57.7, 2.0], [57.8, 2.0], [57.9, 3.0], [58.0, 3.0], [58.1, 3.0], [58.2, 3.0], [58.3, 3.0], [58.4, 3.0], [58.5, 3.0], [58.6, 4.0], [58.7, 4.0], [58.8, 4.0], [58.9, 4.0], [59.0, 4.0], [59.1, 5.0], [59.2, 5.0], [59.3, 5.0], [59.4, 6.0], [59.5, 7.0], [59.6, 7.0], [59.7, 10.0], [59.8, 13.0], [59.9, 20.0], [60.0, 29.0], [60.1, 36.0], [60.2, 38.0], [60.3, 40.0], [60.4, 41.0], [60.5, 42.0], [60.6, 44.0], [60.7, 45.0], [60.8, 46.0], [60.9, 47.0], [61.0, 48.0], [61.1, 49.0], [61.2, 50.0], [61.3, 52.0], [61.4, 53.0], [61.5, 54.0], [61.6, 55.0], [61.7, 57.0], [61.8, 58.0], [61.9, 60.0], [62.0, 61.0], [62.1, 63.0], [62.2, 65.0], [62.3, 68.0], [62.4, 71.0], [62.5, 74.0], [62.6, 77.0], [62.7, 79.0], [62.8, 82.0], [62.9, 85.0], [63.0, 88.0], [63.1, 92.0], [63.2, 95.0], [63.3, 99.0], [63.4, 105.0], [63.5, 113.0], [63.6, 120.0], [63.7, 126.0], [63.8, 135.0], [63.9, 145.0], [64.0, 164.0], [64.1, 202.0], [64.2, 240.0], [64.3, 269.0], [64.4, 293.0], [64.5, 337.0], [64.6, 373.0], [64.7, 389.0], [64.8, 418.0], [64.9, 446.0], [65.0, 484.0], [65.1, 507.0], [65.2, 532.0], [65.3, 558.0], [65.4, 578.0], [65.5, 596.0], [65.6, 625.0], [65.7, 646.0], [65.8, 682.0], [65.9, 713.0], [66.0, 746.0], [66.1, 762.0], [66.2, 786.0], [66.3, 805.0], [66.4, 836.0], [66.5, 856.0], [66.6, 878.0], [66.7, 896.0], [66.8, 913.0], [66.9, 931.0], [67.0, 962.0], [67.1, 979.0], [67.2, 992.0], [67.3, 1011.0], [67.4, 1030.0], [67.5, 1044.0], [67.6, 1058.0], [67.7, 1074.0], [67.8, 1090.0], [67.9, 1110.0], [68.0, 1123.0], [68.1, 1139.0], [68.2, 1154.0], [68.3, 1167.0], [68.4, 1180.0], [68.5, 1198.0], [68.6, 1209.0], [68.7, 1222.0], [68.8, 1240.0], [68.9, 1256.0], [69.0, 1272.0], [69.1, 1282.0], [69.2, 1295.0], [69.3, 1308.0], [69.4, 1329.0], [69.5, 1344.0], [69.6, 1356.0], [69.7, 1369.0], [69.8, 1381.0], [69.9, 1397.0], [70.0, 1409.0], [70.1, 1421.0], [70.2, 1440.0], [70.3, 1455.0], [70.4, 1474.0], [70.5, 1485.0], [70.6, 1507.0], [70.7, 1520.0], [70.8, 1537.0], [70.9, 1557.0], [71.0, 1568.0], [71.1, 1591.0], [71.2, 1609.0], [71.3, 1623.0], [71.4, 1634.0], [71.5, 1650.0], [71.6, 1662.0], [71.7, 1674.0], [71.8, 1693.0], [71.9, 1705.0], [72.0, 1720.0], [72.1, 1731.0], [72.2, 1748.0], [72.3, 1759.0], [72.4, 1766.0], [72.5, 1777.0], [72.6, 1792.0], [72.7, 1802.0], [72.8, 1816.0], [72.9, 1825.0], [73.0, 1836.0], [73.1, 1845.0], [73.2, 1857.0], [73.3, 1868.0], [73.4, 1876.0], [73.5, 1884.0], [73.6, 1890.0], [73.7, 1900.0], [73.8, 1910.0], [73.9, 1920.0], [74.0, 1928.0], [74.1, 1939.0], [74.2, 1951.0], [74.3, 1959.0], [74.4, 1966.0], [74.5, 1976.0], [74.6, 1983.0], [74.7, 1992.0], [74.8, 2006.0], [74.9, 2014.0], [75.0, 2020.0], [75.1, 2032.0], [75.2, 2039.0], [75.3, 2049.0], [75.4, 2063.0], [75.5, 2070.0], [75.6, 2079.0], [75.7, 2088.0], [75.8, 2097.0], [75.9, 2104.0], [76.0, 2112.0], [76.1, 2120.0], [76.2, 2128.0], [76.3, 2139.0], [76.4, 2149.0], [76.5, 2157.0], [76.6, 2170.0], [76.7, 2177.0], [76.8, 2186.0], [76.9, 2191.0], [77.0, 2198.0], [77.1, 2206.0], [77.2, 2212.0], [77.3, 2219.0], [77.4, 2225.0], [77.5, 2231.0], [77.6, 2238.0], [77.7, 2243.0], [77.8, 2250.0], [77.9, 2257.0], [78.0, 2263.0], [78.1, 2269.0], [78.2, 2276.0], [78.3, 2282.0], [78.4, 2291.0], [78.5, 2299.0], [78.6, 2309.0], [78.7, 2313.0], [78.8, 2320.0], [78.9, 2326.0], [79.0, 2331.0], [79.1, 2335.0], [79.2, 2341.0], [79.3, 2351.0], [79.4, 2358.0], [79.5, 2365.0], [79.6, 2371.0], [79.7, 2382.0], [79.8, 2387.0], [79.9, 2391.0], [80.0, 2398.0], [80.1, 2405.0], [80.2, 2411.0], [80.3, 2418.0], [80.4, 2425.0], [80.5, 2429.0], [80.6, 2433.0], [80.7, 2438.0], [80.8, 2443.0], [80.9, 2449.0], [81.0, 2457.0], [81.1, 2462.0], [81.2, 2466.0], [81.3, 2472.0], [81.4, 2477.0], [81.5, 2482.0], [81.6, 2488.0], [81.7, 2495.0], [81.8, 2502.0], [81.9, 2507.0], [82.0, 2510.0], [82.1, 2515.0], [82.2, 2521.0], [82.3, 2525.0], [82.4, 2530.0], [82.5, 2534.0], [82.6, 2540.0], [82.7, 2545.0], [82.8, 2548.0], [82.9, 2551.0], [83.0, 2562.0], [83.1, 2567.0], [83.2, 2575.0], [83.3, 2579.0], [83.4, 2584.0], [83.5, 2588.0], [83.6, 2595.0], [83.7, 2601.0], [83.8, 2606.0], [83.9, 2608.0], [84.0, 2613.0], [84.1, 2618.0], [84.2, 2622.0], [84.3, 2628.0], [84.4, 2632.0], [84.5, 2637.0], [84.6, 2640.0], [84.7, 2646.0], [84.8, 2651.0], [84.9, 2654.0], [85.0, 2659.0], [85.1, 2663.0], [85.2, 2666.0], [85.3, 2671.0], [85.4, 2677.0], [85.5, 2683.0], [85.6, 2687.0], [85.7, 2691.0], [85.8, 2697.0], [85.9, 2702.0], [86.0, 2709.0], [86.1, 2714.0], [86.2, 2720.0], [86.3, 2726.0], [86.4, 2731.0], [86.5, 2735.0], [86.6, 2739.0], [86.7, 2743.0], [86.8, 2747.0], [86.9, 2750.0], [87.0, 2754.0], [87.1, 2760.0], [87.2, 2765.0], [87.3, 2775.0], [87.4, 2779.0], [87.5, 2783.0], [87.6, 2787.0], [87.7, 2792.0], [87.8, 2799.0], [87.9, 2803.0], [88.0, 2808.0], [88.1, 2814.0], [88.2, 2819.0], [88.3, 2824.0], [88.4, 2828.0], [88.5, 2833.0], [88.6, 2838.0], [88.7, 2845.0], [88.8, 2851.0], [88.9, 2857.0], [89.0, 2864.0], [89.1, 2870.0], [89.2, 2877.0], [89.3, 2884.0], [89.4, 2888.0], [89.5, 2892.0], [89.6, 2896.0], [89.7, 2901.0], [89.8, 2907.0], [89.9, 2911.0], [90.0, 2918.0], [90.1, 2921.0], [90.2, 2926.0], [90.3, 2932.0], [90.4, 2938.0], [90.5, 2943.0], [90.6, 2953.0], [90.7, 2958.0], [90.8, 2964.0], [90.9, 2971.0], [91.0, 2978.0], [91.1, 2985.0], [91.2, 2992.0], [91.3, 2997.0], [91.4, 3004.0], [91.5, 3010.0], [91.6, 3018.0], [91.7, 3027.0], [91.8, 3034.0], [91.9, 3040.0], [92.0, 3044.0], [92.1, 3050.0], [92.2, 3057.0], [92.3, 3062.0], [92.4, 3069.0], [92.5, 3078.0], [92.6, 3087.0], [92.7, 3094.0], [92.8, 3102.0], [92.9, 3106.0], [93.0, 3115.0], [93.1, 3122.0], [93.2, 3130.0], [93.3, 3137.0], [93.4, 3150.0], [93.5, 3154.0], [93.6, 3161.0], [93.7, 3168.0], [93.8, 3173.0], [93.9, 3178.0], [94.0, 3184.0], [94.1, 3191.0], [94.2, 3198.0], [94.3, 3202.0], [94.4, 3211.0], [94.5, 3223.0], [94.6, 3230.0], [94.7, 3239.0], [94.8, 3246.0], [94.9, 3251.0], [95.0, 3256.0], [95.1, 3264.0], [95.2, 3273.0], [95.3, 3279.0], [95.4, 3288.0], [95.5, 3299.0], [95.6, 3304.0], [95.7, 3313.0], [95.8, 3320.0], [95.9, 3325.0], [96.0, 3331.0], [96.1, 3344.0], [96.2, 3354.0], [96.3, 3363.0], [96.4, 3370.0], [96.5, 3380.0], [96.6, 3391.0], [96.7, 3401.0], [96.8, 3411.0], [96.9, 3421.0], [97.0, 3431.0], [97.1, 3446.0], [97.2, 3456.0], [97.3, 3467.0], [97.4, 3475.0], [97.5, 3486.0], [97.6, 3504.0], [97.7, 3516.0], [97.8, 3535.0], [97.9, 3546.0], [98.0, 3561.0], [98.1, 3575.0], [98.2, 3597.0], [98.3, 3611.0], [98.4, 3625.0], [98.5, 3641.0], [98.6, 3656.0], [98.7, 3681.0], [98.8, 3702.0], [98.9, 3717.0], [99.0, 3750.0], [99.1, 3775.0], [99.2, 3828.0], [99.3, 3871.0], [99.4, 3920.0], [99.5, 3981.0], [99.6, 4117.0], [99.7, 4256.0], [99.8, 4398.0], [99.9, 4652.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 157.0], [0.1, 157.0], [0.2, 157.0], [0.3, 157.0], [0.4, 157.0], [0.5, 157.0], [0.6, 157.0], [0.7, 162.0], [0.8, 162.0], [0.9, 162.0], [1.0, 162.0], [1.1, 162.0], [1.2, 162.0], [1.3, 163.0], [1.4, 163.0], [1.5, 163.0], [1.6, 163.0], [1.7, 163.0], [1.8, 163.0], [1.9, 163.0], [2.0, 163.0], [2.1, 163.0], [2.2, 163.0], [2.3, 163.0], [2.4, 163.0], [2.5, 163.0], [2.6, 163.0], [2.7, 163.0], [2.8, 163.0], [2.9, 163.0], [3.0, 163.0], [3.1, 165.0], [3.2, 165.0], [3.3, 165.0], [3.4, 165.0], [3.5, 165.0], [3.6, 165.0], [3.7, 166.0], [3.8, 166.0], [3.9, 166.0], [4.0, 166.0], [4.1, 166.0], [4.2, 166.0], [4.3, 167.0], [4.4, 167.0], [4.5, 167.0], [4.6, 167.0], [4.7, 167.0], [4.8, 167.0], [4.9, 170.0], [5.0, 170.0], [5.1, 170.0], [5.2, 170.0], [5.3, 170.0], [5.4, 170.0], [5.5, 170.0], [5.6, 170.0], [5.7, 170.0], [5.8, 170.0], [5.9, 170.0], [6.0, 170.0], [6.1, 172.0], [6.2, 172.0], [6.3, 172.0], [6.4, 172.0], [6.5, 172.0], [6.6, 172.0], [6.7, 174.0], [6.8, 174.0], [6.9, 174.0], [7.0, 174.0], [7.1, 174.0], [7.2, 174.0], [7.3, 174.0], [7.4, 174.0], [7.5, 174.0], [7.6, 174.0], [7.7, 174.0], [7.8, 174.0], [7.9, 174.0], [8.0, 174.0], [8.1, 174.0], [8.2, 174.0], [8.3, 174.0], [8.4, 174.0], [8.5, 174.0], [8.6, 174.0], [8.7, 174.0], [8.8, 174.0], [8.9, 174.0], [9.0, 174.0], [9.1, 177.0], [9.2, 177.0], [9.3, 177.0], [9.4, 177.0], [9.5, 177.0], [9.6, 177.0], [9.7, 178.0], [9.8, 178.0], [9.9, 178.0], [10.0, 178.0], [10.1, 178.0], [10.2, 178.0], [10.3, 178.0], [10.4, 181.0], [10.5, 181.0], [10.6, 181.0], [10.7, 181.0], [10.8, 181.0], [10.9, 181.0], [11.0, 181.0], [11.1, 181.0], [11.2, 181.0], [11.3, 181.0], [11.4, 181.0], [11.5, 181.0], [11.6, 183.0], [11.7, 183.0], [11.8, 183.0], [11.9, 183.0], [12.0, 183.0], [12.1, 183.0], [12.2, 185.0], [12.3, 185.0], [12.4, 185.0], [12.5, 185.0], [12.6, 185.0], [12.7, 185.0], [12.8, 186.0], [12.9, 186.0], [13.0, 186.0], [13.1, 186.0], [13.2, 186.0], [13.3, 186.0], [13.4, 188.0], [13.5, 188.0], [13.6, 188.0], [13.7, 188.0], [13.8, 188.0], [13.9, 188.0], [14.0, 191.0], [14.1, 191.0], [14.2, 191.0], [14.3, 191.0], [14.4, 191.0], [14.5, 191.0], [14.6, 192.0], [14.7, 192.0], [14.8, 192.0], [14.9, 192.0], [15.0, 192.0], [15.1, 192.0], [15.2, 194.0], [15.3, 194.0], [15.4, 194.0], [15.5, 194.0], [15.6, 194.0], [15.7, 194.0], [15.8, 198.0], [15.9, 198.0], [16.0, 198.0], [16.1, 198.0], [16.2, 198.0], [16.3, 198.0], [16.4, 199.0], [16.5, 199.0], [16.6, 199.0], [16.7, 199.0], [16.8, 199.0], [16.9, 199.0], [17.0, 200.0], [17.1, 200.0], [17.2, 200.0], [17.3, 200.0], [17.4, 200.0], [17.5, 200.0], [17.6, 205.0], [17.7, 205.0], [17.8, 205.0], [17.9, 205.0], [18.0, 205.0], [18.1, 205.0], [18.2, 210.0], [18.3, 210.0], [18.4, 210.0], [18.5, 210.0], [18.6, 210.0], [18.7, 210.0], [18.8, 211.0], [18.9, 211.0], [19.0, 211.0], [19.1, 211.0], [19.2, 211.0], [19.3, 211.0], [19.4, 216.0], [19.5, 216.0], [19.6, 216.0], [19.7, 216.0], [19.8, 216.0], [19.9, 216.0], [20.0, 219.0], [20.1, 219.0], [20.2, 219.0], [20.3, 219.0], [20.4, 219.0], [20.5, 219.0], [20.6, 219.0], [20.7, 234.0], [20.8, 234.0], [20.9, 234.0], [21.0, 234.0], [21.1, 234.0], [21.2, 234.0], [21.3, 239.0], [21.4, 239.0], [21.5, 239.0], [21.6, 239.0], [21.7, 239.0], [21.8, 239.0], [21.9, 243.0], [22.0, 243.0], [22.1, 243.0], [22.2, 243.0], [22.3, 243.0], [22.4, 243.0], [22.5, 251.0], [22.6, 251.0], [22.7, 251.0], [22.8, 251.0], [22.9, 251.0], [23.0, 251.0], [23.1, 252.0], [23.2, 252.0], [23.3, 252.0], [23.4, 252.0], [23.5, 252.0], [23.6, 252.0], [23.7, 254.0], [23.8, 254.0], [23.9, 254.0], [24.0, 254.0], [24.1, 254.0], [24.2, 254.0], [24.3, 258.0], [24.4, 258.0], [24.5, 258.0], [24.6, 258.0], [24.7, 258.0], [24.8, 258.0], [24.9, 261.0], [25.0, 261.0], [25.1, 261.0], [25.2, 261.0], [25.3, 261.0], [25.4, 261.0], [25.5, 266.0], [25.6, 266.0], [25.7, 266.0], [25.8, 266.0], [25.9, 266.0], [26.0, 266.0], [26.1, 280.0], [26.2, 280.0], [26.3, 280.0], [26.4, 280.0], [26.5, 280.0], [26.6, 280.0], [26.7, 281.0], [26.8, 281.0], [26.9, 281.0], [27.0, 281.0], [27.1, 281.0], [27.2, 281.0], [27.3, 291.0], [27.4, 291.0], [27.5, 291.0], [27.6, 291.0], [27.7, 291.0], [27.8, 291.0], [27.9, 294.0], [28.0, 294.0], [28.1, 294.0], [28.2, 294.0], [28.3, 294.0], [28.4, 294.0], [28.5, 294.0], [28.6, 294.0], [28.7, 294.0], [28.8, 294.0], [28.9, 294.0], [29.0, 294.0], [29.1, 300.0], [29.2, 300.0], [29.3, 300.0], [29.4, 300.0], [29.5, 300.0], [29.6, 300.0], [29.7, 300.0], [29.8, 300.0], [29.9, 300.0], [30.0, 300.0], [30.1, 300.0], [30.2, 300.0], [30.3, 300.0], [30.4, 304.0], [30.5, 304.0], [30.6, 304.0], [30.7, 304.0], [30.8, 304.0], [30.9, 304.0], [31.0, 310.0], [31.1, 310.0], [31.2, 310.0], [31.3, 310.0], [31.4, 310.0], [31.5, 310.0], [31.6, 315.0], [31.7, 315.0], [31.8, 315.0], [31.9, 315.0], [32.0, 315.0], [32.1, 315.0], [32.2, 325.0], [32.3, 325.0], [32.4, 325.0], [32.5, 325.0], [32.6, 325.0], [32.7, 325.0], [32.8, 328.0], [32.9, 328.0], [33.0, 328.0], [33.1, 328.0], [33.2, 328.0], [33.3, 328.0], [33.4, 331.0], [33.5, 331.0], [33.6, 331.0], [33.7, 331.0], [33.8, 331.0], [33.9, 331.0], [34.0, 332.0], [34.1, 332.0], [34.2, 332.0], [34.3, 332.0], [34.4, 332.0], [34.5, 332.0], [34.6, 336.0], [34.7, 336.0], [34.8, 336.0], [34.9, 336.0], [35.0, 336.0], [35.1, 336.0], [35.2, 336.0], [35.3, 336.0], [35.4, 336.0], [35.5, 336.0], [35.6, 336.0], [35.7, 336.0], [35.8, 341.0], [35.9, 341.0], [36.0, 341.0], [36.1, 341.0], [36.2, 341.0], [36.3, 341.0], [36.4, 350.0], [36.5, 350.0], [36.6, 350.0], [36.7, 350.0], [36.8, 350.0], [36.9, 350.0], [37.0, 350.0], [37.1, 350.0], [37.2, 350.0], [37.3, 350.0], [37.4, 350.0], [37.5, 350.0], [37.6, 353.0], [37.7, 353.0], [37.8, 353.0], [37.9, 353.0], [38.0, 353.0], [38.1, 353.0], [38.2, 353.0], [38.3, 353.0], [38.4, 353.0], [38.5, 353.0], [38.6, 353.0], [38.7, 353.0], [38.8, 354.0], [38.9, 354.0], [39.0, 354.0], [39.1, 354.0], [39.2, 354.0], [39.3, 354.0], [39.4, 358.0], [39.5, 358.0], [39.6, 358.0], [39.7, 358.0], [39.8, 358.0], [39.9, 358.0], [40.0, 360.0], [40.1, 360.0], [40.2, 360.0], [40.3, 360.0], [40.4, 360.0], [40.5, 360.0], [40.6, 360.0], [40.7, 360.0], [40.8, 360.0], [40.9, 360.0], [41.0, 360.0], [41.1, 360.0], [41.2, 360.0], [41.3, 366.0], [41.4, 366.0], [41.5, 366.0], [41.6, 366.0], [41.7, 366.0], [41.8, 366.0], [41.9, 367.0], [42.0, 367.0], [42.1, 367.0], [42.2, 367.0], [42.3, 367.0], [42.4, 367.0], [42.5, 374.0], [42.6, 374.0], [42.7, 374.0], [42.8, 374.0], [42.9, 374.0], [43.0, 374.0], [43.1, 376.0], [43.2, 376.0], [43.3, 376.0], [43.4, 376.0], [43.5, 376.0], [43.6, 376.0], [43.7, 379.0], [43.8, 379.0], [43.9, 379.0], [44.0, 379.0], [44.1, 379.0], [44.2, 379.0], [44.3, 381.0], [44.4, 381.0], [44.5, 381.0], [44.6, 381.0], [44.7, 381.0], [44.8, 381.0], [44.9, 388.0], [45.0, 388.0], [45.1, 388.0], [45.2, 388.0], [45.3, 388.0], [45.4, 388.0], [45.5, 399.0], [45.6, 399.0], [45.7, 399.0], [45.8, 399.0], [45.9, 399.0], [46.0, 399.0], [46.1, 401.0], [46.2, 401.0], [46.3, 401.0], [46.4, 401.0], [46.5, 401.0], [46.6, 401.0], [46.7, 413.0], [46.8, 413.0], [46.9, 413.0], [47.0, 413.0], [47.1, 413.0], [47.2, 413.0], [47.3, 414.0], [47.4, 414.0], [47.5, 414.0], [47.6, 414.0], [47.7, 414.0], [47.8, 414.0], [47.9, 420.0], [48.0, 420.0], [48.1, 420.0], [48.2, 420.0], [48.3, 420.0], [48.4, 420.0], [48.5, 421.0], [48.6, 421.0], [48.7, 421.0], [48.8, 421.0], [48.9, 421.0], [49.0, 421.0], [49.1, 422.0], [49.2, 422.0], [49.3, 422.0], [49.4, 422.0], [49.5, 422.0], [49.6, 422.0], [49.7, 429.0], [49.8, 429.0], [49.9, 429.0], [50.0, 429.0], [50.1, 429.0], [50.2, 429.0], [50.3, 429.0], [50.4, 438.0], [50.5, 438.0], [50.6, 438.0], [50.7, 438.0], [50.8, 438.0], [50.9, 438.0], [51.0, 451.0], [51.1, 451.0], [51.2, 451.0], [51.3, 451.0], [51.4, 451.0], [51.5, 451.0], [51.6, 452.0], [51.7, 452.0], [51.8, 452.0], [51.9, 452.0], [52.0, 452.0], [52.1, 452.0], [52.2, 471.0], [52.3, 471.0], [52.4, 471.0], [52.5, 471.0], [52.6, 471.0], [52.7, 471.0], [52.8, 482.0], [52.9, 482.0], [53.0, 482.0], [53.1, 482.0], [53.2, 482.0], [53.3, 482.0], [53.4, 486.0], [53.5, 486.0], [53.6, 486.0], [53.7, 486.0], [53.8, 486.0], [53.9, 486.0], [54.0, 500.0], [54.1, 500.0], [54.2, 500.0], [54.3, 500.0], [54.4, 500.0], [54.5, 500.0], [54.6, 505.0], [54.7, 505.0], [54.8, 505.0], [54.9, 505.0], [55.0, 505.0], [55.1, 505.0], [55.2, 508.0], [55.3, 508.0], [55.4, 508.0], [55.5, 508.0], [55.6, 508.0], [55.7, 508.0], [55.8, 524.0], [55.9, 524.0], [56.0, 524.0], [56.1, 524.0], [56.2, 524.0], [56.3, 524.0], [56.4, 526.0], [56.5, 526.0], [56.6, 526.0], [56.7, 526.0], [56.8, 526.0], [56.9, 526.0], [57.0, 556.0], [57.1, 556.0], [57.2, 556.0], [57.3, 556.0], [57.4, 556.0], [57.5, 556.0], [57.6, 588.0], [57.7, 588.0], [57.8, 588.0], [57.9, 588.0], [58.0, 588.0], [58.1, 588.0], [58.2, 617.0], [58.3, 617.0], [58.4, 617.0], [58.5, 617.0], [58.6, 617.0], [58.7, 617.0], [58.8, 642.0], [58.9, 642.0], [59.0, 642.0], [59.1, 642.0], [59.2, 642.0], [59.3, 642.0], [59.4, 722.0], [59.5, 722.0], [59.6, 722.0], [59.7, 722.0], [59.8, 722.0], [59.9, 722.0], [60.0, 722.0], [60.1, 737.0], [60.2, 737.0], [60.3, 737.0], [60.4, 737.0], [60.5, 737.0], [60.6, 737.0], [60.7, 770.0], [60.8, 770.0], [60.9, 770.0], [61.0, 770.0], [61.1, 770.0], [61.2, 770.0], [61.3, 789.0], [61.4, 789.0], [61.5, 789.0], [61.6, 789.0], [61.7, 789.0], [61.8, 789.0], [61.9, 794.0], [62.0, 794.0], [62.1, 794.0], [62.2, 794.0], [62.3, 794.0], [62.4, 794.0], [62.5, 809.0], [62.6, 809.0], [62.7, 809.0], [62.8, 809.0], [62.9, 809.0], [63.0, 809.0], [63.1, 815.0], [63.2, 815.0], [63.3, 815.0], [63.4, 815.0], [63.5, 815.0], [63.6, 815.0], [63.7, 820.0], [63.8, 820.0], [63.9, 820.0], [64.0, 820.0], [64.1, 820.0], [64.2, 820.0], [64.3, 831.0], [64.4, 831.0], [64.5, 831.0], [64.6, 831.0], [64.7, 831.0], [64.8, 831.0], [64.9, 886.0], [65.0, 886.0], [65.1, 886.0], [65.2, 886.0], [65.3, 886.0], [65.4, 886.0], [65.5, 892.0], [65.6, 892.0], [65.7, 892.0], [65.8, 892.0], [65.9, 892.0], [66.0, 892.0], [66.1, 897.0], [66.2, 897.0], [66.3, 897.0], [66.4, 897.0], [66.5, 897.0], [66.6, 897.0], [66.7, 905.0], [66.8, 905.0], [66.9, 905.0], [67.0, 905.0], [67.1, 905.0], [67.2, 905.0], [67.3, 917.0], [67.4, 917.0], [67.5, 917.0], [67.6, 917.0], [67.7, 917.0], [67.8, 917.0], [67.9, 935.0], [68.0, 935.0], [68.1, 935.0], [68.2, 935.0], [68.3, 935.0], [68.4, 935.0], [68.5, 989.0], [68.6, 989.0], [68.7, 989.0], [68.8, 989.0], [68.9, 989.0], [69.0, 989.0], [69.1, 1052.0], [69.2, 1052.0], [69.3, 1052.0], [69.4, 1052.0], [69.5, 1052.0], [69.6, 1052.0], [69.7, 1052.0], [69.8, 1052.0], [69.9, 1052.0], [70.0, 1052.0], [70.1, 1052.0], [70.2, 1052.0], [70.3, 1052.0], [70.4, 1058.0], [70.5, 1058.0], [70.6, 1058.0], [70.7, 1058.0], [70.8, 1058.0], [70.9, 1058.0], [71.0, 1071.0], [71.1, 1071.0], [71.2, 1071.0], [71.3, 1071.0], [71.4, 1071.0], [71.5, 1071.0], [71.6, 1097.0], [71.7, 1097.0], [71.8, 1097.0], [71.9, 1097.0], [72.0, 1097.0], [72.1, 1097.0], [72.2, 1099.0], [72.3, 1099.0], [72.4, 1099.0], [72.5, 1099.0], [72.6, 1099.0], [72.7, 1099.0], [72.8, 1112.0], [72.9, 1112.0], [73.0, 1112.0], [73.1, 1112.0], [73.2, 1112.0], [73.3, 1112.0], [73.4, 1124.0], [73.5, 1124.0], [73.6, 1124.0], [73.7, 1124.0], [73.8, 1124.0], [73.9, 1124.0], [74.0, 1126.0], [74.1, 1126.0], [74.2, 1126.0], [74.3, 1126.0], [74.4, 1126.0], [74.5, 1126.0], [74.6, 1163.0], [74.7, 1163.0], [74.8, 1163.0], [74.9, 1163.0], [75.0, 1163.0], [75.1, 1163.0], [75.2, 1164.0], [75.3, 1164.0], [75.4, 1164.0], [75.5, 1164.0], [75.6, 1164.0], [75.7, 1164.0], [75.8, 1173.0], [75.9, 1173.0], [76.0, 1173.0], [76.1, 1173.0], [76.2, 1173.0], [76.3, 1173.0], [76.4, 1187.0], [76.5, 1187.0], [76.6, 1187.0], [76.7, 1187.0], [76.8, 1187.0], [76.9, 1187.0], [77.0, 1266.0], [77.1, 1266.0], [77.2, 1266.0], [77.3, 1266.0], [77.4, 1266.0], [77.5, 1266.0], [77.6, 1285.0], [77.7, 1285.0], [77.8, 1285.0], [77.9, 1285.0], [78.0, 1285.0], [78.1, 1285.0], [78.2, 1303.0], [78.3, 1303.0], [78.4, 1303.0], [78.5, 1303.0], [78.6, 1303.0], [78.7, 1303.0], [78.8, 1303.0], [78.9, 1303.0], [79.0, 1303.0], [79.1, 1303.0], [79.2, 1303.0], [79.3, 1303.0], [79.4, 1327.0], [79.5, 1327.0], [79.6, 1327.0], [79.7, 1327.0], [79.8, 1327.0], [79.9, 1327.0], [80.0, 1327.0], [80.1, 1328.0], [80.2, 1328.0], [80.3, 1328.0], [80.4, 1328.0], [80.5, 1328.0], [80.6, 1328.0], [80.7, 1356.0], [80.8, 1356.0], [80.9, 1356.0], [81.0, 1356.0], [81.1, 1356.0], [81.2, 1356.0], [81.3, 1368.0], [81.4, 1368.0], [81.5, 1368.0], [81.6, 1368.0], [81.7, 1368.0], [81.8, 1368.0], [81.9, 1405.0], [82.0, 1405.0], [82.1, 1405.0], [82.2, 1405.0], [82.3, 1405.0], [82.4, 1405.0], [82.5, 1413.0], [82.6, 1413.0], [82.7, 1413.0], [82.8, 1413.0], [82.9, 1413.0], [83.0, 1413.0], [83.1, 1457.0], [83.2, 1457.0], [83.3, 1457.0], [83.4, 1457.0], [83.5, 1457.0], [83.6, 1457.0], [83.7, 1526.0], [83.8, 1526.0], [83.9, 1526.0], [84.0, 1526.0], [84.1, 1526.0], [84.2, 1526.0], [84.3, 1534.0], [84.4, 1534.0], [84.5, 1534.0], [84.6, 1534.0], [84.7, 1534.0], [84.8, 1534.0], [84.9, 1549.0], [85.0, 1549.0], [85.1, 1549.0], [85.2, 1549.0], [85.3, 1549.0], [85.4, 1549.0], [85.5, 1574.0], [85.6, 1574.0], [85.7, 1574.0], [85.8, 1574.0], [85.9, 1574.0], [86.0, 1574.0], [86.1, 1582.0], [86.2, 1582.0], [86.3, 1582.0], [86.4, 1582.0], [86.5, 1582.0], [86.6, 1582.0], [86.7, 1612.0], [86.8, 1612.0], [86.9, 1612.0], [87.0, 1612.0], [87.1, 1612.0], [87.2, 1612.0], [87.3, 1703.0], [87.4, 1703.0], [87.5, 1703.0], [87.6, 1703.0], [87.7, 1703.0], [87.8, 1703.0], [87.9, 1710.0], [88.0, 1710.0], [88.1, 1710.0], [88.2, 1710.0], [88.3, 1710.0], [88.4, 1710.0], [88.5, 1745.0], [88.6, 1745.0], [88.7, 1745.0], [88.8, 1745.0], [88.9, 1745.0], [89.0, 1745.0], [89.1, 1795.0], [89.2, 1795.0], [89.3, 1795.0], [89.4, 1795.0], [89.5, 1795.0], [89.6, 1795.0], [89.7, 1817.0], [89.8, 1817.0], [89.9, 1817.0], [90.0, 1817.0], [90.1, 1817.0], [90.2, 1817.0], [90.3, 1817.0], [90.4, 1834.0], [90.5, 1834.0], [90.6, 1834.0], [90.7, 1834.0], [90.8, 1834.0], [90.9, 1834.0], [91.0, 1850.0], [91.1, 1850.0], [91.2, 1850.0], [91.3, 1850.0], [91.4, 1850.0], [91.5, 1850.0], [91.6, 1852.0], [91.7, 1852.0], [91.8, 1852.0], [91.9, 1852.0], [92.0, 1852.0], [92.1, 1852.0], [92.2, 1872.0], [92.3, 1872.0], [92.4, 1872.0], [92.5, 1872.0], [92.6, 1872.0], [92.7, 1872.0], [92.8, 1877.0], [92.9, 1877.0], [93.0, 1877.0], [93.1, 1877.0], [93.2, 1877.0], [93.3, 1877.0], [93.4, 1890.0], [93.5, 1890.0], [93.6, 1890.0], [93.7, 1890.0], [93.8, 1890.0], [93.9, 1890.0], [94.0, 1915.0], [94.1, 1915.0], [94.2, 1915.0], [94.3, 1915.0], [94.4, 1915.0], [94.5, 1915.0], [94.6, 1940.0], [94.7, 1940.0], [94.8, 1940.0], [94.9, 1940.0], [95.0, 1940.0], [95.1, 1940.0], [95.2, 1941.0], [95.3, 1941.0], [95.4, 1941.0], [95.5, 1941.0], [95.6, 1941.0], [95.7, 1941.0], [95.8, 1949.0], [95.9, 1949.0], [96.0, 1949.0], [96.1, 1949.0], [96.2, 1949.0], [96.3, 1949.0], [96.4, 1962.0], [96.5, 1962.0], [96.6, 1962.0], [96.7, 1962.0], [96.8, 1962.0], [96.9, 1962.0], [97.0, 2046.0], [97.1, 2046.0], [97.2, 2046.0], [97.3, 2046.0], [97.4, 2046.0], [97.5, 2046.0], [97.6, 2118.0], [97.7, 2118.0], [97.8, 2118.0], [97.9, 2118.0], [98.0, 2118.0], [98.1, 2118.0], [98.2, 2633.0], [98.3, 2633.0], [98.4, 2633.0], [98.5, 2633.0], [98.6, 2633.0], [98.7, 2633.0], [98.8, 2696.0], [98.9, 2696.0], [99.0, 2696.0], [99.1, 2696.0], [99.2, 2696.0], [99.3, 2696.0], [99.4, 2909.0], [99.5, 2909.0], [99.6, 2909.0], [99.7, 2909.0], [99.8, 2909.0], [99.9, 2909.0], [100.0, 2909.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 1.0], [41.8, 1.0], [41.9, 1.0], [42.0, 1.0], [42.1, 1.0], [42.2, 1.0], [42.3, 1.0], [42.4, 1.0], [42.5, 1.0], [42.6, 1.0], [42.7, 1.0], [42.8, 1.0], [42.9, 1.0], [43.0, 1.0], [43.1, 1.0], [43.2, 1.0], [43.3, 1.0], [43.4, 1.0], [43.5, 1.0], [43.6, 1.0], [43.7, 1.0], [43.8, 1.0], [43.9, 1.0], [44.0, 1.0], [44.1, 1.0], [44.2, 1.0], [44.3, 1.0], [44.4, 1.0], [44.5, 1.0], [44.6, 1.0], [44.7, 1.0], [44.8, 1.0], [44.9, 1.0], [45.0, 1.0], [45.1, 1.0], [45.2, 1.0], [45.3, 1.0], [45.4, 1.0], [45.5, 1.0], [45.6, 1.0], [45.7, 1.0], [45.8, 1.0], [45.9, 1.0], [46.0, 1.0], [46.1, 1.0], [46.2, 1.0], [46.3, 1.0], [46.4, 1.0], [46.5, 1.0], [46.6, 1.0], [46.7, 1.0], [46.8, 1.0], [46.9, 1.0], [47.0, 1.0], [47.1, 1.0], [47.2, 1.0], [47.3, 1.0], [47.4, 1.0], [47.5, 1.0], [47.6, 1.0], [47.7, 1.0], [47.8, 1.0], [47.9, 1.0], [48.0, 1.0], [48.1, 1.0], [48.2, 1.0], [48.3, 1.0], [48.4, 1.0], [48.5, 1.0], [48.6, 1.0], [48.7, 1.0], [48.8, 1.0], [48.9, 1.0], [49.0, 1.0], [49.1, 1.0], [49.2, 1.0], [49.3, 1.0], [49.4, 1.0], [49.5, 1.0], [49.6, 1.0], [49.7, 1.0], [49.8, 1.0], [49.9, 2.0], [50.0, 2.0], [50.1, 2.0], [50.2, 2.0], [50.3, 2.0], [50.4, 2.0], [50.5, 2.0], [50.6, 2.0], [50.7, 2.0], [50.8, 2.0], [50.9, 2.0], [51.0, 2.0], [51.1, 2.0], [51.2, 2.0], [51.3, 2.0], [51.4, 2.0], [51.5, 2.0], [51.6, 2.0], [51.7, 2.0], [51.8, 2.0], [51.9, 2.0], [52.0, 2.0], [52.1, 2.0], [52.2, 2.0], [52.3, 2.0], [52.4, 2.0], [52.5, 2.0], [52.6, 2.0], [52.7, 2.0], [52.8, 2.0], [52.9, 2.0], [53.0, 2.0], [53.1, 2.0], [53.2, 2.0], [53.3, 2.0], [53.4, 2.0], [53.5, 2.0], [53.6, 2.0], [53.7, 2.0], [53.8, 2.0], [53.9, 2.0], [54.0, 2.0], [54.1, 2.0], [54.2, 2.0], [54.3, 2.0], [54.4, 2.0], [54.5, 2.0], [54.6, 2.0], [54.7, 2.0], [54.8, 2.0], [54.9, 2.0], [55.0, 2.0], [55.1, 2.0], [55.2, 2.0], [55.3, 2.0], [55.4, 3.0], [55.5, 3.0], [55.6, 3.0], [55.7, 4.0], [55.8, 4.0], [55.9, 4.0], [56.0, 4.0], [56.1, 4.0], [56.2, 4.0], [56.3, 5.0], [56.4, 5.0], [56.5, 5.0], [56.6, 5.0], [56.7, 5.0], [56.8, 6.0], [56.9, 7.0], [57.0, 9.0], [57.1, 13.0], [57.2, 20.0], [57.3, 29.0], [57.4, 36.0], [57.5, 38.0], [57.6, 40.0], [57.7, 42.0], [57.8, 43.0], [57.9, 44.0], [58.0, 44.0], [58.1, 45.0], [58.2, 46.0], [58.3, 47.0], [58.4, 49.0], [58.5, 50.0], [58.6, 51.0], [58.7, 53.0], [58.8, 53.0], [58.9, 54.0], [59.0, 56.0], [59.1, 56.0], [59.2, 58.0], [59.3, 59.0], [59.4, 60.0], [59.5, 62.0], [59.6, 63.0], [59.7, 65.0], [59.8, 66.0], [59.9, 69.0], [60.0, 72.0], [60.1, 76.0], [60.2, 78.0], [60.3, 80.0], [60.4, 83.0], [60.5, 87.0], [60.6, 92.0], [60.7, 95.0], [60.8, 98.0], [60.9, 103.0], [61.0, 110.0], [61.1, 116.0], [61.2, 128.0], [61.3, 140.0], [61.4, 156.0], [61.5, 177.0], [61.6, 217.0], [61.7, 236.0], [61.8, 262.0], [61.9, 300.0], [62.0, 326.0], [62.1, 346.0], [62.2, 367.0], [62.3, 393.0], [62.4, 421.0], [62.5, 441.0], [62.6, 464.0], [62.7, 481.0], [62.8, 498.0], [62.9, 514.0], [63.0, 541.0], [63.1, 579.0], [63.2, 601.0], [63.3, 620.0], [63.4, 660.0], [63.5, 678.0], [63.6, 710.0], [63.7, 739.0], [63.8, 758.0], [63.9, 782.0], [64.0, 796.0], [64.1, 813.0], [64.2, 832.0], [64.3, 855.0], [64.4, 875.0], [64.5, 900.0], [64.6, 912.0], [64.7, 928.0], [64.8, 946.0], [64.9, 973.0], [65.0, 986.0], [65.1, 1011.0], [65.2, 1026.0], [65.3, 1043.0], [65.4, 1065.0], [65.5, 1077.0], [65.6, 1094.0], [65.7, 1103.0], [65.8, 1119.0], [65.9, 1134.0], [66.0, 1146.0], [66.1, 1154.0], [66.2, 1172.0], [66.3, 1185.0], [66.4, 1199.0], [66.5, 1212.0], [66.6, 1220.0], [66.7, 1239.0], [66.8, 1258.0], [66.9, 1270.0], [67.0, 1278.0], [67.1, 1292.0], [67.2, 1302.0], [67.3, 1329.0], [67.4, 1343.0], [67.5, 1359.0], [67.6, 1378.0], [67.7, 1391.0], [67.8, 1407.0], [67.9, 1422.0], [68.0, 1442.0], [68.1, 1451.0], [68.2, 1466.0], [68.3, 1473.0], [68.4, 1483.0], [68.5, 1493.0], [68.6, 1503.0], [68.7, 1517.0], [68.8, 1531.0], [68.9, 1543.0], [69.0, 1555.0], [69.1, 1569.0], [69.2, 1580.0], [69.3, 1591.0], [69.4, 1605.0], [69.5, 1622.0], [69.6, 1634.0], [69.7, 1644.0], [69.8, 1649.0], [69.9, 1662.0], [70.0, 1671.0], [70.1, 1683.0], [70.2, 1692.0], [70.3, 1706.0], [70.4, 1715.0], [70.5, 1722.0], [70.6, 1729.0], [70.7, 1739.0], [70.8, 1747.0], [70.9, 1759.0], [71.0, 1767.0], [71.1, 1774.0], [71.2, 1786.0], [71.3, 1796.0], [71.4, 1801.0], [71.5, 1815.0], [71.6, 1831.0], [71.7, 1838.0], [71.8, 1846.0], [71.9, 1853.0], [72.0, 1861.0], [72.1, 1872.0], [72.2, 1881.0], [72.3, 1888.0], [72.4, 1897.0], [72.5, 1906.0], [72.6, 1914.0], [72.7, 1922.0], [72.8, 1930.0], [72.9, 1935.0], [73.0, 1945.0], [73.1, 1957.0], [73.2, 1963.0], [73.3, 1973.0], [73.4, 1979.0], [73.5, 1988.0], [73.6, 1998.0], [73.7, 2008.0], [73.8, 2017.0], [73.9, 2024.0], [74.0, 2030.0], [74.1, 2037.0], [74.2, 2044.0], [74.3, 2051.0], [74.4, 2057.0], [74.5, 2065.0], [74.6, 2071.0], [74.7, 2075.0], [74.8, 2082.0], [74.9, 2090.0], [75.0, 2099.0], [75.1, 2106.0], [75.2, 2111.0], [75.3, 2116.0], [75.4, 2122.0], [75.5, 2128.0], [75.6, 2135.0], [75.7, 2143.0], [75.8, 2153.0], [75.9, 2157.0], [76.0, 2168.0], [76.1, 2175.0], [76.2, 2180.0], [76.3, 2186.0], [76.4, 2193.0], [76.5, 2204.0], [76.6, 2209.0], [76.7, 2216.0], [76.8, 2223.0], [76.9, 2228.0], [77.0, 2237.0], [77.1, 2242.0], [77.2, 2247.0], [77.3, 2251.0], [77.4, 2260.0], [77.5, 2267.0], [77.6, 2273.0], [77.7, 2281.0], [77.8, 2285.0], [77.9, 2291.0], [78.0, 2297.0], [78.1, 2301.0], [78.2, 2305.0], [78.3, 2312.0], [78.4, 2318.0], [78.5, 2322.0], [78.6, 2326.0], [78.7, 2332.0], [78.8, 2335.0], [78.9, 2339.0], [79.0, 2344.0], [79.1, 2349.0], [79.2, 2355.0], [79.3, 2361.0], [79.4, 2365.0], [79.5, 2370.0], [79.6, 2376.0], [79.7, 2380.0], [79.8, 2390.0], [79.9, 2395.0], [80.0, 2398.0], [80.1, 2405.0], [80.2, 2408.0], [80.3, 2412.0], [80.4, 2418.0], [80.5, 2423.0], [80.6, 2426.0], [80.7, 2431.0], [80.8, 2435.0], [80.9, 2440.0], [81.0, 2449.0], [81.1, 2452.0], [81.2, 2456.0], [81.3, 2463.0], [81.4, 2468.0], [81.5, 2472.0], [81.6, 2476.0], [81.7, 2481.0], [81.8, 2486.0], [81.9, 2490.0], [82.0, 2493.0], [82.1, 2499.0], [82.2, 2502.0], [82.3, 2506.0], [82.4, 2510.0], [82.5, 2514.0], [82.6, 2521.0], [82.7, 2526.0], [82.8, 2530.0], [82.9, 2534.0], [83.0, 2539.0], [83.1, 2543.0], [83.2, 2547.0], [83.3, 2552.0], [83.4, 2558.0], [83.5, 2563.0], [83.6, 2567.0], [83.7, 2571.0], [83.8, 2576.0], [83.9, 2579.0], [84.0, 2583.0], [84.1, 2588.0], [84.2, 2592.0], [84.3, 2596.0], [84.4, 2599.0], [84.5, 2604.0], [84.6, 2609.0], [84.7, 2613.0], [84.8, 2617.0], [84.9, 2623.0], [85.0, 2628.0], [85.1, 2633.0], [85.2, 2636.0], [85.3, 2640.0], [85.4, 2644.0], [85.5, 2648.0], [85.6, 2652.0], [85.7, 2657.0], [85.8, 2663.0], [85.9, 2666.0], [86.0, 2670.0], [86.1, 2674.0], [86.2, 2679.0], [86.3, 2682.0], [86.4, 2690.0], [86.5, 2693.0], [86.6, 2700.0], [86.7, 2704.0], [86.8, 2709.0], [86.9, 2715.0], [87.0, 2719.0], [87.1, 2724.0], [87.2, 2728.0], [87.3, 2733.0], [87.4, 2739.0], [87.5, 2743.0], [87.6, 2749.0], [87.7, 2754.0], [87.8, 2759.0], [87.9, 2762.0], [88.0, 2770.0], [88.1, 2775.0], [88.2, 2779.0], [88.3, 2782.0], [88.4, 2787.0], [88.5, 2793.0], [88.6, 2798.0], [88.7, 2804.0], [88.8, 2809.0], [88.9, 2813.0], [89.0, 2820.0], [89.1, 2825.0], [89.2, 2830.0], [89.3, 2837.0], [89.4, 2840.0], [89.5, 2847.0], [89.6, 2852.0], [89.7, 2857.0], [89.8, 2863.0], [89.9, 2872.0], [90.0, 2879.0], [90.1, 2884.0], [90.2, 2893.0], [90.3, 2899.0], [90.4, 2904.0], [90.5, 2910.0], [90.6, 2917.0], [90.7, 2922.0], [90.8, 2927.0], [90.9, 2934.0], [91.0, 2941.0], [91.1, 2948.0], [91.2, 2955.0], [91.3, 2961.0], [91.4, 2975.0], [91.5, 2984.0], [91.6, 2990.0], [91.7, 2996.0], [91.8, 3004.0], [91.9, 3009.0], [92.0, 3016.0], [92.1, 3024.0], [92.2, 3032.0], [92.3, 3038.0], [92.4, 3045.0], [92.5, 3050.0], [92.6, 3057.0], [92.7, 3066.0], [92.8, 3072.0], [92.9, 3081.0], [93.0, 3087.0], [93.1, 3097.0], [93.2, 3100.0], [93.3, 3113.0], [93.4, 3123.0], [93.5, 3129.0], [93.6, 3137.0], [93.7, 3147.0], [93.8, 3159.0], [93.9, 3169.0], [94.0, 3180.0], [94.1, 3188.0], [94.2, 3195.0], [94.3, 3203.0], [94.4, 3211.0], [94.5, 3219.0], [94.6, 3229.0], [94.7, 3239.0], [94.8, 3246.0], [94.9, 3256.0], [95.0, 3271.0], [95.1, 3280.0], [95.2, 3291.0], [95.3, 3304.0], [95.4, 3318.0], [95.5, 3328.0], [95.6, 3343.0], [95.7, 3355.0], [95.8, 3370.0], [95.9, 3383.0], [96.0, 3403.0], [96.1, 3419.0], [96.2, 3435.0], [96.3, 3447.0], [96.4, 3458.0], [96.5, 3477.0], [96.6, 3494.0], [96.7, 3507.0], [96.8, 3525.0], [96.9, 3536.0], [97.0, 3557.0], [97.1, 3574.0], [97.2, 3603.0], [97.3, 3620.0], [97.4, 3636.0], [97.5, 3654.0], [97.6, 3674.0], [97.7, 3708.0], [97.8, 3734.0], [97.9, 3766.0], [98.0, 3789.0], [98.1, 3818.0], [98.2, 3862.0], [98.3, 3915.0], [98.4, 3973.0], [98.5, 4069.0], [98.6, 4141.0], [98.7, 4267.0], [98.8, 4396.0], [98.9, 4682.0], [99.0, 5085.0], [99.1, 12006.0], [99.2, 16004.0], [99.3, 16006.0], [99.4, 16008.0], [99.5, 20004.0], [99.6, 20005.0], [99.7, 20006.0], [99.8, 20006.0], [99.9, 20006.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 10445.0, "series": [{"data": [[0.0, 10445.0], [600.0, 55.0], [700.0, 70.0], [800.0, 72.0], [900.0, 87.0], [1000.0, 101.0], [1100.0, 110.0], [1200.0, 121.0], [1300.0, 112.0], [1400.0, 104.0], [1500.0, 95.0], [1600.0, 120.0], [1700.0, 134.0], [1800.0, 167.0], [1900.0, 173.0], [2000.0, 180.0], [2100.0, 194.0], [2200.0, 247.0], [2300.0, 249.0], [2400.0, 289.0], [2500.0, 317.0], [2600.0, 355.0], [2700.0, 327.0], [2800.0, 304.0], [2900.0, 276.0], [3000.0, 236.0], [3100.0, 241.0], [3300.0, 192.0], [3200.0, 215.0], [3400.0, 146.0], [3500.0, 106.0], [3700.0, 61.0], [3600.0, 94.0], [3800.0, 34.0], [3900.0, 28.0], [4000.0, 7.0], [4100.0, 16.0], [4200.0, 9.0], [4300.0, 13.0], [4600.0, 8.0], [4500.0, 5.0], [4400.0, 7.0], [4800.0, 3.0], [4700.0, 2.0], [5100.0, 2.0], [4900.0, 2.0], [5400.0, 1.0], [16000.0, 1.0], [20000.0, 1.0], [100.0, 130.0], [200.0, 52.0], [300.0, 54.0], [400.0, 55.0], [500.0, 75.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[2100.0, 1.0], [600.0, 2.0], [2600.0, 2.0], [700.0, 5.0], [2900.0, 1.0], [800.0, 7.0], [200.0, 20.0], [900.0, 4.0], [1000.0, 6.0], [1100.0, 7.0], [300.0, 28.0], [1200.0, 2.0], [1300.0, 6.0], [1400.0, 3.0], [1500.0, 5.0], [400.0, 13.0], [100.0, 28.0], [1600.0, 1.0], [1700.0, 4.0], [1800.0, 7.0], [1900.0, 5.0], [500.0, 7.0], [2000.0, 1.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 10033.0], [600.0, 61.0], [700.0, 78.0], [800.0, 76.0], [900.0, 94.0], [1000.0, 96.0], [1100.0, 124.0], [1200.0, 126.0], [1300.0, 96.0], [1400.0, 139.0], [1500.0, 126.0], [1600.0, 150.0], [1700.0, 179.0], [1800.0, 180.0], [1900.0, 196.0], [2000.0, 230.0], [2100.0, 236.0], [2200.0, 262.0], [2300.0, 328.0], [2400.0, 346.0], [2500.0, 378.0], [2600.0, 360.0], [2700.0, 337.0], [2800.0, 277.0], [2900.0, 235.0], [3000.0, 237.0], [3100.0, 177.0], [3200.0, 167.0], [3300.0, 119.0], [3400.0, 112.0], [3500.0, 87.0], [3600.0, 80.0], [3700.0, 62.0], [3800.0, 38.0], [3900.0, 26.0], [4000.0, 18.0], [4100.0, 18.0], [4300.0, 13.0], [4200.0, 12.0], [4400.0, 7.0], [4500.0, 7.0], [4600.0, 3.0], [4800.0, 5.0], [4700.0, 5.0], [4900.0, 4.0], [5000.0, 2.0], [5200.0, 1.0], [12000.0, 30.0], [16000.0, 38.0], [20000.0, 95.0], [100.0, 124.0], [200.0, 56.0], [300.0, 72.0], [400.0, 79.0], [500.0, 63.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1874.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 18998.0, "series": [{"data": [[0.0, 2541.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1874.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9752.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 18998.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 51.60829493087553, "minX": 1.58543322E12, "maxY": 165.0, "series": [{"data": [[1.58543364E12, 165.0], [1.58543334E12, 165.0], [1.58543382E12, 111.68387372013628], [1.58543376E12, 164.8168665524462], [1.58543328E12, 142.9263077510501], [1.58543346E12, 165.0], [1.5854334E12, 165.0], [1.58543358E12, 165.0], [1.58543352E12, 165.0], [1.5854337E12, 165.0], [1.58543322E12, 51.60829493087553]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543382E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.9285714285714285, "minX": 1.0, "maxY": 2390.5, "series": [{"data": [[2.0, 50.0], [7.0, 81.0], [10.0, 65.0], [11.0, 58.25], [13.0, 58.0], [14.0, 54.5], [15.0, 48.0], [16.0, 39.75], [17.0, 47.75], [18.0, 57.5], [20.0, 59.0], [21.0, 51.333333333333336], [22.0, 56.0], [23.0, 43.5], [25.0, 80.14285714285714], [26.0, 52.2], [27.0, 55.6875], [28.0, 55.333333333333336], [29.0, 48.0], [30.0, 62.333333333333336], [31.0, 53.0], [32.0, 80.0], [33.0, 43.0], [34.0, 47.0], [35.0, 47.0], [36.0, 83.2], [37.0, 93.57142857142857], [38.0, 86.5], [39.0, 97.5], [40.0, 62.0], [41.0, 59.44444444444444], [42.0, 72.1], [43.0, 79.875], [44.0, 924.9583333333335], [45.0, 54.142857142857146], [46.0, 49.75], [47.0, 73.6], [48.0, 86.75], [49.0, 26.64705882352941], [50.0, 74.625], [51.0, 12.111111111111112], [52.0, 26.625000000000007], [53.0, 71.66666666666666], [54.0, 45.714285714285715], [55.0, 36.4], [56.0, 104.14285714285715], [57.0, 42.941176470588246], [58.0, 96.14285714285714], [59.0, 53.916666666666664], [60.0, 30.66666666666667], [61.0, 45.6], [62.0, 52.666666666666664], [63.0, 48.666666666666664], [64.0, 49.25], [65.0, 74.8], [66.0, 46.4], [67.0, 244.0], [68.0, 143.2142857142857], [69.0, 102.36363636363636], [70.0, 52.666666666666664], [71.0, 39.45454545454545], [72.0, 14.769230769230766], [73.0, 41.50000000000001], [74.0, 46.5], [75.0, 60.2], [76.0, 145.0], [77.0, 112.25], [78.0, 151.5], [79.0, 88.59259259259258], [80.0, 26.799999999999994], [81.0, 27.29729729729729], [82.0, 40.77777777777779], [83.0, 40.647058823529406], [84.0, 30.416666666666668], [85.0, 88.2], [86.0, 79.55555555555556], [87.0, 8.866666666666665], [88.0, 38.66666666666667], [89.0, 38.315789473684205], [90.0, 409.0], [91.0, 118.27272727272725], [92.0, 325.33333333333337], [93.0, 280.7692307692308], [94.0, 258.3999999999999], [95.0, 258.07142857142856], [96.0, 247.0], [97.0, 223.90909090909093], [98.0, 12.423076923076923], [99.0, 11.06060606060606], [100.0, 51.99999999999999], [101.0, 41.125], [102.0, 67.46153846153845], [103.0, 206.37499999999997], [104.0, 281.7777777777778], [105.0, 466.0000000000001], [106.0, 156.19999999999996], [107.0, 554.0], [108.0, 264.8333333333333], [109.0, 219.29999999999998], [110.0, 159.45], [111.0, 396.78571428571416], [112.0, 485.43749999999994], [113.0, 650.6666666666667], [114.0, 339.0], [115.0, 575.3124999999999], [116.0, 265.1896551724139], [117.0, 1218.5714285714287], [118.0, 144.92857142857144], [119.0, 214.55882352941185], [120.0, 508.4666666666667], [121.0, 206.060606060606], [122.0, 300.0555555555555], [123.0, 674.9333333333332], [124.0, 281.68750000000006], [125.0, 454.41666666666663], [126.0, 830.7777777777777], [127.0, 242.56249999999997], [128.0, 1033.857142857143], [129.0, 495.66666666666663], [130.0, 988.4285714285714], [131.0, 132.28571428571422], [132.0, 1113.7142857142856], [133.0, 402.2857142857143], [134.0, 240.73333333333335], [135.0, 884.6923076923078], [136.0, 595.3636363636363], [137.0, 343.2173913043478], [138.0, 563.3478260869566], [139.0, 1084.333333333333], [140.0, 394.9677419354838], [141.0, 432.875], [142.0, 486.6999999999998], [143.0, 200.18309859154942], [144.0, 278.64864864864865], [145.0, 495.7894736842106], [146.0, 1281.0], [147.0, 261.83333333333337], [148.0, 211.5897435897437], [149.0, 836.1], [150.0, 1543.875], [151.0, 294.90624999999994], [152.0, 1244.4285714285713], [153.0, 383.35294117647055], [154.0, 347.7837837837838], [155.0, 550.4545454545454], [156.0, 885.1818181818182], [157.0, 591.4499999999999], [158.0, 112.83333333333333], [159.0, 1660.6666666666665], [160.0, 1180.8], [161.0, 150.9701492537314], [162.0, 830.9259259259259], [163.0, 199.0144927536231], [164.0, 208.16216216216222], [165.0, 948.9636669706152], [1.0, 58.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[157.61442424242463, 857.1190909090989]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[8.0, 2390.5], [9.0, 2292.6666666666665], [10.0, 1114.5], [11.0, 306.0], [12.0, 188.0], [13.0, 177.0], [14.0, 157.0], [15.0, 162.0], [16.0, 174.0], [17.0, 266.0], [18.0, 199.0], [19.0, 167.0], [20.0, 163.0], [21.0, 163.0], [22.0, 315.0], [23.0, 181.0], [24.0, 178.0], [25.0, 239.0], [26.0, 191.0], [27.0, 170.0], [28.0, 174.0], [29.0, 186.0], [30.0, 251.0], [31.0, 166.0], [32.0, 200.0], [33.0, 210.0], [34.0, 174.0], [35.0, 170.0], [36.0, 350.0], [37.0, 328.0], [38.0, 304.0], [39.0, 350.0], [40.0, 360.0], [41.0, 258.0], [42.0, 243.0], [43.0, 353.0], [44.0, 185.0], [45.0, 181.0], [46.0, 211.0], [47.0, 367.0], [49.0, 451.0], [50.0, 393.5], [52.0, 379.0], [53.0, 482.0], [54.0, 508.0], [55.0, 438.0], [57.0, 452.0], [58.0, 381.0], [59.0, 372.0], [60.0, 205.0], [61.0, 325.0], [62.0, 172.0], [63.0, 163.0], [64.0, 183.0], [65.0, 360.0], [67.0, 377.5], [68.0, 281.0], [69.0, 194.0], [70.0, 174.0], [71.0, 252.0], [72.0, 254.0], [73.0, 165.0], [75.0, 346.5], [76.0, 374.0], [78.0, 486.0], [79.0, 324.5], [80.0, 216.0], [81.0, 310.0], [82.0, 336.0], [83.0, 353.0], [84.0, 291.0], [86.0, 402.5], [87.0, 358.0], [88.0, 294.0], [89.0, 341.0], [90.0, 332.0], [91.0, 300.0], [93.0, 422.0], [94.0, 420.0], [95.0, 471.0], [96.0, 382.5], [97.0, 280.0], [98.0, 192.0], [99.0, 219.0], [100.0, 234.0], [102.0, 438.0], [103.0, 617.0], [104.0, 556.0], [106.0, 755.5], [108.0, 706.0], [109.0, 588.0], [110.0, 524.0], [111.0, 526.0], [113.0, 815.0], [114.0, 1052.0], [116.0, 1303.0], [117.0, 1056.5], [118.0, 831.0], [119.0, 1071.0], [121.0, 954.0], [122.0, 897.0], [123.0, 886.0], [124.0, 917.0], [125.0, 1052.0], [126.0, 794.0], [127.0, 892.0], [128.0, 905.0], [130.0, 1356.0], [131.0, 1085.0], [132.0, 935.0], [134.0, 1097.0], [136.0, 1293.0], [137.0, 1163.0], [138.0, 1328.0], [139.0, 1164.0], [140.0, 1285.0], [141.0, 1126.0], [142.0, 1187.0], [144.0, 1412.5], [145.0, 1266.0], [146.0, 1303.0], [148.0, 1526.0], [150.0, 1678.5], [151.0, 1534.0], [152.0, 1582.0], [153.0, 1405.0], [154.0, 1703.0], [156.0, 1817.0], [157.0, 1941.0], [158.0, 1962.0], [159.0, 1915.0], [160.0, 1850.0], [161.0, 1940.0], [162.0, 1795.0], [163.0, 1710.0], [164.0, 1834.0], [165.0, 1955.3333333333333]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[84.47878787878787, 754.7030303030306]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[2.0, 50.0], [7.0, 87.0], [12.0, 54.666666666666664], [13.0, 55.00000000000001], [14.0, 53.4], [15.0, 57.5], [16.0, 50.0], [18.0, 51.5], [20.0, 56.0], [21.0, 54.833333333333336], [22.0, 96.25], [23.0, 47.5], [24.0, 44.5], [25.0, 54.0], [26.0, 56.666666666666664], [27.0, 52.375], [28.0, 51.666666666666664], [29.0, 45.0], [30.0, 67.0], [31.0, 41.0], [32.0, 78.75], [33.0, 49.0], [34.0, 46.2], [35.0, 53.666666666666664], [36.0, 86.66666666666667], [37.0, 72.75], [38.0, 65.0], [39.0, 102.8], [40.0, 58.5], [42.0, 144.875], [43.0, 71.16666666666667], [44.0, 1113.4499999999994], [45.0, 60.5], [46.0, 52.166666666666664], [47.0, 72.25], [48.0, 85.66666666666667], [49.0, 27.88888888888889], [50.0, 85.5], [51.0, 14.055555555555554], [52.0, 50.07142857142856], [53.0, 75.66666666666667], [54.0, 59.43750000000001], [55.0, 82.375], [56.0, 83.14285714285714], [57.0, 29.11111111111111], [58.0, 127.25], [59.0, 58.4], [60.0, 25.0], [61.0, 61.49999999999999], [62.0, 44.4], [63.0, 53.25], [64.0, 85.07692307692307], [65.0, 102.4], [66.0, 94.69230769230766], [67.0, 313.85714285714283], [68.0, 66.0], [69.0, 135.875], [70.0, 58.75], [71.0, 31.57142857142857], [72.0, 19.333333333333332], [73.0, 45.0], [74.0, 22.999999999999996], [75.0, 67.14285714285714], [76.0, 266.2857142857143], [77.0, 145.6], [78.0, 204.2], [79.0, 101.62500000000001], [80.0, 25.78571428571429], [81.0, 13.916666666666663], [82.0, 23.48484848484848], [83.0, 34.93749999999999], [84.0, 22.500000000000007], [85.0, 73.0], [86.0, 95.88235294117649], [87.0, 35.05], [88.0, 46.61538461538461], [89.0, 50.17647058823528], [90.0, 196.2], [91.0, 155.45454545454538], [92.0, 156.99999999999994], [93.0, 228.64705882352948], [94.0, 101.2857142857143], [95.0, 288.45000000000005], [96.0, 250.80000000000004], [97.0, 163.91666666666666], [98.0, 16.6875], [99.0, 35.09090909090909], [100.0, 44.81818181818182], [101.0, 33.63636363636363], [102.0, 80.22222222222223], [103.0, 189.0], [104.0, 264.24999999999994], [105.0, 371.27272727272725], [106.0, 143.5], [107.0, 482.5], [108.0, 340.8235294117647], [109.0, 381.5], [110.0, 216.25], [111.0, 375.83333333333337], [112.0, 590.3000000000001], [113.0, 792.8333333333334], [114.0, 859.6250000000001], [115.0, 441.90476190476187], [116.0, 280.469387755102], [117.0, 637.3749999999999], [118.0, 283.3999999999999], [119.0, 266.84210526315786], [120.0, 419.8], [121.0, 119.16666666666674], [122.0, 456.3999999999999], [123.0, 762.8571428571428], [124.0, 365.85], [125.0, 824.0000000000001], [126.0, 728.6666666666665], [127.0, 262.86206896551727], [128.0, 1042.75], [129.0, 641.1249999999999], [130.0, 783.0], [131.0, 189.48076923076923], [132.0, 1092.25], [133.0, 439.4615384615384], [134.0, 371.16666666666674], [135.0, 667.6666666666665], [136.0, 802.1363636363636], [138.0, 306.5172413793104], [139.0, 930.7], [140.0, 394.6875], [141.0, 970.8888888888891], [142.0, 610.6153846153849], [143.0, 133.81250000000003], [137.0, 0.9285714285714285], [144.0, 196.05555555555551], [145.0, 496.25000000000017], [146.0, 1371.8000000000002], [147.0, 189.0], [148.0, 595.5625000000001], [149.0, 1018.7], [150.0, 1780.1], [151.0, 347.235294117647], [152.0, 1540.0], [153.0, 493.8400000000002], [154.0, 539.9333333333334], [155.0, 545.1071428571427], [156.0, 1474.6666666666665], [157.0, 507.2444444444444], [158.0, 218.31707317073167], [159.0, 467.25000000000006], [160.0, 920.4615384615383], [161.0, 214.96610169491527], [162.0, 355.21874999999994], [163.0, 217.38181818181818], [164.0, 134.59999999999997], [165.0, 1153.9931925047465]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[157.5808484848483, 1037.1136363636397]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 165.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.58543322E12, "maxY": 276854.68333333335, "series": [{"data": [[1.58543364E12, 181169.33333333334], [1.58543334E12, 274668.06666666665], [1.58543382E12, 94289.61666666667], [1.58543376E12, 180790.75], [1.58543328E12, 276854.68333333335], [1.58543346E12, 257242.2], [1.5854334E12, 268156.95], [1.58543358E12, 156419.43333333332], [1.58543352E12, 255877.96666666667], [1.5854337E12, 180825.16666666666], [1.58543322E12, 69625.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58543364E12, 0.0], [1.58543334E12, 16559.866666666665], [1.58543382E12, 1158.5], [1.58543376E12, 0.0], [1.58543328E12, 17925.833333333332], [1.58543346E12, 17723.5], [1.5854334E12, 16759.166666666668], [1.58543358E12, 10224.4], [1.58543352E12, 16473.7], [1.5854337E12, 0.0], [1.58543322E12, 4392.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543382E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1.0423502479969484, "minX": 1.58543322E12, "maxY": 4172.885956644675, "series": [{"data": [[1.58543364E12, 1.1546666666666636], [1.58543334E12, 2392.346678023853], [1.58543382E12, 22.308333333333334], [1.58543376E12, 1.049772036474163], [1.58543328E12, 1335.5420032310192], [1.58543346E12, 1904.74], [1.5854334E12, 2300.847198641764], [1.58543358E12, 1488.6862385321103], [1.58543352E12, 2379.0110262934677], [1.5854337E12, 1.8722264728385587], [1.58543322E12, 107.07037037037034]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543328E12, 1025.3103448275863], [1.58543322E12, 452.8717948717951]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58543364E12, 1.6820765441455119], [1.58543334E12, 2362.2580364900105], [1.58543382E12, 41.62150349650349], [1.58543376E12, 1.0423502479969484], [1.58543328E12, 1432.0927357032454], [1.58543346E12, 1978.6664110429447], [1.5854334E12, 2293.968907563028], [1.58543358E12, 4172.885956644675], [1.58543352E12, 2349.4735472679963], [1.5854337E12, 1.0901515151515175], [1.58543322E12, 119.62046204620462]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543382E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58543322E12, "maxY": 2391.762350936965, "series": [{"data": [[1.58543364E12, 0.0], [1.58543334E12, 2391.762350936965], [1.58543382E12, 21.286666666666672], [1.58543376E12, 0.0], [1.58543328E12, 1334.720516962843], [1.58543346E12, 1903.8499999999992], [1.5854334E12, 2300.2962648556854], [1.58543358E12, 1454.6862385321133], [1.58543352E12, 2378.35453774385], [1.5854337E12, 0.0], [1.58543322E12, 105.46666666666668]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543328E12, 1024.3218390804598], [1.58543322E12, 451.3589743589742]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58543364E12, 0.0], [1.58543334E12, 2361.641181581235], [1.58543382E12, 40.65646853146856], [1.58543376E12, 0.0], [1.58543328E12, 1422.0880989180841], [1.58543346E12, 1973.2983128834337], [1.5854334E12, 2293.3789915966386], [1.58543358E12, 1468.408105560791], [1.58543352E12, 2348.82046834345], [1.5854337E12, 0.0], [1.58543322E12, 118.11551155115505]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543382E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.27407407407407414, "minX": 1.58543322E12, "maxY": 1.3974358974358978, "series": [{"data": [[1.58543364E12, 0.6106666666666661], [1.58543334E12, 0.6788756388415678], [1.58543382E12, 0.4966666666666671], [1.58543376E12, 0.530395136778116], [1.58543328E12, 0.483844911147011], [1.58543346E12, 0.4961538461538463], [1.5854334E12, 0.6511035653650261], [1.58543358E12, 0.7211009174311929], [1.58543352E12, 0.5318066157760817], [1.5854337E12, 1.336266258607499], [1.58543322E12, 0.27407407407407414]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543328E12, 0.8160919540229882], [1.58543322E12, 1.3974358974358978]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58543364E12, 1.1265630920803313], [1.58543334E12, 0.6889661164205035], [1.58543382E12, 0.4965034965034967], [1.58543376E12, 0.5299504006104541], [1.58543328E12, 0.7109737248840807], [1.58543346E12, 0.5981595092024542], [1.5854334E12, 0.6831932773109257], [1.58543358E12, 0.5824693685202641], [1.58543352E12, 0.5906331309627059], [1.5854337E12, 0.5643939393939383], [1.58543322E12, 0.7722772277227719]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543382E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.58543322E12, "maxY": 5474.0, "series": [{"data": [[1.58543334E12, 4699.0], [1.58543382E12, 2257.0], [1.58543328E12, 5085.0], [1.58543346E12, 5474.0], [1.5854334E12, 5125.0], [1.58543358E12, 3686.0], [1.58543352E12, 4504.0], [1.58543322E12, 2909.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58543334E12, 307.0], [1.58543382E12, 36.0], [1.58543328E12, 1.0], [1.58543346E12, 2.0], [1.5854334E12, 2.0], [1.58543358E12, 1.0], [1.58543352E12, 2.0], [1.58543322E12, 29.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58543334E12, 3079.6000000000004], [1.58543382E12, 1609.7000000000003], [1.58543328E12, 2669.0], [1.58543346E12, 3348.6000000000004], [1.5854334E12, 3477.5], [1.58543358E12, 3180.0], [1.58543352E12, 3447.0], [1.58543322E12, 350.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58543334E12, 4010.83], [1.58543382E12, 2250.07], [1.58543328E12, 3729.899999999998], [1.58543346E12, 4667.0], [1.5854334E12, 4007.850000000001], [1.58543358E12, 3513.0], [1.58543352E12, 3956.2200000000003], [1.58543322E12, 1433.560000000004]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58543334E12, 3521.4500000000003], [1.58543382E12, 1914.1999999999998], [1.58543328E12, 2885.7999999999984], [1.58543346E12, 3678.2], [1.5854334E12, 3674.0], [1.58543358E12, 3293.75], [1.58543352E12, 3631.0], [1.58543322E12, 431.5999999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543382E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 10003.0, "series": [{"data": [[2.0, 50.0], [3.0, 81.0], [5.0, 62.0], [7.0, 1872.0], [8.0, 56.5], [9.0, 57.5], [11.0, 58.0], [12.0, 52.0], [13.0, 50.0], [14.0, 87.0], [15.0, 1930.0], [17.0, 60.0], [18.0, 50.5], [19.0, 1051.0], [20.0, 119.0], [21.0, 2290.0], [22.0, 2851.5], [23.0, 2264.0], [24.0, 949.0], [25.0, 2543.5], [26.0, 2330.0], [27.0, 2687.0], [28.0, 2191.0], [29.0, 2185.0], [30.0, 2639.5], [31.0, 2670.0], [33.0, 2478.0], [32.0, 2671.0], [34.0, 2625.0], [35.0, 2797.0], [37.0, 2555.0], [36.0, 2436.0], [39.0, 2376.0], [38.0, 2274.0], [41.0, 1693.0], [40.0, 2245.5], [42.0, 2150.0], [43.0, 2720.5], [45.0, 2060.0], [44.0, 2550.5], [46.0, 2438.0], [47.0, 2001.0], [49.0, 2441.0], [48.0, 2189.0], [51.0, 1723.5], [50.0, 2491.0], [52.0, 2975.5], [53.0, 829.0], [54.0, 1152.0], [55.0, 1987.0], [59.0, 72.0], [61.0, 38.5], [63.0, 70.5], [67.0, 48.0], [64.0, 1562.0], [69.0, 41.0], [70.0, 2239.0], [68.0, 1615.0], [72.0, 39.5], [75.0, 77.0], [74.0, 71.0], [73.0, 4.0], [79.0, 506.0], [78.0, 36.5], [76.0, 3.0], [81.0, 76.0], [85.0, 842.5], [86.0, 237.5], [93.0, 3.0], [99.0, 48.0], [102.0, 1701.5], [107.0, 1650.0], [111.0, 1228.0], [127.0, 1592.0], [1.0, 58.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[10.0, 1.0], [15.0, 1.0], [24.0, 1.0], [27.0, 2756.0], [29.0, 1.0], [30.0, 6003.0], [32.0, 1.0], [33.0, 0.0], [35.0, 1816.5], [34.0, 3407.0], [37.0, 1.0], [36.0, 1.0], [38.0, 1.0], [39.0, 1.0], [41.0, 1.0], [40.0, 1.0], [42.0, 1.0], [43.0, 1.0], [45.0, 2.0], [44.0, 1.0], [46.0, 489.0], [47.0, 1.0], [51.0, 1.0], [50.0, 1.0], [52.0, 10003.0], [53.0, 1.0], [54.0, 1.0], [55.0, 1.0], [57.0, 1.0], [58.0, 1.0], [59.0, 1.0], [61.0, 0.0], [60.0, 1.0], [63.0, 1.0], [67.0, 1.0], [64.0, 2942.0], [65.0, 1.0], [68.0, 1.0], [70.0, 1.0], [71.0, 1.0], [69.0, 1.0], [74.0, 1.0], [75.0, 1.0], [72.0, 1.0], [73.0, 1.0], [79.0, 1.0], [76.0, 1.0], [77.0, 1.0], [78.0, 1.0], [81.0, 1.0], [80.0, 1.0], [82.0, 1.0], [83.0, 1.0], [85.0, 1.0], [86.0, 1.0], [84.0, 1.0], [87.0, 1.0], [89.0, 1.0], [91.0, 1.0], [90.0, 1.0], [88.0, 1.0], [92.0, 1.0], [94.0, 1.0], [95.0, 1.0], [93.0, 1.0], [99.0, 1.0], [97.0, 1.0], [96.0, 1.0], [102.0, 1.0], [103.0, 1.0], [100.0, 1.0], [101.0, 1.0], [107.0, 2763.0], [104.0, 1.0], [106.0, 1.0], [111.0, 1.0], [113.0, 1.0], [118.0, 1.0], [122.0, 1.0], [1.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 127.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 3407.0, "series": [{"data": [[2.0, 49.5], [3.0, 80.0], [5.0, 62.0], [7.0, 1866.0], [8.0, 56.0], [9.0, 57.0], [11.0, 57.0], [12.0, 50.0], [13.0, 50.0], [14.0, 86.5], [15.0, 1925.0], [17.0, 59.5], [18.0, 50.0], [19.0, 1050.0], [20.0, 89.5], [21.0, 2289.0], [22.0, 2850.5], [23.0, 2264.0], [24.0, 948.5], [25.0, 2543.5], [26.0, 2330.0], [27.0, 2686.5], [28.0, 2190.5], [29.0, 2185.0], [30.0, 2639.5], [31.0, 2669.0], [33.0, 2477.0], [32.0, 2671.0], [34.0, 2625.0], [35.0, 2796.5], [37.0, 2554.5], [36.0, 2435.0], [39.0, 2376.0], [38.0, 2274.0], [41.0, 1693.0], [40.0, 2245.5], [42.0, 2149.0], [43.0, 2719.5], [45.0, 2060.0], [44.0, 2550.5], [46.0, 2437.0], [47.0, 2000.0], [49.0, 2440.5], [48.0, 2189.0], [51.0, 1720.0], [50.0, 2490.5], [52.0, 2975.5], [53.0, 824.0], [54.0, 1152.0], [55.0, 1986.0], [59.0, 72.0], [61.0, 38.0], [63.0, 68.5], [67.0, 47.0], [64.0, 1561.0], [69.0, 40.0], [70.0, 2238.0], [68.0, 1615.0], [72.0, 38.5], [75.0, 77.0], [74.0, 70.0], [73.0, 4.0], [79.0, 506.0], [78.0, 36.0], [76.0, 3.0], [81.0, 75.0], [85.0, 842.5], [86.0, 237.5], [93.0, 3.0], [99.0, 48.0], [102.0, 1701.0], [107.0, 1650.0], [111.0, 1228.0], [127.0, 1592.0], [1.0, 57.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[10.0, 0.0], [15.0, 0.0], [24.0, 0.0], [27.0, 2755.0], [29.0, 0.0], [30.0, 0.0], [32.0, 0.0], [33.0, 0.0], [35.0, 1815.5], [34.0, 3407.0], [37.0, 0.0], [36.0, 0.0], [38.0, 0.0], [39.0, 0.0], [41.0, 0.0], [40.0, 0.0], [42.0, 0.0], [43.0, 0.0], [45.0, 0.0], [44.0, 0.0], [46.0, 489.0], [47.0, 0.0], [51.0, 0.0], [50.0, 0.0], [52.0, 0.0], [53.0, 0.0], [54.0, 0.0], [55.0, 0.0], [57.0, 0.0], [58.0, 0.0], [59.0, 0.0], [61.0, 0.0], [60.0, 0.0], [63.0, 0.0], [67.0, 0.0], [64.0, 2941.0], [65.0, 0.0], [68.0, 0.0], [70.0, 0.0], [71.0, 0.0], [69.0, 0.0], [74.0, 0.0], [75.0, 0.0], [72.0, 0.0], [73.0, 0.0], [79.0, 0.0], [76.0, 0.0], [77.0, 0.0], [78.0, 0.0], [81.0, 0.0], [80.0, 0.0], [82.0, 0.0], [83.0, 0.0], [85.0, 0.0], [86.0, 0.0], [84.0, 0.0], [87.0, 0.0], [89.0, 0.0], [91.0, 0.0], [90.0, 0.0], [88.0, 0.0], [92.0, 0.0], [94.0, 0.0], [95.0, 0.0], [93.0, 0.0], [99.0, 0.0], [97.0, 0.0], [96.0, 0.0], [102.0, 0.0], [103.0, 0.0], [100.0, 0.0], [101.0, 0.0], [107.0, 2731.0], [104.0, 0.0], [106.0, 0.0], [111.0, 0.0], [113.0, 0.0], [118.0, 0.0], [122.0, 0.0], [1.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 127.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.9, "minX": 1.58543322E12, "maxY": 87.73333333333333, "series": [{"data": [[1.58543364E12, 87.73333333333333], [1.58543334E12, 38.65], [1.58543382E12, 39.06666666666667], [1.58543376E12, 87.55], [1.58543328E12, 45.28333333333333], [1.58543346E12, 43.25], [1.5854334E12, 39.45], [1.58543358E12, 34.483333333333334], [1.58543352E12, 38.81666666666667], [1.5854337E12, 87.56666666666666], [1.58543322E12, 10.9]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543382E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.58543322E12, "maxY": 87.73333333333333, "series": [{"data": [[1.58543334E12, 38.6], [1.58543382E12, 2.7], [1.58543328E12, 42.21666666666667], [1.58543346E12, 40.916666666666664], [1.5854334E12, 38.9], [1.58543358E12, 23.8], [1.58543352E12, 38.13333333333333], [1.58543322E12, 10.85]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58543328E12, 0.25], [1.58543346E12, 0.4], [1.5854334E12, 0.16666666666666666], [1.58543358E12, 0.03333333333333333], [1.58543352E12, 0.26666666666666666]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.58543334E12, 0.016666666666666666], [1.58543346E12, 0.06666666666666667], [1.5854334E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.TruncatedChunkException", "isController": false}, {"data": [[1.58543364E12, 87.73333333333333], [1.58543382E12, 36.36666666666667], [1.58543376E12, 87.55], [1.58543328E12, 0.4166666666666667], [1.58543346E12, 1.4833333333333334], [1.5854334E12, 0.13333333333333333], [1.58543358E12, 12.016666666666667], [1.58543352E12, 0.38333333333333336], [1.5854337E12, 87.56666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.58543334E12, 0.13333333333333333], [1.58543328E12, 0.7666666666666667], [1.58543346E12, 0.5333333333333333], [1.5854334E12, 0.25], [1.58543352E12, 0.08333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543382E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.58543322E12, "maxY": 44.0, "series": [{"data": [[1.58543328E12, 1.45], [1.58543322E12, 1.3]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58543334E12, 19.533333333333335], [1.58543382E12, 1.45], [1.58543328E12, 19.866666666666667], [1.58543346E12, 19.783333333333335], [1.5854334E12, 19.2], [1.58543358E12, 11.866666666666667], [1.58543352E12, 19.083333333333332], [1.58543322E12, 4.5]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58543364E12, 43.75], [1.58543334E12, 0.03333333333333333], [1.58543382E12, 18.55], [1.58543376E12, 43.86666666666667], [1.58543328E12, 0.7666666666666667], [1.58543346E12, 1.8833333333333333], [1.5854334E12, 0.43333333333333335], [1.58543358E12, 6.3], [1.58543352E12, 0.5666666666666667], [1.5854337E12, 43.56666666666667]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.58543334E12, 19.066666666666666], [1.58543382E12, 1.25], [1.58543328E12, 20.9], [1.58543346E12, 21.133333333333333], [1.5854334E12, 19.7], [1.58543358E12, 11.933333333333334], [1.58543352E12, 19.05], [1.58543322E12, 5.05]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58543364E12, 43.983333333333334], [1.58543334E12, 0.11666666666666667], [1.58543382E12, 17.816666666666666], [1.58543376E12, 43.68333333333333], [1.58543328E12, 0.6666666666666666], [1.58543346E12, 0.6], [1.5854334E12, 0.13333333333333333], [1.58543358E12, 5.75], [1.58543352E12, 0.16666666666666666], [1.5854337E12, 44.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543382E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.58543322E12, "maxY": 87.73333333333333, "series": [{"data": [[1.58543334E12, 38.6], [1.58543382E12, 2.7], [1.58543328E12, 42.21666666666667], [1.58543346E12, 40.916666666666664], [1.5854334E12, 38.9], [1.58543358E12, 23.8], [1.58543352E12, 38.13333333333333], [1.58543322E12, 10.85]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58543364E12, 87.73333333333333], [1.58543334E12, 0.15], [1.58543382E12, 36.36666666666667], [1.58543376E12, 87.55], [1.58543328E12, 1.4333333333333333], [1.58543346E12, 2.4833333333333334], [1.5854334E12, 0.5666666666666667], [1.58543358E12, 12.05], [1.58543352E12, 0.7333333333333333], [1.5854337E12, 87.56666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543382E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

