/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 20007.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 1.0], [41.8, 1.0], [41.9, 1.0], [42.0, 1.0], [42.1, 1.0], [42.2, 1.0], [42.3, 1.0], [42.4, 1.0], [42.5, 1.0], [42.6, 1.0], [42.7, 1.0], [42.8, 1.0], [42.9, 1.0], [43.0, 1.0], [43.1, 1.0], [43.2, 1.0], [43.3, 1.0], [43.4, 1.0], [43.5, 1.0], [43.6, 1.0], [43.7, 1.0], [43.8, 1.0], [43.9, 1.0], [44.0, 1.0], [44.1, 1.0], [44.2, 1.0], [44.3, 1.0], [44.4, 1.0], [44.5, 1.0], [44.6, 1.0], [44.7, 1.0], [44.8, 1.0], [44.9, 1.0], [45.0, 1.0], [45.1, 1.0], [45.2, 1.0], [45.3, 1.0], [45.4, 1.0], [45.5, 1.0], [45.6, 1.0], [45.7, 1.0], [45.8, 1.0], [45.9, 1.0], [46.0, 1.0], [46.1, 1.0], [46.2, 1.0], [46.3, 1.0], [46.4, 1.0], [46.5, 1.0], [46.6, 1.0], [46.7, 1.0], [46.8, 1.0], [46.9, 1.0], [47.0, 1.0], [47.1, 1.0], [47.2, 1.0], [47.3, 1.0], [47.4, 1.0], [47.5, 1.0], [47.6, 1.0], [47.7, 1.0], [47.8, 1.0], [47.9, 1.0], [48.0, 1.0], [48.1, 1.0], [48.2, 1.0], [48.3, 1.0], [48.4, 1.0], [48.5, 1.0], [48.6, 1.0], [48.7, 1.0], [48.8, 1.0], [48.9, 1.0], [49.0, 1.0], [49.1, 1.0], [49.2, 1.0], [49.3, 1.0], [49.4, 1.0], [49.5, 1.0], [49.6, 1.0], [49.7, 1.0], [49.8, 1.0], [49.9, 1.0], [50.0, 1.0], [50.1, 1.0], [50.2, 1.0], [50.3, 1.0], [50.4, 1.0], [50.5, 1.0], [50.6, 1.0], [50.7, 1.0], [50.8, 1.0], [50.9, 1.0], [51.0, 1.0], [51.1, 1.0], [51.2, 1.0], [51.3, 1.0], [51.4, 1.0], [51.5, 1.0], [51.6, 1.0], [51.7, 1.0], [51.8, 1.0], [51.9, 1.0], [52.0, 1.0], [52.1, 1.0], [52.2, 1.0], [52.3, 1.0], [52.4, 1.0], [52.5, 1.0], [52.6, 1.0], [52.7, 1.0], [52.8, 1.0], [52.9, 1.0], [53.0, 1.0], [53.1, 1.0], [53.2, 1.0], [53.3, 1.0], [53.4, 1.0], [53.5, 1.0], [53.6, 1.0], [53.7, 1.0], [53.8, 1.0], [53.9, 1.0], [54.0, 1.0], [54.1, 1.0], [54.2, 1.0], [54.3, 1.0], [54.4, 1.0], [54.5, 1.0], [54.6, 1.0], [54.7, 1.0], [54.8, 1.0], [54.9, 1.0], [55.0, 1.0], [55.1, 1.0], [55.2, 1.0], [55.3, 1.0], [55.4, 1.0], [55.5, 1.0], [55.6, 1.0], [55.7, 1.0], [55.8, 1.0], [55.9, 1.0], [56.0, 1.0], [56.1, 1.0], [56.2, 1.0], [56.3, 1.0], [56.4, 1.0], [56.5, 1.0], [56.6, 1.0], [56.7, 1.0], [56.8, 1.0], [56.9, 1.0], [57.0, 1.0], [57.1, 1.0], [57.2, 1.0], [57.3, 1.0], [57.4, 1.0], [57.5, 1.0], [57.6, 1.0], [57.7, 1.0], [57.8, 1.0], [57.9, 1.0], [58.0, 1.0], [58.1, 1.0], [58.2, 1.0], [58.3, 1.0], [58.4, 1.0], [58.5, 1.0], [58.6, 1.0], [58.7, 1.0], [58.8, 1.0], [58.9, 1.0], [59.0, 1.0], [59.1, 1.0], [59.2, 1.0], [59.3, 1.0], [59.4, 1.0], [59.5, 1.0], [59.6, 1.0], [59.7, 1.0], [59.8, 1.0], [59.9, 1.0], [60.0, 1.0], [60.1, 1.0], [60.2, 1.0], [60.3, 1.0], [60.4, 1.0], [60.5, 1.0], [60.6, 1.0], [60.7, 1.0], [60.8, 1.0], [60.9, 1.0], [61.0, 1.0], [61.1, 1.0], [61.2, 1.0], [61.3, 1.0], [61.4, 1.0], [61.5, 1.0], [61.6, 1.0], [61.7, 2.0], [61.8, 2.0], [61.9, 2.0], [62.0, 2.0], [62.1, 2.0], [62.2, 2.0], [62.3, 2.0], [62.4, 2.0], [62.5, 2.0], [62.6, 2.0], [62.7, 2.0], [62.8, 2.0], [62.9, 2.0], [63.0, 2.0], [63.1, 2.0], [63.2, 2.0], [63.3, 2.0], [63.4, 2.0], [63.5, 2.0], [63.6, 2.0], [63.7, 2.0], [63.8, 2.0], [63.9, 2.0], [64.0, 2.0], [64.1, 2.0], [64.2, 2.0], [64.3, 2.0], [64.4, 2.0], [64.5, 2.0], [64.6, 2.0], [64.7, 2.0], [64.8, 2.0], [64.9, 2.0], [65.0, 2.0], [65.1, 2.0], [65.2, 2.0], [65.3, 2.0], [65.4, 2.0], [65.5, 2.0], [65.6, 2.0], [65.7, 2.0], [65.8, 2.0], [65.9, 2.0], [66.0, 2.0], [66.1, 2.0], [66.2, 2.0], [66.3, 2.0], [66.4, 2.0], [66.5, 2.0], [66.6, 2.0], [66.7, 2.0], [66.8, 2.0], [66.9, 2.0], [67.0, 2.0], [67.1, 2.0], [67.2, 2.0], [67.3, 3.0], [67.4, 3.0], [67.5, 3.0], [67.6, 3.0], [67.7, 4.0], [67.8, 4.0], [67.9, 4.0], [68.0, 4.0], [68.1, 5.0], [68.2, 5.0], [68.3, 5.0], [68.4, 6.0], [68.5, 6.0], [68.6, 7.0], [68.7, 11.0], [68.8, 16.0], [68.9, 22.0], [69.0, 34.0], [69.1, 37.0], [69.2, 39.0], [69.3, 40.0], [69.4, 42.0], [69.5, 43.0], [69.6, 44.0], [69.7, 46.0], [69.8, 47.0], [69.9, 47.0], [70.0, 48.0], [70.1, 49.0], [70.2, 51.0], [70.3, 52.0], [70.4, 53.0], [70.5, 55.0], [70.6, 56.0], [70.7, 58.0], [70.8, 60.0], [70.9, 62.0], [71.0, 65.0], [71.1, 69.0], [71.2, 73.0], [71.3, 80.0], [71.4, 95.0], [71.5, 128.0], [71.6, 161.0], [71.7, 239.0], [71.8, 299.0], [71.9, 358.0], [72.0, 426.0], [72.1, 480.0], [72.2, 514.0], [72.3, 546.0], [72.4, 578.0], [72.5, 605.0], [72.6, 641.0], [72.7, 665.0], [72.8, 681.0], [72.9, 717.0], [73.0, 750.0], [73.1, 786.0], [73.2, 813.0], [73.3, 843.0], [73.4, 875.0], [73.5, 904.0], [73.6, 933.0], [73.7, 967.0], [73.8, 1003.0], [73.9, 1034.0], [74.0, 1059.0], [74.1, 1086.0], [74.2, 1116.0], [74.3, 1147.0], [74.4, 1178.0], [74.5, 1201.0], [74.6, 1223.0], [74.7, 1251.0], [74.8, 1281.0], [74.9, 1326.0], [75.0, 1355.0], [75.1, 1378.0], [75.2, 1400.0], [75.3, 1422.0], [75.4, 1442.0], [75.5, 1462.0], [75.6, 1485.0], [75.7, 1517.0], [75.8, 1541.0], [75.9, 1565.0], [76.0, 1584.0], [76.1, 1604.0], [76.2, 1616.0], [76.3, 1639.0], [76.4, 1659.0], [76.5, 1679.0], [76.6, 1692.0], [76.7, 1711.0], [76.8, 1731.0], [76.9, 1755.0], [77.0, 1776.0], [77.1, 1788.0], [77.2, 1813.0], [77.3, 1823.0], [77.4, 1836.0], [77.5, 1844.0], [77.6, 1861.0], [77.7, 1878.0], [77.8, 1896.0], [77.9, 1910.0], [78.0, 1925.0], [78.1, 1938.0], [78.2, 1958.0], [78.3, 1976.0], [78.4, 1998.0], [78.5, 2015.0], [78.6, 2032.0], [78.7, 2043.0], [78.8, 2053.0], [78.9, 2064.0], [79.0, 2077.0], [79.1, 2090.0], [79.2, 2104.0], [79.3, 2112.0], [79.4, 2125.0], [79.5, 2138.0], [79.6, 2147.0], [79.7, 2157.0], [79.8, 2168.0], [79.9, 2179.0], [80.0, 2188.0], [80.1, 2204.0], [80.2, 2215.0], [80.3, 2222.0], [80.4, 2234.0], [80.5, 2246.0], [80.6, 2254.0], [80.7, 2260.0], [80.8, 2264.0], [80.9, 2273.0], [81.0, 2282.0], [81.1, 2292.0], [81.2, 2301.0], [81.3, 2310.0], [81.4, 2324.0], [81.5, 2335.0], [81.6, 2348.0], [81.7, 2355.0], [81.8, 2363.0], [81.9, 2369.0], [82.0, 2378.0], [82.1, 2390.0], [82.2, 2398.0], [82.3, 2407.0], [82.4, 2419.0], [82.5, 2428.0], [82.6, 2435.0], [82.7, 2447.0], [82.8, 2453.0], [82.9, 2458.0], [83.0, 2469.0], [83.1, 2475.0], [83.2, 2486.0], [83.3, 2494.0], [83.4, 2503.0], [83.5, 2510.0], [83.6, 2517.0], [83.7, 2526.0], [83.8, 2536.0], [83.9, 2544.0], [84.0, 2552.0], [84.1, 2566.0], [84.2, 2572.0], [84.3, 2581.0], [84.4, 2586.0], [84.5, 2591.0], [84.6, 2600.0], [84.7, 2607.0], [84.8, 2613.0], [84.9, 2625.0], [85.0, 2638.0], [85.1, 2647.0], [85.2, 2659.0], [85.3, 2665.0], [85.4, 2675.0], [85.5, 2682.0], [85.6, 2689.0], [85.7, 2698.0], [85.8, 2706.0], [85.9, 2717.0], [86.0, 2724.0], [86.1, 2733.0], [86.2, 2741.0], [86.3, 2748.0], [86.4, 2758.0], [86.5, 2765.0], [86.6, 2771.0], [86.7, 2778.0], [86.8, 2787.0], [86.9, 2800.0], [87.0, 2809.0], [87.1, 2817.0], [87.2, 2823.0], [87.3, 2831.0], [87.4, 2839.0], [87.5, 2849.0], [87.6, 2857.0], [87.7, 2865.0], [87.8, 2876.0], [87.9, 2884.0], [88.0, 2893.0], [88.1, 2904.0], [88.2, 2912.0], [88.3, 2919.0], [88.4, 2924.0], [88.5, 2929.0], [88.6, 2935.0], [88.7, 2941.0], [88.8, 2951.0], [88.9, 2958.0], [89.0, 2966.0], [89.1, 2972.0], [89.2, 2980.0], [89.3, 2985.0], [89.4, 2992.0], [89.5, 3006.0], [89.6, 3016.0], [89.7, 3020.0], [89.8, 3031.0], [89.9, 3037.0], [90.0, 3044.0], [90.1, 3052.0], [90.2, 3060.0], [90.3, 3067.0], [90.4, 3073.0], [90.5, 3081.0], [90.6, 3091.0], [90.7, 3098.0], [90.8, 3108.0], [90.9, 3112.0], [91.0, 3117.0], [91.1, 3126.0], [91.2, 3134.0], [91.3, 3141.0], [91.4, 3148.0], [91.5, 3156.0], [91.6, 3165.0], [91.7, 3174.0], [91.8, 3185.0], [91.9, 3192.0], [92.0, 3199.0], [92.1, 3206.0], [92.2, 3216.0], [92.3, 3225.0], [92.4, 3232.0], [92.5, 3242.0], [92.6, 3249.0], [92.7, 3254.0], [92.8, 3262.0], [92.9, 3270.0], [93.0, 3276.0], [93.1, 3282.0], [93.2, 3289.0], [93.3, 3299.0], [93.4, 3308.0], [93.5, 3312.0], [93.6, 3321.0], [93.7, 3328.0], [93.8, 3334.0], [93.9, 3345.0], [94.0, 3355.0], [94.1, 3362.0], [94.2, 3373.0], [94.3, 3385.0], [94.4, 3392.0], [94.5, 3400.0], [94.6, 3407.0], [94.7, 3413.0], [94.8, 3417.0], [94.9, 3424.0], [95.0, 3430.0], [95.1, 3438.0], [95.2, 3447.0], [95.3, 3459.0], [95.4, 3470.0], [95.5, 3479.0], [95.6, 3485.0], [95.7, 3494.0], [95.8, 3504.0], [95.9, 3513.0], [96.0, 3521.0], [96.1, 3528.0], [96.2, 3538.0], [96.3, 3548.0], [96.4, 3558.0], [96.5, 3566.0], [96.6, 3578.0], [96.7, 3588.0], [96.8, 3593.0], [96.9, 3607.0], [97.0, 3620.0], [97.1, 3633.0], [97.2, 3651.0], [97.3, 3659.0], [97.4, 3669.0], [97.5, 3681.0], [97.6, 3696.0], [97.7, 3713.0], [97.8, 3723.0], [97.9, 3748.0], [98.0, 3764.0], [98.1, 3789.0], [98.2, 3805.0], [98.3, 3828.0], [98.4, 3861.0], [98.5, 3887.0], [98.6, 3932.0], [98.7, 3962.0], [98.8, 3994.0], [98.9, 4070.0], [99.0, 4145.0], [99.1, 4199.0], [99.2, 4265.0], [99.3, 4391.0], [99.4, 4459.0], [99.5, 4569.0], [99.6, 4686.0], [99.7, 4885.0], [99.8, 5028.0], [99.9, 5171.0], [100.0, 6359.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 153.0], [0.1, 153.0], [0.2, 153.0], [0.3, 153.0], [0.4, 153.0], [0.5, 153.0], [0.6, 154.0], [0.7, 154.0], [0.8, 154.0], [0.9, 154.0], [1.0, 154.0], [1.1, 154.0], [1.2, 158.0], [1.3, 158.0], [1.4, 158.0], [1.5, 158.0], [1.6, 158.0], [1.7, 160.0], [1.8, 160.0], [1.9, 160.0], [2.0, 160.0], [2.1, 160.0], [2.2, 160.0], [2.3, 161.0], [2.4, 161.0], [2.5, 161.0], [2.6, 161.0], [2.7, 161.0], [2.8, 161.0], [2.9, 161.0], [3.0, 161.0], [3.1, 161.0], [3.2, 161.0], [3.3, 161.0], [3.4, 162.0], [3.5, 162.0], [3.6, 162.0], [3.7, 162.0], [3.8, 162.0], [3.9, 162.0], [4.0, 162.0], [4.1, 162.0], [4.2, 162.0], [4.3, 162.0], [4.4, 162.0], [4.5, 164.0], [4.6, 164.0], [4.7, 164.0], [4.8, 164.0], [4.9, 164.0], [5.0, 165.0], [5.1, 165.0], [5.2, 165.0], [5.3, 165.0], [5.4, 165.0], [5.5, 165.0], [5.6, 165.0], [5.7, 165.0], [5.8, 165.0], [5.9, 165.0], [6.0, 165.0], [6.1, 165.0], [6.2, 166.0], [6.3, 166.0], [6.4, 166.0], [6.5, 166.0], [6.6, 166.0], [6.7, 166.0], [6.8, 166.0], [6.9, 166.0], [7.0, 166.0], [7.1, 166.0], [7.2, 166.0], [7.3, 168.0], [7.4, 168.0], [7.5, 168.0], [7.6, 168.0], [7.7, 168.0], [7.8, 168.0], [7.9, 168.0], [8.0, 168.0], [8.1, 168.0], [8.2, 168.0], [8.3, 168.0], [8.4, 168.0], [8.5, 168.0], [8.6, 168.0], [8.7, 168.0], [8.8, 168.0], [8.9, 169.0], [9.0, 169.0], [9.1, 169.0], [9.2, 169.0], [9.3, 169.0], [9.4, 169.0], [9.5, 172.0], [9.6, 172.0], [9.7, 172.0], [9.8, 172.0], [9.9, 172.0], [10.0, 172.0], [10.1, 172.0], [10.2, 172.0], [10.3, 172.0], [10.4, 172.0], [10.5, 172.0], [10.6, 172.0], [10.7, 172.0], [10.8, 172.0], [10.9, 172.0], [11.0, 172.0], [11.1, 172.0], [11.2, 172.0], [11.3, 172.0], [11.4, 172.0], [11.5, 172.0], [11.6, 172.0], [11.7, 172.0], [11.8, 172.0], [11.9, 172.0], [12.0, 172.0], [12.1, 172.0], [12.2, 172.0], [12.3, 172.0], [12.4, 172.0], [12.5, 172.0], [12.6, 172.0], [12.7, 172.0], [12.8, 172.0], [12.9, 172.0], [13.0, 172.0], [13.1, 172.0], [13.2, 172.0], [13.3, 172.0], [13.4, 172.0], [13.5, 172.0], [13.6, 172.0], [13.7, 172.0], [13.8, 172.0], [13.9, 173.0], [14.0, 173.0], [14.1, 173.0], [14.2, 173.0], [14.3, 173.0], [14.4, 173.0], [14.5, 174.0], [14.6, 174.0], [14.7, 174.0], [14.8, 174.0], [14.9, 174.0], [15.0, 177.0], [15.1, 177.0], [15.2, 177.0], [15.3, 177.0], [15.4, 177.0], [15.5, 177.0], [15.6, 177.0], [15.7, 177.0], [15.8, 177.0], [15.9, 177.0], [16.0, 177.0], [16.1, 177.0], [16.2, 178.0], [16.3, 178.0], [16.4, 178.0], [16.5, 178.0], [16.6, 178.0], [16.7, 178.0], [16.8, 178.0], [16.9, 178.0], [17.0, 178.0], [17.1, 178.0], [17.2, 178.0], [17.3, 179.0], [17.4, 179.0], [17.5, 179.0], [17.6, 179.0], [17.7, 179.0], [17.8, 179.0], [17.9, 179.0], [18.0, 179.0], [18.1, 179.0], [18.2, 179.0], [18.3, 179.0], [18.4, 179.0], [18.5, 179.0], [18.6, 179.0], [18.7, 179.0], [18.8, 179.0], [18.9, 181.0], [19.0, 181.0], [19.1, 181.0], [19.2, 181.0], [19.3, 181.0], [19.4, 181.0], [19.5, 181.0], [19.6, 181.0], [19.7, 181.0], [19.8, 181.0], [19.9, 181.0], [20.0, 182.0], [20.1, 182.0], [20.2, 182.0], [20.3, 182.0], [20.4, 182.0], [20.5, 182.0], [20.6, 183.0], [20.7, 183.0], [20.8, 183.0], [20.9, 183.0], [21.0, 183.0], [21.1, 183.0], [21.2, 183.0], [21.3, 183.0], [21.4, 183.0], [21.5, 183.0], [21.6, 183.0], [21.7, 183.0], [21.8, 183.0], [21.9, 183.0], [22.0, 183.0], [22.1, 183.0], [22.2, 183.0], [22.3, 183.0], [22.4, 183.0], [22.5, 183.0], [22.6, 183.0], [22.7, 183.0], [22.8, 184.0], [22.9, 184.0], [23.0, 184.0], [23.1, 184.0], [23.2, 184.0], [23.3, 184.0], [23.4, 184.0], [23.5, 184.0], [23.6, 184.0], [23.7, 184.0], [23.8, 184.0], [23.9, 185.0], [24.0, 185.0], [24.1, 185.0], [24.2, 185.0], [24.3, 185.0], [24.4, 185.0], [24.5, 186.0], [24.6, 186.0], [24.7, 186.0], [24.8, 186.0], [24.9, 186.0], [25.0, 186.0], [25.1, 186.0], [25.2, 186.0], [25.3, 186.0], [25.4, 186.0], [25.5, 186.0], [25.6, 188.0], [25.7, 188.0], [25.8, 188.0], [25.9, 188.0], [26.0, 188.0], [26.1, 188.0], [26.2, 190.0], [26.3, 190.0], [26.4, 190.0], [26.5, 190.0], [26.6, 190.0], [26.7, 190.0], [26.8, 190.0], [26.9, 190.0], [27.0, 190.0], [27.1, 190.0], [27.2, 190.0], [27.3, 191.0], [27.4, 191.0], [27.5, 191.0], [27.6, 191.0], [27.7, 191.0], [27.8, 192.0], [27.9, 192.0], [28.0, 192.0], [28.1, 192.0], [28.2, 192.0], [28.3, 192.0], [28.4, 193.0], [28.5, 193.0], [28.6, 193.0], [28.7, 193.0], [28.8, 193.0], [28.9, 196.0], [29.0, 196.0], [29.1, 196.0], [29.2, 196.0], [29.3, 196.0], [29.4, 196.0], [29.5, 197.0], [29.6, 197.0], [29.7, 197.0], [29.8, 197.0], [29.9, 197.0], [30.0, 197.0], [30.1, 197.0], [30.2, 197.0], [30.3, 197.0], [30.4, 197.0], [30.5, 197.0], [30.6, 198.0], [30.7, 198.0], [30.8, 198.0], [30.9, 198.0], [31.0, 198.0], [31.1, 198.0], [31.2, 200.0], [31.3, 200.0], [31.4, 200.0], [31.5, 200.0], [31.6, 200.0], [31.7, 201.0], [31.8, 201.0], [31.9, 201.0], [32.0, 201.0], [32.1, 201.0], [32.2, 201.0], [32.3, 202.0], [32.4, 202.0], [32.5, 202.0], [32.6, 202.0], [32.7, 202.0], [32.8, 202.0], [32.9, 202.0], [33.0, 202.0], [33.1, 202.0], [33.2, 202.0], [33.3, 202.0], [33.4, 204.0], [33.5, 204.0], [33.6, 204.0], [33.7, 204.0], [33.8, 204.0], [33.9, 205.0], [34.0, 205.0], [34.1, 205.0], [34.2, 205.0], [34.3, 205.0], [34.4, 205.0], [34.5, 206.0], [34.6, 206.0], [34.7, 206.0], [34.8, 206.0], [34.9, 206.0], [35.0, 206.0], [35.1, 209.0], [35.2, 209.0], [35.3, 209.0], [35.4, 209.0], [35.5, 209.0], [35.6, 209.0], [35.7, 209.0], [35.8, 209.0], [35.9, 209.0], [36.0, 209.0], [36.1, 209.0], [36.2, 210.0], [36.3, 210.0], [36.4, 210.0], [36.5, 210.0], [36.6, 210.0], [36.7, 210.0], [36.8, 210.0], [36.9, 210.0], [37.0, 210.0], [37.1, 210.0], [37.2, 210.0], [37.3, 216.0], [37.4, 216.0], [37.5, 216.0], [37.6, 216.0], [37.7, 216.0], [37.8, 218.0], [37.9, 218.0], [38.0, 218.0], [38.1, 218.0], [38.2, 218.0], [38.3, 218.0], [38.4, 218.0], [38.5, 218.0], [38.6, 218.0], [38.7, 218.0], [38.8, 218.0], [38.9, 221.0], [39.0, 221.0], [39.1, 221.0], [39.2, 221.0], [39.3, 221.0], [39.4, 221.0], [39.5, 223.0], [39.6, 223.0], [39.7, 223.0], [39.8, 223.0], [39.9, 223.0], [40.0, 223.0], [40.1, 225.0], [40.2, 225.0], [40.3, 225.0], [40.4, 225.0], [40.5, 225.0], [40.6, 228.0], [40.7, 228.0], [40.8, 228.0], [40.9, 228.0], [41.0, 228.0], [41.1, 228.0], [41.2, 228.0], [41.3, 228.0], [41.4, 228.0], [41.5, 228.0], [41.6, 228.0], [41.7, 233.0], [41.8, 233.0], [41.9, 233.0], [42.0, 233.0], [42.1, 233.0], [42.2, 233.0], [42.3, 234.0], [42.4, 234.0], [42.5, 234.0], [42.6, 234.0], [42.7, 234.0], [42.8, 234.0], [42.9, 234.0], [43.0, 234.0], [43.1, 234.0], [43.2, 234.0], [43.3, 234.0], [43.4, 236.0], [43.5, 236.0], [43.6, 236.0], [43.7, 236.0], [43.8, 236.0], [43.9, 236.0], [44.0, 236.0], [44.1, 236.0], [44.2, 236.0], [44.3, 236.0], [44.4, 236.0], [44.5, 246.0], [44.6, 246.0], [44.7, 246.0], [44.8, 246.0], [44.9, 246.0], [45.0, 246.0], [45.1, 247.0], [45.2, 247.0], [45.3, 247.0], [45.4, 247.0], [45.5, 247.0], [45.6, 252.0], [45.7, 252.0], [45.8, 252.0], [45.9, 252.0], [46.0, 252.0], [46.1, 252.0], [46.2, 254.0], [46.3, 254.0], [46.4, 254.0], [46.5, 254.0], [46.6, 254.0], [46.7, 257.0], [46.8, 257.0], [46.9, 257.0], [47.0, 257.0], [47.1, 257.0], [47.2, 257.0], [47.3, 265.0], [47.4, 265.0], [47.5, 265.0], [47.6, 265.0], [47.7, 265.0], [47.8, 265.0], [47.9, 265.0], [48.0, 265.0], [48.1, 265.0], [48.2, 265.0], [48.3, 265.0], [48.4, 267.0], [48.5, 267.0], [48.6, 267.0], [48.7, 267.0], [48.8, 267.0], [48.9, 274.0], [49.0, 274.0], [49.1, 274.0], [49.2, 274.0], [49.3, 274.0], [49.4, 274.0], [49.5, 277.0], [49.6, 277.0], [49.7, 277.0], [49.8, 277.0], [49.9, 277.0], [50.0, 277.0], [50.1, 278.0], [50.2, 278.0], [50.3, 278.0], [50.4, 278.0], [50.5, 278.0], [50.6, 282.0], [50.7, 282.0], [50.8, 282.0], [50.9, 282.0], [51.0, 282.0], [51.1, 282.0], [51.2, 284.0], [51.3, 284.0], [51.4, 284.0], [51.5, 284.0], [51.6, 284.0], [51.7, 287.0], [51.8, 287.0], [51.9, 287.0], [52.0, 287.0], [52.1, 287.0], [52.2, 287.0], [52.3, 288.0], [52.4, 288.0], [52.5, 288.0], [52.6, 288.0], [52.7, 288.0], [52.8, 304.0], [52.9, 304.0], [53.0, 304.0], [53.1, 304.0], [53.2, 304.0], [53.3, 304.0], [53.4, 330.0], [53.5, 330.0], [53.6, 330.0], [53.7, 330.0], [53.8, 330.0], [53.9, 338.0], [54.0, 338.0], [54.1, 338.0], [54.2, 338.0], [54.3, 338.0], [54.4, 338.0], [54.5, 344.0], [54.6, 344.0], [54.7, 344.0], [54.8, 344.0], [54.9, 344.0], [55.0, 344.0], [55.1, 347.0], [55.2, 347.0], [55.3, 347.0], [55.4, 347.0], [55.5, 347.0], [55.6, 348.0], [55.7, 348.0], [55.8, 348.0], [55.9, 348.0], [56.0, 348.0], [56.1, 348.0], [56.2, 368.0], [56.3, 368.0], [56.4, 368.0], [56.5, 368.0], [56.6, 368.0], [56.7, 371.0], [56.8, 371.0], [56.9, 371.0], [57.0, 371.0], [57.1, 371.0], [57.2, 371.0], [57.3, 376.0], [57.4, 376.0], [57.5, 376.0], [57.6, 376.0], [57.7, 376.0], [57.8, 376.0], [57.9, 376.0], [58.0, 376.0], [58.1, 376.0], [58.2, 376.0], [58.3, 376.0], [58.4, 419.0], [58.5, 419.0], [58.6, 419.0], [58.7, 419.0], [58.8, 419.0], [58.9, 450.0], [59.0, 450.0], [59.1, 450.0], [59.2, 450.0], [59.3, 450.0], [59.4, 450.0], [59.5, 450.0], [59.6, 450.0], [59.7, 450.0], [59.8, 450.0], [59.9, 450.0], [60.0, 450.0], [60.1, 467.0], [60.2, 467.0], [60.3, 467.0], [60.4, 467.0], [60.5, 467.0], [60.6, 472.0], [60.7, 472.0], [60.8, 472.0], [60.9, 472.0], [61.0, 472.0], [61.1, 472.0], [61.2, 491.0], [61.3, 491.0], [61.4, 491.0], [61.5, 491.0], [61.6, 491.0], [61.7, 512.0], [61.8, 512.0], [61.9, 512.0], [62.0, 512.0], [62.1, 512.0], [62.2, 512.0], [62.3, 516.0], [62.4, 516.0], [62.5, 516.0], [62.6, 516.0], [62.7, 516.0], [62.8, 522.0], [62.9, 522.0], [63.0, 522.0], [63.1, 522.0], [63.2, 522.0], [63.3, 522.0], [63.4, 526.0], [63.5, 526.0], [63.6, 526.0], [63.7, 526.0], [63.8, 526.0], [63.9, 536.0], [64.0, 536.0], [64.1, 536.0], [64.2, 536.0], [64.3, 536.0], [64.4, 536.0], [64.5, 540.0], [64.6, 540.0], [64.7, 540.0], [64.8, 540.0], [64.9, 540.0], [65.0, 540.0], [65.1, 548.0], [65.2, 548.0], [65.3, 548.0], [65.4, 548.0], [65.5, 548.0], [65.6, 578.0], [65.7, 578.0], [65.8, 578.0], [65.9, 578.0], [66.0, 578.0], [66.1, 578.0], [66.2, 647.0], [66.3, 647.0], [66.4, 647.0], [66.5, 647.0], [66.6, 647.0], [66.7, 669.0], [66.8, 669.0], [66.9, 669.0], [67.0, 669.0], [67.1, 669.0], [67.2, 669.0], [67.3, 697.0], [67.4, 697.0], [67.5, 697.0], [67.6, 697.0], [67.7, 697.0], [67.8, 744.0], [67.9, 744.0], [68.0, 744.0], [68.1, 744.0], [68.2, 744.0], [68.3, 744.0], [68.4, 786.0], [68.5, 786.0], [68.6, 786.0], [68.7, 786.0], [68.8, 786.0], [68.9, 798.0], [69.0, 798.0], [69.1, 798.0], [69.2, 798.0], [69.3, 798.0], [69.4, 798.0], [69.5, 877.0], [69.6, 877.0], [69.7, 877.0], [69.8, 877.0], [69.9, 877.0], [70.0, 877.0], [70.1, 895.0], [70.2, 895.0], [70.3, 895.0], [70.4, 895.0], [70.5, 895.0], [70.6, 899.0], [70.7, 899.0], [70.8, 899.0], [70.9, 899.0], [71.0, 899.0], [71.1, 899.0], [71.2, 916.0], [71.3, 916.0], [71.4, 916.0], [71.5, 916.0], [71.6, 916.0], [71.7, 947.0], [71.8, 947.0], [71.9, 947.0], [72.0, 947.0], [72.1, 947.0], [72.2, 947.0], [72.3, 947.0], [72.4, 947.0], [72.5, 947.0], [72.6, 947.0], [72.7, 947.0], [72.8, 948.0], [72.9, 948.0], [73.0, 948.0], [73.1, 948.0], [73.2, 948.0], [73.3, 948.0], [73.4, 960.0], [73.5, 960.0], [73.6, 960.0], [73.7, 960.0], [73.8, 960.0], [73.9, 966.0], [74.0, 966.0], [74.1, 966.0], [74.2, 966.0], [74.3, 966.0], [74.4, 966.0], [74.5, 992.0], [74.6, 992.0], [74.7, 992.0], [74.8, 992.0], [74.9, 992.0], [75.0, 992.0], [75.1, 994.0], [75.2, 994.0], [75.3, 994.0], [75.4, 994.0], [75.5, 994.0], [75.6, 1010.0], [75.7, 1010.0], [75.8, 1010.0], [75.9, 1010.0], [76.0, 1010.0], [76.1, 1010.0], [76.2, 1037.0], [76.3, 1037.0], [76.4, 1037.0], [76.5, 1037.0], [76.6, 1037.0], [76.7, 1049.0], [76.8, 1049.0], [76.9, 1049.0], [77.0, 1049.0], [77.1, 1049.0], [77.2, 1049.0], [77.3, 1093.0], [77.4, 1093.0], [77.5, 1093.0], [77.6, 1093.0], [77.7, 1093.0], [77.8, 1101.0], [77.9, 1101.0], [78.0, 1101.0], [78.1, 1101.0], [78.2, 1101.0], [78.3, 1101.0], [78.4, 1111.0], [78.5, 1111.0], [78.6, 1111.0], [78.7, 1111.0], [78.8, 1111.0], [78.9, 1112.0], [79.0, 1112.0], [79.1, 1112.0], [79.2, 1112.0], [79.3, 1112.0], [79.4, 1112.0], [79.5, 1122.0], [79.6, 1122.0], [79.7, 1122.0], [79.8, 1122.0], [79.9, 1122.0], [80.0, 1122.0], [80.1, 1123.0], [80.2, 1123.0], [80.3, 1123.0], [80.4, 1123.0], [80.5, 1123.0], [80.6, 1127.0], [80.7, 1127.0], [80.8, 1127.0], [80.9, 1127.0], [81.0, 1127.0], [81.1, 1127.0], [81.2, 1134.0], [81.3, 1134.0], [81.4, 1134.0], [81.5, 1134.0], [81.6, 1134.0], [81.7, 1154.0], [81.8, 1154.0], [81.9, 1154.0], [82.0, 1154.0], [82.1, 1154.0], [82.2, 1154.0], [82.3, 1189.0], [82.4, 1189.0], [82.5, 1189.0], [82.6, 1189.0], [82.7, 1189.0], [82.8, 1242.0], [82.9, 1242.0], [83.0, 1242.0], [83.1, 1242.0], [83.2, 1242.0], [83.3, 1242.0], [83.4, 1296.0], [83.5, 1296.0], [83.6, 1296.0], [83.7, 1296.0], [83.8, 1296.0], [83.9, 1305.0], [84.0, 1305.0], [84.1, 1305.0], [84.2, 1305.0], [84.3, 1305.0], [84.4, 1305.0], [84.5, 1312.0], [84.6, 1312.0], [84.7, 1312.0], [84.8, 1312.0], [84.9, 1312.0], [85.0, 1312.0], [85.1, 1327.0], [85.2, 1327.0], [85.3, 1327.0], [85.4, 1327.0], [85.5, 1327.0], [85.6, 1375.0], [85.7, 1375.0], [85.8, 1375.0], [85.9, 1375.0], [86.0, 1375.0], [86.1, 1375.0], [86.2, 1382.0], [86.3, 1382.0], [86.4, 1382.0], [86.5, 1382.0], [86.6, 1382.0], [86.7, 1409.0], [86.8, 1409.0], [86.9, 1409.0], [87.0, 1409.0], [87.1, 1409.0], [87.2, 1409.0], [87.3, 1431.0], [87.4, 1431.0], [87.5, 1431.0], [87.6, 1431.0], [87.7, 1431.0], [87.8, 1450.0], [87.9, 1450.0], [88.0, 1450.0], [88.1, 1450.0], [88.2, 1450.0], [88.3, 1450.0], [88.4, 1563.0], [88.5, 1563.0], [88.6, 1563.0], [88.7, 1563.0], [88.8, 1563.0], [88.9, 1622.0], [89.0, 1622.0], [89.1, 1622.0], [89.2, 1622.0], [89.3, 1622.0], [89.4, 1622.0], [89.5, 1636.0], [89.6, 1636.0], [89.7, 1636.0], [89.8, 1636.0], [89.9, 1636.0], [90.0, 1636.0], [90.1, 1645.0], [90.2, 1645.0], [90.3, 1645.0], [90.4, 1645.0], [90.5, 1645.0], [90.6, 1646.0], [90.7, 1646.0], [90.8, 1646.0], [90.9, 1646.0], [91.0, 1646.0], [91.1, 1646.0], [91.2, 1655.0], [91.3, 1655.0], [91.4, 1655.0], [91.5, 1655.0], [91.6, 1655.0], [91.7, 1719.0], [91.8, 1719.0], [91.9, 1719.0], [92.0, 1719.0], [92.1, 1719.0], [92.2, 1719.0], [92.3, 1754.0], [92.4, 1754.0], [92.5, 1754.0], [92.6, 1754.0], [92.7, 1754.0], [92.8, 1864.0], [92.9, 1864.0], [93.0, 1864.0], [93.1, 1864.0], [93.2, 1864.0], [93.3, 1864.0], [93.4, 1865.0], [93.5, 1865.0], [93.6, 1865.0], [93.7, 1865.0], [93.8, 1865.0], [93.9, 1885.0], [94.0, 1885.0], [94.1, 1885.0], [94.2, 1885.0], [94.3, 1885.0], [94.4, 1885.0], [94.5, 1899.0], [94.6, 1899.0], [94.7, 1899.0], [94.8, 1899.0], [94.9, 1899.0], [95.0, 1899.0], [95.1, 1927.0], [95.2, 1927.0], [95.3, 1927.0], [95.4, 1927.0], [95.5, 1927.0], [95.6, 1934.0], [95.7, 1934.0], [95.8, 1934.0], [95.9, 1934.0], [96.0, 1934.0], [96.1, 1934.0], [96.2, 1961.0], [96.3, 1961.0], [96.4, 1961.0], [96.5, 1961.0], [96.6, 1961.0], [96.7, 2006.0], [96.8, 2006.0], [96.9, 2006.0], [97.0, 2006.0], [97.1, 2006.0], [97.2, 2006.0], [97.3, 2087.0], [97.4, 2087.0], [97.5, 2087.0], [97.6, 2087.0], [97.7, 2087.0], [97.8, 2295.0], [97.9, 2295.0], [98.0, 2295.0], [98.1, 2295.0], [98.2, 2295.0], [98.3, 2295.0], [98.4, 2414.0], [98.5, 2414.0], [98.6, 2414.0], [98.7, 2414.0], [98.8, 2414.0], [98.9, 2471.0], [99.0, 2471.0], [99.1, 2471.0], [99.2, 2471.0], [99.3, 2471.0], [99.4, 2471.0], [99.5, 2552.0], [99.6, 2552.0], [99.7, 2552.0], [99.8, 2552.0], [99.9, 2552.0], [100.0, 2552.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 1.0], [39.0, 1.0], [39.1, 1.0], [39.2, 1.0], [39.3, 1.0], [39.4, 1.0], [39.5, 1.0], [39.6, 1.0], [39.7, 1.0], [39.8, 1.0], [39.9, 1.0], [40.0, 1.0], [40.1, 1.0], [40.2, 1.0], [40.3, 1.0], [40.4, 1.0], [40.5, 1.0], [40.6, 1.0], [40.7, 1.0], [40.8, 1.0], [40.9, 1.0], [41.0, 1.0], [41.1, 1.0], [41.2, 1.0], [41.3, 1.0], [41.4, 1.0], [41.5, 1.0], [41.6, 1.0], [41.7, 1.0], [41.8, 1.0], [41.9, 1.0], [42.0, 1.0], [42.1, 1.0], [42.2, 1.0], [42.3, 1.0], [42.4, 1.0], [42.5, 1.0], [42.6, 1.0], [42.7, 1.0], [42.8, 1.0], [42.9, 1.0], [43.0, 1.0], [43.1, 1.0], [43.2, 1.0], [43.3, 1.0], [43.4, 1.0], [43.5, 1.0], [43.6, 1.0], [43.7, 1.0], [43.8, 1.0], [43.9, 1.0], [44.0, 1.0], [44.1, 1.0], [44.2, 1.0], [44.3, 1.0], [44.4, 1.0], [44.5, 1.0], [44.6, 1.0], [44.7, 1.0], [44.8, 1.0], [44.9, 1.0], [45.0, 1.0], [45.1, 1.0], [45.2, 1.0], [45.3, 1.0], [45.4, 1.0], [45.5, 1.0], [45.6, 1.0], [45.7, 1.0], [45.8, 1.0], [45.9, 1.0], [46.0, 1.0], [46.1, 1.0], [46.2, 1.0], [46.3, 1.0], [46.4, 1.0], [46.5, 1.0], [46.6, 1.0], [46.7, 1.0], [46.8, 1.0], [46.9, 1.0], [47.0, 1.0], [47.1, 1.0], [47.2, 1.0], [47.3, 1.0], [47.4, 1.0], [47.5, 1.0], [47.6, 1.0], [47.7, 1.0], [47.8, 1.0], [47.9, 1.0], [48.0, 1.0], [48.1, 1.0], [48.2, 1.0], [48.3, 1.0], [48.4, 1.0], [48.5, 1.0], [48.6, 1.0], [48.7, 1.0], [48.8, 1.0], [48.9, 1.0], [49.0, 1.0], [49.1, 1.0], [49.2, 1.0], [49.3, 1.0], [49.4, 1.0], [49.5, 1.0], [49.6, 1.0], [49.7, 1.0], [49.8, 1.0], [49.9, 1.0], [50.0, 1.0], [50.1, 1.0], [50.2, 1.0], [50.3, 1.0], [50.4, 1.0], [50.5, 1.0], [50.6, 1.0], [50.7, 1.0], [50.8, 1.0], [50.9, 1.0], [51.0, 1.0], [51.1, 1.0], [51.2, 1.0], [51.3, 1.0], [51.4, 1.0], [51.5, 1.0], [51.6, 1.0], [51.7, 1.0], [51.8, 1.0], [51.9, 1.0], [52.0, 1.0], [52.1, 1.0], [52.2, 1.0], [52.3, 1.0], [52.4, 1.0], [52.5, 1.0], [52.6, 1.0], [52.7, 1.0], [52.8, 1.0], [52.9, 1.0], [53.0, 1.0], [53.1, 1.0], [53.2, 1.0], [53.3, 1.0], [53.4, 1.0], [53.5, 1.0], [53.6, 1.0], [53.7, 1.0], [53.8, 1.0], [53.9, 1.0], [54.0, 1.0], [54.1, 1.0], [54.2, 1.0], [54.3, 1.0], [54.4, 1.0], [54.5, 1.0], [54.6, 1.0], [54.7, 1.0], [54.8, 1.0], [54.9, 1.0], [55.0, 1.0], [55.1, 1.0], [55.2, 1.0], [55.3, 1.0], [55.4, 1.0], [55.5, 1.0], [55.6, 1.0], [55.7, 1.0], [55.8, 1.0], [55.9, 1.0], [56.0, 1.0], [56.1, 1.0], [56.2, 1.0], [56.3, 1.0], [56.4, 1.0], [56.5, 1.0], [56.6, 1.0], [56.7, 1.0], [56.8, 1.0], [56.9, 1.0], [57.0, 1.0], [57.1, 1.0], [57.2, 1.0], [57.3, 1.0], [57.4, 1.0], [57.5, 1.0], [57.6, 1.0], [57.7, 1.0], [57.8, 1.0], [57.9, 1.0], [58.0, 1.0], [58.1, 1.0], [58.2, 1.0], [58.3, 1.0], [58.4, 1.0], [58.5, 1.0], [58.6, 1.0], [58.7, 1.0], [58.8, 1.0], [58.9, 1.0], [59.0, 1.0], [59.1, 1.0], [59.2, 1.0], [59.3, 1.0], [59.4, 1.0], [59.5, 1.0], [59.6, 2.0], [59.7, 2.0], [59.8, 2.0], [59.9, 2.0], [60.0, 2.0], [60.1, 2.0], [60.2, 2.0], [60.3, 2.0], [60.4, 2.0], [60.5, 2.0], [60.6, 2.0], [60.7, 2.0], [60.8, 2.0], [60.9, 2.0], [61.0, 2.0], [61.1, 2.0], [61.2, 2.0], [61.3, 2.0], [61.4, 2.0], [61.5, 2.0], [61.6, 2.0], [61.7, 2.0], [61.8, 2.0], [61.9, 2.0], [62.0, 2.0], [62.1, 2.0], [62.2, 2.0], [62.3, 2.0], [62.4, 2.0], [62.5, 2.0], [62.6, 2.0], [62.7, 2.0], [62.8, 2.0], [62.9, 2.0], [63.0, 2.0], [63.1, 2.0], [63.2, 2.0], [63.3, 2.0], [63.4, 2.0], [63.5, 2.0], [63.6, 2.0], [63.7, 2.0], [63.8, 2.0], [63.9, 2.0], [64.0, 2.0], [64.1, 2.0], [64.2, 2.0], [64.3, 2.0], [64.4, 2.0], [64.5, 2.0], [64.6, 2.0], [64.7, 2.0], [64.8, 2.0], [64.9, 2.0], [65.0, 2.0], [65.1, 2.0], [65.2, 3.0], [65.3, 3.0], [65.4, 3.0], [65.5, 3.0], [65.6, 4.0], [65.7, 4.0], [65.8, 4.0], [65.9, 4.0], [66.0, 5.0], [66.1, 5.0], [66.2, 5.0], [66.3, 6.0], [66.4, 7.0], [66.5, 13.0], [66.6, 31.0], [66.7, 35.0], [66.8, 37.0], [66.9, 38.0], [67.0, 40.0], [67.1, 41.0], [67.2, 43.0], [67.3, 44.0], [67.4, 44.0], [67.5, 45.0], [67.6, 46.0], [67.7, 47.0], [67.8, 48.0], [67.9, 49.0], [68.0, 51.0], [68.1, 53.0], [68.2, 54.0], [68.3, 55.0], [68.4, 57.0], [68.5, 59.0], [68.6, 61.0], [68.7, 66.0], [68.8, 71.0], [68.9, 77.0], [69.0, 89.0], [69.1, 111.0], [69.2, 152.0], [69.3, 221.0], [69.4, 278.0], [69.5, 344.0], [69.6, 393.0], [69.7, 431.0], [69.8, 482.0], [69.9, 520.0], [70.0, 553.0], [70.1, 569.0], [70.2, 604.0], [70.3, 627.0], [70.4, 655.0], [70.5, 676.0], [70.6, 711.0], [70.7, 729.0], [70.8, 752.0], [70.9, 773.0], [71.0, 799.0], [71.1, 817.0], [71.2, 830.0], [71.3, 847.0], [71.4, 876.0], [71.5, 891.0], [71.6, 932.0], [71.7, 961.0], [71.8, 991.0], [71.9, 1030.0], [72.0, 1050.0], [72.1, 1079.0], [72.2, 1107.0], [72.3, 1128.0], [72.4, 1143.0], [72.5, 1168.0], [72.6, 1188.0], [72.7, 1218.0], [72.8, 1246.0], [72.9, 1268.0], [73.0, 1292.0], [73.1, 1310.0], [73.2, 1339.0], [73.3, 1355.0], [73.4, 1378.0], [73.5, 1407.0], [73.6, 1424.0], [73.7, 1447.0], [73.8, 1471.0], [73.9, 1493.0], [74.0, 1510.0], [74.1, 1524.0], [74.2, 1545.0], [74.3, 1562.0], [74.4, 1579.0], [74.5, 1594.0], [74.6, 1622.0], [74.7, 1641.0], [74.8, 1663.0], [74.9, 1679.0], [75.0, 1693.0], [75.1, 1706.0], [75.2, 1725.0], [75.3, 1743.0], [75.4, 1761.0], [75.5, 1776.0], [75.6, 1795.0], [75.7, 1807.0], [75.8, 1820.0], [75.9, 1830.0], [76.0, 1846.0], [76.1, 1860.0], [76.2, 1872.0], [76.3, 1880.0], [76.4, 1896.0], [76.5, 1913.0], [76.6, 1930.0], [76.7, 1945.0], [76.8, 1959.0], [76.9, 1976.0], [77.0, 1988.0], [77.1, 2002.0], [77.2, 2016.0], [77.3, 2027.0], [77.4, 2038.0], [77.5, 2051.0], [77.6, 2062.0], [77.7, 2077.0], [77.8, 2087.0], [77.9, 2096.0], [78.0, 2108.0], [78.1, 2121.0], [78.2, 2133.0], [78.3, 2142.0], [78.4, 2153.0], [78.5, 2162.0], [78.6, 2182.0], [78.7, 2190.0], [78.8, 2201.0], [78.9, 2208.0], [79.0, 2216.0], [79.1, 2225.0], [79.2, 2235.0], [79.3, 2244.0], [79.4, 2249.0], [79.5, 2259.0], [79.6, 2270.0], [79.7, 2280.0], [79.8, 2288.0], [79.9, 2295.0], [80.0, 2302.0], [80.1, 2310.0], [80.2, 2319.0], [80.3, 2329.0], [80.4, 2338.0], [80.5, 2346.0], [80.6, 2354.0], [80.7, 2366.0], [80.8, 2376.0], [80.9, 2384.0], [81.0, 2391.0], [81.1, 2398.0], [81.2, 2404.0], [81.3, 2415.0], [81.4, 2422.0], [81.5, 2432.0], [81.6, 2442.0], [81.7, 2448.0], [81.8, 2456.0], [81.9, 2463.0], [82.0, 2469.0], [82.1, 2481.0], [82.2, 2488.0], [82.3, 2501.0], [82.4, 2507.0], [82.5, 2516.0], [82.6, 2525.0], [82.7, 2532.0], [82.8, 2537.0], [82.9, 2546.0], [83.0, 2555.0], [83.1, 2562.0], [83.2, 2568.0], [83.3, 2581.0], [83.4, 2588.0], [83.5, 2595.0], [83.6, 2605.0], [83.7, 2612.0], [83.8, 2617.0], [83.9, 2624.0], [84.0, 2632.0], [84.1, 2641.0], [84.2, 2649.0], [84.3, 2660.0], [84.4, 2671.0], [84.5, 2678.0], [84.6, 2690.0], [84.7, 2698.0], [84.8, 2705.0], [84.9, 2711.0], [85.0, 2718.0], [85.1, 2726.0], [85.2, 2738.0], [85.3, 2744.0], [85.4, 2752.0], [85.5, 2760.0], [85.6, 2771.0], [85.7, 2783.0], [85.8, 2788.0], [85.9, 2798.0], [86.0, 2806.0], [86.1, 2814.0], [86.2, 2821.0], [86.3, 2827.0], [86.4, 2834.0], [86.5, 2840.0], [86.6, 2847.0], [86.7, 2854.0], [86.8, 2862.0], [86.9, 2873.0], [87.0, 2878.0], [87.1, 2885.0], [87.2, 2893.0], [87.3, 2898.0], [87.4, 2906.0], [87.5, 2914.0], [87.6, 2923.0], [87.7, 2930.0], [87.8, 2937.0], [87.9, 2944.0], [88.0, 2950.0], [88.1, 2959.0], [88.2, 2970.0], [88.3, 2973.0], [88.4, 2978.0], [88.5, 2986.0], [88.6, 2992.0], [88.7, 3002.0], [88.8, 3010.0], [88.9, 3019.0], [89.0, 3026.0], [89.1, 3034.0], [89.2, 3040.0], [89.3, 3047.0], [89.4, 3053.0], [89.5, 3058.0], [89.6, 3063.0], [89.7, 3072.0], [89.8, 3075.0], [89.9, 3082.0], [90.0, 3090.0], [90.1, 3099.0], [90.2, 3104.0], [90.3, 3112.0], [90.4, 3118.0], [90.5, 3125.0], [90.6, 3132.0], [90.7, 3140.0], [90.8, 3144.0], [90.9, 3151.0], [91.0, 3157.0], [91.1, 3168.0], [91.2, 3175.0], [91.3, 3183.0], [91.4, 3193.0], [91.5, 3200.0], [91.6, 3208.0], [91.7, 3215.0], [91.8, 3225.0], [91.9, 3233.0], [92.0, 3240.0], [92.1, 3245.0], [92.2, 3254.0], [92.3, 3261.0], [92.4, 3267.0], [92.5, 3272.0], [92.6, 3279.0], [92.7, 3289.0], [92.8, 3297.0], [92.9, 3306.0], [93.0, 3314.0], [93.1, 3322.0], [93.2, 3328.0], [93.3, 3335.0], [93.4, 3344.0], [93.5, 3350.0], [93.6, 3359.0], [93.7, 3370.0], [93.8, 3378.0], [93.9, 3388.0], [94.0, 3396.0], [94.1, 3403.0], [94.2, 3414.0], [94.3, 3425.0], [94.4, 3435.0], [94.5, 3441.0], [94.6, 3449.0], [94.7, 3460.0], [94.8, 3468.0], [94.9, 3484.0], [95.0, 3496.0], [95.1, 3504.0], [95.2, 3515.0], [95.3, 3527.0], [95.4, 3538.0], [95.5, 3548.0], [95.6, 3554.0], [95.7, 3569.0], [95.8, 3581.0], [95.9, 3593.0], [96.0, 3611.0], [96.1, 3628.0], [96.2, 3641.0], [96.3, 3658.0], [96.4, 3672.0], [96.5, 3687.0], [96.6, 3700.0], [96.7, 3713.0], [96.8, 3729.0], [96.9, 3746.0], [97.0, 3768.0], [97.1, 3792.0], [97.2, 3819.0], [97.3, 3842.0], [97.4, 3872.0], [97.5, 3907.0], [97.6, 3949.0], [97.7, 3996.0], [97.8, 4034.0], [97.9, 4077.0], [98.0, 4143.0], [98.1, 4193.0], [98.2, 4280.0], [98.3, 4364.0], [98.4, 4419.0], [98.5, 4516.0], [98.6, 4659.0], [98.7, 4810.0], [98.8, 4994.0], [98.9, 5236.0], [99.0, 6419.0], [99.1, 16005.0], [99.2, 16006.0], [99.3, 16007.0], [99.4, 20004.0], [99.5, 20005.0], [99.6, 20005.0], [99.7, 20005.0], [99.8, 20006.0], [99.9, 20006.0], [100.0, 20007.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 12856.0, "series": [{"data": [[0.0, 12856.0], [600.0, 70.0], [700.0, 54.0], [800.0, 59.0], [900.0, 54.0], [1000.0, 68.0], [1100.0, 56.0], [1200.0, 64.0], [1300.0, 65.0], [1400.0, 78.0], [1500.0, 83.0], [1600.0, 97.0], [1700.0, 94.0], [1800.0, 123.0], [1900.0, 103.0], [2000.0, 137.0], [2100.0, 164.0], [2200.0, 199.0], [2300.0, 186.0], [2400.0, 206.0], [2500.0, 222.0], [2600.0, 201.0], [2700.0, 213.0], [2800.0, 207.0], [2900.0, 253.0], [3000.0, 228.0], [3100.0, 232.0], [3300.0, 213.0], [3200.0, 234.0], [3400.0, 228.0], [3500.0, 195.0], [3700.0, 102.0], [3600.0, 138.0], [3800.0, 61.0], [3900.0, 53.0], [4000.0, 25.0], [4100.0, 28.0], [4200.0, 27.0], [4300.0, 13.0], [4400.0, 21.0], [4600.0, 14.0], [4500.0, 15.0], [4800.0, 10.0], [4700.0, 9.0], [4900.0, 15.0], [5100.0, 15.0], [5000.0, 10.0], [5300.0, 5.0], [5200.0, 2.0], [5500.0, 2.0], [5600.0, 1.0], [5700.0, 2.0], [6300.0, 1.0], [100.0, 38.0], [200.0, 30.0], [300.0, 27.0], [400.0, 36.0], [500.0, 58.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[2200.0, 1.0], [600.0, 3.0], [2400.0, 2.0], [2500.0, 1.0], [700.0, 3.0], [200.0, 39.0], [800.0, 3.0], [900.0, 8.0], [1000.0, 4.0], [1100.0, 9.0], [1200.0, 2.0], [300.0, 10.0], [1300.0, 5.0], [1400.0, 3.0], [1500.0, 1.0], [400.0, 6.0], [100.0, 56.0], [1600.0, 5.0], [1700.0, 2.0], [1800.0, 4.0], [1900.0, 3.0], [500.0, 8.0], [2000.0, 2.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 12428.0], [600.0, 69.0], [700.0, 79.0], [800.0, 93.0], [900.0, 55.0], [1000.0, 63.0], [1100.0, 85.0], [1200.0, 70.0], [1300.0, 80.0], [1400.0, 83.0], [1500.0, 103.0], [1600.0, 96.0], [1700.0, 105.0], [1800.0, 147.0], [1900.0, 112.0], [2000.0, 153.0], [2100.0, 154.0], [2300.0, 209.0], [2200.0, 215.0], [2400.0, 207.0], [2500.0, 229.0], [2600.0, 211.0], [2800.0, 256.0], [2700.0, 213.0], [2900.0, 242.0], [3000.0, 259.0], [3100.0, 245.0], [3300.0, 222.0], [3200.0, 244.0], [3400.0, 175.0], [3500.0, 161.0], [3600.0, 119.0], [3700.0, 95.0], [3800.0, 65.0], [3900.0, 41.0], [4000.0, 43.0], [4300.0, 28.0], [4200.0, 18.0], [4100.0, 30.0], [4400.0, 22.0], [4500.0, 15.0], [4600.0, 12.0], [4700.0, 9.0], [4800.0, 10.0], [5100.0, 7.0], [5000.0, 10.0], [4900.0, 10.0], [5200.0, 7.0], [5300.0, 1.0], [5600.0, 2.0], [5400.0, 1.0], [5500.0, 1.0], [5700.0, 3.0], [5800.0, 2.0], [6000.0, 1.0], [6400.0, 1.0], [16000.0, 64.0], [20000.0, 116.0], [100.0, 36.0], [200.0, 34.0], [300.0, 31.0], [400.0, 43.0], [500.0, 60.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1392.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 24092.0, "series": [{"data": [[0.0, 1903.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1392.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 8793.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 24092.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 50.898809523809526, "minX": 1.58543526E12, "maxY": 180.0, "series": [{"data": [[1.58543538E12, 180.0], [1.58543586E12, 50.898809523809526], [1.58543568E12, 180.0], [1.58543574E12, 180.0], [1.58543526E12, 77.82230769230758], [1.58543556E12, 180.0], [1.58543562E12, 180.0], [1.58543544E12, 180.0], [1.5854355E12, 180.0], [1.5854358E12, 156.6606841216215], [1.58543532E12, 172.0929721815519]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543586E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.0, "maxY": 2242.3333333333335, "series": [{"data": [[3.0, 57.0], [4.0, 61.0], [7.0, 79.0], [9.0, 54.5], [10.0, 58.0], [11.0, 51.0], [15.0, 50.75], [16.0, 47.0], [17.0, 48.0], [18.0, 54.25], [19.0, 60.5], [20.0, 42.0], [21.0, 48.0], [22.0, 57.0], [23.0, 52.0], [24.0, 47.75], [25.0, 51.714285714285715], [26.0, 52.0], [27.0, 48.0], [28.0, 51.285714285714285], [29.0, 1007.6470588235294], [30.0, 54.5], [31.0, 50.5], [32.0, 44.0], [33.0, 58.0], [34.0, 28.500000000000004], [35.0, 36.5], [36.0, 47.0], [37.0, 45.0], [38.0, 46.25], [39.0, 39.666666666666664], [40.0, 38.25], [41.0, 58.25], [42.0, 49.333333333333336], [43.0, 81.2], [44.0, 31.0], [45.0, 29.0], [46.0, 28.125], [47.0, 11.5], [48.0, 31.625], [49.0, 41.2], [50.0, 18.6], [51.0, 46.300000000000004], [52.0, 14.750000000000002], [53.0, 55.0], [54.0, 30.75], [55.0, 30.75], [56.0, 31.142857142857146], [57.0, 17.5], [58.0, 26.454545454545457], [59.0, 21.888888888888893], [60.0, 44.18181818181819], [61.0, 33.33333333333333], [62.0, 38.375], [63.0, 13.23076923076923], [64.0, 19.909090909090907], [65.0, 39.599999999999994], [66.0, 28.416666666666664], [67.0, 26.444444444444443], [68.0, 27.44444444444445], [69.0, 30.0], [70.0, 31.625], [71.0, 20.95652173913043], [72.0, 11.312499999999998], [73.0, 39.0], [74.0, 9.097560975609754], [75.0, 26.700000000000003], [76.0, 49.25], [77.0, 42.199999999999996], [78.0, 34.699999999999996], [79.0, 47.666666666666664], [80.0, 14.666666666666664], [81.0, 26.0], [82.0, 60.4], [83.0, 115.15384615384615], [84.0, 125.25925925925922], [85.0, 131.76190476190476], [86.0, 801.6666666666666], [87.0, 488.0], [88.0, 900.1666666666667], [89.0, 419.95], [90.0, 47.86666666666667], [91.0, 25.444444444444443], [92.0, 24.400000000000002], [93.0, 46.80952380952381], [94.0, 46.4], [95.0, 61.0], [96.0, 72.33333333333333], [97.0, 41.142857142857146], [98.0, 9.09375], [99.0, 41.888888888888886], [100.0, 55.954545454545446], [101.0, 53.81818181818182], [102.0, 115.2], [103.0, 22.083333333333332], [104.0, 18.5], [105.0, 29.79166666666667], [106.0, 44.53333333333334], [107.0, 126.55555555555556], [108.0, 128.57142857142858], [109.0, 469.46153846153845], [110.0, 521.25], [111.0, 601.3333333333333], [112.0, 534.3076923076925], [113.0, 339.77777777777777], [114.0, 93.76470588235296], [115.0, 279.49999999999994], [116.0, 407.5714285714286], [117.0, 68.04761904761904], [118.0, 292.7142857142857], [119.0, 524.2307692307693], [120.0, 422.2727272727273], [121.0, 278.22222222222223], [122.0, 220.3529411764705], [123.0, 258.3333333333333], [124.0, 209.55999999999997], [125.0, 196.00000000000003], [126.0, 487.75], [127.0, 439.7272727272727], [128.0, 600.3157894736843], [129.0, 816.0], [130.0, 762.1], [131.0, 810.1428571428571], [132.0, 1210.0], [133.0, 146.55882352941165], [134.0, 941.7142857142859], [135.0, 1610.0], [136.0, 416.3333333333334], [137.0, 1175.0], [138.0, 116.0444444444445], [139.0, 503.12000000000023], [140.0, 2052.0], [141.0, 1010.2727272727273], [142.0, 804.0000000000003], [143.0, 1176.0625], [144.0, 210.46666666666667], [145.0, 1327.0], [146.0, 536.3571428571429], [147.0, 124.33333333333336], [148.0, 980.4285714285716], [149.0, 163.6022727272728], [150.0, 362.7], [151.0, 1020.375], [152.0, 1434.6], [154.0, 406.9130434782609], [155.0, 1093.7272727272727], [156.0, 588.8461538461538], [157.0, 611.809523809524], [158.0, 1114.1428571428573], [159.0, 352.54285714285726], [153.0, 1.3333333333333333], [160.0, 624.8214285714288], [161.0, 192.7733333333333], [162.0, 702.3636363636361], [163.0, 106.21505376344092], [164.0, 1480.2], [165.0, 1083.2631578947369], [166.0, 872.1666666666667], [167.0, 118.62068965517236], [168.0, 1073.8], [170.0, 1195.5714285714287], [171.0, 774.0416666666665], [172.0, 387.2333333333334], [173.0, 413.37499999999983], [174.0, 514.0833333333334], [175.0, 231.25925925925912], [169.0, 1.5], [176.0, 1020.6315789473688], [177.0, 313.33333333333337], [178.0, 2225.3529411764707], [179.0, 52.81927710843374], [180.0, 806.4072485112438], [1.0, 57.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[171.89394444444386, 740.2946111111047]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[8.0, 1549.2], [10.0, 1959.6666666666667], [11.0, 484.66666666666663], [12.0, 236.0], [13.0, 162.0], [14.0, 173.0], [15.0, 181.0], [16.0, 162.0], [17.0, 160.0], [18.0, 304.0], [20.0, 288.5], [21.0, 172.0], [22.0, 169.0], [23.0, 172.0], [24.0, 179.0], [25.0, 184.0], [26.0, 174.0], [27.0, 168.0], [28.0, 182.0], [29.0, 210.0], [30.0, 183.0], [31.0, 166.0], [32.0, 161.0], [33.0, 190.0], [34.0, 179.0], [35.0, 234.0], [36.0, 177.0], [37.0, 183.0], [38.0, 183.0], [39.0, 186.0], [40.0, 179.0], [41.0, 278.0], [42.0, 188.0], [43.0, 277.0], [44.0, 181.0], [45.0, 284.0], [46.0, 154.0], [47.0, 161.0], [48.0, 172.0], [49.0, 158.0], [50.0, 267.0], [51.0, 228.0], [52.0, 178.0], [53.0, 166.0], [54.0, 197.0], [55.0, 172.0], [56.0, 168.0], [57.0, 165.0], [58.0, 164.0], [59.0, 185.0], [60.0, 196.0], [61.0, 172.0], [62.0, 252.0], [63.0, 193.0], [64.0, 165.0], [65.0, 265.0], [66.0, 205.0], [67.0, 216.0], [68.0, 168.0], [69.0, 223.0], [70.0, 153.0], [71.0, 190.0], [72.0, 202.0], [73.0, 184.0], [74.0, 172.0], [75.0, 198.0], [76.0, 274.0], [78.0, 376.0], [79.0, 262.5], [80.0, 338.0], [81.0, 209.0], [82.0, 234.0], [83.0, 172.0], [84.0, 287.0], [85.0, 204.0], [86.0, 186.0], [87.0, 282.0], [88.0, 247.0], [89.0, 202.0], [90.0, 209.0], [91.0, 197.0], [92.0, 236.0], [94.0, 368.0], [95.0, 374.5], [96.0, 254.0], [97.0, 218.0], [98.0, 218.0], [99.0, 172.0], [101.0, 281.0], [102.0, 246.0], [103.0, 265.0], [104.0, 192.0], [106.0, 302.5], [107.0, 221.0], [108.0, 288.0], [110.0, 388.0], [111.0, 201.0], [113.0, 210.0], [114.0, 440.0], [116.0, 337.5], [117.0, 206.0], [119.0, 526.0], [120.0, 536.0], [121.0, 472.0], [122.0, 361.0], [124.0, 578.0], [125.0, 450.0], [126.0, 376.0], [128.0, 739.0], [129.0, 467.0], [132.0, 1093.0], [133.0, 1110.5], [135.0, 998.0], [136.0, 947.0], [138.0, 877.0], [139.0, 1382.0], [140.0, 1111.0], [141.0, 1123.0], [142.0, 1112.0], [143.0, 1121.5], [145.0, 992.0], [146.0, 740.6666666666666], [147.0, 540.0], [151.0, 1375.0], [152.0, 1563.0], [154.0, 1864.0], [155.0, 1885.0], [157.0, 1961.0], [158.0, 1970.0], [159.0, 1400.0], [160.0, 1372.0], [161.0, 1189.0], [162.0, 960.0], [163.0, 1049.0], [164.0, 948.0], [165.0, 899.0], [166.0, 1103.5], [169.0, 1068.3333333333333], [172.0, 1219.5], [175.0, 1645.0], [177.0, 1865.0], [179.0, 2007.0], [180.0, 1649.142857142857]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[91.8111111111111, 625.588888888889]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[3.0, 55.0], [4.0, 46.0], [8.0, 44.0], [10.0, 83.0], [11.0, 1007.3333333333333], [12.0, 47.333333333333336], [13.0, 63.5], [14.0, 47.25], [15.0, 50.0], [16.0, 43.0], [17.0, 54.5], [18.0, 64.0], [19.0, 51.0], [20.0, 120.0], [21.0, 39.0], [22.0, 51.25], [23.0, 53.0], [24.0, 48.75], [25.0, 41.6], [26.0, 41.0], [27.0, 37.0], [28.0, 47.0], [29.0, 813.388888888889], [30.0, 47.333333333333336], [32.0, 37.5], [33.0, 51.5], [34.0, 29.0], [35.0, 41.2], [36.0, 49.83333333333333], [37.0, 45.0], [38.0, 53.0], [39.0, 58.25], [40.0, 25.8], [41.0, 63.75], [42.0, 50.25], [43.0, 62.5], [44.0, 31.25], [45.0, 36.666666666666664], [46.0, 36.0], [47.0, 33.5], [48.0, 41.857142857142854], [49.0, 32.333333333333336], [50.0, 44.142857142857146], [51.0, 39.2], [52.0, 24.0], [53.0, 46.333333333333336], [54.0, 17.125], [55.0, 41.375], [56.0, 27.090909090909086], [57.0, 19.384615384615383], [58.0, 37.85714285714286], [59.0, 41.333333333333336], [60.0, 27.818181818181813], [61.0, 46.833333333333336], [62.0, 26.571428571428566], [63.0, 14.272727272727273], [64.0, 34.0], [65.0, 45.625], [66.0, 21.571428571428573], [67.0, 45.5], [68.0, 36.666666666666664], [69.0, 16.78571428571428], [70.0, 27.285714285714285], [71.0, 19.05], [72.0, 12.642857142857146], [73.0, 41.20000000000001], [74.0, 8.921052631578949], [75.0, 26.875000000000004], [76.0, 42.5], [77.0, 25.400000000000002], [78.0, 38.73913043478261], [79.0, 55.28571428571429], [80.0, 8.352941176470589], [81.0, 52.30769230769231], [82.0, 10.933333333333335], [83.0, 159.57142857142858], [84.0, 61.52173913043479], [85.0, 206.63157894736838], [86.0, 564.6], [87.0, 643.4545454545454], [88.0, 907.6], [89.0, 423.3684210526316], [90.0, 46.411764705882355], [91.0, 50.99999999999999], [92.0, 18.363636363636367], [93.0, 24.909090909090914], [94.0, 92.0], [95.0, 59.9], [96.0, 72.375], [97.0, 33.63636363636363], [98.0, 10.194444444444448], [99.0, 34.44444444444444], [100.0, 43.800000000000004], [101.0, 107.06666666666669], [102.0, 162.71428571428572], [103.0, 12.58333333333334], [104.0, 20.444444444444446], [105.0, 27.600000000000005], [106.0, 19.0], [107.0, 128.0526315789474], [108.0, 102.45000000000002], [109.0, 437.06250000000006], [110.0, 722.9999999999999], [111.0, 554.75], [112.0, 597.4166666666667], [113.0, 737.5999999999999], [114.0, 183.5423728813559], [115.0, 218.39999999999998], [116.0, 368.8571428571428], [117.0, 31.736842105263158], [118.0, 189.83333333333337], [119.0, 289.8571428571429], [120.0, 303.75000000000006], [121.0, 273.16666666666663], [122.0, 162.52380952380946], [123.0, 310.00000000000006], [124.0, 420.9600000000001], [125.0, 329.73333333333335], [126.0, 787.2], [127.0, 698.2727272727271], [128.0, 655.9999999999998], [129.0, 472.99999999999994], [130.0, 525.6250000000001], [131.0, 616.5], [132.0, 1535.0], [133.0, 244.60606060606077], [134.0, 1223.2941176470586], [135.0, 2095.0], [136.0, 229.375], [137.0, 1135.2], [138.0, 149.87499999999997], [139.0, 528.0476190476192], [140.0, 1444.3333333333333], [141.0, 715.9375], [142.0, 810.8333333333333], [143.0, 482.0000000000001], [144.0, 677.6428571428572], [145.0, 1429.111111111111], [146.0, 835.1428571428572], [147.0, 388.31578947368416], [148.0, 1275.5714285714284], [149.0, 130.53409090909085], [150.0, 185.11111111111106], [151.0, 1304.6666666666665], [152.0, 1145.3333333333337], [153.0, 261.6363636363636], [154.0, 682.2580645161289], [155.0, 949.0624999999999], [156.0, 902.3333333333333], [157.0, 285.19999999999993], [158.0, 1123.3076923076924], [159.0, 534.9032258064516], [160.0, 410.4482758620689], [161.0, 278.4545454545454], [162.0, 321.3333333333333], [163.0, 189.39772727272734], [164.0, 767.6666666666666], [165.0, 1130.3333333333333], [166.0, 1055.7727272727273], [167.0, 164.57575757575762], [168.0, 1229.642857142857], [169.0, 528.1666666666667], [170.0, 657.75], [171.0, 675.0833333333335], [172.0, 255.45454545454555], [173.0, 354.10526315789474], [174.0, 678.2142857142858], [175.0, 403.7142857142858], [176.0, 981.6818181818181], [177.0, 1783.0], [178.0, 2242.3333333333335], [179.0, 103.15909090909095], [180.0, 1039.437596104554]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[171.85761111111032, 943.7674444444448]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 180.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.58543526E12, "maxY": 279829.88333333336, "series": [{"data": [[1.58543538E12, 279829.88333333336], [1.58543586E12, 18621.8], [1.58543568E12, 197241.91666666666], [1.58543574E12, 198033.5], [1.58543526E12, 142284.25], [1.58543556E12, 146450.63333333333], [1.58543562E12, 197895.83333333334], [1.58543544E12, 259154.71666666667], [1.5854355E12, 251796.35], [1.5854358E12, 162997.33333333334], [1.58543532E12, 278275.06666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58543538E12, 17709.966666666667], [1.58543586E12, 600.8], [1.58543568E12, 0.0], [1.58543574E12, 0.0], [1.58543526E12, 8885.766666666666], [1.58543556E12, 7743.4], [1.58543562E12, 0.0], [1.58543544E12, 16001.933333333332], [1.5854355E12, 16651.733333333334], [1.5854358E12, 0.0], [1.58543532E12, 18787.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543586E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 0.9974511469838557, "minX": 1.58543526E12, "maxY": 3418.0353982300853, "series": [{"data": [[1.58543538E12, 2431.9395648670406], [1.58543586E12, 105.63687150837987], [1.58543568E12, 1.0285913528591346], [1.58543574E12, 1.0711558486636559], [1.58543526E12, 240.50261780104725], [1.58543556E12, 1015.7817371937679], [1.58543562E12, 1.0335524040124522], [1.58543544E12, 3021.8579040852583], [1.5854355E12, 2506.1764214046875], [1.5854358E12, 1.0075566750629725], [1.58543532E12, 1801.5714285714282]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543526E12, 338.5409836065575], [1.58543532E12, 1229.3793103448277]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58543538E12, 2471.148060174186], [1.58543586E12, 136.6433121019108], [1.58543568E12, 1.0223541739434165], [1.58543574E12, 1.0706578489383918], [1.58543526E12, 232.31239669421478], [1.58543556E12, 3418.0353982300853], [1.58543562E12, 1.044071353620146], [1.58543544E12, 3010.4028776978407], [1.5854355E12, 2604.709166666665], [1.5854358E12, 0.9974511469838557], [1.58543532E12, 1903.7857142857158]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543586E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58543526E12, "maxY": 3021.261101243338, "series": [{"data": [[1.58543538E12, 2431.4286865431127], [1.58543586E12, 104.54189944134079], [1.58543568E12, 0.0], [1.58543574E12, 0.0], [1.58543526E12, 239.9458987783594], [1.58543556E12, 1014.873051224947], [1.58543562E12, 0.0], [1.58543544E12, 3021.261101243338], [1.5854355E12, 2505.530936454849], [1.5854358E12, 0.0], [1.58543532E12, 1800.977203647416]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543526E12, 337.49180327868834], [1.58543532E12, 1229.0689655172414]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58543538E12, 2470.4457640538403], [1.58543586E12, 133.46496815286622], [1.58543568E12, 0.0], [1.58543574E12, 0.0], [1.58543526E12, 231.6826446280992], [1.58543556E12, 950.5892330383454], [1.58543562E12, 0.0], [1.58543544E12, 3009.814748201438], [1.5854355E12, 2604.255000000004], [1.5854358E12, 0.0], [1.58543532E12, 1903.2687776141393]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543586E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.23385689354275735, "minX": 1.58543526E12, "maxY": 1.1475409836065582, "series": [{"data": [[1.58543538E12, 0.8863819500402904], [1.58543586E12, 0.5027932960893852], [1.58543568E12, 0.5156903765690372], [1.58543574E12, 0.5529330093717459], [1.58543526E12, 0.23385689354275735], [1.58543556E12, 0.5501113585746105], [1.58543562E12, 0.5271532341750258], [1.58543544E12, 0.6030195381882774], [1.5854355E12, 0.5668896321070235], [1.5854358E12, 0.5146935348446683], [1.58543532E12, 0.5813069908814598]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58543526E12, 1.1475409836065582], [1.58543532E12, 0.689655172413793]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58543538E12, 0.6888361045130638], [1.58543586E12, 0.5732484076433122], [1.58543568E12, 0.5064617534055194], [1.58543574E12, 0.5391576749042833], [1.58543526E12, 0.9322314049586778], [1.58543556E12, 0.5722713864306793], [1.58543562E12, 0.5201119272472874], [1.58543544E12, 0.5962230215827329], [1.5854355E12, 0.5674999999999996], [1.5854358E12, 0.5203908241291411], [1.58543532E12, 0.6966126656848307]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543586E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.58543526E12, "maxY": 6419.0, "series": [{"data": [[1.58543538E12, 6419.0], [1.58543586E12, 1988.0], [1.58543526E12, 2552.0], [1.58543556E12, 4266.0], [1.58543544E12, 6024.0], [1.5854355E12, 5081.0], [1.58543532E12, 5643.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58543538E12, 3.0], [1.58543586E12, 38.0], [1.58543526E12, 30.0], [1.58543556E12, 1.0], [1.58543544E12, 4.0], [1.5854355E12, 2.0], [1.58543532E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58543538E12, 3307.2000000000025], [1.58543586E12, 1559.5], [1.58543526E12, 784.900000000001], [1.58543556E12, 3580.6000000000004], [1.58543544E12, 3979.6000000000004], [1.5854355E12, 3567.8], [1.58543532E12, 3131.7999999999997]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58543538E12, 5167.280000000001], [1.58543586E12, 1988.0], [1.58543526E12, 1269.7200000000003], [1.58543556E12, 3825.2699999999986], [1.58543544E12, 4657.76], [1.5854355E12, 3967.78], [1.58543532E12, 4089.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58543538E12, 4497.400000000001], [1.58543586E12, 1812.0], [1.58543526E12, 951.9000000000001], [1.58543556E12, 3677.25], [1.58543544E12, 4232.799999999999], [1.5854355E12, 3701.0], [1.58543532E12, 3455.399999999998]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543586E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 16006.0, "series": [{"data": [[2.0, 56.0], [4.0, 605.0], [5.0, 1242.0], [6.0, 57.5], [7.0, 52.0], [8.0, 859.0], [9.0, 491.0], [10.0, 52.5], [11.0, 62.0], [12.0, 50.5], [13.0, 69.0], [15.0, 4198.0], [17.0, 52.5], [18.0, 51.5], [20.0, 56.0], [21.0, 48.0], [23.0, 49.0], [25.0, 1977.0], [26.0, 2876.0], [27.0, 3276.0], [28.0, 2568.5], [29.0, 2183.0], [30.0, 3040.0], [31.0, 3239.0], [32.0, 2947.0], [33.0, 2839.0], [35.0, 3118.0], [34.0, 2957.0], [36.0, 2885.5], [37.0, 2981.0], [39.0, 2884.0], [38.0, 2702.0], [40.0, 2835.0], [41.0, 2533.0], [42.0, 2626.0], [43.0, 2250.5], [44.0, 2417.0], [45.0, 2456.5], [46.0, 2408.0], [47.0, 2440.5], [49.0, 1772.0], [48.0, 2491.5], [50.0, 2416.0], [51.0, 2537.0], [53.0, 122.0], [52.0, 911.0], [54.0, 73.0], [55.0, 2020.0], [56.0, 730.0], [57.0, 1550.5], [58.0, 2273.0], [61.0, 146.0], [60.0, 849.0], [63.0, 832.0], [65.0, 2632.0], [66.0, 917.0], [71.0, 583.0], [70.0, 5.0], [68.0, 1182.5], [72.0, 713.0], [74.0, 4.0], [79.0, 7.0], [78.0, 7.0], [82.0, 1989.5], [83.0, 34.5], [88.0, 1632.0], [120.0, 1851.0], [131.0, 1295.0], [155.0, 1415.0], [1.0, 59.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 1.0], [13.0, 1.0], [17.0, 16006.0], [28.0, 1.0], [30.0, 1.0], [33.0, 1799.0], [32.0, 1.0], [35.0, 1.0], [36.0, 1.0], [37.0, 1.0], [38.0, 1.0], [40.0, 1.0], [42.0, 1.0], [43.0, 1.0], [44.0, 3350.0], [45.0, 1.0], [46.0, 1.0], [49.0, 1.0], [48.0, 1.0], [50.0, 1673.5], [52.0, 0.5], [53.0, 1.0], [54.0, 1.0], [55.0, 1.0], [57.0, 1.0], [56.0, 1.0], [61.0, 1.0], [60.0, 1.0], [63.0, 1.0], [62.0, 1.0], [66.0, 0.0], [64.0, 1.0], [71.0, 1.0], [70.0, 0.0], [68.0, 1.0], [72.0, 1.0], [73.0, 1.0], [75.0, 1.0], [74.0, 1.0], [77.0, 1.0], [79.0, 1.0], [78.0, 1.0], [76.0, 1.0], [82.0, 1.0], [83.0, 1.0], [81.0, 1.0], [80.0, 1.0], [86.0, 1.0], [87.0, 1.0], [84.0, 1.0], [85.0, 1.0], [88.0, 1.0], [90.0, 1.0], [91.0, 1.0], [89.0, 1.0], [93.0, 1.0], [94.0, 1.0], [95.0, 1.0], [92.0, 1.0], [98.0, 1.0], [96.0, 1.0], [99.0, 1.0], [97.0, 1.0], [103.0, 1.0], [102.0, 1.0], [101.0, 1.0], [100.0, 1.0], [104.0, 1.0], [105.0, 1.0], [106.0, 1.0], [107.0, 1.0], [110.0, 1.0], [109.0, 1.0], [108.0, 1.0], [112.0, 1.0], [115.0, 1.0], [113.0, 1.0], [118.0, 1.0], [117.0, 1.0], [120.0, 5319.5], [121.0, 1.0], [122.0, 1.0], [124.0, 1.0], [131.0, 1842.0], [155.0, 3591.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 155.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 5319.5, "series": [{"data": [[2.0, 55.5], [4.0, 600.0], [5.0, 1239.0], [6.0, 56.5], [7.0, 51.0], [8.0, 818.5], [9.0, 485.0], [10.0, 52.0], [11.0, 62.0], [12.0, 50.0], [13.0, 69.0], [15.0, 4198.0], [17.0, 52.0], [18.0, 51.0], [20.0, 56.0], [21.0, 48.0], [23.0, 49.0], [25.0, 1975.0], [26.0, 2875.5], [27.0, 3276.0], [28.0, 2568.0], [29.0, 2183.0], [30.0, 3040.0], [31.0, 3239.0], [32.0, 2946.5], [33.0, 2839.0], [35.0, 3118.0], [34.0, 2956.5], [36.0, 2885.0], [37.0, 2980.0], [39.0, 2884.0], [38.0, 2701.0], [40.0, 2834.0], [41.0, 2532.0], [42.0, 2625.5], [43.0, 2250.0], [44.0, 2417.0], [45.0, 2456.0], [46.0, 2408.0], [47.0, 2440.0], [49.0, 1771.0], [48.0, 2491.5], [50.0, 2416.0], [51.0, 2537.0], [53.0, 120.0], [52.0, 911.0], [54.0, 73.0], [55.0, 2020.0], [56.0, 729.5], [57.0, 1550.0], [58.0, 2273.0], [61.0, 145.0], [60.0, 849.0], [63.0, 832.0], [65.0, 2632.0], [66.0, 916.5], [71.0, 583.0], [70.0, 5.0], [68.0, 1182.5], [72.0, 713.0], [74.0, 4.0], [79.0, 7.0], [78.0, 7.0], [82.0, 1989.0], [83.0, 34.5], [88.0, 1632.0], [120.0, 1850.5], [131.0, 1295.0], [155.0, 1415.0], [1.0, 58.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [13.0, 0.0], [17.0, 0.0], [28.0, 0.0], [30.0, 0.0], [33.0, 1798.5], [32.0, 0.0], [35.0, 0.0], [36.0, 0.0], [37.0, 0.0], [38.0, 0.0], [40.0, 0.0], [42.0, 0.0], [43.0, 0.0], [44.0, 3350.0], [45.0, 0.0], [46.0, 0.0], [49.0, 0.0], [48.0, 0.0], [50.0, 0.0], [52.0, 0.0], [53.0, 0.0], [54.0, 0.0], [55.0, 0.0], [57.0, 0.0], [56.0, 0.0], [61.0, 0.0], [60.0, 0.0], [63.0, 0.0], [62.0, 0.0], [66.0, 0.0], [64.0, 0.0], [71.0, 0.0], [70.0, 0.0], [68.0, 0.0], [72.0, 0.0], [73.0, 0.0], [75.0, 0.0], [74.0, 0.0], [77.0, 0.0], [79.0, 0.0], [78.0, 0.0], [76.0, 0.0], [82.0, 0.0], [83.0, 0.0], [81.0, 0.0], [80.0, 0.0], [86.0, 0.0], [87.0, 0.0], [84.0, 0.0], [85.0, 0.0], [88.0, 0.0], [90.0, 0.0], [91.0, 0.0], [89.0, 0.0], [93.0, 0.0], [94.0, 0.0], [95.0, 0.0], [92.0, 0.0], [98.0, 0.0], [96.0, 0.0], [99.0, 0.0], [97.0, 0.0], [103.0, 0.0], [102.0, 0.0], [101.0, 0.0], [100.0, 0.0], [104.0, 0.0], [105.0, 0.0], [106.0, 0.0], [107.0, 0.0], [110.0, 0.0], [109.0, 0.0], [108.0, 0.0], [112.0, 0.0], [115.0, 0.0], [113.0, 0.0], [118.0, 0.0], [117.0, 0.0], [120.0, 5319.5], [121.0, 0.0], [122.0, 0.0], [124.0, 0.0], [131.0, 1841.5], [155.0, 3585.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 155.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.583333333333333, "minX": 1.58543526E12, "maxY": 95.9, "series": [{"data": [[1.58543538E12, 41.56666666666667], [1.58543586E12, 5.583333333333333], [1.58543568E12, 95.51666666666667], [1.58543574E12, 95.9], [1.58543526E12, 22.3], [1.58543556E12, 43.18333333333333], [1.58543562E12, 95.83333333333333], [1.58543544E12, 36.483333333333334], [1.5854355E12, 40.8], [1.5854358E12, 78.95], [1.58543532E12, 46.88333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543586E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.58543526E12, "maxY": 95.9, "series": [{"data": [[1.58543538E12, 41.016666666666666], [1.58543586E12, 1.4], [1.58543526E12, 21.666666666666668], [1.58543556E12, 17.766666666666666], [1.58543544E12, 37.05], [1.5854355E12, 38.68333333333333], [1.58543532E12, 43.88333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58543538E12, 0.26666666666666666], [1.58543556E12, 0.26666666666666666], [1.58543544E12, 0.25], [1.5854355E12, 0.13333333333333333], [1.58543532E12, 0.36666666666666664]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.5854355E12, 0.016666666666666666], [1.58543532E12, 0.05]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.TruncatedChunkException", "isController": false}, {"data": [[1.58543538E12, 0.21666666666666667], [1.58543586E12, 4.2], [1.58543568E12, 95.51666666666667], [1.58543574E12, 95.9], [1.58543556E12, 27.0], [1.58543562E12, 95.83333333333333], [1.5854355E12, 0.6833333333333333], [1.5854358E12, 78.93333333333334], [1.58543532E12, 0.8333333333333334]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.58543556E12, 0.016666666666666666]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.58543538E12, 0.23333333333333334], [1.5854355E12, 0.4166666666666667], [1.58543532E12, 0.4]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58543586E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.58543526E12, "maxY": 48.18333333333333, "series": [{"data": [[1.58543526E12, 2.033333333333333], [1.58543532E12, 0.9666666666666667]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58543538E12, 20.2], [1.58543586E12, 0.8], [1.58543526E12, 9.55], [1.58543556E12, 8.766666666666667], [1.58543544E12, 18.6], [1.5854355E12, 19.05], [1.58543532E12, 20.716666666666665]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58543538E12, 0.48333333333333334], [1.58543586E12, 2.183333333333333], [1.58543568E12, 47.8], [1.58543574E12, 48.016666666666666], [1.58543556E12, 13.683333333333334], [1.58543562E12, 48.18333333333333], [1.58543544E12, 0.16666666666666666], [1.5854355E12, 0.8833333333333333], [1.5854358E12, 39.7], [1.58543532E12, 1.2166666666666666]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.58543538E12, 20.816666666666666], [1.58543586E12, 0.6], [1.58543526E12, 10.083333333333334], [1.58543556E12, 9.0], [1.58543544E12, 18.45], [1.5854355E12, 19.633333333333333], [1.58543532E12, 22.2]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58543538E12, 0.23333333333333334], [1.58543586E12, 2.0166666666666666], [1.58543568E12, 47.71666666666667], [1.58543574E12, 47.88333333333333], [1.58543556E12, 13.6], [1.58543562E12, 47.65], [1.58543544E12, 0.08333333333333333], [1.5854355E12, 0.36666666666666664], [1.5854358E12, 39.233333333333334], [1.58543532E12, 0.43333333333333335]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543586E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.58543526E12, "maxY": 95.9, "series": [{"data": [[1.58543538E12, 41.016666666666666], [1.58543586E12, 1.4], [1.58543526E12, 21.666666666666668], [1.58543556E12, 17.766666666666666], [1.58543544E12, 37.05], [1.5854355E12, 38.68333333333333], [1.58543532E12, 43.88333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58543538E12, 0.7166666666666667], [1.58543586E12, 4.2], [1.58543568E12, 95.51666666666667], [1.58543574E12, 95.9], [1.58543556E12, 27.283333333333335], [1.58543562E12, 95.83333333333333], [1.58543544E12, 0.25], [1.5854355E12, 1.25], [1.5854358E12, 78.93333333333334], [1.58543532E12, 1.65]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58543586E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

