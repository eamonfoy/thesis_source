/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "maxY": 3996.0, "series": [{"data": [[0.0, 11.0], [0.1, 13.0], [0.2, 14.0], [0.3, 15.0], [0.4, 15.0], [0.5, 16.0], [0.6, 16.0], [0.7, 17.0], [0.8, 17.0], [0.9, 17.0], [1.0, 18.0], [1.1, 18.0], [1.2, 18.0], [1.3, 18.0], [1.4, 19.0], [1.5, 19.0], [1.6, 19.0], [1.7, 19.0], [1.8, 20.0], [1.9, 20.0], [2.0, 20.0], [2.1, 20.0], [2.2, 21.0], [2.3, 21.0], [2.4, 21.0], [2.5, 21.0], [2.6, 21.0], [2.7, 21.0], [2.8, 22.0], [2.9, 22.0], [3.0, 22.0], [3.1, 22.0], [3.2, 22.0], [3.3, 22.0], [3.4, 22.0], [3.5, 22.0], [3.6, 23.0], [3.7, 23.0], [3.8, 23.0], [3.9, 23.0], [4.0, 23.0], [4.1, 23.0], [4.2, 23.0], [4.3, 24.0], [4.4, 24.0], [4.5, 24.0], [4.6, 24.0], [4.7, 24.0], [4.8, 24.0], [4.9, 24.0], [5.0, 25.0], [5.1, 25.0], [5.2, 25.0], [5.3, 25.0], [5.4, 25.0], [5.5, 25.0], [5.6, 25.0], [5.7, 26.0], [5.8, 26.0], [5.9, 26.0], [6.0, 26.0], [6.1, 26.0], [6.2, 27.0], [6.3, 27.0], [6.4, 27.0], [6.5, 27.0], [6.6, 27.0], [6.7, 28.0], [6.8, 28.0], [6.9, 28.0], [7.0, 28.0], [7.1, 28.0], [7.2, 29.0], [7.3, 29.0], [7.4, 29.0], [7.5, 29.0], [7.6, 29.0], [7.7, 29.0], [7.8, 30.0], [7.9, 30.0], [8.0, 30.0], [8.1, 30.0], [8.2, 30.0], [8.3, 30.0], [8.4, 31.0], [8.5, 31.0], [8.6, 31.0], [8.7, 31.0], [8.8, 32.0], [8.9, 32.0], [9.0, 32.0], [9.1, 33.0], [9.2, 33.0], [9.3, 33.0], [9.4, 34.0], [9.5, 34.0], [9.6, 34.0], [9.7, 34.0], [9.8, 35.0], [9.9, 35.0], [10.0, 35.0], [10.1, 36.0], [10.2, 36.0], [10.3, 37.0], [10.4, 37.0], [10.5, 38.0], [10.6, 38.0], [10.7, 39.0], [10.8, 39.0], [10.9, 40.0], [11.0, 41.0], [11.1, 41.0], [11.2, 42.0], [11.3, 43.0], [11.4, 43.0], [11.5, 44.0], [11.6, 44.0], [11.7, 45.0], [11.8, 47.0], [11.9, 47.0], [12.0, 49.0], [12.1, 51.0], [12.2, 52.0], [12.3, 55.0], [12.4, 59.0], [12.5, 62.0], [12.6, 66.0], [12.7, 70.0], [12.8, 74.0], [12.9, 81.0], [13.0, 89.0], [13.1, 99.0], [13.2, 114.0], [13.3, 131.0], [13.4, 159.0], [13.5, 187.0], [13.6, 206.0], [13.7, 219.0], [13.8, 230.0], [13.9, 240.0], [14.0, 259.0], [14.1, 267.0], [14.2, 276.0], [14.3, 290.0], [14.4, 300.0], [14.5, 305.0], [14.6, 308.0], [14.7, 317.0], [14.8, 322.0], [14.9, 328.0], [15.0, 330.0], [15.1, 335.0], [15.2, 341.0], [15.3, 348.0], [15.4, 364.0], [15.5, 369.0], [15.6, 373.0], [15.7, 378.0], [15.8, 384.0], [15.9, 389.0], [16.0, 394.0], [16.1, 397.0], [16.2, 402.0], [16.3, 405.0], [16.4, 408.0], [16.5, 412.0], [16.6, 416.0], [16.7, 420.0], [16.8, 423.0], [16.9, 426.0], [17.0, 431.0], [17.1, 434.0], [17.2, 439.0], [17.3, 443.0], [17.4, 445.0], [17.5, 446.0], [17.6, 449.0], [17.7, 452.0], [17.8, 455.0], [17.9, 459.0], [18.0, 462.0], [18.1, 464.0], [18.2, 468.0], [18.3, 471.0], [18.4, 473.0], [18.5, 477.0], [18.6, 479.0], [18.7, 482.0], [18.8, 484.0], [18.9, 487.0], [19.0, 489.0], [19.1, 493.0], [19.2, 496.0], [19.3, 499.0], [19.4, 501.0], [19.5, 504.0], [19.6, 507.0], [19.7, 510.0], [19.8, 512.0], [19.9, 515.0], [20.0, 516.0], [20.1, 519.0], [20.2, 521.0], [20.3, 526.0], [20.4, 528.0], [20.5, 530.0], [20.6, 532.0], [20.7, 534.0], [20.8, 536.0], [20.9, 537.0], [21.0, 541.0], [21.1, 542.0], [21.2, 544.0], [21.3, 546.0], [21.4, 548.0], [21.5, 550.0], [21.6, 552.0], [21.7, 554.0], [21.8, 556.0], [21.9, 560.0], [22.0, 563.0], [22.1, 566.0], [22.2, 569.0], [22.3, 573.0], [22.4, 575.0], [22.5, 578.0], [22.6, 580.0], [22.7, 584.0], [22.8, 588.0], [22.9, 590.0], [23.0, 593.0], [23.1, 596.0], [23.2, 597.0], [23.3, 599.0], [23.4, 602.0], [23.5, 604.0], [23.6, 606.0], [23.7, 608.0], [23.8, 609.0], [23.9, 611.0], [24.0, 613.0], [24.1, 615.0], [24.2, 616.0], [24.3, 618.0], [24.4, 619.0], [24.5, 620.0], [24.6, 621.0], [24.7, 624.0], [24.8, 626.0], [24.9, 627.0], [25.0, 630.0], [25.1, 632.0], [25.2, 634.0], [25.3, 638.0], [25.4, 639.0], [25.5, 642.0], [25.6, 643.0], [25.7, 645.0], [25.8, 648.0], [25.9, 649.0], [26.0, 652.0], [26.1, 653.0], [26.2, 656.0], [26.3, 658.0], [26.4, 660.0], [26.5, 661.0], [26.6, 663.0], [26.7, 666.0], [26.8, 667.0], [26.9, 669.0], [27.0, 670.0], [27.1, 672.0], [27.2, 673.0], [27.3, 674.0], [27.4, 676.0], [27.5, 678.0], [27.6, 680.0], [27.7, 684.0], [27.8, 685.0], [27.9, 688.0], [28.0, 689.0], [28.1, 691.0], [28.2, 693.0], [28.3, 696.0], [28.4, 697.0], [28.5, 699.0], [28.6, 700.0], [28.7, 701.0], [28.8, 703.0], [28.9, 705.0], [29.0, 706.0], [29.1, 708.0], [29.2, 710.0], [29.3, 712.0], [29.4, 714.0], [29.5, 715.0], [29.6, 717.0], [29.7, 719.0], [29.8, 720.0], [29.9, 722.0], [30.0, 724.0], [30.1, 726.0], [30.2, 729.0], [30.3, 731.0], [30.4, 732.0], [30.5, 733.0], [30.6, 735.0], [30.7, 738.0], [30.8, 740.0], [30.9, 742.0], [31.0, 744.0], [31.1, 746.0], [31.2, 747.0], [31.3, 749.0], [31.4, 751.0], [31.5, 753.0], [31.6, 755.0], [31.7, 757.0], [31.8, 758.0], [31.9, 759.0], [32.0, 761.0], [32.1, 762.0], [32.2, 763.0], [32.3, 765.0], [32.4, 766.0], [32.5, 767.0], [32.6, 769.0], [32.7, 770.0], [32.8, 771.0], [32.9, 772.0], [33.0, 773.0], [33.1, 775.0], [33.2, 777.0], [33.3, 778.0], [33.4, 779.0], [33.5, 780.0], [33.6, 782.0], [33.7, 783.0], [33.8, 784.0], [33.9, 786.0], [34.0, 787.0], [34.1, 788.0], [34.2, 789.0], [34.3, 792.0], [34.4, 793.0], [34.5, 796.0], [34.6, 797.0], [34.7, 799.0], [34.8, 801.0], [34.9, 802.0], [35.0, 803.0], [35.1, 805.0], [35.2, 806.0], [35.3, 807.0], [35.4, 809.0], [35.5, 810.0], [35.6, 812.0], [35.7, 812.0], [35.8, 814.0], [35.9, 816.0], [36.0, 817.0], [36.1, 819.0], [36.2, 820.0], [36.3, 822.0], [36.4, 823.0], [36.5, 824.0], [36.6, 826.0], [36.7, 827.0], [36.8, 828.0], [36.9, 830.0], [37.0, 831.0], [37.1, 833.0], [37.2, 834.0], [37.3, 836.0], [37.4, 837.0], [37.5, 839.0], [37.6, 840.0], [37.7, 842.0], [37.8, 843.0], [37.9, 844.0], [38.0, 846.0], [38.1, 848.0], [38.2, 849.0], [38.3, 850.0], [38.4, 851.0], [38.5, 852.0], [38.6, 854.0], [38.7, 855.0], [38.8, 857.0], [38.9, 858.0], [39.0, 860.0], [39.1, 862.0], [39.2, 865.0], [39.3, 866.0], [39.4, 868.0], [39.5, 869.0], [39.6, 871.0], [39.7, 872.0], [39.8, 874.0], [39.9, 875.0], [40.0, 876.0], [40.1, 879.0], [40.2, 880.0], [40.3, 881.0], [40.4, 882.0], [40.5, 884.0], [40.6, 886.0], [40.7, 887.0], [40.8, 889.0], [40.9, 891.0], [41.0, 892.0], [41.1, 893.0], [41.2, 894.0], [41.3, 896.0], [41.4, 897.0], [41.5, 899.0], [41.6, 901.0], [41.7, 902.0], [41.8, 903.0], [41.9, 904.0], [42.0, 905.0], [42.1, 907.0], [42.2, 908.0], [42.3, 910.0], [42.4, 910.0], [42.5, 912.0], [42.6, 914.0], [42.7, 916.0], [42.8, 917.0], [42.9, 918.0], [43.0, 919.0], [43.1, 920.0], [43.2, 921.0], [43.3, 923.0], [43.4, 925.0], [43.5, 926.0], [43.6, 927.0], [43.7, 930.0], [43.8, 931.0], [43.9, 932.0], [44.0, 933.0], [44.1, 935.0], [44.2, 936.0], [44.3, 938.0], [44.4, 939.0], [44.5, 940.0], [44.6, 941.0], [44.7, 942.0], [44.8, 944.0], [44.9, 946.0], [45.0, 947.0], [45.1, 949.0], [45.2, 951.0], [45.3, 953.0], [45.4, 955.0], [45.5, 957.0], [45.6, 958.0], [45.7, 960.0], [45.8, 961.0], [45.9, 963.0], [46.0, 964.0], [46.1, 965.0], [46.2, 966.0], [46.3, 967.0], [46.4, 969.0], [46.5, 970.0], [46.6, 973.0], [46.7, 975.0], [46.8, 976.0], [46.9, 978.0], [47.0, 979.0], [47.1, 981.0], [47.2, 982.0], [47.3, 984.0], [47.4, 985.0], [47.5, 986.0], [47.6, 988.0], [47.7, 989.0], [47.8, 990.0], [47.9, 992.0], [48.0, 993.0], [48.1, 995.0], [48.2, 997.0], [48.3, 998.0], [48.4, 999.0], [48.5, 1000.0], [48.6, 1002.0], [48.7, 1003.0], [48.8, 1004.0], [48.9, 1005.0], [49.0, 1007.0], [49.1, 1008.0], [49.2, 1010.0], [49.3, 1011.0], [49.4, 1012.0], [49.5, 1013.0], [49.6, 1014.0], [49.7, 1015.0], [49.8, 1016.0], [49.9, 1019.0], [50.0, 1022.0], [50.1, 1023.0], [50.2, 1024.0], [50.3, 1026.0], [50.4, 1029.0], [50.5, 1030.0], [50.6, 1032.0], [50.7, 1033.0], [50.8, 1034.0], [50.9, 1035.0], [51.0, 1036.0], [51.1, 1037.0], [51.2, 1039.0], [51.3, 1040.0], [51.4, 1041.0], [51.5, 1042.0], [51.6, 1044.0], [51.7, 1046.0], [51.8, 1047.0], [51.9, 1048.0], [52.0, 1050.0], [52.1, 1053.0], [52.2, 1054.0], [52.3, 1056.0], [52.4, 1057.0], [52.5, 1058.0], [52.6, 1059.0], [52.7, 1060.0], [52.8, 1061.0], [52.9, 1064.0], [53.0, 1065.0], [53.1, 1066.0], [53.2, 1067.0], [53.3, 1069.0], [53.4, 1070.0], [53.5, 1071.0], [53.6, 1073.0], [53.7, 1074.0], [53.8, 1075.0], [53.9, 1077.0], [54.0, 1078.0], [54.1, 1080.0], [54.2, 1081.0], [54.3, 1082.0], [54.4, 1083.0], [54.5, 1084.0], [54.6, 1086.0], [54.7, 1087.0], [54.8, 1089.0], [54.9, 1091.0], [55.0, 1092.0], [55.1, 1093.0], [55.2, 1094.0], [55.3, 1095.0], [55.4, 1097.0], [55.5, 1098.0], [55.6, 1100.0], [55.7, 1101.0], [55.8, 1101.0], [55.9, 1103.0], [56.0, 1105.0], [56.1, 1107.0], [56.2, 1108.0], [56.3, 1109.0], [56.4, 1110.0], [56.5, 1111.0], [56.6, 1113.0], [56.7, 1114.0], [56.8, 1115.0], [56.9, 1117.0], [57.0, 1118.0], [57.1, 1120.0], [57.2, 1121.0], [57.3, 1123.0], [57.4, 1124.0], [57.5, 1125.0], [57.6, 1127.0], [57.7, 1128.0], [57.8, 1129.0], [57.9, 1131.0], [58.0, 1133.0], [58.1, 1134.0], [58.2, 1135.0], [58.3, 1137.0], [58.4, 1138.0], [58.5, 1139.0], [58.6, 1140.0], [58.7, 1141.0], [58.8, 1142.0], [58.9, 1144.0], [59.0, 1145.0], [59.1, 1146.0], [59.2, 1148.0], [59.3, 1148.0], [59.4, 1150.0], [59.5, 1151.0], [59.6, 1152.0], [59.7, 1154.0], [59.8, 1155.0], [59.9, 1157.0], [60.0, 1159.0], [60.1, 1161.0], [60.2, 1162.0], [60.3, 1164.0], [60.4, 1165.0], [60.5, 1166.0], [60.6, 1167.0], [60.7, 1169.0], [60.8, 1171.0], [60.9, 1172.0], [61.0, 1174.0], [61.1, 1176.0], [61.2, 1177.0], [61.3, 1178.0], [61.4, 1180.0], [61.5, 1181.0], [61.6, 1182.0], [61.7, 1183.0], [61.8, 1185.0], [61.9, 1187.0], [62.0, 1189.0], [62.1, 1190.0], [62.2, 1191.0], [62.3, 1193.0], [62.4, 1195.0], [62.5, 1197.0], [62.6, 1199.0], [62.7, 1200.0], [62.8, 1202.0], [62.9, 1204.0], [63.0, 1205.0], [63.1, 1206.0], [63.2, 1207.0], [63.3, 1209.0], [63.4, 1211.0], [63.5, 1212.0], [63.6, 1213.0], [63.7, 1215.0], [63.8, 1216.0], [63.9, 1217.0], [64.0, 1219.0], [64.1, 1220.0], [64.2, 1221.0], [64.3, 1223.0], [64.4, 1225.0], [64.5, 1227.0], [64.6, 1229.0], [64.7, 1230.0], [64.8, 1232.0], [64.9, 1233.0], [65.0, 1235.0], [65.1, 1237.0], [65.2, 1238.0], [65.3, 1240.0], [65.4, 1240.0], [65.5, 1242.0], [65.6, 1243.0], [65.7, 1245.0], [65.8, 1246.0], [65.9, 1247.0], [66.0, 1249.0], [66.1, 1251.0], [66.2, 1252.0], [66.3, 1255.0], [66.4, 1257.0], [66.5, 1259.0], [66.6, 1261.0], [66.7, 1262.0], [66.8, 1263.0], [66.9, 1266.0], [67.0, 1268.0], [67.1, 1269.0], [67.2, 1271.0], [67.3, 1272.0], [67.4, 1272.0], [67.5, 1275.0], [67.6, 1276.0], [67.7, 1278.0], [67.8, 1279.0], [67.9, 1280.0], [68.0, 1282.0], [68.1, 1284.0], [68.2, 1286.0], [68.3, 1287.0], [68.4, 1288.0], [68.5, 1289.0], [68.6, 1290.0], [68.7, 1292.0], [68.8, 1295.0], [68.9, 1296.0], [69.0, 1298.0], [69.1, 1299.0], [69.2, 1302.0], [69.3, 1303.0], [69.4, 1305.0], [69.5, 1309.0], [69.6, 1310.0], [69.7, 1312.0], [69.8, 1313.0], [69.9, 1315.0], [70.0, 1318.0], [70.1, 1319.0], [70.2, 1321.0], [70.3, 1322.0], [70.4, 1323.0], [70.5, 1325.0], [70.6, 1326.0], [70.7, 1328.0], [70.8, 1329.0], [70.9, 1331.0], [71.0, 1332.0], [71.1, 1334.0], [71.2, 1336.0], [71.3, 1337.0], [71.4, 1339.0], [71.5, 1341.0], [71.6, 1344.0], [71.7, 1346.0], [71.8, 1348.0], [71.9, 1350.0], [72.0, 1351.0], [72.1, 1352.0], [72.2, 1354.0], [72.3, 1355.0], [72.4, 1358.0], [72.5, 1360.0], [72.6, 1362.0], [72.7, 1363.0], [72.8, 1365.0], [72.9, 1367.0], [73.0, 1369.0], [73.1, 1371.0], [73.2, 1372.0], [73.3, 1375.0], [73.4, 1376.0], [73.5, 1379.0], [73.6, 1380.0], [73.7, 1381.0], [73.8, 1383.0], [73.9, 1384.0], [74.0, 1386.0], [74.1, 1389.0], [74.2, 1391.0], [74.3, 1395.0], [74.4, 1396.0], [74.5, 1398.0], [74.6, 1399.0], [74.7, 1400.0], [74.8, 1401.0], [74.9, 1404.0], [75.0, 1406.0], [75.1, 1407.0], [75.2, 1410.0], [75.3, 1414.0], [75.4, 1416.0], [75.5, 1420.0], [75.6, 1422.0], [75.7, 1423.0], [75.8, 1425.0], [75.9, 1426.0], [76.0, 1430.0], [76.1, 1432.0], [76.2, 1435.0], [76.3, 1437.0], [76.4, 1438.0], [76.5, 1440.0], [76.6, 1442.0], [76.7, 1444.0], [76.8, 1446.0], [76.9, 1447.0], [77.0, 1448.0], [77.1, 1450.0], [77.2, 1452.0], [77.3, 1454.0], [77.4, 1457.0], [77.5, 1460.0], [77.6, 1461.0], [77.7, 1464.0], [77.8, 1466.0], [77.9, 1469.0], [78.0, 1472.0], [78.1, 1473.0], [78.2, 1476.0], [78.3, 1477.0], [78.4, 1478.0], [78.5, 1482.0], [78.6, 1484.0], [78.7, 1487.0], [78.8, 1489.0], [78.9, 1490.0], [79.0, 1492.0], [79.1, 1493.0], [79.2, 1495.0], [79.3, 1496.0], [79.4, 1499.0], [79.5, 1502.0], [79.6, 1504.0], [79.7, 1507.0], [79.8, 1510.0], [79.9, 1513.0], [80.0, 1515.0], [80.1, 1517.0], [80.2, 1519.0], [80.3, 1522.0], [80.4, 1523.0], [80.5, 1525.0], [80.6, 1528.0], [80.7, 1531.0], [80.8, 1533.0], [80.9, 1534.0], [81.0, 1536.0], [81.1, 1538.0], [81.2, 1540.0], [81.3, 1543.0], [81.4, 1548.0], [81.5, 1550.0], [81.6, 1553.0], [81.7, 1555.0], [81.8, 1557.0], [81.9, 1560.0], [82.0, 1562.0], [82.1, 1565.0], [82.2, 1567.0], [82.3, 1570.0], [82.4, 1573.0], [82.5, 1574.0], [82.6, 1577.0], [82.7, 1583.0], [82.8, 1586.0], [82.9, 1589.0], [83.0, 1591.0], [83.1, 1594.0], [83.2, 1596.0], [83.3, 1598.0], [83.4, 1603.0], [83.5, 1606.0], [83.6, 1608.0], [83.7, 1611.0], [83.8, 1615.0], [83.9, 1618.0], [84.0, 1621.0], [84.1, 1623.0], [84.2, 1626.0], [84.3, 1628.0], [84.4, 1630.0], [84.5, 1634.0], [84.6, 1637.0], [84.7, 1640.0], [84.8, 1643.0], [84.9, 1646.0], [85.0, 1651.0], [85.1, 1654.0], [85.2, 1656.0], [85.3, 1658.0], [85.4, 1662.0], [85.5, 1664.0], [85.6, 1666.0], [85.7, 1668.0], [85.8, 1673.0], [85.9, 1676.0], [86.0, 1680.0], [86.1, 1684.0], [86.2, 1686.0], [86.3, 1690.0], [86.4, 1693.0], [86.5, 1695.0], [86.6, 1699.0], [86.7, 1702.0], [86.8, 1705.0], [86.9, 1709.0], [87.0, 1711.0], [87.1, 1716.0], [87.2, 1718.0], [87.3, 1722.0], [87.4, 1725.0], [87.5, 1729.0], [87.6, 1731.0], [87.7, 1735.0], [87.8, 1739.0], [87.9, 1741.0], [88.0, 1744.0], [88.1, 1747.0], [88.2, 1748.0], [88.3, 1751.0], [88.4, 1753.0], [88.5, 1757.0], [88.6, 1762.0], [88.7, 1765.0], [88.8, 1769.0], [88.9, 1773.0], [89.0, 1777.0], [89.1, 1782.0], [89.2, 1785.0], [89.3, 1789.0], [89.4, 1792.0], [89.5, 1795.0], [89.6, 1799.0], [89.7, 1804.0], [89.8, 1809.0], [89.9, 1815.0], [90.0, 1822.0], [90.1, 1826.0], [90.2, 1829.0], [90.3, 1834.0], [90.4, 1838.0], [90.5, 1843.0], [90.6, 1847.0], [90.7, 1851.0], [90.8, 1855.0], [90.9, 1860.0], [91.0, 1862.0], [91.1, 1866.0], [91.2, 1869.0], [91.3, 1875.0], [91.4, 1877.0], [91.5, 1883.0], [91.6, 1888.0], [91.7, 1893.0], [91.8, 1897.0], [91.9, 1901.0], [92.0, 1905.0], [92.1, 1907.0], [92.2, 1910.0], [92.3, 1916.0], [92.4, 1921.0], [92.5, 1925.0], [92.6, 1928.0], [92.7, 1938.0], [92.8, 1946.0], [92.9, 1950.0], [93.0, 1954.0], [93.1, 1961.0], [93.2, 1964.0], [93.3, 1969.0], [93.4, 1973.0], [93.5, 1980.0], [93.6, 1983.0], [93.7, 1987.0], [93.8, 1996.0], [93.9, 1999.0], [94.0, 2004.0], [94.1, 2010.0], [94.2, 2019.0], [94.3, 2027.0], [94.4, 2032.0], [94.5, 2041.0], [94.6, 2050.0], [94.7, 2056.0], [94.8, 2062.0], [94.9, 2069.0], [95.0, 2075.0], [95.1, 2081.0], [95.2, 2092.0], [95.3, 2105.0], [95.4, 2111.0], [95.5, 2120.0], [95.6, 2130.0], [95.7, 2142.0], [95.8, 2149.0], [95.9, 2158.0], [96.0, 2172.0], [96.1, 2180.0], [96.2, 2190.0], [96.3, 2194.0], [96.4, 2200.0], [96.5, 2207.0], [96.6, 2213.0], [96.7, 2220.0], [96.8, 2233.0], [96.9, 2244.0], [97.0, 2253.0], [97.1, 2265.0], [97.2, 2276.0], [97.3, 2291.0], [97.4, 2306.0], [97.5, 2318.0], [97.6, 2342.0], [97.7, 2352.0], [97.8, 2370.0], [97.9, 2382.0], [98.0, 2399.0], [98.1, 2409.0], [98.2, 2427.0], [98.3, 2441.0], [98.4, 2466.0], [98.5, 2489.0], [98.6, 2506.0], [98.7, 2532.0], [98.8, 2541.0], [98.9, 2564.0], [99.0, 2591.0], [99.1, 2625.0], [99.2, 2659.0], [99.3, 2671.0], [99.4, 2718.0], [99.5, 2752.0], [99.6, 2793.0], [99.7, 2832.0], [99.8, 2955.0], [99.9, 3224.0], [100.0, 3996.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 149.0], [0.1, 149.0], [0.2, 149.0], [0.3, 149.0], [0.4, 149.0], [0.5, 149.0], [0.6, 149.0], [0.7, 149.0], [0.8, 149.0], [0.9, 149.0], [1.0, 151.0], [1.1, 151.0], [1.2, 151.0], [1.3, 151.0], [1.4, 151.0], [1.5, 151.0], [1.6, 151.0], [1.7, 151.0], [1.8, 151.0], [1.9, 151.0], [2.0, 152.0], [2.1, 152.0], [2.2, 152.0], [2.3, 152.0], [2.4, 152.0], [2.5, 152.0], [2.6, 152.0], [2.7, 152.0], [2.8, 152.0], [2.9, 152.0], [3.0, 153.0], [3.1, 153.0], [3.2, 153.0], [3.3, 153.0], [3.4, 153.0], [3.5, 153.0], [3.6, 153.0], [3.7, 153.0], [3.8, 153.0], [3.9, 153.0], [4.0, 153.0], [4.1, 153.0], [4.2, 153.0], [4.3, 153.0], [4.4, 153.0], [4.5, 153.0], [4.6, 153.0], [4.7, 153.0], [4.8, 153.0], [4.9, 153.0], [5.0, 154.0], [5.1, 154.0], [5.2, 154.0], [5.3, 154.0], [5.4, 154.0], [5.5, 154.0], [5.6, 154.0], [5.7, 154.0], [5.8, 154.0], [5.9, 154.0], [6.0, 154.0], [6.1, 154.0], [6.2, 154.0], [6.3, 154.0], [6.4, 154.0], [6.5, 154.0], [6.6, 154.0], [6.7, 154.0], [6.8, 154.0], [6.9, 154.0], [7.0, 155.0], [7.1, 155.0], [7.2, 155.0], [7.3, 155.0], [7.4, 155.0], [7.5, 155.0], [7.6, 155.0], [7.7, 155.0], [7.8, 155.0], [7.9, 155.0], [8.0, 156.0], [8.1, 156.0], [8.2, 156.0], [8.3, 156.0], [8.4, 156.0], [8.5, 156.0], [8.6, 156.0], [8.7, 156.0], [8.8, 156.0], [8.9, 156.0], [9.0, 156.0], [9.1, 156.0], [9.2, 156.0], [9.3, 156.0], [9.4, 156.0], [9.5, 156.0], [9.6, 156.0], [9.7, 156.0], [9.8, 156.0], [9.9, 156.0], [10.0, 156.0], [10.1, 156.0], [10.2, 156.0], [10.3, 156.0], [10.4, 156.0], [10.5, 156.0], [10.6, 156.0], [10.7, 156.0], [10.8, 156.0], [10.9, 156.0], [11.0, 157.0], [11.1, 157.0], [11.2, 157.0], [11.3, 157.0], [11.4, 157.0], [11.5, 157.0], [11.6, 157.0], [11.7, 157.0], [11.8, 157.0], [11.9, 157.0], [12.0, 157.0], [12.1, 157.0], [12.2, 157.0], [12.3, 157.0], [12.4, 157.0], [12.5, 157.0], [12.6, 157.0], [12.7, 157.0], [12.8, 157.0], [12.9, 157.0], [13.0, 157.0], [13.1, 157.0], [13.2, 157.0], [13.3, 157.0], [13.4, 157.0], [13.5, 157.0], [13.6, 157.0], [13.7, 157.0], [13.8, 157.0], [13.9, 157.0], [14.0, 158.0], [14.1, 158.0], [14.2, 158.0], [14.3, 158.0], [14.4, 158.0], [14.5, 158.0], [14.6, 158.0], [14.7, 158.0], [14.8, 158.0], [14.9, 158.0], [15.0, 158.0], [15.1, 158.0], [15.2, 158.0], [15.3, 158.0], [15.4, 158.0], [15.5, 158.0], [15.6, 158.0], [15.7, 158.0], [15.8, 158.0], [15.9, 158.0], [16.0, 158.0], [16.1, 158.0], [16.2, 158.0], [16.3, 158.0], [16.4, 158.0], [16.5, 158.0], [16.6, 158.0], [16.7, 158.0], [16.8, 158.0], [16.9, 158.0], [17.0, 159.0], [17.1, 159.0], [17.2, 159.0], [17.3, 159.0], [17.4, 159.0], [17.5, 159.0], [17.6, 159.0], [17.7, 159.0], [17.8, 159.0], [17.9, 159.0], [18.0, 159.0], [18.1, 159.0], [18.2, 159.0], [18.3, 159.0], [18.4, 159.0], [18.5, 159.0], [18.6, 159.0], [18.7, 159.0], [18.8, 159.0], [18.9, 159.0], [19.0, 159.0], [19.1, 159.0], [19.2, 159.0], [19.3, 159.0], [19.4, 159.0], [19.5, 159.0], [19.6, 159.0], [19.7, 159.0], [19.8, 159.0], [19.9, 159.0], [20.0, 159.0], [20.1, 159.0], [20.2, 159.0], [20.3, 159.0], [20.4, 159.0], [20.5, 159.0], [20.6, 159.0], [20.7, 159.0], [20.8, 159.0], [20.9, 159.0], [21.0, 160.0], [21.1, 160.0], [21.2, 160.0], [21.3, 160.0], [21.4, 160.0], [21.5, 160.0], [21.6, 160.0], [21.7, 160.0], [21.8, 160.0], [21.9, 160.0], [22.0, 160.0], [22.1, 160.0], [22.2, 160.0], [22.3, 160.0], [22.4, 160.0], [22.5, 160.0], [22.6, 160.0], [22.7, 160.0], [22.8, 160.0], [22.9, 160.0], [23.0, 160.0], [23.1, 160.0], [23.2, 160.0], [23.3, 160.0], [23.4, 160.0], [23.5, 160.0], [23.6, 160.0], [23.7, 160.0], [23.8, 160.0], [23.9, 160.0], [24.0, 160.0], [24.1, 160.0], [24.2, 160.0], [24.3, 160.0], [24.4, 160.0], [24.5, 160.0], [24.6, 160.0], [24.7, 160.0], [24.8, 160.0], [24.9, 160.0], [25.0, 161.0], [25.1, 161.0], [25.2, 161.0], [25.3, 161.0], [25.4, 161.0], [25.5, 161.0], [25.6, 161.0], [25.7, 161.0], [25.8, 161.0], [25.9, 161.0], [26.0, 161.0], [26.1, 161.0], [26.2, 161.0], [26.3, 161.0], [26.4, 161.0], [26.5, 161.0], [26.6, 161.0], [26.7, 161.0], [26.8, 161.0], [26.9, 161.0], [27.0, 161.0], [27.1, 161.0], [27.2, 161.0], [27.3, 161.0], [27.4, 161.0], [27.5, 161.0], [27.6, 161.0], [27.7, 161.0], [27.8, 161.0], [27.9, 161.0], [28.0, 162.0], [28.1, 162.0], [28.2, 162.0], [28.3, 162.0], [28.4, 162.0], [28.5, 162.0], [28.6, 162.0], [28.7, 162.0], [28.8, 162.0], [28.9, 162.0], [29.0, 163.0], [29.1, 163.0], [29.2, 163.0], [29.3, 163.0], [29.4, 163.0], [29.5, 163.0], [29.6, 163.0], [29.7, 163.0], [29.8, 163.0], [29.9, 163.0], [30.0, 163.0], [30.1, 163.0], [30.2, 163.0], [30.3, 163.0], [30.4, 163.0], [30.5, 163.0], [30.6, 163.0], [30.7, 163.0], [30.8, 163.0], [30.9, 163.0], [31.0, 163.0], [31.1, 163.0], [31.2, 163.0], [31.3, 163.0], [31.4, 163.0], [31.5, 163.0], [31.6, 163.0], [31.7, 163.0], [31.8, 163.0], [31.9, 163.0], [32.0, 163.0], [32.1, 163.0], [32.2, 163.0], [32.3, 163.0], [32.4, 163.0], [32.5, 163.0], [32.6, 163.0], [32.7, 163.0], [32.8, 163.0], [32.9, 163.0], [33.0, 164.0], [33.1, 164.0], [33.2, 164.0], [33.3, 164.0], [33.4, 164.0], [33.5, 164.0], [33.6, 164.0], [33.7, 164.0], [33.8, 164.0], [33.9, 164.0], [34.0, 164.0], [34.1, 164.0], [34.2, 164.0], [34.3, 164.0], [34.4, 164.0], [34.5, 164.0], [34.6, 164.0], [34.7, 164.0], [34.8, 164.0], [34.9, 164.0], [35.0, 164.0], [35.1, 164.0], [35.2, 164.0], [35.3, 164.0], [35.4, 164.0], [35.5, 164.0], [35.6, 164.0], [35.7, 164.0], [35.8, 164.0], [35.9, 164.0], [36.0, 164.0], [36.1, 164.0], [36.2, 164.0], [36.3, 164.0], [36.4, 164.0], [36.5, 164.0], [36.6, 164.0], [36.7, 164.0], [36.8, 164.0], [36.9, 164.0], [37.0, 165.0], [37.1, 165.0], [37.2, 165.0], [37.3, 165.0], [37.4, 165.0], [37.5, 165.0], [37.6, 165.0], [37.7, 165.0], [37.8, 165.0], [37.9, 165.0], [38.0, 165.0], [38.1, 165.0], [38.2, 165.0], [38.3, 165.0], [38.4, 165.0], [38.5, 165.0], [38.6, 165.0], [38.7, 165.0], [38.8, 165.0], [38.9, 165.0], [39.0, 165.0], [39.1, 165.0], [39.2, 165.0], [39.3, 165.0], [39.4, 165.0], [39.5, 165.0], [39.6, 165.0], [39.7, 165.0], [39.8, 165.0], [39.9, 165.0], [40.0, 165.0], [40.1, 165.0], [40.2, 165.0], [40.3, 165.0], [40.4, 165.0], [40.5, 165.0], [40.6, 165.0], [40.7, 165.0], [40.8, 165.0], [40.9, 165.0], [41.0, 165.0], [41.1, 165.0], [41.2, 165.0], [41.3, 165.0], [41.4, 165.0], [41.5, 165.0], [41.6, 165.0], [41.7, 165.0], [41.8, 165.0], [41.9, 165.0], [42.0, 166.0], [42.1, 166.0], [42.2, 166.0], [42.3, 166.0], [42.4, 166.0], [42.5, 166.0], [42.6, 166.0], [42.7, 166.0], [42.8, 166.0], [42.9, 166.0], [43.0, 167.0], [43.1, 167.0], [43.2, 167.0], [43.3, 167.0], [43.4, 167.0], [43.5, 167.0], [43.6, 167.0], [43.7, 167.0], [43.8, 167.0], [43.9, 167.0], [44.0, 167.0], [44.1, 167.0], [44.2, 167.0], [44.3, 167.0], [44.4, 167.0], [44.5, 167.0], [44.6, 167.0], [44.7, 167.0], [44.8, 167.0], [44.9, 167.0], [45.0, 167.0], [45.1, 167.0], [45.2, 167.0], [45.3, 167.0], [45.4, 167.0], [45.5, 167.0], [45.6, 167.0], [45.7, 167.0], [45.8, 167.0], [45.9, 167.0], [46.0, 167.0], [46.1, 167.0], [46.2, 167.0], [46.3, 167.0], [46.4, 167.0], [46.5, 167.0], [46.6, 167.0], [46.7, 167.0], [46.8, 167.0], [46.9, 167.0], [47.0, 167.0], [47.1, 167.0], [47.2, 167.0], [47.3, 167.0], [47.4, 167.0], [47.5, 167.0], [47.6, 167.0], [47.7, 167.0], [47.8, 167.0], [47.9, 167.0], [48.0, 168.0], [48.1, 168.0], [48.2, 168.0], [48.3, 168.0], [48.4, 168.0], [48.5, 168.0], [48.6, 168.0], [48.7, 168.0], [48.8, 168.0], [48.9, 168.0], [49.0, 168.0], [49.1, 168.0], [49.2, 168.0], [49.3, 168.0], [49.4, 168.0], [49.5, 168.0], [49.6, 168.0], [49.7, 168.0], [49.8, 168.0], [49.9, 168.0], [50.0, 168.0], [50.1, 168.0], [50.2, 168.0], [50.3, 168.0], [50.4, 168.0], [50.5, 168.0], [50.6, 168.0], [50.7, 168.0], [50.8, 168.0], [50.9, 168.0], [51.0, 169.0], [51.1, 169.0], [51.2, 169.0], [51.3, 169.0], [51.4, 169.0], [51.5, 169.0], [51.6, 169.0], [51.7, 169.0], [51.8, 169.0], [51.9, 169.0], [52.0, 169.0], [52.1, 169.0], [52.2, 169.0], [52.3, 169.0], [52.4, 169.0], [52.5, 169.0], [52.6, 169.0], [52.7, 169.0], [52.8, 169.0], [52.9, 169.0], [53.0, 169.0], [53.1, 169.0], [53.2, 169.0], [53.3, 169.0], [53.4, 169.0], [53.5, 169.0], [53.6, 169.0], [53.7, 169.0], [53.8, 169.0], [53.9, 169.0], [54.0, 171.0], [54.1, 171.0], [54.2, 171.0], [54.3, 171.0], [54.4, 171.0], [54.5, 171.0], [54.6, 171.0], [54.7, 171.0], [54.8, 171.0], [54.9, 171.0], [55.0, 171.0], [55.1, 171.0], [55.2, 171.0], [55.3, 171.0], [55.4, 171.0], [55.5, 171.0], [55.6, 171.0], [55.7, 171.0], [55.8, 171.0], [55.9, 171.0], [56.0, 172.0], [56.1, 172.0], [56.2, 172.0], [56.3, 172.0], [56.4, 172.0], [56.5, 172.0], [56.6, 172.0], [56.7, 172.0], [56.8, 172.0], [56.9, 172.0], [57.0, 172.0], [57.1, 172.0], [57.2, 172.0], [57.3, 172.0], [57.4, 172.0], [57.5, 172.0], [57.6, 172.0], [57.7, 172.0], [57.8, 172.0], [57.9, 172.0], [58.0, 172.0], [58.1, 172.0], [58.2, 172.0], [58.3, 172.0], [58.4, 172.0], [58.5, 172.0], [58.6, 172.0], [58.7, 172.0], [58.8, 172.0], [58.9, 172.0], [59.0, 173.0], [59.1, 173.0], [59.2, 173.0], [59.3, 173.0], [59.4, 173.0], [59.5, 173.0], [59.6, 173.0], [59.7, 173.0], [59.8, 173.0], [59.9, 173.0], [60.0, 173.0], [60.1, 173.0], [60.2, 173.0], [60.3, 173.0], [60.4, 173.0], [60.5, 173.0], [60.6, 173.0], [60.7, 173.0], [60.8, 173.0], [60.9, 173.0], [61.0, 173.0], [61.1, 173.0], [61.2, 173.0], [61.3, 173.0], [61.4, 173.0], [61.5, 173.0], [61.6, 173.0], [61.7, 173.0], [61.8, 173.0], [61.9, 173.0], [62.0, 173.0], [62.1, 173.0], [62.2, 173.0], [62.3, 173.0], [62.4, 173.0], [62.5, 173.0], [62.6, 173.0], [62.7, 173.0], [62.8, 173.0], [62.9, 173.0], [63.0, 174.0], [63.1, 174.0], [63.2, 174.0], [63.3, 174.0], [63.4, 174.0], [63.5, 174.0], [63.6, 174.0], [63.7, 174.0], [63.8, 174.0], [63.9, 174.0], [64.0, 174.0], [64.1, 174.0], [64.2, 174.0], [64.3, 174.0], [64.4, 174.0], [64.5, 174.0], [64.6, 174.0], [64.7, 174.0], [64.8, 174.0], [64.9, 174.0], [65.0, 174.0], [65.1, 174.0], [65.2, 174.0], [65.3, 174.0], [65.4, 174.0], [65.5, 174.0], [65.6, 174.0], [65.7, 174.0], [65.8, 174.0], [65.9, 174.0], [66.0, 174.0], [66.1, 174.0], [66.2, 174.0], [66.3, 174.0], [66.4, 174.0], [66.5, 174.0], [66.6, 174.0], [66.7, 174.0], [66.8, 174.0], [66.9, 174.0], [67.0, 175.0], [67.1, 175.0], [67.2, 175.0], [67.3, 175.0], [67.4, 175.0], [67.5, 175.0], [67.6, 175.0], [67.7, 175.0], [67.8, 175.0], [67.9, 175.0], [68.0, 175.0], [68.1, 175.0], [68.2, 175.0], [68.3, 175.0], [68.4, 175.0], [68.5, 175.0], [68.6, 175.0], [68.7, 175.0], [68.8, 175.0], [68.9, 175.0], [69.0, 176.0], [69.1, 176.0], [69.2, 176.0], [69.3, 176.0], [69.4, 176.0], [69.5, 176.0], [69.6, 176.0], [69.7, 176.0], [69.8, 176.0], [69.9, 176.0], [70.0, 176.0], [70.1, 176.0], [70.2, 176.0], [70.3, 176.0], [70.4, 176.0], [70.5, 176.0], [70.6, 176.0], [70.7, 176.0], [70.8, 176.0], [70.9, 176.0], [71.0, 177.0], [71.1, 177.0], [71.2, 177.0], [71.3, 177.0], [71.4, 177.0], [71.5, 177.0], [71.6, 177.0], [71.7, 177.0], [71.8, 177.0], [71.9, 177.0], [72.0, 178.0], [72.1, 178.0], [72.2, 178.0], [72.3, 178.0], [72.4, 178.0], [72.5, 178.0], [72.6, 178.0], [72.7, 178.0], [72.8, 178.0], [72.9, 178.0], [73.0, 179.0], [73.1, 179.0], [73.2, 179.0], [73.3, 179.0], [73.4, 179.0], [73.5, 179.0], [73.6, 179.0], [73.7, 179.0], [73.8, 179.0], [73.9, 179.0], [74.0, 180.0], [74.1, 180.0], [74.2, 180.0], [74.3, 180.0], [74.4, 180.0], [74.5, 180.0], [74.6, 180.0], [74.7, 180.0], [74.8, 180.0], [74.9, 180.0], [75.0, 181.0], [75.1, 181.0], [75.2, 181.0], [75.3, 181.0], [75.4, 181.0], [75.5, 181.0], [75.6, 181.0], [75.7, 181.0], [75.8, 181.0], [75.9, 181.0], [76.0, 182.0], [76.1, 182.0], [76.2, 182.0], [76.3, 182.0], [76.4, 182.0], [76.5, 182.0], [76.6, 182.0], [76.7, 182.0], [76.8, 182.0], [76.9, 182.0], [77.0, 182.0], [77.1, 182.0], [77.2, 182.0], [77.3, 182.0], [77.4, 182.0], [77.5, 182.0], [77.6, 182.0], [77.7, 182.0], [77.8, 182.0], [77.9, 182.0], [78.0, 184.0], [78.1, 184.0], [78.2, 184.0], [78.3, 184.0], [78.4, 184.0], [78.5, 184.0], [78.6, 184.0], [78.7, 184.0], [78.8, 184.0], [78.9, 184.0], [79.0, 185.0], [79.1, 185.0], [79.2, 185.0], [79.3, 185.0], [79.4, 185.0], [79.5, 185.0], [79.6, 185.0], [79.7, 185.0], [79.8, 185.0], [79.9, 185.0], [80.0, 186.0], [80.1, 186.0], [80.2, 186.0], [80.3, 186.0], [80.4, 186.0], [80.5, 186.0], [80.6, 186.0], [80.7, 186.0], [80.8, 186.0], [80.9, 186.0], [81.0, 187.0], [81.1, 187.0], [81.2, 187.0], [81.3, 187.0], [81.4, 187.0], [81.5, 187.0], [81.6, 187.0], [81.7, 187.0], [81.8, 187.0], [81.9, 187.0], [82.0, 190.0], [82.1, 190.0], [82.2, 190.0], [82.3, 190.0], [82.4, 190.0], [82.5, 190.0], [82.6, 190.0], [82.7, 190.0], [82.8, 190.0], [82.9, 190.0], [83.0, 194.0], [83.1, 194.0], [83.2, 194.0], [83.3, 194.0], [83.4, 194.0], [83.5, 194.0], [83.6, 194.0], [83.7, 194.0], [83.8, 194.0], [83.9, 194.0], [84.0, 195.0], [84.1, 195.0], [84.2, 195.0], [84.3, 195.0], [84.4, 195.0], [84.5, 195.0], [84.6, 195.0], [84.7, 195.0], [84.8, 195.0], [84.9, 195.0], [85.0, 197.0], [85.1, 197.0], [85.2, 197.0], [85.3, 197.0], [85.4, 197.0], [85.5, 197.0], [85.6, 197.0], [85.7, 197.0], [85.8, 197.0], [85.9, 197.0], [86.0, 202.0], [86.1, 202.0], [86.2, 202.0], [86.3, 202.0], [86.4, 202.0], [86.5, 202.0], [86.6, 202.0], [86.7, 202.0], [86.8, 202.0], [86.9, 202.0], [87.0, 205.0], [87.1, 205.0], [87.2, 205.0], [87.3, 205.0], [87.4, 205.0], [87.5, 205.0], [87.6, 205.0], [87.7, 205.0], [87.8, 205.0], [87.9, 205.0], [88.0, 211.0], [88.1, 211.0], [88.2, 211.0], [88.3, 211.0], [88.4, 211.0], [88.5, 211.0], [88.6, 211.0], [88.7, 211.0], [88.8, 211.0], [88.9, 211.0], [89.0, 214.0], [89.1, 214.0], [89.2, 214.0], [89.3, 214.0], [89.4, 214.0], [89.5, 214.0], [89.6, 214.0], [89.7, 214.0], [89.8, 214.0], [89.9, 214.0], [90.0, 217.0], [90.1, 217.0], [90.2, 217.0], [90.3, 217.0], [90.4, 217.0], [90.5, 217.0], [90.6, 217.0], [90.7, 217.0], [90.8, 217.0], [90.9, 217.0], [91.0, 225.0], [91.1, 225.0], [91.2, 225.0], [91.3, 225.0], [91.4, 225.0], [91.5, 225.0], [91.6, 225.0], [91.7, 225.0], [91.8, 225.0], [91.9, 225.0], [92.0, 232.0], [92.1, 232.0], [92.2, 232.0], [92.3, 232.0], [92.4, 232.0], [92.5, 232.0], [92.6, 232.0], [92.7, 232.0], [92.8, 232.0], [92.9, 232.0], [93.0, 232.0], [93.1, 232.0], [93.2, 232.0], [93.3, 232.0], [93.4, 232.0], [93.5, 232.0], [93.6, 232.0], [93.7, 232.0], [93.8, 232.0], [93.9, 232.0], [94.0, 256.0], [94.1, 256.0], [94.2, 256.0], [94.3, 256.0], [94.4, 256.0], [94.5, 256.0], [94.6, 256.0], [94.7, 256.0], [94.8, 256.0], [94.9, 256.0], [95.0, 261.0], [95.1, 261.0], [95.2, 261.0], [95.3, 261.0], [95.4, 261.0], [95.5, 261.0], [95.6, 261.0], [95.7, 261.0], [95.8, 261.0], [95.9, 261.0], [96.0, 292.0], [96.1, 292.0], [96.2, 292.0], [96.3, 292.0], [96.4, 292.0], [96.5, 292.0], [96.6, 292.0], [96.7, 292.0], [96.8, 292.0], [96.9, 292.0], [97.0, 296.0], [97.1, 296.0], [97.2, 296.0], [97.3, 296.0], [97.4, 296.0], [97.5, 296.0], [97.6, 296.0], [97.7, 296.0], [97.8, 296.0], [97.9, 296.0], [98.0, 300.0], [98.1, 300.0], [98.2, 300.0], [98.3, 300.0], [98.4, 300.0], [98.5, 300.0], [98.6, 300.0], [98.7, 300.0], [98.8, 300.0], [98.9, 300.0], [99.0, 334.0], [99.1, 334.0], [99.2, 334.0], [99.3, 334.0], [99.4, 334.0], [99.5, 334.0], [99.6, 334.0], [99.7, 334.0], [99.8, 334.0], [99.9, 334.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 11.0], [0.1, 13.0], [0.2, 15.0], [0.3, 15.0], [0.4, 16.0], [0.5, 17.0], [0.6, 17.0], [0.7, 17.0], [0.8, 18.0], [0.9, 18.0], [1.0, 18.0], [1.1, 19.0], [1.2, 19.0], [1.3, 19.0], [1.4, 20.0], [1.5, 20.0], [1.6, 20.0], [1.7, 20.0], [1.8, 20.0], [1.9, 21.0], [2.0, 21.0], [2.1, 21.0], [2.2, 21.0], [2.3, 21.0], [2.4, 21.0], [2.5, 22.0], [2.6, 22.0], [2.7, 22.0], [2.8, 22.0], [2.9, 22.0], [3.0, 22.0], [3.1, 23.0], [3.2, 23.0], [3.3, 23.0], [3.4, 23.0], [3.5, 23.0], [3.6, 23.0], [3.7, 23.0], [3.8, 24.0], [3.9, 24.0], [4.0, 24.0], [4.1, 24.0], [4.2, 24.0], [4.3, 25.0], [4.4, 25.0], [4.5, 25.0], [4.6, 25.0], [4.7, 25.0], [4.8, 25.0], [4.9, 25.0], [5.0, 26.0], [5.1, 26.0], [5.2, 26.0], [5.3, 26.0], [5.4, 26.0], [5.5, 26.0], [5.6, 27.0], [5.7, 27.0], [5.8, 27.0], [5.9, 27.0], [6.0, 27.0], [6.1, 28.0], [6.2, 28.0], [6.3, 28.0], [6.4, 28.0], [6.5, 28.0], [6.6, 29.0], [6.7, 29.0], [6.8, 29.0], [6.9, 29.0], [7.0, 29.0], [7.1, 29.0], [7.2, 30.0], [7.3, 30.0], [7.4, 30.0], [7.5, 30.0], [7.6, 30.0], [7.7, 30.0], [7.8, 31.0], [7.9, 31.0], [8.0, 31.0], [8.1, 31.0], [8.2, 31.0], [8.3, 32.0], [8.4, 32.0], [8.5, 32.0], [8.6, 32.0], [8.7, 33.0], [8.8, 33.0], [8.9, 33.0], [9.0, 33.0], [9.1, 33.0], [9.2, 34.0], [9.3, 34.0], [9.4, 34.0], [9.5, 34.0], [9.6, 35.0], [9.7, 35.0], [9.8, 35.0], [9.9, 36.0], [10.0, 36.0], [10.1, 37.0], [10.2, 37.0], [10.3, 38.0], [10.4, 38.0], [10.5, 38.0], [10.6, 39.0], [10.7, 39.0], [10.8, 40.0], [10.9, 41.0], [11.0, 41.0], [11.1, 42.0], [11.2, 43.0], [11.3, 44.0], [11.4, 45.0], [11.5, 46.0], [11.6, 47.0], [11.7, 47.0], [11.8, 48.0], [11.9, 49.0], [12.0, 50.0], [12.1, 51.0], [12.2, 52.0], [12.3, 54.0], [12.4, 55.0], [12.5, 57.0], [12.6, 60.0], [12.7, 63.0], [12.8, 65.0], [12.9, 67.0], [13.0, 72.0], [13.1, 77.0], [13.2, 84.0], [13.3, 96.0], [13.4, 102.0], [13.5, 111.0], [13.6, 128.0], [13.7, 146.0], [13.8, 157.0], [13.9, 175.0], [14.0, 194.0], [14.1, 211.0], [14.2, 231.0], [14.3, 242.0], [14.4, 256.0], [14.5, 271.0], [14.6, 286.0], [14.7, 301.0], [14.8, 313.0], [14.9, 319.0], [15.0, 323.0], [15.1, 330.0], [15.2, 336.0], [15.3, 341.0], [15.4, 352.0], [15.5, 359.0], [15.6, 364.0], [15.7, 371.0], [15.8, 378.0], [15.9, 387.0], [16.0, 390.0], [16.1, 395.0], [16.2, 403.0], [16.3, 407.0], [16.4, 412.0], [16.5, 416.0], [16.6, 419.0], [16.7, 423.0], [16.8, 427.0], [16.9, 431.0], [17.0, 435.0], [17.1, 439.0], [17.2, 443.0], [17.3, 447.0], [17.4, 452.0], [17.5, 453.0], [17.6, 459.0], [17.7, 460.0], [17.8, 463.0], [17.9, 467.0], [18.0, 469.0], [18.1, 472.0], [18.2, 477.0], [18.3, 480.0], [18.4, 485.0], [18.5, 487.0], [18.6, 491.0], [18.7, 493.0], [18.8, 496.0], [18.9, 499.0], [19.0, 505.0], [19.1, 506.0], [19.2, 509.0], [19.3, 511.0], [19.4, 514.0], [19.5, 516.0], [19.6, 521.0], [19.7, 523.0], [19.8, 527.0], [19.9, 530.0], [20.0, 533.0], [20.1, 536.0], [20.2, 538.0], [20.3, 542.0], [20.4, 543.0], [20.5, 547.0], [20.6, 550.0], [20.7, 552.0], [20.8, 554.0], [20.9, 556.0], [21.0, 558.0], [21.1, 561.0], [21.2, 565.0], [21.3, 567.0], [21.4, 569.0], [21.5, 572.0], [21.6, 575.0], [21.7, 577.0], [21.8, 579.0], [21.9, 580.0], [22.0, 583.0], [22.1, 585.0], [22.2, 587.0], [22.3, 589.0], [22.4, 591.0], [22.5, 593.0], [22.6, 595.0], [22.7, 598.0], [22.8, 599.0], [22.9, 602.0], [23.0, 604.0], [23.1, 606.0], [23.2, 608.0], [23.3, 610.0], [23.4, 612.0], [23.5, 614.0], [23.6, 616.0], [23.7, 617.0], [23.8, 620.0], [23.9, 622.0], [24.0, 626.0], [24.1, 627.0], [24.2, 629.0], [24.3, 632.0], [24.4, 633.0], [24.5, 635.0], [24.6, 637.0], [24.7, 639.0], [24.8, 640.0], [24.9, 642.0], [25.0, 644.0], [25.1, 646.0], [25.2, 648.0], [25.3, 650.0], [25.4, 652.0], [25.5, 654.0], [25.6, 656.0], [25.7, 658.0], [25.8, 660.0], [25.9, 661.0], [26.0, 662.0], [26.1, 664.0], [26.2, 665.0], [26.3, 667.0], [26.4, 668.0], [26.5, 669.0], [26.6, 672.0], [26.7, 673.0], [26.8, 674.0], [26.9, 676.0], [27.0, 678.0], [27.1, 680.0], [27.2, 682.0], [27.3, 684.0], [27.4, 685.0], [27.5, 686.0], [27.6, 687.0], [27.7, 690.0], [27.8, 692.0], [27.9, 693.0], [28.0, 696.0], [28.1, 698.0], [28.2, 699.0], [28.3, 700.0], [28.4, 703.0], [28.5, 705.0], [28.6, 708.0], [28.7, 711.0], [28.8, 712.0], [28.9, 714.0], [29.0, 716.0], [29.1, 717.0], [29.2, 720.0], [29.3, 721.0], [29.4, 724.0], [29.5, 726.0], [29.6, 727.0], [29.7, 728.0], [29.8, 729.0], [29.9, 730.0], [30.0, 732.0], [30.1, 735.0], [30.2, 737.0], [30.3, 739.0], [30.4, 741.0], [30.5, 743.0], [30.6, 744.0], [30.7, 745.0], [30.8, 747.0], [30.9, 749.0], [31.0, 749.0], [31.1, 751.0], [31.2, 753.0], [31.3, 754.0], [31.4, 756.0], [31.5, 758.0], [31.6, 759.0], [31.7, 760.0], [31.8, 763.0], [31.9, 764.0], [32.0, 766.0], [32.1, 768.0], [32.2, 769.0], [32.3, 770.0], [32.4, 771.0], [32.5, 773.0], [32.6, 775.0], [32.7, 776.0], [32.8, 778.0], [32.9, 778.0], [33.0, 780.0], [33.1, 780.0], [33.2, 783.0], [33.3, 785.0], [33.4, 787.0], [33.5, 788.0], [33.6, 790.0], [33.7, 791.0], [33.8, 793.0], [33.9, 795.0], [34.0, 796.0], [34.1, 797.0], [34.2, 798.0], [34.3, 799.0], [34.4, 800.0], [34.5, 802.0], [34.6, 803.0], [34.7, 804.0], [34.8, 806.0], [34.9, 807.0], [35.0, 810.0], [35.1, 811.0], [35.2, 812.0], [35.3, 814.0], [35.4, 816.0], [35.5, 817.0], [35.6, 819.0], [35.7, 821.0], [35.8, 822.0], [35.9, 823.0], [36.0, 824.0], [36.1, 825.0], [36.2, 827.0], [36.3, 828.0], [36.4, 830.0], [36.5, 831.0], [36.6, 833.0], [36.7, 834.0], [36.8, 836.0], [36.9, 838.0], [37.0, 840.0], [37.1, 843.0], [37.2, 844.0], [37.3, 844.0], [37.4, 846.0], [37.5, 848.0], [37.6, 849.0], [37.7, 851.0], [37.8, 852.0], [37.9, 853.0], [38.0, 854.0], [38.1, 855.0], [38.2, 857.0], [38.3, 859.0], [38.4, 861.0], [38.5, 861.0], [38.6, 863.0], [38.7, 865.0], [38.8, 865.0], [38.9, 867.0], [39.0, 868.0], [39.1, 870.0], [39.2, 872.0], [39.3, 873.0], [39.4, 874.0], [39.5, 875.0], [39.6, 877.0], [39.7, 878.0], [39.8, 879.0], [39.9, 883.0], [40.0, 884.0], [40.1, 885.0], [40.2, 886.0], [40.3, 888.0], [40.4, 890.0], [40.5, 891.0], [40.6, 892.0], [40.7, 894.0], [40.8, 895.0], [40.9, 896.0], [41.0, 897.0], [41.1, 898.0], [41.2, 900.0], [41.3, 901.0], [41.4, 903.0], [41.5, 904.0], [41.6, 906.0], [41.7, 907.0], [41.8, 908.0], [41.9, 910.0], [42.0, 911.0], [42.1, 912.0], [42.2, 914.0], [42.3, 914.0], [42.4, 915.0], [42.5, 917.0], [42.6, 918.0], [42.7, 920.0], [42.8, 923.0], [42.9, 924.0], [43.0, 926.0], [43.1, 927.0], [43.2, 929.0], [43.3, 931.0], [43.4, 933.0], [43.5, 934.0], [43.6, 936.0], [43.7, 938.0], [43.8, 940.0], [43.9, 941.0], [44.0, 943.0], [44.1, 945.0], [44.2, 946.0], [44.3, 947.0], [44.4, 948.0], [44.5, 950.0], [44.6, 952.0], [44.7, 953.0], [44.8, 955.0], [44.9, 957.0], [45.0, 959.0], [45.1, 960.0], [45.2, 962.0], [45.3, 962.0], [45.4, 964.0], [45.5, 965.0], [45.6, 967.0], [45.7, 968.0], [45.8, 969.0], [45.9, 970.0], [46.0, 972.0], [46.1, 974.0], [46.2, 975.0], [46.3, 976.0], [46.4, 977.0], [46.5, 978.0], [46.6, 980.0], [46.7, 981.0], [46.8, 982.0], [46.9, 983.0], [47.0, 984.0], [47.1, 985.0], [47.2, 987.0], [47.3, 988.0], [47.4, 990.0], [47.5, 991.0], [47.6, 992.0], [47.7, 993.0], [47.8, 995.0], [47.9, 997.0], [48.0, 998.0], [48.1, 998.0], [48.2, 999.0], [48.3, 1001.0], [48.4, 1003.0], [48.5, 1005.0], [48.6, 1006.0], [48.7, 1006.0], [48.8, 1007.0], [48.9, 1008.0], [49.0, 1009.0], [49.1, 1011.0], [49.2, 1012.0], [49.3, 1014.0], [49.4, 1015.0], [49.5, 1016.0], [49.6, 1018.0], [49.7, 1019.0], [49.8, 1021.0], [49.9, 1022.0], [50.0, 1023.0], [50.1, 1025.0], [50.2, 1026.0], [50.3, 1028.0], [50.4, 1029.0], [50.5, 1030.0], [50.6, 1031.0], [50.7, 1033.0], [50.8, 1035.0], [50.9, 1036.0], [51.0, 1038.0], [51.1, 1039.0], [51.2, 1042.0], [51.3, 1043.0], [51.4, 1044.0], [51.5, 1045.0], [51.6, 1047.0], [51.7, 1049.0], [51.8, 1050.0], [51.9, 1051.0], [52.0, 1053.0], [52.1, 1054.0], [52.2, 1055.0], [52.3, 1056.0], [52.4, 1057.0], [52.5, 1059.0], [52.6, 1060.0], [52.7, 1061.0], [52.8, 1063.0], [52.9, 1064.0], [53.0, 1066.0], [53.1, 1067.0], [53.2, 1069.0], [53.3, 1070.0], [53.4, 1071.0], [53.5, 1072.0], [53.6, 1073.0], [53.7, 1075.0], [53.8, 1076.0], [53.9, 1078.0], [54.0, 1079.0], [54.1, 1080.0], [54.2, 1082.0], [54.3, 1082.0], [54.4, 1085.0], [54.5, 1087.0], [54.6, 1088.0], [54.7, 1089.0], [54.8, 1090.0], [54.9, 1092.0], [55.0, 1093.0], [55.1, 1094.0], [55.2, 1095.0], [55.3, 1097.0], [55.4, 1099.0], [55.5, 1100.0], [55.6, 1101.0], [55.7, 1102.0], [55.8, 1103.0], [55.9, 1105.0], [56.0, 1105.0], [56.1, 1107.0], [56.2, 1109.0], [56.3, 1110.0], [56.4, 1112.0], [56.5, 1113.0], [56.6, 1115.0], [56.7, 1116.0], [56.8, 1118.0], [56.9, 1120.0], [57.0, 1121.0], [57.1, 1123.0], [57.2, 1124.0], [57.3, 1126.0], [57.4, 1127.0], [57.5, 1128.0], [57.6, 1129.0], [57.7, 1131.0], [57.8, 1133.0], [57.9, 1136.0], [58.0, 1137.0], [58.1, 1139.0], [58.2, 1140.0], [58.3, 1141.0], [58.4, 1143.0], [58.5, 1144.0], [58.6, 1145.0], [58.7, 1146.0], [58.8, 1147.0], [58.9, 1148.0], [59.0, 1150.0], [59.1, 1151.0], [59.2, 1153.0], [59.3, 1154.0], [59.4, 1156.0], [59.5, 1159.0], [59.6, 1160.0], [59.7, 1163.0], [59.8, 1164.0], [59.9, 1165.0], [60.0, 1165.0], [60.1, 1167.0], [60.2, 1169.0], [60.3, 1170.0], [60.4, 1172.0], [60.5, 1173.0], [60.6, 1175.0], [60.7, 1177.0], [60.8, 1178.0], [60.9, 1179.0], [61.0, 1180.0], [61.1, 1181.0], [61.2, 1183.0], [61.3, 1184.0], [61.4, 1185.0], [61.5, 1187.0], [61.6, 1188.0], [61.7, 1189.0], [61.8, 1191.0], [61.9, 1193.0], [62.0, 1194.0], [62.1, 1195.0], [62.2, 1197.0], [62.3, 1198.0], [62.4, 1199.0], [62.5, 1201.0], [62.6, 1203.0], [62.7, 1205.0], [62.8, 1206.0], [62.9, 1207.0], [63.0, 1208.0], [63.1, 1210.0], [63.2, 1213.0], [63.3, 1214.0], [63.4, 1217.0], [63.5, 1219.0], [63.6, 1221.0], [63.7, 1222.0], [63.8, 1224.0], [63.9, 1225.0], [64.0, 1227.0], [64.1, 1228.0], [64.2, 1231.0], [64.3, 1233.0], [64.4, 1235.0], [64.5, 1237.0], [64.6, 1238.0], [64.7, 1240.0], [64.8, 1241.0], [64.9, 1242.0], [65.0, 1244.0], [65.1, 1245.0], [65.2, 1247.0], [65.3, 1248.0], [65.4, 1249.0], [65.5, 1250.0], [65.6, 1252.0], [65.7, 1254.0], [65.8, 1255.0], [65.9, 1257.0], [66.0, 1258.0], [66.1, 1259.0], [66.2, 1261.0], [66.3, 1263.0], [66.4, 1264.0], [66.5, 1266.0], [66.6, 1268.0], [66.7, 1269.0], [66.8, 1270.0], [66.9, 1272.0], [67.0, 1274.0], [67.1, 1276.0], [67.2, 1277.0], [67.3, 1280.0], [67.4, 1281.0], [67.5, 1282.0], [67.6, 1284.0], [67.7, 1286.0], [67.8, 1287.0], [67.9, 1289.0], [68.0, 1290.0], [68.1, 1291.0], [68.2, 1294.0], [68.3, 1296.0], [68.4, 1298.0], [68.5, 1299.0], [68.6, 1301.0], [68.7, 1303.0], [68.8, 1305.0], [68.9, 1307.0], [69.0, 1308.0], [69.1, 1310.0], [69.2, 1311.0], [69.3, 1312.0], [69.4, 1314.0], [69.5, 1315.0], [69.6, 1318.0], [69.7, 1319.0], [69.8, 1321.0], [69.9, 1324.0], [70.0, 1326.0], [70.1, 1328.0], [70.2, 1329.0], [70.3, 1331.0], [70.4, 1333.0], [70.5, 1335.0], [70.6, 1337.0], [70.7, 1339.0], [70.8, 1341.0], [70.9, 1343.0], [71.0, 1344.0], [71.1, 1346.0], [71.2, 1349.0], [71.3, 1350.0], [71.4, 1352.0], [71.5, 1353.0], [71.6, 1355.0], [71.7, 1358.0], [71.8, 1359.0], [71.9, 1361.0], [72.0, 1363.0], [72.1, 1364.0], [72.2, 1366.0], [72.3, 1368.0], [72.4, 1369.0], [72.5, 1370.0], [72.6, 1372.0], [72.7, 1374.0], [72.8, 1377.0], [72.9, 1378.0], [73.0, 1379.0], [73.1, 1382.0], [73.2, 1384.0], [73.3, 1386.0], [73.4, 1387.0], [73.5, 1388.0], [73.6, 1390.0], [73.7, 1392.0], [73.8, 1393.0], [73.9, 1395.0], [74.0, 1397.0], [74.1, 1398.0], [74.2, 1399.0], [74.3, 1401.0], [74.4, 1403.0], [74.5, 1405.0], [74.6, 1407.0], [74.7, 1409.0], [74.8, 1411.0], [74.9, 1412.0], [75.0, 1414.0], [75.1, 1416.0], [75.2, 1419.0], [75.3, 1420.0], [75.4, 1422.0], [75.5, 1424.0], [75.6, 1426.0], [75.7, 1427.0], [75.8, 1429.0], [75.9, 1432.0], [76.0, 1434.0], [76.1, 1436.0], [76.2, 1438.0], [76.3, 1440.0], [76.4, 1443.0], [76.5, 1446.0], [76.6, 1448.0], [76.7, 1450.0], [76.8, 1452.0], [76.9, 1454.0], [77.0, 1455.0], [77.1, 1457.0], [77.2, 1459.0], [77.3, 1460.0], [77.4, 1462.0], [77.5, 1464.0], [77.6, 1466.0], [77.7, 1468.0], [77.8, 1471.0], [77.9, 1474.0], [78.0, 1477.0], [78.1, 1479.0], [78.2, 1481.0], [78.3, 1483.0], [78.4, 1485.0], [78.5, 1488.0], [78.6, 1490.0], [78.7, 1491.0], [78.8, 1493.0], [78.9, 1495.0], [79.0, 1497.0], [79.1, 1501.0], [79.2, 1502.0], [79.3, 1505.0], [79.4, 1506.0], [79.5, 1510.0], [79.6, 1512.0], [79.7, 1513.0], [79.8, 1516.0], [79.9, 1518.0], [80.0, 1520.0], [80.1, 1522.0], [80.2, 1525.0], [80.3, 1527.0], [80.4, 1529.0], [80.5, 1532.0], [80.6, 1534.0], [80.7, 1535.0], [80.8, 1537.0], [80.9, 1539.0], [81.0, 1541.0], [81.1, 1543.0], [81.2, 1546.0], [81.3, 1547.0], [81.4, 1551.0], [81.5, 1554.0], [81.6, 1555.0], [81.7, 1558.0], [81.8, 1562.0], [81.9, 1564.0], [82.0, 1567.0], [82.1, 1571.0], [82.2, 1574.0], [82.3, 1575.0], [82.4, 1578.0], [82.5, 1579.0], [82.6, 1582.0], [82.7, 1584.0], [82.8, 1586.0], [82.9, 1588.0], [83.0, 1593.0], [83.1, 1595.0], [83.2, 1596.0], [83.3, 1600.0], [83.4, 1602.0], [83.5, 1604.0], [83.6, 1607.0], [83.7, 1609.0], [83.8, 1613.0], [83.9, 1615.0], [84.0, 1616.0], [84.1, 1619.0], [84.2, 1622.0], [84.3, 1624.0], [84.4, 1629.0], [84.5, 1631.0], [84.6, 1631.0], [84.7, 1635.0], [84.8, 1637.0], [84.9, 1639.0], [85.0, 1642.0], [85.1, 1645.0], [85.2, 1650.0], [85.3, 1652.0], [85.4, 1654.0], [85.5, 1657.0], [85.6, 1659.0], [85.7, 1663.0], [85.8, 1666.0], [85.9, 1669.0], [86.0, 1671.0], [86.1, 1675.0], [86.2, 1678.0], [86.3, 1680.0], [86.4, 1683.0], [86.5, 1686.0], [86.6, 1691.0], [86.7, 1693.0], [86.8, 1695.0], [86.9, 1700.0], [87.0, 1702.0], [87.1, 1704.0], [87.2, 1707.0], [87.3, 1711.0], [87.4, 1715.0], [87.5, 1718.0], [87.6, 1723.0], [87.7, 1727.0], [87.8, 1730.0], [87.9, 1732.0], [88.0, 1735.0], [88.1, 1739.0], [88.2, 1742.0], [88.3, 1745.0], [88.4, 1749.0], [88.5, 1750.0], [88.6, 1754.0], [88.7, 1758.0], [88.8, 1761.0], [88.9, 1763.0], [89.0, 1767.0], [89.1, 1770.0], [89.2, 1772.0], [89.3, 1775.0], [89.4, 1779.0], [89.5, 1782.0], [89.6, 1785.0], [89.7, 1789.0], [89.8, 1793.0], [89.9, 1798.0], [90.0, 1802.0], [90.1, 1807.0], [90.2, 1813.0], [90.3, 1817.0], [90.4, 1821.0], [90.5, 1826.0], [90.6, 1829.0], [90.7, 1834.0], [90.8, 1837.0], [90.9, 1842.0], [91.0, 1844.0], [91.1, 1848.0], [91.2, 1853.0], [91.3, 1857.0], [91.4, 1861.0], [91.5, 1869.0], [91.6, 1874.0], [91.7, 1881.0], [91.8, 1883.0], [91.9, 1889.0], [92.0, 1893.0], [92.1, 1899.0], [92.2, 1903.0], [92.3, 1908.0], [92.4, 1912.0], [92.5, 1918.0], [92.6, 1923.0], [92.7, 1924.0], [92.8, 1930.0], [92.9, 1936.0], [93.0, 1944.0], [93.1, 1948.0], [93.2, 1953.0], [93.3, 1958.0], [93.4, 1963.0], [93.5, 1968.0], [93.6, 1972.0], [93.7, 1978.0], [93.8, 1982.0], [93.9, 1988.0], [94.0, 1993.0], [94.1, 1999.0], [94.2, 2007.0], [94.3, 2013.0], [94.4, 2018.0], [94.5, 2026.0], [94.6, 2035.0], [94.7, 2041.0], [94.8, 2048.0], [94.9, 2056.0], [95.0, 2065.0], [95.1, 2070.0], [95.2, 2075.0], [95.3, 2080.0], [95.4, 2086.0], [95.5, 2093.0], [95.6, 2104.0], [95.7, 2110.0], [95.8, 2115.0], [95.9, 2120.0], [96.0, 2131.0], [96.1, 2149.0], [96.2, 2155.0], [96.3, 2164.0], [96.4, 2168.0], [96.5, 2177.0], [96.6, 2186.0], [96.7, 2196.0], [96.8, 2205.0], [96.9, 2211.0], [97.0, 2224.0], [97.1, 2229.0], [97.2, 2239.0], [97.3, 2253.0], [97.4, 2261.0], [97.5, 2270.0], [97.6, 2283.0], [97.7, 2293.0], [97.8, 2306.0], [97.9, 2321.0], [98.0, 2332.0], [98.1, 2352.0], [98.2, 2362.0], [98.3, 2381.0], [98.4, 2398.0], [98.5, 2413.0], [98.6, 2443.0], [98.7, 2467.0], [98.8, 2490.0], [98.9, 2513.0], [99.0, 2534.0], [99.1, 2581.0], [99.2, 2604.0], [99.3, 2646.0], [99.4, 2701.0], [99.5, 2777.0], [99.6, 2833.0], [99.7, 2910.0], [99.8, 2975.0], [99.9, 3073.0], [100.0, 3396.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1338.0, "series": [{"data": [[0.0, 1312.0], [600.0, 528.0], [700.0, 612.0], [800.0, 682.0], [900.0, 687.0], [1000.0, 719.0], [1100.0, 707.0], [1200.0, 645.0], [1300.0, 556.0], [1400.0, 477.0], [1500.0, 386.0], [100.0, 44.0], [1600.0, 330.0], [1700.0, 300.0], [1800.0, 226.0], [1900.0, 208.0], [2000.0, 131.0], [2100.0, 112.0], [2200.0, 98.0], [2300.0, 66.0], [2400.0, 55.0], [2500.0, 46.0], [2600.0, 36.0], [2800.0, 12.0], [2700.0, 26.0], [2900.0, 8.0], [3000.0, 2.0], [3100.0, 3.0], [200.0, 84.0], [3300.0, 3.0], [3200.0, 4.0], [3400.0, 3.0], [3900.0, 1.0], [300.0, 175.0], [400.0, 320.0], [500.0, 396.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[300.0, 2.0], [200.0, 12.0], [100.0, 86.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1338.0], [600.0, 543.0], [700.0, 611.0], [800.0, 685.0], [900.0, 702.0], [1000.0, 721.0], [1100.0, 697.0], [1200.0, 612.0], [1300.0, 570.0], [1400.0, 483.0], [1500.0, 424.0], [100.0, 66.0], [1600.0, 360.0], [1700.0, 304.0], [1800.0, 219.0], [1900.0, 198.0], [2000.0, 144.0], [2100.0, 119.0], [2300.0, 64.0], [2200.0, 104.0], [2400.0, 44.0], [2500.0, 31.0], [2600.0, 23.0], [2700.0, 14.0], [2800.0, 16.0], [2900.0, 13.0], [3000.0, 9.0], [3100.0, 5.0], [200.0, 65.0], [3300.0, 3.0], [3200.0, 1.0], [300.0, 148.0], [400.0, 276.0], [500.0, 388.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3933.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 12025.0, "series": [{"data": [[0.0, 3933.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 12025.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4142.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 49.78899082568805, "minX": 1.58731458E12, "maxY": 100.0, "series": [{"data": [[1.58731458E12, 49.78899082568805], [1.58731506E12, 100.0], [1.58731488E12, 100.0], [1.58731494E12, 100.0], [1.58731476E12, 100.0], [1.58731482E12, 100.0], [1.58731464E12, 97.12462311557792], [1.58731512E12, 98.77184959349587], [1.5873147E12, 100.0], [1.58731518E12, 59.56406124093463], [1.587315E12, 100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58731518E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 22.0, "minX": 1.0, "maxY": 1458.0, "series": [{"data": [[4.0, 28.75], [7.0, 147.33333333333334], [8.0, 103.0], [9.0, 45.0], [10.0, 50.0], [11.0, 71.5], [12.0, 72.0], [13.0, 40.9], [14.0, 35.333333333333336], [15.0, 66.33333333333333], [16.0, 31.333333333333332], [17.0, 90.5], [18.0, 46.0], [19.0, 45.5], [20.0, 31.066666666666666], [21.0, 33.888888888888886], [22.0, 35.833333333333336], [23.0, 45.285714285714285], [24.0, 37.6], [25.0, 45.6], [26.0, 29.77777777777778], [27.0, 28.8125], [28.0, 36.8], [29.0, 39.4], [30.0, 51.57142857142857], [31.0, 35.54545454545455], [32.0, 45.4], [33.0, 32.090909090909086], [34.0, 29.785714285714285], [35.0, 30.999999999999993], [36.0, 33.666666666666664], [37.0, 50.875], [38.0, 28.466666666666665], [39.0, 29.857142857142854], [40.0, 38.0], [41.0, 29.416666666666668], [42.0, 29.142857142857142], [43.0, 31.944444444444446], [44.0, 43.57142857142857], [45.0, 25.319999999999997], [46.0, 31.558823529411764], [47.0, 32.125], [48.0, 39.27272727272727], [49.0, 40.04545454545455], [50.0, 29.9375], [51.0, 31.58333333333334], [52.0, 27.0], [53.0, 32.333333333333336], [54.0, 34.142857142857146], [55.0, 38.25], [56.0, 28.33333333333333], [57.0, 33.526315789473685], [58.0, 33.58620689655173], [59.0, 29.897959183673475], [60.0, 54.625], [61.0, 56.16666666666666], [62.0, 43.5], [63.0, 29.363636363636363], [64.0, 36.714285714285715], [65.0, 29.04347826086957], [66.0, 32.99999999999999], [67.0, 36.4], [68.0, 28.636363636363637], [69.0, 29.0], [70.0, 27.222222222222225], [71.0, 34.07142857142857], [72.0, 59.400000000000006], [73.0, 25.935483870967747], [74.0, 35.50000000000001], [75.0, 28.062499999999996], [76.0, 47.09090909090909], [77.0, 217.23529411764702], [78.0, 311.8333333333333], [79.0, 207.72727272727272], [80.0, 254.41666666666674], [81.0, 467.75], [82.0, 709.0769230769231], [83.0, 938.0967741935483], [84.0, 756.421052631579], [85.0, 838.4], [86.0, 1085.3809523809525], [87.0, 595.9374999999999], [88.0, 854.9166666666666], [89.0, 779.4193548387098], [90.0, 791.875], [91.0, 1034.3950617283951], [92.0, 917.5], [93.0, 708.0909090909092], [94.0, 1093.5], [95.0, 830.7368421052632], [96.0, 1034.7045454545455], [97.0, 845.4098360655735], [98.0, 1018.2222222222222], [99.0, 1187.4615384615386], [100.0, 1146.2470574387935], [1.0, 25.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[94.86839999999947, 1024.0765000000065]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 157.0], [3.0, 169.0], [4.0, 174.0], [5.0, 163.0], [6.0, 159.0], [7.0, 173.0], [8.0, 166.0], [9.0, 211.0], [10.0, 174.0], [11.0, 157.0], [12.0, 171.0], [13.0, 164.0], [14.0, 174.0], [15.0, 261.0], [16.0, 179.0], [17.0, 165.0], [18.0, 171.0], [19.0, 169.0], [20.0, 176.0], [21.0, 172.0], [22.0, 176.0], [23.0, 168.0], [24.0, 167.0], [25.0, 169.0], [26.0, 168.0], [27.0, 165.0], [28.0, 292.0], [29.0, 180.0], [30.0, 157.0], [31.0, 162.0], [32.0, 160.0], [33.0, 161.0], [34.0, 167.0], [35.0, 173.0], [36.0, 165.0], [37.0, 165.0], [38.0, 300.0], [39.0, 296.0], [40.0, 161.0], [41.0, 152.0], [42.0, 175.0], [43.0, 160.0], [44.0, 182.0], [45.0, 167.0], [46.0, 163.0], [47.0, 163.0], [48.0, 164.0], [49.0, 167.0], [50.0, 158.0], [51.0, 173.0], [52.0, 159.0], [53.0, 153.0], [54.0, 163.0], [55.0, 172.0], [56.0, 160.0], [57.0, 149.0], [58.0, 155.0], [59.0, 154.0], [60.0, 168.0], [61.0, 156.0], [62.0, 156.0], [63.0, 154.0], [64.0, 232.0], [65.0, 158.0], [66.0, 151.0], [67.0, 158.0], [68.0, 153.0], [69.0, 159.0], [70.0, 173.0], [71.0, 160.0], [72.0, 167.0], [73.0, 156.0], [74.0, 159.0], [75.0, 161.0], [76.0, 164.0], [77.0, 186.0], [78.0, 217.0], [79.0, 174.0], [80.0, 172.0], [81.0, 185.0], [82.0, 190.0], [83.0, 187.0], [84.0, 225.0], [85.0, 334.0], [86.0, 182.0], [87.0, 165.0], [88.0, 164.0], [89.0, 178.0], [90.0, 232.0], [91.0, 202.0], [92.0, 184.0], [93.0, 197.0], [94.0, 195.0], [95.0, 194.0], [96.0, 214.0], [97.0, 175.0], [98.0, 177.0], [99.0, 181.0], [100.0, 205.0], [1.0, 256.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[50.5, 179.0199999999999]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[5.0, 509.5], [6.0, 251.0], [7.0, 180.0], [8.0, 30.5], [9.0, 54.0], [10.0, 53.0], [11.0, 73.5], [12.0, 52.0], [13.0, 45.0], [14.0, 44.0], [15.0, 64.5], [16.0, 31.300000000000004], [17.0, 57.5], [18.0, 73.2], [19.0, 80.66666666666667], [20.0, 35.833333333333336], [21.0, 41.5], [22.0, 30.0625], [23.0, 38.25], [24.0, 60.16666666666667], [25.0, 47.2], [26.0, 39.0], [27.0, 36.49999999999999], [28.0, 33.875], [29.0, 42.333333333333336], [30.0, 36.142857142857146], [31.0, 42.18181818181818], [32.0, 40.666666666666664], [33.0, 33.666666666666664], [34.0, 28.75], [35.0, 43.55555555555556], [36.0, 37.72727272727273], [37.0, 60.0], [38.0, 30.176470588235293], [39.0, 40.0], [40.0, 52.79999999999999], [41.0, 30.875], [42.0, 29.384615384615387], [43.0, 29.699999999999996], [44.0, 46.199999999999996], [45.0, 28.130434782608692], [46.0, 31.933333333333326], [47.0, 42.07692307692307], [48.0, 47.0], [49.0, 33.76923076923077], [50.0, 29.714285714285722], [51.0, 30.3], [52.0, 29.1], [53.0, 36.875], [54.0, 41.42857142857143], [55.0, 38.63636363636364], [56.0, 28.818181818181817], [57.0, 36.117647058823536], [58.0, 33.925925925925945], [59.0, 30.039215686274503], [60.0, 53.81818181818182], [61.0, 41.0], [62.0, 42.16666666666667], [63.0, 36.42857142857142], [64.0, 31.22222222222222], [65.0, 31.309523809523803], [66.0, 29.857142857142858], [67.0, 51.41666666666667], [68.0, 33.565217391304344], [69.0, 35.76923076923077], [70.0, 29.764705882352953], [71.0, 44.3], [72.0, 62.66666666666667], [73.0, 30.958333333333332], [74.0, 37.33333333333333], [75.0, 29.037037037037035], [76.0, 44.07692307692307], [77.0, 165.84999999999997], [78.0, 254.2], [79.0, 367.45161290322585], [80.0, 314.8636363636364], [81.0, 572.5405405405405], [82.0, 767.6875], [83.0, 920.24], [84.0, 730.6153846153846], [85.0, 797.7826086956521], [86.0, 993.5294117647059], [87.0, 603.5238095238096], [88.0, 248.29411764705884], [89.0, 812.9999999999998], [90.0, 898.9999999999999], [91.0, 999.5866666666668], [92.0, 739.8181818181818], [93.0, 840.3823529411767], [94.0, 1126.0], [95.0, 1045.9047619047617], [96.0, 1045.9565217391303], [97.0, 854.4666666666667], [98.0, 1343.8947368421052], [99.0, 1458.0], [100.0, 1145.6965273690316], [1.0, 22.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[94.86890000000002, 1024.9289999999992]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6759.033333333334, "minX": 1.58731458E12, "maxY": 239399.81666666668, "series": [{"data": [[1.58731458E12, 106754.88333333333], [1.58731506E12, 233011.05], [1.58731488E12, 234866.95], [1.58731494E12, 233005.23333333334], [1.58731476E12, 225467.4], [1.58731482E12, 239399.81666666668], [1.58731464E12, 228786.63333333333], [1.58731512E12, 228484.91666666666], [1.5873147E12, 226289.36666666667], [1.58731518E12, 144029.85], [1.587315E12, 224080.95]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58731458E12, 6759.033333333334], [1.58731506E12, 14350.133333333333], [1.58731488E12, 14464.4], [1.58731494E12, 14350.233333333334], [1.58731476E12, 13885.366666666667], [1.58731482E12, 14743.233333333334], [1.58731464E12, 14148.033333333333], [1.58731512E12, 14071.233333333334], [1.5873147E12, 13935.2], [1.58731518E12, 8873.733333333334], [1.587315E12, 13799.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58731518E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 42.95881006864986, "minX": 1.58731458E12, "maxY": 1233.9030927835079, "series": [{"data": [[1.58731458E12, 42.95881006864986], [1.58731506E12, 1115.1063618290264], [1.58731488E12, 1065.1396039603953], [1.58731494E12, 1103.7333994053529], [1.58731476E12, 1205.459403905446], [1.58731482E12, 1073.9183673469404], [1.58731464E12, 1022.113149847094], [1.58731512E12, 1135.7857868020312], [1.5873147E12, 1233.9030927835079], [1.58731518E12, 204.09874608150471], [1.587315E12, 1230.9979209979213]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58731458E12, 173.5131578947368], [1.58731464E12, 196.45833333333331]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58731458E12, 50.50641025641029], [1.58731506E12, 1128.524475524475], [1.58731488E12, 1051.6673247778876], [1.58731494E12, 1108.3917835671339], [1.58731476E12, 1199.489164086688], [1.58731482E12, 1061.4162633107458], [1.58731464E12, 1057.4243654822317], [1.58731512E12, 1129.2624618514735], [1.5873147E12, 1229.556690500512], [1.58731518E12, 204.95522388059675], [1.587315E12, 1226.0185950413236]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58731518E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 42.40274599542335, "minX": 1.58731458E12, "maxY": 1233.6639175257721, "series": [{"data": [[1.58731458E12, 42.40274599542335], [1.58731506E12, 1114.8767395626242], [1.58731488E12, 1064.9099009901], [1.58731494E12, 1103.5123885034668], [1.58731476E12, 1205.2322713257968], [1.58731482E12, 1073.7424684159357], [1.58731464E12, 1021.8246687054028], [1.58731512E12, 1135.5878172588834], [1.5873147E12, 1233.6639175257721], [1.58731518E12, 203.82445141065878], [1.587315E12, 1230.8523908523903]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58731458E12, 173.40789473684217], [1.58731464E12, 196.45833333333331]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58731458E12, 49.86752136752138], [1.58731506E12, 1128.295704295703], [1.58731488E12, 1051.411648568609], [1.58731494E12, 1108.1212424849705], [1.58731476E12, 1199.286893704847], [1.58731482E12, 1061.1568247821888], [1.58731464E12, 1057.0568527918795], [1.58731512E12, 1129.1007121057999], [1.5873147E12, 1229.2788559754845], [1.58731518E12, 204.62023217247102], [1.587315E12, 1225.8119834710744]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58731518E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.06426332288401264, "minX": 1.58731458E12, "maxY": 0.8552631578947371, "series": [{"data": [[1.58731458E12, 0.10983981693363856], [1.58731506E12, 0.30019880715705777], [1.58731488E12, 0.2366336633663365], [1.58731494E12, 0.333994053518335], [1.58731476E12, 0.3340184994861257], [1.58731482E12, 0.30029154518950363], [1.58731464E12, 0.3333333333333335], [1.58731512E12, 0.3076142131979697], [1.5873147E12, 0.36907216494845374], [1.58731518E12, 0.06426332288401264], [1.587315E12, 0.31185031185031153]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58731458E12, 0.8552631578947371], [1.58731464E12, 0.41666666666666663]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58731458E12, 0.5213675213675217], [1.58731506E12, 0.3926073926073925], [1.58731488E12, 0.41362290227048426], [1.58731494E12, 0.4188376753507014], [1.58731476E12, 0.4571723426212587], [1.58731482E12, 0.41045498547918696], [1.58731464E12, 0.4883248730964468], [1.58731512E12, 0.39877924720244173], [1.5873147E12, 0.43411644535240035], [1.58731518E12, 0.4129353233830848], [1.587315E12, 0.42458677685950413]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58731518E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 11.0, "minX": 1.58731458E12, "maxY": 3996.0, "series": [{"data": [[1.58731458E12, 1020.0], [1.58731506E12, 3396.0], [1.58731488E12, 3351.0], [1.58731494E12, 3043.0], [1.58731476E12, 3445.0], [1.58731482E12, 3395.0], [1.58731464E12, 3127.0], [1.58731512E12, 3485.0], [1.5873147E12, 3425.0], [1.58731518E12, 2517.0], [1.587315E12, 3996.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58731458E12, 16.0], [1.58731506E12, 42.0], [1.58731488E12, 11.0], [1.58731494E12, 11.0], [1.58731476E12, 21.0], [1.58731482E12, 13.0], [1.58731464E12, 15.0], [1.58731512E12, 21.0], [1.5873147E12, 37.0], [1.58731518E12, 12.0], [1.587315E12, 51.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58731458E12, 107.80000000000041], [1.58731506E12, 1798.2], [1.58731488E12, 1994.0], [1.58731494E12, 1788.0], [1.58731476E12, 1828.7], [1.58731482E12, 1781.7], [1.58731464E12, 1700.9], [1.58731512E12, 1831.6000000000008], [1.5873147E12, 1930.0], [1.58731518E12, 905.5999999999997], [1.587315E12, 2005.8000000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58731458E12, 220.5199999999993], [1.58731506E12, 2518.5200000000023], [1.58731488E12, 2716.5999999999995], [1.58731494E12, 2459.76], [1.58731476E12, 2640.2699999999995], [1.58731482E12, 2464.0], [1.58731464E12, 2394.2699999999995], [1.58731512E12, 2503.0299999999993], [1.5873147E12, 2670.5], [1.58731518E12, 1630.0], [1.587315E12, 2799.2100000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58731458E12, 163.89999999999998], [1.58731506E12, 2044.1999999999998], [1.58731488E12, 2257.3999999999996], [1.58731494E12, 2032.6], [1.58731476E12, 2095.5499999999997], [1.58731482E12, 2017.85], [1.58731464E12, 1907.0], [1.58731512E12, 2076.75], [1.5873147E12, 2249.0], [1.58731518E12, 1197.6999999999996], [1.587315E12, 2241.9999999999964]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58731518E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 20.0, "minX": 1.0, "maxY": 1233.5, "series": [{"data": [[2.0, 206.5], [3.0, 28.0], [4.0, 20.0], [5.0, 166.0], [6.0, 52.0], [7.0, 41.5], [9.0, 28.0], [10.0, 43.0], [11.0, 27.0], [12.0, 64.5], [13.0, 40.0], [14.0, 42.5], [15.0, 24.5], [16.0, 30.0], [17.0, 1094.0], [18.0, 81.0], [19.0, 993.0], [20.0, 950.5], [21.0, 981.5], [22.0, 833.5], [23.0, 817.0], [24.0, 1233.5], [25.0, 1065.5], [26.0, 993.0], [27.0, 1078.5], [28.0, 1118.0], [29.0, 1072.0], [30.0, 1003.5], [31.0, 1082.0], [33.0, 1184.5], [32.0, 1104.0], [34.0, 1108.0], [35.0, 1006.0], [37.0, 1063.0], [36.0, 1071.0], [38.0, 986.0], [39.0, 1137.0], [40.0, 972.0], [41.0, 1038.0], [43.0, 975.0], [42.0, 1155.0], [44.0, 1046.5], [45.0, 1066.0], [46.0, 687.5], [47.0, 879.5], [48.0, 959.0], [49.0, 167.5], [50.0, 160.0], [51.0, 1104.0], [52.0, 736.5], [53.0, 1000.0], [54.0, 24.0], [56.0, 29.0], [57.0, 24.0], [59.0, 26.0], [61.0, 23.0], [62.0, 228.5], [70.0, 234.5], [1.0, 25.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 70.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 19.5, "minX": 1.0, "maxY": 1233.5, "series": [{"data": [[2.0, 205.0], [3.0, 27.0], [4.0, 19.5], [5.0, 166.0], [6.0, 52.0], [7.0, 41.0], [9.0, 27.5], [10.0, 43.0], [11.0, 27.0], [12.0, 64.5], [13.0, 40.0], [14.0, 41.5], [15.0, 24.5], [16.0, 30.0], [17.0, 1091.5], [18.0, 79.5], [19.0, 993.0], [20.0, 950.5], [21.0, 981.5], [22.0, 833.5], [23.0, 817.0], [24.0, 1233.5], [25.0, 1065.5], [26.0, 992.5], [27.0, 1077.5], [28.0, 1118.0], [29.0, 1071.0], [30.0, 1003.5], [31.0, 1082.0], [33.0, 1183.5], [32.0, 1104.0], [34.0, 1107.0], [35.0, 1006.0], [37.0, 1063.0], [36.0, 1071.0], [38.0, 985.5], [39.0, 1137.0], [40.0, 970.0], [41.0, 1038.0], [43.0, 975.0], [42.0, 1155.0], [44.0, 1046.0], [45.0, 1066.0], [46.0, 687.5], [47.0, 879.5], [48.0, 959.0], [49.0, 165.5], [50.0, 159.5], [51.0, 1104.0], [52.0, 736.5], [53.0, 1000.0], [54.0, 23.5], [56.0, 28.0], [57.0, 23.0], [59.0, 25.0], [61.0, 23.0], [62.0, 228.5], [70.0, 234.5], [1.0, 25.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 70.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.35, "minX": 1.58731458E12, "maxY": 34.38333333333333, "series": [{"data": [[1.58731458E12, 16.35], [1.58731506E12, 33.5], [1.58731488E12, 34.38333333333333], [1.58731494E12, 33.483333333333334], [1.58731476E12, 32.46666666666667], [1.58731482E12, 33.75], [1.58731464E12, 34.0], [1.58731512E12, 32.766666666666666], [1.5873147E12, 32.18333333333333], [1.58731518E12, 20.083333333333332], [1.587315E12, 32.03333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58731518E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.35, "minX": 1.58731458E12, "maxY": 34.36666666666667, "series": [{"data": [[1.58731458E12, 16.35], [1.58731506E12, 33.45], [1.58731488E12, 33.71666666666667], [1.58731494E12, 33.45], [1.58731476E12, 32.36666666666667], [1.58731482E12, 34.36666666666667], [1.58731464E12, 33.166666666666664], [1.58731512E12, 32.8], [1.5873147E12, 32.483333333333334], [1.58731518E12, 20.683333333333334], [1.587315E12, 32.166666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58731518E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.58731458E12, "maxY": 17.216666666666665, "series": [{"data": [[1.58731458E12, 1.2666666666666666], [1.58731464E12, 0.4]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58731458E12, 7.283333333333333], [1.58731506E12, 16.766666666666666], [1.58731488E12, 16.833333333333332], [1.58731494E12, 16.816666666666666], [1.58731476E12, 16.216666666666665], [1.58731482E12, 17.15], [1.58731464E12, 16.35], [1.58731512E12, 16.416666666666668], [1.5873147E12, 16.166666666666668], [1.58731518E12, 10.633333333333333], [1.587315E12, 16.033333333333335]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58731458E12, 7.8], [1.58731506E12, 16.683333333333334], [1.58731488E12, 16.883333333333333], [1.58731494E12, 16.633333333333333], [1.58731476E12, 16.15], [1.58731482E12, 17.216666666666665], [1.58731464E12, 16.416666666666668], [1.58731512E12, 16.383333333333333], [1.5873147E12, 16.316666666666666], [1.58731518E12, 10.05], [1.587315E12, 16.133333333333333]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58731518E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.35, "minX": 1.58731458E12, "maxY": 34.36666666666667, "series": [{"data": [[1.58731458E12, 16.35], [1.58731506E12, 33.45], [1.58731488E12, 33.71666666666667], [1.58731494E12, 33.45], [1.58731476E12, 32.36666666666667], [1.58731482E12, 34.36666666666667], [1.58731464E12, 33.166666666666664], [1.58731512E12, 32.8], [1.5873147E12, 32.483333333333334], [1.58731518E12, 20.683333333333334], [1.587315E12, 32.166666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58731518E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

