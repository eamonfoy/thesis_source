/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "maxY": 3584.0, "series": [{"data": [[0.0, 10.0], [0.1, 15.0], [0.2, 15.0], [0.3, 16.0], [0.4, 16.0], [0.5, 17.0], [0.6, 17.0], [0.7, 18.0], [0.8, 18.0], [0.9, 18.0], [1.0, 19.0], [1.1, 19.0], [1.2, 19.0], [1.3, 19.0], [1.4, 20.0], [1.5, 20.0], [1.6, 20.0], [1.7, 20.0], [1.8, 20.0], [1.9, 21.0], [2.0, 21.0], [2.1, 21.0], [2.2, 21.0], [2.3, 22.0], [2.4, 22.0], [2.5, 22.0], [2.6, 22.0], [2.7, 22.0], [2.8, 23.0], [2.9, 23.0], [3.0, 23.0], [3.1, 23.0], [3.2, 23.0], [3.3, 24.0], [3.4, 24.0], [3.5, 24.0], [3.6, 24.0], [3.7, 25.0], [3.8, 25.0], [3.9, 25.0], [4.0, 25.0], [4.1, 25.0], [4.2, 26.0], [4.3, 26.0], [4.4, 26.0], [4.5, 26.0], [4.6, 26.0], [4.7, 27.0], [4.8, 27.0], [4.9, 27.0], [5.0, 27.0], [5.1, 27.0], [5.2, 28.0], [5.3, 28.0], [5.4, 28.0], [5.5, 28.0], [5.6, 28.0], [5.7, 28.0], [5.8, 29.0], [5.9, 29.0], [6.0, 29.0], [6.1, 29.0], [6.2, 30.0], [6.3, 30.0], [6.4, 30.0], [6.5, 31.0], [6.6, 31.0], [6.7, 31.0], [6.8, 32.0], [6.9, 32.0], [7.0, 32.0], [7.1, 33.0], [7.2, 33.0], [7.3, 33.0], [7.4, 34.0], [7.5, 34.0], [7.6, 34.0], [7.7, 34.0], [7.8, 35.0], [7.9, 35.0], [8.0, 35.0], [8.1, 36.0], [8.2, 36.0], [8.3, 37.0], [8.4, 37.0], [8.5, 37.0], [8.6, 38.0], [8.7, 38.0], [8.8, 39.0], [8.9, 39.0], [9.0, 40.0], [9.1, 41.0], [9.2, 41.0], [9.3, 42.0], [9.4, 42.0], [9.5, 43.0], [9.6, 44.0], [9.7, 46.0], [9.8, 47.0], [9.9, 49.0], [10.0, 51.0], [10.1, 52.0], [10.2, 54.0], [10.3, 56.0], [10.4, 62.0], [10.5, 66.0], [10.6, 78.0], [10.7, 89.0], [10.8, 107.0], [10.9, 126.0], [11.0, 144.0], [11.1, 169.0], [11.2, 183.0], [11.3, 205.0], [11.4, 227.0], [11.5, 236.0], [11.6, 248.0], [11.7, 263.0], [11.8, 274.0], [11.9, 283.0], [12.0, 294.0], [12.1, 309.0], [12.2, 315.0], [12.3, 321.0], [12.4, 326.0], [12.5, 332.0], [12.6, 338.0], [12.7, 346.0], [12.8, 353.0], [12.9, 358.0], [13.0, 366.0], [13.1, 372.0], [13.2, 379.0], [13.3, 386.0], [13.4, 392.0], [13.5, 398.0], [13.6, 404.0], [13.7, 407.0], [13.8, 411.0], [13.9, 417.0], [14.0, 419.0], [14.1, 421.0], [14.2, 424.0], [14.3, 430.0], [14.4, 434.0], [14.5, 439.0], [14.6, 443.0], [14.7, 447.0], [14.8, 454.0], [14.9, 458.0], [15.0, 461.0], [15.1, 463.0], [15.2, 467.0], [15.3, 471.0], [15.4, 474.0], [15.5, 475.0], [15.6, 477.0], [15.7, 482.0], [15.8, 484.0], [15.9, 487.0], [16.0, 490.0], [16.1, 495.0], [16.2, 499.0], [16.3, 501.0], [16.4, 504.0], [16.5, 505.0], [16.6, 508.0], [16.7, 512.0], [16.8, 516.0], [16.9, 518.0], [17.0, 520.0], [17.1, 523.0], [17.2, 527.0], [17.3, 530.0], [17.4, 533.0], [17.5, 535.0], [17.6, 538.0], [17.7, 541.0], [17.8, 542.0], [17.9, 544.0], [18.0, 547.0], [18.1, 549.0], [18.2, 552.0], [18.3, 554.0], [18.4, 557.0], [18.5, 561.0], [18.6, 562.0], [18.7, 566.0], [18.8, 567.0], [18.9, 569.0], [19.0, 572.0], [19.1, 573.0], [19.2, 574.0], [19.3, 577.0], [19.4, 578.0], [19.5, 580.0], [19.6, 583.0], [19.7, 587.0], [19.8, 589.0], [19.9, 592.0], [20.0, 594.0], [20.1, 596.0], [20.2, 598.0], [20.3, 600.0], [20.4, 601.0], [20.5, 603.0], [20.6, 605.0], [20.7, 608.0], [20.8, 609.0], [20.9, 612.0], [21.0, 614.0], [21.1, 616.0], [21.2, 619.0], [21.3, 621.0], [21.4, 623.0], [21.5, 626.0], [21.6, 628.0], [21.7, 629.0], [21.8, 631.0], [21.9, 634.0], [22.0, 637.0], [22.1, 639.0], [22.2, 640.0], [22.3, 642.0], [22.4, 644.0], [22.5, 646.0], [22.6, 647.0], [22.7, 650.0], [22.8, 652.0], [22.9, 655.0], [23.0, 656.0], [23.1, 658.0], [23.2, 660.0], [23.3, 661.0], [23.4, 663.0], [23.5, 665.0], [23.6, 667.0], [23.7, 669.0], [23.8, 670.0], [23.9, 672.0], [24.0, 673.0], [24.1, 674.0], [24.2, 676.0], [24.3, 678.0], [24.4, 680.0], [24.5, 681.0], [24.6, 684.0], [24.7, 686.0], [24.8, 687.0], [24.9, 689.0], [25.0, 691.0], [25.1, 693.0], [25.2, 695.0], [25.3, 697.0], [25.4, 698.0], [25.5, 700.0], [25.6, 702.0], [25.7, 705.0], [25.8, 707.0], [25.9, 708.0], [26.0, 709.0], [26.1, 711.0], [26.2, 713.0], [26.3, 715.0], [26.4, 716.0], [26.5, 718.0], [26.6, 719.0], [26.7, 720.0], [26.8, 721.0], [26.9, 723.0], [27.0, 725.0], [27.1, 727.0], [27.2, 729.0], [27.3, 730.0], [27.4, 733.0], [27.5, 734.0], [27.6, 737.0], [27.7, 738.0], [27.8, 740.0], [27.9, 741.0], [28.0, 744.0], [28.1, 745.0], [28.2, 746.0], [28.3, 748.0], [28.4, 749.0], [28.5, 751.0], [28.6, 752.0], [28.7, 754.0], [28.8, 756.0], [28.9, 757.0], [29.0, 759.0], [29.1, 759.0], [29.2, 760.0], [29.3, 761.0], [29.4, 762.0], [29.5, 764.0], [29.6, 765.0], [29.7, 767.0], [29.8, 769.0], [29.9, 770.0], [30.0, 772.0], [30.1, 774.0], [30.2, 775.0], [30.3, 776.0], [30.4, 778.0], [30.5, 779.0], [30.6, 782.0], [30.7, 783.0], [30.8, 784.0], [30.9, 786.0], [31.0, 788.0], [31.1, 789.0], [31.2, 789.0], [31.3, 791.0], [31.4, 792.0], [31.5, 794.0], [31.6, 795.0], [31.7, 797.0], [31.8, 799.0], [31.9, 801.0], [32.0, 802.0], [32.1, 803.0], [32.2, 805.0], [32.3, 806.0], [32.4, 807.0], [32.5, 808.0], [32.6, 810.0], [32.7, 812.0], [32.8, 813.0], [32.9, 816.0], [33.0, 817.0], [33.1, 818.0], [33.2, 821.0], [33.3, 821.0], [33.4, 823.0], [33.5, 824.0], [33.6, 825.0], [33.7, 827.0], [33.8, 828.0], [33.9, 830.0], [34.0, 831.0], [34.1, 833.0], [34.2, 835.0], [34.3, 837.0], [34.4, 839.0], [34.5, 841.0], [34.6, 843.0], [34.7, 845.0], [34.8, 846.0], [34.9, 848.0], [35.0, 850.0], [35.1, 851.0], [35.2, 852.0], [35.3, 854.0], [35.4, 856.0], [35.5, 857.0], [35.6, 859.0], [35.7, 861.0], [35.8, 862.0], [35.9, 864.0], [36.0, 865.0], [36.1, 866.0], [36.2, 867.0], [36.3, 869.0], [36.4, 870.0], [36.5, 872.0], [36.6, 874.0], [36.7, 875.0], [36.8, 877.0], [36.9, 878.0], [37.0, 879.0], [37.1, 880.0], [37.2, 881.0], [37.3, 882.0], [37.4, 882.0], [37.5, 884.0], [37.6, 885.0], [37.7, 887.0], [37.8, 887.0], [37.9, 888.0], [38.0, 889.0], [38.1, 890.0], [38.2, 892.0], [38.3, 893.0], [38.4, 894.0], [38.5, 895.0], [38.6, 897.0], [38.7, 899.0], [38.8, 901.0], [38.9, 903.0], [39.0, 905.0], [39.1, 906.0], [39.2, 906.0], [39.3, 908.0], [39.4, 911.0], [39.5, 912.0], [39.6, 913.0], [39.7, 915.0], [39.8, 916.0], [39.9, 916.0], [40.0, 917.0], [40.1, 918.0], [40.2, 919.0], [40.3, 920.0], [40.4, 922.0], [40.5, 924.0], [40.6, 925.0], [40.7, 926.0], [40.8, 928.0], [40.9, 929.0], [41.0, 931.0], [41.1, 932.0], [41.2, 934.0], [41.3, 937.0], [41.4, 938.0], [41.5, 939.0], [41.6, 940.0], [41.7, 941.0], [41.8, 943.0], [41.9, 945.0], [42.0, 946.0], [42.1, 947.0], [42.2, 949.0], [42.3, 950.0], [42.4, 951.0], [42.5, 952.0], [42.6, 954.0], [42.7, 955.0], [42.8, 956.0], [42.9, 956.0], [43.0, 958.0], [43.1, 958.0], [43.2, 960.0], [43.3, 961.0], [43.4, 962.0], [43.5, 964.0], [43.6, 965.0], [43.7, 967.0], [43.8, 968.0], [43.9, 970.0], [44.0, 972.0], [44.1, 974.0], [44.2, 975.0], [44.3, 976.0], [44.4, 977.0], [44.5, 979.0], [44.6, 980.0], [44.7, 982.0], [44.8, 983.0], [44.9, 984.0], [45.0, 985.0], [45.1, 987.0], [45.2, 988.0], [45.3, 990.0], [45.4, 991.0], [45.5, 992.0], [45.6, 993.0], [45.7, 995.0], [45.8, 996.0], [45.9, 997.0], [46.0, 998.0], [46.1, 1000.0], [46.2, 1001.0], [46.3, 1002.0], [46.4, 1003.0], [46.5, 1005.0], [46.6, 1007.0], [46.7, 1008.0], [46.8, 1010.0], [46.9, 1011.0], [47.0, 1012.0], [47.1, 1014.0], [47.2, 1015.0], [47.3, 1016.0], [47.4, 1017.0], [47.5, 1019.0], [47.6, 1020.0], [47.7, 1022.0], [47.8, 1023.0], [47.9, 1025.0], [48.0, 1026.0], [48.1, 1028.0], [48.2, 1030.0], [48.3, 1031.0], [48.4, 1032.0], [48.5, 1033.0], [48.6, 1035.0], [48.7, 1037.0], [48.8, 1038.0], [48.9, 1039.0], [49.0, 1040.0], [49.1, 1042.0], [49.2, 1043.0], [49.3, 1044.0], [49.4, 1045.0], [49.5, 1047.0], [49.6, 1048.0], [49.7, 1051.0], [49.8, 1052.0], [49.9, 1054.0], [50.0, 1055.0], [50.1, 1056.0], [50.2, 1058.0], [50.3, 1059.0], [50.4, 1060.0], [50.5, 1061.0], [50.6, 1063.0], [50.7, 1063.0], [50.8, 1064.0], [50.9, 1066.0], [51.0, 1067.0], [51.1, 1068.0], [51.2, 1070.0], [51.3, 1072.0], [51.4, 1073.0], [51.5, 1074.0], [51.6, 1075.0], [51.7, 1077.0], [51.8, 1079.0], [51.9, 1080.0], [52.0, 1081.0], [52.1, 1083.0], [52.2, 1084.0], [52.3, 1085.0], [52.4, 1087.0], [52.5, 1088.0], [52.6, 1089.0], [52.7, 1091.0], [52.8, 1093.0], [52.9, 1095.0], [53.0, 1096.0], [53.1, 1097.0], [53.2, 1098.0], [53.3, 1099.0], [53.4, 1101.0], [53.5, 1102.0], [53.6, 1103.0], [53.7, 1105.0], [53.8, 1106.0], [53.9, 1107.0], [54.0, 1109.0], [54.1, 1110.0], [54.2, 1111.0], [54.3, 1113.0], [54.4, 1114.0], [54.5, 1116.0], [54.6, 1116.0], [54.7, 1117.0], [54.8, 1119.0], [54.9, 1120.0], [55.0, 1121.0], [55.1, 1122.0], [55.2, 1124.0], [55.3, 1126.0], [55.4, 1127.0], [55.5, 1129.0], [55.6, 1130.0], [55.7, 1131.0], [55.8, 1133.0], [55.9, 1135.0], [56.0, 1136.0], [56.1, 1138.0], [56.2, 1139.0], [56.3, 1140.0], [56.4, 1143.0], [56.5, 1145.0], [56.6, 1146.0], [56.7, 1147.0], [56.8, 1149.0], [56.9, 1150.0], [57.0, 1151.0], [57.1, 1154.0], [57.2, 1155.0], [57.3, 1157.0], [57.4, 1159.0], [57.5, 1162.0], [57.6, 1163.0], [57.7, 1165.0], [57.8, 1166.0], [57.9, 1168.0], [58.0, 1169.0], [58.1, 1170.0], [58.2, 1171.0], [58.3, 1172.0], [58.4, 1174.0], [58.5, 1175.0], [58.6, 1177.0], [58.7, 1178.0], [58.8, 1180.0], [58.9, 1181.0], [59.0, 1182.0], [59.1, 1184.0], [59.2, 1186.0], [59.3, 1186.0], [59.4, 1188.0], [59.5, 1189.0], [59.6, 1191.0], [59.7, 1192.0], [59.8, 1193.0], [59.9, 1195.0], [60.0, 1196.0], [60.1, 1197.0], [60.2, 1199.0], [60.3, 1200.0], [60.4, 1202.0], [60.5, 1203.0], [60.6, 1205.0], [60.7, 1208.0], [60.8, 1209.0], [60.9, 1210.0], [61.0, 1211.0], [61.1, 1213.0], [61.2, 1215.0], [61.3, 1216.0], [61.4, 1218.0], [61.5, 1220.0], [61.6, 1222.0], [61.7, 1224.0], [61.8, 1226.0], [61.9, 1228.0], [62.0, 1229.0], [62.1, 1231.0], [62.2, 1233.0], [62.3, 1235.0], [62.4, 1237.0], [62.5, 1239.0], [62.6, 1241.0], [62.7, 1243.0], [62.8, 1244.0], [62.9, 1247.0], [63.0, 1248.0], [63.1, 1251.0], [63.2, 1252.0], [63.3, 1253.0], [63.4, 1255.0], [63.5, 1256.0], [63.6, 1258.0], [63.7, 1259.0], [63.8, 1262.0], [63.9, 1264.0], [64.0, 1266.0], [64.1, 1267.0], [64.2, 1269.0], [64.3, 1270.0], [64.4, 1272.0], [64.5, 1273.0], [64.6, 1275.0], [64.7, 1276.0], [64.8, 1277.0], [64.9, 1280.0], [65.0, 1281.0], [65.1, 1283.0], [65.2, 1284.0], [65.3, 1285.0], [65.4, 1286.0], [65.5, 1288.0], [65.6, 1289.0], [65.7, 1290.0], [65.8, 1293.0], [65.9, 1295.0], [66.0, 1297.0], [66.1, 1298.0], [66.2, 1299.0], [66.3, 1300.0], [66.4, 1302.0], [66.5, 1303.0], [66.6, 1305.0], [66.7, 1306.0], [66.8, 1308.0], [66.9, 1311.0], [67.0, 1313.0], [67.1, 1313.0], [67.2, 1314.0], [67.3, 1315.0], [67.4, 1317.0], [67.5, 1319.0], [67.6, 1322.0], [67.7, 1323.0], [67.8, 1326.0], [67.9, 1328.0], [68.0, 1329.0], [68.1, 1331.0], [68.2, 1331.0], [68.3, 1333.0], [68.4, 1335.0], [68.5, 1337.0], [68.6, 1338.0], [68.7, 1340.0], [68.8, 1342.0], [68.9, 1343.0], [69.0, 1345.0], [69.1, 1347.0], [69.2, 1349.0], [69.3, 1350.0], [69.4, 1352.0], [69.5, 1353.0], [69.6, 1356.0], [69.7, 1358.0], [69.8, 1361.0], [69.9, 1362.0], [70.0, 1364.0], [70.1, 1366.0], [70.2, 1368.0], [70.3, 1369.0], [70.4, 1372.0], [70.5, 1374.0], [70.6, 1376.0], [70.7, 1378.0], [70.8, 1379.0], [70.9, 1381.0], [71.0, 1383.0], [71.1, 1387.0], [71.2, 1389.0], [71.3, 1390.0], [71.4, 1391.0], [71.5, 1394.0], [71.6, 1396.0], [71.7, 1397.0], [71.8, 1400.0], [71.9, 1403.0], [72.0, 1404.0], [72.1, 1405.0], [72.2, 1408.0], [72.3, 1409.0], [72.4, 1411.0], [72.5, 1413.0], [72.6, 1414.0], [72.7, 1418.0], [72.8, 1419.0], [72.9, 1420.0], [73.0, 1421.0], [73.1, 1423.0], [73.2, 1425.0], [73.3, 1427.0], [73.4, 1430.0], [73.5, 1432.0], [73.6, 1434.0], [73.7, 1435.0], [73.8, 1437.0], [73.9, 1440.0], [74.0, 1441.0], [74.1, 1444.0], [74.2, 1446.0], [74.3, 1448.0], [74.4, 1450.0], [74.5, 1451.0], [74.6, 1452.0], [74.7, 1454.0], [74.8, 1455.0], [74.9, 1456.0], [75.0, 1458.0], [75.1, 1461.0], [75.2, 1463.0], [75.3, 1466.0], [75.4, 1468.0], [75.5, 1470.0], [75.6, 1473.0], [75.7, 1475.0], [75.8, 1477.0], [75.9, 1479.0], [76.0, 1481.0], [76.1, 1483.0], [76.2, 1485.0], [76.3, 1487.0], [76.4, 1489.0], [76.5, 1491.0], [76.6, 1493.0], [76.7, 1494.0], [76.8, 1497.0], [76.9, 1500.0], [77.0, 1501.0], [77.1, 1503.0], [77.2, 1504.0], [77.3, 1506.0], [77.4, 1507.0], [77.5, 1510.0], [77.6, 1512.0], [77.7, 1514.0], [77.8, 1516.0], [77.9, 1517.0], [78.0, 1519.0], [78.1, 1522.0], [78.2, 1524.0], [78.3, 1526.0], [78.4, 1527.0], [78.5, 1528.0], [78.6, 1531.0], [78.7, 1535.0], [78.8, 1537.0], [78.9, 1538.0], [79.0, 1540.0], [79.1, 1541.0], [79.2, 1543.0], [79.3, 1546.0], [79.4, 1547.0], [79.5, 1549.0], [79.6, 1551.0], [79.7, 1554.0], [79.8, 1556.0], [79.9, 1557.0], [80.0, 1561.0], [80.1, 1564.0], [80.2, 1567.0], [80.3, 1570.0], [80.4, 1573.0], [80.5, 1575.0], [80.6, 1577.0], [80.7, 1579.0], [80.8, 1581.0], [80.9, 1584.0], [81.0, 1589.0], [81.1, 1592.0], [81.2, 1594.0], [81.3, 1596.0], [81.4, 1598.0], [81.5, 1600.0], [81.6, 1602.0], [81.7, 1603.0], [81.8, 1606.0], [81.9, 1608.0], [82.0, 1610.0], [82.1, 1613.0], [82.2, 1614.0], [82.3, 1616.0], [82.4, 1619.0], [82.5, 1623.0], [82.6, 1625.0], [82.7, 1628.0], [82.8, 1631.0], [82.9, 1633.0], [83.0, 1635.0], [83.1, 1637.0], [83.2, 1639.0], [83.3, 1641.0], [83.4, 1643.0], [83.5, 1646.0], [83.6, 1648.0], [83.7, 1651.0], [83.8, 1654.0], [83.9, 1657.0], [84.0, 1659.0], [84.1, 1662.0], [84.2, 1665.0], [84.3, 1668.0], [84.4, 1670.0], [84.5, 1672.0], [84.6, 1674.0], [84.7, 1676.0], [84.8, 1679.0], [84.9, 1682.0], [85.0, 1685.0], [85.1, 1689.0], [85.2, 1690.0], [85.3, 1694.0], [85.4, 1697.0], [85.5, 1701.0], [85.6, 1704.0], [85.7, 1707.0], [85.8, 1712.0], [85.9, 1714.0], [86.0, 1718.0], [86.1, 1722.0], [86.2, 1725.0], [86.3, 1728.0], [86.4, 1731.0], [86.5, 1734.0], [86.6, 1736.0], [86.7, 1739.0], [86.8, 1741.0], [86.9, 1745.0], [87.0, 1748.0], [87.1, 1750.0], [87.2, 1753.0], [87.3, 1758.0], [87.4, 1761.0], [87.5, 1764.0], [87.6, 1766.0], [87.7, 1769.0], [87.8, 1771.0], [87.9, 1775.0], [88.0, 1779.0], [88.1, 1781.0], [88.2, 1785.0], [88.3, 1789.0], [88.4, 1792.0], [88.5, 1795.0], [88.6, 1798.0], [88.7, 1800.0], [88.8, 1803.0], [88.9, 1806.0], [89.0, 1808.0], [89.1, 1813.0], [89.2, 1816.0], [89.3, 1819.0], [89.4, 1823.0], [89.5, 1824.0], [89.6, 1829.0], [89.7, 1832.0], [89.8, 1836.0], [89.9, 1839.0], [90.0, 1843.0], [90.1, 1848.0], [90.2, 1852.0], [90.3, 1855.0], [90.4, 1862.0], [90.5, 1866.0], [90.6, 1870.0], [90.7, 1872.0], [90.8, 1875.0], [90.9, 1878.0], [91.0, 1884.0], [91.1, 1886.0], [91.2, 1891.0], [91.3, 1894.0], [91.4, 1899.0], [91.5, 1902.0], [91.6, 1908.0], [91.7, 1916.0], [91.8, 1919.0], [91.9, 1925.0], [92.0, 1928.0], [92.1, 1933.0], [92.2, 1938.0], [92.3, 1941.0], [92.4, 1945.0], [92.5, 1948.0], [92.6, 1953.0], [92.7, 1956.0], [92.8, 1963.0], [92.9, 1968.0], [93.0, 1973.0], [93.1, 1978.0], [93.2, 1982.0], [93.3, 1988.0], [93.4, 1991.0], [93.5, 1998.0], [93.6, 2010.0], [93.7, 2013.0], [93.8, 2017.0], [93.9, 2020.0], [94.0, 2025.0], [94.1, 2035.0], [94.2, 2043.0], [94.3, 2048.0], [94.4, 2054.0], [94.5, 2059.0], [94.6, 2068.0], [94.7, 2075.0], [94.8, 2088.0], [94.9, 2095.0], [95.0, 2104.0], [95.1, 2108.0], [95.2, 2113.0], [95.3, 2121.0], [95.4, 2127.0], [95.5, 2133.0], [95.6, 2142.0], [95.7, 2152.0], [95.8, 2160.0], [95.9, 2172.0], [96.0, 2184.0], [96.1, 2192.0], [96.2, 2201.0], [96.3, 2209.0], [96.4, 2219.0], [96.5, 2229.0], [96.6, 2237.0], [96.7, 2244.0], [96.8, 2251.0], [96.9, 2262.0], [97.0, 2274.0], [97.1, 2283.0], [97.2, 2287.0], [97.3, 2299.0], [97.4, 2308.0], [97.5, 2328.0], [97.6, 2339.0], [97.7, 2353.0], [97.8, 2372.0], [97.9, 2384.0], [98.0, 2396.0], [98.1, 2419.0], [98.2, 2437.0], [98.3, 2450.0], [98.4, 2464.0], [98.5, 2483.0], [98.6, 2507.0], [98.7, 2518.0], [98.8, 2538.0], [98.9, 2578.0], [99.0, 2602.0], [99.1, 2636.0], [99.2, 2671.0], [99.3, 2694.0], [99.4, 2741.0], [99.5, 2829.0], [99.6, 2906.0], [99.7, 2992.0], [99.8, 3084.0], [99.9, 3257.0], [100.0, 3517.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 145.0], [0.1, 145.0], [0.2, 145.0], [0.3, 145.0], [0.4, 145.0], [0.5, 145.0], [0.6, 145.0], [0.7, 145.0], [0.8, 145.0], [0.9, 145.0], [1.0, 148.0], [1.1, 148.0], [1.2, 148.0], [1.3, 148.0], [1.4, 148.0], [1.5, 148.0], [1.6, 148.0], [1.7, 148.0], [1.8, 148.0], [1.9, 148.0], [2.0, 148.0], [2.1, 148.0], [2.2, 148.0], [2.3, 148.0], [2.4, 148.0], [2.5, 148.0], [2.6, 148.0], [2.7, 148.0], [2.8, 148.0], [2.9, 148.0], [3.0, 150.0], [3.1, 150.0], [3.2, 150.0], [3.3, 150.0], [3.4, 150.0], [3.5, 150.0], [3.6, 150.0], [3.7, 150.0], [3.8, 150.0], [3.9, 150.0], [4.0, 151.0], [4.1, 151.0], [4.2, 151.0], [4.3, 151.0], [4.4, 151.0], [4.5, 151.0], [4.6, 151.0], [4.7, 151.0], [4.8, 151.0], [4.9, 151.0], [5.0, 152.0], [5.1, 152.0], [5.2, 152.0], [5.3, 152.0], [5.4, 152.0], [5.5, 152.0], [5.6, 152.0], [5.7, 152.0], [5.8, 152.0], [5.9, 152.0], [6.0, 152.0], [6.1, 152.0], [6.2, 152.0], [6.3, 152.0], [6.4, 152.0], [6.5, 152.0], [6.6, 152.0], [6.7, 152.0], [6.8, 152.0], [6.9, 152.0], [7.0, 152.0], [7.1, 152.0], [7.2, 152.0], [7.3, 152.0], [7.4, 152.0], [7.5, 152.0], [7.6, 152.0], [7.7, 152.0], [7.8, 152.0], [7.9, 152.0], [8.0, 152.0], [8.1, 152.0], [8.2, 152.0], [8.3, 152.0], [8.4, 152.0], [8.5, 152.0], [8.6, 152.0], [8.7, 152.0], [8.8, 152.0], [8.9, 152.0], [9.0, 153.0], [9.1, 153.0], [9.2, 153.0], [9.3, 153.0], [9.4, 153.0], [9.5, 153.0], [9.6, 153.0], [9.7, 153.0], [9.8, 153.0], [9.9, 153.0], [10.0, 153.0], [10.1, 153.0], [10.2, 153.0], [10.3, 153.0], [10.4, 153.0], [10.5, 153.0], [10.6, 153.0], [10.7, 153.0], [10.8, 153.0], [10.9, 153.0], [11.0, 154.0], [11.1, 154.0], [11.2, 154.0], [11.3, 154.0], [11.4, 154.0], [11.5, 154.0], [11.6, 154.0], [11.7, 154.0], [11.8, 154.0], [11.9, 154.0], [12.0, 154.0], [12.1, 154.0], [12.2, 154.0], [12.3, 154.0], [12.4, 154.0], [12.5, 154.0], [12.6, 154.0], [12.7, 154.0], [12.8, 154.0], [12.9, 154.0], [13.0, 155.0], [13.1, 155.0], [13.2, 155.0], [13.3, 155.0], [13.4, 155.0], [13.5, 155.0], [13.6, 155.0], [13.7, 155.0], [13.8, 155.0], [13.9, 155.0], [14.0, 155.0], [14.1, 155.0], [14.2, 155.0], [14.3, 155.0], [14.4, 155.0], [14.5, 155.0], [14.6, 155.0], [14.7, 155.0], [14.8, 155.0], [14.9, 155.0], [15.0, 155.0], [15.1, 155.0], [15.2, 155.0], [15.3, 155.0], [15.4, 155.0], [15.5, 155.0], [15.6, 155.0], [15.7, 155.0], [15.8, 155.0], [15.9, 155.0], [16.0, 155.0], [16.1, 155.0], [16.2, 155.0], [16.3, 155.0], [16.4, 155.0], [16.5, 155.0], [16.6, 155.0], [16.7, 155.0], [16.8, 155.0], [16.9, 155.0], [17.0, 156.0], [17.1, 156.0], [17.2, 156.0], [17.3, 156.0], [17.4, 156.0], [17.5, 156.0], [17.6, 156.0], [17.7, 156.0], [17.8, 156.0], [17.9, 156.0], [18.0, 156.0], [18.1, 156.0], [18.2, 156.0], [18.3, 156.0], [18.4, 156.0], [18.5, 156.0], [18.6, 156.0], [18.7, 156.0], [18.8, 156.0], [18.9, 156.0], [19.0, 157.0], [19.1, 157.0], [19.2, 157.0], [19.3, 157.0], [19.4, 157.0], [19.5, 157.0], [19.6, 157.0], [19.7, 157.0], [19.8, 157.0], [19.9, 157.0], [20.0, 157.0], [20.1, 157.0], [20.2, 157.0], [20.3, 157.0], [20.4, 157.0], [20.5, 157.0], [20.6, 157.0], [20.7, 157.0], [20.8, 157.0], [20.9, 157.0], [21.0, 157.0], [21.1, 157.0], [21.2, 157.0], [21.3, 157.0], [21.4, 157.0], [21.5, 157.0], [21.6, 157.0], [21.7, 157.0], [21.8, 157.0], [21.9, 157.0], [22.0, 157.0], [22.1, 157.0], [22.2, 157.0], [22.3, 157.0], [22.4, 157.0], [22.5, 157.0], [22.6, 157.0], [22.7, 157.0], [22.8, 157.0], [22.9, 157.0], [23.0, 158.0], [23.1, 158.0], [23.2, 158.0], [23.3, 158.0], [23.4, 158.0], [23.5, 158.0], [23.6, 158.0], [23.7, 158.0], [23.8, 158.0], [23.9, 158.0], [24.0, 158.0], [24.1, 158.0], [24.2, 158.0], [24.3, 158.0], [24.4, 158.0], [24.5, 158.0], [24.6, 158.0], [24.7, 158.0], [24.8, 158.0], [24.9, 158.0], [25.0, 158.0], [25.1, 158.0], [25.2, 158.0], [25.3, 158.0], [25.4, 158.0], [25.5, 158.0], [25.6, 158.0], [25.7, 158.0], [25.8, 158.0], [25.9, 158.0], [26.0, 158.0], [26.1, 158.0], [26.2, 158.0], [26.3, 158.0], [26.4, 158.0], [26.5, 158.0], [26.6, 158.0], [26.7, 158.0], [26.8, 158.0], [26.9, 158.0], [27.0, 159.0], [27.1, 159.0], [27.2, 159.0], [27.3, 159.0], [27.4, 159.0], [27.5, 159.0], [27.6, 159.0], [27.7, 159.0], [27.8, 159.0], [27.9, 159.0], [28.0, 159.0], [28.1, 159.0], [28.2, 159.0], [28.3, 159.0], [28.4, 159.0], [28.5, 159.0], [28.6, 159.0], [28.7, 159.0], [28.8, 159.0], [28.9, 159.0], [29.0, 159.0], [29.1, 159.0], [29.2, 159.0], [29.3, 159.0], [29.4, 159.0], [29.5, 159.0], [29.6, 159.0], [29.7, 159.0], [29.8, 159.0], [29.9, 159.0], [30.0, 159.0], [30.1, 159.0], [30.2, 159.0], [30.3, 159.0], [30.4, 159.0], [30.5, 159.0], [30.6, 159.0], [30.7, 159.0], [30.8, 159.0], [30.9, 159.0], [31.0, 159.0], [31.1, 159.0], [31.2, 159.0], [31.3, 159.0], [31.4, 159.0], [31.5, 159.0], [31.6, 159.0], [31.7, 159.0], [31.8, 159.0], [31.9, 159.0], [32.0, 160.0], [32.1, 160.0], [32.2, 160.0], [32.3, 160.0], [32.4, 160.0], [32.5, 160.0], [32.6, 160.0], [32.7, 160.0], [32.8, 160.0], [32.9, 160.0], [33.0, 160.0], [33.1, 160.0], [33.2, 160.0], [33.3, 160.0], [33.4, 160.0], [33.5, 160.0], [33.6, 160.0], [33.7, 160.0], [33.8, 160.0], [33.9, 160.0], [34.0, 160.0], [34.1, 160.0], [34.2, 160.0], [34.3, 160.0], [34.4, 160.0], [34.5, 160.0], [34.6, 160.0], [34.7, 160.0], [34.8, 160.0], [34.9, 160.0], [35.0, 160.0], [35.1, 160.0], [35.2, 160.0], [35.3, 160.0], [35.4, 160.0], [35.5, 160.0], [35.6, 160.0], [35.7, 160.0], [35.8, 160.0], [35.9, 160.0], [36.0, 160.0], [36.1, 160.0], [36.2, 160.0], [36.3, 160.0], [36.4, 160.0], [36.5, 160.0], [36.6, 160.0], [36.7, 160.0], [36.8, 160.0], [36.9, 160.0], [37.0, 161.0], [37.1, 161.0], [37.2, 161.0], [37.3, 161.0], [37.4, 161.0], [37.5, 161.0], [37.6, 161.0], [37.7, 161.0], [37.8, 161.0], [37.9, 161.0], [38.0, 161.0], [38.1, 161.0], [38.2, 161.0], [38.3, 161.0], [38.4, 161.0], [38.5, 161.0], [38.6, 161.0], [38.7, 161.0], [38.8, 161.0], [38.9, 161.0], [39.0, 161.0], [39.1, 161.0], [39.2, 161.0], [39.3, 161.0], [39.4, 161.0], [39.5, 161.0], [39.6, 161.0], [39.7, 161.0], [39.8, 161.0], [39.9, 161.0], [40.0, 161.0], [40.1, 161.0], [40.2, 161.0], [40.3, 161.0], [40.4, 161.0], [40.5, 161.0], [40.6, 161.0], [40.7, 161.0], [40.8, 161.0], [40.9, 161.0], [41.0, 161.0], [41.1, 161.0], [41.2, 161.0], [41.3, 161.0], [41.4, 161.0], [41.5, 161.0], [41.6, 161.0], [41.7, 161.0], [41.8, 161.0], [41.9, 161.0], [42.0, 161.0], [42.1, 161.0], [42.2, 161.0], [42.3, 161.0], [42.4, 161.0], [42.5, 161.0], [42.6, 161.0], [42.7, 161.0], [42.8, 161.0], [42.9, 161.0], [43.0, 161.0], [43.1, 161.0], [43.2, 161.0], [43.3, 161.0], [43.4, 161.0], [43.5, 161.0], [43.6, 161.0], [43.7, 161.0], [43.8, 161.0], [43.9, 161.0], [44.0, 162.0], [44.1, 162.0], [44.2, 162.0], [44.3, 162.0], [44.4, 162.0], [44.5, 162.0], [44.6, 162.0], [44.7, 162.0], [44.8, 162.0], [44.9, 162.0], [45.0, 162.0], [45.1, 162.0], [45.2, 162.0], [45.3, 162.0], [45.4, 162.0], [45.5, 162.0], [45.6, 162.0], [45.7, 162.0], [45.8, 162.0], [45.9, 162.0], [46.0, 162.0], [46.1, 162.0], [46.2, 162.0], [46.3, 162.0], [46.4, 162.0], [46.5, 162.0], [46.6, 162.0], [46.7, 162.0], [46.8, 162.0], [46.9, 162.0], [47.0, 162.0], [47.1, 162.0], [47.2, 162.0], [47.3, 162.0], [47.4, 162.0], [47.5, 162.0], [47.6, 162.0], [47.7, 162.0], [47.8, 162.0], [47.9, 162.0], [48.0, 162.0], [48.1, 162.0], [48.2, 162.0], [48.3, 162.0], [48.4, 162.0], [48.5, 162.0], [48.6, 162.0], [48.7, 162.0], [48.8, 162.0], [48.9, 162.0], [49.0, 162.0], [49.1, 162.0], [49.2, 162.0], [49.3, 162.0], [49.4, 162.0], [49.5, 162.0], [49.6, 162.0], [49.7, 162.0], [49.8, 162.0], [49.9, 162.0], [50.0, 162.0], [50.1, 162.0], [50.2, 162.0], [50.3, 162.0], [50.4, 162.0], [50.5, 162.0], [50.6, 162.0], [50.7, 162.0], [50.8, 162.0], [50.9, 162.0], [51.0, 162.0], [51.1, 162.0], [51.2, 162.0], [51.3, 162.0], [51.4, 162.0], [51.5, 162.0], [51.6, 162.0], [51.7, 162.0], [51.8, 162.0], [51.9, 162.0], [52.0, 162.0], [52.1, 162.0], [52.2, 162.0], [52.3, 162.0], [52.4, 162.0], [52.5, 162.0], [52.6, 162.0], [52.7, 162.0], [52.8, 162.0], [52.9, 162.0], [53.0, 163.0], [53.1, 163.0], [53.2, 163.0], [53.3, 163.0], [53.4, 163.0], [53.5, 163.0], [53.6, 163.0], [53.7, 163.0], [53.8, 163.0], [53.9, 163.0], [54.0, 163.0], [54.1, 163.0], [54.2, 163.0], [54.3, 163.0], [54.4, 163.0], [54.5, 163.0], [54.6, 163.0], [54.7, 163.0], [54.8, 163.0], [54.9, 163.0], [55.0, 163.0], [55.1, 163.0], [55.2, 163.0], [55.3, 163.0], [55.4, 163.0], [55.5, 163.0], [55.6, 163.0], [55.7, 163.0], [55.8, 163.0], [55.9, 163.0], [56.0, 163.0], [56.1, 163.0], [56.2, 163.0], [56.3, 163.0], [56.4, 163.0], [56.5, 163.0], [56.6, 163.0], [56.7, 163.0], [56.8, 163.0], [56.9, 163.0], [57.0, 164.0], [57.1, 164.0], [57.2, 164.0], [57.3, 164.0], [57.4, 164.0], [57.5, 164.0], [57.6, 164.0], [57.7, 164.0], [57.8, 164.0], [57.9, 164.0], [58.0, 164.0], [58.1, 164.0], [58.2, 164.0], [58.3, 164.0], [58.4, 164.0], [58.5, 164.0], [58.6, 164.0], [58.7, 164.0], [58.8, 164.0], [58.9, 164.0], [59.0, 164.0], [59.1, 164.0], [59.2, 164.0], [59.3, 164.0], [59.4, 164.0], [59.5, 164.0], [59.6, 164.0], [59.7, 164.0], [59.8, 164.0], [59.9, 164.0], [60.0, 164.0], [60.1, 164.0], [60.2, 164.0], [60.3, 164.0], [60.4, 164.0], [60.5, 164.0], [60.6, 164.0], [60.7, 164.0], [60.8, 164.0], [60.9, 164.0], [61.0, 165.0], [61.1, 165.0], [61.2, 165.0], [61.3, 165.0], [61.4, 165.0], [61.5, 165.0], [61.6, 165.0], [61.7, 165.0], [61.8, 165.0], [61.9, 165.0], [62.0, 165.0], [62.1, 165.0], [62.2, 165.0], [62.3, 165.0], [62.4, 165.0], [62.5, 165.0], [62.6, 165.0], [62.7, 165.0], [62.8, 165.0], [62.9, 165.0], [63.0, 166.0], [63.1, 166.0], [63.2, 166.0], [63.3, 166.0], [63.4, 166.0], [63.5, 166.0], [63.6, 166.0], [63.7, 166.0], [63.8, 166.0], [63.9, 166.0], [64.0, 166.0], [64.1, 166.0], [64.2, 166.0], [64.3, 166.0], [64.4, 166.0], [64.5, 166.0], [64.6, 166.0], [64.7, 166.0], [64.8, 166.0], [64.9, 166.0], [65.0, 167.0], [65.1, 167.0], [65.2, 167.0], [65.3, 167.0], [65.4, 167.0], [65.5, 167.0], [65.6, 167.0], [65.7, 167.0], [65.8, 167.0], [65.9, 167.0], [66.0, 167.0], [66.1, 167.0], [66.2, 167.0], [66.3, 167.0], [66.4, 167.0], [66.5, 167.0], [66.6, 167.0], [66.7, 167.0], [66.8, 167.0], [66.9, 167.0], [67.0, 167.0], [67.1, 167.0], [67.2, 167.0], [67.3, 167.0], [67.4, 167.0], [67.5, 167.0], [67.6, 167.0], [67.7, 167.0], [67.8, 167.0], [67.9, 167.0], [68.0, 167.0], [68.1, 167.0], [68.2, 167.0], [68.3, 167.0], [68.4, 167.0], [68.5, 167.0], [68.6, 167.0], [68.7, 167.0], [68.8, 167.0], [68.9, 167.0], [69.0, 167.0], [69.1, 167.0], [69.2, 167.0], [69.3, 167.0], [69.4, 167.0], [69.5, 167.0], [69.6, 167.0], [69.7, 167.0], [69.8, 167.0], [69.9, 167.0], [70.0, 168.0], [70.1, 168.0], [70.2, 168.0], [70.3, 168.0], [70.4, 168.0], [70.5, 168.0], [70.6, 168.0], [70.7, 168.0], [70.8, 168.0], [70.9, 168.0], [71.0, 168.0], [71.1, 168.0], [71.2, 168.0], [71.3, 168.0], [71.4, 168.0], [71.5, 168.0], [71.6, 168.0], [71.7, 168.0], [71.8, 168.0], [71.9, 168.0], [72.0, 168.0], [72.1, 168.0], [72.2, 168.0], [72.3, 168.0], [72.4, 168.0], [72.5, 168.0], [72.6, 168.0], [72.7, 168.0], [72.8, 168.0], [72.9, 168.0], [73.0, 169.0], [73.1, 169.0], [73.2, 169.0], [73.3, 169.0], [73.4, 169.0], [73.5, 169.0], [73.6, 169.0], [73.7, 169.0], [73.8, 169.0], [73.9, 169.0], [74.0, 170.0], [74.1, 170.0], [74.2, 170.0], [74.3, 170.0], [74.4, 170.0], [74.5, 170.0], [74.6, 170.0], [74.7, 170.0], [74.8, 170.0], [74.9, 170.0], [75.0, 170.0], [75.1, 170.0], [75.2, 170.0], [75.3, 170.0], [75.4, 170.0], [75.5, 170.0], [75.6, 170.0], [75.7, 170.0], [75.8, 170.0], [75.9, 170.0], [76.0, 171.0], [76.1, 171.0], [76.2, 171.0], [76.3, 171.0], [76.4, 171.0], [76.5, 171.0], [76.6, 171.0], [76.7, 171.0], [76.8, 171.0], [76.9, 171.0], [77.0, 171.0], [77.1, 171.0], [77.2, 171.0], [77.3, 171.0], [77.4, 171.0], [77.5, 171.0], [77.6, 171.0], [77.7, 171.0], [77.8, 171.0], [77.9, 171.0], [78.0, 171.0], [78.1, 171.0], [78.2, 171.0], [78.3, 171.0], [78.4, 171.0], [78.5, 171.0], [78.6, 171.0], [78.7, 171.0], [78.8, 171.0], [78.9, 171.0], [79.0, 171.0], [79.1, 171.0], [79.2, 171.0], [79.3, 171.0], [79.4, 171.0], [79.5, 171.0], [79.6, 171.0], [79.7, 171.0], [79.8, 171.0], [79.9, 171.0], [80.0, 172.0], [80.1, 172.0], [80.2, 172.0], [80.3, 172.0], [80.4, 172.0], [80.5, 172.0], [80.6, 172.0], [80.7, 172.0], [80.8, 172.0], [80.9, 172.0], [81.0, 173.0], [81.1, 173.0], [81.2, 173.0], [81.3, 173.0], [81.4, 173.0], [81.5, 173.0], [81.6, 173.0], [81.7, 173.0], [81.8, 173.0], [81.9, 173.0], [82.0, 173.0], [82.1, 173.0], [82.2, 173.0], [82.3, 173.0], [82.4, 173.0], [82.5, 173.0], [82.6, 173.0], [82.7, 173.0], [82.8, 173.0], [82.9, 173.0], [83.0, 176.0], [83.1, 176.0], [83.2, 176.0], [83.3, 176.0], [83.4, 176.0], [83.5, 176.0], [83.6, 176.0], [83.7, 176.0], [83.8, 176.0], [83.9, 176.0], [84.0, 176.0], [84.1, 176.0], [84.2, 176.0], [84.3, 176.0], [84.4, 176.0], [84.5, 176.0], [84.6, 176.0], [84.7, 176.0], [84.8, 176.0], [84.9, 176.0], [85.0, 176.0], [85.1, 176.0], [85.2, 176.0], [85.3, 176.0], [85.4, 176.0], [85.5, 176.0], [85.6, 176.0], [85.7, 176.0], [85.8, 176.0], [85.9, 176.0], [86.0, 179.0], [86.1, 179.0], [86.2, 179.0], [86.3, 179.0], [86.4, 179.0], [86.5, 179.0], [86.6, 179.0], [86.7, 179.0], [86.8, 179.0], [86.9, 179.0], [87.0, 179.0], [87.1, 179.0], [87.2, 179.0], [87.3, 179.0], [87.4, 179.0], [87.5, 179.0], [87.6, 179.0], [87.7, 179.0], [87.8, 179.0], [87.9, 179.0], [88.0, 183.0], [88.1, 183.0], [88.2, 183.0], [88.3, 183.0], [88.4, 183.0], [88.5, 183.0], [88.6, 183.0], [88.7, 183.0], [88.8, 183.0], [88.9, 183.0], [89.0, 184.0], [89.1, 184.0], [89.2, 184.0], [89.3, 184.0], [89.4, 184.0], [89.5, 184.0], [89.6, 184.0], [89.7, 184.0], [89.8, 184.0], [89.9, 184.0], [90.0, 185.0], [90.1, 185.0], [90.2, 185.0], [90.3, 185.0], [90.4, 185.0], [90.5, 185.0], [90.6, 185.0], [90.7, 185.0], [90.8, 185.0], [90.9, 185.0], [91.0, 185.0], [91.1, 185.0], [91.2, 185.0], [91.3, 185.0], [91.4, 185.0], [91.5, 185.0], [91.6, 185.0], [91.7, 185.0], [91.8, 185.0], [91.9, 185.0], [92.0, 187.0], [92.1, 187.0], [92.2, 187.0], [92.3, 187.0], [92.4, 187.0], [92.5, 187.0], [92.6, 187.0], [92.7, 187.0], [92.8, 187.0], [92.9, 187.0], [93.0, 190.0], [93.1, 190.0], [93.2, 190.0], [93.3, 190.0], [93.4, 190.0], [93.5, 190.0], [93.6, 190.0], [93.7, 190.0], [93.8, 190.0], [93.9, 190.0], [94.0, 194.0], [94.1, 194.0], [94.2, 194.0], [94.3, 194.0], [94.4, 194.0], [94.5, 194.0], [94.6, 194.0], [94.7, 194.0], [94.8, 194.0], [94.9, 194.0], [95.0, 195.0], [95.1, 195.0], [95.2, 195.0], [95.3, 195.0], [95.4, 195.0], [95.5, 195.0], [95.6, 195.0], [95.7, 195.0], [95.8, 195.0], [95.9, 195.0], [96.0, 197.0], [96.1, 197.0], [96.2, 197.0], [96.3, 197.0], [96.4, 197.0], [96.5, 197.0], [96.6, 197.0], [96.7, 197.0], [96.8, 197.0], [96.9, 197.0], [97.0, 202.0], [97.1, 202.0], [97.2, 202.0], [97.3, 202.0], [97.4, 202.0], [97.5, 202.0], [97.6, 202.0], [97.7, 202.0], [97.8, 202.0], [97.9, 202.0], [98.0, 206.0], [98.1, 206.0], [98.2, 206.0], [98.3, 206.0], [98.4, 206.0], [98.5, 206.0], [98.6, 206.0], [98.7, 206.0], [98.8, 206.0], [98.9, 206.0], [99.0, 234.0], [99.1, 234.0], [99.2, 234.0], [99.3, 234.0], [99.4, 234.0], [99.5, 234.0], [99.6, 234.0], [99.7, 234.0], [99.8, 234.0], [99.9, 234.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 13.0], [0.1, 15.0], [0.2, 16.0], [0.3, 17.0], [0.4, 17.0], [0.5, 18.0], [0.6, 18.0], [0.7, 19.0], [0.8, 19.0], [0.9, 19.0], [1.0, 20.0], [1.1, 20.0], [1.2, 20.0], [1.3, 20.0], [1.4, 21.0], [1.5, 21.0], [1.6, 21.0], [1.7, 22.0], [1.8, 22.0], [1.9, 22.0], [2.0, 22.0], [2.1, 23.0], [2.2, 23.0], [2.3, 23.0], [2.4, 23.0], [2.5, 23.0], [2.6, 23.0], [2.7, 24.0], [2.8, 24.0], [2.9, 24.0], [3.0, 24.0], [3.1, 25.0], [3.2, 25.0], [3.3, 25.0], [3.4, 25.0], [3.5, 25.0], [3.6, 25.0], [3.7, 26.0], [3.8, 26.0], [3.9, 26.0], [4.0, 26.0], [4.1, 26.0], [4.2, 27.0], [4.3, 27.0], [4.4, 27.0], [4.5, 27.0], [4.6, 27.0], [4.7, 27.0], [4.8, 28.0], [4.9, 28.0], [5.0, 28.0], [5.1, 28.0], [5.2, 28.0], [5.3, 29.0], [5.4, 29.0], [5.5, 29.0], [5.6, 29.0], [5.7, 30.0], [5.8, 30.0], [5.9, 30.0], [6.0, 30.0], [6.1, 31.0], [6.2, 31.0], [6.3, 31.0], [6.4, 31.0], [6.5, 32.0], [6.6, 32.0], [6.7, 32.0], [6.8, 32.0], [6.9, 32.0], [7.0, 33.0], [7.1, 33.0], [7.2, 34.0], [7.3, 34.0], [7.4, 34.0], [7.5, 35.0], [7.6, 35.0], [7.7, 35.0], [7.8, 35.0], [7.9, 36.0], [8.0, 36.0], [8.1, 37.0], [8.2, 38.0], [8.3, 38.0], [8.4, 39.0], [8.5, 39.0], [8.6, 40.0], [8.7, 41.0], [8.8, 42.0], [8.9, 42.0], [9.0, 43.0], [9.1, 43.0], [9.2, 44.0], [9.3, 45.0], [9.4, 47.0], [9.5, 47.0], [9.6, 48.0], [9.7, 50.0], [9.8, 52.0], [9.9, 55.0], [10.0, 57.0], [10.1, 61.0], [10.2, 64.0], [10.3, 71.0], [10.4, 76.0], [10.5, 84.0], [10.6, 91.0], [10.7, 105.0], [10.8, 112.0], [10.9, 120.0], [11.0, 138.0], [11.1, 166.0], [11.2, 192.0], [11.3, 218.0], [11.4, 236.0], [11.5, 249.0], [11.6, 256.0], [11.7, 271.0], [11.8, 282.0], [11.9, 293.0], [12.0, 300.0], [12.1, 312.0], [12.2, 321.0], [12.3, 328.0], [12.4, 334.0], [12.5, 343.0], [12.6, 347.0], [12.7, 353.0], [12.8, 364.0], [12.9, 369.0], [13.0, 374.0], [13.1, 378.0], [13.2, 385.0], [13.3, 388.0], [13.4, 395.0], [13.5, 399.0], [13.6, 404.0], [13.7, 407.0], [13.8, 412.0], [13.9, 416.0], [14.0, 420.0], [14.1, 422.0], [14.2, 428.0], [14.3, 434.0], [14.4, 439.0], [14.5, 442.0], [14.6, 447.0], [14.7, 450.0], [14.8, 453.0], [14.9, 457.0], [15.0, 460.0], [15.1, 464.0], [15.2, 470.0], [15.3, 475.0], [15.4, 478.0], [15.5, 483.0], [15.6, 487.0], [15.7, 490.0], [15.8, 494.0], [15.9, 497.0], [16.0, 499.0], [16.1, 502.0], [16.2, 504.0], [16.3, 507.0], [16.4, 509.0], [16.5, 512.0], [16.6, 514.0], [16.7, 515.0], [16.8, 518.0], [16.9, 520.0], [17.0, 523.0], [17.1, 524.0], [17.2, 529.0], [17.3, 532.0], [17.4, 535.0], [17.5, 537.0], [17.6, 539.0], [17.7, 541.0], [17.8, 543.0], [17.9, 546.0], [18.0, 549.0], [18.1, 550.0], [18.2, 552.0], [18.3, 554.0], [18.4, 556.0], [18.5, 559.0], [18.6, 562.0], [18.7, 564.0], [18.8, 568.0], [18.9, 571.0], [19.0, 572.0], [19.1, 575.0], [19.2, 577.0], [19.3, 578.0], [19.4, 580.0], [19.5, 582.0], [19.6, 585.0], [19.7, 587.0], [19.8, 589.0], [19.9, 592.0], [20.0, 593.0], [20.1, 596.0], [20.2, 597.0], [20.3, 598.0], [20.4, 602.0], [20.5, 605.0], [20.6, 607.0], [20.7, 610.0], [20.8, 613.0], [20.9, 615.0], [21.0, 617.0], [21.1, 619.0], [21.2, 623.0], [21.3, 625.0], [21.4, 626.0], [21.5, 628.0], [21.6, 630.0], [21.7, 632.0], [21.8, 633.0], [21.9, 636.0], [22.0, 637.0], [22.1, 639.0], [22.2, 640.0], [22.3, 642.0], [22.4, 644.0], [22.5, 646.0], [22.6, 647.0], [22.7, 649.0], [22.8, 651.0], [22.9, 652.0], [23.0, 654.0], [23.1, 655.0], [23.2, 657.0], [23.3, 658.0], [23.4, 659.0], [23.5, 661.0], [23.6, 665.0], [23.7, 667.0], [23.8, 669.0], [23.9, 670.0], [24.0, 672.0], [24.1, 673.0], [24.2, 675.0], [24.3, 678.0], [24.4, 679.0], [24.5, 681.0], [24.6, 683.0], [24.7, 684.0], [24.8, 686.0], [24.9, 687.0], [25.0, 689.0], [25.1, 692.0], [25.2, 693.0], [25.3, 695.0], [25.4, 695.0], [25.5, 697.0], [25.6, 699.0], [25.7, 702.0], [25.8, 704.0], [25.9, 705.0], [26.0, 707.0], [26.1, 709.0], [26.2, 711.0], [26.3, 713.0], [26.4, 715.0], [26.5, 716.0], [26.6, 718.0], [26.7, 720.0], [26.8, 722.0], [26.9, 723.0], [27.0, 724.0], [27.1, 726.0], [27.2, 728.0], [27.3, 730.0], [27.4, 731.0], [27.5, 732.0], [27.6, 734.0], [27.7, 736.0], [27.8, 738.0], [27.9, 740.0], [28.0, 743.0], [28.1, 745.0], [28.2, 747.0], [28.3, 748.0], [28.4, 750.0], [28.5, 751.0], [28.6, 752.0], [28.7, 754.0], [28.8, 756.0], [28.9, 757.0], [29.0, 759.0], [29.1, 761.0], [29.2, 762.0], [29.3, 764.0], [29.4, 765.0], [29.5, 767.0], [29.6, 769.0], [29.7, 771.0], [29.8, 772.0], [29.9, 774.0], [30.0, 776.0], [30.1, 778.0], [30.2, 779.0], [30.3, 781.0], [30.4, 783.0], [30.5, 785.0], [30.6, 786.0], [30.7, 788.0], [30.8, 790.0], [30.9, 791.0], [31.0, 792.0], [31.1, 795.0], [31.2, 795.0], [31.3, 798.0], [31.4, 799.0], [31.5, 800.0], [31.6, 801.0], [31.7, 802.0], [31.8, 805.0], [31.9, 806.0], [32.0, 807.0], [32.1, 809.0], [32.2, 811.0], [32.3, 812.0], [32.4, 814.0], [32.5, 815.0], [32.6, 817.0], [32.7, 818.0], [32.8, 820.0], [32.9, 822.0], [33.0, 823.0], [33.1, 825.0], [33.2, 827.0], [33.3, 828.0], [33.4, 829.0], [33.5, 830.0], [33.6, 831.0], [33.7, 832.0], [33.8, 834.0], [33.9, 836.0], [34.0, 837.0], [34.1, 839.0], [34.2, 841.0], [34.3, 842.0], [34.4, 844.0], [34.5, 845.0], [34.6, 846.0], [34.7, 848.0], [34.8, 850.0], [34.9, 852.0], [35.0, 854.0], [35.1, 854.0], [35.2, 856.0], [35.3, 858.0], [35.4, 859.0], [35.5, 861.0], [35.6, 862.0], [35.7, 863.0], [35.8, 864.0], [35.9, 866.0], [36.0, 867.0], [36.1, 869.0], [36.2, 870.0], [36.3, 871.0], [36.4, 873.0], [36.5, 876.0], [36.6, 878.0], [36.7, 879.0], [36.8, 880.0], [36.9, 881.0], [37.0, 883.0], [37.1, 884.0], [37.2, 885.0], [37.3, 886.0], [37.4, 887.0], [37.5, 889.0], [37.6, 890.0], [37.7, 892.0], [37.8, 894.0], [37.9, 895.0], [38.0, 896.0], [38.1, 897.0], [38.2, 899.0], [38.3, 900.0], [38.4, 901.0], [38.5, 902.0], [38.6, 904.0], [38.7, 905.0], [38.8, 906.0], [38.9, 907.0], [39.0, 909.0], [39.1, 910.0], [39.2, 911.0], [39.3, 912.0], [39.4, 914.0], [39.5, 916.0], [39.6, 917.0], [39.7, 919.0], [39.8, 920.0], [39.9, 921.0], [40.0, 922.0], [40.1, 924.0], [40.2, 925.0], [40.3, 926.0], [40.4, 927.0], [40.5, 929.0], [40.6, 930.0], [40.7, 931.0], [40.8, 932.0], [40.9, 933.0], [41.0, 934.0], [41.1, 935.0], [41.2, 937.0], [41.3, 939.0], [41.4, 940.0], [41.5, 942.0], [41.6, 942.0], [41.7, 944.0], [41.8, 945.0], [41.9, 946.0], [42.0, 947.0], [42.1, 948.0], [42.2, 950.0], [42.3, 951.0], [42.4, 952.0], [42.5, 954.0], [42.6, 955.0], [42.7, 957.0], [42.8, 959.0], [42.9, 960.0], [43.0, 961.0], [43.1, 962.0], [43.2, 964.0], [43.3, 966.0], [43.4, 967.0], [43.5, 968.0], [43.6, 970.0], [43.7, 971.0], [43.8, 973.0], [43.9, 974.0], [44.0, 975.0], [44.1, 976.0], [44.2, 977.0], [44.3, 978.0], [44.4, 981.0], [44.5, 983.0], [44.6, 984.0], [44.7, 985.0], [44.8, 986.0], [44.9, 987.0], [45.0, 988.0], [45.1, 990.0], [45.2, 992.0], [45.3, 994.0], [45.4, 996.0], [45.5, 997.0], [45.6, 998.0], [45.7, 999.0], [45.8, 1000.0], [45.9, 1001.0], [46.0, 1003.0], [46.1, 1005.0], [46.2, 1007.0], [46.3, 1008.0], [46.4, 1009.0], [46.5, 1010.0], [46.6, 1011.0], [46.7, 1012.0], [46.8, 1013.0], [46.9, 1014.0], [47.0, 1015.0], [47.1, 1017.0], [47.2, 1018.0], [47.3, 1020.0], [47.4, 1021.0], [47.5, 1023.0], [47.6, 1024.0], [47.7, 1026.0], [47.8, 1027.0], [47.9, 1028.0], [48.0, 1030.0], [48.1, 1032.0], [48.2, 1033.0], [48.3, 1034.0], [48.4, 1037.0], [48.5, 1038.0], [48.6, 1039.0], [48.7, 1042.0], [48.8, 1043.0], [48.9, 1044.0], [49.0, 1046.0], [49.1, 1048.0], [49.2, 1049.0], [49.3, 1050.0], [49.4, 1052.0], [49.5, 1052.0], [49.6, 1053.0], [49.7, 1055.0], [49.8, 1056.0], [49.9, 1058.0], [50.0, 1060.0], [50.1, 1061.0], [50.2, 1062.0], [50.3, 1063.0], [50.4, 1064.0], [50.5, 1065.0], [50.6, 1067.0], [50.7, 1069.0], [50.8, 1070.0], [50.9, 1071.0], [51.0, 1071.0], [51.1, 1072.0], [51.2, 1074.0], [51.3, 1075.0], [51.4, 1076.0], [51.5, 1077.0], [51.6, 1078.0], [51.7, 1080.0], [51.8, 1082.0], [51.9, 1084.0], [52.0, 1085.0], [52.1, 1086.0], [52.2, 1088.0], [52.3, 1090.0], [52.4, 1091.0], [52.5, 1093.0], [52.6, 1094.0], [52.7, 1095.0], [52.8, 1096.0], [52.9, 1097.0], [53.0, 1098.0], [53.1, 1101.0], [53.2, 1102.0], [53.3, 1104.0], [53.4, 1105.0], [53.5, 1106.0], [53.6, 1107.0], [53.7, 1109.0], [53.8, 1111.0], [53.9, 1112.0], [54.0, 1113.0], [54.1, 1115.0], [54.2, 1116.0], [54.3, 1118.0], [54.4, 1121.0], [54.5, 1122.0], [54.6, 1123.0], [54.7, 1124.0], [54.8, 1126.0], [54.9, 1127.0], [55.0, 1129.0], [55.1, 1130.0], [55.2, 1130.0], [55.3, 1132.0], [55.4, 1133.0], [55.5, 1135.0], [55.6, 1136.0], [55.7, 1138.0], [55.8, 1139.0], [55.9, 1141.0], [56.0, 1143.0], [56.1, 1144.0], [56.2, 1145.0], [56.3, 1146.0], [56.4, 1148.0], [56.5, 1149.0], [56.6, 1150.0], [56.7, 1152.0], [56.8, 1154.0], [56.9, 1155.0], [57.0, 1157.0], [57.1, 1159.0], [57.2, 1160.0], [57.3, 1162.0], [57.4, 1163.0], [57.5, 1165.0], [57.6, 1165.0], [57.7, 1166.0], [57.8, 1167.0], [57.9, 1169.0], [58.0, 1170.0], [58.1, 1172.0], [58.2, 1173.0], [58.3, 1174.0], [58.4, 1176.0], [58.5, 1178.0], [58.6, 1179.0], [58.7, 1181.0], [58.8, 1182.0], [58.9, 1183.0], [59.0, 1185.0], [59.1, 1187.0], [59.2, 1189.0], [59.3, 1190.0], [59.4, 1191.0], [59.5, 1192.0], [59.6, 1193.0], [59.7, 1195.0], [59.8, 1196.0], [59.9, 1197.0], [60.0, 1199.0], [60.1, 1200.0], [60.2, 1202.0], [60.3, 1204.0], [60.4, 1205.0], [60.5, 1208.0], [60.6, 1210.0], [60.7, 1212.0], [60.8, 1213.0], [60.9, 1215.0], [61.0, 1216.0], [61.1, 1217.0], [61.2, 1218.0], [61.3, 1220.0], [61.4, 1221.0], [61.5, 1223.0], [61.6, 1225.0], [61.7, 1227.0], [61.8, 1229.0], [61.9, 1231.0], [62.0, 1232.0], [62.1, 1234.0], [62.2, 1235.0], [62.3, 1236.0], [62.4, 1238.0], [62.5, 1239.0], [62.6, 1239.0], [62.7, 1241.0], [62.8, 1242.0], [62.9, 1244.0], [63.0, 1247.0], [63.1, 1248.0], [63.2, 1249.0], [63.3, 1251.0], [63.4, 1252.0], [63.5, 1253.0], [63.6, 1255.0], [63.7, 1256.0], [63.8, 1258.0], [63.9, 1258.0], [64.0, 1260.0], [64.1, 1262.0], [64.2, 1264.0], [64.3, 1265.0], [64.4, 1267.0], [64.5, 1268.0], [64.6, 1270.0], [64.7, 1271.0], [64.8, 1273.0], [64.9, 1275.0], [65.0, 1276.0], [65.1, 1277.0], [65.2, 1278.0], [65.3, 1280.0], [65.4, 1281.0], [65.5, 1282.0], [65.6, 1284.0], [65.7, 1285.0], [65.8, 1287.0], [65.9, 1289.0], [66.0, 1290.0], [66.1, 1291.0], [66.2, 1293.0], [66.3, 1294.0], [66.4, 1297.0], [66.5, 1299.0], [66.6, 1300.0], [66.7, 1301.0], [66.8, 1303.0], [66.9, 1306.0], [67.0, 1307.0], [67.1, 1308.0], [67.2, 1310.0], [67.3, 1311.0], [67.4, 1313.0], [67.5, 1315.0], [67.6, 1317.0], [67.7, 1319.0], [67.8, 1322.0], [67.9, 1323.0], [68.0, 1324.0], [68.1, 1326.0], [68.2, 1327.0], [68.3, 1329.0], [68.4, 1331.0], [68.5, 1334.0], [68.6, 1335.0], [68.7, 1337.0], [68.8, 1338.0], [68.9, 1340.0], [69.0, 1341.0], [69.1, 1343.0], [69.2, 1344.0], [69.3, 1345.0], [69.4, 1346.0], [69.5, 1348.0], [69.6, 1349.0], [69.7, 1351.0], [69.8, 1353.0], [69.9, 1354.0], [70.0, 1356.0], [70.1, 1359.0], [70.2, 1361.0], [70.3, 1362.0], [70.4, 1364.0], [70.5, 1367.0], [70.6, 1368.0], [70.7, 1370.0], [70.8, 1372.0], [70.9, 1373.0], [71.0, 1375.0], [71.1, 1378.0], [71.2, 1380.0], [71.3, 1382.0], [71.4, 1384.0], [71.5, 1386.0], [71.6, 1388.0], [71.7, 1389.0], [71.8, 1391.0], [71.9, 1392.0], [72.0, 1394.0], [72.1, 1396.0], [72.2, 1397.0], [72.3, 1399.0], [72.4, 1401.0], [72.5, 1403.0], [72.6, 1405.0], [72.7, 1408.0], [72.8, 1409.0], [72.9, 1411.0], [73.0, 1411.0], [73.1, 1413.0], [73.2, 1415.0], [73.3, 1417.0], [73.4, 1419.0], [73.5, 1422.0], [73.6, 1425.0], [73.7, 1427.0], [73.8, 1429.0], [73.9, 1431.0], [74.0, 1432.0], [74.1, 1434.0], [74.2, 1436.0], [74.3, 1440.0], [74.4, 1441.0], [74.5, 1444.0], [74.6, 1446.0], [74.7, 1448.0], [74.8, 1449.0], [74.9, 1451.0], [75.0, 1453.0], [75.1, 1455.0], [75.2, 1457.0], [75.3, 1459.0], [75.4, 1460.0], [75.5, 1462.0], [75.6, 1465.0], [75.7, 1466.0], [75.8, 1469.0], [75.9, 1470.0], [76.0, 1472.0], [76.1, 1473.0], [76.2, 1475.0], [76.3, 1477.0], [76.4, 1478.0], [76.5, 1480.0], [76.6, 1482.0], [76.7, 1483.0], [76.8, 1485.0], [76.9, 1487.0], [77.0, 1490.0], [77.1, 1493.0], [77.2, 1495.0], [77.3, 1497.0], [77.4, 1499.0], [77.5, 1501.0], [77.6, 1504.0], [77.7, 1507.0], [77.8, 1509.0], [77.9, 1511.0], [78.0, 1512.0], [78.1, 1515.0], [78.2, 1517.0], [78.3, 1519.0], [78.4, 1521.0], [78.5, 1522.0], [78.6, 1524.0], [78.7, 1526.0], [78.8, 1528.0], [78.9, 1531.0], [79.0, 1534.0], [79.1, 1538.0], [79.2, 1540.0], [79.3, 1543.0], [79.4, 1545.0], [79.5, 1549.0], [79.6, 1551.0], [79.7, 1553.0], [79.8, 1554.0], [79.9, 1556.0], [80.0, 1559.0], [80.1, 1561.0], [80.2, 1564.0], [80.3, 1566.0], [80.4, 1569.0], [80.5, 1571.0], [80.6, 1573.0], [80.7, 1576.0], [80.8, 1578.0], [80.9, 1580.0], [81.0, 1582.0], [81.1, 1585.0], [81.2, 1588.0], [81.3, 1590.0], [81.4, 1593.0], [81.5, 1595.0], [81.6, 1597.0], [81.7, 1600.0], [81.8, 1604.0], [81.9, 1607.0], [82.0, 1609.0], [82.1, 1611.0], [82.2, 1614.0], [82.3, 1617.0], [82.4, 1620.0], [82.5, 1621.0], [82.6, 1622.0], [82.7, 1624.0], [82.8, 1628.0], [82.9, 1630.0], [83.0, 1632.0], [83.1, 1634.0], [83.2, 1635.0], [83.3, 1638.0], [83.4, 1639.0], [83.5, 1641.0], [83.6, 1643.0], [83.7, 1645.0], [83.8, 1648.0], [83.9, 1651.0], [84.0, 1654.0], [84.1, 1657.0], [84.2, 1661.0], [84.3, 1664.0], [84.4, 1666.0], [84.5, 1669.0], [84.6, 1672.0], [84.7, 1676.0], [84.8, 1679.0], [84.9, 1682.0], [85.0, 1685.0], [85.1, 1687.0], [85.2, 1689.0], [85.3, 1691.0], [85.4, 1694.0], [85.5, 1698.0], [85.6, 1701.0], [85.7, 1705.0], [85.8, 1707.0], [85.9, 1712.0], [86.0, 1714.0], [86.1, 1716.0], [86.2, 1720.0], [86.3, 1723.0], [86.4, 1728.0], [86.5, 1730.0], [86.6, 1733.0], [86.7, 1735.0], [86.8, 1737.0], [86.9, 1740.0], [87.0, 1743.0], [87.1, 1746.0], [87.2, 1748.0], [87.3, 1749.0], [87.4, 1753.0], [87.5, 1756.0], [87.6, 1759.0], [87.7, 1762.0], [87.8, 1765.0], [87.9, 1768.0], [88.0, 1773.0], [88.1, 1776.0], [88.2, 1779.0], [88.3, 1781.0], [88.4, 1784.0], [88.5, 1787.0], [88.6, 1790.0], [88.7, 1792.0], [88.8, 1796.0], [88.9, 1800.0], [89.0, 1802.0], [89.1, 1807.0], [89.2, 1810.0], [89.3, 1813.0], [89.4, 1818.0], [89.5, 1822.0], [89.6, 1826.0], [89.7, 1829.0], [89.8, 1834.0], [89.9, 1839.0], [90.0, 1844.0], [90.1, 1847.0], [90.2, 1850.0], [90.3, 1852.0], [90.4, 1858.0], [90.5, 1860.0], [90.6, 1866.0], [90.7, 1871.0], [90.8, 1874.0], [90.9, 1878.0], [91.0, 1884.0], [91.1, 1889.0], [91.2, 1893.0], [91.3, 1899.0], [91.4, 1902.0], [91.5, 1908.0], [91.6, 1913.0], [91.7, 1916.0], [91.8, 1919.0], [91.9, 1923.0], [92.0, 1926.0], [92.1, 1930.0], [92.2, 1933.0], [92.3, 1937.0], [92.4, 1940.0], [92.5, 1943.0], [92.6, 1949.0], [92.7, 1953.0], [92.8, 1958.0], [92.9, 1962.0], [93.0, 1967.0], [93.1, 1973.0], [93.2, 1979.0], [93.3, 1984.0], [93.4, 1988.0], [93.5, 1992.0], [93.6, 1998.0], [93.7, 2002.0], [93.8, 2006.0], [93.9, 2011.0], [94.0, 2016.0], [94.1, 2022.0], [94.2, 2029.0], [94.3, 2032.0], [94.4, 2039.0], [94.5, 2046.0], [94.6, 2054.0], [94.7, 2060.0], [94.8, 2064.0], [94.9, 2070.0], [95.0, 2082.0], [95.1, 2086.0], [95.2, 2096.0], [95.3, 2106.0], [95.4, 2111.0], [95.5, 2121.0], [95.6, 2130.0], [95.7, 2133.0], [95.8, 2137.0], [95.9, 2144.0], [96.0, 2149.0], [96.1, 2158.0], [96.2, 2171.0], [96.3, 2178.0], [96.4, 2189.0], [96.5, 2201.0], [96.6, 2214.0], [96.7, 2228.0], [96.8, 2237.0], [96.9, 2249.0], [97.0, 2258.0], [97.1, 2269.0], [97.2, 2281.0], [97.3, 2286.0], [97.4, 2307.0], [97.5, 2321.0], [97.6, 2328.0], [97.7, 2336.0], [97.8, 2347.0], [97.9, 2368.0], [98.0, 2378.0], [98.1, 2403.0], [98.2, 2426.0], [98.3, 2452.0], [98.4, 2472.0], [98.5, 2485.0], [98.6, 2497.0], [98.7, 2516.0], [98.8, 2535.0], [98.9, 2550.0], [99.0, 2581.0], [99.1, 2593.0], [99.2, 2635.0], [99.3, 2669.0], [99.4, 2693.0], [99.5, 2737.0], [99.6, 2782.0], [99.7, 2830.0], [99.8, 2927.0], [99.9, 3154.0], [100.0, 3584.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1076.0, "series": [{"data": [[0.0, 1076.0], [600.0, 521.0], [700.0, 633.0], [800.0, 690.0], [900.0, 739.0], [1000.0, 723.0], [1100.0, 694.0], [1200.0, 601.0], [1300.0, 549.0], [1400.0, 513.0], [1500.0, 455.0], [100.0, 50.0], [1600.0, 403.0], [1700.0, 321.0], [1800.0, 273.0], [1900.0, 210.0], [2000.0, 143.0], [2100.0, 123.0], [2200.0, 112.0], [2300.0, 71.0], [2400.0, 56.0], [2500.0, 41.0], [2600.0, 34.0], [2700.0, 15.0], [2800.0, 9.0], [2900.0, 16.0], [3000.0, 9.0], [3100.0, 5.0], [200.0, 76.0], [3200.0, 7.0], [3300.0, 2.0], [3400.0, 4.0], [3500.0, 1.0], [300.0, 150.0], [400.0, 271.0], [500.0, 404.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[100.0, 97.0], [200.0, 3.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1070.0], [600.0, 527.0], [700.0, 586.0], [800.0, 680.0], [900.0, 748.0], [1000.0, 728.0], [1100.0, 701.0], [1200.0, 646.0], [1300.0, 579.0], [1400.0, 512.0], [1500.0, 427.0], [100.0, 52.0], [1600.0, 385.0], [1700.0, 334.0], [1800.0, 244.0], [1900.0, 233.0], [2000.0, 157.0], [2100.0, 125.0], [2300.0, 73.0], [2200.0, 88.0], [2400.0, 54.0], [2500.0, 51.0], [2600.0, 27.0], [2800.0, 11.0], [2700.0, 26.0], [2900.0, 6.0], [3000.0, 5.0], [3100.0, 3.0], [200.0, 78.0], [3200.0, 2.0], [3300.0, 4.0], [3400.0, 2.0], [3500.0, 1.0], [300.0, 152.0], [400.0, 252.0], [500.0, 431.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3334.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 12209.0, "series": [{"data": [[0.0, 3334.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 12209.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4557.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 27.249999999999996, "minX": 1.58732688E12, "maxY": 100.0, "series": [{"data": [[1.58732742E12, 100.0], [1.58732694E12, 83.74537987679668], [1.58732724E12, 100.0], [1.58732706E12, 100.0], [1.58732754E12, 27.249999999999996], [1.58732736E12, 100.0], [1.58732688E12, 27.60923076923077], [1.58732718E12, 100.0], [1.58732748E12, 82.11830698623166], [1.587327E12, 100.0], [1.5873273E12, 100.0], [1.58732712E12, 100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58732754E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 22.0, "minX": 1.0, "maxY": 1444.9504950495057, "series": [{"data": [[2.0, 24.5], [3.0, 28.0], [4.0, 22.0], [5.0, 25.0], [6.0, 46.0], [7.0, 36.0], [8.0, 27.0], [9.0, 52.0], [10.0, 26.4], [11.0, 42.333333333333336], [12.0, 41.333333333333336], [13.0, 45.75], [14.0, 43.0], [15.0, 48.5], [16.0, 36.0], [17.0, 37.0], [18.0, 31.5], [19.0, 33.57142857142857], [20.0, 33.2], [21.0, 31.8], [22.0, 29.0], [23.0, 40.90909090909091], [24.0, 52.66666666666667], [25.0, 34.4], [26.0, 36.0], [27.0, 37.5], [28.0, 26.538461538461537], [29.0, 29.15384615384615], [30.0, 45.166666666666664], [31.0, 30.333333333333332], [32.0, 32.25], [33.0, 35.4], [34.0, 37.6], [35.0, 36.57142857142858], [36.0, 31.473684210526308], [37.0, 34.214285714285715], [38.0, 66.5], [39.0, 43.769230769230774], [40.0, 32.45454545454546], [41.0, 36.55555555555556], [42.0, 25.200000000000003], [43.0, 29.12], [44.0, 31.874999999999993], [45.0, 28.079999999999995], [46.0, 30.928571428571423], [47.0, 29.874999999999996], [48.0, 34.285714285714285], [49.0, 41.875], [50.0, 31.1], [51.0, 29.823529411764703], [52.0, 37.21052631578947], [53.0, 34.875], [54.0, 37.3], [55.0, 33.333333333333336], [56.0, 38.71428571428571], [57.0, 28.285714285714292], [58.0, 34.333333333333336], [59.0, 39.1875], [60.0, 41.333333333333336], [61.0, 25.189189189189186], [62.0, 25.956521739130434], [63.0, 30.454545454545453], [64.0, 32.92307692307692], [65.0, 33.0], [66.0, 40.54545454545455], [67.0, 31.75], [68.0, 26.377777777777776], [69.0, 29.857142857142865], [70.0, 30.636363636363637], [71.0, 30.074074074074073], [72.0, 75.23076923076924], [73.0, 27.9], [74.0, 31.333333333333332], [75.0, 29.52631578947368], [76.0, 120.11111111111111], [77.0, 176.88461538461542], [78.0, 155.25], [79.0, 344.09999999999997], [80.0, 252.6666666666667], [81.0, 219.6818181818182], [82.0, 35.31428571428572], [83.0, 365.8378378378378], [84.0, 445.5625], [85.0, 263.8461538461538], [86.0, 1101.3846153846155], [87.0, 927.5555555555554], [88.0, 912.7647058823529], [89.0, 1216.0], [90.0, 1084.3137254901962], [91.0, 933.764705882353], [92.0, 929.8518518518517], [93.0, 755.0], [94.0, 954.268292682927], [95.0, 800.2272727272726], [96.0, 755.0000000000001], [97.0, 1055.9523809523814], [98.0, 1398.8281249999995], [99.0, 1389.1157894736843], [100.0, 1206.5506760799344], [1.0, 22.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[94.79189999999983, 1070.5479999999948]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 170.0], [3.0, 161.0], [4.0, 179.0], [5.0, 176.0], [6.0, 155.0], [7.0, 160.0], [8.0, 158.0], [9.0, 158.0], [10.0, 153.0], [11.0, 161.0], [12.0, 160.0], [13.0, 172.0], [14.0, 167.0], [15.0, 162.0], [16.0, 157.0], [17.0, 156.0], [18.0, 190.0], [19.0, 161.0], [20.0, 161.0], [21.0, 166.0], [22.0, 206.0], [23.0, 159.0], [24.0, 234.0], [25.0, 159.0], [26.0, 152.0], [27.0, 152.0], [28.0, 161.0], [29.0, 171.0], [30.0, 162.0], [31.0, 179.0], [32.0, 155.0], [33.0, 202.0], [34.0, 168.0], [35.0, 154.0], [36.0, 157.0], [37.0, 162.0], [38.0, 162.0], [39.0, 160.0], [40.0, 162.0], [41.0, 164.0], [42.0, 160.0], [43.0, 156.0], [44.0, 157.0], [45.0, 148.0], [46.0, 155.0], [47.0, 154.0], [48.0, 168.0], [49.0, 148.0], [50.0, 166.0], [51.0, 161.0], [52.0, 152.0], [53.0, 161.0], [54.0, 185.0], [55.0, 162.0], [56.0, 157.0], [57.0, 163.0], [58.0, 170.0], [59.0, 152.0], [60.0, 160.0], [61.0, 162.0], [62.0, 165.0], [63.0, 165.0], [64.0, 164.0], [65.0, 145.0], [66.0, 150.0], [67.0, 171.0], [68.0, 168.0], [69.0, 159.0], [70.0, 162.0], [71.0, 155.0], [72.0, 164.0], [73.0, 167.0], [74.0, 167.0], [75.0, 159.0], [76.0, 159.0], [77.0, 164.0], [78.0, 163.0], [79.0, 153.0], [80.0, 163.0], [81.0, 176.0], [82.0, 169.0], [83.0, 151.0], [84.0, 162.0], [85.0, 167.0], [86.0, 158.0], [87.0, 187.0], [88.0, 176.0], [89.0, 195.0], [90.0, 163.0], [91.0, 173.0], [92.0, 171.0], [93.0, 158.0], [94.0, 173.0], [95.0, 167.0], [96.0, 185.0], [97.0, 171.0], [98.0, 183.0], [99.0, 194.0], [100.0, 184.0], [1.0, 197.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[50.5, 165.84000000000003]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[3.0, 37.333333333333336], [4.0, 57.0], [5.0, 32.0], [6.0, 52.0], [7.0, 36.5], [8.0, 32.0], [9.0, 42.5], [10.0, 35.833333333333336], [11.0, 39.666666666666664], [12.0, 37.25], [13.0, 42.333333333333336], [14.0, 36.666666666666664], [15.0, 39.0], [16.0, 47.0], [17.0, 32.55555555555556], [18.0, 39.285714285714285], [19.0, 36.8], [20.0, 38.75], [21.0, 42.0], [22.0, 46.0], [23.0, 42.916666666666664], [24.0, 37.16666666666667], [25.0, 30.833333333333336], [26.0, 27.8], [27.0, 41.666666666666664], [28.0, 27.545454545454547], [29.0, 29.499999999999996], [30.0, 51.285714285714285], [31.0, 34.5], [32.0, 32.00000000000001], [33.0, 49.166666666666664], [34.0, 32.8], [35.0, 39.0], [36.0, 39.583333333333336], [37.0, 55.84615384615385], [38.0, 66.71428571428571], [39.0, 33.05882352941176], [40.0, 36.28571428571429], [41.0, 30.0], [42.0, 28.333333333333332], [43.0, 27.60714285714285], [44.0, 28.69565217391304], [45.0, 30.947368421052627], [46.0, 33.55555555555556], [47.0, 30.133333333333333], [48.0, 27.083333333333332], [49.0, 33.90909090909091], [50.0, 28.727272727272727], [51.0, 29.470588235294116], [52.0, 29.368421052631582], [53.0, 47.909090909090914], [54.0, 36.75], [55.0, 30.333333333333332], [56.0, 48.300000000000004], [57.0, 32.44736842105263], [58.0, 29.444444444444446], [59.0, 30.88888888888889], [60.0, 47.14285714285714], [61.0, 29.866666666666667], [62.0, 27.425925925925927], [63.0, 30.33333333333333], [64.0, 38.08333333333333], [65.0, 38.333333333333336], [66.0, 67.07692307692308], [67.0, 46.25], [68.0, 28.892857142857142], [69.0, 29.648648648648653], [70.0, 28.35294117647059], [71.0, 35.466666666666676], [72.0, 36.9090909090909], [73.0, 29.76595744680851], [74.0, 28.705882352941178], [75.0, 26.27272727272727], [76.0, 48.5], [77.0, 250.5769230769231], [78.0, 219.44444444444446], [79.0, 350.04761904761915], [80.0, 252.06557377049194], [81.0, 306.9130434782609], [82.0, 52.5], [83.0, 330.90000000000003], [84.0, 616.0909090909091], [85.0, 151.63636363636363], [86.0, 618.5294117647057], [87.0, 987.5], [88.0, 776.5], [89.0, 1253.5], [90.0, 1045.0833333333335], [91.0, 985.7142857142853], [92.0, 837.2499999999999], [93.0, 679.5384615384614], [94.0, 900.6666666666664], [95.0, 1010.3846153846154], [96.0, 903.7222222222223], [97.0, 990.5774647887324], [98.0, 1367.1803278688526], [99.0, 1444.9504950495057], [100.0, 1204.4328537170256], [1.0, 23.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[94.78590000000015, 1069.3173999999995]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1859.3, "minX": 1.58732688E12, "maxY": 232668.81666666668, "series": [{"data": [[1.58732742E12, 226739.73333333334], [1.58732694E12, 220713.23333333334], [1.58732724E12, 224649.95], [1.58732706E12, 228250.86666666667], [1.58732754E12, 30166.75], [1.58732736E12, 222215.28333333333], [1.58732688E12, 33789.55], [1.58732718E12, 226630.63333333333], [1.58732748E12, 227638.81666666668], [1.587327E12, 232668.81666666668], [1.5873273E12, 228845.45], [1.58732712E12, 221884.41666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58732742E12, 13964.1], [1.58732694E12, 13733.533333333333], [1.58732724E12, 13835.433333333332], [1.58732706E12, 14057.033333333333], [1.58732754E12, 1859.3], [1.58732736E12, 13685.2], [1.58732688E12, 2182.8333333333335], [1.58732718E12, 13956.8], [1.58732748E12, 14021.433333333332], [1.587327E12, 14328.533333333333], [1.5873273E12, 14092.433333333332], [1.58732712E12, 13663.366666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58732754E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 25.517985611510788, "minX": 1.58732688E12, "maxY": 1284.2557651991613, "series": [{"data": [[1.58732742E12, 1193.1957186544341], [1.58732694E12, 733.741970021414], [1.58732724E12, 1238.32887975334], [1.58732706E12, 1163.6798378926014], [1.58732754E12, 25.517985611510788], [1.58732736E12, 1252.2312499999994], [1.58732688E12, 44.2], [1.58732718E12, 1186.2653688524572], [1.58732748E12, 644.6258847320539], [1.587327E12, 1154.841999999999], [1.5873273E12, 1162.207354443311], [1.58732712E12, 1263.5322069693761]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58732694E12, 164.8793103448276], [1.58732688E12, 167.16666666666663]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58732742E12, 1198.9650205761309], [1.58732694E12, 696.0470711297063], [1.58732724E12, 1209.649688149688], [1.58732706E12, 1195.1031664964237], [1.58732754E12, 26.45454545454545], [1.58732736E12, 1284.2557651991613], [1.58732688E12, 47.249999999999986], [1.58732718E12, 1183.1670081967206], [1.58732748E12, 661.9979423868315], [1.587327E12, 1118.4013944223075], [1.5873273E12, 1172.7026209677426], [1.58732712E12, 1254.0114107883815]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58732754E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 25.208633093525187, "minX": 1.58732688E12, "maxY": 1284.0513626834384, "series": [{"data": [[1.58732742E12, 1193.030581039756], [1.58732694E12, 733.4304068522491], [1.58732724E12, 1238.1490236382344], [1.58732706E12, 1163.4589665653496], [1.58732754E12, 25.208633093525187], [1.58732736E12, 1252.0375], [1.58732688E12, 43.888888888888886], [1.58732718E12, 1186.0143442622962], [1.58732748E12, 644.4186046511637], [1.587327E12, 1154.5879999999986], [1.5873273E12, 1162.0265577119492], [1.58732712E12, 1263.3442449841612]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58732694E12, 164.8793103448276], [1.58732688E12, 167.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58732742E12, 1198.7355967078197], [1.58732694E12, 695.7656903765692], [1.58732724E12, 1209.4345114345122], [1.58732706E12, 1194.835546475995], [1.58732754E12, 26.057851239669414], [1.58732736E12, 1284.0513626834384], [1.58732688E12, 46.317567567567565], [1.58732718E12, 1182.9344262295072], [1.58732748E12, 661.7654320987652], [1.587327E12, 1118.132470119521], [1.5873273E12, 1172.4616935483903], [1.58732712E12, 1253.760373443985]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58732754E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58732688E12, "maxY": 1.3571428571428574, "series": [{"data": [[1.58732742E12, 0.30581039755351697], [1.58732694E12, 0.2323340471092077], [1.58732724E12, 0.3247687564234325], [1.58732706E12, 0.3850050658561296], [1.58732754E12, 0.0], [1.58732736E12, 0.3135416666666664], [1.58732688E12, 0.21481481481481474], [1.58732718E12, 0.3012295081967213], [1.58732748E12, 0.18806875631951472], [1.587327E12, 0.36400000000000043], [1.5873273E12, 0.31154239019407565], [1.58732712E12, 0.349524815205914]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58732694E12, 0.6206896551724137], [1.58732688E12, 1.3571428571428574]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58732742E12, 0.40226337448559635], [1.58732694E12, 0.4958158995815902], [1.58732724E12, 0.40852390852390863], [1.58732706E12, 0.44126659856996914], [1.58732754E12, 0.4462809917355372], [1.58732736E12, 0.3951781970649899], [1.58732688E12, 0.4864864864864865], [1.58732718E12, 0.38831967213114815], [1.58732748E12, 0.4197530864197529], [1.587327E12, 0.46613545816733054], [1.5873273E12, 0.3870967741935488], [1.58732712E12, 0.4170124481327802]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58732754E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.58732688E12, "maxY": 3584.0, "series": [{"data": [[1.58732742E12, 3491.0], [1.58732694E12, 2994.0], [1.58732724E12, 3296.0], [1.58732706E12, 2988.0], [1.58732754E12, 50.0], [1.58732736E12, 3584.0], [1.58732688E12, 234.0], [1.58732718E12, 3225.0], [1.58732748E12, 3412.0], [1.587327E12, 3517.0], [1.5873273E12, 3358.0], [1.58732712E12, 3282.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58732742E12, 33.0], [1.58732694E12, 15.0], [1.58732724E12, 71.0], [1.58732706E12, 51.0], [1.58732754E12, 13.0], [1.58732736E12, 70.0], [1.58732688E12, 17.0], [1.58732718E12, 56.0], [1.58732748E12, 10.0], [1.587327E12, 24.0], [1.5873273E12, 23.0], [1.58732712E12, 55.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58732742E12, 1931.0000000000007], [1.58732694E12, 1675.1000000000001], [1.58732724E12, 1923.4], [1.58732706E12, 1800.3], [1.58732754E12, 33.0], [1.58732736E12, 2019.5], [1.58732688E12, 158.0], [1.58732718E12, 1863.7], [1.58732748E12, 1673.6], [1.587327E12, 1815.5], [1.5873273E12, 1787.8], [1.58732712E12, 1907.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58732742E12, 2690.84], [1.58732694E12, 2517.02], [1.58732724E12, 2678.119999999999], [1.58732706E12, 2379.9399999999987], [1.58732754E12, 44.389999999999986], [1.58732736E12, 2931.0999999999995], [1.58732688E12, 200.70000000000005], [1.58732718E12, 2507.4600000000005], [1.58732748E12, 2496.38], [1.587327E12, 2559.9500000000007], [1.5873273E12, 2491.56], [1.58732712E12, 2590.5199999999995]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58732742E12, 2137.0], [1.58732694E12, 1986.1], [1.58732724E12, 2182.0], [1.58732706E12, 1977.6499999999999], [1.58732754E12, 36.0], [1.58732736E12, 2325.75], [1.58732688E12, 162.0], [1.58732718E12, 2076.35], [1.58732748E12, 2009.5999999999995], [1.587327E12, 2109.5], [1.5873273E12, 1997.3999999999999], [1.58732712E12, 2116.999999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58732754E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 22.5, "minX": 1.0, "maxY": 1343.0, "series": [{"data": [[2.0, 31.5], [3.0, 27.5], [4.0, 73.5], [5.0, 30.0], [6.0, 36.5], [8.0, 45.0], [9.0, 35.0], [10.0, 38.5], [11.0, 31.0], [12.0, 44.5], [13.0, 29.0], [14.0, 30.5], [15.0, 30.5], [16.0, 364.0], [17.0, 44.0], [18.0, 44.5], [19.0, 56.0], [20.0, 953.5], [21.0, 867.0], [22.0, 923.0], [23.0, 1209.5], [24.0, 1155.5], [25.0, 1074.0], [26.0, 1020.5], [27.0, 1132.0], [28.0, 1141.5], [29.0, 1034.0], [30.0, 1168.0], [31.0, 1117.0], [33.0, 1165.0], [32.0, 1140.0], [35.0, 1029.0], [34.0, 1125.5], [36.0, 973.5], [37.0, 1196.0], [38.0, 1041.0], [39.0, 1081.0], [40.0, 869.5], [41.0, 905.0], [42.0, 953.0], [43.0, 1073.0], [45.0, 966.0], [44.0, 974.5], [47.0, 1057.0], [46.0, 920.0], [48.0, 949.5], [49.0, 1343.0], [50.0, 1068.5], [51.0, 171.0], [52.0, 1286.5], [55.0, 35.0], [56.0, 950.0], [1.0, 22.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 56.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 22.0, "minX": 1.0, "maxY": 1343.0, "series": [{"data": [[2.0, 30.5], [3.0, 27.5], [4.0, 52.0], [5.0, 30.0], [6.0, 35.5], [8.0, 45.0], [9.0, 34.5], [10.0, 38.5], [11.0, 30.0], [12.0, 44.0], [13.0, 28.5], [14.0, 30.5], [15.0, 30.0], [16.0, 364.0], [17.0, 43.0], [18.0, 43.0], [19.0, 56.0], [20.0, 953.0], [21.0, 866.5], [22.0, 923.0], [23.0, 1209.0], [24.0, 1153.5], [25.0, 1073.0], [26.0, 1018.0], [27.0, 1132.0], [28.0, 1141.5], [29.0, 1034.0], [30.0, 1168.0], [31.0, 1117.0], [33.0, 1164.5], [32.0, 1140.0], [35.0, 1029.0], [34.0, 1125.0], [36.0, 973.5], [37.0, 1196.0], [38.0, 1041.0], [39.0, 1080.0], [40.0, 869.5], [41.0, 904.0], [42.0, 953.0], [43.0, 1073.0], [45.0, 966.0], [44.0, 974.5], [47.0, 1057.0], [46.0, 919.5], [48.0, 949.5], [49.0, 1343.0], [50.0, 1068.5], [51.0, 171.0], [52.0, 1286.5], [55.0, 34.0], [56.0, 950.0], [1.0, 22.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 56.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.316666666666666, "minX": 1.58732688E12, "maxY": 33.266666666666666, "series": [{"data": [[1.58732742E12, 32.53333333333333], [1.58732694E12, 33.18333333333333], [1.58732724E12, 32.15], [1.58732706E12, 32.7], [1.58732754E12, 4.316666666666666], [1.58732736E12, 31.733333333333334], [1.58732688E12, 5.466666666666667], [1.58732718E12, 32.733333333333334], [1.58732748E12, 32.05], [1.587327E12, 33.266666666666666], [1.5873273E12, 33.0], [1.58732712E12, 31.866666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58732754E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.333333333333333, "minX": 1.58732688E12, "maxY": 33.4, "series": [{"data": [[1.58732742E12, 32.55], [1.58732694E12, 32.46666666666667], [1.58732724E12, 32.25], [1.58732706E12, 32.766666666666666], [1.58732754E12, 4.333333333333333], [1.58732736E12, 31.9], [1.58732688E12, 5.416666666666667], [1.58732718E12, 32.53333333333333], [1.58732748E12, 32.68333333333333], [1.587327E12, 33.4], [1.5873273E12, 32.85], [1.58732712E12, 31.85]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58732754E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.7, "minX": 1.58732688E12, "maxY": 16.733333333333334, "series": [{"data": [[1.58732694E12, 0.9666666666666667], [1.58732688E12, 0.7]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58732742E12, 16.35], [1.58732694E12, 15.566666666666666], [1.58732724E12, 16.216666666666665], [1.58732706E12, 16.45], [1.58732754E12, 2.316666666666667], [1.58732736E12, 16.0], [1.58732688E12, 2.25], [1.58732718E12, 16.266666666666666], [1.58732748E12, 16.483333333333334], [1.587327E12, 16.666666666666668], [1.5873273E12, 16.316666666666666], [1.58732712E12, 15.783333333333333]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58732742E12, 16.2], [1.58732694E12, 15.933333333333334], [1.58732724E12, 16.033333333333335], [1.58732706E12, 16.316666666666666], [1.58732754E12, 2.0166666666666666], [1.58732736E12, 15.9], [1.58732688E12, 2.466666666666667], [1.58732718E12, 16.266666666666666], [1.58732748E12, 16.2], [1.587327E12, 16.733333333333334], [1.5873273E12, 16.533333333333335], [1.58732712E12, 16.066666666666666]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58732754E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.333333333333333, "minX": 1.58732688E12, "maxY": 33.4, "series": [{"data": [[1.58732742E12, 32.55], [1.58732694E12, 32.46666666666667], [1.58732724E12, 32.25], [1.58732706E12, 32.766666666666666], [1.58732754E12, 4.333333333333333], [1.58732736E12, 31.9], [1.58732688E12, 5.416666666666667], [1.58732718E12, 32.53333333333333], [1.58732748E12, 32.68333333333333], [1.587327E12, 33.4], [1.5873273E12, 32.85], [1.58732712E12, 31.85]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58732754E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

