/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "maxY": 4073.0, "series": [{"data": [[0.0, 11.0], [0.1, 14.0], [0.2, 14.0], [0.3, 15.0], [0.4, 15.0], [0.5, 16.0], [0.6, 16.0], [0.7, 16.0], [0.8, 17.0], [0.9, 17.0], [1.0, 17.0], [1.1, 17.0], [1.2, 18.0], [1.3, 18.0], [1.4, 18.0], [1.5, 18.0], [1.6, 18.0], [1.7, 18.0], [1.8, 19.0], [1.9, 19.0], [2.0, 19.0], [2.1, 19.0], [2.2, 19.0], [2.3, 19.0], [2.4, 19.0], [2.5, 20.0], [2.6, 20.0], [2.7, 20.0], [2.8, 20.0], [2.9, 20.0], [3.0, 20.0], [3.1, 20.0], [3.2, 20.0], [3.3, 20.0], [3.4, 20.0], [3.5, 21.0], [3.6, 21.0], [3.7, 21.0], [3.8, 21.0], [3.9, 21.0], [4.0, 21.0], [4.1, 21.0], [4.2, 21.0], [4.3, 21.0], [4.4, 21.0], [4.5, 21.0], [4.6, 21.0], [4.7, 21.0], [4.8, 22.0], [4.9, 22.0], [5.0, 22.0], [5.1, 22.0], [5.2, 22.0], [5.3, 22.0], [5.4, 22.0], [5.5, 22.0], [5.6, 22.0], [5.7, 22.0], [5.8, 22.0], [5.9, 22.0], [6.0, 22.0], [6.1, 22.0], [6.2, 23.0], [6.3, 23.0], [6.4, 23.0], [6.5, 23.0], [6.6, 23.0], [6.7, 23.0], [6.8, 23.0], [6.9, 23.0], [7.0, 23.0], [7.1, 23.0], [7.2, 23.0], [7.3, 23.0], [7.4, 23.0], [7.5, 23.0], [7.6, 24.0], [7.7, 24.0], [7.8, 24.0], [7.9, 24.0], [8.0, 24.0], [8.1, 24.0], [8.2, 24.0], [8.3, 24.0], [8.4, 24.0], [8.5, 24.0], [8.6, 24.0], [8.7, 24.0], [8.8, 24.0], [8.9, 25.0], [9.0, 25.0], [9.1, 25.0], [9.2, 25.0], [9.3, 25.0], [9.4, 25.0], [9.5, 25.0], [9.6, 25.0], [9.7, 25.0], [9.8, 25.0], [9.9, 25.0], [10.0, 25.0], [10.1, 25.0], [10.2, 26.0], [10.3, 26.0], [10.4, 26.0], [10.5, 26.0], [10.6, 26.0], [10.7, 26.0], [10.8, 26.0], [10.9, 26.0], [11.0, 26.0], [11.1, 26.0], [11.2, 26.0], [11.3, 26.0], [11.4, 26.0], [11.5, 27.0], [11.6, 27.0], [11.7, 27.0], [11.8, 27.0], [11.9, 27.0], [12.0, 27.0], [12.1, 27.0], [12.2, 27.0], [12.3, 27.0], [12.4, 27.0], [12.5, 27.0], [12.6, 27.0], [12.7, 28.0], [12.8, 28.0], [12.9, 28.0], [13.0, 28.0], [13.1, 28.0], [13.2, 28.0], [13.3, 28.0], [13.4, 28.0], [13.5, 28.0], [13.6, 29.0], [13.7, 29.0], [13.8, 29.0], [13.9, 29.0], [14.0, 29.0], [14.1, 29.0], [14.2, 29.0], [14.3, 29.0], [14.4, 29.0], [14.5, 30.0], [14.6, 30.0], [14.7, 30.0], [14.8, 30.0], [14.9, 30.0], [15.0, 30.0], [15.1, 30.0], [15.2, 30.0], [15.3, 30.0], [15.4, 31.0], [15.5, 31.0], [15.6, 31.0], [15.7, 31.0], [15.8, 31.0], [15.9, 31.0], [16.0, 31.0], [16.1, 32.0], [16.2, 32.0], [16.3, 32.0], [16.4, 32.0], [16.5, 33.0], [16.6, 33.0], [16.7, 33.0], [16.8, 33.0], [16.9, 33.0], [17.0, 34.0], [17.1, 34.0], [17.2, 34.0], [17.3, 34.0], [17.4, 35.0], [17.5, 35.0], [17.6, 35.0], [17.7, 36.0], [17.8, 36.0], [17.9, 37.0], [18.0, 38.0], [18.1, 38.0], [18.2, 39.0], [18.3, 41.0], [18.4, 42.0], [18.5, 42.0], [18.6, 44.0], [18.7, 45.0], [18.8, 49.0], [18.9, 57.0], [19.0, 66.0], [19.1, 90.0], [19.2, 107.0], [19.3, 140.0], [19.4, 159.0], [19.5, 202.0], [19.6, 221.0], [19.7, 238.0], [19.8, 253.0], [19.9, 267.0], [20.0, 282.0], [20.1, 292.0], [20.2, 305.0], [20.3, 317.0], [20.4, 328.0], [20.5, 341.0], [20.6, 347.0], [20.7, 356.0], [20.8, 362.0], [20.9, 368.0], [21.0, 375.0], [21.1, 387.0], [21.2, 396.0], [21.3, 401.0], [21.4, 410.0], [21.5, 417.0], [21.6, 420.0], [21.7, 426.0], [21.8, 429.0], [21.9, 435.0], [22.0, 439.0], [22.1, 444.0], [22.2, 447.0], [22.3, 452.0], [22.4, 454.0], [22.5, 459.0], [22.6, 465.0], [22.7, 469.0], [22.8, 475.0], [22.9, 482.0], [23.0, 485.0], [23.1, 489.0], [23.2, 492.0], [23.3, 496.0], [23.4, 500.0], [23.5, 503.0], [23.6, 507.0], [23.7, 509.0], [23.8, 512.0], [23.9, 515.0], [24.0, 520.0], [24.1, 522.0], [24.2, 526.0], [24.3, 531.0], [24.4, 535.0], [24.5, 538.0], [24.6, 543.0], [24.7, 547.0], [24.8, 548.0], [24.9, 551.0], [25.0, 557.0], [25.1, 561.0], [25.2, 565.0], [25.3, 567.0], [25.4, 571.0], [25.5, 574.0], [25.6, 576.0], [25.7, 579.0], [25.8, 580.0], [25.9, 583.0], [26.0, 585.0], [26.1, 587.0], [26.2, 589.0], [26.3, 592.0], [26.4, 595.0], [26.5, 598.0], [26.6, 601.0], [26.7, 605.0], [26.8, 608.0], [26.9, 611.0], [27.0, 614.0], [27.1, 616.0], [27.2, 618.0], [27.3, 622.0], [27.4, 625.0], [27.5, 628.0], [27.6, 631.0], [27.7, 635.0], [27.8, 638.0], [27.9, 641.0], [28.0, 644.0], [28.1, 647.0], [28.2, 650.0], [28.3, 653.0], [28.4, 656.0], [28.5, 658.0], [28.6, 660.0], [28.7, 663.0], [28.8, 665.0], [28.9, 668.0], [29.0, 670.0], [29.1, 673.0], [29.2, 675.0], [29.3, 677.0], [29.4, 680.0], [29.5, 683.0], [29.6, 686.0], [29.7, 688.0], [29.8, 690.0], [29.9, 692.0], [30.0, 693.0], [30.1, 698.0], [30.2, 700.0], [30.3, 702.0], [30.4, 704.0], [30.5, 706.0], [30.6, 710.0], [30.7, 712.0], [30.8, 714.0], [30.9, 717.0], [31.0, 718.0], [31.1, 722.0], [31.2, 724.0], [31.3, 728.0], [31.4, 730.0], [31.5, 731.0], [31.6, 733.0], [31.7, 734.0], [31.8, 736.0], [31.9, 737.0], [32.0, 741.0], [32.1, 743.0], [32.2, 745.0], [32.3, 746.0], [32.4, 749.0], [32.5, 750.0], [32.6, 752.0], [32.7, 754.0], [32.8, 756.0], [32.9, 757.0], [33.0, 760.0], [33.1, 761.0], [33.2, 765.0], [33.3, 767.0], [33.4, 770.0], [33.5, 772.0], [33.6, 774.0], [33.7, 776.0], [33.8, 778.0], [33.9, 780.0], [34.0, 781.0], [34.1, 783.0], [34.2, 785.0], [34.3, 788.0], [34.4, 789.0], [34.5, 790.0], [34.6, 791.0], [34.7, 793.0], [34.8, 795.0], [34.9, 797.0], [35.0, 799.0], [35.1, 801.0], [35.2, 803.0], [35.3, 804.0], [35.4, 805.0], [35.5, 807.0], [35.6, 809.0], [35.7, 811.0], [35.8, 814.0], [35.9, 816.0], [36.0, 818.0], [36.1, 820.0], [36.2, 823.0], [36.3, 825.0], [36.4, 827.0], [36.5, 828.0], [36.6, 831.0], [36.7, 833.0], [36.8, 834.0], [36.9, 837.0], [37.0, 838.0], [37.1, 840.0], [37.2, 842.0], [37.3, 844.0], [37.4, 846.0], [37.5, 849.0], [37.6, 851.0], [37.7, 852.0], [37.8, 853.0], [37.9, 856.0], [38.0, 857.0], [38.1, 860.0], [38.2, 862.0], [38.3, 863.0], [38.4, 865.0], [38.5, 867.0], [38.6, 869.0], [38.7, 870.0], [38.8, 873.0], [38.9, 874.0], [39.0, 876.0], [39.1, 878.0], [39.2, 879.0], [39.3, 881.0], [39.4, 884.0], [39.5, 886.0], [39.6, 888.0], [39.7, 890.0], [39.8, 892.0], [39.9, 893.0], [40.0, 896.0], [40.1, 897.0], [40.2, 900.0], [40.3, 901.0], [40.4, 902.0], [40.5, 903.0], [40.6, 905.0], [40.7, 906.0], [40.8, 907.0], [40.9, 909.0], [41.0, 911.0], [41.1, 912.0], [41.2, 913.0], [41.3, 914.0], [41.4, 916.0], [41.5, 917.0], [41.6, 920.0], [41.7, 921.0], [41.8, 923.0], [41.9, 926.0], [42.0, 927.0], [42.1, 928.0], [42.2, 930.0], [42.3, 932.0], [42.4, 935.0], [42.5, 937.0], [42.6, 938.0], [42.7, 940.0], [42.8, 941.0], [42.9, 943.0], [43.0, 944.0], [43.1, 945.0], [43.2, 947.0], [43.3, 948.0], [43.4, 949.0], [43.5, 951.0], [43.6, 952.0], [43.7, 954.0], [43.8, 956.0], [43.9, 959.0], [44.0, 961.0], [44.1, 963.0], [44.2, 965.0], [44.3, 966.0], [44.4, 967.0], [44.5, 970.0], [44.6, 972.0], [44.7, 974.0], [44.8, 975.0], [44.9, 977.0], [45.0, 979.0], [45.1, 981.0], [45.2, 984.0], [45.3, 985.0], [45.4, 987.0], [45.5, 988.0], [45.6, 989.0], [45.7, 990.0], [45.8, 993.0], [45.9, 996.0], [46.0, 998.0], [46.1, 999.0], [46.2, 1000.0], [46.3, 1001.0], [46.4, 1002.0], [46.5, 1004.0], [46.6, 1005.0], [46.7, 1007.0], [46.8, 1009.0], [46.9, 1011.0], [47.0, 1012.0], [47.1, 1014.0], [47.2, 1016.0], [47.3, 1017.0], [47.4, 1018.0], [47.5, 1020.0], [47.6, 1021.0], [47.7, 1022.0], [47.8, 1024.0], [47.9, 1025.0], [48.0, 1026.0], [48.1, 1028.0], [48.2, 1030.0], [48.3, 1032.0], [48.4, 1034.0], [48.5, 1036.0], [48.6, 1039.0], [48.7, 1040.0], [48.8, 1041.0], [48.9, 1043.0], [49.0, 1044.0], [49.1, 1046.0], [49.2, 1048.0], [49.3, 1049.0], [49.4, 1050.0], [49.5, 1051.0], [49.6, 1052.0], [49.7, 1053.0], [49.8, 1056.0], [49.9, 1058.0], [50.0, 1059.0], [50.1, 1061.0], [50.2, 1063.0], [50.3, 1064.0], [50.4, 1066.0], [50.5, 1067.0], [50.6, 1068.0], [50.7, 1070.0], [50.8, 1071.0], [50.9, 1073.0], [51.0, 1074.0], [51.1, 1076.0], [51.2, 1078.0], [51.3, 1079.0], [51.4, 1080.0], [51.5, 1082.0], [51.6, 1084.0], [51.7, 1086.0], [51.8, 1088.0], [51.9, 1090.0], [52.0, 1091.0], [52.1, 1092.0], [52.2, 1094.0], [52.3, 1095.0], [52.4, 1097.0], [52.5, 1098.0], [52.6, 1099.0], [52.7, 1102.0], [52.8, 1104.0], [52.9, 1106.0], [53.0, 1109.0], [53.1, 1110.0], [53.2, 1112.0], [53.3, 1114.0], [53.4, 1115.0], [53.5, 1117.0], [53.6, 1120.0], [53.7, 1121.0], [53.8, 1122.0], [53.9, 1125.0], [54.0, 1126.0], [54.1, 1128.0], [54.2, 1130.0], [54.3, 1131.0], [54.4, 1133.0], [54.5, 1135.0], [54.6, 1137.0], [54.7, 1138.0], [54.8, 1140.0], [54.9, 1141.0], [55.0, 1142.0], [55.1, 1144.0], [55.2, 1145.0], [55.3, 1147.0], [55.4, 1150.0], [55.5, 1151.0], [55.6, 1152.0], [55.7, 1154.0], [55.8, 1154.0], [55.9, 1156.0], [56.0, 1157.0], [56.1, 1158.0], [56.2, 1161.0], [56.3, 1162.0], [56.4, 1164.0], [56.5, 1166.0], [56.6, 1167.0], [56.7, 1168.0], [56.8, 1170.0], [56.9, 1173.0], [57.0, 1174.0], [57.1, 1176.0], [57.2, 1177.0], [57.3, 1179.0], [57.4, 1181.0], [57.5, 1181.0], [57.6, 1184.0], [57.7, 1185.0], [57.8, 1186.0], [57.9, 1187.0], [58.0, 1188.0], [58.1, 1190.0], [58.2, 1191.0], [58.3, 1192.0], [58.4, 1193.0], [58.5, 1195.0], [58.6, 1197.0], [58.7, 1198.0], [58.8, 1199.0], [58.9, 1201.0], [59.0, 1202.0], [59.1, 1203.0], [59.2, 1204.0], [59.3, 1206.0], [59.4, 1207.0], [59.5, 1209.0], [59.6, 1211.0], [59.7, 1213.0], [59.8, 1214.0], [59.9, 1216.0], [60.0, 1218.0], [60.1, 1219.0], [60.2, 1221.0], [60.3, 1223.0], [60.4, 1225.0], [60.5, 1227.0], [60.6, 1228.0], [60.7, 1231.0], [60.8, 1233.0], [60.9, 1235.0], [61.0, 1236.0], [61.1, 1238.0], [61.2, 1239.0], [61.3, 1241.0], [61.4, 1242.0], [61.5, 1244.0], [61.6, 1246.0], [61.7, 1249.0], [61.8, 1250.0], [61.9, 1251.0], [62.0, 1253.0], [62.1, 1254.0], [62.2, 1255.0], [62.3, 1257.0], [62.4, 1260.0], [62.5, 1262.0], [62.6, 1263.0], [62.7, 1265.0], [62.8, 1267.0], [62.9, 1268.0], [63.0, 1270.0], [63.1, 1271.0], [63.2, 1273.0], [63.3, 1274.0], [63.4, 1276.0], [63.5, 1278.0], [63.6, 1280.0], [63.7, 1281.0], [63.8, 1283.0], [63.9, 1285.0], [64.0, 1286.0], [64.1, 1288.0], [64.2, 1289.0], [64.3, 1290.0], [64.4, 1292.0], [64.5, 1293.0], [64.6, 1294.0], [64.7, 1296.0], [64.8, 1298.0], [64.9, 1299.0], [65.0, 1301.0], [65.1, 1302.0], [65.2, 1304.0], [65.3, 1306.0], [65.4, 1306.0], [65.5, 1308.0], [65.6, 1310.0], [65.7, 1313.0], [65.8, 1314.0], [65.9, 1316.0], [66.0, 1317.0], [66.1, 1318.0], [66.2, 1320.0], [66.3, 1322.0], [66.4, 1323.0], [66.5, 1326.0], [66.6, 1327.0], [66.7, 1328.0], [66.8, 1330.0], [66.9, 1331.0], [67.0, 1334.0], [67.1, 1336.0], [67.2, 1337.0], [67.3, 1339.0], [67.4, 1341.0], [67.5, 1344.0], [67.6, 1345.0], [67.7, 1348.0], [67.8, 1349.0], [67.9, 1350.0], [68.0, 1352.0], [68.1, 1353.0], [68.2, 1355.0], [68.3, 1356.0], [68.4, 1358.0], [68.5, 1360.0], [68.6, 1363.0], [68.7, 1364.0], [68.8, 1366.0], [68.9, 1366.0], [69.0, 1369.0], [69.1, 1370.0], [69.2, 1372.0], [69.3, 1373.0], [69.4, 1375.0], [69.5, 1376.0], [69.6, 1378.0], [69.7, 1380.0], [69.8, 1382.0], [69.9, 1384.0], [70.0, 1385.0], [70.1, 1387.0], [70.2, 1389.0], [70.3, 1391.0], [70.4, 1393.0], [70.5, 1394.0], [70.6, 1396.0], [70.7, 1398.0], [70.8, 1400.0], [70.9, 1401.0], [71.0, 1404.0], [71.1, 1406.0], [71.2, 1409.0], [71.3, 1410.0], [71.4, 1411.0], [71.5, 1413.0], [71.6, 1415.0], [71.7, 1417.0], [71.8, 1419.0], [71.9, 1422.0], [72.0, 1424.0], [72.1, 1428.0], [72.2, 1430.0], [72.3, 1431.0], [72.4, 1434.0], [72.5, 1436.0], [72.6, 1437.0], [72.7, 1439.0], [72.8, 1441.0], [72.9, 1443.0], [73.0, 1445.0], [73.1, 1447.0], [73.2, 1449.0], [73.3, 1451.0], [73.4, 1453.0], [73.5, 1456.0], [73.6, 1458.0], [73.7, 1462.0], [73.8, 1464.0], [73.9, 1465.0], [74.0, 1466.0], [74.1, 1468.0], [74.2, 1471.0], [74.3, 1473.0], [74.4, 1474.0], [74.5, 1476.0], [74.6, 1477.0], [74.7, 1479.0], [74.8, 1481.0], [74.9, 1483.0], [75.0, 1484.0], [75.1, 1487.0], [75.2, 1489.0], [75.3, 1491.0], [75.4, 1493.0], [75.5, 1494.0], [75.6, 1496.0], [75.7, 1498.0], [75.8, 1500.0], [75.9, 1501.0], [76.0, 1504.0], [76.1, 1508.0], [76.2, 1509.0], [76.3, 1511.0], [76.4, 1514.0], [76.5, 1518.0], [76.6, 1522.0], [76.7, 1524.0], [76.8, 1526.0], [76.9, 1529.0], [77.0, 1530.0], [77.1, 1532.0], [77.2, 1536.0], [77.3, 1538.0], [77.4, 1540.0], [77.5, 1542.0], [77.6, 1545.0], [77.7, 1546.0], [77.8, 1548.0], [77.9, 1550.0], [78.0, 1552.0], [78.1, 1554.0], [78.2, 1558.0], [78.3, 1559.0], [78.4, 1561.0], [78.5, 1563.0], [78.6, 1566.0], [78.7, 1567.0], [78.8, 1569.0], [78.9, 1572.0], [79.0, 1573.0], [79.1, 1576.0], [79.2, 1578.0], [79.3, 1581.0], [79.4, 1583.0], [79.5, 1586.0], [79.6, 1587.0], [79.7, 1589.0], [79.8, 1592.0], [79.9, 1594.0], [80.0, 1597.0], [80.1, 1599.0], [80.2, 1603.0], [80.3, 1605.0], [80.4, 1607.0], [80.5, 1609.0], [80.6, 1611.0], [80.7, 1614.0], [80.8, 1616.0], [80.9, 1618.0], [81.0, 1622.0], [81.1, 1624.0], [81.2, 1627.0], [81.3, 1629.0], [81.4, 1632.0], [81.5, 1633.0], [81.6, 1636.0], [81.7, 1639.0], [81.8, 1642.0], [81.9, 1643.0], [82.0, 1646.0], [82.1, 1648.0], [82.2, 1650.0], [82.3, 1652.0], [82.4, 1654.0], [82.5, 1656.0], [82.6, 1658.0], [82.7, 1661.0], [82.8, 1664.0], [82.9, 1666.0], [83.0, 1667.0], [83.1, 1669.0], [83.2, 1671.0], [83.3, 1673.0], [83.4, 1675.0], [83.5, 1678.0], [83.6, 1680.0], [83.7, 1682.0], [83.8, 1686.0], [83.9, 1689.0], [84.0, 1692.0], [84.1, 1693.0], [84.2, 1697.0], [84.3, 1701.0], [84.4, 1703.0], [84.5, 1707.0], [84.6, 1708.0], [84.7, 1711.0], [84.8, 1716.0], [84.9, 1720.0], [85.0, 1722.0], [85.1, 1726.0], [85.2, 1730.0], [85.3, 1732.0], [85.4, 1734.0], [85.5, 1737.0], [85.6, 1740.0], [85.7, 1743.0], [85.8, 1746.0], [85.9, 1748.0], [86.0, 1751.0], [86.1, 1753.0], [86.2, 1756.0], [86.3, 1758.0], [86.4, 1760.0], [86.5, 1763.0], [86.6, 1766.0], [86.7, 1768.0], [86.8, 1770.0], [86.9, 1772.0], [87.0, 1776.0], [87.1, 1778.0], [87.2, 1781.0], [87.3, 1783.0], [87.4, 1786.0], [87.5, 1790.0], [87.6, 1791.0], [87.7, 1795.0], [87.8, 1799.0], [87.9, 1802.0], [88.0, 1805.0], [88.1, 1809.0], [88.2, 1812.0], [88.3, 1816.0], [88.4, 1818.0], [88.5, 1822.0], [88.6, 1827.0], [88.7, 1832.0], [88.8, 1836.0], [88.9, 1839.0], [89.0, 1843.0], [89.1, 1846.0], [89.2, 1850.0], [89.3, 1854.0], [89.4, 1858.0], [89.5, 1861.0], [89.6, 1864.0], [89.7, 1866.0], [89.8, 1872.0], [89.9, 1876.0], [90.0, 1880.0], [90.1, 1883.0], [90.2, 1887.0], [90.3, 1890.0], [90.4, 1895.0], [90.5, 1899.0], [90.6, 1903.0], [90.7, 1906.0], [90.8, 1908.0], [90.9, 1911.0], [91.0, 1914.0], [91.1, 1920.0], [91.2, 1924.0], [91.3, 1930.0], [91.4, 1934.0], [91.5, 1940.0], [91.6, 1946.0], [91.7, 1955.0], [91.8, 1960.0], [91.9, 1964.0], [92.0, 1970.0], [92.1, 1973.0], [92.2, 1980.0], [92.3, 1984.0], [92.4, 1990.0], [92.5, 1997.0], [92.6, 2001.0], [92.7, 2005.0], [92.8, 2011.0], [92.9, 2014.0], [93.0, 2021.0], [93.1, 2027.0], [93.2, 2033.0], [93.3, 2038.0], [93.4, 2042.0], [93.5, 2051.0], [93.6, 2056.0], [93.7, 2062.0], [93.8, 2068.0], [93.9, 2071.0], [94.0, 2077.0], [94.1, 2081.0], [94.2, 2086.0], [94.3, 2090.0], [94.4, 2096.0], [94.5, 2102.0], [94.6, 2107.0], [94.7, 2114.0], [94.8, 2119.0], [94.9, 2125.0], [95.0, 2131.0], [95.1, 2138.0], [95.2, 2148.0], [95.3, 2154.0], [95.4, 2159.0], [95.5, 2166.0], [95.6, 2175.0], [95.7, 2181.0], [95.8, 2186.0], [95.9, 2196.0], [96.0, 2206.0], [96.1, 2222.0], [96.2, 2231.0], [96.3, 2241.0], [96.4, 2255.0], [96.5, 2269.0], [96.6, 2280.0], [96.7, 2290.0], [96.8, 2302.0], [96.9, 2316.0], [97.0, 2324.0], [97.1, 2333.0], [97.2, 2352.0], [97.3, 2363.0], [97.4, 2371.0], [97.5, 2382.0], [97.6, 2387.0], [97.7, 2404.0], [97.8, 2417.0], [97.9, 2429.0], [98.0, 2441.0], [98.1, 2466.0], [98.2, 2489.0], [98.3, 2506.0], [98.4, 2523.0], [98.5, 2543.0], [98.6, 2561.0], [98.7, 2580.0], [98.8, 2610.0], [98.9, 2648.0], [99.0, 2669.0], [99.1, 2728.0], [99.2, 2760.0], [99.3, 2804.0], [99.4, 2856.0], [99.5, 2890.0], [99.6, 2926.0], [99.7, 3000.0], [99.8, 3114.0], [99.9, 3228.0], [100.0, 3983.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 151.0], [0.1, 151.0], [0.2, 151.0], [0.3, 151.0], [0.4, 151.0], [0.5, 151.0], [0.6, 151.0], [0.7, 151.0], [0.8, 151.0], [0.9, 151.0], [1.0, 152.0], [1.1, 152.0], [1.2, 152.0], [1.3, 152.0], [1.4, 152.0], [1.5, 152.0], [1.6, 152.0], [1.7, 152.0], [1.8, 152.0], [1.9, 152.0], [2.0, 153.0], [2.1, 153.0], [2.2, 153.0], [2.3, 153.0], [2.4, 153.0], [2.5, 153.0], [2.6, 153.0], [2.7, 153.0], [2.8, 153.0], [2.9, 153.0], [3.0, 154.0], [3.1, 154.0], [3.2, 154.0], [3.3, 154.0], [3.4, 154.0], [3.5, 154.0], [3.6, 154.0], [3.7, 154.0], [3.8, 154.0], [3.9, 154.0], [4.0, 155.0], [4.1, 155.0], [4.2, 155.0], [4.3, 155.0], [4.4, 155.0], [4.5, 155.0], [4.6, 155.0], [4.7, 155.0], [4.8, 155.0], [4.9, 155.0], [5.0, 155.0], [5.1, 155.0], [5.2, 155.0], [5.3, 155.0], [5.4, 155.0], [5.5, 155.0], [5.6, 155.0], [5.7, 155.0], [5.8, 155.0], [5.9, 155.0], [6.0, 156.0], [6.1, 156.0], [6.2, 156.0], [6.3, 156.0], [6.4, 156.0], [6.5, 156.0], [6.6, 156.0], [6.7, 156.0], [6.8, 156.0], [6.9, 156.0], [7.0, 157.0], [7.1, 157.0], [7.2, 157.0], [7.3, 157.0], [7.4, 157.0], [7.5, 157.0], [7.6, 157.0], [7.7, 157.0], [7.8, 157.0], [7.9, 157.0], [8.0, 157.0], [8.1, 157.0], [8.2, 157.0], [8.3, 157.0], [8.4, 157.0], [8.5, 157.0], [8.6, 157.0], [8.7, 157.0], [8.8, 157.0], [8.9, 157.0], [9.0, 158.0], [9.1, 158.0], [9.2, 158.0], [9.3, 158.0], [9.4, 158.0], [9.5, 158.0], [9.6, 158.0], [9.7, 158.0], [9.8, 158.0], [9.9, 158.0], [10.0, 158.0], [10.1, 158.0], [10.2, 158.0], [10.3, 158.0], [10.4, 158.0], [10.5, 158.0], [10.6, 158.0], [10.7, 158.0], [10.8, 158.0], [10.9, 158.0], [11.0, 158.0], [11.1, 158.0], [11.2, 158.0], [11.3, 158.0], [11.4, 158.0], [11.5, 158.0], [11.6, 158.0], [11.7, 158.0], [11.8, 158.0], [11.9, 158.0], [12.0, 158.0], [12.1, 158.0], [12.2, 158.0], [12.3, 158.0], [12.4, 158.0], [12.5, 158.0], [12.6, 158.0], [12.7, 158.0], [12.8, 158.0], [12.9, 158.0], [13.0, 158.0], [13.1, 158.0], [13.2, 158.0], [13.3, 158.0], [13.4, 158.0], [13.5, 158.0], [13.6, 158.0], [13.7, 158.0], [13.8, 158.0], [13.9, 158.0], [14.0, 158.0], [14.1, 158.0], [14.2, 158.0], [14.3, 158.0], [14.4, 158.0], [14.5, 158.0], [14.6, 158.0], [14.7, 158.0], [14.8, 158.0], [14.9, 158.0], [15.0, 159.0], [15.1, 159.0], [15.2, 159.0], [15.3, 159.0], [15.4, 159.0], [15.5, 159.0], [15.6, 159.0], [15.7, 159.0], [15.8, 159.0], [15.9, 159.0], [16.0, 159.0], [16.1, 159.0], [16.2, 159.0], [16.3, 159.0], [16.4, 159.0], [16.5, 159.0], [16.6, 159.0], [16.7, 159.0], [16.8, 159.0], [16.9, 159.0], [17.0, 159.0], [17.1, 159.0], [17.2, 159.0], [17.3, 159.0], [17.4, 159.0], [17.5, 159.0], [17.6, 159.0], [17.7, 159.0], [17.8, 159.0], [17.9, 159.0], [18.0, 159.0], [18.1, 159.0], [18.2, 159.0], [18.3, 159.0], [18.4, 159.0], [18.5, 159.0], [18.6, 159.0], [18.7, 159.0], [18.8, 159.0], [18.9, 159.0], [19.0, 159.0], [19.1, 159.0], [19.2, 159.0], [19.3, 159.0], [19.4, 159.0], [19.5, 159.0], [19.6, 159.0], [19.7, 159.0], [19.8, 159.0], [19.9, 159.0], [20.0, 159.0], [20.1, 159.0], [20.2, 159.0], [20.3, 159.0], [20.4, 159.0], [20.5, 159.0], [20.6, 159.0], [20.7, 159.0], [20.8, 159.0], [20.9, 159.0], [21.0, 159.0], [21.1, 159.0], [21.2, 159.0], [21.3, 159.0], [21.4, 159.0], [21.5, 159.0], [21.6, 159.0], [21.7, 159.0], [21.8, 159.0], [21.9, 159.0], [22.0, 159.0], [22.1, 159.0], [22.2, 159.0], [22.3, 159.0], [22.4, 159.0], [22.5, 159.0], [22.6, 159.0], [22.7, 159.0], [22.8, 159.0], [22.9, 159.0], [23.0, 159.0], [23.1, 159.0], [23.2, 159.0], [23.3, 159.0], [23.4, 159.0], [23.5, 159.0], [23.6, 159.0], [23.7, 159.0], [23.8, 159.0], [23.9, 159.0], [24.0, 160.0], [24.1, 160.0], [24.2, 160.0], [24.3, 160.0], [24.4, 160.0], [24.5, 160.0], [24.6, 160.0], [24.7, 160.0], [24.8, 160.0], [24.9, 160.0], [25.0, 160.0], [25.1, 160.0], [25.2, 160.0], [25.3, 160.0], [25.4, 160.0], [25.5, 160.0], [25.6, 160.0], [25.7, 160.0], [25.8, 160.0], [25.9, 160.0], [26.0, 160.0], [26.1, 160.0], [26.2, 160.0], [26.3, 160.0], [26.4, 160.0], [26.5, 160.0], [26.6, 160.0], [26.7, 160.0], [26.8, 160.0], [26.9, 160.0], [27.0, 160.0], [27.1, 160.0], [27.2, 160.0], [27.3, 160.0], [27.4, 160.0], [27.5, 160.0], [27.6, 160.0], [27.7, 160.0], [27.8, 160.0], [27.9, 160.0], [28.0, 160.0], [28.1, 160.0], [28.2, 160.0], [28.3, 160.0], [28.4, 160.0], [28.5, 160.0], [28.6, 160.0], [28.7, 160.0], [28.8, 160.0], [28.9, 160.0], [29.0, 161.0], [29.1, 161.0], [29.2, 161.0], [29.3, 161.0], [29.4, 161.0], [29.5, 161.0], [29.6, 161.0], [29.7, 161.0], [29.8, 161.0], [29.9, 161.0], [30.0, 161.0], [30.1, 161.0], [30.2, 161.0], [30.3, 161.0], [30.4, 161.0], [30.5, 161.0], [30.6, 161.0], [30.7, 161.0], [30.8, 161.0], [30.9, 161.0], [31.0, 161.0], [31.1, 161.0], [31.2, 161.0], [31.3, 161.0], [31.4, 161.0], [31.5, 161.0], [31.6, 161.0], [31.7, 161.0], [31.8, 161.0], [31.9, 161.0], [32.0, 162.0], [32.1, 162.0], [32.2, 162.0], [32.3, 162.0], [32.4, 162.0], [32.5, 162.0], [32.6, 162.0], [32.7, 162.0], [32.8, 162.0], [32.9, 162.0], [33.0, 162.0], [33.1, 162.0], [33.2, 162.0], [33.3, 162.0], [33.4, 162.0], [33.5, 162.0], [33.6, 162.0], [33.7, 162.0], [33.8, 162.0], [33.9, 162.0], [34.0, 162.0], [34.1, 162.0], [34.2, 162.0], [34.3, 162.0], [34.4, 162.0], [34.5, 162.0], [34.6, 162.0], [34.7, 162.0], [34.8, 162.0], [34.9, 162.0], [35.0, 162.0], [35.1, 162.0], [35.2, 162.0], [35.3, 162.0], [35.4, 162.0], [35.5, 162.0], [35.6, 162.0], [35.7, 162.0], [35.8, 162.0], [35.9, 162.0], [36.0, 162.0], [36.1, 162.0], [36.2, 162.0], [36.3, 162.0], [36.4, 162.0], [36.5, 162.0], [36.6, 162.0], [36.7, 162.0], [36.8, 162.0], [36.9, 162.0], [37.0, 162.0], [37.1, 162.0], [37.2, 162.0], [37.3, 162.0], [37.4, 162.0], [37.5, 162.0], [37.6, 162.0], [37.7, 162.0], [37.8, 162.0], [37.9, 162.0], [38.0, 162.0], [38.1, 162.0], [38.2, 162.0], [38.3, 162.0], [38.4, 162.0], [38.5, 162.0], [38.6, 162.0], [38.7, 162.0], [38.8, 162.0], [38.9, 162.0], [39.0, 162.0], [39.1, 162.0], [39.2, 162.0], [39.3, 162.0], [39.4, 162.0], [39.5, 162.0], [39.6, 162.0], [39.7, 162.0], [39.8, 162.0], [39.9, 162.0], [40.0, 162.0], [40.1, 162.0], [40.2, 162.0], [40.3, 162.0], [40.4, 162.0], [40.5, 162.0], [40.6, 162.0], [40.7, 162.0], [40.8, 162.0], [40.9, 162.0], [41.0, 162.0], [41.1, 162.0], [41.2, 162.0], [41.3, 162.0], [41.4, 162.0], [41.5, 162.0], [41.6, 162.0], [41.7, 162.0], [41.8, 162.0], [41.9, 162.0], [42.0, 162.0], [42.1, 162.0], [42.2, 162.0], [42.3, 162.0], [42.4, 162.0], [42.5, 162.0], [42.6, 162.0], [42.7, 162.0], [42.8, 162.0], [42.9, 162.0], [43.0, 162.0], [43.1, 162.0], [43.2, 162.0], [43.3, 162.0], [43.4, 162.0], [43.5, 162.0], [43.6, 162.0], [43.7, 162.0], [43.8, 162.0], [43.9, 162.0], [44.0, 162.0], [44.1, 162.0], [44.2, 162.0], [44.3, 162.0], [44.4, 162.0], [44.5, 162.0], [44.6, 162.0], [44.7, 162.0], [44.8, 162.0], [44.9, 162.0], [45.0, 163.0], [45.1, 163.0], [45.2, 163.0], [45.3, 163.0], [45.4, 163.0], [45.5, 163.0], [45.6, 163.0], [45.7, 163.0], [45.8, 163.0], [45.9, 163.0], [46.0, 163.0], [46.1, 163.0], [46.2, 163.0], [46.3, 163.0], [46.4, 163.0], [46.5, 163.0], [46.6, 163.0], [46.7, 163.0], [46.8, 163.0], [46.9, 163.0], [47.0, 163.0], [47.1, 163.0], [47.2, 163.0], [47.3, 163.0], [47.4, 163.0], [47.5, 163.0], [47.6, 163.0], [47.7, 163.0], [47.8, 163.0], [47.9, 163.0], [48.0, 163.0], [48.1, 163.0], [48.2, 163.0], [48.3, 163.0], [48.4, 163.0], [48.5, 163.0], [48.6, 163.0], [48.7, 163.0], [48.8, 163.0], [48.9, 163.0], [49.0, 163.0], [49.1, 163.0], [49.2, 163.0], [49.3, 163.0], [49.4, 163.0], [49.5, 163.0], [49.6, 163.0], [49.7, 163.0], [49.8, 163.0], [49.9, 163.0], [50.0, 164.0], [50.1, 164.0], [50.2, 164.0], [50.3, 164.0], [50.4, 164.0], [50.5, 164.0], [50.6, 164.0], [50.7, 164.0], [50.8, 164.0], [50.9, 164.0], [51.0, 164.0], [51.1, 164.0], [51.2, 164.0], [51.3, 164.0], [51.4, 164.0], [51.5, 164.0], [51.6, 164.0], [51.7, 164.0], [51.8, 164.0], [51.9, 164.0], [52.0, 164.0], [52.1, 164.0], [52.2, 164.0], [52.3, 164.0], [52.4, 164.0], [52.5, 164.0], [52.6, 164.0], [52.7, 164.0], [52.8, 164.0], [52.9, 164.0], [53.0, 164.0], [53.1, 164.0], [53.2, 164.0], [53.3, 164.0], [53.4, 164.0], [53.5, 164.0], [53.6, 164.0], [53.7, 164.0], [53.8, 164.0], [53.9, 164.0], [54.0, 164.0], [54.1, 164.0], [54.2, 164.0], [54.3, 164.0], [54.4, 164.0], [54.5, 164.0], [54.6, 164.0], [54.7, 164.0], [54.8, 164.0], [54.9, 164.0], [55.0, 164.0], [55.1, 164.0], [55.2, 164.0], [55.3, 164.0], [55.4, 164.0], [55.5, 164.0], [55.6, 164.0], [55.7, 164.0], [55.8, 164.0], [55.9, 164.0], [56.0, 165.0], [56.1, 165.0], [56.2, 165.0], [56.3, 165.0], [56.4, 165.0], [56.5, 165.0], [56.6, 165.0], [56.7, 165.0], [56.8, 165.0], [56.9, 165.0], [57.0, 165.0], [57.1, 165.0], [57.2, 165.0], [57.3, 165.0], [57.4, 165.0], [57.5, 165.0], [57.6, 165.0], [57.7, 165.0], [57.8, 165.0], [57.9, 165.0], [58.0, 165.0], [58.1, 165.0], [58.2, 165.0], [58.3, 165.0], [58.4, 165.0], [58.5, 165.0], [58.6, 165.0], [58.7, 165.0], [58.8, 165.0], [58.9, 165.0], [59.0, 165.0], [59.1, 165.0], [59.2, 165.0], [59.3, 165.0], [59.4, 165.0], [59.5, 165.0], [59.6, 165.0], [59.7, 165.0], [59.8, 165.0], [59.9, 165.0], [60.0, 166.0], [60.1, 166.0], [60.2, 166.0], [60.3, 166.0], [60.4, 166.0], [60.5, 166.0], [60.6, 166.0], [60.7, 166.0], [60.8, 166.0], [60.9, 166.0], [61.0, 166.0], [61.1, 166.0], [61.2, 166.0], [61.3, 166.0], [61.4, 166.0], [61.5, 166.0], [61.6, 166.0], [61.7, 166.0], [61.8, 166.0], [61.9, 166.0], [62.0, 166.0], [62.1, 166.0], [62.2, 166.0], [62.3, 166.0], [62.4, 166.0], [62.5, 166.0], [62.6, 166.0], [62.7, 166.0], [62.8, 166.0], [62.9, 166.0], [63.0, 166.0], [63.1, 166.0], [63.2, 166.0], [63.3, 166.0], [63.4, 166.0], [63.5, 166.0], [63.6, 166.0], [63.7, 166.0], [63.8, 166.0], [63.9, 166.0], [64.0, 166.0], [64.1, 166.0], [64.2, 166.0], [64.3, 166.0], [64.4, 166.0], [64.5, 166.0], [64.6, 166.0], [64.7, 166.0], [64.8, 166.0], [64.9, 166.0], [65.0, 167.0], [65.1, 167.0], [65.2, 167.0], [65.3, 167.0], [65.4, 167.0], [65.5, 167.0], [65.6, 167.0], [65.7, 167.0], [65.8, 167.0], [65.9, 167.0], [66.0, 167.0], [66.1, 167.0], [66.2, 167.0], [66.3, 167.0], [66.4, 167.0], [66.5, 167.0], [66.6, 167.0], [66.7, 167.0], [66.8, 167.0], [66.9, 167.0], [67.0, 167.0], [67.1, 167.0], [67.2, 167.0], [67.3, 167.0], [67.4, 167.0], [67.5, 167.0], [67.6, 167.0], [67.7, 167.0], [67.8, 167.0], [67.9, 167.0], [68.0, 168.0], [68.1, 168.0], [68.2, 168.0], [68.3, 168.0], [68.4, 168.0], [68.5, 168.0], [68.6, 168.0], [68.7, 168.0], [68.8, 168.0], [68.9, 168.0], [69.0, 168.0], [69.1, 168.0], [69.2, 168.0], [69.3, 168.0], [69.4, 168.0], [69.5, 168.0], [69.6, 168.0], [69.7, 168.0], [69.8, 168.0], [69.9, 168.0], [70.0, 168.0], [70.1, 168.0], [70.2, 168.0], [70.3, 168.0], [70.4, 168.0], [70.5, 168.0], [70.6, 168.0], [70.7, 168.0], [70.8, 168.0], [70.9, 168.0], [71.0, 168.0], [71.1, 168.0], [71.2, 168.0], [71.3, 168.0], [71.4, 168.0], [71.5, 168.0], [71.6, 168.0], [71.7, 168.0], [71.8, 168.0], [71.9, 168.0], [72.0, 168.0], [72.1, 168.0], [72.2, 168.0], [72.3, 168.0], [72.4, 168.0], [72.5, 168.0], [72.6, 168.0], [72.7, 168.0], [72.8, 168.0], [72.9, 168.0], [73.0, 168.0], [73.1, 168.0], [73.2, 168.0], [73.3, 168.0], [73.4, 168.0], [73.5, 168.0], [73.6, 168.0], [73.7, 168.0], [73.8, 168.0], [73.9, 168.0], [74.0, 169.0], [74.1, 169.0], [74.2, 169.0], [74.3, 169.0], [74.4, 169.0], [74.5, 169.0], [74.6, 169.0], [74.7, 169.0], [74.8, 169.0], [74.9, 169.0], [75.0, 169.0], [75.1, 169.0], [75.2, 169.0], [75.3, 169.0], [75.4, 169.0], [75.5, 169.0], [75.6, 169.0], [75.7, 169.0], [75.8, 169.0], [75.9, 169.0], [76.0, 169.0], [76.1, 169.0], [76.2, 169.0], [76.3, 169.0], [76.4, 169.0], [76.5, 169.0], [76.6, 169.0], [76.7, 169.0], [76.8, 169.0], [76.9, 169.0], [77.0, 169.0], [77.1, 169.0], [77.2, 169.0], [77.3, 169.0], [77.4, 169.0], [77.5, 169.0], [77.6, 169.0], [77.7, 169.0], [77.8, 169.0], [77.9, 169.0], [78.0, 170.0], [78.1, 170.0], [78.2, 170.0], [78.3, 170.0], [78.4, 170.0], [78.5, 170.0], [78.6, 170.0], [78.7, 170.0], [78.8, 170.0], [78.9, 170.0], [79.0, 170.0], [79.1, 170.0], [79.2, 170.0], [79.3, 170.0], [79.4, 170.0], [79.5, 170.0], [79.6, 170.0], [79.7, 170.0], [79.8, 170.0], [79.9, 170.0], [80.0, 170.0], [80.1, 170.0], [80.2, 170.0], [80.3, 170.0], [80.4, 170.0], [80.5, 170.0], [80.6, 170.0], [80.7, 170.0], [80.8, 170.0], [80.9, 170.0], [81.0, 170.0], [81.1, 170.0], [81.2, 170.0], [81.3, 170.0], [81.4, 170.0], [81.5, 170.0], [81.6, 170.0], [81.7, 170.0], [81.8, 170.0], [81.9, 170.0], [82.0, 170.0], [82.1, 170.0], [82.2, 170.0], [82.3, 170.0], [82.4, 170.0], [82.5, 170.0], [82.6, 170.0], [82.7, 170.0], [82.8, 170.0], [82.9, 170.0], [83.0, 171.0], [83.1, 171.0], [83.2, 171.0], [83.3, 171.0], [83.4, 171.0], [83.5, 171.0], [83.6, 171.0], [83.7, 171.0], [83.8, 171.0], [83.9, 171.0], [84.0, 171.0], [84.1, 171.0], [84.2, 171.0], [84.3, 171.0], [84.4, 171.0], [84.5, 171.0], [84.6, 171.0], [84.7, 171.0], [84.8, 171.0], [84.9, 171.0], [85.0, 171.0], [85.1, 171.0], [85.2, 171.0], [85.3, 171.0], [85.4, 171.0], [85.5, 171.0], [85.6, 171.0], [85.7, 171.0], [85.8, 171.0], [85.9, 171.0], [86.0, 172.0], [86.1, 172.0], [86.2, 172.0], [86.3, 172.0], [86.4, 172.0], [86.5, 172.0], [86.6, 172.0], [86.7, 172.0], [86.8, 172.0], [86.9, 172.0], [87.0, 172.0], [87.1, 172.0], [87.2, 172.0], [87.3, 172.0], [87.4, 172.0], [87.5, 172.0], [87.6, 172.0], [87.7, 172.0], [87.8, 172.0], [87.9, 172.0], [88.0, 173.0], [88.1, 173.0], [88.2, 173.0], [88.3, 173.0], [88.4, 173.0], [88.5, 173.0], [88.6, 173.0], [88.7, 173.0], [88.8, 173.0], [88.9, 173.0], [89.0, 174.0], [89.1, 174.0], [89.2, 174.0], [89.3, 174.0], [89.4, 174.0], [89.5, 174.0], [89.6, 174.0], [89.7, 174.0], [89.8, 174.0], [89.9, 174.0], [90.0, 176.0], [90.1, 176.0], [90.2, 176.0], [90.3, 176.0], [90.4, 176.0], [90.5, 176.0], [90.6, 176.0], [90.7, 176.0], [90.8, 176.0], [90.9, 176.0], [91.0, 177.0], [91.1, 177.0], [91.2, 177.0], [91.3, 177.0], [91.4, 177.0], [91.5, 177.0], [91.6, 177.0], [91.7, 177.0], [91.8, 177.0], [91.9, 177.0], [92.0, 178.0], [92.1, 178.0], [92.2, 178.0], [92.3, 178.0], [92.4, 178.0], [92.5, 178.0], [92.6, 178.0], [92.7, 178.0], [92.8, 178.0], [92.9, 178.0], [93.0, 179.0], [93.1, 179.0], [93.2, 179.0], [93.3, 179.0], [93.4, 179.0], [93.5, 179.0], [93.6, 179.0], [93.7, 179.0], [93.8, 179.0], [93.9, 179.0], [94.0, 181.0], [94.1, 181.0], [94.2, 181.0], [94.3, 181.0], [94.4, 181.0], [94.5, 181.0], [94.6, 181.0], [94.7, 181.0], [94.8, 181.0], [94.9, 181.0], [95.0, 182.0], [95.1, 182.0], [95.2, 182.0], [95.3, 182.0], [95.4, 182.0], [95.5, 182.0], [95.6, 182.0], [95.7, 182.0], [95.8, 182.0], [95.9, 182.0], [96.0, 183.0], [96.1, 183.0], [96.2, 183.0], [96.3, 183.0], [96.4, 183.0], [96.5, 183.0], [96.6, 183.0], [96.7, 183.0], [96.8, 183.0], [96.9, 183.0], [97.0, 191.0], [97.1, 191.0], [97.2, 191.0], [97.3, 191.0], [97.4, 191.0], [97.5, 191.0], [97.6, 191.0], [97.7, 191.0], [97.8, 191.0], [97.9, 191.0], [98.0, 192.0], [98.1, 192.0], [98.2, 192.0], [98.3, 192.0], [98.4, 192.0], [98.5, 192.0], [98.6, 192.0], [98.7, 192.0], [98.8, 192.0], [98.9, 192.0], [99.0, 252.0], [99.1, 252.0], [99.2, 252.0], [99.3, 252.0], [99.4, 252.0], [99.5, 252.0], [99.6, 252.0], [99.7, 252.0], [99.8, 252.0], [99.9, 252.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 11.0], [0.1, 14.0], [0.2, 15.0], [0.3, 15.0], [0.4, 15.0], [0.5, 16.0], [0.6, 16.0], [0.7, 17.0], [0.8, 17.0], [0.9, 17.0], [1.0, 17.0], [1.1, 17.0], [1.2, 18.0], [1.3, 18.0], [1.4, 18.0], [1.5, 18.0], [1.6, 18.0], [1.7, 18.0], [1.8, 18.0], [1.9, 19.0], [2.0, 19.0], [2.1, 19.0], [2.2, 19.0], [2.3, 19.0], [2.4, 19.0], [2.5, 19.0], [2.6, 20.0], [2.7, 20.0], [2.8, 20.0], [2.9, 20.0], [3.0, 20.0], [3.1, 20.0], [3.2, 20.0], [3.3, 20.0], [3.4, 20.0], [3.5, 21.0], [3.6, 21.0], [3.7, 21.0], [3.8, 21.0], [3.9, 21.0], [4.0, 21.0], [4.1, 21.0], [4.2, 21.0], [4.3, 21.0], [4.4, 21.0], [4.5, 21.0], [4.6, 22.0], [4.7, 22.0], [4.8, 22.0], [4.9, 22.0], [5.0, 22.0], [5.1, 22.0], [5.2, 22.0], [5.3, 22.0], [5.4, 22.0], [5.5, 22.0], [5.6, 22.0], [5.7, 22.0], [5.8, 22.0], [5.9, 23.0], [6.0, 23.0], [6.1, 23.0], [6.2, 23.0], [6.3, 23.0], [6.4, 23.0], [6.5, 23.0], [6.6, 23.0], [6.7, 23.0], [6.8, 23.0], [6.9, 23.0], [7.0, 23.0], [7.1, 23.0], [7.2, 24.0], [7.3, 24.0], [7.4, 24.0], [7.5, 24.0], [7.6, 24.0], [7.7, 24.0], [7.8, 24.0], [7.9, 24.0], [8.0, 24.0], [8.1, 24.0], [8.2, 24.0], [8.3, 24.0], [8.4, 24.0], [8.5, 25.0], [8.6, 25.0], [8.7, 25.0], [8.8, 25.0], [8.9, 25.0], [9.0, 25.0], [9.1, 25.0], [9.2, 25.0], [9.3, 25.0], [9.4, 25.0], [9.5, 25.0], [9.6, 25.0], [9.7, 25.0], [9.8, 25.0], [9.9, 26.0], [10.0, 26.0], [10.1, 26.0], [10.2, 26.0], [10.3, 26.0], [10.4, 26.0], [10.5, 26.0], [10.6, 26.0], [10.7, 26.0], [10.8, 26.0], [10.9, 26.0], [11.0, 26.0], [11.1, 27.0], [11.2, 27.0], [11.3, 27.0], [11.4, 27.0], [11.5, 27.0], [11.6, 27.0], [11.7, 27.0], [11.8, 27.0], [11.9, 27.0], [12.0, 27.0], [12.1, 27.0], [12.2, 28.0], [12.3, 28.0], [12.4, 28.0], [12.5, 28.0], [12.6, 28.0], [12.7, 28.0], [12.8, 28.0], [12.9, 28.0], [13.0, 28.0], [13.1, 28.0], [13.2, 28.0], [13.3, 29.0], [13.4, 29.0], [13.5, 29.0], [13.6, 29.0], [13.7, 29.0], [13.8, 29.0], [13.9, 29.0], [14.0, 29.0], [14.1, 29.0], [14.2, 30.0], [14.3, 30.0], [14.4, 30.0], [14.5, 30.0], [14.6, 30.0], [14.7, 30.0], [14.8, 30.0], [14.9, 30.0], [15.0, 30.0], [15.1, 31.0], [15.2, 31.0], [15.3, 31.0], [15.4, 31.0], [15.5, 31.0], [15.6, 31.0], [15.7, 31.0], [15.8, 32.0], [15.9, 32.0], [16.0, 32.0], [16.1, 32.0], [16.2, 32.0], [16.3, 32.0], [16.4, 32.0], [16.5, 33.0], [16.6, 33.0], [16.7, 33.0], [16.8, 33.0], [16.9, 34.0], [17.0, 34.0], [17.1, 34.0], [17.2, 34.0], [17.3, 34.0], [17.4, 35.0], [17.5, 35.0], [17.6, 35.0], [17.7, 36.0], [17.8, 36.0], [17.9, 37.0], [18.0, 37.0], [18.1, 38.0], [18.2, 38.0], [18.3, 39.0], [18.4, 40.0], [18.5, 41.0], [18.6, 42.0], [18.7, 43.0], [18.8, 44.0], [18.9, 46.0], [19.0, 48.0], [19.1, 54.0], [19.2, 69.0], [19.3, 101.0], [19.4, 140.0], [19.5, 170.0], [19.6, 208.0], [19.7, 223.0], [19.8, 241.0], [19.9, 254.0], [20.0, 267.0], [20.1, 289.0], [20.2, 301.0], [20.3, 312.0], [20.4, 326.0], [20.5, 338.0], [20.6, 350.0], [20.7, 358.0], [20.8, 369.0], [20.9, 378.0], [21.0, 385.0], [21.1, 392.0], [21.2, 396.0], [21.3, 405.0], [21.4, 409.0], [21.5, 414.0], [21.6, 421.0], [21.7, 427.0], [21.8, 433.0], [21.9, 438.0], [22.0, 443.0], [22.1, 450.0], [22.2, 454.0], [22.3, 456.0], [22.4, 462.0], [22.5, 467.0], [22.6, 473.0], [22.7, 478.0], [22.8, 482.0], [22.9, 490.0], [23.0, 493.0], [23.1, 499.0], [23.2, 504.0], [23.3, 510.0], [23.4, 513.0], [23.5, 515.0], [23.6, 519.0], [23.7, 524.0], [23.8, 528.0], [23.9, 532.0], [24.0, 536.0], [24.1, 538.0], [24.2, 540.0], [24.3, 543.0], [24.4, 545.0], [24.5, 549.0], [24.6, 551.0], [24.7, 555.0], [24.8, 560.0], [24.9, 561.0], [25.0, 567.0], [25.1, 569.0], [25.2, 571.0], [25.3, 574.0], [25.4, 578.0], [25.5, 581.0], [25.6, 585.0], [25.7, 589.0], [25.8, 592.0], [25.9, 595.0], [26.0, 596.0], [26.1, 598.0], [26.2, 602.0], [26.3, 606.0], [26.4, 609.0], [26.5, 613.0], [26.6, 616.0], [26.7, 618.0], [26.8, 620.0], [26.9, 623.0], [27.0, 625.0], [27.1, 627.0], [27.2, 631.0], [27.3, 633.0], [27.4, 637.0], [27.5, 640.0], [27.6, 642.0], [27.7, 645.0], [27.8, 648.0], [27.9, 649.0], [28.0, 652.0], [28.1, 653.0], [28.2, 657.0], [28.3, 660.0], [28.4, 662.0], [28.5, 665.0], [28.6, 670.0], [28.7, 672.0], [28.8, 675.0], [28.9, 677.0], [29.0, 680.0], [29.1, 683.0], [29.2, 685.0], [29.3, 686.0], [29.4, 688.0], [29.5, 691.0], [29.6, 694.0], [29.7, 696.0], [29.8, 698.0], [29.9, 701.0], [30.0, 704.0], [30.1, 708.0], [30.2, 711.0], [30.3, 713.0], [30.4, 715.0], [30.5, 717.0], [30.6, 719.0], [30.7, 720.0], [30.8, 724.0], [30.9, 726.0], [31.0, 728.0], [31.1, 730.0], [31.2, 731.0], [31.3, 733.0], [31.4, 734.0], [31.5, 735.0], [31.6, 738.0], [31.7, 740.0], [31.8, 741.0], [31.9, 743.0], [32.0, 745.0], [32.1, 748.0], [32.2, 749.0], [32.3, 752.0], [32.4, 754.0], [32.5, 756.0], [32.6, 759.0], [32.7, 761.0], [32.8, 764.0], [32.9, 766.0], [33.0, 769.0], [33.1, 770.0], [33.2, 774.0], [33.3, 776.0], [33.4, 777.0], [33.5, 778.0], [33.6, 780.0], [33.7, 782.0], [33.8, 783.0], [33.9, 784.0], [34.0, 785.0], [34.1, 786.0], [34.2, 788.0], [34.3, 790.0], [34.4, 792.0], [34.5, 794.0], [34.6, 795.0], [34.7, 798.0], [34.8, 800.0], [34.9, 803.0], [35.0, 805.0], [35.1, 807.0], [35.2, 808.0], [35.3, 810.0], [35.4, 813.0], [35.5, 814.0], [35.6, 815.0], [35.7, 818.0], [35.8, 820.0], [35.9, 822.0], [36.0, 823.0], [36.1, 825.0], [36.2, 827.0], [36.3, 829.0], [36.4, 831.0], [36.5, 833.0], [36.6, 835.0], [36.7, 836.0], [36.8, 838.0], [36.9, 839.0], [37.0, 841.0], [37.1, 843.0], [37.2, 844.0], [37.3, 846.0], [37.4, 847.0], [37.5, 850.0], [37.6, 853.0], [37.7, 853.0], [37.8, 856.0], [37.9, 858.0], [38.0, 860.0], [38.1, 861.0], [38.2, 863.0], [38.3, 865.0], [38.4, 867.0], [38.5, 870.0], [38.6, 871.0], [38.7, 872.0], [38.8, 874.0], [38.9, 875.0], [39.0, 876.0], [39.1, 878.0], [39.2, 880.0], [39.3, 882.0], [39.4, 884.0], [39.5, 885.0], [39.6, 887.0], [39.7, 889.0], [39.8, 890.0], [39.9, 892.0], [40.0, 894.0], [40.1, 896.0], [40.2, 897.0], [40.3, 898.0], [40.4, 901.0], [40.5, 901.0], [40.6, 903.0], [40.7, 904.0], [40.8, 907.0], [40.9, 908.0], [41.0, 909.0], [41.1, 910.0], [41.2, 912.0], [41.3, 914.0], [41.4, 915.0], [41.5, 917.0], [41.6, 919.0], [41.7, 920.0], [41.8, 922.0], [41.9, 923.0], [42.0, 925.0], [42.1, 927.0], [42.2, 930.0], [42.3, 932.0], [42.4, 933.0], [42.5, 935.0], [42.6, 937.0], [42.7, 939.0], [42.8, 940.0], [42.9, 941.0], [43.0, 944.0], [43.1, 945.0], [43.2, 946.0], [43.3, 947.0], [43.4, 950.0], [43.5, 952.0], [43.6, 954.0], [43.7, 956.0], [43.8, 958.0], [43.9, 959.0], [44.0, 961.0], [44.1, 964.0], [44.2, 966.0], [44.3, 967.0], [44.4, 968.0], [44.5, 970.0], [44.6, 972.0], [44.7, 974.0], [44.8, 976.0], [44.9, 977.0], [45.0, 979.0], [45.1, 981.0], [45.2, 982.0], [45.3, 983.0], [45.4, 984.0], [45.5, 985.0], [45.6, 987.0], [45.7, 988.0], [45.8, 990.0], [45.9, 991.0], [46.0, 992.0], [46.1, 995.0], [46.2, 997.0], [46.3, 998.0], [46.4, 1000.0], [46.5, 1001.0], [46.6, 1003.0], [46.7, 1004.0], [46.8, 1006.0], [46.9, 1008.0], [47.0, 1010.0], [47.1, 1012.0], [47.2, 1013.0], [47.3, 1015.0], [47.4, 1017.0], [47.5, 1018.0], [47.6, 1019.0], [47.7, 1020.0], [47.8, 1023.0], [47.9, 1025.0], [48.0, 1025.0], [48.1, 1027.0], [48.2, 1029.0], [48.3, 1030.0], [48.4, 1031.0], [48.5, 1032.0], [48.6, 1034.0], [48.7, 1036.0], [48.8, 1037.0], [48.9, 1039.0], [49.0, 1040.0], [49.1, 1042.0], [49.2, 1043.0], [49.3, 1045.0], [49.4, 1047.0], [49.5, 1049.0], [49.6, 1050.0], [49.7, 1052.0], [49.8, 1054.0], [49.9, 1055.0], [50.0, 1056.0], [50.1, 1059.0], [50.2, 1060.0], [50.3, 1061.0], [50.4, 1064.0], [50.5, 1066.0], [50.6, 1067.0], [50.7, 1069.0], [50.8, 1069.0], [50.9, 1071.0], [51.0, 1072.0], [51.1, 1074.0], [51.2, 1075.0], [51.3, 1076.0], [51.4, 1077.0], [51.5, 1079.0], [51.6, 1081.0], [51.7, 1082.0], [51.8, 1084.0], [51.9, 1085.0], [52.0, 1086.0], [52.1, 1087.0], [52.2, 1089.0], [52.3, 1090.0], [52.4, 1092.0], [52.5, 1094.0], [52.6, 1096.0], [52.7, 1099.0], [52.8, 1100.0], [52.9, 1101.0], [53.0, 1103.0], [53.1, 1104.0], [53.2, 1106.0], [53.3, 1107.0], [53.4, 1108.0], [53.5, 1109.0], [53.6, 1110.0], [53.7, 1113.0], [53.8, 1114.0], [53.9, 1115.0], [54.0, 1116.0], [54.1, 1118.0], [54.2, 1120.0], [54.3, 1122.0], [54.4, 1123.0], [54.5, 1125.0], [54.6, 1127.0], [54.7, 1129.0], [54.8, 1131.0], [54.9, 1132.0], [55.0, 1134.0], [55.1, 1135.0], [55.2, 1137.0], [55.3, 1139.0], [55.4, 1140.0], [55.5, 1142.0], [55.6, 1144.0], [55.7, 1145.0], [55.8, 1148.0], [55.9, 1149.0], [56.0, 1152.0], [56.1, 1155.0], [56.2, 1156.0], [56.3, 1158.0], [56.4, 1160.0], [56.5, 1162.0], [56.6, 1163.0], [56.7, 1165.0], [56.8, 1167.0], [56.9, 1169.0], [57.0, 1171.0], [57.1, 1172.0], [57.2, 1174.0], [57.3, 1176.0], [57.4, 1178.0], [57.5, 1179.0], [57.6, 1180.0], [57.7, 1181.0], [57.8, 1182.0], [57.9, 1185.0], [58.0, 1187.0], [58.1, 1188.0], [58.2, 1190.0], [58.3, 1191.0], [58.4, 1193.0], [58.5, 1195.0], [58.6, 1196.0], [58.7, 1198.0], [58.8, 1199.0], [58.9, 1201.0], [59.0, 1203.0], [59.1, 1204.0], [59.2, 1205.0], [59.3, 1207.0], [59.4, 1208.0], [59.5, 1210.0], [59.6, 1211.0], [59.7, 1213.0], [59.8, 1214.0], [59.9, 1215.0], [60.0, 1217.0], [60.1, 1218.0], [60.2, 1219.0], [60.3, 1221.0], [60.4, 1222.0], [60.5, 1223.0], [60.6, 1225.0], [60.7, 1227.0], [60.8, 1228.0], [60.9, 1229.0], [61.0, 1230.0], [61.1, 1232.0], [61.2, 1233.0], [61.3, 1235.0], [61.4, 1236.0], [61.5, 1238.0], [61.6, 1240.0], [61.7, 1241.0], [61.8, 1244.0], [61.9, 1246.0], [62.0, 1248.0], [62.1, 1250.0], [62.2, 1253.0], [62.3, 1254.0], [62.4, 1256.0], [62.5, 1258.0], [62.6, 1259.0], [62.7, 1260.0], [62.8, 1262.0], [62.9, 1263.0], [63.0, 1265.0], [63.1, 1267.0], [63.2, 1268.0], [63.3, 1270.0], [63.4, 1271.0], [63.5, 1273.0], [63.6, 1275.0], [63.7, 1276.0], [63.8, 1280.0], [63.9, 1281.0], [64.0, 1284.0], [64.1, 1286.0], [64.2, 1288.0], [64.3, 1290.0], [64.4, 1292.0], [64.5, 1293.0], [64.6, 1295.0], [64.7, 1297.0], [64.8, 1297.0], [64.9, 1299.0], [65.0, 1301.0], [65.1, 1303.0], [65.2, 1304.0], [65.3, 1306.0], [65.4, 1308.0], [65.5, 1311.0], [65.6, 1313.0], [65.7, 1316.0], [65.8, 1317.0], [65.9, 1320.0], [66.0, 1321.0], [66.1, 1323.0], [66.2, 1325.0], [66.3, 1326.0], [66.4, 1328.0], [66.5, 1330.0], [66.6, 1332.0], [66.7, 1333.0], [66.8, 1334.0], [66.9, 1336.0], [67.0, 1339.0], [67.1, 1341.0], [67.2, 1342.0], [67.3, 1344.0], [67.4, 1346.0], [67.5, 1348.0], [67.6, 1349.0], [67.7, 1351.0], [67.8, 1354.0], [67.9, 1355.0], [68.0, 1357.0], [68.1, 1360.0], [68.2, 1362.0], [68.3, 1364.0], [68.4, 1366.0], [68.5, 1367.0], [68.6, 1368.0], [68.7, 1371.0], [68.8, 1373.0], [68.9, 1375.0], [69.0, 1376.0], [69.1, 1379.0], [69.2, 1381.0], [69.3, 1384.0], [69.4, 1385.0], [69.5, 1387.0], [69.6, 1390.0], [69.7, 1391.0], [69.8, 1394.0], [69.9, 1395.0], [70.0, 1397.0], [70.1, 1398.0], [70.2, 1400.0], [70.3, 1403.0], [70.4, 1405.0], [70.5, 1407.0], [70.6, 1409.0], [70.7, 1411.0], [70.8, 1413.0], [70.9, 1414.0], [71.0, 1416.0], [71.1, 1419.0], [71.2, 1421.0], [71.3, 1423.0], [71.4, 1426.0], [71.5, 1427.0], [71.6, 1428.0], [71.7, 1431.0], [71.8, 1433.0], [71.9, 1435.0], [72.0, 1436.0], [72.1, 1438.0], [72.2, 1440.0], [72.3, 1443.0], [72.4, 1445.0], [72.5, 1448.0], [72.6, 1450.0], [72.7, 1452.0], [72.8, 1454.0], [72.9, 1455.0], [73.0, 1457.0], [73.1, 1459.0], [73.2, 1461.0], [73.3, 1462.0], [73.4, 1464.0], [73.5, 1467.0], [73.6, 1468.0], [73.7, 1472.0], [73.8, 1474.0], [73.9, 1475.0], [74.0, 1477.0], [74.1, 1478.0], [74.2, 1480.0], [74.3, 1481.0], [74.4, 1484.0], [74.5, 1486.0], [74.6, 1487.0], [74.7, 1489.0], [74.8, 1490.0], [74.9, 1492.0], [75.0, 1494.0], [75.1, 1496.0], [75.2, 1498.0], [75.3, 1500.0], [75.4, 1502.0], [75.5, 1505.0], [75.6, 1506.0], [75.7, 1508.0], [75.8, 1509.0], [75.9, 1512.0], [76.0, 1513.0], [76.1, 1516.0], [76.2, 1520.0], [76.3, 1521.0], [76.4, 1524.0], [76.5, 1526.0], [76.6, 1527.0], [76.7, 1529.0], [76.8, 1531.0], [76.9, 1533.0], [77.0, 1537.0], [77.1, 1539.0], [77.2, 1540.0], [77.3, 1542.0], [77.4, 1544.0], [77.5, 1547.0], [77.6, 1549.0], [77.7, 1552.0], [77.8, 1553.0], [77.9, 1555.0], [78.0, 1558.0], [78.1, 1559.0], [78.2, 1561.0], [78.3, 1562.0], [78.4, 1564.0], [78.5, 1566.0], [78.6, 1568.0], [78.7, 1570.0], [78.8, 1574.0], [78.9, 1575.0], [79.0, 1577.0], [79.1, 1579.0], [79.2, 1580.0], [79.3, 1582.0], [79.4, 1584.0], [79.5, 1587.0], [79.6, 1589.0], [79.7, 1590.0], [79.8, 1593.0], [79.9, 1596.0], [80.0, 1598.0], [80.1, 1601.0], [80.2, 1603.0], [80.3, 1606.0], [80.4, 1609.0], [80.5, 1612.0], [80.6, 1616.0], [80.7, 1618.0], [80.8, 1620.0], [80.9, 1622.0], [81.0, 1623.0], [81.1, 1627.0], [81.2, 1629.0], [81.3, 1632.0], [81.4, 1635.0], [81.5, 1637.0], [81.6, 1640.0], [81.7, 1642.0], [81.8, 1646.0], [81.9, 1648.0], [82.0, 1650.0], [82.1, 1654.0], [82.2, 1658.0], [82.3, 1662.0], [82.4, 1666.0], [82.5, 1667.0], [82.6, 1671.0], [82.7, 1673.0], [82.8, 1675.0], [82.9, 1677.0], [83.0, 1680.0], [83.1, 1682.0], [83.2, 1686.0], [83.3, 1688.0], [83.4, 1690.0], [83.5, 1692.0], [83.6, 1694.0], [83.7, 1697.0], [83.8, 1700.0], [83.9, 1706.0], [84.0, 1708.0], [84.1, 1711.0], [84.2, 1714.0], [84.3, 1717.0], [84.4, 1721.0], [84.5, 1724.0], [84.6, 1726.0], [84.7, 1729.0], [84.8, 1731.0], [84.9, 1734.0], [85.0, 1736.0], [85.1, 1739.0], [85.2, 1742.0], [85.3, 1745.0], [85.4, 1747.0], [85.5, 1749.0], [85.6, 1751.0], [85.7, 1754.0], [85.8, 1757.0], [85.9, 1760.0], [86.0, 1763.0], [86.1, 1766.0], [86.2, 1770.0], [86.3, 1774.0], [86.4, 1778.0], [86.5, 1780.0], [86.6, 1784.0], [86.7, 1785.0], [86.8, 1790.0], [86.9, 1793.0], [87.0, 1797.0], [87.1, 1800.0], [87.2, 1802.0], [87.3, 1805.0], [87.4, 1808.0], [87.5, 1812.0], [87.6, 1814.0], [87.7, 1817.0], [87.8, 1819.0], [87.9, 1822.0], [88.0, 1826.0], [88.1, 1830.0], [88.2, 1834.0], [88.3, 1837.0], [88.4, 1841.0], [88.5, 1844.0], [88.6, 1848.0], [88.7, 1851.0], [88.8, 1853.0], [88.9, 1855.0], [89.0, 1860.0], [89.1, 1863.0], [89.2, 1866.0], [89.3, 1872.0], [89.4, 1876.0], [89.5, 1880.0], [89.6, 1888.0], [89.7, 1891.0], [89.8, 1893.0], [89.9, 1898.0], [90.0, 1902.0], [90.1, 1905.0], [90.2, 1909.0], [90.3, 1913.0], [90.4, 1915.0], [90.5, 1919.0], [90.6, 1925.0], [90.7, 1930.0], [90.8, 1932.0], [90.9, 1934.0], [91.0, 1940.0], [91.1, 1946.0], [91.2, 1951.0], [91.3, 1955.0], [91.4, 1960.0], [91.5, 1966.0], [91.6, 1971.0], [91.7, 1974.0], [91.8, 1980.0], [91.9, 1986.0], [92.0, 1992.0], [92.1, 1996.0], [92.2, 2001.0], [92.3, 2003.0], [92.4, 2008.0], [92.5, 2012.0], [92.6, 2019.0], [92.7, 2025.0], [92.8, 2029.0], [92.9, 2032.0], [93.0, 2034.0], [93.1, 2040.0], [93.2, 2043.0], [93.3, 2048.0], [93.4, 2055.0], [93.5, 2060.0], [93.6, 2064.0], [93.7, 2070.0], [93.8, 2074.0], [93.9, 2079.0], [94.0, 2083.0], [94.1, 2087.0], [94.2, 2094.0], [94.3, 2097.0], [94.4, 2107.0], [94.5, 2114.0], [94.6, 2121.0], [94.7, 2128.0], [94.8, 2136.0], [94.9, 2141.0], [95.0, 2144.0], [95.1, 2151.0], [95.2, 2159.0], [95.3, 2165.0], [95.4, 2168.0], [95.5, 2174.0], [95.6, 2191.0], [95.7, 2197.0], [95.8, 2205.0], [95.9, 2214.0], [96.0, 2219.0], [96.1, 2222.0], [96.2, 2233.0], [96.3, 2244.0], [96.4, 2252.0], [96.5, 2264.0], [96.6, 2275.0], [96.7, 2286.0], [96.8, 2300.0], [96.9, 2315.0], [97.0, 2325.0], [97.1, 2342.0], [97.2, 2352.0], [97.3, 2361.0], [97.4, 2368.0], [97.5, 2388.0], [97.6, 2395.0], [97.7, 2408.0], [97.8, 2423.0], [97.9, 2439.0], [98.0, 2448.0], [98.1, 2470.0], [98.2, 2486.0], [98.3, 2500.0], [98.4, 2517.0], [98.5, 2539.0], [98.6, 2574.0], [98.7, 2604.0], [98.8, 2616.0], [98.9, 2653.0], [99.0, 2678.0], [99.1, 2704.0], [99.2, 2740.0], [99.3, 2775.0], [99.4, 2792.0], [99.5, 2860.0], [99.6, 2928.0], [99.7, 3031.0], [99.8, 3173.0], [99.9, 3273.0], [100.0, 4073.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1929.0, "series": [{"data": [[0.0, 1915.0], [600.0, 362.0], [700.0, 485.0], [800.0, 515.0], [900.0, 597.0], [1000.0, 646.0], [1100.0, 618.0], [1200.0, 612.0], [1300.0, 587.0], [1400.0, 499.0], [1500.0, 433.0], [100.0, 33.0], [1600.0, 414.0], [1700.0, 358.0], [1800.0, 267.0], [1900.0, 207.0], [2000.0, 188.0], [2100.0, 149.0], [2300.0, 88.0], [2200.0, 85.0], [2400.0, 59.0], [2500.0, 52.0], [2600.0, 26.0], [2800.0, 23.0], [2700.0, 24.0], [2900.0, 18.0], [3000.0, 9.0], [3100.0, 9.0], [200.0, 68.0], [3200.0, 7.0], [3300.0, 3.0], [3400.0, 2.0], [3900.0, 1.0], [300.0, 108.0], [400.0, 215.0], [500.0, 318.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[100.0, 99.0], [200.0, 1.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1929.0], [600.0, 370.0], [700.0, 492.0], [800.0, 556.0], [900.0, 607.0], [1000.0, 636.0], [1100.0, 606.0], [1200.0, 615.0], [1300.0, 522.0], [1400.0, 509.0], [1500.0, 478.0], [100.0, 27.0], [1600.0, 375.0], [1700.0, 328.0], [1800.0, 286.0], [1900.0, 223.0], [2000.0, 215.0], [2100.0, 143.0], [2300.0, 86.0], [2200.0, 103.0], [2400.0, 64.0], [2500.0, 40.0], [2600.0, 41.0], [2700.0, 34.0], [2800.0, 14.0], [2900.0, 12.0], [3000.0, 6.0], [3100.0, 9.0], [200.0, 62.0], [3200.0, 7.0], [3300.0, 1.0], [3400.0, 2.0], [3500.0, 3.0], [3600.0, 2.0], [3800.0, 1.0], [4000.0, 1.0], [300.0, 103.0], [400.0, 190.0], [500.0, 302.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4754.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 10464.0, "series": [{"data": [[0.0, 4754.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 10464.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4882.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 22.78488372093023, "minX": 1.58656926E12, "maxY": 100.0, "series": [{"data": [[1.58656968E12, 100.0], [1.58656938E12, 100.0], [1.58656986E12, 77.71591526344373], [1.58656956E12, 100.0], [1.58656926E12, 25.05494505494506], [1.58656974E12, 100.0], [1.58656944E12, 100.0], [1.58656992E12, 22.78488372093023], [1.58656962E12, 100.0], [1.58656932E12, 82.05940594059416], [1.5865698E12, 100.0], [1.5865695E12, 100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58656992E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 21.0, "minX": 1.0, "maxY": 1337.8253968253966, "series": [{"data": [[2.0, 34.0], [4.0, 38.0], [5.0, 29.0], [6.0, 21.666666666666668], [7.0, 28.333333333333332], [8.0, 27.75], [9.0, 35.5], [10.0, 26.0], [11.0, 28.0], [12.0, 33.333333333333336], [13.0, 26.6], [14.0, 28.076923076923077], [15.0, 27.0], [16.0, 22.5], [17.0, 28.0], [18.0, 29.166666666666668], [19.0, 28.88888888888889], [20.0, 31.363636363636363], [21.0, 25.25], [22.0, 28.285714285714285], [23.0, 27.4], [24.0, 26.666666666666664], [25.0, 27.714285714285715], [26.0, 27.5], [27.0, 26.555555555555554], [28.0, 22.8], [29.0, 28.058823529411764], [30.0, 28.5], [31.0, 26.909090909090907], [32.0, 23.166666666666668], [33.0, 26.625], [34.0, 25.208333333333332], [35.0, 26.23076923076923], [36.0, 25.333333333333332], [37.0, 28.25], [38.0, 28.375000000000004], [39.0, 26.714285714285715], [40.0, 30.666666666666668], [41.0, 25.999999999999996], [42.0, 28.461538461538463], [43.0, 27.124999999999996], [44.0, 36.25], [45.0, 27.181818181818183], [46.0, 26.0], [47.0, 25.888888888888893], [48.0, 26.466666666666665], [49.0, 25.000000000000004], [50.0, 23.999999999999996], [51.0, 30.625], [52.0, 24.199999999999996], [53.0, 26.636363636363637], [54.0, 29.400000000000002], [55.0, 27.0], [56.0, 24.142857142857146], [57.0, 25.047619047619044], [58.0, 25.714285714285715], [59.0, 27.888888888888893], [60.0, 25.52631578947368], [61.0, 25.78125], [62.0, 41.333333333333336], [63.0, 106.11111111111111], [64.0, 230.56521739130437], [65.0, 96.00000000000001], [66.0, 27.708333333333332], [67.0, 26.238095238095234], [68.0, 26.624999999999996], [69.0, 28.054054054054063], [70.0, 27.5625], [71.0, 29.230769230769234], [72.0, 26.0], [73.0, 24.68], [74.0, 26.421052631578952], [75.0, 26.608695652173918], [76.0, 24.888888888888886], [77.0, 391.2666666666666], [78.0, 115.61111111111111], [79.0, 215.3125], [80.0, 221.43478260869568], [81.0, 441.5333333333333], [82.0, 50.625], [83.0, 135.3846153846154], [84.0, 528.0185185185184], [85.0, 551.6896551724137], [86.0, 651.0], [87.0, 325.375], [88.0, 878.8780487804877], [89.0, 27.615384615384617], [90.0, 866.7173913043478], [91.0, 351.22222222222223], [92.0, 147.625], [93.0, 604.4000000000001], [94.0, 758.4705882352941], [95.0, 635.774193548387], [96.0, 1071.7441860465115], [97.0, 1178.7142857142858], [98.0, 1290.1777777777777], [99.0, 1337.8253968253966], [100.0, 1164.727435103586]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[94.69389999999986, 1026.9453000000083]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 163.0], [3.0, 169.0], [4.0, 151.0], [5.0, 156.0], [6.0, 165.0], [7.0, 162.0], [8.0, 170.0], [9.0, 172.0], [10.0, 163.0], [11.0, 163.0], [12.0, 159.0], [13.0, 162.0], [14.0, 182.0], [15.0, 159.0], [16.0, 172.0], [17.0, 162.0], [18.0, 171.0], [19.0, 158.0], [20.0, 162.0], [21.0, 159.0], [22.0, 168.0], [23.0, 160.0], [24.0, 173.0], [25.0, 160.0], [26.0, 158.0], [27.0, 162.0], [28.0, 167.0], [29.0, 159.0], [30.0, 158.0], [31.0, 168.0], [32.0, 163.0], [33.0, 155.0], [34.0, 162.0], [35.0, 157.0], [36.0, 159.0], [37.0, 158.0], [38.0, 168.0], [39.0, 166.0], [40.0, 161.0], [41.0, 164.0], [42.0, 162.0], [43.0, 171.0], [44.0, 178.0], [45.0, 160.0], [46.0, 162.0], [47.0, 164.0], [48.0, 170.0], [49.0, 174.0], [50.0, 170.0], [51.0, 158.0], [52.0, 162.0], [53.0, 161.0], [54.0, 162.0], [55.0, 164.0], [56.0, 160.0], [57.0, 162.0], [58.0, 164.0], [59.0, 160.0], [60.0, 169.0], [61.0, 159.0], [62.0, 166.0], [63.0, 252.0], [64.0, 179.0], [65.0, 170.0], [66.0, 158.0], [67.0, 162.0], [68.0, 162.0], [69.0, 157.0], [70.0, 176.0], [71.0, 166.0], [72.0, 167.0], [73.0, 166.0], [74.0, 165.0], [75.0, 165.0], [76.0, 164.0], [77.0, 159.0], [78.0, 169.0], [79.0, 168.0], [80.0, 170.0], [81.0, 165.0], [82.0, 159.0], [83.0, 166.0], [84.0, 168.0], [85.0, 171.0], [86.0, 154.0], [87.0, 155.0], [88.0, 159.0], [89.0, 168.0], [90.0, 152.0], [91.0, 164.0], [92.0, 153.0], [93.0, 161.0], [94.0, 163.0], [95.0, 181.0], [96.0, 183.0], [97.0, 169.0], [98.0, 177.0], [99.0, 167.0], [100.0, 191.0], [1.0, 192.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[50.5, 165.77000000000004]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[3.0, 21.0], [4.0, 28.0], [5.0, 32.0], [6.0, 30.0], [7.0, 34.0], [8.0, 26.75], [9.0, 26.0], [10.0, 31.5], [11.0, 31.333333333333332], [12.0, 42.0], [13.0, 26.0], [14.0, 25.928571428571427], [15.0, 33.0], [16.0, 25.833333333333332], [17.0, 26.333333333333332], [18.0, 38.0], [19.0, 27.0], [20.0, 26.666666666666664], [21.0, 26.88888888888889], [22.0, 28.25], [23.0, 28.000000000000004], [24.0, 26.4], [25.0, 31.6], [26.0, 27.666666666666668], [27.0, 25.2], [28.0, 29.166666666666668], [29.0, 28.294117647058822], [30.0, 25.6], [31.0, 27.714285714285715], [32.0, 27.22222222222222], [33.0, 24.0], [34.0, 27.125000000000004], [35.0, 26.52631578947368], [36.0, 26.500000000000004], [37.0, 26.5], [38.0, 27.125], [39.0, 29.055555555555554], [40.0, 31.0], [41.0, 27.400000000000002], [42.0, 27.22222222222222], [43.0, 28.285714285714285], [44.0, 27.25], [45.0, 27.666666666666668], [46.0, 29.38461538461539], [47.0, 28.916666666666668], [48.0, 26.3125], [49.0, 30.200000000000003], [50.0, 25.000000000000004], [51.0, 29.692307692307686], [52.0, 23.0], [53.0, 28.900000000000002], [54.0, 29.18181818181818], [55.0, 26.272727272727277], [56.0, 25.222222222222225], [57.0, 29.102564102564095], [58.0, 28.0], [59.0, 30.5], [60.0, 27.147058823529417], [61.0, 25.05714285714286], [62.0, 31.66666666666667], [63.0, 66.0], [64.0, 252.25], [65.0, 78.93750000000001], [66.0, 26.708333333333336], [67.0, 28.173913043478258], [68.0, 26.052631578947366], [69.0, 26.93548387096774], [70.0, 24.312500000000004], [71.0, 26.962962962962965], [72.0, 30.999999999999996], [73.0, 25.578947368421055], [74.0, 29.062499999999996], [75.0, 26.885714285714293], [76.0, 26.799999999999997], [77.0, 318.7199999999999], [78.0, 103.69230769230768], [79.0, 163.66666666666666], [80.0, 309.58333333333337], [81.0, 140.3846153846154], [82.0, 112.11111111111111], [83.0, 86.06666666666666], [84.0, 542.0], [85.0, 619.8387096774193], [86.0, 682.1428571428571], [87.0, 262.63157894736844], [88.0, 797.2972972972973], [89.0, 28.0], [90.0, 975.54], [91.0, 626.9047619047619], [92.0, 25.687499999999996], [93.0, 578.6785714285714], [94.0, 605.1666666666666], [95.0, 642.0799999999998], [96.0, 1059.705882352941], [97.0, 1233.7391304347825], [98.0, 1222.6507936507935], [99.0, 1285.6363636363637], [100.0, 1169.9298809523898]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[94.7004999999998, 1031.0193000000029]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1221.3666666666666, "minX": 1.58656926E12, "maxY": 281034.2833333333, "series": [{"data": [[1.58656968E12, 218814.61666666667], [1.58656938E12, 214248.63333333333], [1.58656986E12, 209903.6], [1.58656956E12, 217441.03333333333], [1.58656926E12, 27657.966666666667], [1.58656974E12, 211852.33333333334], [1.58656944E12, 216758.46666666667], [1.58656992E12, 19609.9], [1.58656962E12, 224172.7], [1.58656932E12, 224640.45], [1.5865698E12, 216532.11666666667], [1.5865695E12, 281034.2833333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58656968E12, 13624.85], [1.58656938E12, 13340.816666666668], [1.58656986E12, 13071.616666666667], [1.58656956E12, 13539.783333333333], [1.58656926E12, 1810.85], [1.58656974E12, 13191.766666666666], [1.58656944E12, 13497.15], [1.58656992E12, 1221.3666666666666], [1.58656962E12, 13958.7], [1.58656932E12, 14133.8], [1.5865698E12, 13482.916666666666], [1.5865695E12, 17501.383333333335]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58656992E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 26.518518518518523, "minX": 1.58656926E12, "maxY": 1364.4473118279582, "series": [{"data": [[1.58656968E12, 1260.802713987473], [1.58656938E12, 1312.5731056563502], [1.58656986E12, 613.6036324786322], [1.58656956E12, 1318.614016736402], [1.58656926E12, 27.318584070796458], [1.58656974E12, 1294.477370689656], [1.58656944E12, 1259.2478991596636], [1.58656992E12, 27.46153846153846], [1.58656962E12, 1177.7616632860043], [1.58656932E12, 554.9056016597506], [1.5865698E12, 1289.0010526315784], [1.5865695E12, 545.4654190398691]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58656926E12, 163.8684210526316], [1.58656932E12, 166.93548387096774]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58656968E12, 1245.29552549428], [1.58656938E12, 1301.2547770700623], [1.58656986E12, 622.3569060773467], [1.58656956E12, 1249.4921135646691], [1.58656926E12, 28.254098360655743], [1.58656974E12, 1364.4473118279582], [1.58656944E12, 1268.3234984193903], [1.58656992E12, 26.518518518518523], [1.58656962E12, 1190.2826530612258], [1.58656932E12, 559.5915492957752], [1.5865698E12, 1291.9209694415183], [1.5865695E12, 573.8414239482206]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58656992E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 26.19753086419753, "minX": 1.58656926E12, "maxY": 1364.2086021505359, "series": [{"data": [[1.58656968E12, 1260.498956158664], [1.58656938E12, 1312.2582710779097], [1.58656986E12, 613.1976495726485], [1.58656956E12, 1318.3002092050208], [1.58656926E12, 26.93805309734514], [1.58656974E12, 1294.202586206897], [1.58656944E12, 1258.939075630251], [1.58656992E12, 26.978021978021975], [1.58656962E12, 1177.437119675458], [1.58656932E12, 554.557053941909], [1.5865698E12, 1288.695789473684], [1.5865695E12, 545.0374288039054]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58656926E12, 163.4210526315789], [1.58656932E12, 166.3870967741935]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58656968E12, 1245.027055150885], [1.58656938E12, 1300.9787685774952], [1.58656986E12, 622.0629834254133], [1.58656956E12, 1249.216614090431], [1.58656926E12, 27.901639344262293], [1.58656974E12, 1364.2086021505359], [1.58656944E12, 1268.0221285563737], [1.58656992E12, 26.19753086419753], [1.58656962E12, 1190.0030612244902], [1.58656932E12, 559.2897384305837], [1.5865698E12, 1291.6712328767142], [1.5865695E12, 573.5687702265377]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58656992E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58656926E12, "maxY": 1.342105263157894, "series": [{"data": [[1.58656968E12, 0.339248434237996], [1.58656938E12, 0.39381003201707576], [1.58656986E12, 0.16559829059829037], [1.58656956E12, 0.33054393305439367], [1.58656926E12, 0.2654867256637167], [1.58656974E12, 0.3362068965517245], [1.58656944E12, 0.4044117647058821], [1.58656992E12, 0.0], [1.58656962E12, 0.34279918864097364], [1.58656932E12, 0.20124481327800822], [1.5865698E12, 0.31473684210526337], [1.5865695E12, 0.12693246541903988]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58656926E12, 1.342105263157894], [1.58656932E12, 0.6612903225806454]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58656968E12, 0.42767950052029136], [1.58656938E12, 0.4554140127388537], [1.58656986E12, 0.4198895027624308], [1.58656956E12, 0.40063091482649865], [1.58656926E12, 0.5655737704918031], [1.58656974E12, 0.4107526881720428], [1.58656944E12, 0.4942044257112741], [1.58656992E12, 0.4691358024691357], [1.58656962E12, 0.3979591836734692], [1.58656932E12, 0.5402414486921523], [1.5865698E12, 0.39515279241306644], [1.5865695E12, 0.37783171521035624]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58656992E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 11.0, "minX": 1.58656926E12, "maxY": 4073.0, "series": [{"data": [[1.58656968E12, 3346.0], [1.58656938E12, 3419.0], [1.58656986E12, 2916.0], [1.58656956E12, 3285.0], [1.58656926E12, 192.0], [1.58656974E12, 3691.0], [1.58656944E12, 3451.0], [1.58656992E12, 43.0], [1.58656962E12, 3318.0], [1.58656932E12, 3579.0], [1.5865698E12, 3271.0], [1.5865695E12, 4073.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58656968E12, 208.0], [1.58656938E12, 91.0], [1.58656986E12, 12.0], [1.58656956E12, 23.0], [1.58656926E12, 14.0], [1.58656974E12, 26.0], [1.58656944E12, 50.0], [1.58656992E12, 15.0], [1.58656962E12, 20.0], [1.58656932E12, 11.0], [1.5865698E12, 105.0], [1.5865695E12, 11.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58656968E12, 1853.0], [1.58656938E12, 1994.0], [1.58656986E12, 1610.8], [1.58656956E12, 2027.0], [1.58656926E12, 159.0], [1.58656974E12, 2050.800000000001], [1.58656944E12, 1961.8], [1.58656992E12, 34.70000000000002], [1.58656962E12, 1844.6], [1.58656932E12, 1600.8000000000002], [1.5865698E12, 1956.0], [1.5865695E12, 1753.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58656968E12, 2508.799999999998], [1.58656938E12, 2698.0], [1.58656986E12, 2285.379999999999], [1.58656956E12, 2836.000000000002], [1.58656926E12, 175.33999999999992], [1.58656974E12, 2757.3000000000025], [1.58656944E12, 2692.4600000000005], [1.58656992E12, 40.08000000000004], [1.58656962E12, 2570.489999999996], [1.58656932E12, 2644.539999999999], [1.5865698E12, 2632.0], [1.5865695E12, 3016.4000000000087]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58656968E12, 2092.0], [1.58656938E12, 2197.0], [1.58656986E12, 1839.4999999999993], [1.58656956E12, 2338.2], [1.58656926E12, 163.60000000000002], [1.58656974E12, 2278.1], [1.58656944E12, 2204.399999999999], [1.58656992E12, 36.349999999999994], [1.58656962E12, 2080.2999999999997], [1.58656932E12, 1992.0], [1.5865698E12, 2173.0], [1.5865695E12, 2134.7]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58656992E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 23.0, "minX": 1.0, "maxY": 1276.0, "series": [{"data": [[3.0, 24.0], [4.0, 27.5], [5.0, 29.5], [6.0, 27.5], [7.0, 34.0], [8.0, 28.0], [9.0, 204.5], [10.0, 33.5], [11.0, 28.0], [12.0, 29.0], [13.0, 29.0], [14.0, 27.0], [15.0, 374.0], [16.0, 28.0], [17.0, 941.0], [18.0, 29.0], [19.0, 1026.0], [20.0, 552.0], [21.0, 1059.0], [22.0, 1054.0], [23.0, 1166.0], [24.0, 1093.0], [25.0, 1264.0], [26.0, 1104.0], [27.0, 1228.5], [28.0, 1262.5], [29.0, 1073.0], [30.0, 1144.5], [31.0, 1276.0], [33.0, 1232.0], [32.0, 1074.5], [34.0, 1172.5], [35.0, 1187.5], [37.0, 1192.0], [36.0, 1216.0], [38.0, 1121.5], [39.0, 1003.0], [41.0, 999.0], [40.0, 1017.5], [43.0, 944.0], [42.0, 934.5], [44.0, 1058.5], [45.0, 32.0], [46.0, 434.5], [47.0, 26.5], [48.0, 24.5], [50.0, 28.0], [51.0, 26.0], [52.0, 24.0], [53.0, 24.0], [54.0, 25.0], [55.0, 23.0], [56.0, 26.0], [57.0, 23.0], [59.0, 25.0], [58.0, 23.0], [60.0, 24.0], [63.0, 24.0], [1.0, 38.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 63.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 22.0, "minX": 1.0, "maxY": 1276.0, "series": [{"data": [[3.0, 24.0], [4.0, 27.0], [5.0, 29.5], [6.0, 27.5], [7.0, 34.0], [8.0, 27.5], [9.0, 204.5], [10.0, 33.0], [11.0, 27.5], [12.0, 28.5], [13.0, 28.0], [14.0, 26.5], [15.0, 373.5], [16.0, 27.5], [17.0, 941.0], [18.0, 28.0], [19.0, 1026.0], [20.0, 551.0], [21.0, 1059.0], [22.0, 1053.5], [23.0, 1165.5], [24.0, 1092.5], [25.0, 1264.0], [26.0, 1104.0], [27.0, 1228.5], [28.0, 1262.5], [29.0, 1073.0], [30.0, 1144.5], [31.0, 1276.0], [33.0, 1232.0], [32.0, 1074.0], [34.0, 1172.5], [35.0, 1187.0], [37.0, 1192.0], [36.0, 1216.0], [38.0, 1121.5], [39.0, 1001.0], [41.0, 996.0], [40.0, 1017.5], [43.0, 944.0], [42.0, 934.5], [44.0, 1058.5], [45.0, 31.0], [46.0, 434.5], [47.0, 26.0], [48.0, 24.0], [50.0, 28.0], [51.0, 26.0], [52.0, 24.0], [53.0, 24.0], [54.0, 24.5], [55.0, 23.0], [56.0, 26.0], [57.0, 22.5], [59.0, 24.0], [58.0, 22.0], [60.0, 24.0], [63.0, 23.0], [1.0, 38.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 63.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.8666666666666667, "minX": 1.58656926E12, "maxY": 41.083333333333336, "series": [{"data": [[1.58656968E12, 31.866666666666667], [1.58656938E12, 31.283333333333335], [1.58656986E12, 30.016666666666666], [1.58656956E12, 31.716666666666665], [1.58656926E12, 4.566666666666666], [1.58656974E12, 31.2], [1.58656944E12, 31.85], [1.58656992E12, 2.8666666666666667], [1.58656962E12, 32.53333333333333], [1.58656932E12, 34.416666666666664], [1.5865698E12, 31.6], [1.5865695E12, 41.083333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58656992E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.8666666666666667, "minX": 1.58656926E12, "maxY": 41.083333333333336, "series": [{"data": [[1.58656968E12, 31.983333333333334], [1.58656938E12, 31.316666666666666], [1.58656986E12, 30.683333333333334], [1.58656956E12, 31.783333333333335], [1.58656926E12, 4.55], [1.58656974E12, 30.966666666666665], [1.58656944E12, 31.683333333333334], [1.58656992E12, 2.8666666666666667], [1.58656962E12, 32.766666666666666], [1.58656932E12, 33.666666666666664], [1.5865698E12, 31.65], [1.5865695E12, 41.083333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58656992E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.58656926E12, "maxY": 20.6, "series": [{"data": [[1.58656926E12, 0.6333333333333333], [1.58656932E12, 1.0333333333333334]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58656968E12, 15.966666666666667], [1.58656938E12, 15.616666666666667], [1.58656986E12, 15.6], [1.58656956E12, 15.933333333333334], [1.58656926E12, 1.8833333333333333], [1.58656974E12, 15.466666666666667], [1.58656944E12, 15.866666666666667], [1.58656992E12, 1.5166666666666666], [1.58656962E12, 16.433333333333334], [1.58656932E12, 16.066666666666666], [1.5865698E12, 15.833333333333334], [1.5865695E12, 20.483333333333334]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58656968E12, 16.016666666666666], [1.58656938E12, 15.7], [1.58656986E12, 15.083333333333334], [1.58656956E12, 15.85], [1.58656926E12, 2.033333333333333], [1.58656974E12, 15.5], [1.58656944E12, 15.816666666666666], [1.58656992E12, 1.35], [1.58656962E12, 16.333333333333332], [1.58656932E12, 16.566666666666666], [1.5865698E12, 15.816666666666666], [1.5865695E12, 20.6]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58656992E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.8666666666666667, "minX": 1.58656926E12, "maxY": 41.083333333333336, "series": [{"data": [[1.58656968E12, 31.983333333333334], [1.58656938E12, 31.316666666666666], [1.58656986E12, 30.683333333333334], [1.58656956E12, 31.783333333333335], [1.58656926E12, 4.55], [1.58656974E12, 30.966666666666665], [1.58656944E12, 31.683333333333334], [1.58656992E12, 2.8666666666666667], [1.58656962E12, 32.766666666666666], [1.58656932E12, 33.666666666666664], [1.5865698E12, 31.65], [1.5865695E12, 41.083333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58656992E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

