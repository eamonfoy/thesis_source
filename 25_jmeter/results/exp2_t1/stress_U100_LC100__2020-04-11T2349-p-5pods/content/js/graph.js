/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "maxY": 5067.0, "series": [{"data": [[0.0, 11.0], [0.1, 12.0], [0.2, 13.0], [0.3, 14.0], [0.4, 14.0], [0.5, 15.0], [0.6, 15.0], [0.7, 15.0], [0.8, 15.0], [0.9, 16.0], [1.0, 16.0], [1.1, 16.0], [1.2, 16.0], [1.3, 16.0], [1.4, 16.0], [1.5, 17.0], [1.6, 17.0], [1.7, 17.0], [1.8, 17.0], [1.9, 17.0], [2.0, 17.0], [2.1, 17.0], [2.2, 17.0], [2.3, 17.0], [2.4, 18.0], [2.5, 18.0], [2.6, 18.0], [2.7, 18.0], [2.8, 18.0], [2.9, 18.0], [3.0, 18.0], [3.1, 18.0], [3.2, 18.0], [3.3, 19.0], [3.4, 19.0], [3.5, 19.0], [3.6, 19.0], [3.7, 19.0], [3.8, 19.0], [3.9, 19.0], [4.0, 19.0], [4.1, 19.0], [4.2, 19.0], [4.3, 19.0], [4.4, 19.0], [4.5, 19.0], [4.6, 19.0], [4.7, 19.0], [4.8, 19.0], [4.9, 19.0], [5.0, 20.0], [5.1, 20.0], [5.2, 20.0], [5.3, 20.0], [5.4, 20.0], [5.5, 20.0], [5.6, 20.0], [5.7, 20.0], [5.8, 20.0], [5.9, 20.0], [6.0, 20.0], [6.1, 20.0], [6.2, 20.0], [6.3, 20.0], [6.4, 20.0], [6.5, 20.0], [6.6, 20.0], [6.7, 20.0], [6.8, 21.0], [6.9, 21.0], [7.0, 21.0], [7.1, 21.0], [7.2, 21.0], [7.3, 21.0], [7.4, 21.0], [7.5, 21.0], [7.6, 21.0], [7.7, 21.0], [7.8, 21.0], [7.9, 21.0], [8.0, 21.0], [8.1, 21.0], [8.2, 21.0], [8.3, 21.0], [8.4, 21.0], [8.5, 21.0], [8.6, 21.0], [8.7, 22.0], [8.8, 22.0], [8.9, 22.0], [9.0, 22.0], [9.1, 22.0], [9.2, 22.0], [9.3, 22.0], [9.4, 22.0], [9.5, 22.0], [9.6, 22.0], [9.7, 22.0], [9.8, 22.0], [9.9, 22.0], [10.0, 22.0], [10.1, 22.0], [10.2, 22.0], [10.3, 22.0], [10.4, 22.0], [10.5, 22.0], [10.6, 22.0], [10.7, 22.0], [10.8, 23.0], [10.9, 23.0], [11.0, 23.0], [11.1, 23.0], [11.2, 23.0], [11.3, 23.0], [11.4, 23.0], [11.5, 23.0], [11.6, 23.0], [11.7, 23.0], [11.8, 23.0], [11.9, 23.0], [12.0, 23.0], [12.1, 23.0], [12.2, 23.0], [12.3, 23.0], [12.4, 23.0], [12.5, 23.0], [12.6, 23.0], [12.7, 23.0], [12.8, 23.0], [12.9, 23.0], [13.0, 23.0], [13.1, 24.0], [13.2, 24.0], [13.3, 24.0], [13.4, 24.0], [13.5, 24.0], [13.6, 24.0], [13.7, 24.0], [13.8, 24.0], [13.9, 24.0], [14.0, 24.0], [14.1, 24.0], [14.2, 24.0], [14.3, 24.0], [14.4, 24.0], [14.5, 24.0], [14.6, 24.0], [14.7, 24.0], [14.8, 24.0], [14.9, 24.0], [15.0, 24.0], [15.1, 24.0], [15.2, 24.0], [15.3, 24.0], [15.4, 24.0], [15.5, 24.0], [15.6, 25.0], [15.7, 25.0], [15.8, 25.0], [15.9, 25.0], [16.0, 25.0], [16.1, 25.0], [16.2, 25.0], [16.3, 25.0], [16.4, 25.0], [16.5, 25.0], [16.6, 25.0], [16.7, 25.0], [16.8, 25.0], [16.9, 25.0], [17.0, 25.0], [17.1, 25.0], [17.2, 25.0], [17.3, 25.0], [17.4, 25.0], [17.5, 25.0], [17.6, 25.0], [17.7, 25.0], [17.8, 25.0], [17.9, 26.0], [18.0, 26.0], [18.1, 26.0], [18.2, 26.0], [18.3, 26.0], [18.4, 26.0], [18.5, 26.0], [18.6, 26.0], [18.7, 26.0], [18.8, 26.0], [18.9, 26.0], [19.0, 26.0], [19.1, 26.0], [19.2, 26.0], [19.3, 26.0], [19.4, 26.0], [19.5, 26.0], [19.6, 26.0], [19.7, 26.0], [19.8, 26.0], [19.9, 26.0], [20.0, 26.0], [20.1, 26.0], [20.2, 27.0], [20.3, 27.0], [20.4, 27.0], [20.5, 27.0], [20.6, 27.0], [20.7, 27.0], [20.8, 27.0], [20.9, 27.0], [21.0, 27.0], [21.1, 27.0], [21.2, 27.0], [21.3, 27.0], [21.4, 27.0], [21.5, 27.0], [21.6, 27.0], [21.7, 27.0], [21.8, 27.0], [21.9, 27.0], [22.0, 27.0], [22.1, 28.0], [22.2, 28.0], [22.3, 28.0], [22.4, 28.0], [22.5, 28.0], [22.6, 28.0], [22.7, 28.0], [22.8, 28.0], [22.9, 28.0], [23.0, 28.0], [23.1, 28.0], [23.2, 28.0], [23.3, 28.0], [23.4, 28.0], [23.5, 28.0], [23.6, 28.0], [23.7, 28.0], [23.8, 28.0], [23.9, 28.0], [24.0, 28.0], [24.1, 29.0], [24.2, 29.0], [24.3, 29.0], [24.4, 29.0], [24.5, 29.0], [24.6, 29.0], [24.7, 29.0], [24.8, 29.0], [24.9, 29.0], [25.0, 29.0], [25.1, 29.0], [25.2, 29.0], [25.3, 29.0], [25.4, 29.0], [25.5, 29.0], [25.6, 30.0], [25.7, 30.0], [25.8, 30.0], [25.9, 30.0], [26.0, 30.0], [26.1, 30.0], [26.2, 30.0], [26.3, 30.0], [26.4, 30.0], [26.5, 30.0], [26.6, 30.0], [26.7, 30.0], [26.8, 30.0], [26.9, 30.0], [27.0, 31.0], [27.1, 31.0], [27.2, 31.0], [27.3, 31.0], [27.4, 31.0], [27.5, 31.0], [27.6, 31.0], [27.7, 31.0], [27.8, 31.0], [27.9, 32.0], [28.0, 32.0], [28.1, 32.0], [28.2, 32.0], [28.3, 32.0], [28.4, 32.0], [28.5, 32.0], [28.6, 32.0], [28.7, 32.0], [28.8, 32.0], [28.9, 32.0], [29.0, 33.0], [29.1, 33.0], [29.2, 33.0], [29.3, 33.0], [29.4, 33.0], [29.5, 33.0], [29.6, 33.0], [29.7, 33.0], [29.8, 33.0], [29.9, 33.0], [30.0, 33.0], [30.1, 34.0], [30.2, 34.0], [30.3, 34.0], [30.4, 34.0], [30.5, 34.0], [30.6, 34.0], [30.7, 35.0], [30.8, 35.0], [30.9, 35.0], [31.0, 35.0], [31.1, 35.0], [31.2, 35.0], [31.3, 36.0], [31.4, 36.0], [31.5, 36.0], [31.6, 36.0], [31.7, 36.0], [31.8, 36.0], [31.9, 36.0], [32.0, 37.0], [32.1, 37.0], [32.2, 37.0], [32.3, 37.0], [32.4, 38.0], [32.5, 38.0], [32.6, 38.0], [32.7, 38.0], [32.8, 39.0], [32.9, 40.0], [33.0, 40.0], [33.1, 41.0], [33.2, 41.0], [33.3, 42.0], [33.4, 42.0], [33.5, 43.0], [33.6, 43.0], [33.7, 44.0], [33.8, 45.0], [33.9, 45.0], [34.0, 46.0], [34.1, 47.0], [34.2, 48.0], [34.3, 49.0], [34.4, 51.0], [34.5, 53.0], [34.6, 55.0], [34.7, 58.0], [34.8, 64.0], [34.9, 67.0], [35.0, 78.0], [35.1, 91.0], [35.2, 109.0], [35.3, 134.0], [35.4, 150.0], [35.5, 202.0], [35.6, 229.0], [35.7, 245.0], [35.8, 263.0], [35.9, 288.0], [36.0, 306.0], [36.1, 323.0], [36.2, 331.0], [36.3, 347.0], [36.4, 361.0], [36.5, 380.0], [36.6, 392.0], [36.7, 406.0], [36.8, 422.0], [36.9, 437.0], [37.0, 444.0], [37.1, 451.0], [37.2, 465.0], [37.3, 485.0], [37.4, 497.0], [37.5, 504.0], [37.6, 511.0], [37.7, 520.0], [37.8, 527.0], [37.9, 533.0], [38.0, 539.0], [38.1, 551.0], [38.2, 558.0], [38.3, 566.0], [38.4, 573.0], [38.5, 585.0], [38.6, 593.0], [38.7, 601.0], [38.8, 606.0], [38.9, 612.0], [39.0, 622.0], [39.1, 631.0], [39.2, 640.0], [39.3, 644.0], [39.4, 652.0], [39.5, 659.0], [39.6, 665.0], [39.7, 672.0], [39.8, 676.0], [39.9, 683.0], [40.0, 690.0], [40.1, 696.0], [40.2, 703.0], [40.3, 709.0], [40.4, 715.0], [40.5, 718.0], [40.6, 722.0], [40.7, 730.0], [40.8, 736.0], [40.9, 739.0], [41.0, 743.0], [41.1, 751.0], [41.2, 759.0], [41.3, 764.0], [41.4, 768.0], [41.5, 772.0], [41.6, 775.0], [41.7, 780.0], [41.8, 786.0], [41.9, 791.0], [42.0, 797.0], [42.1, 801.0], [42.2, 807.0], [42.3, 812.0], [42.4, 815.0], [42.5, 823.0], [42.6, 826.0], [42.7, 832.0], [42.8, 838.0], [42.9, 842.0], [43.0, 849.0], [43.1, 854.0], [43.2, 857.0], [43.3, 860.0], [43.4, 863.0], [43.5, 867.0], [43.6, 872.0], [43.7, 876.0], [43.8, 879.0], [43.9, 883.0], [44.0, 888.0], [44.1, 891.0], [44.2, 895.0], [44.3, 900.0], [44.4, 903.0], [44.5, 908.0], [44.6, 910.0], [44.7, 914.0], [44.8, 920.0], [44.9, 923.0], [45.0, 927.0], [45.1, 931.0], [45.2, 934.0], [45.3, 936.0], [45.4, 938.0], [45.5, 941.0], [45.6, 945.0], [45.7, 948.0], [45.8, 951.0], [45.9, 956.0], [46.0, 958.0], [46.1, 961.0], [46.2, 965.0], [46.3, 968.0], [46.4, 972.0], [46.5, 977.0], [46.6, 981.0], [46.7, 984.0], [46.8, 987.0], [46.9, 990.0], [47.0, 996.0], [47.1, 999.0], [47.2, 1002.0], [47.3, 1007.0], [47.4, 1010.0], [47.5, 1014.0], [47.6, 1017.0], [47.7, 1022.0], [47.8, 1023.0], [47.9, 1027.0], [48.0, 1033.0], [48.1, 1037.0], [48.2, 1040.0], [48.3, 1043.0], [48.4, 1046.0], [48.5, 1050.0], [48.6, 1054.0], [48.7, 1056.0], [48.8, 1061.0], [48.9, 1065.0], [49.0, 1068.0], [49.1, 1072.0], [49.2, 1075.0], [49.3, 1077.0], [49.4, 1080.0], [49.5, 1082.0], [49.6, 1085.0], [49.7, 1089.0], [49.8, 1093.0], [49.9, 1095.0], [50.0, 1098.0], [50.1, 1100.0], [50.2, 1102.0], [50.3, 1105.0], [50.4, 1111.0], [50.5, 1115.0], [50.6, 1120.0], [50.7, 1123.0], [50.8, 1125.0], [50.9, 1127.0], [51.0, 1131.0], [51.1, 1135.0], [51.2, 1138.0], [51.3, 1140.0], [51.4, 1142.0], [51.5, 1147.0], [51.6, 1149.0], [51.7, 1152.0], [51.8, 1154.0], [51.9, 1158.0], [52.0, 1162.0], [52.1, 1164.0], [52.2, 1169.0], [52.3, 1172.0], [52.4, 1175.0], [52.5, 1177.0], [52.6, 1180.0], [52.7, 1183.0], [52.8, 1186.0], [52.9, 1188.0], [53.0, 1189.0], [53.1, 1190.0], [53.2, 1193.0], [53.3, 1195.0], [53.4, 1198.0], [53.5, 1200.0], [53.6, 1204.0], [53.7, 1207.0], [53.8, 1209.0], [53.9, 1211.0], [54.0, 1213.0], [54.1, 1215.0], [54.2, 1219.0], [54.3, 1224.0], [54.4, 1225.0], [54.5, 1228.0], [54.6, 1229.0], [54.7, 1233.0], [54.8, 1235.0], [54.9, 1237.0], [55.0, 1239.0], [55.1, 1242.0], [55.2, 1244.0], [55.3, 1246.0], [55.4, 1249.0], [55.5, 1250.0], [55.6, 1251.0], [55.7, 1254.0], [55.8, 1257.0], [55.9, 1258.0], [56.0, 1259.0], [56.1, 1263.0], [56.2, 1266.0], [56.3, 1269.0], [56.4, 1272.0], [56.5, 1276.0], [56.6, 1281.0], [56.7, 1284.0], [56.8, 1286.0], [56.9, 1288.0], [57.0, 1290.0], [57.1, 1292.0], [57.2, 1294.0], [57.3, 1296.0], [57.4, 1299.0], [57.5, 1302.0], [57.6, 1304.0], [57.7, 1306.0], [57.8, 1309.0], [57.9, 1312.0], [58.0, 1315.0], [58.1, 1317.0], [58.2, 1319.0], [58.3, 1321.0], [58.4, 1325.0], [58.5, 1329.0], [58.6, 1331.0], [58.7, 1333.0], [58.8, 1336.0], [58.9, 1338.0], [59.0, 1340.0], [59.1, 1342.0], [59.2, 1345.0], [59.3, 1347.0], [59.4, 1351.0], [59.5, 1354.0], [59.6, 1357.0], [59.7, 1359.0], [59.8, 1363.0], [59.9, 1366.0], [60.0, 1368.0], [60.1, 1371.0], [60.2, 1375.0], [60.3, 1378.0], [60.4, 1379.0], [60.5, 1382.0], [60.6, 1384.0], [60.7, 1386.0], [60.8, 1388.0], [60.9, 1391.0], [61.0, 1394.0], [61.1, 1396.0], [61.2, 1398.0], [61.3, 1403.0], [61.4, 1406.0], [61.5, 1409.0], [61.6, 1411.0], [61.7, 1416.0], [61.8, 1418.0], [61.9, 1422.0], [62.0, 1425.0], [62.1, 1428.0], [62.2, 1430.0], [62.3, 1432.0], [62.4, 1435.0], [62.5, 1437.0], [62.6, 1439.0], [62.7, 1444.0], [62.8, 1446.0], [62.9, 1448.0], [63.0, 1450.0], [63.1, 1452.0], [63.2, 1454.0], [63.3, 1456.0], [63.4, 1460.0], [63.5, 1464.0], [63.6, 1467.0], [63.7, 1470.0], [63.8, 1472.0], [63.9, 1474.0], [64.0, 1478.0], [64.1, 1480.0], [64.2, 1482.0], [64.3, 1486.0], [64.4, 1489.0], [64.5, 1492.0], [64.6, 1494.0], [64.7, 1495.0], [64.8, 1497.0], [64.9, 1500.0], [65.0, 1502.0], [65.1, 1504.0], [65.2, 1507.0], [65.3, 1510.0], [65.4, 1513.0], [65.5, 1515.0], [65.6, 1518.0], [65.7, 1522.0], [65.8, 1524.0], [65.9, 1525.0], [66.0, 1528.0], [66.1, 1532.0], [66.2, 1535.0], [66.3, 1539.0], [66.4, 1541.0], [66.5, 1543.0], [66.6, 1544.0], [66.7, 1546.0], [66.8, 1548.0], [66.9, 1550.0], [67.0, 1555.0], [67.1, 1557.0], [67.2, 1561.0], [67.3, 1564.0], [67.4, 1567.0], [67.5, 1570.0], [67.6, 1572.0], [67.7, 1576.0], [67.8, 1578.0], [67.9, 1582.0], [68.0, 1583.0], [68.1, 1586.0], [68.2, 1589.0], [68.3, 1591.0], [68.4, 1594.0], [68.5, 1598.0], [68.6, 1601.0], [68.7, 1604.0], [68.8, 1606.0], [68.9, 1609.0], [69.0, 1612.0], [69.1, 1616.0], [69.2, 1618.0], [69.3, 1622.0], [69.4, 1623.0], [69.5, 1627.0], [69.6, 1629.0], [69.7, 1632.0], [69.8, 1636.0], [69.9, 1638.0], [70.0, 1640.0], [70.1, 1643.0], [70.2, 1646.0], [70.3, 1648.0], [70.4, 1653.0], [70.5, 1655.0], [70.6, 1658.0], [70.7, 1660.0], [70.8, 1662.0], [70.9, 1667.0], [71.0, 1671.0], [71.1, 1673.0], [71.2, 1675.0], [71.3, 1677.0], [71.4, 1681.0], [71.5, 1684.0], [71.6, 1688.0], [71.7, 1690.0], [71.8, 1691.0], [71.9, 1694.0], [72.0, 1697.0], [72.1, 1701.0], [72.2, 1705.0], [72.3, 1707.0], [72.4, 1709.0], [72.5, 1713.0], [72.6, 1717.0], [72.7, 1719.0], [72.8, 1721.0], [72.9, 1725.0], [73.0, 1728.0], [73.1, 1730.0], [73.2, 1733.0], [73.3, 1735.0], [73.4, 1737.0], [73.5, 1738.0], [73.6, 1741.0], [73.7, 1743.0], [73.8, 1746.0], [73.9, 1750.0], [74.0, 1752.0], [74.1, 1754.0], [74.2, 1757.0], [74.3, 1759.0], [74.4, 1763.0], [74.5, 1767.0], [74.6, 1770.0], [74.7, 1773.0], [74.8, 1778.0], [74.9, 1782.0], [75.0, 1784.0], [75.1, 1787.0], [75.2, 1789.0], [75.3, 1792.0], [75.4, 1794.0], [75.5, 1797.0], [75.6, 1800.0], [75.7, 1802.0], [75.8, 1805.0], [75.9, 1809.0], [76.0, 1811.0], [76.1, 1814.0], [76.2, 1818.0], [76.3, 1822.0], [76.4, 1825.0], [76.5, 1826.0], [76.6, 1829.0], [76.7, 1834.0], [76.8, 1838.0], [76.9, 1840.0], [77.0, 1842.0], [77.1, 1845.0], [77.2, 1848.0], [77.3, 1852.0], [77.4, 1854.0], [77.5, 1857.0], [77.6, 1860.0], [77.7, 1866.0], [77.8, 1869.0], [77.9, 1872.0], [78.0, 1875.0], [78.1, 1878.0], [78.2, 1880.0], [78.3, 1883.0], [78.4, 1885.0], [78.5, 1888.0], [78.6, 1890.0], [78.7, 1894.0], [78.8, 1896.0], [78.9, 1899.0], [79.0, 1903.0], [79.1, 1905.0], [79.2, 1911.0], [79.3, 1914.0], [79.4, 1916.0], [79.5, 1920.0], [79.6, 1923.0], [79.7, 1926.0], [79.8, 1929.0], [79.9, 1933.0], [80.0, 1936.0], [80.1, 1938.0], [80.2, 1940.0], [80.3, 1943.0], [80.4, 1946.0], [80.5, 1949.0], [80.6, 1952.0], [80.7, 1954.0], [80.8, 1958.0], [80.9, 1961.0], [81.0, 1966.0], [81.1, 1968.0], [81.2, 1972.0], [81.3, 1974.0], [81.4, 1976.0], [81.5, 1979.0], [81.6, 1982.0], [81.7, 1987.0], [81.8, 1990.0], [81.9, 1993.0], [82.0, 1995.0], [82.1, 1999.0], [82.2, 2001.0], [82.3, 2003.0], [82.4, 2007.0], [82.5, 2011.0], [82.6, 2013.0], [82.7, 2019.0], [82.8, 2022.0], [82.9, 2024.0], [83.0, 2032.0], [83.1, 2035.0], [83.2, 2039.0], [83.3, 2044.0], [83.4, 2047.0], [83.5, 2051.0], [83.6, 2053.0], [83.7, 2056.0], [83.8, 2059.0], [83.9, 2065.0], [84.0, 2067.0], [84.1, 2071.0], [84.2, 2073.0], [84.3, 2074.0], [84.4, 2077.0], [84.5, 2080.0], [84.6, 2084.0], [84.7, 2088.0], [84.8, 2091.0], [84.9, 2096.0], [85.0, 2099.0], [85.1, 2104.0], [85.2, 2107.0], [85.3, 2111.0], [85.4, 2116.0], [85.5, 2122.0], [85.6, 2125.0], [85.7, 2131.0], [85.8, 2136.0], [85.9, 2139.0], [86.0, 2142.0], [86.1, 2144.0], [86.2, 2147.0], [86.3, 2152.0], [86.4, 2156.0], [86.5, 2160.0], [86.6, 2163.0], [86.7, 2167.0], [86.8, 2170.0], [86.9, 2174.0], [87.0, 2178.0], [87.1, 2181.0], [87.2, 2185.0], [87.3, 2188.0], [87.4, 2194.0], [87.5, 2197.0], [87.6, 2201.0], [87.7, 2207.0], [87.8, 2210.0], [87.9, 2216.0], [88.0, 2220.0], [88.1, 2222.0], [88.2, 2226.0], [88.3, 2229.0], [88.4, 2232.0], [88.5, 2239.0], [88.6, 2243.0], [88.7, 2248.0], [88.8, 2253.0], [88.9, 2259.0], [89.0, 2269.0], [89.1, 2272.0], [89.2, 2280.0], [89.3, 2284.0], [89.4, 2288.0], [89.5, 2295.0], [89.6, 2299.0], [89.7, 2303.0], [89.8, 2306.0], [89.9, 2312.0], [90.0, 2317.0], [90.1, 2322.0], [90.2, 2328.0], [90.3, 2331.0], [90.4, 2338.0], [90.5, 2344.0], [90.6, 2348.0], [90.7, 2358.0], [90.8, 2368.0], [90.9, 2372.0], [91.0, 2376.0], [91.1, 2381.0], [91.2, 2386.0], [91.3, 2395.0], [91.4, 2401.0], [91.5, 2410.0], [91.6, 2413.0], [91.7, 2417.0], [91.8, 2421.0], [91.9, 2424.0], [92.0, 2431.0], [92.1, 2437.0], [92.2, 2441.0], [92.3, 2448.0], [92.4, 2454.0], [92.5, 2461.0], [92.6, 2469.0], [92.7, 2474.0], [92.8, 2481.0], [92.9, 2488.0], [93.0, 2492.0], [93.1, 2498.0], [93.2, 2503.0], [93.3, 2507.0], [93.4, 2511.0], [93.5, 2519.0], [93.6, 2527.0], [93.7, 2538.0], [93.8, 2544.0], [93.9, 2549.0], [94.0, 2553.0], [94.1, 2561.0], [94.2, 2569.0], [94.3, 2576.0], [94.4, 2585.0], [94.5, 2597.0], [94.6, 2603.0], [94.7, 2611.0], [94.8, 2618.0], [94.9, 2634.0], [95.0, 2643.0], [95.1, 2651.0], [95.2, 2659.0], [95.3, 2670.0], [95.4, 2677.0], [95.5, 2691.0], [95.6, 2703.0], [95.7, 2710.0], [95.8, 2720.0], [95.9, 2728.0], [96.0, 2743.0], [96.1, 2756.0], [96.2, 2770.0], [96.3, 2779.0], [96.4, 2786.0], [96.5, 2790.0], [96.6, 2801.0], [96.7, 2811.0], [96.8, 2827.0], [96.9, 2844.0], [97.0, 2861.0], [97.1, 2870.0], [97.2, 2878.0], [97.3, 2892.0], [97.4, 2902.0], [97.5, 2921.0], [97.6, 2936.0], [97.7, 2955.0], [97.8, 2968.0], [97.9, 2985.0], [98.0, 3000.0], [98.1, 3015.0], [98.2, 3045.0], [98.3, 3062.0], [98.4, 3086.0], [98.5, 3096.0], [98.6, 3145.0], [98.7, 3171.0], [98.8, 3204.0], [98.9, 3266.0], [99.0, 3307.0], [99.1, 3355.0], [99.2, 3390.0], [99.3, 3453.0], [99.4, 3503.0], [99.5, 3559.0], [99.6, 3663.0], [99.7, 3738.0], [99.8, 3805.0], [99.9, 3992.0], [100.0, 5067.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 148.0], [0.1, 148.0], [0.2, 148.0], [0.3, 148.0], [0.4, 148.0], [0.5, 148.0], [0.6, 148.0], [0.7, 148.0], [0.8, 148.0], [0.9, 148.0], [1.0, 148.0], [1.1, 148.0], [1.2, 148.0], [1.3, 148.0], [1.4, 148.0], [1.5, 148.0], [1.6, 148.0], [1.7, 148.0], [1.8, 148.0], [1.9, 148.0], [2.0, 150.0], [2.1, 150.0], [2.2, 150.0], [2.3, 150.0], [2.4, 150.0], [2.5, 150.0], [2.6, 150.0], [2.7, 150.0], [2.8, 150.0], [2.9, 150.0], [3.0, 151.0], [3.1, 151.0], [3.2, 151.0], [3.3, 151.0], [3.4, 151.0], [3.5, 151.0], [3.6, 151.0], [3.7, 151.0], [3.8, 151.0], [3.9, 151.0], [4.0, 151.0], [4.1, 151.0], [4.2, 151.0], [4.3, 151.0], [4.4, 151.0], [4.5, 151.0], [4.6, 151.0], [4.7, 151.0], [4.8, 151.0], [4.9, 151.0], [5.0, 151.0], [5.1, 151.0], [5.2, 151.0], [5.3, 151.0], [5.4, 151.0], [5.5, 151.0], [5.6, 151.0], [5.7, 151.0], [5.8, 151.0], [5.9, 151.0], [6.0, 151.0], [6.1, 151.0], [6.2, 151.0], [6.3, 151.0], [6.4, 151.0], [6.5, 151.0], [6.6, 151.0], [6.7, 151.0], [6.8, 151.0], [6.9, 151.0], [7.0, 151.0], [7.1, 151.0], [7.2, 151.0], [7.3, 151.0], [7.4, 151.0], [7.5, 151.0], [7.6, 151.0], [7.7, 151.0], [7.8, 151.0], [7.9, 151.0], [8.0, 152.0], [8.1, 152.0], [8.2, 152.0], [8.3, 152.0], [8.4, 152.0], [8.5, 152.0], [8.6, 152.0], [8.7, 152.0], [8.8, 152.0], [8.9, 152.0], [9.0, 153.0], [9.1, 153.0], [9.2, 153.0], [9.3, 153.0], [9.4, 153.0], [9.5, 153.0], [9.6, 153.0], [9.7, 153.0], [9.8, 153.0], [9.9, 153.0], [10.0, 153.0], [10.1, 153.0], [10.2, 153.0], [10.3, 153.0], [10.4, 153.0], [10.5, 153.0], [10.6, 153.0], [10.7, 153.0], [10.8, 153.0], [10.9, 153.0], [11.0, 153.0], [11.1, 153.0], [11.2, 153.0], [11.3, 153.0], [11.4, 153.0], [11.5, 153.0], [11.6, 153.0], [11.7, 153.0], [11.8, 153.0], [11.9, 153.0], [12.0, 153.0], [12.1, 153.0], [12.2, 153.0], [12.3, 153.0], [12.4, 153.0], [12.5, 153.0], [12.6, 153.0], [12.7, 153.0], [12.8, 153.0], [12.9, 153.0], [13.0, 154.0], [13.1, 154.0], [13.2, 154.0], [13.3, 154.0], [13.4, 154.0], [13.5, 154.0], [13.6, 154.0], [13.7, 154.0], [13.8, 154.0], [13.9, 154.0], [14.0, 154.0], [14.1, 154.0], [14.2, 154.0], [14.3, 154.0], [14.4, 154.0], [14.5, 154.0], [14.6, 154.0], [14.7, 154.0], [14.8, 154.0], [14.9, 154.0], [15.0, 154.0], [15.1, 154.0], [15.2, 154.0], [15.3, 154.0], [15.4, 154.0], [15.5, 154.0], [15.6, 154.0], [15.7, 154.0], [15.8, 154.0], [15.9, 154.0], [16.0, 154.0], [16.1, 154.0], [16.2, 154.0], [16.3, 154.0], [16.4, 154.0], [16.5, 154.0], [16.6, 154.0], [16.7, 154.0], [16.8, 154.0], [16.9, 154.0], [17.0, 154.0], [17.1, 154.0], [17.2, 154.0], [17.3, 154.0], [17.4, 154.0], [17.5, 154.0], [17.6, 154.0], [17.7, 154.0], [17.8, 154.0], [17.9, 154.0], [18.0, 155.0], [18.1, 155.0], [18.2, 155.0], [18.3, 155.0], [18.4, 155.0], [18.5, 155.0], [18.6, 155.0], [18.7, 155.0], [18.8, 155.0], [18.9, 155.0], [19.0, 155.0], [19.1, 155.0], [19.2, 155.0], [19.3, 155.0], [19.4, 155.0], [19.5, 155.0], [19.6, 155.0], [19.7, 155.0], [19.8, 155.0], [19.9, 155.0], [20.0, 155.0], [20.1, 155.0], [20.2, 155.0], [20.3, 155.0], [20.4, 155.0], [20.5, 155.0], [20.6, 155.0], [20.7, 155.0], [20.8, 155.0], [20.9, 155.0], [21.0, 156.0], [21.1, 156.0], [21.2, 156.0], [21.3, 156.0], [21.4, 156.0], [21.5, 156.0], [21.6, 156.0], [21.7, 156.0], [21.8, 156.0], [21.9, 156.0], [22.0, 156.0], [22.1, 156.0], [22.2, 156.0], [22.3, 156.0], [22.4, 156.0], [22.5, 156.0], [22.6, 156.0], [22.7, 156.0], [22.8, 156.0], [22.9, 156.0], [23.0, 157.0], [23.1, 157.0], [23.2, 157.0], [23.3, 157.0], [23.4, 157.0], [23.5, 157.0], [23.6, 157.0], [23.7, 157.0], [23.8, 157.0], [23.9, 157.0], [24.0, 158.0], [24.1, 158.0], [24.2, 158.0], [24.3, 158.0], [24.4, 158.0], [24.5, 158.0], [24.6, 158.0], [24.7, 158.0], [24.8, 158.0], [24.9, 158.0], [25.0, 158.0], [25.1, 158.0], [25.2, 158.0], [25.3, 158.0], [25.4, 158.0], [25.5, 158.0], [25.6, 158.0], [25.7, 158.0], [25.8, 158.0], [25.9, 158.0], [26.0, 158.0], [26.1, 158.0], [26.2, 158.0], [26.3, 158.0], [26.4, 158.0], [26.5, 158.0], [26.6, 158.0], [26.7, 158.0], [26.8, 158.0], [26.9, 158.0], [27.0, 159.0], [27.1, 159.0], [27.2, 159.0], [27.3, 159.0], [27.4, 159.0], [27.5, 159.0], [27.6, 159.0], [27.7, 159.0], [27.8, 159.0], [27.9, 159.0], [28.0, 159.0], [28.1, 159.0], [28.2, 159.0], [28.3, 159.0], [28.4, 159.0], [28.5, 159.0], [28.6, 159.0], [28.7, 159.0], [28.8, 159.0], [28.9, 159.0], [29.0, 159.0], [29.1, 159.0], [29.2, 159.0], [29.3, 159.0], [29.4, 159.0], [29.5, 159.0], [29.6, 159.0], [29.7, 159.0], [29.8, 159.0], [29.9, 159.0], [30.0, 159.0], [30.1, 159.0], [30.2, 159.0], [30.3, 159.0], [30.4, 159.0], [30.5, 159.0], [30.6, 159.0], [30.7, 159.0], [30.8, 159.0], [30.9, 159.0], [31.0, 159.0], [31.1, 159.0], [31.2, 159.0], [31.3, 159.0], [31.4, 159.0], [31.5, 159.0], [31.6, 159.0], [31.7, 159.0], [31.8, 159.0], [31.9, 159.0], [32.0, 160.0], [32.1, 160.0], [32.2, 160.0], [32.3, 160.0], [32.4, 160.0], [32.5, 160.0], [32.6, 160.0], [32.7, 160.0], [32.8, 160.0], [32.9, 160.0], [33.0, 160.0], [33.1, 160.0], [33.2, 160.0], [33.3, 160.0], [33.4, 160.0], [33.5, 160.0], [33.6, 160.0], [33.7, 160.0], [33.8, 160.0], [33.9, 160.0], [34.0, 160.0], [34.1, 160.0], [34.2, 160.0], [34.3, 160.0], [34.4, 160.0], [34.5, 160.0], [34.6, 160.0], [34.7, 160.0], [34.8, 160.0], [34.9, 160.0], [35.0, 161.0], [35.1, 161.0], [35.2, 161.0], [35.3, 161.0], [35.4, 161.0], [35.5, 161.0], [35.6, 161.0], [35.7, 161.0], [35.8, 161.0], [35.9, 161.0], [36.0, 161.0], [36.1, 161.0], [36.2, 161.0], [36.3, 161.0], [36.4, 161.0], [36.5, 161.0], [36.6, 161.0], [36.7, 161.0], [36.8, 161.0], [36.9, 161.0], [37.0, 161.0], [37.1, 161.0], [37.2, 161.0], [37.3, 161.0], [37.4, 161.0], [37.5, 161.0], [37.6, 161.0], [37.7, 161.0], [37.8, 161.0], [37.9, 161.0], [38.0, 162.0], [38.1, 162.0], [38.2, 162.0], [38.3, 162.0], [38.4, 162.0], [38.5, 162.0], [38.6, 162.0], [38.7, 162.0], [38.8, 162.0], [38.9, 162.0], [39.0, 162.0], [39.1, 162.0], [39.2, 162.0], [39.3, 162.0], [39.4, 162.0], [39.5, 162.0], [39.6, 162.0], [39.7, 162.0], [39.8, 162.0], [39.9, 162.0], [40.0, 162.0], [40.1, 162.0], [40.2, 162.0], [40.3, 162.0], [40.4, 162.0], [40.5, 162.0], [40.6, 162.0], [40.7, 162.0], [40.8, 162.0], [40.9, 162.0], [41.0, 162.0], [41.1, 162.0], [41.2, 162.0], [41.3, 162.0], [41.4, 162.0], [41.5, 162.0], [41.6, 162.0], [41.7, 162.0], [41.8, 162.0], [41.9, 162.0], [42.0, 162.0], [42.1, 162.0], [42.2, 162.0], [42.3, 162.0], [42.4, 162.0], [42.5, 162.0], [42.6, 162.0], [42.7, 162.0], [42.8, 162.0], [42.9, 162.0], [43.0, 163.0], [43.1, 163.0], [43.2, 163.0], [43.3, 163.0], [43.4, 163.0], [43.5, 163.0], [43.6, 163.0], [43.7, 163.0], [43.8, 163.0], [43.9, 163.0], [44.0, 163.0], [44.1, 163.0], [44.2, 163.0], [44.3, 163.0], [44.4, 163.0], [44.5, 163.0], [44.6, 163.0], [44.7, 163.0], [44.8, 163.0], [44.9, 163.0], [45.0, 163.0], [45.1, 163.0], [45.2, 163.0], [45.3, 163.0], [45.4, 163.0], [45.5, 163.0], [45.6, 163.0], [45.7, 163.0], [45.8, 163.0], [45.9, 163.0], [46.0, 163.0], [46.1, 163.0], [46.2, 163.0], [46.3, 163.0], [46.4, 163.0], [46.5, 163.0], [46.6, 163.0], [46.7, 163.0], [46.8, 163.0], [46.9, 163.0], [47.0, 163.0], [47.1, 163.0], [47.2, 163.0], [47.3, 163.0], [47.4, 163.0], [47.5, 163.0], [47.6, 163.0], [47.7, 163.0], [47.8, 163.0], [47.9, 163.0], [48.0, 164.0], [48.1, 164.0], [48.2, 164.0], [48.3, 164.0], [48.4, 164.0], [48.5, 164.0], [48.6, 164.0], [48.7, 164.0], [48.8, 164.0], [48.9, 164.0], [49.0, 164.0], [49.1, 164.0], [49.2, 164.0], [49.3, 164.0], [49.4, 164.0], [49.5, 164.0], [49.6, 164.0], [49.7, 164.0], [49.8, 164.0], [49.9, 164.0], [50.0, 164.0], [50.1, 164.0], [50.2, 164.0], [50.3, 164.0], [50.4, 164.0], [50.5, 164.0], [50.6, 164.0], [50.7, 164.0], [50.8, 164.0], [50.9, 164.0], [51.0, 164.0], [51.1, 164.0], [51.2, 164.0], [51.3, 164.0], [51.4, 164.0], [51.5, 164.0], [51.6, 164.0], [51.7, 164.0], [51.8, 164.0], [51.9, 164.0], [52.0, 164.0], [52.1, 164.0], [52.2, 164.0], [52.3, 164.0], [52.4, 164.0], [52.5, 164.0], [52.6, 164.0], [52.7, 164.0], [52.8, 164.0], [52.9, 164.0], [53.0, 165.0], [53.1, 165.0], [53.2, 165.0], [53.3, 165.0], [53.4, 165.0], [53.5, 165.0], [53.6, 165.0], [53.7, 165.0], [53.8, 165.0], [53.9, 165.0], [54.0, 165.0], [54.1, 165.0], [54.2, 165.0], [54.3, 165.0], [54.4, 165.0], [54.5, 165.0], [54.6, 165.0], [54.7, 165.0], [54.8, 165.0], [54.9, 165.0], [55.0, 165.0], [55.1, 165.0], [55.2, 165.0], [55.3, 165.0], [55.4, 165.0], [55.5, 165.0], [55.6, 165.0], [55.7, 165.0], [55.8, 165.0], [55.9, 165.0], [56.0, 165.0], [56.1, 165.0], [56.2, 165.0], [56.3, 165.0], [56.4, 165.0], [56.5, 165.0], [56.6, 165.0], [56.7, 165.0], [56.8, 165.0], [56.9, 165.0], [57.0, 165.0], [57.1, 165.0], [57.2, 165.0], [57.3, 165.0], [57.4, 165.0], [57.5, 165.0], [57.6, 165.0], [57.7, 165.0], [57.8, 165.0], [57.9, 165.0], [58.0, 166.0], [58.1, 166.0], [58.2, 166.0], [58.3, 166.0], [58.4, 166.0], [58.5, 166.0], [58.6, 166.0], [58.7, 166.0], [58.8, 166.0], [58.9, 166.0], [59.0, 166.0], [59.1, 166.0], [59.2, 166.0], [59.3, 166.0], [59.4, 166.0], [59.5, 166.0], [59.6, 166.0], [59.7, 166.0], [59.8, 166.0], [59.9, 166.0], [60.0, 166.0], [60.1, 166.0], [60.2, 166.0], [60.3, 166.0], [60.4, 166.0], [60.5, 166.0], [60.6, 166.0], [60.7, 166.0], [60.8, 166.0], [60.9, 166.0], [61.0, 166.0], [61.1, 166.0], [61.2, 166.0], [61.3, 166.0], [61.4, 166.0], [61.5, 166.0], [61.6, 166.0], [61.7, 166.0], [61.8, 166.0], [61.9, 166.0], [62.0, 166.0], [62.1, 166.0], [62.2, 166.0], [62.3, 166.0], [62.4, 166.0], [62.5, 166.0], [62.6, 166.0], [62.7, 166.0], [62.8, 166.0], [62.9, 166.0], [63.0, 166.0], [63.1, 166.0], [63.2, 166.0], [63.3, 166.0], [63.4, 166.0], [63.5, 166.0], [63.6, 166.0], [63.7, 166.0], [63.8, 166.0], [63.9, 166.0], [64.0, 166.0], [64.1, 166.0], [64.2, 166.0], [64.3, 166.0], [64.4, 166.0], [64.5, 166.0], [64.6, 166.0], [64.7, 166.0], [64.8, 166.0], [64.9, 166.0], [65.0, 166.0], [65.1, 166.0], [65.2, 166.0], [65.3, 166.0], [65.4, 166.0], [65.5, 166.0], [65.6, 166.0], [65.7, 166.0], [65.8, 166.0], [65.9, 166.0], [66.0, 167.0], [66.1, 167.0], [66.2, 167.0], [66.3, 167.0], [66.4, 167.0], [66.5, 167.0], [66.6, 167.0], [66.7, 167.0], [66.8, 167.0], [66.9, 167.0], [67.0, 167.0], [67.1, 167.0], [67.2, 167.0], [67.3, 167.0], [67.4, 167.0], [67.5, 167.0], [67.6, 167.0], [67.7, 167.0], [67.8, 167.0], [67.9, 167.0], [68.0, 168.0], [68.1, 168.0], [68.2, 168.0], [68.3, 168.0], [68.4, 168.0], [68.5, 168.0], [68.6, 168.0], [68.7, 168.0], [68.8, 168.0], [68.9, 168.0], [69.0, 168.0], [69.1, 168.0], [69.2, 168.0], [69.3, 168.0], [69.4, 168.0], [69.5, 168.0], [69.6, 168.0], [69.7, 168.0], [69.8, 168.0], [69.9, 168.0], [70.0, 168.0], [70.1, 168.0], [70.2, 168.0], [70.3, 168.0], [70.4, 168.0], [70.5, 168.0], [70.6, 168.0], [70.7, 168.0], [70.8, 168.0], [70.9, 168.0], [71.0, 168.0], [71.1, 168.0], [71.2, 168.0], [71.3, 168.0], [71.4, 168.0], [71.5, 168.0], [71.6, 168.0], [71.7, 168.0], [71.8, 168.0], [71.9, 168.0], [72.0, 169.0], [72.1, 169.0], [72.2, 169.0], [72.3, 169.0], [72.4, 169.0], [72.5, 169.0], [72.6, 169.0], [72.7, 169.0], [72.8, 169.0], [72.9, 169.0], [73.0, 169.0], [73.1, 169.0], [73.2, 169.0], [73.3, 169.0], [73.4, 169.0], [73.5, 169.0], [73.6, 169.0], [73.7, 169.0], [73.8, 169.0], [73.9, 169.0], [74.0, 170.0], [74.1, 170.0], [74.2, 170.0], [74.3, 170.0], [74.4, 170.0], [74.5, 170.0], [74.6, 170.0], [74.7, 170.0], [74.8, 170.0], [74.9, 170.0], [75.0, 170.0], [75.1, 170.0], [75.2, 170.0], [75.3, 170.0], [75.4, 170.0], [75.5, 170.0], [75.6, 170.0], [75.7, 170.0], [75.8, 170.0], [75.9, 170.0], [76.0, 172.0], [76.1, 172.0], [76.2, 172.0], [76.3, 172.0], [76.4, 172.0], [76.5, 172.0], [76.6, 172.0], [76.7, 172.0], [76.8, 172.0], [76.9, 172.0], [77.0, 172.0], [77.1, 172.0], [77.2, 172.0], [77.3, 172.0], [77.4, 172.0], [77.5, 172.0], [77.6, 172.0], [77.7, 172.0], [77.8, 172.0], [77.9, 172.0], [78.0, 172.0], [78.1, 172.0], [78.2, 172.0], [78.3, 172.0], [78.4, 172.0], [78.5, 172.0], [78.6, 172.0], [78.7, 172.0], [78.8, 172.0], [78.9, 172.0], [79.0, 172.0], [79.1, 172.0], [79.2, 172.0], [79.3, 172.0], [79.4, 172.0], [79.5, 172.0], [79.6, 172.0], [79.7, 172.0], [79.8, 172.0], [79.9, 172.0], [80.0, 172.0], [80.1, 172.0], [80.2, 172.0], [80.3, 172.0], [80.4, 172.0], [80.5, 172.0], [80.6, 172.0], [80.7, 172.0], [80.8, 172.0], [80.9, 172.0], [81.0, 172.0], [81.1, 172.0], [81.2, 172.0], [81.3, 172.0], [81.4, 172.0], [81.5, 172.0], [81.6, 172.0], [81.7, 172.0], [81.8, 172.0], [81.9, 172.0], [82.0, 173.0], [82.1, 173.0], [82.2, 173.0], [82.3, 173.0], [82.4, 173.0], [82.5, 173.0], [82.6, 173.0], [82.7, 173.0], [82.8, 173.0], [82.9, 173.0], [83.0, 174.0], [83.1, 174.0], [83.2, 174.0], [83.3, 174.0], [83.4, 174.0], [83.5, 174.0], [83.6, 174.0], [83.7, 174.0], [83.8, 174.0], [83.9, 174.0], [84.0, 174.0], [84.1, 174.0], [84.2, 174.0], [84.3, 174.0], [84.4, 174.0], [84.5, 174.0], [84.6, 174.0], [84.7, 174.0], [84.8, 174.0], [84.9, 174.0], [85.0, 175.0], [85.1, 175.0], [85.2, 175.0], [85.3, 175.0], [85.4, 175.0], [85.5, 175.0], [85.6, 175.0], [85.7, 175.0], [85.8, 175.0], [85.9, 175.0], [86.0, 175.0], [86.1, 175.0], [86.2, 175.0], [86.3, 175.0], [86.4, 175.0], [86.5, 175.0], [86.6, 175.0], [86.7, 175.0], [86.8, 175.0], [86.9, 175.0], [87.0, 175.0], [87.1, 175.0], [87.2, 175.0], [87.3, 175.0], [87.4, 175.0], [87.5, 175.0], [87.6, 175.0], [87.7, 175.0], [87.8, 175.0], [87.9, 175.0], [88.0, 175.0], [88.1, 175.0], [88.2, 175.0], [88.3, 175.0], [88.4, 175.0], [88.5, 175.0], [88.6, 175.0], [88.7, 175.0], [88.8, 175.0], [88.9, 175.0], [89.0, 177.0], [89.1, 177.0], [89.2, 177.0], [89.3, 177.0], [89.4, 177.0], [89.5, 177.0], [89.6, 177.0], [89.7, 177.0], [89.8, 177.0], [89.9, 177.0], [90.0, 178.0], [90.1, 178.0], [90.2, 178.0], [90.3, 178.0], [90.4, 178.0], [90.5, 178.0], [90.6, 178.0], [90.7, 178.0], [90.8, 178.0], [90.9, 178.0], [91.0, 180.0], [91.1, 180.0], [91.2, 180.0], [91.3, 180.0], [91.4, 180.0], [91.5, 180.0], [91.6, 180.0], [91.7, 180.0], [91.8, 180.0], [91.9, 180.0], [92.0, 181.0], [92.1, 181.0], [92.2, 181.0], [92.3, 181.0], [92.4, 181.0], [92.5, 181.0], [92.6, 181.0], [92.7, 181.0], [92.8, 181.0], [92.9, 181.0], [93.0, 182.0], [93.1, 182.0], [93.2, 182.0], [93.3, 182.0], [93.4, 182.0], [93.5, 182.0], [93.6, 182.0], [93.7, 182.0], [93.8, 182.0], [93.9, 182.0], [94.0, 186.0], [94.1, 186.0], [94.2, 186.0], [94.3, 186.0], [94.4, 186.0], [94.5, 186.0], [94.6, 186.0], [94.7, 186.0], [94.8, 186.0], [94.9, 186.0], [95.0, 193.0], [95.1, 193.0], [95.2, 193.0], [95.3, 193.0], [95.4, 193.0], [95.5, 193.0], [95.6, 193.0], [95.7, 193.0], [95.8, 193.0], [95.9, 193.0], [96.0, 198.0], [96.1, 198.0], [96.2, 198.0], [96.3, 198.0], [96.4, 198.0], [96.5, 198.0], [96.6, 198.0], [96.7, 198.0], [96.8, 198.0], [96.9, 198.0], [97.0, 199.0], [97.1, 199.0], [97.2, 199.0], [97.3, 199.0], [97.4, 199.0], [97.5, 199.0], [97.6, 199.0], [97.7, 199.0], [97.8, 199.0], [97.9, 199.0], [98.0, 212.0], [98.1, 212.0], [98.2, 212.0], [98.3, 212.0], [98.4, 212.0], [98.5, 212.0], [98.6, 212.0], [98.7, 212.0], [98.8, 212.0], [98.9, 212.0], [99.0, 215.0], [99.1, 215.0], [99.2, 215.0], [99.3, 215.0], [99.4, 215.0], [99.5, 215.0], [99.6, 215.0], [99.7, 215.0], [99.8, 215.0], [99.9, 215.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 11.0], [0.1, 13.0], [0.2, 14.0], [0.3, 15.0], [0.4, 15.0], [0.5, 15.0], [0.6, 16.0], [0.7, 16.0], [0.8, 16.0], [0.9, 16.0], [1.0, 17.0], [1.1, 17.0], [1.2, 17.0], [1.3, 17.0], [1.4, 17.0], [1.5, 17.0], [1.6, 17.0], [1.7, 17.0], [1.8, 18.0], [1.9, 18.0], [2.0, 18.0], [2.1, 18.0], [2.2, 18.0], [2.3, 18.0], [2.4, 18.0], [2.5, 18.0], [2.6, 18.0], [2.7, 18.0], [2.8, 18.0], [2.9, 18.0], [3.0, 18.0], [3.1, 19.0], [3.2, 19.0], [3.3, 19.0], [3.4, 19.0], [3.5, 19.0], [3.6, 19.0], [3.7, 19.0], [3.8, 19.0], [3.9, 19.0], [4.0, 19.0], [4.1, 19.0], [4.2, 19.0], [4.3, 19.0], [4.4, 20.0], [4.5, 20.0], [4.6, 20.0], [4.7, 20.0], [4.8, 20.0], [4.9, 20.0], [5.0, 20.0], [5.1, 20.0], [5.2, 20.0], [5.3, 20.0], [5.4, 20.0], [5.5, 20.0], [5.6, 20.0], [5.7, 20.0], [5.8, 20.0], [5.9, 20.0], [6.0, 20.0], [6.1, 21.0], [6.2, 21.0], [6.3, 21.0], [6.4, 21.0], [6.5, 21.0], [6.6, 21.0], [6.7, 21.0], [6.8, 21.0], [6.9, 21.0], [7.0, 21.0], [7.1, 21.0], [7.2, 21.0], [7.3, 21.0], [7.4, 21.0], [7.5, 21.0], [7.6, 21.0], [7.7, 21.0], [7.8, 21.0], [7.9, 21.0], [8.0, 22.0], [8.1, 22.0], [8.2, 22.0], [8.3, 22.0], [8.4, 22.0], [8.5, 22.0], [8.6, 22.0], [8.7, 22.0], [8.8, 22.0], [8.9, 22.0], [9.0, 22.0], [9.1, 22.0], [9.2, 22.0], [9.3, 22.0], [9.4, 22.0], [9.5, 22.0], [9.6, 22.0], [9.7, 22.0], [9.8, 22.0], [9.9, 22.0], [10.0, 22.0], [10.1, 23.0], [10.2, 23.0], [10.3, 23.0], [10.4, 23.0], [10.5, 23.0], [10.6, 23.0], [10.7, 23.0], [10.8, 23.0], [10.9, 23.0], [11.0, 23.0], [11.1, 23.0], [11.2, 23.0], [11.3, 23.0], [11.4, 23.0], [11.5, 23.0], [11.6, 23.0], [11.7, 23.0], [11.8, 23.0], [11.9, 23.0], [12.0, 23.0], [12.1, 23.0], [12.2, 23.0], [12.3, 24.0], [12.4, 24.0], [12.5, 24.0], [12.6, 24.0], [12.7, 24.0], [12.8, 24.0], [12.9, 24.0], [13.0, 24.0], [13.1, 24.0], [13.2, 24.0], [13.3, 24.0], [13.4, 24.0], [13.5, 24.0], [13.6, 24.0], [13.7, 24.0], [13.8, 24.0], [13.9, 24.0], [14.0, 24.0], [14.1, 24.0], [14.2, 24.0], [14.3, 24.0], [14.4, 24.0], [14.5, 25.0], [14.6, 25.0], [14.7, 25.0], [14.8, 25.0], [14.9, 25.0], [15.0, 25.0], [15.1, 25.0], [15.2, 25.0], [15.3, 25.0], [15.4, 25.0], [15.5, 25.0], [15.6, 25.0], [15.7, 25.0], [15.8, 25.0], [15.9, 25.0], [16.0, 25.0], [16.1, 25.0], [16.2, 25.0], [16.3, 25.0], [16.4, 25.0], [16.5, 25.0], [16.6, 25.0], [16.7, 26.0], [16.8, 26.0], [16.9, 26.0], [17.0, 26.0], [17.1, 26.0], [17.2, 26.0], [17.3, 26.0], [17.4, 26.0], [17.5, 26.0], [17.6, 26.0], [17.7, 26.0], [17.8, 26.0], [17.9, 26.0], [18.0, 26.0], [18.1, 26.0], [18.2, 26.0], [18.3, 26.0], [18.4, 26.0], [18.5, 26.0], [18.6, 26.0], [18.7, 26.0], [18.8, 26.0], [18.9, 27.0], [19.0, 27.0], [19.1, 27.0], [19.2, 27.0], [19.3, 27.0], [19.4, 27.0], [19.5, 27.0], [19.6, 27.0], [19.7, 27.0], [19.8, 27.0], [19.9, 27.0], [20.0, 27.0], [20.1, 27.0], [20.2, 27.0], [20.3, 27.0], [20.4, 27.0], [20.5, 27.0], [20.6, 27.0], [20.7, 27.0], [20.8, 27.0], [20.9, 27.0], [21.0, 27.0], [21.1, 27.0], [21.2, 28.0], [21.3, 28.0], [21.4, 28.0], [21.5, 28.0], [21.6, 28.0], [21.7, 28.0], [21.8, 28.0], [21.9, 28.0], [22.0, 28.0], [22.1, 28.0], [22.2, 28.0], [22.3, 28.0], [22.4, 28.0], [22.5, 28.0], [22.6, 28.0], [22.7, 28.0], [22.8, 28.0], [22.9, 28.0], [23.0, 29.0], [23.1, 29.0], [23.2, 29.0], [23.3, 29.0], [23.4, 29.0], [23.5, 29.0], [23.6, 29.0], [23.7, 29.0], [23.8, 29.0], [23.9, 29.0], [24.0, 29.0], [24.1, 29.0], [24.2, 29.0], [24.3, 29.0], [24.4, 29.0], [24.5, 29.0], [24.6, 29.0], [24.7, 30.0], [24.8, 30.0], [24.9, 30.0], [25.0, 30.0], [25.1, 30.0], [25.2, 30.0], [25.3, 30.0], [25.4, 30.0], [25.5, 30.0], [25.6, 30.0], [25.7, 30.0], [25.8, 30.0], [25.9, 30.0], [26.0, 30.0], [26.1, 30.0], [26.2, 30.0], [26.3, 30.0], [26.4, 31.0], [26.5, 31.0], [26.6, 31.0], [26.7, 31.0], [26.8, 31.0], [26.9, 31.0], [27.0, 31.0], [27.1, 31.0], [27.2, 31.0], [27.3, 31.0], [27.4, 31.0], [27.5, 31.0], [27.6, 31.0], [27.7, 32.0], [27.8, 32.0], [27.9, 32.0], [28.0, 32.0], [28.1, 32.0], [28.2, 32.0], [28.3, 32.0], [28.4, 32.0], [28.5, 32.0], [28.6, 32.0], [28.7, 32.0], [28.8, 33.0], [28.9, 33.0], [29.0, 33.0], [29.1, 33.0], [29.2, 33.0], [29.3, 33.0], [29.4, 33.0], [29.5, 33.0], [29.6, 34.0], [29.7, 34.0], [29.8, 34.0], [29.9, 34.0], [30.0, 34.0], [30.1, 34.0], [30.2, 34.0], [30.3, 34.0], [30.4, 35.0], [30.5, 35.0], [30.6, 35.0], [30.7, 35.0], [30.8, 35.0], [30.9, 35.0], [31.0, 35.0], [31.1, 36.0], [31.2, 36.0], [31.3, 36.0], [31.4, 36.0], [31.5, 37.0], [31.6, 37.0], [31.7, 37.0], [31.8, 37.0], [31.9, 38.0], [32.0, 38.0], [32.1, 38.0], [32.2, 38.0], [32.3, 39.0], [32.4, 39.0], [32.5, 39.0], [32.6, 40.0], [32.7, 40.0], [32.8, 40.0], [32.9, 41.0], [33.0, 41.0], [33.1, 42.0], [33.2, 42.0], [33.3, 43.0], [33.4, 43.0], [33.5, 44.0], [33.6, 45.0], [33.7, 46.0], [33.8, 48.0], [33.9, 49.0], [34.0, 50.0], [34.1, 51.0], [34.2, 55.0], [34.3, 57.0], [34.4, 61.0], [34.5, 66.0], [34.6, 72.0], [34.7, 79.0], [34.8, 87.0], [34.9, 99.0], [35.0, 117.0], [35.1, 127.0], [35.2, 140.0], [35.3, 159.0], [35.4, 179.0], [35.5, 200.0], [35.6, 221.0], [35.7, 239.0], [35.8, 255.0], [35.9, 267.0], [36.0, 289.0], [36.1, 302.0], [36.2, 325.0], [36.3, 341.0], [36.4, 358.0], [36.5, 378.0], [36.6, 389.0], [36.7, 403.0], [36.8, 416.0], [36.9, 429.0], [37.0, 450.0], [37.1, 466.0], [37.2, 472.0], [37.3, 478.0], [37.4, 491.0], [37.5, 502.0], [37.6, 507.0], [37.7, 514.0], [37.8, 528.0], [37.9, 535.0], [38.0, 546.0], [38.1, 557.0], [38.2, 564.0], [38.3, 568.0], [38.4, 579.0], [38.5, 585.0], [38.6, 591.0], [38.7, 603.0], [38.8, 609.0], [38.9, 614.0], [39.0, 620.0], [39.1, 627.0], [39.2, 635.0], [39.3, 639.0], [39.4, 648.0], [39.5, 657.0], [39.6, 665.0], [39.7, 670.0], [39.8, 674.0], [39.9, 680.0], [40.0, 687.0], [40.1, 692.0], [40.2, 703.0], [40.3, 706.0], [40.4, 714.0], [40.5, 719.0], [40.6, 724.0], [40.7, 730.0], [40.8, 734.0], [40.9, 738.0], [41.0, 743.0], [41.1, 749.0], [41.2, 752.0], [41.3, 757.0], [41.4, 764.0], [41.5, 772.0], [41.6, 776.0], [41.7, 781.0], [41.8, 791.0], [41.9, 796.0], [42.0, 803.0], [42.1, 807.0], [42.2, 812.0], [42.3, 817.0], [42.4, 821.0], [42.5, 826.0], [42.6, 833.0], [42.7, 836.0], [42.8, 841.0], [42.9, 845.0], [43.0, 848.0], [43.1, 854.0], [43.2, 859.0], [43.3, 862.0], [43.4, 868.0], [43.5, 873.0], [43.6, 877.0], [43.7, 883.0], [43.8, 888.0], [43.9, 892.0], [44.0, 897.0], [44.1, 900.0], [44.2, 906.0], [44.3, 908.0], [44.4, 910.0], [44.5, 914.0], [44.6, 918.0], [44.7, 923.0], [44.8, 926.0], [44.9, 930.0], [45.0, 936.0], [45.1, 938.0], [45.2, 942.0], [45.3, 945.0], [45.4, 951.0], [45.5, 953.0], [45.6, 957.0], [45.7, 960.0], [45.8, 965.0], [45.9, 967.0], [46.0, 970.0], [46.1, 973.0], [46.2, 977.0], [46.3, 981.0], [46.4, 985.0], [46.5, 990.0], [46.6, 994.0], [46.7, 997.0], [46.8, 1000.0], [46.9, 1005.0], [47.0, 1008.0], [47.1, 1010.0], [47.2, 1012.0], [47.3, 1015.0], [47.4, 1019.0], [47.5, 1022.0], [47.6, 1025.0], [47.7, 1030.0], [47.8, 1032.0], [47.9, 1035.0], [48.0, 1038.0], [48.1, 1042.0], [48.2, 1045.0], [48.3, 1048.0], [48.4, 1051.0], [48.5, 1054.0], [48.6, 1056.0], [48.7, 1061.0], [48.8, 1063.0], [48.9, 1067.0], [49.0, 1069.0], [49.1, 1072.0], [49.2, 1073.0], [49.3, 1076.0], [49.4, 1078.0], [49.5, 1081.0], [49.6, 1084.0], [49.7, 1087.0], [49.8, 1090.0], [49.9, 1093.0], [50.0, 1097.0], [50.1, 1099.0], [50.2, 1102.0], [50.3, 1104.0], [50.4, 1107.0], [50.5, 1111.0], [50.6, 1113.0], [50.7, 1116.0], [50.8, 1118.0], [50.9, 1121.0], [51.0, 1124.0], [51.1, 1126.0], [51.2, 1129.0], [51.3, 1134.0], [51.4, 1136.0], [51.5, 1139.0], [51.6, 1141.0], [51.7, 1145.0], [51.8, 1147.0], [51.9, 1151.0], [52.0, 1154.0], [52.1, 1158.0], [52.2, 1161.0], [52.3, 1165.0], [52.4, 1168.0], [52.5, 1171.0], [52.6, 1173.0], [52.7, 1176.0], [52.8, 1179.0], [52.9, 1182.0], [53.0, 1185.0], [53.1, 1190.0], [53.2, 1193.0], [53.3, 1195.0], [53.4, 1199.0], [53.5, 1201.0], [53.6, 1204.0], [53.7, 1206.0], [53.8, 1207.0], [53.9, 1210.0], [54.0, 1212.0], [54.1, 1216.0], [54.2, 1219.0], [54.3, 1223.0], [54.4, 1226.0], [54.5, 1227.0], [54.6, 1230.0], [54.7, 1232.0], [54.8, 1234.0], [54.9, 1236.0], [55.0, 1239.0], [55.1, 1242.0], [55.2, 1244.0], [55.3, 1247.0], [55.4, 1249.0], [55.5, 1253.0], [55.6, 1255.0], [55.7, 1258.0], [55.8, 1261.0], [55.9, 1262.0], [56.0, 1266.0], [56.1, 1270.0], [56.2, 1272.0], [56.3, 1276.0], [56.4, 1279.0], [56.5, 1281.0], [56.6, 1284.0], [56.7, 1287.0], [56.8, 1289.0], [56.9, 1292.0], [57.0, 1295.0], [57.1, 1296.0], [57.2, 1298.0], [57.3, 1301.0], [57.4, 1305.0], [57.5, 1307.0], [57.6, 1309.0], [57.7, 1312.0], [57.8, 1314.0], [57.9, 1316.0], [58.0, 1318.0], [58.1, 1321.0], [58.2, 1322.0], [58.3, 1326.0], [58.4, 1328.0], [58.5, 1330.0], [58.6, 1332.0], [58.7, 1335.0], [58.8, 1337.0], [58.9, 1339.0], [59.0, 1341.0], [59.1, 1343.0], [59.2, 1345.0], [59.3, 1348.0], [59.4, 1350.0], [59.5, 1354.0], [59.6, 1356.0], [59.7, 1361.0], [59.8, 1364.0], [59.9, 1367.0], [60.0, 1370.0], [60.1, 1372.0], [60.2, 1375.0], [60.3, 1378.0], [60.4, 1381.0], [60.5, 1384.0], [60.6, 1387.0], [60.7, 1388.0], [60.8, 1391.0], [60.9, 1392.0], [61.0, 1395.0], [61.1, 1398.0], [61.2, 1402.0], [61.3, 1406.0], [61.4, 1408.0], [61.5, 1411.0], [61.6, 1415.0], [61.7, 1419.0], [61.8, 1422.0], [61.9, 1426.0], [62.0, 1430.0], [62.1, 1433.0], [62.2, 1436.0], [62.3, 1440.0], [62.4, 1443.0], [62.5, 1445.0], [62.6, 1447.0], [62.7, 1449.0], [62.8, 1452.0], [62.9, 1457.0], [63.0, 1459.0], [63.1, 1462.0], [63.2, 1463.0], [63.3, 1466.0], [63.4, 1468.0], [63.5, 1470.0], [63.6, 1473.0], [63.7, 1477.0], [63.8, 1478.0], [63.9, 1481.0], [64.0, 1483.0], [64.1, 1486.0], [64.2, 1489.0], [64.3, 1491.0], [64.4, 1493.0], [64.5, 1494.0], [64.6, 1496.0], [64.7, 1499.0], [64.8, 1502.0], [64.9, 1504.0], [65.0, 1506.0], [65.1, 1509.0], [65.2, 1512.0], [65.3, 1515.0], [65.4, 1517.0], [65.5, 1519.0], [65.6, 1520.0], [65.7, 1524.0], [65.8, 1526.0], [65.9, 1528.0], [66.0, 1531.0], [66.1, 1533.0], [66.2, 1536.0], [66.3, 1538.0], [66.4, 1541.0], [66.5, 1543.0], [66.6, 1546.0], [66.7, 1548.0], [66.8, 1550.0], [66.9, 1553.0], [67.0, 1556.0], [67.1, 1559.0], [67.2, 1561.0], [67.3, 1563.0], [67.4, 1566.0], [67.5, 1567.0], [67.6, 1570.0], [67.7, 1571.0], [67.8, 1573.0], [67.9, 1576.0], [68.0, 1579.0], [68.1, 1581.0], [68.2, 1585.0], [68.3, 1588.0], [68.4, 1590.0], [68.5, 1591.0], [68.6, 1595.0], [68.7, 1598.0], [68.8, 1601.0], [68.9, 1603.0], [69.0, 1605.0], [69.1, 1608.0], [69.2, 1611.0], [69.3, 1614.0], [69.4, 1617.0], [69.5, 1619.0], [69.6, 1622.0], [69.7, 1624.0], [69.8, 1627.0], [69.9, 1629.0], [70.0, 1631.0], [70.1, 1632.0], [70.2, 1634.0], [70.3, 1640.0], [70.4, 1642.0], [70.5, 1645.0], [70.6, 1648.0], [70.7, 1650.0], [70.8, 1653.0], [70.9, 1657.0], [71.0, 1659.0], [71.1, 1663.0], [71.2, 1666.0], [71.3, 1669.0], [71.4, 1672.0], [71.5, 1676.0], [71.6, 1678.0], [71.7, 1680.0], [71.8, 1682.0], [71.9, 1684.0], [72.0, 1689.0], [72.1, 1691.0], [72.2, 1693.0], [72.3, 1695.0], [72.4, 1699.0], [72.5, 1703.0], [72.6, 1706.0], [72.7, 1708.0], [72.8, 1710.0], [72.9, 1712.0], [73.0, 1713.0], [73.1, 1718.0], [73.2, 1722.0], [73.3, 1723.0], [73.4, 1728.0], [73.5, 1731.0], [73.6, 1735.0], [73.7, 1737.0], [73.8, 1740.0], [73.9, 1742.0], [74.0, 1745.0], [74.1, 1747.0], [74.2, 1748.0], [74.3, 1752.0], [74.4, 1755.0], [74.5, 1759.0], [74.6, 1762.0], [74.7, 1764.0], [74.8, 1766.0], [74.9, 1769.0], [75.0, 1771.0], [75.1, 1773.0], [75.2, 1776.0], [75.3, 1779.0], [75.4, 1781.0], [75.5, 1787.0], [75.6, 1789.0], [75.7, 1793.0], [75.8, 1797.0], [75.9, 1801.0], [76.0, 1805.0], [76.1, 1809.0], [76.2, 1810.0], [76.3, 1813.0], [76.4, 1814.0], [76.5, 1816.0], [76.6, 1820.0], [76.7, 1821.0], [76.8, 1827.0], [76.9, 1829.0], [77.0, 1831.0], [77.1, 1834.0], [77.2, 1838.0], [77.3, 1841.0], [77.4, 1843.0], [77.5, 1845.0], [77.6, 1848.0], [77.7, 1851.0], [77.8, 1855.0], [77.9, 1857.0], [78.0, 1860.0], [78.1, 1861.0], [78.2, 1862.0], [78.3, 1866.0], [78.4, 1870.0], [78.5, 1873.0], [78.6, 1876.0], [78.7, 1879.0], [78.8, 1882.0], [78.9, 1885.0], [79.0, 1889.0], [79.1, 1891.0], [79.2, 1896.0], [79.3, 1899.0], [79.4, 1904.0], [79.5, 1909.0], [79.6, 1911.0], [79.7, 1915.0], [79.8, 1918.0], [79.9, 1923.0], [80.0, 1927.0], [80.1, 1930.0], [80.2, 1933.0], [80.3, 1937.0], [80.4, 1941.0], [80.5, 1943.0], [80.6, 1948.0], [80.7, 1950.0], [80.8, 1956.0], [80.9, 1959.0], [81.0, 1962.0], [81.1, 1965.0], [81.2, 1970.0], [81.3, 1974.0], [81.4, 1976.0], [81.5, 1978.0], [81.6, 1982.0], [81.7, 1985.0], [81.8, 1988.0], [81.9, 1995.0], [82.0, 1999.0], [82.1, 2003.0], [82.2, 2007.0], [82.3, 2011.0], [82.4, 2013.0], [82.5, 2016.0], [82.6, 2020.0], [82.7, 2022.0], [82.8, 2026.0], [82.9, 2031.0], [83.0, 2034.0], [83.1, 2038.0], [83.2, 2043.0], [83.3, 2047.0], [83.4, 2051.0], [83.5, 2055.0], [83.6, 2058.0], [83.7, 2064.0], [83.8, 2070.0], [83.9, 2073.0], [84.0, 2076.0], [84.1, 2079.0], [84.2, 2083.0], [84.3, 2087.0], [84.4, 2089.0], [84.5, 2094.0], [84.6, 2097.0], [84.7, 2102.0], [84.8, 2107.0], [84.9, 2110.0], [85.0, 2115.0], [85.1, 2121.0], [85.2, 2124.0], [85.3, 2129.0], [85.4, 2132.0], [85.5, 2137.0], [85.6, 2140.0], [85.7, 2146.0], [85.8, 2149.0], [85.9, 2153.0], [86.0, 2158.0], [86.1, 2160.0], [86.2, 2165.0], [86.3, 2168.0], [86.4, 2172.0], [86.5, 2176.0], [86.6, 2178.0], [86.7, 2182.0], [86.8, 2184.0], [86.9, 2187.0], [87.0, 2191.0], [87.1, 2195.0], [87.2, 2199.0], [87.3, 2202.0], [87.4, 2208.0], [87.5, 2214.0], [87.6, 2219.0], [87.7, 2224.0], [87.8, 2229.0], [87.9, 2234.0], [88.0, 2236.0], [88.1, 2240.0], [88.2, 2244.0], [88.3, 2250.0], [88.4, 2252.0], [88.5, 2259.0], [88.6, 2264.0], [88.7, 2270.0], [88.8, 2276.0], [88.9, 2279.0], [89.0, 2283.0], [89.1, 2286.0], [89.2, 2290.0], [89.3, 2294.0], [89.4, 2299.0], [89.5, 2304.0], [89.6, 2310.0], [89.7, 2314.0], [89.8, 2320.0], [89.9, 2325.0], [90.0, 2332.0], [90.1, 2339.0], [90.2, 2346.0], [90.3, 2351.0], [90.4, 2356.0], [90.5, 2359.0], [90.6, 2362.0], [90.7, 2366.0], [90.8, 2372.0], [90.9, 2378.0], [91.0, 2382.0], [91.1, 2385.0], [91.2, 2393.0], [91.3, 2397.0], [91.4, 2403.0], [91.5, 2408.0], [91.6, 2415.0], [91.7, 2422.0], [91.8, 2431.0], [91.9, 2439.0], [92.0, 2446.0], [92.1, 2452.0], [92.2, 2460.0], [92.3, 2465.0], [92.4, 2470.0], [92.5, 2475.0], [92.6, 2478.0], [92.7, 2487.0], [92.8, 2494.0], [92.9, 2501.0], [93.0, 2505.0], [93.1, 2517.0], [93.2, 2524.0], [93.3, 2530.0], [93.4, 2536.0], [93.5, 2548.0], [93.6, 2551.0], [93.7, 2563.0], [93.8, 2570.0], [93.9, 2580.0], [94.0, 2588.0], [94.1, 2591.0], [94.2, 2598.0], [94.3, 2606.0], [94.4, 2613.0], [94.5, 2623.0], [94.6, 2632.0], [94.7, 2643.0], [94.8, 2656.0], [94.9, 2664.0], [95.0, 2677.0], [95.1, 2688.0], [95.2, 2699.0], [95.3, 2707.0], [95.4, 2718.0], [95.5, 2724.0], [95.6, 2729.0], [95.7, 2742.0], [95.8, 2747.0], [95.9, 2756.0], [96.0, 2768.0], [96.1, 2783.0], [96.2, 2793.0], [96.3, 2806.0], [96.4, 2814.0], [96.5, 2824.0], [96.6, 2842.0], [96.7, 2858.0], [96.8, 2865.0], [96.9, 2876.0], [97.0, 2886.0], [97.1, 2902.0], [97.2, 2913.0], [97.3, 2933.0], [97.4, 2950.0], [97.5, 2978.0], [97.6, 2992.0], [97.7, 3006.0], [97.8, 3029.0], [97.9, 3048.0], [98.0, 3074.0], [98.1, 3091.0], [98.2, 3110.0], [98.3, 3140.0], [98.4, 3154.0], [98.5, 3176.0], [98.6, 3198.0], [98.7, 3229.0], [98.8, 3250.0], [98.9, 3271.0], [99.0, 3303.0], [99.1, 3343.0], [99.2, 3374.0], [99.3, 3411.0], [99.4, 3521.0], [99.5, 3582.0], [99.6, 3647.0], [99.7, 3732.0], [99.8, 3885.0], [99.9, 4285.0], [100.0, 4820.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3513.0, "series": [{"data": [[0.0, 3513.0], [600.0, 150.0], [700.0, 191.0], [800.0, 222.0], [900.0, 282.0], [1000.0, 293.0], [1100.0, 339.0], [1200.0, 400.0], [1300.0, 379.0], [1400.0, 366.0], [1500.0, 366.0], [100.0, 37.0], [1600.0, 350.0], [1700.0, 352.0], [1800.0, 333.0], [1900.0, 322.0], [2000.0, 290.0], [2100.0, 252.0], [2200.0, 206.0], [2300.0, 178.0], [2400.0, 178.0], [2500.0, 138.0], [2600.0, 103.0], [2700.0, 101.0], [2800.0, 80.0], [2900.0, 61.0], [3000.0, 51.0], [3100.0, 28.0], [200.0, 45.0], [3300.0, 24.0], [3200.0, 19.0], [3400.0, 17.0], [3500.0, 19.0], [3700.0, 14.0], [3600.0, 8.0], [3800.0, 6.0], [3900.0, 5.0], [4000.0, 2.0], [4200.0, 1.0], [4100.0, 2.0], [4300.0, 2.0], [4400.0, 1.0], [300.0, 72.0], [4700.0, 1.0], [5000.0, 1.0], [400.0, 77.0], [500.0, 123.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[100.0, 98.0], [200.0, 2.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 3490.0], [600.0, 151.0], [700.0, 179.0], [800.0, 210.0], [900.0, 269.0], [1000.0, 335.0], [1100.0, 331.0], [1200.0, 381.0], [1300.0, 390.0], [1400.0, 358.0], [1500.0, 404.0], [1600.0, 368.0], [1700.0, 345.0], [1800.0, 342.0], [1900.0, 272.0], [2000.0, 260.0], [2100.0, 258.0], [2200.0, 220.0], [2300.0, 196.0], [2400.0, 152.0], [2500.0, 136.0], [2600.0, 99.0], [2800.0, 85.0], [2700.0, 100.0], [2900.0, 56.0], [3000.0, 51.0], [3100.0, 45.0], [3300.0, 30.0], [3200.0, 37.0], [3400.0, 11.0], [3500.0, 13.0], [3600.0, 12.0], [3700.0, 14.0], [3800.0, 4.0], [3900.0, 2.0], [4000.0, 1.0], [4100.0, 5.0], [4300.0, 3.0], [4200.0, 1.0], [4500.0, 2.0], [4400.0, 1.0], [4600.0, 2.0], [4700.0, 1.0], [4800.0, 1.0], [100.0, 60.0], [200.0, 58.0], [300.0, 61.0], [400.0, 77.0], [500.0, 121.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5470.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7592.0, "series": [{"data": [[0.0, 7592.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5470.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7038.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 12.546666666666665, "minX": 1.58664534E12, "maxY": 100.0, "series": [{"data": [[1.58664576E12, 100.0], [1.58664546E12, 100.0], [1.58664594E12, 91.17545588960093], [1.58664564E12, 100.0], [1.58664582E12, 100.0], [1.58664534E12, 12.546666666666665], [1.58664552E12, 100.0], [1.586646E12, 41.231861198738194], [1.5866457E12, 100.0], [1.58664588E12, 100.0], [1.5866454E12, 72.2229617304494], [1.58664558E12, 100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.586646E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 23.714285714285715, "minX": 1.0, "maxY": 1543.7864077669904, "series": [{"data": [[3.0, 27.666666666666668], [6.0, 30.6], [7.0, 84.0], [8.0, 34.5], [9.0, 29.0], [10.0, 42.333333333333336], [11.0, 26.0], [12.0, 27.0], [13.0, 39.5], [14.0, 58.0], [15.0, 28.083333333333332], [16.0, 100.0], [17.0, 51.75], [18.0, 26.833333333333336], [19.0, 25.857142857142858], [20.0, 45.8], [21.0, 35.0], [22.0, 26.5], [23.0, 145.4], [24.0, 46.5], [25.0, 37.6], [26.0, 30.9], [27.0, 28.291666666666664], [28.0, 39.5], [29.0, 29.0], [30.0, 39.5], [31.0, 32.54545454545455], [32.0, 32.5], [33.0, 31.062499999999996], [34.0, 35.0], [35.0, 34.0], [36.0, 31.25], [37.0, 30.1], [38.0, 30.5], [39.0, 32.300000000000004], [40.0, 28.5], [41.0, 26.46153846153846], [42.0, 34.692307692307686], [43.0, 31.75], [44.0, 28.70370370370371], [45.0, 28.105263157894736], [46.0, 34.666666666666664], [47.0, 29.999999999999996], [48.0, 27.18181818181818], [49.0, 30.0], [50.0, 27.98360655737704], [51.0, 37.00000000000001], [52.0, 32.15384615384615], [53.0, 39.44444444444444], [54.0, 29.75], [55.0, 29.166666666666668], [56.0, 34.60000000000001], [57.0, 26.387096774193544], [58.0, 29.583333333333332], [59.0, 33.72727272727273], [60.0, 30.8], [61.0, 26.0], [62.0, 31.999999999999993], [63.0, 31.068965517241384], [64.0, 26.6], [65.0, 26.73333333333333], [66.0, 28.583333333333336], [67.0, 25.88888888888889], [68.0, 25.8125], [69.0, 32.69999999999999], [70.0, 28.117647058823525], [71.0, 26.454545454545453], [72.0, 25.02941176470588], [73.0, 26.000000000000004], [74.0, 31.866666666666667], [75.0, 33.409090909090914], [76.0, 25.037974683544306], [77.0, 28.38095238095238], [78.0, 30.8], [79.0, 27.894736842105267], [80.0, 265.4603174603174], [81.0, 266.33333333333337], [82.0, 31.166666666666668], [83.0, 60.60000000000001], [84.0, 1141.0], [85.0, 373.5882352941177], [86.0, 61.62500000000001], [87.0, 978.056338028169], [88.0, 980.0425531914894], [89.0, 26.928571428571427], [90.0, 738.6451612903226], [91.0, 283.8235294117647], [92.0, 1130.2888888888888], [93.0, 745.1904761904761], [94.0, 351.20000000000005], [95.0, 985.7741935483868], [96.0, 1319.9459459459463], [97.0, 1423.5000000000002], [98.0, 1257.142857142857], [99.0, 1538.883495145631], [100.0, 1200.251672240804], [1.0, 33.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[94.6607, 1062.495400000002]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 215.0], [3.0, 165.0], [4.0, 162.0], [5.0, 159.0], [6.0, 157.0], [7.0, 169.0], [8.0, 159.0], [9.0, 154.0], [10.0, 161.0], [11.0, 172.0], [12.0, 175.0], [13.0, 174.0], [14.0, 160.0], [15.0, 162.0], [16.0, 166.0], [17.0, 166.0], [18.0, 165.0], [19.0, 155.0], [20.0, 178.0], [21.0, 212.0], [22.0, 160.0], [23.0, 155.0], [24.0, 154.0], [25.0, 166.0], [26.0, 153.0], [27.0, 151.0], [28.0, 158.0], [29.0, 158.0], [30.0, 166.0], [31.0, 169.0], [32.0, 172.0], [33.0, 161.0], [34.0, 156.0], [35.0, 174.0], [36.0, 153.0], [37.0, 164.0], [38.0, 163.0], [39.0, 162.0], [40.0, 172.0], [41.0, 158.0], [42.0, 153.0], [43.0, 170.0], [44.0, 164.0], [45.0, 150.0], [46.0, 161.0], [47.0, 154.0], [48.0, 148.0], [49.0, 165.0], [50.0, 167.0], [51.0, 151.0], [52.0, 165.0], [53.0, 154.0], [54.0, 163.0], [55.0, 164.0], [56.0, 164.0], [57.0, 162.0], [58.0, 170.0], [59.0, 154.0], [60.0, 155.0], [61.0, 166.0], [62.0, 151.0], [63.0, 167.0], [64.0, 175.0], [65.0, 168.0], [66.0, 166.0], [67.0, 165.0], [68.0, 168.0], [69.0, 159.0], [70.0, 159.0], [71.0, 162.0], [72.0, 153.0], [73.0, 175.0], [74.0, 180.0], [75.0, 163.0], [76.0, 175.0], [77.0, 151.0], [78.0, 159.0], [79.0, 164.0], [80.0, 168.0], [81.0, 166.0], [82.0, 166.0], [83.0, 156.0], [84.0, 163.0], [85.0, 163.0], [86.0, 172.0], [87.0, 168.0], [88.0, 181.0], [89.0, 152.0], [90.0, 160.0], [91.0, 186.0], [92.0, 148.0], [93.0, 151.0], [94.0, 173.0], [95.0, 193.0], [96.0, 172.0], [97.0, 172.0], [98.0, 199.0], [99.0, 177.0], [100.0, 182.0], [1.0, 198.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[50.5, 165.36999999999995]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[3.0, 36.0], [4.0, 30.0], [5.0, 507.0], [6.0, 34.333333333333336], [8.0, 30.666666666666668], [9.0, 368.33333333333337], [10.0, 25.0], [11.0, 67.33333333333333], [12.0, 68.75], [13.0, 34.5], [14.0, 96.0], [15.0, 28.636363636363637], [16.0, 37.833333333333336], [17.0, 28.666666666666668], [18.0, 33.00000000000001], [19.0, 29.75], [20.0, 29.5], [21.0, 55.75], [22.0, 39.625], [23.0, 108.0], [24.0, 30.1], [25.0, 37.6], [26.0, 31.125], [27.0, 30.941176470588232], [28.0, 50.08333333333333], [29.0, 32.5], [30.0, 32.0], [31.0, 26.7], [32.0, 53.66666666666667], [33.0, 27.380952380952383], [34.0, 42.0], [35.0, 33.083333333333336], [36.0, 38.0], [37.0, 29.25], [38.0, 25.833333333333332], [39.0, 41.24999999999999], [40.0, 30.05882352941176], [41.0, 29.611111111111114], [42.0, 36.83333333333334], [43.0, 31.571428571428573], [44.0, 43.0], [45.0, 27.041666666666668], [46.0, 34.333333333333336], [47.0, 33.875], [48.0, 28.31578947368421], [49.0, 29.777777777777775], [50.0, 27.49999999999999], [51.0, 23.714285714285715], [52.0, 34.333333333333336], [53.0, 33.230769230769226], [54.0, 36.611111111111114], [55.0, 34.625], [56.0, 30.1], [57.0, 25.666666666666664], [58.0, 27.2093023255814], [59.0, 31.866666666666674], [60.0, 29.714285714285715], [61.0, 31.034482758620687], [62.0, 34.61538461538462], [63.0, 27.0], [64.0, 28.416666666666664], [65.0, 29.733333333333334], [66.0, 30.857142857142858], [67.0, 30.36842105263158], [68.0, 27.77777777777778], [69.0, 29.1], [70.0, 33.5], [71.0, 35.666666666666664], [72.0, 27.782608695652172], [73.0, 26.232142857142854], [74.0, 27.26666666666667], [75.0, 28.83333333333334], [76.0, 25.368421052631582], [77.0, 26.22727272727273], [78.0, 25.07142857142857], [79.0, 30.58823529411764], [80.0, 372.6410256410255], [81.0, 586.1052631578948], [82.0, 468.5625], [83.0, 70.61538461538461], [84.0, 767.2727272727273], [85.0, 256.4117647058823], [86.0, 43.29411764705883], [87.0, 1006.9499999999999], [88.0, 1051.1282051282053], [89.0, 28.200000000000003], [90.0, 784.3799999999999], [91.0, 154.8235294117647], [92.0, 811.6], [93.0, 677.2142857142857], [94.0, 301.625], [95.0, 1063.3488372093022], [96.0, 1295.28125], [97.0, 1272.6250000000002], [98.0, 1278.857142857143], [99.0, 1543.7864077669904], [100.0, 1204.3857449856785], [1.0, 33.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[94.65379999999956, 1066.2932000000014]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 472.46666666666664, "minX": 1.58664534E12, "maxY": 314591.2833333333, "series": [{"data": [[1.58664576E12, 272734.4166666667], [1.58664546E12, 204124.18333333332], [1.58664594E12, 231006.23333333334], [1.58664564E12, 185452.13333333333], [1.58664582E12, 201397.23333333334], [1.58664534E12, 6778.883333333333], [1.58664552E12, 212551.38333333333], [1.586646E12, 72204.18333333333], [1.5866457E12, 187385.28333333333], [1.58664588E12, 314591.2833333333], [1.5866454E12, 197735.9], [1.58664558E12, 192981.86666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58664576E12, 17131.433333333334], [1.58664546E12, 12819.933333333332], [1.58664594E12, 14507.666666666666], [1.58664564E12, 11647.3], [1.58664582E12, 12648.4], [1.58664534E12, 472.46666666666664], [1.58664552E12, 13349.1], [1.586646E12, 4533.466666666666], [1.5866457E12, 11768.833333333334], [1.58664588E12, 19762.5], [1.5866454E12, 12619.566666666668], [1.58664558E12, 12119.333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.586646E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 28.92378048780489, "minX": 1.58664534E12, "maxY": 1792.864698646986, "series": [{"data": [[1.58664576E12, 633.6605504587156], [1.58664546E12, 1495.6484375000032], [1.58664594E12, 821.1035156250001], [1.58664564E12, 1792.864698646986], [1.58664582E12, 1549.8261851015814], [1.58664534E12, 46.70833333333332], [1.58664552E12, 1277.2802139037444], [1.586646E12, 28.92378048780489], [1.5866457E12, 1789.4981729598044], [1.58664588E12, 289.7476432197239], [1.5866454E12, 390.16449704141985], [1.58664558E12, 1706.170588235295]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58664534E12, 168.10526315789474], [1.5866454E12, 164.72839506172835]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58664576E12, 661.7627401837931], [1.58664546E12, 1459.5217391304348], [1.58664594E12, 860.0706467661695], [1.58664564E12, 1743.7720588235295], [1.58664582E12, 1567.4382785956968], [1.58664534E12, 108.125], [1.58664552E12, 1354.9753218884098], [1.586646E12, 30.503267973856204], [1.5866457E12, 1778.2218181818193], [1.58664588E12, 285.41588447653385], [1.5866454E12, 399.66818700114015], [1.58664558E12, 1658.9349112426028]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.586646E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 28.542682926829258, "minX": 1.58664534E12, "maxY": 1792.4710947109477, "series": [{"data": [[1.58664576E12, 633.2677231025855], [1.58664546E12, 1495.237723214286], [1.58664594E12, 820.7841796874995], [1.58664564E12, 1792.4710947109477], [1.58664582E12, 1549.45033860045], [1.58664534E12, 43.66666666666667], [1.58664552E12, 1276.8994652406407], [1.586646E12, 28.542682926829258], [1.5866457E12, 1789.1278928136426], [1.58664588E12, 289.3756345177661], [1.5866454E12, 389.7834319526626], [1.58664558E12, 1705.779999999999]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58664534E12, 168.0], [1.5866454E12, 164.72839506172835]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58664576E12, 661.4578111946548], [1.58664546E12, 1459.1895206243032], [1.58664594E12, 859.8019900497529], [1.58664564E12, 1743.4840686274492], [1.58664582E12, 1567.1970554926374], [1.58664534E12, 106.06249999999999], [1.58664552E12, 1354.6695278969942], [1.586646E12, 30.18627450980393], [1.5866457E12, 1777.9539393939397], [1.58664588E12, 285.13935018050546], [1.5866454E12, 399.30558722919085], [1.58664558E12, 1658.6153846153852]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.586646E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58664534E12, "maxY": 2.052631578947368, "series": [{"data": [[1.58664576E12, 0.14095079232693886], [1.58664546E12, 0.47767857142857134], [1.58664594E12, 0.2744140625000001], [1.58664564E12, 0.3972939729397293], [1.58664582E12, 0.3916478555304742], [1.58664534E12, 0.5833333333333334], [1.58664552E12, 0.41818181818181827], [1.586646E12, 0.0], [1.5866457E12, 0.3836784409257003], [1.58664588E12, 0.06889050036258168], [1.5866454E12, 0.16804733727810642], [1.58664558E12, 0.4141176470588234]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58664534E12, 2.052631578947368], [1.5866454E12, 0.6913580246913578]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58664576E12, 0.43692564745196394], [1.58664546E12, 0.5172798216276474], [1.58664594E12, 0.5482587064676616], [1.58664564E12, 0.44607843137254877], [1.58664582E12, 0.4337485843714614], [1.58664534E12, 0.40624999999999994], [1.58664552E12, 0.5032188841201726], [1.586646E12, 0.5196078431372549], [1.5866457E12, 0.4278787878787881], [1.58664588E12, 0.42960288808664265], [1.5866454E12, 0.5347776510832382], [1.58664558E12, 0.4556213017751482]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.586646E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 11.0, "minX": 1.58664534E12, "maxY": 5067.0, "series": [{"data": [[1.58664576E12, 5067.0], [1.58664546E12, 3927.0], [1.58664594E12, 3718.0], [1.58664564E12, 4743.0], [1.58664582E12, 4702.0], [1.58664534E12, 1045.0], [1.58664552E12, 4590.0], [1.586646E12, 556.0], [1.5866457E12, 4395.0], [1.58664588E12, 4820.0], [1.5866454E12, 3582.0], [1.58664558E12, 3799.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58664576E12, 11.0], [1.58664546E12, 38.0], [1.58664594E12, 12.0], [1.58664564E12, 59.0], [1.58664582E12, 11.0], [1.58664534E12, 13.0], [1.58664552E12, 14.0], [1.586646E12, 13.0], [1.5866457E12, 41.0], [1.58664588E12, 11.0], [1.5866454E12, 11.0], [1.58664558E12, 21.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58664576E12, 2214.6000000000004], [1.58664546E12, 2240.600000000001], [1.58664594E12, 2053.0], [1.58664564E12, 2651.0], [1.58664582E12, 2603.0], [1.58664534E12, 170.20000000000002], [1.58664552E12, 2194.6000000000004], [1.586646E12, 35.0], [1.5866457E12, 2736.3999999999996], [1.58664588E12, 1362.5], [1.5866454E12, 1608.4000000000005], [1.58664558E12, 2565.4000000000005]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58664576E12, 3340.600000000004], [1.58664546E12, 3143.8399999999992], [1.58664594E12, 3120.5000000000027], [1.58664564E12, 3596.600000000002], [1.58664582E12, 3657.8999999999987], [1.58664534E12, 1045.0], [1.58664552E12, 3018.1999999999994], [1.586646E12, 47.64999999999998], [1.5866457E12, 3712.59], [1.58664588E12, 2855.1499999999974], [1.5866454E12, 2663.88], [1.58664558E12, 3367.3199999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58664576E12, 2613.800000000001], [1.58664546E12, 2503.7], [1.58664594E12, 2392.0], [1.58664564E12, 2933.5], [1.58664582E12, 2925.0], [1.58664534E12, 201.40000000000003], [1.58664552E12, 2461.1999999999994], [1.586646E12, 38.0], [1.5866457E12, 3052.249999999999], [1.58664588E12, 1887.0], [1.5866454E12, 2066.199999999999], [1.58664558E12, 2854.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.586646E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 24.0, "minX": 1.0, "maxY": 1824.5, "series": [{"data": [[2.0, 33.0], [3.0, 36.0], [4.0, 33.0], [5.0, 28.0], [6.0, 73.5], [7.0, 250.0], [8.0, 28.0], [9.0, 104.5], [10.0, 36.5], [11.0, 1091.0], [12.0, 483.0], [13.0, 67.0], [14.0, 879.0], [15.0, 87.0], [16.0, 1824.5], [17.0, 1493.0], [18.0, 1323.0], [19.0, 1417.0], [20.0, 1301.5], [21.0, 1257.0], [22.0, 1206.5], [23.0, 1565.0], [24.0, 1644.0], [25.0, 1388.0], [26.0, 1708.5], [27.0, 1581.0], [28.0, 1463.5], [29.0, 1462.0], [30.0, 1596.5], [31.0, 1534.0], [33.0, 1471.0], [32.0, 1596.5], [35.0, 1325.0], [34.0, 1382.0], [36.0, 1186.0], [37.0, 1582.5], [38.0, 1638.0], [39.0, 1581.0], [41.0, 811.0], [40.0, 925.0], [42.0, 1087.0], [43.0, 40.0], [45.0, 1311.0], [44.0, 837.5], [46.0, 32.0], [47.0, 28.0], [49.0, 31.0], [48.0, 27.0], [50.0, 29.0], [51.0, 26.0], [52.0, 24.0], [53.0, 25.0], [55.0, 25.0], [54.0, 25.0], [56.0, 25.0], [57.0, 26.0], [58.0, 26.0], [59.0, 26.0], [61.0, 24.0], [60.0, 24.5], [62.0, 24.0], [65.0, 1099.0], [67.0, 24.0], [66.0, 25.0], [69.0, 757.0], [70.0, 224.0], [1.0, 33.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 70.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 23.0, "minX": 1.0, "maxY": 1824.0, "series": [{"data": [[2.0, 32.5], [3.0, 35.0], [4.0, 31.5], [5.0, 28.0], [6.0, 72.5], [7.0, 249.5], [8.0, 28.0], [9.0, 100.0], [10.0, 35.5], [11.0, 1091.0], [12.0, 482.5], [13.0, 66.0], [14.0, 878.5], [15.0, 87.0], [16.0, 1824.0], [17.0, 1492.0], [18.0, 1321.5], [19.0, 1417.0], [20.0, 1301.0], [21.0, 1257.0], [22.0, 1206.5], [23.0, 1565.0], [24.0, 1644.0], [25.0, 1388.0], [26.0, 1708.0], [27.0, 1581.0], [28.0, 1463.0], [29.0, 1462.0], [30.0, 1596.5], [31.0, 1533.0], [33.0, 1471.0], [32.0, 1595.5], [35.0, 1324.5], [34.0, 1381.5], [36.0, 1186.0], [37.0, 1582.5], [38.0, 1638.0], [39.0, 1580.0], [41.0, 811.0], [40.0, 925.0], [42.0, 1087.0], [43.0, 39.0], [45.0, 1310.0], [44.0, 837.5], [46.0, 32.0], [47.0, 27.0], [49.0, 31.0], [48.0, 26.0], [50.0, 29.0], [51.0, 26.0], [52.0, 24.0], [53.0, 24.0], [55.0, 25.0], [54.0, 24.0], [56.0, 24.5], [57.0, 25.0], [58.0, 25.5], [59.0, 26.0], [61.0, 24.0], [60.0, 24.0], [62.0, 23.0], [65.0, 1097.0], [67.0, 24.0], [66.0, 25.0], [69.0, 756.0], [70.0, 223.5], [1.0, 33.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 70.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.25, "minX": 1.58664534E12, "maxY": 46.05, "series": [{"data": [[1.58664576E12, 39.71666666666667], [1.58664546E12, 29.866666666666667], [1.58664594E12, 33.81666666666667], [1.58664564E12, 27.55], [1.58664582E12, 28.883333333333333], [1.58664534E12, 1.25], [1.58664552E12, 31.216666666666665], [1.586646E12, 10.566666666666666], [1.5866457E12, 27.3], [1.58664588E12, 46.05], [1.5866454E12, 30.783333333333335], [1.58664558E12, 28.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.586646E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.25, "minX": 1.58664534E12, "maxY": 46.06666666666667, "series": [{"data": [[1.58664576E12, 39.93333333333333], [1.58664546E12, 29.883333333333333], [1.58664594E12, 33.81666666666667], [1.58664564E12, 27.15], [1.58664582E12, 29.483333333333334], [1.58664534E12, 1.25], [1.58664552E12, 31.116666666666667], [1.586646E12, 10.566666666666666], [1.5866457E12, 27.433333333333334], [1.58664588E12, 46.06666666666667], [1.5866454E12, 30.05], [1.58664558E12, 28.25]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.586646E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.58664534E12, "maxY": 23.083333333333332, "series": [{"data": [[1.58664534E12, 0.31666666666666665], [1.5866454E12, 1.35]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58664576E12, 19.983333333333334], [1.58664546E12, 14.933333333333334], [1.58664594E12, 17.066666666666666], [1.58664564E12, 13.55], [1.58664582E12, 14.766666666666667], [1.58664534E12, 0.4], [1.58664552E12, 15.583333333333334], [1.586646E12, 5.466666666666667], [1.5866457E12, 13.683333333333334], [1.58664588E12, 22.983333333333334], [1.5866454E12, 14.083333333333334], [1.58664558E12, 14.166666666666666]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58664576E12, 19.95], [1.58664546E12, 14.95], [1.58664594E12, 16.75], [1.58664564E12, 13.6], [1.58664582E12, 14.716666666666667], [1.58664534E12, 0.5333333333333333], [1.58664552E12, 15.533333333333333], [1.586646E12, 5.1], [1.5866457E12, 13.75], [1.58664588E12, 23.083333333333332], [1.5866454E12, 14.616666666666667], [1.58664558E12, 14.083333333333334]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.586646E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.25, "minX": 1.58664534E12, "maxY": 46.06666666666667, "series": [{"data": [[1.58664576E12, 39.93333333333333], [1.58664546E12, 29.883333333333333], [1.58664594E12, 33.81666666666667], [1.58664564E12, 27.15], [1.58664582E12, 29.483333333333334], [1.58664534E12, 1.25], [1.58664552E12, 31.116666666666667], [1.586646E12, 10.566666666666666], [1.5866457E12, 27.433333333333334], [1.58664588E12, 46.06666666666667], [1.5866454E12, 30.05], [1.58664558E12, 28.25]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.586646E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

