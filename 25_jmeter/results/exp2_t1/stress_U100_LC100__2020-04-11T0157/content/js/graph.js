/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 13.0, "minX": 0.0, "maxY": 4736.0, "series": [{"data": [[0.0, 13.0], [0.1, 15.0], [0.2, 16.0], [0.3, 17.0], [0.4, 17.0], [0.5, 18.0], [0.6, 18.0], [0.7, 18.0], [0.8, 19.0], [0.9, 19.0], [1.0, 19.0], [1.1, 19.0], [1.2, 19.0], [1.3, 20.0], [1.4, 20.0], [1.5, 20.0], [1.6, 20.0], [1.7, 20.0], [1.8, 21.0], [1.9, 21.0], [2.0, 21.0], [2.1, 21.0], [2.2, 22.0], [2.3, 22.0], [2.4, 22.0], [2.5, 22.0], [2.6, 22.0], [2.7, 22.0], [2.8, 22.0], [2.9, 23.0], [3.0, 23.0], [3.1, 23.0], [3.2, 23.0], [3.3, 23.0], [3.4, 24.0], [3.5, 24.0], [3.6, 24.0], [3.7, 24.0], [3.8, 24.0], [3.9, 24.0], [4.0, 25.0], [4.1, 25.0], [4.2, 25.0], [4.3, 25.0], [4.4, 25.0], [4.5, 25.0], [4.6, 25.0], [4.7, 26.0], [4.8, 26.0], [4.9, 26.0], [5.0, 26.0], [5.1, 26.0], [5.2, 26.0], [5.3, 26.0], [5.4, 26.0], [5.5, 27.0], [5.6, 27.0], [5.7, 27.0], [5.8, 27.0], [5.9, 27.0], [6.0, 27.0], [6.1, 28.0], [6.2, 28.0], [6.3, 28.0], [6.4, 28.0], [6.5, 28.0], [6.6, 28.0], [6.7, 28.0], [6.8, 29.0], [6.9, 29.0], [7.0, 29.0], [7.1, 29.0], [7.2, 29.0], [7.3, 29.0], [7.4, 29.0], [7.5, 30.0], [7.6, 30.0], [7.7, 30.0], [7.8, 30.0], [7.9, 30.0], [8.0, 31.0], [8.1, 31.0], [8.2, 31.0], [8.3, 31.0], [8.4, 31.0], [8.5, 31.0], [8.6, 32.0], [8.7, 32.0], [8.8, 32.0], [8.9, 32.0], [9.0, 33.0], [9.1, 33.0], [9.2, 33.0], [9.3, 33.0], [9.4, 34.0], [9.5, 34.0], [9.6, 34.0], [9.7, 34.0], [9.8, 35.0], [9.9, 35.0], [10.0, 35.0], [10.1, 36.0], [10.2, 36.0], [10.3, 37.0], [10.4, 37.0], [10.5, 38.0], [10.6, 39.0], [10.7, 39.0], [10.8, 40.0], [10.9, 41.0], [11.0, 42.0], [11.1, 43.0], [11.2, 44.0], [11.3, 45.0], [11.4, 46.0], [11.5, 47.0], [11.6, 48.0], [11.7, 50.0], [11.8, 51.0], [11.9, 53.0], [12.0, 57.0], [12.1, 63.0], [12.2, 68.0], [12.3, 74.0], [12.4, 80.0], [12.5, 97.0], [12.6, 109.0], [12.7, 120.0], [12.8, 129.0], [12.9, 151.0], [13.0, 179.0], [13.1, 204.0], [13.2, 223.0], [13.3, 245.0], [13.4, 260.0], [13.5, 271.0], [13.6, 287.0], [13.7, 298.0], [13.8, 306.0], [13.9, 316.0], [14.0, 321.0], [14.1, 330.0], [14.2, 336.0], [14.3, 342.0], [14.4, 352.0], [14.5, 357.0], [14.6, 365.0], [14.7, 367.0], [14.8, 378.0], [14.9, 386.0], [15.0, 391.0], [15.1, 398.0], [15.2, 406.0], [15.3, 413.0], [15.4, 416.0], [15.5, 423.0], [15.6, 428.0], [15.7, 430.0], [15.8, 435.0], [15.9, 439.0], [16.0, 443.0], [16.1, 449.0], [16.2, 454.0], [16.3, 459.0], [16.4, 463.0], [16.5, 470.0], [16.6, 473.0], [16.7, 478.0], [16.8, 483.0], [16.9, 489.0], [17.0, 494.0], [17.1, 498.0], [17.2, 501.0], [17.3, 506.0], [17.4, 510.0], [17.5, 515.0], [17.6, 520.0], [17.7, 523.0], [17.8, 526.0], [17.9, 529.0], [18.0, 534.0], [18.1, 538.0], [18.2, 541.0], [18.3, 544.0], [18.4, 546.0], [18.5, 549.0], [18.6, 552.0], [18.7, 556.0], [18.8, 560.0], [18.9, 562.0], [19.0, 565.0], [19.1, 568.0], [19.2, 570.0], [19.3, 573.0], [19.4, 577.0], [19.5, 579.0], [19.6, 584.0], [19.7, 586.0], [19.8, 590.0], [19.9, 594.0], [20.0, 597.0], [20.1, 600.0], [20.2, 602.0], [20.3, 603.0], [20.4, 607.0], [20.5, 609.0], [20.6, 612.0], [20.7, 615.0], [20.8, 616.0], [20.9, 618.0], [21.0, 621.0], [21.1, 623.0], [21.2, 625.0], [21.3, 627.0], [21.4, 629.0], [21.5, 631.0], [21.6, 634.0], [21.7, 635.0], [21.8, 638.0], [21.9, 640.0], [22.0, 643.0], [22.1, 645.0], [22.2, 647.0], [22.3, 649.0], [22.4, 651.0], [22.5, 653.0], [22.6, 655.0], [22.7, 656.0], [22.8, 657.0], [22.9, 660.0], [23.0, 662.0], [23.1, 664.0], [23.2, 666.0], [23.3, 666.0], [23.4, 668.0], [23.5, 671.0], [23.6, 673.0], [23.7, 675.0], [23.8, 677.0], [23.9, 679.0], [24.0, 680.0], [24.1, 682.0], [24.2, 685.0], [24.3, 687.0], [24.4, 690.0], [24.5, 691.0], [24.6, 693.0], [24.7, 694.0], [24.8, 697.0], [24.9, 698.0], [25.0, 700.0], [25.1, 701.0], [25.2, 703.0], [25.3, 706.0], [25.4, 709.0], [25.5, 710.0], [25.6, 712.0], [25.7, 713.0], [25.8, 715.0], [25.9, 716.0], [26.0, 719.0], [26.1, 720.0], [26.2, 722.0], [26.3, 724.0], [26.4, 726.0], [26.5, 728.0], [26.6, 732.0], [26.7, 733.0], [26.8, 735.0], [26.9, 736.0], [27.0, 738.0], [27.1, 740.0], [27.2, 742.0], [27.3, 743.0], [27.4, 746.0], [27.5, 748.0], [27.6, 749.0], [27.7, 750.0], [27.8, 752.0], [27.9, 754.0], [28.0, 755.0], [28.1, 756.0], [28.2, 758.0], [28.3, 759.0], [28.4, 761.0], [28.5, 762.0], [28.6, 763.0], [28.7, 765.0], [28.8, 766.0], [28.9, 768.0], [29.0, 770.0], [29.1, 771.0], [29.2, 773.0], [29.3, 774.0], [29.4, 776.0], [29.5, 778.0], [29.6, 779.0], [29.7, 781.0], [29.8, 783.0], [29.9, 785.0], [30.0, 786.0], [30.1, 788.0], [30.2, 790.0], [30.3, 792.0], [30.4, 794.0], [30.5, 796.0], [30.6, 798.0], [30.7, 801.0], [30.8, 801.0], [30.9, 803.0], [31.0, 804.0], [31.1, 806.0], [31.2, 808.0], [31.3, 811.0], [31.4, 813.0], [31.5, 814.0], [31.6, 816.0], [31.7, 817.0], [31.8, 819.0], [31.9, 819.0], [32.0, 821.0], [32.1, 822.0], [32.2, 824.0], [32.3, 826.0], [32.4, 828.0], [32.5, 831.0], [32.6, 833.0], [32.7, 835.0], [32.8, 837.0], [32.9, 838.0], [33.0, 839.0], [33.1, 841.0], [33.2, 842.0], [33.3, 843.0], [33.4, 844.0], [33.5, 846.0], [33.6, 847.0], [33.7, 848.0], [33.8, 850.0], [33.9, 852.0], [34.0, 853.0], [34.1, 855.0], [34.2, 857.0], [34.3, 859.0], [34.4, 862.0], [34.5, 864.0], [34.6, 866.0], [34.7, 867.0], [34.8, 870.0], [34.9, 872.0], [35.0, 873.0], [35.1, 874.0], [35.2, 876.0], [35.3, 877.0], [35.4, 879.0], [35.5, 881.0], [35.6, 883.0], [35.7, 884.0], [35.8, 886.0], [35.9, 887.0], [36.0, 888.0], [36.1, 890.0], [36.2, 892.0], [36.3, 894.0], [36.4, 897.0], [36.5, 899.0], [36.6, 901.0], [36.7, 904.0], [36.8, 905.0], [36.9, 906.0], [37.0, 907.0], [37.1, 909.0], [37.2, 910.0], [37.3, 912.0], [37.4, 914.0], [37.5, 917.0], [37.6, 918.0], [37.7, 921.0], [37.8, 924.0], [37.9, 926.0], [38.0, 928.0], [38.1, 929.0], [38.2, 930.0], [38.3, 932.0], [38.4, 934.0], [38.5, 935.0], [38.6, 936.0], [38.7, 937.0], [38.8, 939.0], [38.9, 940.0], [39.0, 942.0], [39.1, 943.0], [39.2, 945.0], [39.3, 946.0], [39.4, 947.0], [39.5, 948.0], [39.6, 949.0], [39.7, 950.0], [39.8, 952.0], [39.9, 953.0], [40.0, 955.0], [40.1, 957.0], [40.2, 960.0], [40.3, 962.0], [40.4, 962.0], [40.5, 963.0], [40.6, 966.0], [40.7, 967.0], [40.8, 969.0], [40.9, 970.0], [41.0, 972.0], [41.1, 973.0], [41.2, 974.0], [41.3, 975.0], [41.4, 978.0], [41.5, 980.0], [41.6, 981.0], [41.7, 983.0], [41.8, 984.0], [41.9, 985.0], [42.0, 988.0], [42.1, 989.0], [42.2, 991.0], [42.3, 993.0], [42.4, 995.0], [42.5, 996.0], [42.6, 998.0], [42.7, 999.0], [42.8, 1001.0], [42.9, 1003.0], [43.0, 1005.0], [43.1, 1006.0], [43.2, 1007.0], [43.3, 1009.0], [43.4, 1012.0], [43.5, 1012.0], [43.6, 1014.0], [43.7, 1015.0], [43.8, 1017.0], [43.9, 1018.0], [44.0, 1020.0], [44.1, 1021.0], [44.2, 1023.0], [44.3, 1025.0], [44.4, 1027.0], [44.5, 1029.0], [44.6, 1030.0], [44.7, 1032.0], [44.8, 1033.0], [44.9, 1035.0], [45.0, 1036.0], [45.1, 1037.0], [45.2, 1039.0], [45.3, 1041.0], [45.4, 1043.0], [45.5, 1045.0], [45.6, 1046.0], [45.7, 1048.0], [45.8, 1049.0], [45.9, 1051.0], [46.0, 1052.0], [46.1, 1054.0], [46.2, 1055.0], [46.3, 1056.0], [46.4, 1057.0], [46.5, 1059.0], [46.6, 1061.0], [46.7, 1062.0], [46.8, 1064.0], [46.9, 1065.0], [47.0, 1066.0], [47.1, 1068.0], [47.2, 1069.0], [47.3, 1072.0], [47.4, 1072.0], [47.5, 1074.0], [47.6, 1075.0], [47.7, 1076.0], [47.8, 1078.0], [47.9, 1079.0], [48.0, 1082.0], [48.1, 1084.0], [48.2, 1086.0], [48.3, 1087.0], [48.4, 1089.0], [48.5, 1090.0], [48.6, 1093.0], [48.7, 1096.0], [48.8, 1096.0], [48.9, 1098.0], [49.0, 1100.0], [49.1, 1101.0], [49.2, 1102.0], [49.3, 1103.0], [49.4, 1104.0], [49.5, 1106.0], [49.6, 1107.0], [49.7, 1108.0], [49.8, 1110.0], [49.9, 1111.0], [50.0, 1112.0], [50.1, 1114.0], [50.2, 1115.0], [50.3, 1117.0], [50.4, 1118.0], [50.5, 1120.0], [50.6, 1121.0], [50.7, 1122.0], [50.8, 1123.0], [50.9, 1125.0], [51.0, 1125.0], [51.1, 1127.0], [51.2, 1128.0], [51.3, 1130.0], [51.4, 1132.0], [51.5, 1133.0], [51.6, 1135.0], [51.7, 1137.0], [51.8, 1139.0], [51.9, 1141.0], [52.0, 1144.0], [52.1, 1146.0], [52.2, 1148.0], [52.3, 1150.0], [52.4, 1151.0], [52.5, 1152.0], [52.6, 1154.0], [52.7, 1155.0], [52.8, 1155.0], [52.9, 1157.0], [53.0, 1159.0], [53.1, 1162.0], [53.2, 1164.0], [53.3, 1165.0], [53.4, 1168.0], [53.5, 1169.0], [53.6, 1170.0], [53.7, 1172.0], [53.8, 1173.0], [53.9, 1175.0], [54.0, 1177.0], [54.1, 1179.0], [54.2, 1181.0], [54.3, 1182.0], [54.4, 1184.0], [54.5, 1185.0], [54.6, 1187.0], [54.7, 1188.0], [54.8, 1190.0], [54.9, 1191.0], [55.0, 1192.0], [55.1, 1194.0], [55.2, 1195.0], [55.3, 1197.0], [55.4, 1199.0], [55.5, 1200.0], [55.6, 1202.0], [55.7, 1203.0], [55.8, 1205.0], [55.9, 1206.0], [56.0, 1207.0], [56.1, 1209.0], [56.2, 1211.0], [56.3, 1213.0], [56.4, 1214.0], [56.5, 1216.0], [56.6, 1218.0], [56.7, 1220.0], [56.8, 1222.0], [56.9, 1224.0], [57.0, 1226.0], [57.1, 1227.0], [57.2, 1229.0], [57.3, 1230.0], [57.4, 1232.0], [57.5, 1234.0], [57.6, 1235.0], [57.7, 1238.0], [57.8, 1240.0], [57.9, 1242.0], [58.0, 1245.0], [58.1, 1247.0], [58.2, 1248.0], [58.3, 1249.0], [58.4, 1250.0], [58.5, 1252.0], [58.6, 1254.0], [58.7, 1256.0], [58.8, 1258.0], [58.9, 1259.0], [59.0, 1260.0], [59.1, 1262.0], [59.2, 1264.0], [59.3, 1265.0], [59.4, 1267.0], [59.5, 1269.0], [59.6, 1271.0], [59.7, 1273.0], [59.8, 1274.0], [59.9, 1276.0], [60.0, 1278.0], [60.1, 1280.0], [60.2, 1281.0], [60.3, 1284.0], [60.4, 1286.0], [60.5, 1287.0], [60.6, 1289.0], [60.7, 1291.0], [60.8, 1292.0], [60.9, 1294.0], [61.0, 1295.0], [61.1, 1297.0], [61.2, 1299.0], [61.3, 1301.0], [61.4, 1302.0], [61.5, 1303.0], [61.6, 1305.0], [61.7, 1307.0], [61.8, 1310.0], [61.9, 1311.0], [62.0, 1313.0], [62.1, 1314.0], [62.2, 1317.0], [62.3, 1318.0], [62.4, 1319.0], [62.5, 1321.0], [62.6, 1323.0], [62.7, 1324.0], [62.8, 1325.0], [62.9, 1326.0], [63.0, 1328.0], [63.1, 1330.0], [63.2, 1332.0], [63.3, 1335.0], [63.4, 1337.0], [63.5, 1339.0], [63.6, 1341.0], [63.7, 1342.0], [63.8, 1344.0], [63.9, 1346.0], [64.0, 1348.0], [64.1, 1349.0], [64.2, 1351.0], [64.3, 1352.0], [64.4, 1353.0], [64.5, 1355.0], [64.6, 1357.0], [64.7, 1358.0], [64.8, 1361.0], [64.9, 1362.0], [65.0, 1363.0], [65.1, 1365.0], [65.2, 1367.0], [65.3, 1368.0], [65.4, 1369.0], [65.5, 1371.0], [65.6, 1373.0], [65.7, 1375.0], [65.8, 1376.0], [65.9, 1378.0], [66.0, 1381.0], [66.1, 1383.0], [66.2, 1384.0], [66.3, 1385.0], [66.4, 1387.0], [66.5, 1388.0], [66.6, 1390.0], [66.7, 1393.0], [66.8, 1396.0], [66.9, 1397.0], [67.0, 1400.0], [67.1, 1401.0], [67.2, 1402.0], [67.3, 1404.0], [67.4, 1405.0], [67.5, 1405.0], [67.6, 1408.0], [67.7, 1408.0], [67.8, 1410.0], [67.9, 1412.0], [68.0, 1414.0], [68.1, 1416.0], [68.2, 1417.0], [68.3, 1419.0], [68.4, 1421.0], [68.5, 1423.0], [68.6, 1425.0], [68.7, 1427.0], [68.8, 1429.0], [68.9, 1430.0], [69.0, 1431.0], [69.1, 1433.0], [69.2, 1435.0], [69.3, 1438.0], [69.4, 1439.0], [69.5, 1440.0], [69.6, 1443.0], [69.7, 1446.0], [69.8, 1447.0], [69.9, 1449.0], [70.0, 1451.0], [70.1, 1452.0], [70.2, 1454.0], [70.3, 1457.0], [70.4, 1459.0], [70.5, 1460.0], [70.6, 1463.0], [70.7, 1465.0], [70.8, 1466.0], [70.9, 1469.0], [71.0, 1470.0], [71.1, 1472.0], [71.2, 1473.0], [71.3, 1475.0], [71.4, 1476.0], [71.5, 1479.0], [71.6, 1480.0], [71.7, 1481.0], [71.8, 1484.0], [71.9, 1486.0], [72.0, 1488.0], [72.1, 1490.0], [72.2, 1493.0], [72.3, 1497.0], [72.4, 1499.0], [72.5, 1501.0], [72.6, 1503.0], [72.7, 1504.0], [72.8, 1506.0], [72.9, 1509.0], [73.0, 1510.0], [73.1, 1512.0], [73.2, 1514.0], [73.3, 1517.0], [73.4, 1518.0], [73.5, 1521.0], [73.6, 1523.0], [73.7, 1524.0], [73.8, 1526.0], [73.9, 1527.0], [74.0, 1530.0], [74.1, 1533.0], [74.2, 1535.0], [74.3, 1537.0], [74.4, 1540.0], [74.5, 1541.0], [74.6, 1542.0], [74.7, 1544.0], [74.8, 1546.0], [74.9, 1549.0], [75.0, 1550.0], [75.1, 1552.0], [75.2, 1555.0], [75.3, 1556.0], [75.4, 1557.0], [75.5, 1561.0], [75.6, 1563.0], [75.7, 1564.0], [75.8, 1566.0], [75.9, 1568.0], [76.0, 1571.0], [76.1, 1572.0], [76.2, 1574.0], [76.3, 1577.0], [76.4, 1578.0], [76.5, 1582.0], [76.6, 1586.0], [76.7, 1588.0], [76.8, 1589.0], [76.9, 1590.0], [77.0, 1591.0], [77.1, 1593.0], [77.2, 1595.0], [77.3, 1597.0], [77.4, 1599.0], [77.5, 1602.0], [77.6, 1605.0], [77.7, 1607.0], [77.8, 1610.0], [77.9, 1611.0], [78.0, 1613.0], [78.1, 1616.0], [78.2, 1618.0], [78.3, 1620.0], [78.4, 1625.0], [78.5, 1627.0], [78.6, 1630.0], [78.7, 1632.0], [78.8, 1635.0], [78.9, 1639.0], [79.0, 1642.0], [79.1, 1645.0], [79.2, 1648.0], [79.3, 1651.0], [79.4, 1653.0], [79.5, 1655.0], [79.6, 1657.0], [79.7, 1659.0], [79.8, 1662.0], [79.9, 1664.0], [80.0, 1667.0], [80.1, 1671.0], [80.2, 1674.0], [80.3, 1676.0], [80.4, 1679.0], [80.5, 1681.0], [80.6, 1683.0], [80.7, 1686.0], [80.8, 1689.0], [80.9, 1692.0], [81.0, 1694.0], [81.1, 1699.0], [81.2, 1702.0], [81.3, 1705.0], [81.4, 1708.0], [81.5, 1711.0], [81.6, 1715.0], [81.7, 1718.0], [81.8, 1721.0], [81.9, 1723.0], [82.0, 1726.0], [82.1, 1728.0], [82.2, 1729.0], [82.3, 1732.0], [82.4, 1736.0], [82.5, 1740.0], [82.6, 1743.0], [82.7, 1746.0], [82.8, 1748.0], [82.9, 1750.0], [83.0, 1755.0], [83.1, 1759.0], [83.2, 1763.0], [83.3, 1765.0], [83.4, 1767.0], [83.5, 1769.0], [83.6, 1773.0], [83.7, 1775.0], [83.8, 1778.0], [83.9, 1780.0], [84.0, 1783.0], [84.1, 1785.0], [84.2, 1787.0], [84.3, 1789.0], [84.4, 1795.0], [84.5, 1799.0], [84.6, 1802.0], [84.7, 1806.0], [84.8, 1810.0], [84.9, 1812.0], [85.0, 1816.0], [85.1, 1817.0], [85.2, 1819.0], [85.3, 1821.0], [85.4, 1824.0], [85.5, 1827.0], [85.6, 1831.0], [85.7, 1836.0], [85.8, 1838.0], [85.9, 1841.0], [86.0, 1843.0], [86.1, 1847.0], [86.2, 1850.0], [86.3, 1855.0], [86.4, 1858.0], [86.5, 1860.0], [86.6, 1865.0], [86.7, 1867.0], [86.8, 1871.0], [86.9, 1873.0], [87.0, 1876.0], [87.1, 1880.0], [87.2, 1883.0], [87.3, 1886.0], [87.4, 1889.0], [87.5, 1894.0], [87.6, 1897.0], [87.7, 1900.0], [87.8, 1904.0], [87.9, 1909.0], [88.0, 1913.0], [88.1, 1916.0], [88.2, 1919.0], [88.3, 1924.0], [88.4, 1928.0], [88.5, 1931.0], [88.6, 1935.0], [88.7, 1939.0], [88.8, 1943.0], [88.9, 1945.0], [89.0, 1949.0], [89.1, 1954.0], [89.2, 1957.0], [89.3, 1960.0], [89.4, 1962.0], [89.5, 1967.0], [89.6, 1970.0], [89.7, 1974.0], [89.8, 1980.0], [89.9, 1983.0], [90.0, 1985.0], [90.1, 1989.0], [90.2, 1993.0], [90.3, 1997.0], [90.4, 1999.0], [90.5, 2002.0], [90.6, 2005.0], [90.7, 2009.0], [90.8, 2014.0], [90.9, 2017.0], [91.0, 2022.0], [91.1, 2025.0], [91.2, 2030.0], [91.3, 2036.0], [91.4, 2038.0], [91.5, 2041.0], [91.6, 2046.0], [91.7, 2055.0], [91.8, 2061.0], [91.9, 2066.0], [92.0, 2070.0], [92.1, 2075.0], [92.2, 2081.0], [92.3, 2086.0], [92.4, 2090.0], [92.5, 2096.0], [92.6, 2100.0], [92.7, 2104.0], [92.8, 2110.0], [92.9, 2114.0], [93.0, 2120.0], [93.1, 2125.0], [93.2, 2135.0], [93.3, 2141.0], [93.4, 2149.0], [93.5, 2154.0], [93.6, 2163.0], [93.7, 2171.0], [93.8, 2175.0], [93.9, 2183.0], [94.0, 2188.0], [94.1, 2196.0], [94.2, 2203.0], [94.3, 2211.0], [94.4, 2216.0], [94.5, 2222.0], [94.6, 2228.0], [94.7, 2235.0], [94.8, 2240.0], [94.9, 2247.0], [95.0, 2254.0], [95.1, 2261.0], [95.2, 2271.0], [95.3, 2278.0], [95.4, 2286.0], [95.5, 2296.0], [95.6, 2302.0], [95.7, 2308.0], [95.8, 2315.0], [95.9, 2326.0], [96.0, 2334.0], [96.1, 2345.0], [96.2, 2353.0], [96.3, 2359.0], [96.4, 2368.0], [96.5, 2378.0], [96.6, 2388.0], [96.7, 2396.0], [96.8, 2404.0], [96.9, 2423.0], [97.0, 2431.0], [97.1, 2439.0], [97.2, 2449.0], [97.3, 2461.0], [97.4, 2474.0], [97.5, 2483.0], [97.6, 2500.0], [97.7, 2513.0], [97.8, 2524.0], [97.9, 2544.0], [98.0, 2564.0], [98.1, 2589.0], [98.2, 2608.0], [98.3, 2629.0], [98.4, 2645.0], [98.5, 2657.0], [98.6, 2679.0], [98.7, 2696.0], [98.8, 2711.0], [98.9, 2736.0], [99.0, 2757.0], [99.1, 2822.0], [99.2, 2847.0], [99.3, 2883.0], [99.4, 2954.0], [99.5, 2972.0], [99.6, 3019.0], [99.7, 3068.0], [99.8, 3238.0], [99.9, 3426.0], [100.0, 4670.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 151.0], [0.1, 151.0], [0.2, 151.0], [0.3, 151.0], [0.4, 151.0], [0.5, 151.0], [0.6, 151.0], [0.7, 151.0], [0.8, 151.0], [0.9, 151.0], [1.0, 151.0], [1.1, 151.0], [1.2, 151.0], [1.3, 151.0], [1.4, 151.0], [1.5, 151.0], [1.6, 151.0], [1.7, 151.0], [1.8, 151.0], [1.9, 151.0], [2.0, 152.0], [2.1, 152.0], [2.2, 152.0], [2.3, 152.0], [2.4, 152.0], [2.5, 152.0], [2.6, 152.0], [2.7, 152.0], [2.8, 152.0], [2.9, 152.0], [3.0, 153.0], [3.1, 153.0], [3.2, 153.0], [3.3, 153.0], [3.4, 153.0], [3.5, 153.0], [3.6, 153.0], [3.7, 153.0], [3.8, 153.0], [3.9, 153.0], [4.0, 155.0], [4.1, 155.0], [4.2, 155.0], [4.3, 155.0], [4.4, 155.0], [4.5, 155.0], [4.6, 155.0], [4.7, 155.0], [4.8, 155.0], [4.9, 155.0], [5.0, 155.0], [5.1, 155.0], [5.2, 155.0], [5.3, 155.0], [5.4, 155.0], [5.5, 155.0], [5.6, 155.0], [5.7, 155.0], [5.8, 155.0], [5.9, 155.0], [6.0, 155.0], [6.1, 155.0], [6.2, 155.0], [6.3, 155.0], [6.4, 155.0], [6.5, 155.0], [6.6, 155.0], [6.7, 155.0], [6.8, 155.0], [6.9, 155.0], [7.0, 155.0], [7.1, 155.0], [7.2, 155.0], [7.3, 155.0], [7.4, 155.0], [7.5, 155.0], [7.6, 155.0], [7.7, 155.0], [7.8, 155.0], [7.9, 155.0], [8.0, 156.0], [8.1, 156.0], [8.2, 156.0], [8.3, 156.0], [8.4, 156.0], [8.5, 156.0], [8.6, 156.0], [8.7, 156.0], [8.8, 156.0], [8.9, 156.0], [9.0, 156.0], [9.1, 156.0], [9.2, 156.0], [9.3, 156.0], [9.4, 156.0], [9.5, 156.0], [9.6, 156.0], [9.7, 156.0], [9.8, 156.0], [9.9, 156.0], [10.0, 156.0], [10.1, 156.0], [10.2, 156.0], [10.3, 156.0], [10.4, 156.0], [10.5, 156.0], [10.6, 156.0], [10.7, 156.0], [10.8, 156.0], [10.9, 156.0], [11.0, 156.0], [11.1, 156.0], [11.2, 156.0], [11.3, 156.0], [11.4, 156.0], [11.5, 156.0], [11.6, 156.0], [11.7, 156.0], [11.8, 156.0], [11.9, 156.0], [12.0, 156.0], [12.1, 156.0], [12.2, 156.0], [12.3, 156.0], [12.4, 156.0], [12.5, 156.0], [12.6, 156.0], [12.7, 156.0], [12.8, 156.0], [12.9, 156.0], [13.0, 157.0], [13.1, 157.0], [13.2, 157.0], [13.3, 157.0], [13.4, 157.0], [13.5, 157.0], [13.6, 157.0], [13.7, 157.0], [13.8, 157.0], [13.9, 157.0], [14.0, 157.0], [14.1, 157.0], [14.2, 157.0], [14.3, 157.0], [14.4, 157.0], [14.5, 157.0], [14.6, 157.0], [14.7, 157.0], [14.8, 157.0], [14.9, 157.0], [15.0, 157.0], [15.1, 157.0], [15.2, 157.0], [15.3, 157.0], [15.4, 157.0], [15.5, 157.0], [15.6, 157.0], [15.7, 157.0], [15.8, 157.0], [15.9, 157.0], [16.0, 157.0], [16.1, 157.0], [16.2, 157.0], [16.3, 157.0], [16.4, 157.0], [16.5, 157.0], [16.6, 157.0], [16.7, 157.0], [16.8, 157.0], [16.9, 157.0], [17.0, 157.0], [17.1, 157.0], [17.2, 157.0], [17.3, 157.0], [17.4, 157.0], [17.5, 157.0], [17.6, 157.0], [17.7, 157.0], [17.8, 157.0], [17.9, 157.0], [18.0, 158.0], [18.1, 158.0], [18.2, 158.0], [18.3, 158.0], [18.4, 158.0], [18.5, 158.0], [18.6, 158.0], [18.7, 158.0], [18.8, 158.0], [18.9, 158.0], [19.0, 158.0], [19.1, 158.0], [19.2, 158.0], [19.3, 158.0], [19.4, 158.0], [19.5, 158.0], [19.6, 158.0], [19.7, 158.0], [19.8, 158.0], [19.9, 158.0], [20.0, 158.0], [20.1, 158.0], [20.2, 158.0], [20.3, 158.0], [20.4, 158.0], [20.5, 158.0], [20.6, 158.0], [20.7, 158.0], [20.8, 158.0], [20.9, 158.0], [21.0, 158.0], [21.1, 158.0], [21.2, 158.0], [21.3, 158.0], [21.4, 158.0], [21.5, 158.0], [21.6, 158.0], [21.7, 158.0], [21.8, 158.0], [21.9, 158.0], [22.0, 158.0], [22.1, 158.0], [22.2, 158.0], [22.3, 158.0], [22.4, 158.0], [22.5, 158.0], [22.6, 158.0], [22.7, 158.0], [22.8, 158.0], [22.9, 158.0], [23.0, 159.0], [23.1, 159.0], [23.2, 159.0], [23.3, 159.0], [23.4, 159.0], [23.5, 159.0], [23.6, 159.0], [23.7, 159.0], [23.8, 159.0], [23.9, 159.0], [24.0, 159.0], [24.1, 159.0], [24.2, 159.0], [24.3, 159.0], [24.4, 159.0], [24.5, 159.0], [24.6, 159.0], [24.7, 159.0], [24.8, 159.0], [24.9, 159.0], [25.0, 159.0], [25.1, 159.0], [25.2, 159.0], [25.3, 159.0], [25.4, 159.0], [25.5, 159.0], [25.6, 159.0], [25.7, 159.0], [25.8, 159.0], [25.9, 159.0], [26.0, 160.0], [26.1, 160.0], [26.2, 160.0], [26.3, 160.0], [26.4, 160.0], [26.5, 160.0], [26.6, 160.0], [26.7, 160.0], [26.8, 160.0], [26.9, 160.0], [27.0, 160.0], [27.1, 160.0], [27.2, 160.0], [27.3, 160.0], [27.4, 160.0], [27.5, 160.0], [27.6, 160.0], [27.7, 160.0], [27.8, 160.0], [27.9, 160.0], [28.0, 160.0], [28.1, 160.0], [28.2, 160.0], [28.3, 160.0], [28.4, 160.0], [28.5, 160.0], [28.6, 160.0], [28.7, 160.0], [28.8, 160.0], [28.9, 160.0], [29.0, 160.0], [29.1, 160.0], [29.2, 160.0], [29.3, 160.0], [29.4, 160.0], [29.5, 160.0], [29.6, 160.0], [29.7, 160.0], [29.8, 160.0], [29.9, 160.0], [30.0, 161.0], [30.1, 161.0], [30.2, 161.0], [30.3, 161.0], [30.4, 161.0], [30.5, 161.0], [30.6, 161.0], [30.7, 161.0], [30.8, 161.0], [30.9, 161.0], [31.0, 161.0], [31.1, 161.0], [31.2, 161.0], [31.3, 161.0], [31.4, 161.0], [31.5, 161.0], [31.6, 161.0], [31.7, 161.0], [31.8, 161.0], [31.9, 161.0], [32.0, 161.0], [32.1, 161.0], [32.2, 161.0], [32.3, 161.0], [32.4, 161.0], [32.5, 161.0], [32.6, 161.0], [32.7, 161.0], [32.8, 161.0], [32.9, 161.0], [33.0, 162.0], [33.1, 162.0], [33.2, 162.0], [33.3, 162.0], [33.4, 162.0], [33.5, 162.0], [33.6, 162.0], [33.7, 162.0], [33.8, 162.0], [33.9, 162.0], [34.0, 162.0], [34.1, 162.0], [34.2, 162.0], [34.3, 162.0], [34.4, 162.0], [34.5, 162.0], [34.6, 162.0], [34.7, 162.0], [34.8, 162.0], [34.9, 162.0], [35.0, 162.0], [35.1, 162.0], [35.2, 162.0], [35.3, 162.0], [35.4, 162.0], [35.5, 162.0], [35.6, 162.0], [35.7, 162.0], [35.8, 162.0], [35.9, 162.0], [36.0, 162.0], [36.1, 162.0], [36.2, 162.0], [36.3, 162.0], [36.4, 162.0], [36.5, 162.0], [36.6, 162.0], [36.7, 162.0], [36.8, 162.0], [36.9, 162.0], [37.0, 162.0], [37.1, 162.0], [37.2, 162.0], [37.3, 162.0], [37.4, 162.0], [37.5, 162.0], [37.6, 162.0], [37.7, 162.0], [37.8, 162.0], [37.9, 162.0], [38.0, 163.0], [38.1, 163.0], [38.2, 163.0], [38.3, 163.0], [38.4, 163.0], [38.5, 163.0], [38.6, 163.0], [38.7, 163.0], [38.8, 163.0], [38.9, 163.0], [39.0, 163.0], [39.1, 163.0], [39.2, 163.0], [39.3, 163.0], [39.4, 163.0], [39.5, 163.0], [39.6, 163.0], [39.7, 163.0], [39.8, 163.0], [39.9, 163.0], [40.0, 163.0], [40.1, 163.0], [40.2, 163.0], [40.3, 163.0], [40.4, 163.0], [40.5, 163.0], [40.6, 163.0], [40.7, 163.0], [40.8, 163.0], [40.9, 163.0], [41.0, 163.0], [41.1, 163.0], [41.2, 163.0], [41.3, 163.0], [41.4, 163.0], [41.5, 163.0], [41.6, 163.0], [41.7, 163.0], [41.8, 163.0], [41.9, 163.0], [42.0, 164.0], [42.1, 164.0], [42.2, 164.0], [42.3, 164.0], [42.4, 164.0], [42.5, 164.0], [42.6, 164.0], [42.7, 164.0], [42.8, 164.0], [42.9, 164.0], [43.0, 164.0], [43.1, 164.0], [43.2, 164.0], [43.3, 164.0], [43.4, 164.0], [43.5, 164.0], [43.6, 164.0], [43.7, 164.0], [43.8, 164.0], [43.9, 164.0], [44.0, 164.0], [44.1, 164.0], [44.2, 164.0], [44.3, 164.0], [44.4, 164.0], [44.5, 164.0], [44.6, 164.0], [44.7, 164.0], [44.8, 164.0], [44.9, 164.0], [45.0, 164.0], [45.1, 164.0], [45.2, 164.0], [45.3, 164.0], [45.4, 164.0], [45.5, 164.0], [45.6, 164.0], [45.7, 164.0], [45.8, 164.0], [45.9, 164.0], [46.0, 164.0], [46.1, 164.0], [46.2, 164.0], [46.3, 164.0], [46.4, 164.0], [46.5, 164.0], [46.6, 164.0], [46.7, 164.0], [46.8, 164.0], [46.9, 164.0], [47.0, 164.0], [47.1, 164.0], [47.2, 164.0], [47.3, 164.0], [47.4, 164.0], [47.5, 164.0], [47.6, 164.0], [47.7, 164.0], [47.8, 164.0], [47.9, 164.0], [48.0, 164.0], [48.1, 164.0], [48.2, 164.0], [48.3, 164.0], [48.4, 164.0], [48.5, 164.0], [48.6, 164.0], [48.7, 164.0], [48.8, 164.0], [48.9, 164.0], [49.0, 164.0], [49.1, 164.0], [49.2, 164.0], [49.3, 164.0], [49.4, 164.0], [49.5, 164.0], [49.6, 164.0], [49.7, 164.0], [49.8, 164.0], [49.9, 164.0], [50.0, 165.0], [50.1, 165.0], [50.2, 165.0], [50.3, 165.0], [50.4, 165.0], [50.5, 165.0], [50.6, 165.0], [50.7, 165.0], [50.8, 165.0], [50.9, 165.0], [51.0, 165.0], [51.1, 165.0], [51.2, 165.0], [51.3, 165.0], [51.4, 165.0], [51.5, 165.0], [51.6, 165.0], [51.7, 165.0], [51.8, 165.0], [51.9, 165.0], [52.0, 165.0], [52.1, 165.0], [52.2, 165.0], [52.3, 165.0], [52.4, 165.0], [52.5, 165.0], [52.6, 165.0], [52.7, 165.0], [52.8, 165.0], [52.9, 165.0], [53.0, 165.0], [53.1, 165.0], [53.2, 165.0], [53.3, 165.0], [53.4, 165.0], [53.5, 165.0], [53.6, 165.0], [53.7, 165.0], [53.8, 165.0], [53.9, 165.0], [54.0, 166.0], [54.1, 166.0], [54.2, 166.0], [54.3, 166.0], [54.4, 166.0], [54.5, 166.0], [54.6, 166.0], [54.7, 166.0], [54.8, 166.0], [54.9, 166.0], [55.0, 166.0], [55.1, 166.0], [55.2, 166.0], [55.3, 166.0], [55.4, 166.0], [55.5, 166.0], [55.6, 166.0], [55.7, 166.0], [55.8, 166.0], [55.9, 166.0], [56.0, 166.0], [56.1, 166.0], [56.2, 166.0], [56.3, 166.0], [56.4, 166.0], [56.5, 166.0], [56.6, 166.0], [56.7, 166.0], [56.8, 166.0], [56.9, 166.0], [57.0, 166.0], [57.1, 166.0], [57.2, 166.0], [57.3, 166.0], [57.4, 166.0], [57.5, 166.0], [57.6, 166.0], [57.7, 166.0], [57.8, 166.0], [57.9, 166.0], [58.0, 167.0], [58.1, 167.0], [58.2, 167.0], [58.3, 167.0], [58.4, 167.0], [58.5, 167.0], [58.6, 167.0], [58.7, 167.0], [58.8, 167.0], [58.9, 167.0], [59.0, 167.0], [59.1, 167.0], [59.2, 167.0], [59.3, 167.0], [59.4, 167.0], [59.5, 167.0], [59.6, 167.0], [59.7, 167.0], [59.8, 167.0], [59.9, 167.0], [60.0, 167.0], [60.1, 167.0], [60.2, 167.0], [60.3, 167.0], [60.4, 167.0], [60.5, 167.0], [60.6, 167.0], [60.7, 167.0], [60.8, 167.0], [60.9, 167.0], [61.0, 167.0], [61.1, 167.0], [61.2, 167.0], [61.3, 167.0], [61.4, 167.0], [61.5, 167.0], [61.6, 167.0], [61.7, 167.0], [61.8, 167.0], [61.9, 167.0], [62.0, 167.0], [62.1, 167.0], [62.2, 167.0], [62.3, 167.0], [62.4, 167.0], [62.5, 167.0], [62.6, 167.0], [62.7, 167.0], [62.8, 167.0], [62.9, 167.0], [63.0, 168.0], [63.1, 168.0], [63.2, 168.0], [63.3, 168.0], [63.4, 168.0], [63.5, 168.0], [63.6, 168.0], [63.7, 168.0], [63.8, 168.0], [63.9, 168.0], [64.0, 168.0], [64.1, 168.0], [64.2, 168.0], [64.3, 168.0], [64.4, 168.0], [64.5, 168.0], [64.6, 168.0], [64.7, 168.0], [64.8, 168.0], [64.9, 168.0], [65.0, 168.0], [65.1, 168.0], [65.2, 168.0], [65.3, 168.0], [65.4, 168.0], [65.5, 168.0], [65.6, 168.0], [65.7, 168.0], [65.8, 168.0], [65.9, 168.0], [66.0, 169.0], [66.1, 169.0], [66.2, 169.0], [66.3, 169.0], [66.4, 169.0], [66.5, 169.0], [66.6, 169.0], [66.7, 169.0], [66.8, 169.0], [66.9, 169.0], [67.0, 169.0], [67.1, 169.0], [67.2, 169.0], [67.3, 169.0], [67.4, 169.0], [67.5, 169.0], [67.6, 169.0], [67.7, 169.0], [67.8, 169.0], [67.9, 169.0], [68.0, 170.0], [68.1, 170.0], [68.2, 170.0], [68.3, 170.0], [68.4, 170.0], [68.5, 170.0], [68.6, 170.0], [68.7, 170.0], [68.8, 170.0], [68.9, 170.0], [69.0, 170.0], [69.1, 170.0], [69.2, 170.0], [69.3, 170.0], [69.4, 170.0], [69.5, 170.0], [69.6, 170.0], [69.7, 170.0], [69.8, 170.0], [69.9, 170.0], [70.0, 170.0], [70.1, 170.0], [70.2, 170.0], [70.3, 170.0], [70.4, 170.0], [70.5, 170.0], [70.6, 170.0], [70.7, 170.0], [70.8, 170.0], [70.9, 170.0], [71.0, 170.0], [71.1, 170.0], [71.2, 170.0], [71.3, 170.0], [71.4, 170.0], [71.5, 170.0], [71.6, 170.0], [71.7, 170.0], [71.8, 170.0], [71.9, 170.0], [72.0, 170.0], [72.1, 170.0], [72.2, 170.0], [72.3, 170.0], [72.4, 170.0], [72.5, 170.0], [72.6, 170.0], [72.7, 170.0], [72.8, 170.0], [72.9, 170.0], [73.0, 171.0], [73.1, 171.0], [73.2, 171.0], [73.3, 171.0], [73.4, 171.0], [73.5, 171.0], [73.6, 171.0], [73.7, 171.0], [73.8, 171.0], [73.9, 171.0], [74.0, 171.0], [74.1, 171.0], [74.2, 171.0], [74.3, 171.0], [74.4, 171.0], [74.5, 171.0], [74.6, 171.0], [74.7, 171.0], [74.8, 171.0], [74.9, 171.0], [75.0, 172.0], [75.1, 172.0], [75.2, 172.0], [75.3, 172.0], [75.4, 172.0], [75.5, 172.0], [75.6, 172.0], [75.7, 172.0], [75.8, 172.0], [75.9, 172.0], [76.0, 172.0], [76.1, 172.0], [76.2, 172.0], [76.3, 172.0], [76.4, 172.0], [76.5, 172.0], [76.6, 172.0], [76.7, 172.0], [76.8, 172.0], [76.9, 172.0], [77.0, 173.0], [77.1, 173.0], [77.2, 173.0], [77.3, 173.0], [77.4, 173.0], [77.5, 173.0], [77.6, 173.0], [77.7, 173.0], [77.8, 173.0], [77.9, 173.0], [78.0, 173.0], [78.1, 173.0], [78.2, 173.0], [78.3, 173.0], [78.4, 173.0], [78.5, 173.0], [78.6, 173.0], [78.7, 173.0], [78.8, 173.0], [78.9, 173.0], [79.0, 174.0], [79.1, 174.0], [79.2, 174.0], [79.3, 174.0], [79.4, 174.0], [79.5, 174.0], [79.6, 174.0], [79.7, 174.0], [79.8, 174.0], [79.9, 174.0], [80.0, 174.0], [80.1, 174.0], [80.2, 174.0], [80.3, 174.0], [80.4, 174.0], [80.5, 174.0], [80.6, 174.0], [80.7, 174.0], [80.8, 174.0], [80.9, 174.0], [81.0, 175.0], [81.1, 175.0], [81.2, 175.0], [81.3, 175.0], [81.4, 175.0], [81.5, 175.0], [81.6, 175.0], [81.7, 175.0], [81.8, 175.0], [81.9, 175.0], [82.0, 175.0], [82.1, 175.0], [82.2, 175.0], [82.3, 175.0], [82.4, 175.0], [82.5, 175.0], [82.6, 175.0], [82.7, 175.0], [82.8, 175.0], [82.9, 175.0], [83.0, 175.0], [83.1, 175.0], [83.2, 175.0], [83.3, 175.0], [83.4, 175.0], [83.5, 175.0], [83.6, 175.0], [83.7, 175.0], [83.8, 175.0], [83.9, 175.0], [84.0, 176.0], [84.1, 176.0], [84.2, 176.0], [84.3, 176.0], [84.4, 176.0], [84.5, 176.0], [84.6, 176.0], [84.7, 176.0], [84.8, 176.0], [84.9, 176.0], [85.0, 177.0], [85.1, 177.0], [85.2, 177.0], [85.3, 177.0], [85.4, 177.0], [85.5, 177.0], [85.6, 177.0], [85.7, 177.0], [85.8, 177.0], [85.9, 177.0], [86.0, 178.0], [86.1, 178.0], [86.2, 178.0], [86.3, 178.0], [86.4, 178.0], [86.5, 178.0], [86.6, 178.0], [86.7, 178.0], [86.8, 178.0], [86.9, 178.0], [87.0, 178.0], [87.1, 178.0], [87.2, 178.0], [87.3, 178.0], [87.4, 178.0], [87.5, 178.0], [87.6, 178.0], [87.7, 178.0], [87.8, 178.0], [87.9, 178.0], [88.0, 179.0], [88.1, 179.0], [88.2, 179.0], [88.3, 179.0], [88.4, 179.0], [88.5, 179.0], [88.6, 179.0], [88.7, 179.0], [88.8, 179.0], [88.9, 179.0], [89.0, 179.0], [89.1, 179.0], [89.2, 179.0], [89.3, 179.0], [89.4, 179.0], [89.5, 179.0], [89.6, 179.0], [89.7, 179.0], [89.8, 179.0], [89.9, 179.0], [90.0, 180.0], [90.1, 180.0], [90.2, 180.0], [90.3, 180.0], [90.4, 180.0], [90.5, 180.0], [90.6, 180.0], [90.7, 180.0], [90.8, 180.0], [90.9, 180.0], [91.0, 180.0], [91.1, 180.0], [91.2, 180.0], [91.3, 180.0], [91.4, 180.0], [91.5, 180.0], [91.6, 180.0], [91.7, 180.0], [91.8, 180.0], [91.9, 180.0], [92.0, 192.0], [92.1, 192.0], [92.2, 192.0], [92.3, 192.0], [92.4, 192.0], [92.5, 192.0], [92.6, 192.0], [92.7, 192.0], [92.8, 192.0], [92.9, 192.0], [93.0, 194.0], [93.1, 194.0], [93.2, 194.0], [93.3, 194.0], [93.4, 194.0], [93.5, 194.0], [93.6, 194.0], [93.7, 194.0], [93.8, 194.0], [93.9, 194.0], [94.0, 196.0], [94.1, 196.0], [94.2, 196.0], [94.3, 196.0], [94.4, 196.0], [94.5, 196.0], [94.6, 196.0], [94.7, 196.0], [94.8, 196.0], [94.9, 196.0], [95.0, 198.0], [95.1, 198.0], [95.2, 198.0], [95.3, 198.0], [95.4, 198.0], [95.5, 198.0], [95.6, 198.0], [95.7, 198.0], [95.8, 198.0], [95.9, 198.0], [96.0, 199.0], [96.1, 199.0], [96.2, 199.0], [96.3, 199.0], [96.4, 199.0], [96.5, 199.0], [96.6, 199.0], [96.7, 199.0], [96.8, 199.0], [96.9, 199.0], [97.0, 206.0], [97.1, 206.0], [97.2, 206.0], [97.3, 206.0], [97.4, 206.0], [97.5, 206.0], [97.6, 206.0], [97.7, 206.0], [97.8, 206.0], [97.9, 206.0], [98.0, 211.0], [98.1, 211.0], [98.2, 211.0], [98.3, 211.0], [98.4, 211.0], [98.5, 211.0], [98.6, 211.0], [98.7, 211.0], [98.8, 211.0], [98.9, 211.0], [99.0, 247.0], [99.1, 247.0], [99.2, 247.0], [99.3, 247.0], [99.4, 247.0], [99.5, 247.0], [99.6, 247.0], [99.7, 247.0], [99.8, 247.0], [99.9, 247.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 13.0], [0.1, 15.0], [0.2, 16.0], [0.3, 17.0], [0.4, 17.0], [0.5, 18.0], [0.6, 18.0], [0.7, 18.0], [0.8, 19.0], [0.9, 19.0], [1.0, 19.0], [1.1, 19.0], [1.2, 20.0], [1.3, 20.0], [1.4, 20.0], [1.5, 20.0], [1.6, 21.0], [1.7, 21.0], [1.8, 21.0], [1.9, 21.0], [2.0, 21.0], [2.1, 21.0], [2.2, 22.0], [2.3, 22.0], [2.4, 22.0], [2.5, 22.0], [2.6, 22.0], [2.7, 22.0], [2.8, 23.0], [2.9, 23.0], [3.0, 23.0], [3.1, 23.0], [3.2, 23.0], [3.3, 23.0], [3.4, 23.0], [3.5, 23.0], [3.6, 24.0], [3.7, 24.0], [3.8, 24.0], [3.9, 24.0], [4.0, 24.0], [4.1, 24.0], [4.2, 24.0], [4.3, 25.0], [4.4, 25.0], [4.5, 25.0], [4.6, 25.0], [4.7, 25.0], [4.8, 25.0], [4.9, 26.0], [5.0, 26.0], [5.1, 26.0], [5.2, 26.0], [5.3, 26.0], [5.4, 26.0], [5.5, 26.0], [5.6, 27.0], [5.7, 27.0], [5.8, 27.0], [5.9, 27.0], [6.0, 27.0], [6.1, 27.0], [6.2, 27.0], [6.3, 28.0], [6.4, 28.0], [6.5, 28.0], [6.6, 28.0], [6.7, 28.0], [6.8, 28.0], [6.9, 28.0], [7.0, 29.0], [7.1, 29.0], [7.2, 29.0], [7.3, 29.0], [7.4, 29.0], [7.5, 29.0], [7.6, 30.0], [7.7, 30.0], [7.8, 30.0], [7.9, 30.0], [8.0, 30.0], [8.1, 30.0], [8.2, 31.0], [8.3, 31.0], [8.4, 31.0], [8.5, 31.0], [8.6, 32.0], [8.7, 32.0], [8.8, 32.0], [8.9, 33.0], [9.0, 33.0], [9.1, 33.0], [9.2, 33.0], [9.3, 34.0], [9.4, 34.0], [9.5, 34.0], [9.6, 35.0], [9.7, 35.0], [9.8, 35.0], [9.9, 36.0], [10.0, 36.0], [10.1, 36.0], [10.2, 37.0], [10.3, 37.0], [10.4, 38.0], [10.5, 38.0], [10.6, 39.0], [10.7, 40.0], [10.8, 40.0], [10.9, 41.0], [11.0, 42.0], [11.1, 43.0], [11.2, 44.0], [11.3, 45.0], [11.4, 46.0], [11.5, 48.0], [11.6, 49.0], [11.7, 51.0], [11.8, 53.0], [11.9, 57.0], [12.0, 61.0], [12.1, 65.0], [12.2, 71.0], [12.3, 81.0], [12.4, 91.0], [12.5, 103.0], [12.6, 114.0], [12.7, 132.0], [12.8, 159.0], [12.9, 176.0], [13.0, 203.0], [13.1, 224.0], [13.2, 244.0], [13.3, 252.0], [13.4, 265.0], [13.5, 275.0], [13.6, 283.0], [13.7, 292.0], [13.8, 304.0], [13.9, 314.0], [14.0, 324.0], [14.1, 331.0], [14.2, 340.0], [14.3, 344.0], [14.4, 353.0], [14.5, 358.0], [14.6, 361.0], [14.7, 371.0], [14.8, 376.0], [14.9, 381.0], [15.0, 390.0], [15.1, 397.0], [15.2, 403.0], [15.3, 406.0], [15.4, 409.0], [15.5, 415.0], [15.6, 421.0], [15.7, 426.0], [15.8, 431.0], [15.9, 435.0], [16.0, 440.0], [16.1, 444.0], [16.2, 450.0], [16.3, 455.0], [16.4, 458.0], [16.5, 463.0], [16.6, 467.0], [16.7, 475.0], [16.8, 478.0], [16.9, 482.0], [17.0, 485.0], [17.1, 490.0], [17.2, 494.0], [17.3, 496.0], [17.4, 500.0], [17.5, 505.0], [17.6, 509.0], [17.7, 512.0], [17.8, 516.0], [17.9, 519.0], [18.0, 522.0], [18.1, 524.0], [18.2, 527.0], [18.3, 530.0], [18.4, 532.0], [18.5, 536.0], [18.6, 538.0], [18.7, 542.0], [18.8, 546.0], [18.9, 549.0], [19.0, 551.0], [19.1, 555.0], [19.2, 558.0], [19.3, 562.0], [19.4, 564.0], [19.5, 567.0], [19.6, 570.0], [19.7, 573.0], [19.8, 577.0], [19.9, 580.0], [20.0, 583.0], [20.1, 585.0], [20.2, 589.0], [20.3, 592.0], [20.4, 595.0], [20.5, 599.0], [20.6, 601.0], [20.7, 604.0], [20.8, 606.0], [20.9, 608.0], [21.0, 610.0], [21.1, 612.0], [21.2, 614.0], [21.3, 615.0], [21.4, 619.0], [21.5, 621.0], [21.6, 625.0], [21.7, 628.0], [21.8, 632.0], [21.9, 633.0], [22.0, 637.0], [22.1, 639.0], [22.2, 641.0], [22.3, 644.0], [22.4, 646.0], [22.5, 649.0], [22.6, 651.0], [22.7, 653.0], [22.8, 654.0], [22.9, 657.0], [23.0, 659.0], [23.1, 661.0], [23.2, 663.0], [23.3, 664.0], [23.4, 668.0], [23.5, 670.0], [23.6, 672.0], [23.7, 673.0], [23.8, 675.0], [23.9, 677.0], [24.0, 678.0], [24.1, 681.0], [24.2, 682.0], [24.3, 684.0], [24.4, 686.0], [24.5, 688.0], [24.6, 690.0], [24.7, 693.0], [24.8, 694.0], [24.9, 697.0], [25.0, 699.0], [25.1, 702.0], [25.2, 705.0], [25.3, 706.0], [25.4, 708.0], [25.5, 709.0], [25.6, 712.0], [25.7, 713.0], [25.8, 715.0], [25.9, 718.0], [26.0, 721.0], [26.1, 723.0], [26.2, 725.0], [26.3, 726.0], [26.4, 728.0], [26.5, 728.0], [26.6, 730.0], [26.7, 732.0], [26.8, 734.0], [26.9, 736.0], [27.0, 739.0], [27.1, 740.0], [27.2, 742.0], [27.3, 743.0], [27.4, 745.0], [27.5, 746.0], [27.6, 748.0], [27.7, 750.0], [27.8, 751.0], [27.9, 753.0], [28.0, 754.0], [28.1, 756.0], [28.2, 758.0], [28.3, 760.0], [28.4, 761.0], [28.5, 763.0], [28.6, 764.0], [28.7, 765.0], [28.8, 767.0], [28.9, 770.0], [29.0, 772.0], [29.1, 773.0], [29.2, 775.0], [29.3, 777.0], [29.4, 779.0], [29.5, 780.0], [29.6, 782.0], [29.7, 784.0], [29.8, 785.0], [29.9, 788.0], [30.0, 790.0], [30.1, 792.0], [30.2, 792.0], [30.3, 794.0], [30.4, 796.0], [30.5, 797.0], [30.6, 800.0], [30.7, 802.0], [30.8, 803.0], [30.9, 805.0], [31.0, 807.0], [31.1, 809.0], [31.2, 810.0], [31.3, 812.0], [31.4, 815.0], [31.5, 817.0], [31.6, 818.0], [31.7, 820.0], [31.8, 822.0], [31.9, 824.0], [32.0, 826.0], [32.1, 827.0], [32.2, 829.0], [32.3, 830.0], [32.4, 831.0], [32.5, 833.0], [32.6, 834.0], [32.7, 836.0], [32.8, 838.0], [32.9, 840.0], [33.0, 843.0], [33.1, 845.0], [33.2, 846.0], [33.3, 848.0], [33.4, 850.0], [33.5, 851.0], [33.6, 852.0], [33.7, 854.0], [33.8, 858.0], [33.9, 860.0], [34.0, 862.0], [34.1, 864.0], [34.2, 865.0], [34.3, 866.0], [34.4, 869.0], [34.5, 870.0], [34.6, 873.0], [34.7, 874.0], [34.8, 876.0], [34.9, 878.0], [35.0, 881.0], [35.1, 883.0], [35.2, 885.0], [35.3, 886.0], [35.4, 887.0], [35.5, 889.0], [35.6, 891.0], [35.7, 893.0], [35.8, 894.0], [35.9, 897.0], [36.0, 899.0], [36.1, 900.0], [36.2, 902.0], [36.3, 903.0], [36.4, 905.0], [36.5, 907.0], [36.6, 908.0], [36.7, 910.0], [36.8, 911.0], [36.9, 913.0], [37.0, 914.0], [37.1, 916.0], [37.2, 917.0], [37.3, 919.0], [37.4, 921.0], [37.5, 922.0], [37.6, 924.0], [37.7, 925.0], [37.8, 926.0], [37.9, 927.0], [38.0, 929.0], [38.1, 931.0], [38.2, 932.0], [38.3, 934.0], [38.4, 936.0], [38.5, 937.0], [38.6, 938.0], [38.7, 940.0], [38.8, 941.0], [38.9, 943.0], [39.0, 945.0], [39.1, 946.0], [39.2, 949.0], [39.3, 950.0], [39.4, 952.0], [39.5, 954.0], [39.6, 955.0], [39.7, 957.0], [39.8, 958.0], [39.9, 960.0], [40.0, 960.0], [40.1, 962.0], [40.2, 963.0], [40.3, 966.0], [40.4, 968.0], [40.5, 968.0], [40.6, 970.0], [40.7, 971.0], [40.8, 973.0], [40.9, 974.0], [41.0, 976.0], [41.1, 978.0], [41.2, 980.0], [41.3, 981.0], [41.4, 982.0], [41.5, 984.0], [41.6, 986.0], [41.7, 987.0], [41.8, 989.0], [41.9, 990.0], [42.0, 992.0], [42.1, 993.0], [42.2, 994.0], [42.3, 995.0], [42.4, 997.0], [42.5, 998.0], [42.6, 1000.0], [42.7, 1002.0], [42.8, 1005.0], [42.9, 1007.0], [43.0, 1008.0], [43.1, 1010.0], [43.2, 1012.0], [43.3, 1013.0], [43.4, 1014.0], [43.5, 1017.0], [43.6, 1018.0], [43.7, 1019.0], [43.8, 1020.0], [43.9, 1023.0], [44.0, 1024.0], [44.1, 1025.0], [44.2, 1027.0], [44.3, 1029.0], [44.4, 1030.0], [44.5, 1032.0], [44.6, 1033.0], [44.7, 1035.0], [44.8, 1037.0], [44.9, 1038.0], [45.0, 1040.0], [45.1, 1040.0], [45.2, 1041.0], [45.3, 1043.0], [45.4, 1044.0], [45.5, 1046.0], [45.6, 1046.0], [45.7, 1048.0], [45.8, 1049.0], [45.9, 1050.0], [46.0, 1052.0], [46.1, 1054.0], [46.2, 1055.0], [46.3, 1057.0], [46.4, 1058.0], [46.5, 1060.0], [46.6, 1061.0], [46.7, 1062.0], [46.8, 1064.0], [46.9, 1065.0], [47.0, 1067.0], [47.1, 1068.0], [47.2, 1071.0], [47.3, 1072.0], [47.4, 1073.0], [47.5, 1074.0], [47.6, 1076.0], [47.7, 1077.0], [47.8, 1079.0], [47.9, 1081.0], [48.0, 1083.0], [48.1, 1085.0], [48.2, 1086.0], [48.3, 1087.0], [48.4, 1088.0], [48.5, 1089.0], [48.6, 1092.0], [48.7, 1093.0], [48.8, 1095.0], [48.9, 1096.0], [49.0, 1097.0], [49.1, 1099.0], [49.2, 1101.0], [49.3, 1103.0], [49.4, 1104.0], [49.5, 1105.0], [49.6, 1106.0], [49.7, 1107.0], [49.8, 1109.0], [49.9, 1110.0], [50.0, 1112.0], [50.1, 1114.0], [50.2, 1116.0], [50.3, 1116.0], [50.4, 1118.0], [50.5, 1120.0], [50.6, 1121.0], [50.7, 1122.0], [50.8, 1123.0], [50.9, 1124.0], [51.0, 1126.0], [51.1, 1128.0], [51.2, 1129.0], [51.3, 1131.0], [51.4, 1133.0], [51.5, 1135.0], [51.6, 1137.0], [51.7, 1138.0], [51.8, 1140.0], [51.9, 1143.0], [52.0, 1144.0], [52.1, 1145.0], [52.2, 1147.0], [52.3, 1148.0], [52.4, 1150.0], [52.5, 1152.0], [52.6, 1155.0], [52.7, 1156.0], [52.8, 1158.0], [52.9, 1160.0], [53.0, 1161.0], [53.1, 1162.0], [53.2, 1164.0], [53.3, 1166.0], [53.4, 1168.0], [53.5, 1170.0], [53.6, 1171.0], [53.7, 1172.0], [53.8, 1174.0], [53.9, 1176.0], [54.0, 1179.0], [54.1, 1180.0], [54.2, 1181.0], [54.3, 1183.0], [54.4, 1185.0], [54.5, 1186.0], [54.6, 1188.0], [54.7, 1191.0], [54.8, 1193.0], [54.9, 1194.0], [55.0, 1196.0], [55.1, 1198.0], [55.2, 1199.0], [55.3, 1200.0], [55.4, 1201.0], [55.5, 1203.0], [55.6, 1205.0], [55.7, 1206.0], [55.8, 1209.0], [55.9, 1210.0], [56.0, 1212.0], [56.1, 1214.0], [56.2, 1215.0], [56.3, 1217.0], [56.4, 1218.0], [56.5, 1219.0], [56.6, 1222.0], [56.7, 1223.0], [56.8, 1225.0], [56.9, 1227.0], [57.0, 1228.0], [57.1, 1230.0], [57.2, 1231.0], [57.3, 1232.0], [57.4, 1234.0], [57.5, 1236.0], [57.6, 1237.0], [57.7, 1239.0], [57.8, 1241.0], [57.9, 1243.0], [58.0, 1245.0], [58.1, 1247.0], [58.2, 1248.0], [58.3, 1249.0], [58.4, 1251.0], [58.5, 1253.0], [58.6, 1254.0], [58.7, 1255.0], [58.8, 1257.0], [58.9, 1259.0], [59.0, 1260.0], [59.1, 1261.0], [59.2, 1262.0], [59.3, 1263.0], [59.4, 1265.0], [59.5, 1266.0], [59.6, 1268.0], [59.7, 1269.0], [59.8, 1270.0], [59.9, 1271.0], [60.0, 1272.0], [60.1, 1275.0], [60.2, 1277.0], [60.3, 1278.0], [60.4, 1279.0], [60.5, 1281.0], [60.6, 1282.0], [60.7, 1283.0], [60.8, 1285.0], [60.9, 1287.0], [61.0, 1289.0], [61.1, 1290.0], [61.2, 1292.0], [61.3, 1293.0], [61.4, 1295.0], [61.5, 1296.0], [61.6, 1298.0], [61.7, 1299.0], [61.8, 1302.0], [61.9, 1303.0], [62.0, 1305.0], [62.1, 1306.0], [62.2, 1308.0], [62.3, 1309.0], [62.4, 1310.0], [62.5, 1312.0], [62.6, 1313.0], [62.7, 1315.0], [62.8, 1318.0], [62.9, 1321.0], [63.0, 1321.0], [63.1, 1324.0], [63.2, 1325.0], [63.3, 1326.0], [63.4, 1328.0], [63.5, 1329.0], [63.6, 1331.0], [63.7, 1333.0], [63.8, 1335.0], [63.9, 1336.0], [64.0, 1338.0], [64.1, 1340.0], [64.2, 1340.0], [64.3, 1342.0], [64.4, 1344.0], [64.5, 1345.0], [64.6, 1347.0], [64.7, 1348.0], [64.8, 1350.0], [64.9, 1351.0], [65.0, 1353.0], [65.1, 1355.0], [65.2, 1357.0], [65.3, 1360.0], [65.4, 1361.0], [65.5, 1364.0], [65.6, 1364.0], [65.7, 1366.0], [65.8, 1368.0], [65.9, 1370.0], [66.0, 1371.0], [66.1, 1372.0], [66.2, 1373.0], [66.3, 1374.0], [66.4, 1375.0], [66.5, 1378.0], [66.6, 1380.0], [66.7, 1382.0], [66.8, 1384.0], [66.9, 1387.0], [67.0, 1389.0], [67.1, 1391.0], [67.2, 1392.0], [67.3, 1394.0], [67.4, 1397.0], [67.5, 1398.0], [67.6, 1400.0], [67.7, 1401.0], [67.8, 1403.0], [67.9, 1405.0], [68.0, 1407.0], [68.1, 1409.0], [68.2, 1410.0], [68.3, 1412.0], [68.4, 1413.0], [68.5, 1415.0], [68.6, 1417.0], [68.7, 1418.0], [68.8, 1420.0], [68.9, 1421.0], [69.0, 1422.0], [69.1, 1425.0], [69.2, 1427.0], [69.3, 1429.0], [69.4, 1431.0], [69.5, 1433.0], [69.6, 1435.0], [69.7, 1437.0], [69.8, 1439.0], [69.9, 1441.0], [70.0, 1442.0], [70.1, 1444.0], [70.2, 1444.0], [70.3, 1446.0], [70.4, 1448.0], [70.5, 1450.0], [70.6, 1452.0], [70.7, 1455.0], [70.8, 1457.0], [70.9, 1459.0], [71.0, 1461.0], [71.1, 1464.0], [71.2, 1466.0], [71.3, 1468.0], [71.4, 1470.0], [71.5, 1473.0], [71.6, 1475.0], [71.7, 1477.0], [71.8, 1479.0], [71.9, 1480.0], [72.0, 1482.0], [72.1, 1484.0], [72.2, 1486.0], [72.3, 1487.0], [72.4, 1489.0], [72.5, 1490.0], [72.6, 1493.0], [72.7, 1495.0], [72.8, 1497.0], [72.9, 1498.0], [73.0, 1500.0], [73.1, 1503.0], [73.2, 1504.0], [73.3, 1506.0], [73.4, 1508.0], [73.5, 1511.0], [73.6, 1511.0], [73.7, 1516.0], [73.8, 1520.0], [73.9, 1523.0], [74.0, 1524.0], [74.1, 1527.0], [74.2, 1529.0], [74.3, 1532.0], [74.4, 1534.0], [74.5, 1537.0], [74.6, 1540.0], [74.7, 1541.0], [74.8, 1543.0], [74.9, 1545.0], [75.0, 1547.0], [75.1, 1549.0], [75.2, 1552.0], [75.3, 1553.0], [75.4, 1555.0], [75.5, 1556.0], [75.6, 1559.0], [75.7, 1560.0], [75.8, 1563.0], [75.9, 1565.0], [76.0, 1568.0], [76.1, 1570.0], [76.2, 1572.0], [76.3, 1574.0], [76.4, 1576.0], [76.5, 1579.0], [76.6, 1581.0], [76.7, 1584.0], [76.8, 1585.0], [76.9, 1586.0], [77.0, 1589.0], [77.1, 1592.0], [77.2, 1594.0], [77.3, 1596.0], [77.4, 1597.0], [77.5, 1602.0], [77.6, 1604.0], [77.7, 1608.0], [77.8, 1612.0], [77.9, 1615.0], [78.0, 1618.0], [78.1, 1620.0], [78.2, 1621.0], [78.3, 1622.0], [78.4, 1625.0], [78.5, 1629.0], [78.6, 1631.0], [78.7, 1635.0], [78.8, 1637.0], [78.9, 1640.0], [79.0, 1643.0], [79.1, 1645.0], [79.2, 1648.0], [79.3, 1649.0], [79.4, 1650.0], [79.5, 1653.0], [79.6, 1655.0], [79.7, 1656.0], [79.8, 1660.0], [79.9, 1661.0], [80.0, 1663.0], [80.1, 1666.0], [80.2, 1669.0], [80.3, 1672.0], [80.4, 1673.0], [80.5, 1675.0], [80.6, 1677.0], [80.7, 1679.0], [80.8, 1681.0], [80.9, 1683.0], [81.0, 1686.0], [81.1, 1689.0], [81.2, 1692.0], [81.3, 1695.0], [81.4, 1698.0], [81.5, 1701.0], [81.6, 1703.0], [81.7, 1706.0], [81.8, 1708.0], [81.9, 1710.0], [82.0, 1712.0], [82.1, 1715.0], [82.2, 1717.0], [82.3, 1719.0], [82.4, 1720.0], [82.5, 1723.0], [82.6, 1726.0], [82.7, 1728.0], [82.8, 1730.0], [82.9, 1732.0], [83.0, 1734.0], [83.1, 1737.0], [83.2, 1739.0], [83.3, 1741.0], [83.4, 1745.0], [83.5, 1749.0], [83.6, 1751.0], [83.7, 1755.0], [83.8, 1758.0], [83.9, 1760.0], [84.0, 1763.0], [84.1, 1766.0], [84.2, 1769.0], [84.3, 1771.0], [84.4, 1773.0], [84.5, 1774.0], [84.6, 1777.0], [84.7, 1780.0], [84.8, 1782.0], [84.9, 1784.0], [85.0, 1788.0], [85.1, 1794.0], [85.2, 1799.0], [85.3, 1802.0], [85.4, 1804.0], [85.5, 1807.0], [85.6, 1813.0], [85.7, 1816.0], [85.8, 1819.0], [85.9, 1823.0], [86.0, 1825.0], [86.1, 1829.0], [86.2, 1833.0], [86.3, 1835.0], [86.4, 1840.0], [86.5, 1843.0], [86.6, 1848.0], [86.7, 1850.0], [86.8, 1853.0], [86.9, 1856.0], [87.0, 1858.0], [87.1, 1861.0], [87.2, 1866.0], [87.3, 1868.0], [87.4, 1872.0], [87.5, 1874.0], [87.6, 1877.0], [87.7, 1880.0], [87.8, 1882.0], [87.9, 1885.0], [88.0, 1890.0], [88.1, 1897.0], [88.2, 1898.0], [88.3, 1903.0], [88.4, 1906.0], [88.5, 1909.0], [88.6, 1912.0], [88.7, 1915.0], [88.8, 1920.0], [88.9, 1925.0], [89.0, 1927.0], [89.1, 1934.0], [89.2, 1936.0], [89.3, 1941.0], [89.4, 1946.0], [89.5, 1949.0], [89.6, 1955.0], [89.7, 1960.0], [89.8, 1963.0], [89.9, 1970.0], [90.0, 1975.0], [90.1, 1978.0], [90.2, 1983.0], [90.3, 1987.0], [90.4, 1991.0], [90.5, 1994.0], [90.6, 1998.0], [90.7, 2001.0], [90.8, 2006.0], [90.9, 2011.0], [91.0, 2016.0], [91.1, 2020.0], [91.2, 2027.0], [91.3, 2031.0], [91.4, 2035.0], [91.5, 2039.0], [91.6, 2045.0], [91.7, 2050.0], [91.8, 2053.0], [91.9, 2058.0], [92.0, 2061.0], [92.1, 2066.0], [92.2, 2071.0], [92.3, 2074.0], [92.4, 2078.0], [92.5, 2087.0], [92.6, 2093.0], [92.7, 2099.0], [92.8, 2104.0], [92.9, 2108.0], [93.0, 2111.0], [93.1, 2117.0], [93.2, 2123.0], [93.3, 2131.0], [93.4, 2136.0], [93.5, 2143.0], [93.6, 2149.0], [93.7, 2151.0], [93.8, 2154.0], [93.9, 2159.0], [94.0, 2165.0], [94.1, 2171.0], [94.2, 2176.0], [94.3, 2187.0], [94.4, 2194.0], [94.5, 2201.0], [94.6, 2206.0], [94.7, 2212.0], [94.8, 2219.0], [94.9, 2223.0], [95.0, 2231.0], [95.1, 2237.0], [95.2, 2242.0], [95.3, 2247.0], [95.4, 2258.0], [95.5, 2267.0], [95.6, 2276.0], [95.7, 2287.0], [95.8, 2296.0], [95.9, 2313.0], [96.0, 2322.0], [96.1, 2331.0], [96.2, 2353.0], [96.3, 2364.0], [96.4, 2373.0], [96.5, 2392.0], [96.6, 2399.0], [96.7, 2413.0], [96.8, 2419.0], [96.9, 2425.0], [97.0, 2438.0], [97.1, 2454.0], [97.2, 2464.0], [97.3, 2474.0], [97.4, 2492.0], [97.5, 2504.0], [97.6, 2521.0], [97.7, 2539.0], [97.8, 2555.0], [97.9, 2568.0], [98.0, 2583.0], [98.1, 2603.0], [98.2, 2620.0], [98.3, 2635.0], [98.4, 2646.0], [98.5, 2667.0], [98.6, 2708.0], [98.7, 2731.0], [98.8, 2761.0], [98.9, 2783.0], [99.0, 2819.0], [99.1, 2849.0], [99.2, 2883.0], [99.3, 2942.0], [99.4, 3024.0], [99.5, 3055.0], [99.6, 3118.0], [99.7, 3183.0], [99.8, 3296.0], [99.9, 3377.0], [100.0, 4736.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1252.0, "series": [{"data": [[0.0, 1252.0], [600.0, 490.0], [700.0, 567.0], [800.0, 587.0], [900.0, 618.0], [1000.0, 625.0], [1100.0, 650.0], [1200.0, 576.0], [1300.0, 576.0], [1400.0, 543.0], [1500.0, 498.0], [100.0, 57.0], [1600.0, 373.0], [1700.0, 338.0], [1800.0, 318.0], [1900.0, 273.0], [2000.0, 216.0], [2100.0, 157.0], [2200.0, 138.0], [2300.0, 120.0], [2400.0, 86.0], [2500.0, 54.0], [2600.0, 58.0], [2700.0, 35.0], [2800.0, 25.0], [2900.0, 23.0], [3000.0, 18.0], [3100.0, 6.0], [200.0, 65.0], [3200.0, 4.0], [3300.0, 5.0], [3400.0, 6.0], [3500.0, 1.0], [3600.0, 1.0], [3800.0, 2.0], [3900.0, 1.0], [4000.0, 1.0], [4600.0, 1.0], [300.0, 139.0], [400.0, 202.0], [500.0, 295.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[100.0, 97.0], [200.0, 3.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1248.0], [600.0, 446.0], [700.0, 554.0], [800.0, 548.0], [900.0, 651.0], [1000.0, 657.0], [1100.0, 613.0], [1200.0, 645.0], [1300.0, 586.0], [1400.0, 539.0], [1500.0, 448.0], [100.0, 51.0], [1600.0, 401.0], [1700.0, 378.0], [1800.0, 300.0], [1900.0, 240.0], [2000.0, 209.0], [2100.0, 176.0], [2200.0, 135.0], [2300.0, 77.0], [2400.0, 87.0], [2500.0, 59.0], [2600.0, 52.0], [2700.0, 35.0], [2800.0, 32.0], [2900.0, 10.0], [3000.0, 20.0], [3100.0, 17.0], [200.0, 77.0], [3300.0, 9.0], [3200.0, 9.0], [3400.0, 3.0], [3500.0, 1.0], [3600.0, 4.0], [3700.0, 1.0], [300.0, 144.0], [4700.0, 1.0], [400.0, 219.0], [500.0, 318.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3558.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 11085.0, "series": [{"data": [[0.0, 3558.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 11085.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5457.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 24.736059479553884, "minX": 1.58656662E12, "maxY": 100.0, "series": [{"data": [[1.58656668E12, 90.12938912938924], [1.58656698E12, 100.0], [1.5865668E12, 100.0], [1.58656728E12, 24.736059479553884], [1.58656686E12, 100.0], [1.58656716E12, 100.0], [1.58656722E12, 82.91756826378142], [1.58656662E12, 37.48173913043475], [1.58656704E12, 100.0], [1.5865671E12, 100.0], [1.58656674E12, 100.0], [1.58656692E12, 100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58656728E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17.0, "minX": 1.0, "maxY": 1287.131403383372, "series": [{"data": [[3.0, 30.333333333333332], [5.0, 17.0], [6.0, 28.5], [7.0, 49.0], [8.0, 199.39999999999998], [9.0, 30.6], [10.0, 29.142857142857142], [11.0, 27.5], [12.0, 28.25], [13.0, 45.0], [14.0, 35.714285714285715], [15.0, 31.545454545454547], [16.0, 53.25], [17.0, 32.50000000000001], [18.0, 22.5], [19.0, 36.57142857142857], [20.0, 27.0], [21.0, 29.428571428571427], [22.0, 33.0], [23.0, 29.384615384615383], [24.0, 72.75], [25.0, 30.363636363636367], [26.0, 31.363636363636363], [27.0, 28.666666666666668], [28.0, 102.14285714285715], [29.0, 39.33333333333333], [30.0, 31.333333333333332], [31.0, 30.909090909090907], [32.0, 30.0], [33.0, 32.166666666666664], [34.0, 31.545454545454547], [35.0, 34.666666666666664], [36.0, 50.5], [37.0, 35.94736842105263], [38.0, 29.499999999999996], [39.0, 36.833333333333336], [40.0, 63.41176470588234], [41.0, 29.500000000000007], [42.0, 33.44444444444444], [43.0, 29.090909090909086], [44.0, 38.15384615384616], [45.0, 39.00000000000001], [46.0, 31.375], [47.0, 29.666666666666668], [48.0, 26.699999999999996], [49.0, 31.0], [50.0, 31.88888888888889], [51.0, 27.199999999999996], [52.0, 36.684210526315795], [53.0, 35.625], [54.0, 34.18181818181818], [55.0, 43.36363636363637], [56.0, 36.642857142857146], [57.0, 39.25], [58.0, 31.41666666666667], [59.0, 27.796610169491526], [60.0, 25.666666666666664], [61.0, 28.33333333333334], [62.0, 28.599999999999998], [63.0, 30.38095238095238], [64.0, 27.217391304347824], [65.0, 29.428571428571427], [66.0, 25.27272727272727], [67.0, 23.9375], [68.0, 32.76470588235293], [69.0, 35.699999999999996], [70.0, 31.73684210526316], [71.0, 50.59090909090908], [72.0, 98.44], [73.0, 24.096774193548388], [74.0, 35.72727272727273], [75.0, 84.66666666666667], [76.0, 541.2142857142858], [77.0, 216.7], [78.0, 217.4193548387096], [79.0, 27.785714285714292], [80.0, 40.57142857142857], [81.0, 26.216216216216218], [82.0, 28.863636363636367], [83.0, 30.952380952380953], [84.0, 27.675675675675677], [85.0, 94.05714285714289], [86.0, 569.3541666666665], [87.0, 517.8695652173914], [88.0, 478.30434782608694], [89.0, 438.00000000000006], [90.0, 356.65384615384613], [91.0, 335.0], [92.0, 585.2424242424244], [93.0, 994.9354838709677], [94.0, 880.7894736842105], [95.0, 1147.6666666666667], [96.0, 912.3720930232558], [97.0, 1176.404761904762], [98.0, 946.7777777777778], [99.0, 1125.4150943396226], [100.0, 1287.131403383372]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[94.75079999999993, 1123.5743999999993]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 211.0], [3.0, 167.0], [4.0, 169.0], [5.0, 158.0], [6.0, 163.0], [7.0, 159.0], [8.0, 159.0], [9.0, 166.0], [10.0, 165.0], [11.0, 155.0], [12.0, 162.0], [13.0, 161.0], [14.0, 164.0], [15.0, 162.0], [16.0, 160.0], [17.0, 165.0], [18.0, 157.0], [19.0, 206.0], [20.0, 175.0], [21.0, 167.0], [22.0, 161.0], [23.0, 163.0], [24.0, 179.0], [25.0, 156.0], [26.0, 170.0], [27.0, 155.0], [28.0, 199.0], [29.0, 158.0], [30.0, 164.0], [31.0, 172.0], [32.0, 160.0], [33.0, 164.0], [34.0, 161.0], [35.0, 156.0], [36.0, 166.0], [37.0, 153.0], [38.0, 155.0], [39.0, 158.0], [40.0, 180.0], [41.0, 162.0], [42.0, 168.0], [43.0, 155.0], [44.0, 160.0], [45.0, 165.0], [46.0, 162.0], [47.0, 170.0], [48.0, 160.0], [49.0, 157.0], [50.0, 166.0], [51.0, 163.0], [52.0, 173.0], [53.0, 157.0], [54.0, 158.0], [55.0, 167.0], [56.0, 168.0], [57.0, 152.0], [58.0, 178.0], [59.0, 175.0], [60.0, 151.0], [61.0, 156.0], [62.0, 167.0], [63.0, 172.0], [64.0, 175.0], [65.0, 170.0], [66.0, 159.0], [67.0, 158.0], [68.0, 156.0], [69.0, 151.0], [70.0, 170.0], [71.0, 171.0], [72.0, 180.0], [73.0, 157.0], [74.0, 173.0], [75.0, 174.0], [76.0, 194.0], [77.0, 174.0], [78.0, 164.0], [79.0, 166.0], [80.0, 179.0], [81.0, 164.0], [82.0, 178.0], [83.0, 156.0], [84.0, 164.0], [85.0, 157.0], [86.0, 164.0], [87.0, 171.0], [88.0, 169.0], [89.0, 165.0], [90.0, 176.0], [91.0, 163.0], [92.0, 162.0], [93.0, 167.0], [94.0, 168.0], [95.0, 164.0], [96.0, 247.0], [97.0, 177.0], [98.0, 196.0], [99.0, 170.0], [100.0, 198.0], [1.0, 192.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[50.5, 167.81999999999994]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[3.0, 40.0], [4.0, 33.0], [5.0, 28.5], [7.0, 30.0], [8.0, 326.25], [9.0, 41.5], [10.0, 48.333333333333336], [11.0, 30.5], [12.0, 29.8], [13.0, 42.333333333333336], [14.0, 34.333333333333336], [15.0, 37.0], [16.0, 39.0], [17.0, 31.714285714285715], [18.0, 35.333333333333336], [19.0, 40.75], [20.0, 29.5], [21.0, 32.5], [22.0, 33.0], [23.0, 28.72727272727273], [24.0, 50.2], [25.0, 32.230769230769226], [26.0, 31.000000000000004], [27.0, 32.0], [28.0, 79.0], [29.0, 45.0], [30.0, 31.5], [31.0, 31.166666666666664], [32.0, 28.625], [33.0, 27.142857142857142], [34.0, 31.285714285714285], [35.0, 29.5], [36.0, 36.4], [37.0, 33.78947368421053], [38.0, 31.133333333333333], [39.0, 64.25], [40.0, 54.25], [41.0, 29.06666666666666], [42.0, 30.999999999999996], [43.0, 33.13333333333333], [44.0, 34.0], [45.0, 49.9], [46.0, 35.23529411764705], [47.0, 32.16666666666667], [48.0, 28.8125], [49.0, 27.75], [50.0, 28.5], [51.0, 46.76923076923077], [52.0, 27.454545454545457], [53.0, 37.53333333333334], [54.0, 36.66666666666667], [55.0, 53.166666666666664], [56.0, 29.166666666666668], [57.0, 31.785714285714292], [58.0, 28.583333333333332], [59.0, 27.61290322580645], [60.0, 25.428571428571427], [61.0, 28.529411764705888], [62.0, 27.807692307692307], [63.0, 27.923076923076923], [64.0, 25.857142857142854], [65.0, 27.25], [66.0, 33.73684210526315], [67.0, 26.625], [68.0, 37.833333333333336], [69.0, 28.133333333333333], [70.0, 37.10000000000001], [71.0, 30.14999999999999], [72.0, 107.22727272727273], [73.0, 25.117647058823533], [74.0, 28.76923076923077], [75.0, 190.7], [76.0, 280.33333333333337], [77.0, 203.0909090909091], [78.0, 359.79411764705884], [79.0, 29.523809523809526], [80.0, 30.791666666666664], [81.0, 23.666666666666668], [82.0, 27.193548387096776], [83.0, 28.285714285714285], [84.0, 34.20833333333333], [85.0, 133.390243902439], [86.0, 646.0526315789474], [87.0, 418.16666666666663], [88.0, 427.0], [89.0, 347.04761904761904], [90.0, 390.16666666666663], [91.0, 525.6666666666666], [92.0, 524.1666666666667], [93.0, 1144.0000000000002], [94.0, 390.4], [95.0, 1223.4999999999995], [96.0, 1071.875], [97.0, 1157.0232558139535], [98.0, 1078.6470588235297], [99.0, 1116.8596491228068], [100.0, 1282.5246781115866]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[94.75699999999995, 1120.864]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1910.15, "minX": 1.58656662E12, "maxY": 233109.26666666666, "series": [{"data": [[1.58656668E12, 233109.26666666666], [1.58656698E12, 219041.23333333334], [1.5865668E12, 219384.06666666668], [1.58656728E12, 30669.3], [1.58656686E12, 217209.5], [1.58656716E12, 221544.35], [1.58656722E12, 221297.95], [1.58656662E12, 60346.683333333334], [1.58656704E12, 212772.86666666667], [1.5865671E12, 212764.78333333333], [1.58656674E12, 215508.33333333334], [1.58656692E12, 219037.45]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58656668E12, 14616.55], [1.58656698E12, 13639.083333333334], [1.5865668E12, 13660.433333333332], [1.58656728E12, 1910.15], [1.58656686E12, 13525.416666666666], [1.58656716E12, 13795.283333333333], [1.58656722E12, 13781.45], [1.58656662E12, 3891.116666666667], [1.58656704E12, 13248.8], [1.5865671E12, 13248.533333333333], [1.58656674E12, 13419.033333333333], [1.58656692E12, 13639.15]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58656728E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 27.500000000000007, "minX": 1.58656662E12, "maxY": 1396.956336528223, "series": [{"data": [[1.58656668E12, 768.6719524281472], [1.58656698E12, 1218.9697916666678], [1.5865668E12, 1269.04880581516], [1.58656728E12, 27.500000000000007], [1.58656686E12, 1264.9147368421045], [1.58656716E12, 1194.3254376930995], [1.58656722E12, 711.0346585117227], [1.58656662E12, 46.325203252032544], [1.58656704E12, 1396.956336528223], [1.5865671E12, 1331.8474758324403], [1.58656674E12, 1295.6744186046512], [1.58656692E12, 1264.3076923076915]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58656668E12, 170.83720930232556], [1.58656662E12, 165.54385964912277]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58656668E12, 763.2736124634856], [1.58656698E12, 1228.2559833506764], [1.5865668E12, 1255.9885535900085], [1.58656728E12, 28.40944881889764], [1.58656686E12, 1269.4073298429325], [1.58656716E12, 1240.8271604938273], [1.58656722E12, 722.8520833333332], [1.58656662E12, 44.80882352941179], [1.58656704E12, 1362.309600862999], [1.5865671E12, 1303.0149732620343], [1.58656674E12, 1318.0699152542388], [1.58656692E12, 1234.4723670490089]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58656728E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 27.01408450704226, "minX": 1.58656662E12, "maxY": 1396.6730564430236, "series": [{"data": [[1.58656668E12, 768.288404360753], [1.58656698E12, 1218.6552083333336], [1.5865668E12, 1268.7642782969872], [1.58656728E12, 27.01408450704226], [1.58656686E12, 1264.6073684210526], [1.58656716E12, 1193.9979402677652], [1.58656722E12, 710.6615698267068], [1.58656662E12, 45.71544715447153], [1.58656704E12, 1396.6730564430236], [1.5865671E12, 1331.5220193340506], [1.58656674E12, 1295.3234672304427], [1.58656692E12, 1263.9968814968815]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58656668E12, 170.58139534883722], [1.58656662E12, 165.1578947368421]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58656668E12, 763.0029211295036], [1.58656698E12, 1227.9479708636834], [1.5865668E12, 1255.715920915714], [1.58656728E12, 28.015748031496063], [1.58656686E12, 1269.1602094240811], [1.58656716E12, 1240.5545267489695], [1.58656722E12, 722.6031249999997], [1.58656662E12, 44.51838235294119], [1.58656704E12, 1362.012944983818], [1.5865671E12, 1302.7272727272739], [1.58656674E12, 1317.7955508474588], [1.58656692E12, 1234.2127215849855]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58656728E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58656662E12, "maxY": 1.087719298245614, "series": [{"data": [[1.58656668E12, 0.24182358771060455], [1.58656698E12, 0.3145833333333335], [1.5865668E12, 0.3665628245067497], [1.58656728E12, 0.0], [1.58656686E12, 0.3684210526315787], [1.58656716E12, 0.32440782698249243], [1.58656722E12, 0.174311926605505], [1.58656662E12, 0.16666666666666677], [1.58656704E12, 0.33546325878594296], [1.5865671E12, 0.3297529538131041], [1.58656674E12, 0.36997885835095173], [1.58656692E12, 0.30769230769230804]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58656668E12, 0.4651162790697673], [1.58656662E12, 1.087719298245614]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58656668E12, 0.5121713729308668], [1.58656698E12, 0.4151925078043707], [1.5865668E12, 0.44745057232049984], [1.58656728E12, 0.3543307086614173], [1.58656686E12, 0.430366492146597], [1.58656716E12, 0.4084362139917695], [1.58656722E12, 0.37604166666666655], [1.58656662E12, 0.5625000000000001], [1.58656704E12, 0.395900755124056], [1.5865671E12, 0.4267379679144385], [1.58656674E12, 0.46927966101694907], [1.58656692E12, 0.39728884254431707]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58656728E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.58656662E12, "maxY": 4736.0, "series": [{"data": [[1.58656668E12, 3370.0], [1.58656698E12, 4670.0], [1.5865668E12, 3853.0], [1.58656728E12, 49.0], [1.58656686E12, 3819.0], [1.58656716E12, 4736.0], [1.58656722E12, 3555.0], [1.58656662E12, 1220.0], [1.58656704E12, 3600.0], [1.5865671E12, 3298.0], [1.58656674E12, 3763.0], [1.58656692E12, 3422.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58656668E12, 14.0], [1.58656698E12, 39.0], [1.5865668E12, 115.0], [1.58656728E12, 14.0], [1.58656686E12, 34.0], [1.58656716E12, 26.0], [1.58656722E12, 13.0], [1.58656662E12, 15.0], [1.58656704E12, 44.0], [1.5865671E12, 21.0], [1.58656674E12, 20.0], [1.58656692E12, 49.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58656668E12, 1865.0], [1.58656698E12, 1926.6], [1.5865668E12, 1955.0], [1.58656728E12, 36.0], [1.58656686E12, 2094.4], [1.58656716E12, 1963.4000000000012], [1.58656722E12, 1848.8], [1.58656662E12, 156.0], [1.58656704E12, 2134.8999999999996], [1.5865671E12, 1987.0], [1.58656674E12, 2112.0], [1.58656692E12, 2010.1999999999998]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58656668E12, 2666.599999999994], [1.58656698E12, 2605.7799999999997], [1.5865668E12, 2656.0], [1.58656728E12, 48.0], [1.58656686E12, 3083.0800000000017], [1.58656716E12, 2913.3199999999974], [1.58656722E12, 2662.0], [1.58656662E12, 199.72000000000003], [1.58656704E12, 2872.0], [1.5865671E12, 2717.5599999999977], [1.58656674E12, 2954.18], [1.58656692E12, 2807.7999999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58656668E12, 2125.0], [1.58656698E12, 2184.7999999999997], [1.5865668E12, 2172.5], [1.58656728E12, 38.5], [1.58656686E12, 2421.0999999999995], [1.58656716E12, 2257.2], [1.58656722E12, 2122.8999999999996], [1.58656662E12, 165.0], [1.58656704E12, 2379.249999999999], [1.5865671E12, 2234.5499999999993], [1.58656674E12, 2413.0499999999984], [1.58656692E12, 2244.499999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58656728E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 23.0, "minX": 1.0, "maxY": 1373.5, "series": [{"data": [[2.0, 23.0], [3.0, 36.5], [4.0, 29.0], [5.0, 30.0], [6.0, 37.0], [7.0, 29.0], [8.0, 27.5], [9.0, 28.0], [10.0, 33.0], [11.0, 31.0], [13.0, 35.5], [14.0, 32.5], [15.0, 30.0], [16.0, 32.5], [17.0, 1017.5], [18.0, 1096.0], [19.0, 907.5], [20.0, 940.5], [21.0, 1053.0], [22.0, 1062.0], [23.0, 1088.0], [24.0, 1187.5], [25.0, 1373.5], [26.0, 1190.0], [27.0, 1193.0], [28.0, 1191.5], [29.0, 1227.0], [30.0, 1089.0], [31.0, 1305.0], [32.0, 1157.0], [33.0, 1226.0], [35.0, 1185.0], [34.0, 1295.5], [37.0, 1111.0], [36.0, 1101.5], [39.0, 1066.0], [38.0, 993.0], [41.0, 935.0], [40.0, 1097.5], [42.0, 937.5], [43.0, 1017.0], [44.0, 890.0], [45.0, 1047.5], [47.0, 70.5], [46.0, 809.0], [48.0, 943.5], [49.0, 845.5], [51.0, 99.5], [50.0, 1148.5], [52.0, 541.5], [55.0, 334.5], [54.0, 34.5], [59.0, 1225.0], [58.0, 244.5], [60.0, 1068.5], [1.0, 192.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 60.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 23.0, "minX": 1.0, "maxY": 1373.0, "series": [{"data": [[2.0, 23.0], [3.0, 36.0], [4.0, 28.5], [5.0, 30.0], [6.0, 36.5], [7.0, 29.0], [8.0, 27.5], [9.0, 27.0], [10.0, 32.5], [11.0, 30.0], [13.0, 34.5], [14.0, 32.0], [15.0, 30.0], [16.0, 32.0], [17.0, 1017.0], [18.0, 1095.5], [19.0, 907.5], [20.0, 940.5], [21.0, 1053.0], [22.0, 1062.0], [23.0, 1088.0], [24.0, 1187.5], [25.0, 1373.0], [26.0, 1189.5], [27.0, 1192.0], [28.0, 1191.0], [29.0, 1227.0], [30.0, 1089.0], [31.0, 1304.0], [32.0, 1156.5], [33.0, 1225.0], [35.0, 1185.0], [34.0, 1295.5], [37.0, 1111.0], [36.0, 1101.0], [39.0, 1066.0], [38.0, 993.0], [41.0, 935.0], [40.0, 1097.5], [42.0, 937.0], [43.0, 1016.5], [44.0, 890.0], [45.0, 1047.0], [47.0, 70.5], [46.0, 809.0], [48.0, 943.5], [49.0, 845.5], [51.0, 99.0], [50.0, 1148.5], [52.0, 541.5], [55.0, 334.5], [54.0, 34.5], [59.0, 1225.0], [58.0, 244.5], [60.0, 1068.5], [1.0, 190.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 60.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.466666666666667, "minX": 1.58656662E12, "maxY": 35.266666666666666, "series": [{"data": [[1.58656668E12, 35.266666666666666], [1.58656698E12, 32.266666666666666], [1.5865668E12, 31.866666666666667], [1.58656728E12, 4.466666666666667], [1.58656686E12, 31.9], [1.58656716E12, 32.35], [1.58656722E12, 31.616666666666667], [1.58656662E12, 9.616666666666667], [1.58656704E12, 30.783333333333335], [1.5865671E12, 31.35], [1.58656674E12, 31.533333333333335], [1.58656692E12, 31.983333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58656728E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.483333333333333, "minX": 1.58656662E12, "maxY": 34.65, "series": [{"data": [[1.58656668E12, 34.65], [1.58656698E12, 32.016666666666666], [1.5865668E12, 32.06666666666667], [1.58656728E12, 4.483333333333333], [1.58656686E12, 31.75], [1.58656716E12, 32.38333333333333], [1.58656722E12, 32.35], [1.58656662E12, 9.583333333333334], [1.58656704E12, 31.1], [1.5865671E12, 31.1], [1.58656674E12, 31.5], [1.58656692E12, 32.016666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58656728E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.7166666666666667, "minX": 1.58656662E12, "maxY": 17.116666666666667, "series": [{"data": [[1.58656668E12, 0.7166666666666667], [1.58656662E12, 0.95]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58656668E12, 16.816666666666666], [1.58656698E12, 16.0], [1.5865668E12, 16.05], [1.58656728E12, 2.3666666666666667], [1.58656686E12, 15.833333333333334], [1.58656716E12, 16.183333333333334], [1.58656722E12, 16.35], [1.58656662E12, 4.1], [1.58656704E12, 15.65], [1.5865671E12, 15.516666666666667], [1.58656674E12, 15.766666666666667], [1.58656692E12, 16.033333333333335]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58656668E12, 17.116666666666667], [1.58656698E12, 16.016666666666666], [1.5865668E12, 16.016666666666666], [1.58656728E12, 2.1166666666666667], [1.58656686E12, 15.916666666666666], [1.58656716E12, 16.2], [1.58656722E12, 16.0], [1.58656662E12, 4.533333333333333], [1.58656704E12, 15.45], [1.5865671E12, 15.583333333333334], [1.58656674E12, 15.733333333333333], [1.58656692E12, 15.983333333333333]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58656728E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.483333333333333, "minX": 1.58656662E12, "maxY": 34.65, "series": [{"data": [[1.58656668E12, 34.65], [1.58656698E12, 32.016666666666666], [1.5865668E12, 32.06666666666667], [1.58656728E12, 4.483333333333333], [1.58656686E12, 31.75], [1.58656716E12, 32.38333333333333], [1.58656722E12, 32.35], [1.58656662E12, 9.583333333333334], [1.58656704E12, 31.1], [1.5865671E12, 31.1], [1.58656674E12, 31.5], [1.58656692E12, 32.016666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58656728E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

