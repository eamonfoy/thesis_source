/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 24.0, "minX": 0.0, "maxY": 2900.0, "series": [{"data": [[0.0, 24.0], [0.1, 27.0], [0.2, 28.0], [0.3, 28.0], [0.4, 29.0], [0.5, 30.0], [0.6, 30.0], [0.7, 30.0], [0.8, 31.0], [0.9, 31.0], [1.0, 31.0], [1.1, 32.0], [1.2, 32.0], [1.3, 32.0], [1.4, 32.0], [1.5, 32.0], [1.6, 33.0], [1.7, 33.0], [1.8, 33.0], [1.9, 33.0], [2.0, 33.0], [2.1, 33.0], [2.2, 34.0], [2.3, 34.0], [2.4, 34.0], [2.5, 34.0], [2.6, 34.0], [2.7, 34.0], [2.8, 34.0], [2.9, 34.0], [3.0, 35.0], [3.1, 35.0], [3.2, 35.0], [3.3, 35.0], [3.4, 35.0], [3.5, 35.0], [3.6, 35.0], [3.7, 35.0], [3.8, 35.0], [3.9, 35.0], [4.0, 35.0], [4.1, 35.0], [4.2, 36.0], [4.3, 36.0], [4.4, 36.0], [4.5, 36.0], [4.6, 36.0], [4.7, 36.0], [4.8, 36.0], [4.9, 36.0], [5.0, 36.0], [5.1, 36.0], [5.2, 36.0], [5.3, 36.0], [5.4, 36.0], [5.5, 36.0], [5.6, 36.0], [5.7, 37.0], [5.8, 37.0], [5.9, 37.0], [6.0, 37.0], [6.1, 37.0], [6.2, 37.0], [6.3, 37.0], [6.4, 37.0], [6.5, 37.0], [6.6, 37.0], [6.7, 37.0], [6.8, 37.0], [6.9, 37.0], [7.0, 37.0], [7.1, 37.0], [7.2, 37.0], [7.3, 37.0], [7.4, 37.0], [7.5, 38.0], [7.6, 38.0], [7.7, 38.0], [7.8, 38.0], [7.9, 38.0], [8.0, 38.0], [8.1, 38.0], [8.2, 38.0], [8.3, 38.0], [8.4, 38.0], [8.5, 38.0], [8.6, 38.0], [8.7, 38.0], [8.8, 38.0], [8.9, 38.0], [9.0, 38.0], [9.1, 38.0], [9.2, 38.0], [9.3, 38.0], [9.4, 38.0], [9.5, 38.0], [9.6, 38.0], [9.7, 39.0], [9.8, 39.0], [9.9, 39.0], [10.0, 39.0], [10.1, 39.0], [10.2, 39.0], [10.3, 39.0], [10.4, 39.0], [10.5, 39.0], [10.6, 39.0], [10.7, 39.0], [10.8, 39.0], [10.9, 39.0], [11.0, 39.0], [11.1, 39.0], [11.2, 39.0], [11.3, 39.0], [11.4, 39.0], [11.5, 39.0], [11.6, 39.0], [11.7, 39.0], [11.8, 39.0], [11.9, 39.0], [12.0, 39.0], [12.1, 39.0], [12.2, 40.0], [12.3, 40.0], [12.4, 40.0], [12.5, 40.0], [12.6, 40.0], [12.7, 40.0], [12.8, 40.0], [12.9, 40.0], [13.0, 40.0], [13.1, 40.0], [13.2, 40.0], [13.3, 40.0], [13.4, 40.0], [13.5, 40.0], [13.6, 40.0], [13.7, 40.0], [13.8, 40.0], [13.9, 40.0], [14.0, 40.0], [14.1, 40.0], [14.2, 40.0], [14.3, 40.0], [14.4, 40.0], [14.5, 40.0], [14.6, 40.0], [14.7, 40.0], [14.8, 40.0], [14.9, 40.0], [15.0, 40.0], [15.1, 41.0], [15.2, 41.0], [15.3, 41.0], [15.4, 41.0], [15.5, 41.0], [15.6, 41.0], [15.7, 41.0], [15.8, 41.0], [15.9, 41.0], [16.0, 41.0], [16.1, 41.0], [16.2, 41.0], [16.3, 41.0], [16.4, 41.0], [16.5, 41.0], [16.6, 41.0], [16.7, 41.0], [16.8, 41.0], [16.9, 41.0], [17.0, 41.0], [17.1, 41.0], [17.2, 41.0], [17.3, 41.0], [17.4, 41.0], [17.5, 41.0], [17.6, 41.0], [17.7, 41.0], [17.8, 41.0], [17.9, 41.0], [18.0, 41.0], [18.1, 41.0], [18.2, 41.0], [18.3, 42.0], [18.4, 42.0], [18.5, 42.0], [18.6, 42.0], [18.7, 42.0], [18.8, 42.0], [18.9, 42.0], [19.0, 42.0], [19.1, 42.0], [19.2, 42.0], [19.3, 42.0], [19.4, 42.0], [19.5, 42.0], [19.6, 42.0], [19.7, 42.0], [19.8, 42.0], [19.9, 42.0], [20.0, 42.0], [20.1, 42.0], [20.2, 42.0], [20.3, 42.0], [20.4, 42.0], [20.5, 42.0], [20.6, 42.0], [20.7, 42.0], [20.8, 42.0], [20.9, 42.0], [21.0, 42.0], [21.1, 42.0], [21.2, 42.0], [21.3, 43.0], [21.4, 43.0], [21.5, 43.0], [21.6, 43.0], [21.7, 43.0], [21.8, 43.0], [21.9, 43.0], [22.0, 43.0], [22.1, 43.0], [22.2, 43.0], [22.3, 43.0], [22.4, 43.0], [22.5, 43.0], [22.6, 43.0], [22.7, 43.0], [22.8, 43.0], [22.9, 43.0], [23.0, 43.0], [23.1, 43.0], [23.2, 43.0], [23.3, 43.0], [23.4, 43.0], [23.5, 43.0], [23.6, 43.0], [23.7, 43.0], [23.8, 43.0], [23.9, 43.0], [24.0, 43.0], [24.1, 43.0], [24.2, 43.0], [24.3, 43.0], [24.4, 43.0], [24.5, 43.0], [24.6, 43.0], [24.7, 44.0], [24.8, 44.0], [24.9, 44.0], [25.0, 44.0], [25.1, 44.0], [25.2, 44.0], [25.3, 44.0], [25.4, 44.0], [25.5, 44.0], [25.6, 44.0], [25.7, 44.0], [25.8, 44.0], [25.9, 44.0], [26.0, 44.0], [26.1, 44.0], [26.2, 44.0], [26.3, 44.0], [26.4, 44.0], [26.5, 44.0], [26.6, 44.0], [26.7, 44.0], [26.8, 44.0], [26.9, 44.0], [27.0, 44.0], [27.1, 44.0], [27.2, 44.0], [27.3, 44.0], [27.4, 44.0], [27.5, 44.0], [27.6, 44.0], [27.7, 44.0], [27.8, 44.0], [27.9, 44.0], [28.0, 44.0], [28.1, 44.0], [28.2, 44.0], [28.3, 45.0], [28.4, 45.0], [28.5, 45.0], [28.6, 45.0], [28.7, 45.0], [28.8, 45.0], [28.9, 45.0], [29.0, 45.0], [29.1, 45.0], [29.2, 45.0], [29.3, 45.0], [29.4, 45.0], [29.5, 45.0], [29.6, 45.0], [29.7, 45.0], [29.8, 45.0], [29.9, 45.0], [30.0, 45.0], [30.1, 45.0], [30.2, 45.0], [30.3, 45.0], [30.4, 45.0], [30.5, 45.0], [30.6, 45.0], [30.7, 45.0], [30.8, 45.0], [30.9, 45.0], [31.0, 45.0], [31.1, 45.0], [31.2, 45.0], [31.3, 45.0], [31.4, 45.0], [31.5, 45.0], [31.6, 45.0], [31.7, 45.0], [31.8, 46.0], [31.9, 46.0], [32.0, 46.0], [32.1, 46.0], [32.2, 46.0], [32.3, 46.0], [32.4, 46.0], [32.5, 46.0], [32.6, 46.0], [32.7, 46.0], [32.8, 46.0], [32.9, 46.0], [33.0, 46.0], [33.1, 46.0], [33.2, 46.0], [33.3, 46.0], [33.4, 46.0], [33.5, 46.0], [33.6, 46.0], [33.7, 46.0], [33.8, 46.0], [33.9, 46.0], [34.0, 46.0], [34.1, 46.0], [34.2, 46.0], [34.3, 46.0], [34.4, 46.0], [34.5, 46.0], [34.6, 46.0], [34.7, 46.0], [34.8, 46.0], [34.9, 46.0], [35.0, 46.0], [35.1, 46.0], [35.2, 47.0], [35.3, 47.0], [35.4, 47.0], [35.5, 47.0], [35.6, 47.0], [35.7, 47.0], [35.8, 47.0], [35.9, 47.0], [36.0, 47.0], [36.1, 47.0], [36.2, 47.0], [36.3, 47.0], [36.4, 47.0], [36.5, 47.0], [36.6, 47.0], [36.7, 47.0], [36.8, 47.0], [36.9, 47.0], [37.0, 47.0], [37.1, 47.0], [37.2, 47.0], [37.3, 47.0], [37.4, 47.0], [37.5, 47.0], [37.6, 47.0], [37.7, 47.0], [37.8, 47.0], [37.9, 47.0], [38.0, 47.0], [38.1, 47.0], [38.2, 47.0], [38.3, 48.0], [38.4, 48.0], [38.5, 48.0], [38.6, 48.0], [38.7, 48.0], [38.8, 48.0], [38.9, 48.0], [39.0, 48.0], [39.1, 48.0], [39.2, 48.0], [39.3, 48.0], [39.4, 48.0], [39.5, 48.0], [39.6, 48.0], [39.7, 48.0], [39.8, 48.0], [39.9, 48.0], [40.0, 48.0], [40.1, 48.0], [40.2, 48.0], [40.3, 48.0], [40.4, 48.0], [40.5, 48.0], [40.6, 48.0], [40.7, 48.0], [40.8, 48.0], [40.9, 48.0], [41.0, 48.0], [41.1, 48.0], [41.2, 48.0], [41.3, 49.0], [41.4, 49.0], [41.5, 49.0], [41.6, 49.0], [41.7, 49.0], [41.8, 49.0], [41.9, 49.0], [42.0, 49.0], [42.1, 49.0], [42.2, 49.0], [42.3, 49.0], [42.4, 49.0], [42.5, 49.0], [42.6, 49.0], [42.7, 49.0], [42.8, 49.0], [42.9, 49.0], [43.0, 49.0], [43.1, 49.0], [43.2, 49.0], [43.3, 49.0], [43.4, 49.0], [43.5, 49.0], [43.6, 49.0], [43.7, 49.0], [43.8, 49.0], [43.9, 50.0], [44.0, 50.0], [44.1, 50.0], [44.2, 50.0], [44.3, 50.0], [44.4, 50.0], [44.5, 50.0], [44.6, 50.0], [44.7, 50.0], [44.8, 50.0], [44.9, 50.0], [45.0, 50.0], [45.1, 50.0], [45.2, 50.0], [45.3, 50.0], [45.4, 50.0], [45.5, 50.0], [45.6, 50.0], [45.7, 50.0], [45.8, 50.0], [45.9, 50.0], [46.0, 50.0], [46.1, 50.0], [46.2, 50.0], [46.3, 51.0], [46.4, 51.0], [46.5, 51.0], [46.6, 51.0], [46.7, 51.0], [46.8, 51.0], [46.9, 51.0], [47.0, 51.0], [47.1, 51.0], [47.2, 51.0], [47.3, 51.0], [47.4, 51.0], [47.5, 51.0], [47.6, 51.0], [47.7, 51.0], [47.8, 51.0], [47.9, 51.0], [48.0, 51.0], [48.1, 51.0], [48.2, 51.0], [48.3, 51.0], [48.4, 51.0], [48.5, 51.0], [48.6, 51.0], [48.7, 52.0], [48.8, 52.0], [48.9, 52.0], [49.0, 52.0], [49.1, 52.0], [49.2, 52.0], [49.3, 52.0], [49.4, 52.0], [49.5, 52.0], [49.6, 52.0], [49.7, 52.0], [49.8, 52.0], [49.9, 52.0], [50.0, 52.0], [50.1, 52.0], [50.2, 52.0], [50.3, 52.0], [50.4, 52.0], [50.5, 52.0], [50.6, 52.0], [50.7, 52.0], [50.8, 52.0], [50.9, 53.0], [51.0, 53.0], [51.1, 53.0], [51.2, 53.0], [51.3, 53.0], [51.4, 53.0], [51.5, 53.0], [51.6, 53.0], [51.7, 53.0], [51.8, 53.0], [51.9, 53.0], [52.0, 53.0], [52.1, 53.0], [52.2, 53.0], [52.3, 53.0], [52.4, 53.0], [52.5, 53.0], [52.6, 53.0], [52.7, 53.0], [52.8, 54.0], [52.9, 54.0], [53.0, 54.0], [53.1, 54.0], [53.2, 54.0], [53.3, 54.0], [53.4, 54.0], [53.5, 54.0], [53.6, 54.0], [53.7, 54.0], [53.8, 54.0], [53.9, 54.0], [54.0, 54.0], [54.1, 54.0], [54.2, 54.0], [54.3, 54.0], [54.4, 54.0], [54.5, 55.0], [54.6, 55.0], [54.7, 55.0], [54.8, 55.0], [54.9, 55.0], [55.0, 55.0], [55.1, 55.0], [55.2, 55.0], [55.3, 55.0], [55.4, 55.0], [55.5, 55.0], [55.6, 55.0], [55.7, 55.0], [55.8, 55.0], [55.9, 55.0], [56.0, 55.0], [56.1, 56.0], [56.2, 56.0], [56.3, 56.0], [56.4, 56.0], [56.5, 56.0], [56.6, 56.0], [56.7, 56.0], [56.8, 56.0], [56.9, 56.0], [57.0, 56.0], [57.1, 56.0], [57.2, 56.0], [57.3, 56.0], [57.4, 56.0], [57.5, 56.0], [57.6, 57.0], [57.7, 57.0], [57.8, 57.0], [57.9, 57.0], [58.0, 57.0], [58.1, 57.0], [58.2, 57.0], [58.3, 57.0], [58.4, 57.0], [58.5, 57.0], [58.6, 57.0], [58.7, 58.0], [58.8, 58.0], [58.9, 58.0], [59.0, 58.0], [59.1, 58.0], [59.2, 58.0], [59.3, 58.0], [59.4, 58.0], [59.5, 58.0], [59.6, 58.0], [59.7, 59.0], [59.8, 59.0], [59.9, 59.0], [60.0, 59.0], [60.1, 59.0], [60.2, 59.0], [60.3, 59.0], [60.4, 59.0], [60.5, 60.0], [60.6, 60.0], [60.7, 60.0], [60.8, 60.0], [60.9, 60.0], [61.0, 60.0], [61.1, 60.0], [61.2, 60.0], [61.3, 61.0], [61.4, 61.0], [61.5, 61.0], [61.6, 61.0], [61.7, 61.0], [61.8, 61.0], [61.9, 61.0], [62.0, 62.0], [62.1, 62.0], [62.2, 62.0], [62.3, 62.0], [62.4, 62.0], [62.5, 62.0], [62.6, 62.0], [62.7, 63.0], [62.8, 63.0], [62.9, 63.0], [63.0, 63.0], [63.1, 63.0], [63.2, 63.0], [63.3, 64.0], [63.4, 64.0], [63.5, 64.0], [63.6, 64.0], [63.7, 64.0], [63.8, 65.0], [63.9, 65.0], [64.0, 65.0], [64.1, 65.0], [64.2, 66.0], [64.3, 66.0], [64.4, 66.0], [64.5, 67.0], [64.6, 67.0], [64.7, 67.0], [64.8, 68.0], [64.9, 68.0], [65.0, 69.0], [65.1, 69.0], [65.2, 69.0], [65.3, 70.0], [65.4, 70.0], [65.5, 70.0], [65.6, 71.0], [65.7, 72.0], [65.8, 72.0], [65.9, 73.0], [66.0, 74.0], [66.1, 75.0], [66.2, 76.0], [66.3, 77.0], [66.4, 78.0], [66.5, 80.0], [66.6, 81.0], [66.7, 83.0], [66.8, 84.0], [66.9, 89.0], [67.0, 94.0], [67.1, 100.0], [67.2, 107.0], [67.3, 118.0], [67.4, 133.0], [67.5, 144.0], [67.6, 169.0], [67.7, 199.0], [67.8, 221.0], [67.9, 232.0], [68.0, 243.0], [68.1, 250.0], [68.2, 261.0], [68.3, 277.0], [68.4, 288.0], [68.5, 302.0], [68.6, 309.0], [68.7, 320.0], [68.8, 327.0], [68.9, 334.0], [69.0, 345.0], [69.1, 353.0], [69.2, 356.0], [69.3, 362.0], [69.4, 367.0], [69.5, 373.0], [69.6, 380.0], [69.7, 386.0], [69.8, 395.0], [69.9, 402.0], [70.0, 409.0], [70.1, 415.0], [70.2, 421.0], [70.3, 427.0], [70.4, 430.0], [70.5, 433.0], [70.6, 437.0], [70.7, 440.0], [70.8, 446.0], [70.9, 450.0], [71.0, 455.0], [71.1, 460.0], [71.2, 465.0], [71.3, 468.0], [71.4, 475.0], [71.5, 480.0], [71.6, 485.0], [71.7, 488.0], [71.8, 493.0], [71.9, 499.0], [72.0, 505.0], [72.1, 508.0], [72.2, 511.0], [72.3, 515.0], [72.4, 517.0], [72.5, 520.0], [72.6, 523.0], [72.7, 525.0], [72.8, 528.0], [72.9, 532.0], [73.0, 538.0], [73.1, 541.0], [73.2, 544.0], [73.3, 550.0], [73.4, 554.0], [73.5, 557.0], [73.6, 559.0], [73.7, 562.0], [73.8, 565.0], [73.9, 570.0], [74.0, 574.0], [74.1, 576.0], [74.2, 580.0], [74.3, 583.0], [74.4, 586.0], [74.5, 589.0], [74.6, 593.0], [74.7, 597.0], [74.8, 603.0], [74.9, 608.0], [75.0, 610.0], [75.1, 613.0], [75.2, 618.0], [75.3, 621.0], [75.4, 624.0], [75.5, 629.0], [75.6, 632.0], [75.7, 636.0], [75.8, 638.0], [75.9, 641.0], [76.0, 645.0], [76.1, 647.0], [76.2, 651.0], [76.3, 656.0], [76.4, 659.0], [76.5, 662.0], [76.6, 665.0], [76.7, 670.0], [76.8, 674.0], [76.9, 676.0], [77.0, 679.0], [77.1, 682.0], [77.2, 685.0], [77.3, 688.0], [77.4, 692.0], [77.5, 697.0], [77.6, 698.0], [77.7, 701.0], [77.8, 705.0], [77.9, 708.0], [78.0, 709.0], [78.1, 711.0], [78.2, 715.0], [78.3, 717.0], [78.4, 722.0], [78.5, 724.0], [78.6, 727.0], [78.7, 729.0], [78.8, 732.0], [78.9, 735.0], [79.0, 738.0], [79.1, 742.0], [79.2, 744.0], [79.3, 748.0], [79.4, 751.0], [79.5, 754.0], [79.6, 757.0], [79.7, 759.0], [79.8, 762.0], [79.9, 765.0], [80.0, 766.0], [80.1, 769.0], [80.2, 773.0], [80.3, 776.0], [80.4, 780.0], [80.5, 782.0], [80.6, 787.0], [80.7, 789.0], [80.8, 794.0], [80.9, 797.0], [81.0, 800.0], [81.1, 803.0], [81.2, 807.0], [81.3, 811.0], [81.4, 812.0], [81.5, 815.0], [81.6, 818.0], [81.7, 822.0], [81.8, 827.0], [81.9, 830.0], [82.0, 833.0], [82.1, 835.0], [82.2, 837.0], [82.3, 839.0], [82.4, 843.0], [82.5, 846.0], [82.6, 849.0], [82.7, 851.0], [82.8, 855.0], [82.9, 858.0], [83.0, 860.0], [83.1, 862.0], [83.2, 865.0], [83.3, 868.0], [83.4, 869.0], [83.5, 871.0], [83.6, 876.0], [83.7, 879.0], [83.8, 884.0], [83.9, 887.0], [84.0, 889.0], [84.1, 893.0], [84.2, 896.0], [84.3, 898.0], [84.4, 900.0], [84.5, 904.0], [84.6, 907.0], [84.7, 909.0], [84.8, 912.0], [84.9, 915.0], [85.0, 917.0], [85.1, 918.0], [85.2, 921.0], [85.3, 924.0], [85.4, 927.0], [85.5, 930.0], [85.6, 933.0], [85.7, 938.0], [85.8, 941.0], [85.9, 942.0], [86.0, 946.0], [86.1, 950.0], [86.2, 953.0], [86.3, 956.0], [86.4, 959.0], [86.5, 962.0], [86.6, 968.0], [86.7, 970.0], [86.8, 973.0], [86.9, 974.0], [87.0, 981.0], [87.1, 985.0], [87.2, 988.0], [87.3, 991.0], [87.4, 993.0], [87.5, 997.0], [87.6, 999.0], [87.7, 1002.0], [87.8, 1005.0], [87.9, 1009.0], [88.0, 1011.0], [88.1, 1013.0], [88.2, 1016.0], [88.3, 1019.0], [88.4, 1022.0], [88.5, 1026.0], [88.6, 1030.0], [88.7, 1034.0], [88.8, 1037.0], [88.9, 1041.0], [89.0, 1044.0], [89.1, 1047.0], [89.2, 1050.0], [89.3, 1053.0], [89.4, 1057.0], [89.5, 1060.0], [89.6, 1065.0], [89.7, 1069.0], [89.8, 1071.0], [89.9, 1076.0], [90.0, 1077.0], [90.1, 1079.0], [90.2, 1084.0], [90.3, 1088.0], [90.4, 1091.0], [90.5, 1093.0], [90.6, 1096.0], [90.7, 1099.0], [90.8, 1102.0], [90.9, 1106.0], [91.0, 1110.0], [91.1, 1115.0], [91.2, 1119.0], [91.3, 1125.0], [91.4, 1126.0], [91.5, 1131.0], [91.6, 1136.0], [91.7, 1141.0], [91.8, 1144.0], [91.9, 1147.0], [92.0, 1150.0], [92.1, 1156.0], [92.2, 1158.0], [92.3, 1161.0], [92.4, 1165.0], [92.5, 1170.0], [92.6, 1176.0], [92.7, 1181.0], [92.8, 1186.0], [92.9, 1190.0], [93.0, 1193.0], [93.1, 1196.0], [93.2, 1199.0], [93.3, 1204.0], [93.4, 1210.0], [93.5, 1215.0], [93.6, 1221.0], [93.7, 1226.0], [93.8, 1231.0], [93.9, 1235.0], [94.0, 1243.0], [94.1, 1252.0], [94.2, 1254.0], [94.3, 1257.0], [94.4, 1260.0], [94.5, 1264.0], [94.6, 1269.0], [94.7, 1274.0], [94.8, 1280.0], [94.9, 1289.0], [95.0, 1294.0], [95.1, 1301.0], [95.2, 1308.0], [95.3, 1318.0], [95.4, 1322.0], [95.5, 1329.0], [95.6, 1335.0], [95.7, 1337.0], [95.8, 1343.0], [95.9, 1351.0], [96.0, 1354.0], [96.1, 1358.0], [96.2, 1364.0], [96.3, 1369.0], [96.4, 1375.0], [96.5, 1381.0], [96.6, 1388.0], [96.7, 1400.0], [96.8, 1407.0], [96.9, 1415.0], [97.0, 1421.0], [97.1, 1433.0], [97.2, 1445.0], [97.3, 1452.0], [97.4, 1461.0], [97.5, 1471.0], [97.6, 1476.0], [97.7, 1488.0], [97.8, 1497.0], [97.9, 1517.0], [98.0, 1522.0], [98.1, 1533.0], [98.2, 1539.0], [98.3, 1556.0], [98.4, 1571.0], [98.5, 1580.0], [98.6, 1596.0], [98.7, 1613.0], [98.8, 1628.0], [98.9, 1640.0], [99.0, 1676.0], [99.1, 1694.0], [99.2, 1723.0], [99.3, 1758.0], [99.4, 1791.0], [99.5, 1824.0], [99.6, 1883.0], [99.7, 1959.0], [99.8, 2008.0], [99.9, 2163.0], [100.0, 2900.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 145.0], [0.1, 145.0], [0.2, 145.0], [0.3, 145.0], [0.4, 145.0], [0.5, 145.0], [0.6, 145.0], [0.7, 145.0], [0.8, 145.0], [0.9, 145.0], [1.0, 150.0], [1.1, 150.0], [1.2, 150.0], [1.3, 150.0], [1.4, 150.0], [1.5, 150.0], [1.6, 150.0], [1.7, 150.0], [1.8, 150.0], [1.9, 150.0], [2.0, 153.0], [2.1, 153.0], [2.2, 153.0], [2.3, 153.0], [2.4, 153.0], [2.5, 153.0], [2.6, 153.0], [2.7, 153.0], [2.8, 153.0], [2.9, 153.0], [3.0, 155.0], [3.1, 155.0], [3.2, 155.0], [3.3, 155.0], [3.4, 155.0], [3.5, 155.0], [3.6, 155.0], [3.7, 155.0], [3.8, 155.0], [3.9, 155.0], [4.0, 156.0], [4.1, 156.0], [4.2, 156.0], [4.3, 156.0], [4.4, 156.0], [4.5, 156.0], [4.6, 156.0], [4.7, 156.0], [4.8, 156.0], [4.9, 156.0], [5.0, 156.0], [5.1, 156.0], [5.2, 156.0], [5.3, 156.0], [5.4, 156.0], [5.5, 156.0], [5.6, 156.0], [5.7, 156.0], [5.8, 156.0], [5.9, 156.0], [6.0, 156.0], [6.1, 156.0], [6.2, 156.0], [6.3, 156.0], [6.4, 156.0], [6.5, 156.0], [6.6, 156.0], [6.7, 156.0], [6.8, 156.0], [6.9, 156.0], [7.0, 157.0], [7.1, 157.0], [7.2, 157.0], [7.3, 157.0], [7.4, 157.0], [7.5, 157.0], [7.6, 157.0], [7.7, 157.0], [7.8, 157.0], [7.9, 157.0], [8.0, 157.0], [8.1, 157.0], [8.2, 157.0], [8.3, 157.0], [8.4, 157.0], [8.5, 157.0], [8.6, 157.0], [8.7, 157.0], [8.8, 157.0], [8.9, 157.0], [9.0, 157.0], [9.1, 157.0], [9.2, 157.0], [9.3, 157.0], [9.4, 157.0], [9.5, 157.0], [9.6, 157.0], [9.7, 157.0], [9.8, 157.0], [9.9, 157.0], [10.0, 157.0], [10.1, 157.0], [10.2, 157.0], [10.3, 157.0], [10.4, 157.0], [10.5, 157.0], [10.6, 157.0], [10.7, 157.0], [10.8, 157.0], [10.9, 157.0], [11.0, 158.0], [11.1, 158.0], [11.2, 158.0], [11.3, 158.0], [11.4, 158.0], [11.5, 158.0], [11.6, 158.0], [11.7, 158.0], [11.8, 158.0], [11.9, 158.0], [12.0, 159.0], [12.1, 159.0], [12.2, 159.0], [12.3, 159.0], [12.4, 159.0], [12.5, 159.0], [12.6, 159.0], [12.7, 159.0], [12.8, 159.0], [12.9, 159.0], [13.0, 160.0], [13.1, 160.0], [13.2, 160.0], [13.3, 160.0], [13.4, 160.0], [13.5, 160.0], [13.6, 160.0], [13.7, 160.0], [13.8, 160.0], [13.9, 160.0], [14.0, 160.0], [14.1, 160.0], [14.2, 160.0], [14.3, 160.0], [14.4, 160.0], [14.5, 160.0], [14.6, 160.0], [14.7, 160.0], [14.8, 160.0], [14.9, 160.0], [15.0, 161.0], [15.1, 161.0], [15.2, 161.0], [15.3, 161.0], [15.4, 161.0], [15.5, 161.0], [15.6, 161.0], [15.7, 161.0], [15.8, 161.0], [15.9, 161.0], [16.0, 161.0], [16.1, 161.0], [16.2, 161.0], [16.3, 161.0], [16.4, 161.0], [16.5, 161.0], [16.6, 161.0], [16.7, 161.0], [16.8, 161.0], [16.9, 161.0], [17.0, 161.0], [17.1, 161.0], [17.2, 161.0], [17.3, 161.0], [17.4, 161.0], [17.5, 161.0], [17.6, 161.0], [17.7, 161.0], [17.8, 161.0], [17.9, 161.0], [18.0, 161.0], [18.1, 161.0], [18.2, 161.0], [18.3, 161.0], [18.4, 161.0], [18.5, 161.0], [18.6, 161.0], [18.7, 161.0], [18.8, 161.0], [18.9, 161.0], [19.0, 161.0], [19.1, 161.0], [19.2, 161.0], [19.3, 161.0], [19.4, 161.0], [19.5, 161.0], [19.6, 161.0], [19.7, 161.0], [19.8, 161.0], [19.9, 161.0], [20.0, 162.0], [20.1, 162.0], [20.2, 162.0], [20.3, 162.0], [20.4, 162.0], [20.5, 162.0], [20.6, 162.0], [20.7, 162.0], [20.8, 162.0], [20.9, 162.0], [21.0, 162.0], [21.1, 162.0], [21.2, 162.0], [21.3, 162.0], [21.4, 162.0], [21.5, 162.0], [21.6, 162.0], [21.7, 162.0], [21.8, 162.0], [21.9, 162.0], [22.0, 162.0], [22.1, 162.0], [22.2, 162.0], [22.3, 162.0], [22.4, 162.0], [22.5, 162.0], [22.6, 162.0], [22.7, 162.0], [22.8, 162.0], [22.9, 162.0], [23.0, 162.0], [23.1, 162.0], [23.2, 162.0], [23.3, 162.0], [23.4, 162.0], [23.5, 162.0], [23.6, 162.0], [23.7, 162.0], [23.8, 162.0], [23.9, 162.0], [24.0, 162.0], [24.1, 162.0], [24.2, 162.0], [24.3, 162.0], [24.4, 162.0], [24.5, 162.0], [24.6, 162.0], [24.7, 162.0], [24.8, 162.0], [24.9, 162.0], [25.0, 163.0], [25.1, 163.0], [25.2, 163.0], [25.3, 163.0], [25.4, 163.0], [25.5, 163.0], [25.6, 163.0], [25.7, 163.0], [25.8, 163.0], [25.9, 163.0], [26.0, 164.0], [26.1, 164.0], [26.2, 164.0], [26.3, 164.0], [26.4, 164.0], [26.5, 164.0], [26.6, 164.0], [26.7, 164.0], [26.8, 164.0], [26.9, 164.0], [27.0, 164.0], [27.1, 164.0], [27.2, 164.0], [27.3, 164.0], [27.4, 164.0], [27.5, 164.0], [27.6, 164.0], [27.7, 164.0], [27.8, 164.0], [27.9, 164.0], [28.0, 164.0], [28.1, 164.0], [28.2, 164.0], [28.3, 164.0], [28.4, 164.0], [28.5, 164.0], [28.6, 164.0], [28.7, 164.0], [28.8, 164.0], [28.9, 164.0], [29.0, 165.0], [29.1, 165.0], [29.2, 165.0], [29.3, 165.0], [29.4, 165.0], [29.5, 165.0], [29.6, 165.0], [29.7, 165.0], [29.8, 165.0], [29.9, 165.0], [30.0, 165.0], [30.1, 165.0], [30.2, 165.0], [30.3, 165.0], [30.4, 165.0], [30.5, 165.0], [30.6, 165.0], [30.7, 165.0], [30.8, 165.0], [30.9, 165.0], [31.0, 166.0], [31.1, 166.0], [31.2, 166.0], [31.3, 166.0], [31.4, 166.0], [31.5, 166.0], [31.6, 166.0], [31.7, 166.0], [31.8, 166.0], [31.9, 166.0], [32.0, 166.0], [32.1, 166.0], [32.2, 166.0], [32.3, 166.0], [32.4, 166.0], [32.5, 166.0], [32.6, 166.0], [32.7, 166.0], [32.8, 166.0], [32.9, 166.0], [33.0, 166.0], [33.1, 166.0], [33.2, 166.0], [33.3, 166.0], [33.4, 166.0], [33.5, 166.0], [33.6, 166.0], [33.7, 166.0], [33.8, 166.0], [33.9, 166.0], [34.0, 167.0], [34.1, 167.0], [34.2, 167.0], [34.3, 167.0], [34.4, 167.0], [34.5, 167.0], [34.6, 167.0], [34.7, 167.0], [34.8, 167.0], [34.9, 167.0], [35.0, 167.0], [35.1, 167.0], [35.2, 167.0], [35.3, 167.0], [35.4, 167.0], [35.5, 167.0], [35.6, 167.0], [35.7, 167.0], [35.8, 167.0], [35.9, 167.0], [36.0, 167.0], [36.1, 167.0], [36.2, 167.0], [36.3, 167.0], [36.4, 167.0], [36.5, 167.0], [36.6, 167.0], [36.7, 167.0], [36.8, 167.0], [36.9, 167.0], [37.0, 168.0], [37.1, 168.0], [37.2, 168.0], [37.3, 168.0], [37.4, 168.0], [37.5, 168.0], [37.6, 168.0], [37.7, 168.0], [37.8, 168.0], [37.9, 168.0], [38.0, 168.0], [38.1, 168.0], [38.2, 168.0], [38.3, 168.0], [38.4, 168.0], [38.5, 168.0], [38.6, 168.0], [38.7, 168.0], [38.8, 168.0], [38.9, 168.0], [39.0, 168.0], [39.1, 168.0], [39.2, 168.0], [39.3, 168.0], [39.4, 168.0], [39.5, 168.0], [39.6, 168.0], [39.7, 168.0], [39.8, 168.0], [39.9, 168.0], [40.0, 168.0], [40.1, 168.0], [40.2, 168.0], [40.3, 168.0], [40.4, 168.0], [40.5, 168.0], [40.6, 168.0], [40.7, 168.0], [40.8, 168.0], [40.9, 168.0], [41.0, 168.0], [41.1, 168.0], [41.2, 168.0], [41.3, 168.0], [41.4, 168.0], [41.5, 168.0], [41.6, 168.0], [41.7, 168.0], [41.8, 168.0], [41.9, 168.0], [42.0, 169.0], [42.1, 169.0], [42.2, 169.0], [42.3, 169.0], [42.4, 169.0], [42.5, 169.0], [42.6, 169.0], [42.7, 169.0], [42.8, 169.0], [42.9, 169.0], [43.0, 169.0], [43.1, 169.0], [43.2, 169.0], [43.3, 169.0], [43.4, 169.0], [43.5, 169.0], [43.6, 169.0], [43.7, 169.0], [43.8, 169.0], [43.9, 169.0], [44.0, 169.0], [44.1, 169.0], [44.2, 169.0], [44.3, 169.0], [44.4, 169.0], [44.5, 169.0], [44.6, 169.0], [44.7, 169.0], [44.8, 169.0], [44.9, 169.0], [45.0, 169.0], [45.1, 169.0], [45.2, 169.0], [45.3, 169.0], [45.4, 169.0], [45.5, 169.0], [45.6, 169.0], [45.7, 169.0], [45.8, 169.0], [45.9, 169.0], [46.0, 170.0], [46.1, 170.0], [46.2, 170.0], [46.3, 170.0], [46.4, 170.0], [46.5, 170.0], [46.6, 170.0], [46.7, 170.0], [46.8, 170.0], [46.9, 170.0], [47.0, 170.0], [47.1, 170.0], [47.2, 170.0], [47.3, 170.0], [47.4, 170.0], [47.5, 170.0], [47.6, 170.0], [47.7, 170.0], [47.8, 170.0], [47.9, 170.0], [48.0, 170.0], [48.1, 170.0], [48.2, 170.0], [48.3, 170.0], [48.4, 170.0], [48.5, 170.0], [48.6, 170.0], [48.7, 170.0], [48.8, 170.0], [48.9, 170.0], [49.0, 170.0], [49.1, 170.0], [49.2, 170.0], [49.3, 170.0], [49.4, 170.0], [49.5, 170.0], [49.6, 170.0], [49.7, 170.0], [49.8, 170.0], [49.9, 170.0], [50.0, 170.0], [50.1, 170.0], [50.2, 170.0], [50.3, 170.0], [50.4, 170.0], [50.5, 170.0], [50.6, 170.0], [50.7, 170.0], [50.8, 170.0], [50.9, 170.0], [51.0, 171.0], [51.1, 171.0], [51.2, 171.0], [51.3, 171.0], [51.4, 171.0], [51.5, 171.0], [51.6, 171.0], [51.7, 171.0], [51.8, 171.0], [51.9, 171.0], [52.0, 171.0], [52.1, 171.0], [52.2, 171.0], [52.3, 171.0], [52.4, 171.0], [52.5, 171.0], [52.6, 171.0], [52.7, 171.0], [52.8, 171.0], [52.9, 171.0], [53.0, 172.0], [53.1, 172.0], [53.2, 172.0], [53.3, 172.0], [53.4, 172.0], [53.5, 172.0], [53.6, 172.0], [53.7, 172.0], [53.8, 172.0], [53.9, 172.0], [54.0, 172.0], [54.1, 172.0], [54.2, 172.0], [54.3, 172.0], [54.4, 172.0], [54.5, 172.0], [54.6, 172.0], [54.7, 172.0], [54.8, 172.0], [54.9, 172.0], [55.0, 172.0], [55.1, 172.0], [55.2, 172.0], [55.3, 172.0], [55.4, 172.0], [55.5, 172.0], [55.6, 172.0], [55.7, 172.0], [55.8, 172.0], [55.9, 172.0], [56.0, 172.0], [56.1, 172.0], [56.2, 172.0], [56.3, 172.0], [56.4, 172.0], [56.5, 172.0], [56.6, 172.0], [56.7, 172.0], [56.8, 172.0], [56.9, 172.0], [57.0, 173.0], [57.1, 173.0], [57.2, 173.0], [57.3, 173.0], [57.4, 173.0], [57.5, 173.0], [57.6, 173.0], [57.7, 173.0], [57.8, 173.0], [57.9, 173.0], [58.0, 173.0], [58.1, 173.0], [58.2, 173.0], [58.3, 173.0], [58.4, 173.0], [58.5, 173.0], [58.6, 173.0], [58.7, 173.0], [58.8, 173.0], [58.9, 173.0], [59.0, 173.0], [59.1, 173.0], [59.2, 173.0], [59.3, 173.0], [59.4, 173.0], [59.5, 173.0], [59.6, 173.0], [59.7, 173.0], [59.8, 173.0], [59.9, 173.0], [60.0, 174.0], [60.1, 174.0], [60.2, 174.0], [60.3, 174.0], [60.4, 174.0], [60.5, 174.0], [60.6, 174.0], [60.7, 174.0], [60.8, 174.0], [60.9, 174.0], [61.0, 175.0], [61.1, 175.0], [61.2, 175.0], [61.3, 175.0], [61.4, 175.0], [61.5, 175.0], [61.6, 175.0], [61.7, 175.0], [61.8, 175.0], [61.9, 175.0], [62.0, 176.0], [62.1, 176.0], [62.2, 176.0], [62.3, 176.0], [62.4, 176.0], [62.5, 176.0], [62.6, 176.0], [62.7, 176.0], [62.8, 176.0], [62.9, 176.0], [63.0, 176.0], [63.1, 176.0], [63.2, 176.0], [63.3, 176.0], [63.4, 176.0], [63.5, 176.0], [63.6, 176.0], [63.7, 176.0], [63.8, 176.0], [63.9, 176.0], [64.0, 176.0], [64.1, 176.0], [64.2, 176.0], [64.3, 176.0], [64.4, 176.0], [64.5, 176.0], [64.6, 176.0], [64.7, 176.0], [64.8, 176.0], [64.9, 176.0], [65.0, 176.0], [65.1, 176.0], [65.2, 176.0], [65.3, 176.0], [65.4, 176.0], [65.5, 176.0], [65.6, 176.0], [65.7, 176.0], [65.8, 176.0], [65.9, 176.0], [66.0, 176.0], [66.1, 176.0], [66.2, 176.0], [66.3, 176.0], [66.4, 176.0], [66.5, 176.0], [66.6, 176.0], [66.7, 176.0], [66.8, 176.0], [66.9, 176.0], [67.0, 177.0], [67.1, 177.0], [67.2, 177.0], [67.3, 177.0], [67.4, 177.0], [67.5, 177.0], [67.6, 177.0], [67.7, 177.0], [67.8, 177.0], [67.9, 177.0], [68.0, 177.0], [68.1, 177.0], [68.2, 177.0], [68.3, 177.0], [68.4, 177.0], [68.5, 177.0], [68.6, 177.0], [68.7, 177.0], [68.8, 177.0], [68.9, 177.0], [69.0, 178.0], [69.1, 178.0], [69.2, 178.0], [69.3, 178.0], [69.4, 178.0], [69.5, 178.0], [69.6, 178.0], [69.7, 178.0], [69.8, 178.0], [69.9, 178.0], [70.0, 178.0], [70.1, 178.0], [70.2, 178.0], [70.3, 178.0], [70.4, 178.0], [70.5, 178.0], [70.6, 178.0], [70.7, 178.0], [70.8, 178.0], [70.9, 178.0], [71.0, 178.0], [71.1, 178.0], [71.2, 178.0], [71.3, 178.0], [71.4, 178.0], [71.5, 178.0], [71.6, 178.0], [71.7, 178.0], [71.8, 178.0], [71.9, 178.0], [72.0, 179.0], [72.1, 179.0], [72.2, 179.0], [72.3, 179.0], [72.4, 179.0], [72.5, 179.0], [72.6, 179.0], [72.7, 179.0], [72.8, 179.0], [72.9, 179.0], [73.0, 179.0], [73.1, 179.0], [73.2, 179.0], [73.3, 179.0], [73.4, 179.0], [73.5, 179.0], [73.6, 179.0], [73.7, 179.0], [73.8, 179.0], [73.9, 179.0], [74.0, 179.0], [74.1, 179.0], [74.2, 179.0], [74.3, 179.0], [74.4, 179.0], [74.5, 179.0], [74.6, 179.0], [74.7, 179.0], [74.8, 179.0], [74.9, 179.0], [75.0, 180.0], [75.1, 180.0], [75.2, 180.0], [75.3, 180.0], [75.4, 180.0], [75.5, 180.0], [75.6, 180.0], [75.7, 180.0], [75.8, 180.0], [75.9, 180.0], [76.0, 183.0], [76.1, 183.0], [76.2, 183.0], [76.3, 183.0], [76.4, 183.0], [76.5, 183.0], [76.6, 183.0], [76.7, 183.0], [76.8, 183.0], [76.9, 183.0], [77.0, 183.0], [77.1, 183.0], [77.2, 183.0], [77.3, 183.0], [77.4, 183.0], [77.5, 183.0], [77.6, 183.0], [77.7, 183.0], [77.8, 183.0], [77.9, 183.0], [78.0, 184.0], [78.1, 184.0], [78.2, 184.0], [78.3, 184.0], [78.4, 184.0], [78.5, 184.0], [78.6, 184.0], [78.7, 184.0], [78.8, 184.0], [78.9, 184.0], [79.0, 184.0], [79.1, 184.0], [79.2, 184.0], [79.3, 184.0], [79.4, 184.0], [79.5, 184.0], [79.6, 184.0], [79.7, 184.0], [79.8, 184.0], [79.9, 184.0], [80.0, 184.0], [80.1, 184.0], [80.2, 184.0], [80.3, 184.0], [80.4, 184.0], [80.5, 184.0], [80.6, 184.0], [80.7, 184.0], [80.8, 184.0], [80.9, 184.0], [81.0, 185.0], [81.1, 185.0], [81.2, 185.0], [81.3, 185.0], [81.4, 185.0], [81.5, 185.0], [81.6, 185.0], [81.7, 185.0], [81.8, 185.0], [81.9, 185.0], [82.0, 187.0], [82.1, 187.0], [82.2, 187.0], [82.3, 187.0], [82.4, 187.0], [82.5, 187.0], [82.6, 187.0], [82.7, 187.0], [82.8, 187.0], [82.9, 187.0], [83.0, 188.0], [83.1, 188.0], [83.2, 188.0], [83.3, 188.0], [83.4, 188.0], [83.5, 188.0], [83.6, 188.0], [83.7, 188.0], [83.8, 188.0], [83.9, 188.0], [84.0, 189.0], [84.1, 189.0], [84.2, 189.0], [84.3, 189.0], [84.4, 189.0], [84.5, 189.0], [84.6, 189.0], [84.7, 189.0], [84.8, 189.0], [84.9, 189.0], [85.0, 190.0], [85.1, 190.0], [85.2, 190.0], [85.3, 190.0], [85.4, 190.0], [85.5, 190.0], [85.6, 190.0], [85.7, 190.0], [85.8, 190.0], [85.9, 190.0], [86.0, 190.0], [86.1, 190.0], [86.2, 190.0], [86.3, 190.0], [86.4, 190.0], [86.5, 190.0], [86.6, 190.0], [86.7, 190.0], [86.8, 190.0], [86.9, 190.0], [87.0, 195.0], [87.1, 195.0], [87.2, 195.0], [87.3, 195.0], [87.4, 195.0], [87.5, 195.0], [87.6, 195.0], [87.7, 195.0], [87.8, 195.0], [87.9, 195.0], [88.0, 197.0], [88.1, 197.0], [88.2, 197.0], [88.3, 197.0], [88.4, 197.0], [88.5, 197.0], [88.6, 197.0], [88.7, 197.0], [88.8, 197.0], [88.9, 197.0], [89.0, 201.0], [89.1, 201.0], [89.2, 201.0], [89.3, 201.0], [89.4, 201.0], [89.5, 201.0], [89.6, 201.0], [89.7, 201.0], [89.8, 201.0], [89.9, 201.0], [90.0, 202.0], [90.1, 202.0], [90.2, 202.0], [90.3, 202.0], [90.4, 202.0], [90.5, 202.0], [90.6, 202.0], [90.7, 202.0], [90.8, 202.0], [90.9, 202.0], [91.0, 204.0], [91.1, 204.0], [91.2, 204.0], [91.3, 204.0], [91.4, 204.0], [91.5, 204.0], [91.6, 204.0], [91.7, 204.0], [91.8, 204.0], [91.9, 204.0], [92.0, 206.0], [92.1, 206.0], [92.2, 206.0], [92.3, 206.0], [92.4, 206.0], [92.5, 206.0], [92.6, 206.0], [92.7, 206.0], [92.8, 206.0], [92.9, 206.0], [93.0, 211.0], [93.1, 211.0], [93.2, 211.0], [93.3, 211.0], [93.4, 211.0], [93.5, 211.0], [93.6, 211.0], [93.7, 211.0], [93.8, 211.0], [93.9, 211.0], [94.0, 223.0], [94.1, 223.0], [94.2, 223.0], [94.3, 223.0], [94.4, 223.0], [94.5, 223.0], [94.6, 223.0], [94.7, 223.0], [94.8, 223.0], [94.9, 223.0], [95.0, 251.0], [95.1, 251.0], [95.2, 251.0], [95.3, 251.0], [95.4, 251.0], [95.5, 251.0], [95.6, 251.0], [95.7, 251.0], [95.8, 251.0], [95.9, 251.0], [96.0, 267.0], [96.1, 267.0], [96.2, 267.0], [96.3, 267.0], [96.4, 267.0], [96.5, 267.0], [96.6, 267.0], [96.7, 267.0], [96.8, 267.0], [96.9, 267.0], [97.0, 307.0], [97.1, 307.0], [97.2, 307.0], [97.3, 307.0], [97.4, 307.0], [97.5, 307.0], [97.6, 307.0], [97.7, 307.0], [97.8, 307.0], [97.9, 307.0], [98.0, 436.0], [98.1, 436.0], [98.2, 436.0], [98.3, 436.0], [98.4, 436.0], [98.5, 436.0], [98.6, 436.0], [98.7, 436.0], [98.8, 436.0], [98.9, 436.0], [99.0, 650.0], [99.1, 650.0], [99.2, 650.0], [99.3, 650.0], [99.4, 650.0], [99.5, 650.0], [99.6, 650.0], [99.7, 650.0], [99.8, 650.0], [99.9, 650.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 25.0], [0.1, 28.0], [0.2, 28.0], [0.3, 29.0], [0.4, 29.0], [0.5, 30.0], [0.6, 30.0], [0.7, 30.0], [0.8, 31.0], [0.9, 31.0], [1.0, 31.0], [1.1, 32.0], [1.2, 32.0], [1.3, 32.0], [1.4, 32.0], [1.5, 32.0], [1.6, 33.0], [1.7, 33.0], [1.8, 33.0], [1.9, 33.0], [2.0, 33.0], [2.1, 33.0], [2.2, 33.0], [2.3, 34.0], [2.4, 34.0], [2.5, 34.0], [2.6, 34.0], [2.7, 34.0], [2.8, 34.0], [2.9, 34.0], [3.0, 34.0], [3.1, 34.0], [3.2, 35.0], [3.3, 35.0], [3.4, 35.0], [3.5, 35.0], [3.6, 35.0], [3.7, 35.0], [3.8, 35.0], [3.9, 35.0], [4.0, 35.0], [4.1, 35.0], [4.2, 36.0], [4.3, 36.0], [4.4, 36.0], [4.5, 36.0], [4.6, 36.0], [4.7, 36.0], [4.8, 36.0], [4.9, 36.0], [5.0, 36.0], [5.1, 36.0], [5.2, 36.0], [5.3, 36.0], [5.4, 37.0], [5.5, 37.0], [5.6, 37.0], [5.7, 37.0], [5.8, 37.0], [5.9, 37.0], [6.0, 37.0], [6.1, 37.0], [6.2, 37.0], [6.3, 37.0], [6.4, 37.0], [6.5, 37.0], [6.6, 37.0], [6.7, 37.0], [6.8, 37.0], [6.9, 37.0], [7.0, 37.0], [7.1, 37.0], [7.2, 38.0], [7.3, 38.0], [7.4, 38.0], [7.5, 38.0], [7.6, 38.0], [7.7, 38.0], [7.8, 38.0], [7.9, 38.0], [8.0, 38.0], [8.1, 38.0], [8.2, 38.0], [8.3, 38.0], [8.4, 38.0], [8.5, 38.0], [8.6, 38.0], [8.7, 38.0], [8.8, 38.0], [8.9, 38.0], [9.0, 38.0], [9.1, 38.0], [9.2, 39.0], [9.3, 39.0], [9.4, 39.0], [9.5, 39.0], [9.6, 39.0], [9.7, 39.0], [9.8, 39.0], [9.9, 39.0], [10.0, 39.0], [10.1, 39.0], [10.2, 39.0], [10.3, 39.0], [10.4, 39.0], [10.5, 39.0], [10.6, 39.0], [10.7, 39.0], [10.8, 39.0], [10.9, 39.0], [11.0, 39.0], [11.1, 39.0], [11.2, 39.0], [11.3, 39.0], [11.4, 39.0], [11.5, 39.0], [11.6, 39.0], [11.7, 39.0], [11.8, 40.0], [11.9, 40.0], [12.0, 40.0], [12.1, 40.0], [12.2, 40.0], [12.3, 40.0], [12.4, 40.0], [12.5, 40.0], [12.6, 40.0], [12.7, 40.0], [12.8, 40.0], [12.9, 40.0], [13.0, 40.0], [13.1, 40.0], [13.2, 40.0], [13.3, 40.0], [13.4, 40.0], [13.5, 40.0], [13.6, 40.0], [13.7, 40.0], [13.8, 40.0], [13.9, 40.0], [14.0, 40.0], [14.1, 40.0], [14.2, 40.0], [14.3, 40.0], [14.4, 41.0], [14.5, 41.0], [14.6, 41.0], [14.7, 41.0], [14.8, 41.0], [14.9, 41.0], [15.0, 41.0], [15.1, 41.0], [15.2, 41.0], [15.3, 41.0], [15.4, 41.0], [15.5, 41.0], [15.6, 41.0], [15.7, 41.0], [15.8, 41.0], [15.9, 41.0], [16.0, 41.0], [16.1, 41.0], [16.2, 41.0], [16.3, 41.0], [16.4, 41.0], [16.5, 41.0], [16.6, 41.0], [16.7, 41.0], [16.8, 41.0], [16.9, 41.0], [17.0, 41.0], [17.1, 42.0], [17.2, 42.0], [17.3, 42.0], [17.4, 42.0], [17.5, 42.0], [17.6, 42.0], [17.7, 42.0], [17.8, 42.0], [17.9, 42.0], [18.0, 42.0], [18.1, 42.0], [18.2, 42.0], [18.3, 42.0], [18.4, 42.0], [18.5, 42.0], [18.6, 42.0], [18.7, 42.0], [18.8, 42.0], [18.9, 42.0], [19.0, 42.0], [19.1, 42.0], [19.2, 42.0], [19.3, 42.0], [19.4, 42.0], [19.5, 42.0], [19.6, 42.0], [19.7, 42.0], [19.8, 42.0], [19.9, 42.0], [20.0, 42.0], [20.1, 42.0], [20.2, 43.0], [20.3, 43.0], [20.4, 43.0], [20.5, 43.0], [20.6, 43.0], [20.7, 43.0], [20.8, 43.0], [20.9, 43.0], [21.0, 43.0], [21.1, 43.0], [21.2, 43.0], [21.3, 43.0], [21.4, 43.0], [21.5, 43.0], [21.6, 43.0], [21.7, 43.0], [21.8, 43.0], [21.9, 43.0], [22.0, 43.0], [22.1, 43.0], [22.2, 43.0], [22.3, 43.0], [22.4, 43.0], [22.5, 43.0], [22.6, 43.0], [22.7, 43.0], [22.8, 43.0], [22.9, 43.0], [23.0, 43.0], [23.1, 43.0], [23.2, 43.0], [23.3, 44.0], [23.4, 44.0], [23.5, 44.0], [23.6, 44.0], [23.7, 44.0], [23.8, 44.0], [23.9, 44.0], [24.0, 44.0], [24.1, 44.0], [24.2, 44.0], [24.3, 44.0], [24.4, 44.0], [24.5, 44.0], [24.6, 44.0], [24.7, 44.0], [24.8, 44.0], [24.9, 44.0], [25.0, 44.0], [25.1, 44.0], [25.2, 44.0], [25.3, 44.0], [25.4, 44.0], [25.5, 44.0], [25.6, 44.0], [25.7, 44.0], [25.8, 44.0], [25.9, 44.0], [26.0, 44.0], [26.1, 44.0], [26.2, 44.0], [26.3, 44.0], [26.4, 44.0], [26.5, 44.0], [26.6, 44.0], [26.7, 44.0], [26.8, 44.0], [26.9, 44.0], [27.0, 45.0], [27.1, 45.0], [27.2, 45.0], [27.3, 45.0], [27.4, 45.0], [27.5, 45.0], [27.6, 45.0], [27.7, 45.0], [27.8, 45.0], [27.9, 45.0], [28.0, 45.0], [28.1, 45.0], [28.2, 45.0], [28.3, 45.0], [28.4, 45.0], [28.5, 45.0], [28.6, 45.0], [28.7, 45.0], [28.8, 45.0], [28.9, 45.0], [29.0, 45.0], [29.1, 45.0], [29.2, 45.0], [29.3, 45.0], [29.4, 45.0], [29.5, 45.0], [29.6, 45.0], [29.7, 45.0], [29.8, 45.0], [29.9, 45.0], [30.0, 45.0], [30.1, 45.0], [30.2, 46.0], [30.3, 46.0], [30.4, 46.0], [30.5, 46.0], [30.6, 46.0], [30.7, 46.0], [30.8, 46.0], [30.9, 46.0], [31.0, 46.0], [31.1, 46.0], [31.2, 46.0], [31.3, 46.0], [31.4, 46.0], [31.5, 46.0], [31.6, 46.0], [31.7, 46.0], [31.8, 46.0], [31.9, 46.0], [32.0, 46.0], [32.1, 46.0], [32.2, 46.0], [32.3, 46.0], [32.4, 46.0], [32.5, 46.0], [32.6, 46.0], [32.7, 46.0], [32.8, 46.0], [32.9, 46.0], [33.0, 46.0], [33.1, 46.0], [33.2, 46.0], [33.3, 46.0], [33.4, 46.0], [33.5, 46.0], [33.6, 47.0], [33.7, 47.0], [33.8, 47.0], [33.9, 47.0], [34.0, 47.0], [34.1, 47.0], [34.2, 47.0], [34.3, 47.0], [34.4, 47.0], [34.5, 47.0], [34.6, 47.0], [34.7, 47.0], [34.8, 47.0], [34.9, 47.0], [35.0, 47.0], [35.1, 47.0], [35.2, 47.0], [35.3, 47.0], [35.4, 47.0], [35.5, 47.0], [35.6, 47.0], [35.7, 47.0], [35.8, 47.0], [35.9, 47.0], [36.0, 47.0], [36.1, 47.0], [36.2, 47.0], [36.3, 47.0], [36.4, 47.0], [36.5, 48.0], [36.6, 48.0], [36.7, 48.0], [36.8, 48.0], [36.9, 48.0], [37.0, 48.0], [37.1, 48.0], [37.2, 48.0], [37.3, 48.0], [37.4, 48.0], [37.5, 48.0], [37.6, 48.0], [37.7, 48.0], [37.8, 48.0], [37.9, 48.0], [38.0, 48.0], [38.1, 48.0], [38.2, 48.0], [38.3, 48.0], [38.4, 48.0], [38.5, 48.0], [38.6, 48.0], [38.7, 48.0], [38.8, 48.0], [38.9, 48.0], [39.0, 48.0], [39.1, 48.0], [39.2, 48.0], [39.3, 48.0], [39.4, 48.0], [39.5, 48.0], [39.6, 49.0], [39.7, 49.0], [39.8, 49.0], [39.9, 49.0], [40.0, 49.0], [40.1, 49.0], [40.2, 49.0], [40.3, 49.0], [40.4, 49.0], [40.5, 49.0], [40.6, 49.0], [40.7, 49.0], [40.8, 49.0], [40.9, 49.0], [41.0, 49.0], [41.1, 49.0], [41.2, 49.0], [41.3, 49.0], [41.4, 49.0], [41.5, 49.0], [41.6, 49.0], [41.7, 49.0], [41.8, 49.0], [41.9, 49.0], [42.0, 49.0], [42.1, 49.0], [42.2, 50.0], [42.3, 50.0], [42.4, 50.0], [42.5, 50.0], [42.6, 50.0], [42.7, 50.0], [42.8, 50.0], [42.9, 50.0], [43.0, 50.0], [43.1, 50.0], [43.2, 50.0], [43.3, 50.0], [43.4, 50.0], [43.5, 50.0], [43.6, 50.0], [43.7, 50.0], [43.8, 50.0], [43.9, 50.0], [44.0, 50.0], [44.1, 50.0], [44.2, 50.0], [44.3, 50.0], [44.4, 50.0], [44.5, 50.0], [44.6, 50.0], [44.7, 51.0], [44.8, 51.0], [44.9, 51.0], [45.0, 51.0], [45.1, 51.0], [45.2, 51.0], [45.3, 51.0], [45.4, 51.0], [45.5, 51.0], [45.6, 51.0], [45.7, 51.0], [45.8, 51.0], [45.9, 51.0], [46.0, 51.0], [46.1, 51.0], [46.2, 51.0], [46.3, 51.0], [46.4, 51.0], [46.5, 51.0], [46.6, 51.0], [46.7, 51.0], [46.8, 51.0], [46.9, 51.0], [47.0, 51.0], [47.1, 52.0], [47.2, 52.0], [47.3, 52.0], [47.4, 52.0], [47.5, 52.0], [47.6, 52.0], [47.7, 52.0], [47.8, 52.0], [47.9, 52.0], [48.0, 52.0], [48.1, 52.0], [48.2, 52.0], [48.3, 52.0], [48.4, 52.0], [48.5, 52.0], [48.6, 52.0], [48.7, 52.0], [48.8, 52.0], [48.9, 52.0], [49.0, 52.0], [49.1, 52.0], [49.2, 52.0], [49.3, 52.0], [49.4, 52.0], [49.5, 53.0], [49.6, 53.0], [49.7, 53.0], [49.8, 53.0], [49.9, 53.0], [50.0, 53.0], [50.1, 53.0], [50.2, 53.0], [50.3, 53.0], [50.4, 53.0], [50.5, 53.0], [50.6, 53.0], [50.7, 53.0], [50.8, 53.0], [50.9, 53.0], [51.0, 53.0], [51.1, 53.0], [51.2, 53.0], [51.3, 54.0], [51.4, 54.0], [51.5, 54.0], [51.6, 54.0], [51.7, 54.0], [51.8, 54.0], [51.9, 54.0], [52.0, 54.0], [52.1, 54.0], [52.2, 54.0], [52.3, 54.0], [52.4, 54.0], [52.5, 54.0], [52.6, 54.0], [52.7, 54.0], [52.8, 54.0], [52.9, 54.0], [53.0, 54.0], [53.1, 55.0], [53.2, 55.0], [53.3, 55.0], [53.4, 55.0], [53.5, 55.0], [53.6, 55.0], [53.7, 55.0], [53.8, 55.0], [53.9, 55.0], [54.0, 55.0], [54.1, 55.0], [54.2, 55.0], [54.3, 55.0], [54.4, 55.0], [54.5, 55.0], [54.6, 56.0], [54.7, 56.0], [54.8, 56.0], [54.9, 56.0], [55.0, 56.0], [55.1, 56.0], [55.2, 56.0], [55.3, 56.0], [55.4, 56.0], [55.5, 56.0], [55.6, 56.0], [55.7, 56.0], [55.8, 56.0], [55.9, 56.0], [56.0, 57.0], [56.1, 57.0], [56.2, 57.0], [56.3, 57.0], [56.4, 57.0], [56.5, 57.0], [56.6, 57.0], [56.7, 57.0], [56.8, 57.0], [56.9, 57.0], [57.0, 57.0], [57.1, 57.0], [57.2, 58.0], [57.3, 58.0], [57.4, 58.0], [57.5, 58.0], [57.6, 58.0], [57.7, 58.0], [57.8, 58.0], [57.9, 58.0], [58.0, 58.0], [58.1, 58.0], [58.2, 58.0], [58.3, 59.0], [58.4, 59.0], [58.5, 59.0], [58.6, 59.0], [58.7, 59.0], [58.8, 59.0], [58.9, 59.0], [59.0, 59.0], [59.1, 60.0], [59.2, 60.0], [59.3, 60.0], [59.4, 60.0], [59.5, 60.0], [59.6, 60.0], [59.7, 60.0], [59.8, 60.0], [59.9, 61.0], [60.0, 61.0], [60.1, 61.0], [60.2, 61.0], [60.3, 61.0], [60.4, 61.0], [60.5, 61.0], [60.6, 61.0], [60.7, 62.0], [60.8, 62.0], [60.9, 62.0], [61.0, 62.0], [61.1, 62.0], [61.2, 63.0], [61.3, 63.0], [61.4, 63.0], [61.5, 63.0], [61.6, 63.0], [61.7, 63.0], [61.8, 64.0], [61.9, 64.0], [62.0, 64.0], [62.1, 64.0], [62.2, 64.0], [62.3, 64.0], [62.4, 65.0], [62.5, 65.0], [62.6, 65.0], [62.7, 65.0], [62.8, 65.0], [62.9, 66.0], [63.0, 66.0], [63.1, 66.0], [63.2, 67.0], [63.3, 67.0], [63.4, 67.0], [63.5, 68.0], [63.6, 68.0], [63.7, 68.0], [63.8, 68.0], [63.9, 69.0], [64.0, 69.0], [64.1, 69.0], [64.2, 70.0], [64.3, 70.0], [64.4, 71.0], [64.5, 72.0], [64.6, 72.0], [64.7, 73.0], [64.8, 73.0], [64.9, 74.0], [65.0, 75.0], [65.1, 75.0], [65.2, 76.0], [65.3, 77.0], [65.4, 78.0], [65.5, 80.0], [65.6, 82.0], [65.7, 84.0], [65.8, 87.0], [65.9, 88.0], [66.0, 92.0], [66.1, 95.0], [66.2, 97.0], [66.3, 103.0], [66.4, 108.0], [66.5, 119.0], [66.6, 128.0], [66.7, 146.0], [66.8, 168.0], [66.9, 187.0], [67.0, 203.0], [67.1, 215.0], [67.2, 226.0], [67.3, 231.0], [67.4, 238.0], [67.5, 252.0], [67.6, 262.0], [67.7, 275.0], [67.8, 284.0], [67.9, 290.0], [68.0, 305.0], [68.1, 308.0], [68.2, 311.0], [68.3, 316.0], [68.4, 321.0], [68.5, 330.0], [68.6, 335.0], [68.7, 341.0], [68.8, 348.0], [68.9, 356.0], [69.0, 362.0], [69.1, 368.0], [69.2, 375.0], [69.3, 380.0], [69.4, 383.0], [69.5, 390.0], [69.6, 395.0], [69.7, 399.0], [69.8, 403.0], [69.9, 408.0], [70.0, 411.0], [70.1, 418.0], [70.2, 422.0], [70.3, 429.0], [70.4, 435.0], [70.5, 438.0], [70.6, 445.0], [70.7, 452.0], [70.8, 456.0], [70.9, 460.0], [71.0, 466.0], [71.1, 470.0], [71.2, 475.0], [71.3, 480.0], [71.4, 484.0], [71.5, 488.0], [71.6, 492.0], [71.7, 496.0], [71.8, 502.0], [71.9, 507.0], [72.0, 512.0], [72.1, 516.0], [72.2, 519.0], [72.3, 522.0], [72.4, 528.0], [72.5, 531.0], [72.6, 534.0], [72.7, 538.0], [72.8, 542.0], [72.9, 546.0], [73.0, 550.0], [73.1, 553.0], [73.2, 556.0], [73.3, 561.0], [73.4, 565.0], [73.5, 567.0], [73.6, 571.0], [73.7, 574.0], [73.8, 577.0], [73.9, 580.0], [74.0, 584.0], [74.1, 587.0], [74.2, 589.0], [74.3, 591.0], [74.4, 596.0], [74.5, 599.0], [74.6, 603.0], [74.7, 606.0], [74.8, 610.0], [74.9, 611.0], [75.0, 614.0], [75.1, 617.0], [75.2, 621.0], [75.3, 624.0], [75.4, 627.0], [75.5, 630.0], [75.6, 633.0], [75.7, 639.0], [75.8, 642.0], [75.9, 645.0], [76.0, 650.0], [76.1, 655.0], [76.2, 660.0], [76.3, 661.0], [76.4, 664.0], [76.5, 666.0], [76.6, 669.0], [76.7, 672.0], [76.8, 675.0], [76.9, 677.0], [77.0, 679.0], [77.1, 682.0], [77.2, 687.0], [77.3, 689.0], [77.4, 692.0], [77.5, 695.0], [77.6, 698.0], [77.7, 699.0], [77.8, 703.0], [77.9, 706.0], [78.0, 709.0], [78.1, 713.0], [78.2, 717.0], [78.3, 722.0], [78.4, 724.0], [78.5, 728.0], [78.6, 731.0], [78.7, 733.0], [78.8, 736.0], [78.9, 741.0], [79.0, 744.0], [79.1, 747.0], [79.2, 750.0], [79.3, 753.0], [79.4, 756.0], [79.5, 758.0], [79.6, 760.0], [79.7, 763.0], [79.8, 766.0], [79.9, 770.0], [80.0, 775.0], [80.1, 778.0], [80.2, 779.0], [80.3, 782.0], [80.4, 785.0], [80.5, 787.0], [80.6, 789.0], [80.7, 793.0], [80.8, 796.0], [80.9, 800.0], [81.0, 802.0], [81.1, 807.0], [81.2, 809.0], [81.3, 811.0], [81.4, 815.0], [81.5, 818.0], [81.6, 820.0], [81.7, 823.0], [81.8, 826.0], [81.9, 828.0], [82.0, 830.0], [82.1, 833.0], [82.2, 836.0], [82.3, 839.0], [82.4, 843.0], [82.5, 847.0], [82.6, 849.0], [82.7, 854.0], [82.8, 857.0], [82.9, 859.0], [83.0, 861.0], [83.1, 865.0], [83.2, 867.0], [83.3, 870.0], [83.4, 875.0], [83.5, 877.0], [83.6, 879.0], [83.7, 881.0], [83.8, 885.0], [83.9, 887.0], [84.0, 892.0], [84.1, 896.0], [84.2, 898.0], [84.3, 901.0], [84.4, 905.0], [84.5, 910.0], [84.6, 913.0], [84.7, 916.0], [84.8, 920.0], [84.9, 922.0], [85.0, 924.0], [85.1, 926.0], [85.2, 931.0], [85.3, 936.0], [85.4, 939.0], [85.5, 943.0], [85.6, 945.0], [85.7, 950.0], [85.8, 954.0], [85.9, 958.0], [86.0, 961.0], [86.1, 965.0], [86.2, 968.0], [86.3, 971.0], [86.4, 974.0], [86.5, 978.0], [86.6, 980.0], [86.7, 983.0], [86.8, 984.0], [86.9, 987.0], [87.0, 989.0], [87.1, 993.0], [87.2, 996.0], [87.3, 1000.0], [87.4, 1005.0], [87.5, 1009.0], [87.6, 1011.0], [87.7, 1015.0], [87.8, 1017.0], [87.9, 1021.0], [88.0, 1025.0], [88.1, 1030.0], [88.2, 1032.0], [88.3, 1035.0], [88.4, 1038.0], [88.5, 1042.0], [88.6, 1046.0], [88.7, 1049.0], [88.8, 1051.0], [88.9, 1055.0], [89.0, 1062.0], [89.1, 1064.0], [89.2, 1068.0], [89.3, 1071.0], [89.4, 1075.0], [89.5, 1078.0], [89.6, 1080.0], [89.7, 1083.0], [89.8, 1088.0], [89.9, 1091.0], [90.0, 1095.0], [90.1, 1100.0], [90.2, 1103.0], [90.3, 1107.0], [90.4, 1111.0], [90.5, 1113.0], [90.6, 1118.0], [90.7, 1121.0], [90.8, 1126.0], [90.9, 1130.0], [91.0, 1133.0], [91.1, 1137.0], [91.2, 1141.0], [91.3, 1145.0], [91.4, 1148.0], [91.5, 1150.0], [91.6, 1155.0], [91.7, 1158.0], [91.8, 1162.0], [91.9, 1164.0], [92.0, 1167.0], [92.1, 1170.0], [92.2, 1174.0], [92.3, 1179.0], [92.4, 1182.0], [92.5, 1186.0], [92.6, 1193.0], [92.7, 1200.0], [92.8, 1205.0], [92.9, 1209.0], [93.0, 1211.0], [93.1, 1215.0], [93.2, 1223.0], [93.3, 1228.0], [93.4, 1231.0], [93.5, 1234.0], [93.6, 1238.0], [93.7, 1244.0], [93.8, 1249.0], [93.9, 1258.0], [94.0, 1261.0], [94.1, 1266.0], [94.2, 1272.0], [94.3, 1275.0], [94.4, 1280.0], [94.5, 1284.0], [94.6, 1293.0], [94.7, 1296.0], [94.8, 1302.0], [94.9, 1308.0], [95.0, 1315.0], [95.1, 1319.0], [95.2, 1326.0], [95.3, 1332.0], [95.4, 1343.0], [95.5, 1349.0], [95.6, 1357.0], [95.7, 1362.0], [95.8, 1367.0], [95.9, 1378.0], [96.0, 1385.0], [96.1, 1389.0], [96.2, 1401.0], [96.3, 1408.0], [96.4, 1417.0], [96.5, 1424.0], [96.6, 1429.0], [96.7, 1435.0], [96.8, 1440.0], [96.9, 1445.0], [97.0, 1451.0], [97.1, 1459.0], [97.2, 1466.0], [97.3, 1478.0], [97.4, 1488.0], [97.5, 1496.0], [97.6, 1504.0], [97.7, 1508.0], [97.8, 1525.0], [97.9, 1536.0], [98.0, 1551.0], [98.1, 1564.0], [98.2, 1577.0], [98.3, 1586.0], [98.4, 1600.0], [98.5, 1610.0], [98.6, 1617.0], [98.7, 1636.0], [98.8, 1657.0], [98.9, 1670.0], [99.0, 1694.0], [99.1, 1721.0], [99.2, 1742.0], [99.3, 1769.0], [99.4, 1793.0], [99.5, 1837.0], [99.6, 1882.0], [99.7, 1912.0], [99.8, 1964.0], [99.9, 2097.0], [100.0, 2409.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 6708.0, "series": [{"data": [[0.0, 6708.0], [600.0, 287.0], [700.0, 334.0], [800.0, 342.0], [900.0, 324.0], [1000.0, 311.0], [1100.0, 247.0], [1200.0, 186.0], [1300.0, 162.0], [1400.0, 113.0], [1500.0, 82.0], [100.0, 63.0], [1600.0, 49.0], [1700.0, 30.0], [1800.0, 19.0], [1900.0, 18.0], [2000.0, 10.0], [2100.0, 2.0], [2200.0, 5.0], [2300.0, 2.0], [2600.0, 1.0], [2900.0, 1.0], [200.0, 77.0], [300.0, 137.0], [400.0, 205.0], [500.0, 285.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[300.0, 1.0], [600.0, 1.0], [200.0, 8.0], [100.0, 89.0], [400.0, 1.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 6622.0], [600.0, 320.0], [700.0, 317.0], [800.0, 336.0], [900.0, 305.0], [1000.0, 280.0], [1100.0, 261.0], [1200.0, 208.0], [1300.0, 141.0], [1400.0, 136.0], [1500.0, 85.0], [100.0, 73.0], [1600.0, 63.0], [1700.0, 39.0], [1800.0, 24.0], [1900.0, 16.0], [2000.0, 9.0], [2100.0, 5.0], [2200.0, 3.0], [2300.0, 1.0], [2400.0, 1.0], [200.0, 101.0], [300.0, 174.0], [400.0, 205.0], [500.0, 275.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 464.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 14467.0, "series": [{"data": [[0.0, 14467.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5169.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 464.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.89473684210526, "minX": 1.58541816E12, "maxY": 100.0, "series": [{"data": [[1.58541858E12, 100.0], [1.5854184E12, 100.0], [1.58541846E12, 100.0], [1.58541828E12, 100.0], [1.58541834E12, 100.0], [1.58541864E12, 72.0740740740741], [1.58541816E12, 16.780303030303028], [1.5854187E12, 8.89473684210526], [1.58541822E12, 80.01935767707867], [1.58541852E12, 100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5854187E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 36.6, "minX": 1.0, "maxY": 594.3076923076923, "series": [{"data": [[4.0, 53.0], [5.0, 45.0], [6.0, 49.5], [7.0, 58.0], [8.0, 47.0], [9.0, 51.0], [10.0, 51.0], [11.0, 43.666666666666664], [12.0, 46.84615384615385], [13.0, 50.0], [14.0, 47.5], [15.0, 60.5], [16.0, 51.75], [17.0, 44.0], [18.0, 51.28571428571429], [19.0, 49.0], [20.0, 43.285714285714285], [21.0, 48.0], [22.0, 50.6], [23.0, 50.16666666666667], [24.0, 49.0], [25.0, 49.333333333333336], [26.0, 44.6], [27.0, 43.5], [28.0, 51.16666666666667], [29.0, 46.61538461538461], [30.0, 47.0], [31.0, 42.4], [32.0, 44.80952380952381], [33.0, 43.42857142857143], [34.0, 36.6], [35.0, 48.333333333333336], [36.0, 61.07692307692307], [37.0, 103.55555555555556], [38.0, 73.19999999999999], [39.0, 44.99999999999999], [40.0, 47.0], [41.0, 50.75], [42.0, 49.37499999999999], [43.0, 48.666666666666664], [44.0, 43.99999999999999], [45.0, 49.44444444444446], [46.0, 48.75], [47.0, 43.222222222222214], [48.0, 49.099999999999994], [49.0, 120.40740740740739], [50.0, 40.55555555555556], [51.0, 49.22222222222223], [52.0, 45.0], [53.0, 46.52380952380953], [54.0, 46.79310344827587], [55.0, 51.15384615384615], [56.0, 41.34375000000001], [57.0, 45.857142857142854], [58.0, 45.45454545454545], [59.0, 41.44827586206897], [60.0, 51.8], [61.0, 44.434782608695656], [62.0, 47.76666666666668], [63.0, 44.07692307692308], [64.0, 38.74999999999999], [65.0, 48.65], [66.0, 52.333333333333336], [67.0, 42.15384615384615], [68.0, 50.51724137931034], [69.0, 49.3], [70.0, 52.57142857142858], [71.0, 44.7], [72.0, 44.91891891891892], [73.0, 48.210526315789465], [74.0, 46.91666666666667], [75.0, 46.785714285714285], [76.0, 49.533333333333324], [77.0, 54.6], [78.0, 390.2777777777779], [79.0, 204.8709677419355], [80.0, 191.60526315789474], [81.0, 188.29629629629633], [82.0, 43.266666666666666], [83.0, 119.73684210526316], [84.0, 46.90909090909091], [85.0, 51.625], [86.0, 46.08695652173913], [87.0, 49.9], [88.0, 45.728971962616825], [89.0, 42.4], [90.0, 43.65217391304348], [91.0, 45.050000000000004], [92.0, 49.09090909090909], [93.0, 53.1875], [94.0, 46.46666666666667], [95.0, 48.66666666666667], [96.0, 68.09803921568626], [97.0, 237.5], [98.0, 342.857142857143], [99.0, 148.76811594202897], [100.0, 375.80154854079876]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[94.77810000000031, 327.90049999999945]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 176.0], [3.0, 161.0], [4.0, 206.0], [5.0, 159.0], [6.0, 162.0], [7.0, 162.0], [8.0, 176.0], [9.0, 157.0], [10.0, 189.0], [11.0, 157.0], [12.0, 170.0], [13.0, 162.0], [14.0, 156.0], [15.0, 436.0], [16.0, 164.0], [17.0, 155.0], [18.0, 169.0], [19.0, 161.0], [20.0, 170.0], [21.0, 170.0], [22.0, 171.0], [23.0, 176.0], [24.0, 171.0], [25.0, 183.0], [26.0, 156.0], [27.0, 150.0], [28.0, 173.0], [29.0, 197.0], [30.0, 167.0], [31.0, 183.0], [32.0, 177.0], [33.0, 176.0], [34.0, 145.0], [35.0, 172.0], [36.0, 157.0], [37.0, 169.0], [38.0, 172.0], [39.0, 167.0], [40.0, 161.0], [41.0, 172.0], [42.0, 170.0], [43.0, 179.0], [44.0, 166.0], [45.0, 165.0], [46.0, 153.0], [47.0, 177.0], [48.0, 307.0], [49.0, 178.0], [50.0, 161.0], [51.0, 178.0], [52.0, 184.0], [53.0, 165.0], [54.0, 164.0], [55.0, 164.0], [56.0, 169.0], [57.0, 166.0], [58.0, 176.0], [59.0, 162.0], [60.0, 179.0], [61.0, 168.0], [62.0, 187.0], [63.0, 170.0], [64.0, 173.0], [65.0, 251.0], [66.0, 201.0], [67.0, 202.0], [68.0, 156.0], [69.0, 174.0], [70.0, 195.0], [71.0, 184.0], [72.0, 161.0], [73.0, 168.0], [74.0, 172.0], [75.0, 188.0], [76.0, 168.0], [77.0, 204.0], [78.0, 157.0], [79.0, 160.0], [80.0, 160.0], [82.0, 420.0], [83.0, 180.0], [84.0, 178.0], [85.0, 167.0], [86.0, 166.0], [87.0, 185.0], [88.0, 175.0], [89.0, 179.0], [90.0, 184.0], [91.0, 173.0], [92.0, 162.0], [93.0, 158.0], [94.0, 163.0], [95.0, 211.0], [96.0, 168.0], [97.0, 190.0], [98.0, 168.0], [99.0, 267.0], [100.0, 169.0], [1.0, 223.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[50.51000000000002, 182.80999999999997]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[3.0, 60.0], [4.0, 58.0], [5.0, 84.0], [6.0, 43.0], [7.0, 43.0], [8.0, 69.0], [9.0, 57.5], [10.0, 42.5], [11.0, 46.0], [12.0, 46.307692307692314], [13.0, 40.0], [14.0, 46.5], [15.0, 71.5], [16.0, 53.0], [17.0, 50.6], [18.0, 39.333333333333336], [19.0, 56.0], [20.0, 50.75], [21.0, 47.22222222222222], [22.0, 43.33333333333333], [23.0, 48.77777777777778], [24.0, 53.6], [25.0, 48.0], [26.0, 54.4], [27.0, 62.0], [28.0, 47.375], [29.0, 46.80952380952381], [30.0, 43.42857142857142], [31.0, 46.199999999999996], [32.0, 45.90909090909091], [33.0, 49.25], [34.0, 39.444444444444436], [35.0, 43.57142857142858], [36.0, 46.9], [37.0, 159.5], [38.0, 51.07142857142858], [39.0, 43.86666666666667], [40.0, 46.925925925925924], [41.0, 47.6], [42.0, 51.125], [43.0, 47.6], [44.0, 52.99999999999999], [45.0, 45.4375], [46.0, 44.818181818181806], [47.0, 44.37499999999999], [48.0, 48.5], [49.0, 72.9375], [50.0, 38.333333333333336], [51.0, 44.53846153846154], [52.0, 47.9], [53.0, 46.5], [54.0, 46.03333333333333], [55.0, 52.1764705882353], [56.0, 43.2258064516129], [57.0, 52.111111111111114], [58.0, 46.300000000000004], [59.0, 47.66666666666667], [60.0, 49.56000000000001], [61.0, 46.66666666666667], [62.0, 43.559999999999995], [63.0, 40.92307692307692], [64.0, 40.166666666666664], [65.0, 46.8125], [66.0, 48.375], [67.0, 41.526315789473685], [68.0, 48.83333333333333], [69.0, 49.4], [70.0, 52.4375], [71.0, 45.83333333333333], [72.0, 44.696969696969695], [73.0, 46.73333333333333], [74.0, 48.18518518518519], [75.0, 47.2], [76.0, 50.857142857142854], [77.0, 178.99999999999997], [78.0, 594.3076923076923], [79.0, 306.13333333333327], [80.0, 206.7435897435898], [81.0, 292.5], [82.0, 45.92307692307693], [83.0, 145.08695652173915], [84.0, 46.46666666666667], [85.0, 50.3125], [86.0, 50.879999999999995], [87.0, 52.857142857142854], [88.0, 45.831683168316815], [89.0, 43.272727272727266], [90.0, 47.952380952380956], [91.0, 47.70967741935485], [92.0, 51.074074074074076], [93.0, 48.96551724137931], [94.0, 49.0], [95.0, 59.0], [96.0, 69.88888888888887], [97.0, 166.52380952380955], [98.0, 292.34210526315786], [99.0, 253.37499999999983], [100.0, 381.38508280710215]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[94.77639999999971, 333.7138999999991]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 135.96666666666667, "minX": 1.58541816E12, "maxY": 344028.2166666667, "series": [{"data": [[1.58541858E12, 290230.35], [1.5854184E12, 272802.25], [1.58541846E12, 324359.76666666666], [1.58541828E12, 344028.2166666667], [1.58541834E12, 302907.3], [1.58541864E12, 217562.61666666667], [1.58541816E12, 13132.933333333332], [1.5854187E12, 2248.2166666666667], [1.58541822E12, 262235.9], [1.58541852E12, 342844.11666666664]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58541858E12, 17510.233333333334], [1.5854184E12, 16459.433333333334], [1.58541846E12, 19569.466666666667], [1.58541828E12, 20756.5], [1.58541834E12, 18275.4], [1.58541864E12, 13128.033333333333], [1.58541816E12, 856.6], [1.5854187E12, 135.96666666666667], [1.58541822E12, 16003.4], [1.58541852E12, 20684.966666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5854187E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 44.166666666666664, "minX": 1.58541816E12, "maxY": 721.9773321708802, "series": [{"data": [[1.58541858E12, 548.2841932841933], [1.5854184E12, 716.0095238095234], [1.58541846E12, 329.36456808199165], [1.58541828E12, 156.82794218857535], [1.58541834E12, 474.7730829420969], [1.58541864E12, 134.7161152614728], [1.58541816E12, 48.08], [1.5854187E12, 50.69230769230769], [1.58541822E12, 86.8722222222222], [1.58541852E12, 189.98064961990343]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58541816E12, 180.69230769230774], [1.58541822E12, 183.55405405405406]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58541858E12, 566.3420195439741], [1.5854184E12, 721.9773321708802], [1.58541846E12, 332.45805981035767], [1.58541828E12, 161.20068965517254], [1.58541834E12, 481.42175273865394], [1.58541864E12, 121.52725250278101], [1.58541816E12, 51.589285714285715], [1.5854187E12, 44.166666666666664], [1.58541822E12, 95.88293118856126], [1.58541852E12, 199.90663900414998]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5854187E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 44.166666666666664, "minX": 1.58541816E12, "maxY": 721.7393199651269, "series": [{"data": [[1.58541858E12, 548.0417690417681], [1.5854184E12, 715.7662337662344], [1.58541846E12, 329.0893118594435], [1.58541828E12, 156.62835512732278], [1.58541834E12, 474.5359937402194], [1.58541864E12, 134.4759871931697], [1.58541816E12, 47.94], [1.5854187E12, 50.53846153846153], [1.58541822E12, 86.6916666666667], [1.58541852E12, 189.7505183137527]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58541816E12, 180.23076923076925], [1.58541822E12, 182.77027027027032]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58541858E12, 566.1058631921829], [1.5854184E12, 721.7393199651269], [1.58541846E12, 332.2348650619984], [1.58541828E12, 161.00206896551697], [1.58541834E12, 481.21439749608777], [1.58541864E12, 121.27252502780864], [1.58541816E12, 51.357142857142854], [1.5854187E12, 44.166666666666664], [1.58541822E12, 95.70151921358347], [1.58541852E12, 199.66735822959896]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5854187E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58541816E12, "maxY": 2.0769230769230775, "series": [{"data": [[1.58541858E12, 0.24160524160524205], [1.5854184E12, 0.3670995670995672], [1.58541846E12, 0.21083455344070273], [1.58541828E12, 0.0612525808671713], [1.58541834E12, 0.20735524256651003], [1.58541864E12, 0.05016008537886872], [1.58541816E12, 0.5599999999999998], [1.5854187E12, 0.0], [1.58541822E12, 0.08796296296296287], [1.58541852E12, 0.06841741534208727]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58541816E12, 2.0769230769230775], [1.58541822E12, 0.9999999999999999]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58541858E12, 0.6172638436482079], [1.5854184E12, 0.6678291194420231], [1.58541846E12, 0.6185266229029912], [1.58541828E12, 0.7206896551724133], [1.58541834E12, 0.7136150234741775], [1.58541864E12, 0.6284760845383763], [1.58541816E12, 0.8035714285714286], [1.5854187E12, 0.5], [1.58541822E12, 0.7855227882037543], [1.58541852E12, 0.636237897648686]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5854187E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 24.0, "minX": 1.58541816E12, "maxY": 2900.0, "series": [{"data": [[1.58541858E12, 2900.0], [1.5854184E12, 2070.0], [1.58541846E12, 2161.0], [1.58541828E12, 2242.0], [1.58541834E12, 2663.0], [1.58541864E12, 2364.0], [1.58541816E12, 436.0], [1.5854187E12, 61.0], [1.58541822E12, 1227.0], [1.58541852E12, 2317.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58541858E12, 29.0], [1.5854184E12, 30.0], [1.58541846E12, 25.0], [1.58541828E12, 25.0], [1.58541834E12, 25.0], [1.58541864E12, 26.0], [1.58541816E12, 28.0], [1.5854187E12, 38.0], [1.58541822E12, 25.0], [1.58541852E12, 24.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58541858E12, 1168.0], [1.5854184E12, 1305.5000000000014], [1.58541846E12, 1104.0], [1.58541828E12, 578.5999999999999], [1.58541834E12, 1351.0], [1.58541864E12, 74.29999999999995], [1.58541816E12, 169.7], [1.5854187E12, 60.0], [1.58541822E12, 167.0], [1.58541852E12, 808.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58541858E12, 1689.5], [1.5854184E12, 1771.9699999999998], [1.58541846E12, 1666.8599999999997], [1.58541828E12, 1529.96], [1.58541834E12, 1884.2899999999995], [1.58541864E12, 1648.1999999999953], [1.58541816E12, 365.7099999999973], [1.5854187E12, 61.0], [1.58541822E12, 838.7799999999993], [1.58541852E12, 1621.4199999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58541858E12, 1348.0], [1.5854184E12, 1454.6999999999998], [1.58541846E12, 1305.2999999999997], [1.58541828E12, 994.0], [1.58541834E12, 1535.15], [1.58541864E12, 860.8999999999992], [1.58541816E12, 176.0], [1.5854187E12, 61.0], [1.58541822E12, 517.0], [1.58541852E12, 1183.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5854187E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 44.0, "minX": 2.0, "maxY": 918.5, "series": [{"data": [[2.0, 168.5], [3.0, 51.0], [4.0, 49.0], [5.0, 56.0], [6.0, 48.0], [7.0, 59.0], [8.0, 48.5], [9.0, 52.5], [10.0, 51.5], [11.0, 48.0], [12.0, 49.0], [13.0, 47.5], [14.0, 48.5], [15.0, 53.0], [16.0, 46.5], [17.0, 71.5], [18.0, 47.0], [19.0, 59.0], [20.0, 44.0], [21.0, 312.0], [22.0, 47.0], [23.0, 101.0], [24.0, 48.0], [25.0, 516.0], [26.0, 767.0], [27.0, 688.0], [28.0, 906.5], [29.0, 674.0], [30.0, 918.5], [31.0, 774.0], [33.0, 703.0], [32.0, 762.5], [34.0, 580.0], [35.0, 855.0], [36.0, 660.5], [37.0, 902.0], [39.0, 198.5], [38.0, 377.5], [40.0, 522.0], [41.0, 160.5], [42.0, 480.5], [43.0, 47.0], [45.0, 55.0], [44.0, 51.0], [47.0, 49.0], [46.0, 53.0], [49.0, 49.0], [48.0, 52.0], [51.0, 50.0], [50.0, 48.0], [52.0, 47.0], [53.0, 47.0], [55.0, 46.0], [54.0, 47.0], [57.0, 48.0], [56.0, 47.0], [59.0, 47.0], [58.0, 48.0], [60.0, 53.0], [61.0, 47.0], [62.0, 47.0], [63.0, 47.0], [64.0, 52.5], [68.0, 63.0], [69.0, 52.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 69.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 44.0, "minX": 2.0, "maxY": 917.5, "series": [{"data": [[2.0, 168.5], [3.0, 51.0], [4.0, 48.5], [5.0, 56.0], [6.0, 47.5], [7.0, 59.0], [8.0, 48.5], [9.0, 52.5], [10.0, 51.5], [11.0, 48.0], [12.0, 48.5], [13.0, 47.5], [14.0, 48.5], [15.0, 52.0], [16.0, 46.5], [17.0, 71.0], [18.0, 47.0], [19.0, 59.0], [20.0, 44.0], [21.0, 312.0], [22.0, 47.0], [23.0, 100.5], [24.0, 48.0], [25.0, 516.0], [26.0, 767.0], [27.0, 687.5], [28.0, 906.0], [29.0, 673.0], [30.0, 917.5], [31.0, 774.0], [33.0, 703.0], [32.0, 762.5], [34.0, 580.0], [35.0, 854.5], [36.0, 660.0], [37.0, 902.0], [39.0, 198.5], [38.0, 377.5], [40.0, 522.0], [41.0, 160.5], [42.0, 480.0], [43.0, 46.0], [45.0, 55.0], [44.0, 51.0], [47.0, 49.0], [46.0, 52.5], [49.0, 49.0], [48.0, 52.0], [51.0, 50.0], [50.0, 48.0], [52.0, 46.0], [53.0, 47.0], [55.0, 46.0], [54.0, 46.0], [57.0, 48.0], [56.0, 47.0], [59.0, 47.0], [58.0, 47.0], [60.0, 53.0], [61.0, 47.0], [62.0, 47.0], [63.0, 47.0], [64.0, 52.5], [68.0, 62.5], [69.0, 52.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 69.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.58541816E12, "maxY": 49.06666666666667, "series": [{"data": [[1.58541858E12, 41.35], [1.5854184E12, 38.6], [1.58541846E12, 45.016666666666666], [1.58541828E12, 49.06666666666667], [1.58541834E12, 42.28333333333333], [1.58541864E12, 30.0], [1.58541816E12, 2.216666666666667], [1.5854187E12, 0.31666666666666665], [1.58541822E12, 37.916666666666664], [1.58541852E12, 48.233333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5854187E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.58541816E12, "maxY": 48.38333333333333, "series": [{"data": [[1.58541858E12, 40.81666666666667], [1.5854184E12, 38.36666666666667], [1.58541846E12, 45.61666666666667], [1.58541828E12, 48.38333333333333], [1.58541834E12, 42.6], [1.58541864E12, 30.6], [1.58541816E12, 2.2], [1.5854187E12, 0.31666666666666665], [1.58541822E12, 37.88333333333333], [1.58541852E12, 48.21666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5854187E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.58541816E12, "maxY": 24.216666666666665, "series": [{"data": [[1.58541816E12, 0.43333333333333335], [1.58541822E12, 1.2333333333333334]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58541858E12, 20.35], [1.5854184E12, 19.25], [1.58541846E12, 22.766666666666666], [1.58541828E12, 24.216666666666665], [1.58541834E12, 21.3], [1.58541864E12, 15.616666666666667], [1.58541816E12, 0.8333333333333334], [1.5854187E12, 0.21666666666666667], [1.58541822E12, 18.0], [1.58541852E12, 24.116666666666667]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58541858E12, 20.466666666666665], [1.5854184E12, 19.116666666666667], [1.58541846E12, 22.85], [1.58541828E12, 24.166666666666668], [1.58541834E12, 21.3], [1.58541864E12, 14.983333333333333], [1.58541816E12, 0.9333333333333333], [1.5854187E12, 0.1], [1.58541822E12, 18.65], [1.58541852E12, 24.1]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5854187E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.58541816E12, "maxY": 48.38333333333333, "series": [{"data": [[1.58541858E12, 40.81666666666667], [1.5854184E12, 38.36666666666667], [1.58541846E12, 45.61666666666667], [1.58541828E12, 48.38333333333333], [1.58541834E12, 42.6], [1.58541864E12, 30.6], [1.58541816E12, 2.2], [1.5854187E12, 0.31666666666666665], [1.58541822E12, 37.88333333333333], [1.58541852E12, 48.21666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5854187E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

