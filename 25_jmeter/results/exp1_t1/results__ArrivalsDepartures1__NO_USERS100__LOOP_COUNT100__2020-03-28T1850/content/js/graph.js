/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 25.0, "minX": 0.0, "maxY": 2755.0, "series": [{"data": [[0.0, 26.0], [0.1, 27.0], [0.2, 29.0], [0.3, 29.0], [0.4, 30.0], [0.5, 30.0], [0.6, 31.0], [0.7, 31.0], [0.8, 31.0], [0.9, 32.0], [1.0, 32.0], [1.1, 32.0], [1.2, 32.0], [1.3, 32.0], [1.4, 33.0], [1.5, 33.0], [1.6, 33.0], [1.7, 33.0], [1.8, 33.0], [1.9, 33.0], [2.0, 34.0], [2.1, 34.0], [2.2, 34.0], [2.3, 34.0], [2.4, 34.0], [2.5, 34.0], [2.6, 34.0], [2.7, 34.0], [2.8, 35.0], [2.9, 35.0], [3.0, 35.0], [3.1, 35.0], [3.2, 35.0], [3.3, 35.0], [3.4, 35.0], [3.5, 35.0], [3.6, 35.0], [3.7, 35.0], [3.8, 35.0], [3.9, 36.0], [4.0, 36.0], [4.1, 36.0], [4.2, 36.0], [4.3, 36.0], [4.4, 36.0], [4.5, 36.0], [4.6, 36.0], [4.7, 36.0], [4.8, 36.0], [4.9, 36.0], [5.0, 36.0], [5.1, 37.0], [5.2, 37.0], [5.3, 37.0], [5.4, 37.0], [5.5, 37.0], [5.6, 37.0], [5.7, 37.0], [5.8, 37.0], [5.9, 37.0], [6.0, 37.0], [6.1, 37.0], [6.2, 37.0], [6.3, 37.0], [6.4, 37.0], [6.5, 37.0], [6.6, 37.0], [6.7, 38.0], [6.8, 38.0], [6.9, 38.0], [7.0, 38.0], [7.1, 38.0], [7.2, 38.0], [7.3, 38.0], [7.4, 38.0], [7.5, 38.0], [7.6, 38.0], [7.7, 38.0], [7.8, 38.0], [7.9, 38.0], [8.0, 38.0], [8.1, 38.0], [8.2, 38.0], [8.3, 38.0], [8.4, 38.0], [8.5, 38.0], [8.6, 38.0], [8.7, 38.0], [8.8, 38.0], [8.9, 39.0], [9.0, 39.0], [9.1, 39.0], [9.2, 39.0], [9.3, 39.0], [9.4, 39.0], [9.5, 39.0], [9.6, 39.0], [9.7, 39.0], [9.8, 39.0], [9.9, 39.0], [10.0, 39.0], [10.1, 39.0], [10.2, 39.0], [10.3, 39.0], [10.4, 39.0], [10.5, 39.0], [10.6, 39.0], [10.7, 39.0], [10.8, 39.0], [10.9, 39.0], [11.0, 40.0], [11.1, 40.0], [11.2, 40.0], [11.3, 40.0], [11.4, 40.0], [11.5, 40.0], [11.6, 40.0], [11.7, 40.0], [11.8, 40.0], [11.9, 40.0], [12.0, 40.0], [12.1, 40.0], [12.2, 40.0], [12.3, 40.0], [12.4, 40.0], [12.5, 40.0], [12.6, 40.0], [12.7, 40.0], [12.8, 40.0], [12.9, 40.0], [13.0, 40.0], [13.1, 40.0], [13.2, 40.0], [13.3, 40.0], [13.4, 40.0], [13.5, 40.0], [13.6, 40.0], [13.7, 40.0], [13.8, 41.0], [13.9, 41.0], [14.0, 41.0], [14.1, 41.0], [14.2, 41.0], [14.3, 41.0], [14.4, 41.0], [14.5, 41.0], [14.6, 41.0], [14.7, 41.0], [14.8, 41.0], [14.9, 41.0], [15.0, 41.0], [15.1, 41.0], [15.2, 41.0], [15.3, 41.0], [15.4, 41.0], [15.5, 41.0], [15.6, 41.0], [15.7, 41.0], [15.8, 41.0], [15.9, 41.0], [16.0, 41.0], [16.1, 41.0], [16.2, 41.0], [16.3, 41.0], [16.4, 41.0], [16.5, 41.0], [16.6, 41.0], [16.7, 42.0], [16.8, 42.0], [16.9, 42.0], [17.0, 42.0], [17.1, 42.0], [17.2, 42.0], [17.3, 42.0], [17.4, 42.0], [17.5, 42.0], [17.6, 42.0], [17.7, 42.0], [17.8, 42.0], [17.9, 42.0], [18.0, 42.0], [18.1, 42.0], [18.2, 42.0], [18.3, 42.0], [18.4, 42.0], [18.5, 42.0], [18.6, 42.0], [18.7, 42.0], [18.8, 42.0], [18.9, 42.0], [19.0, 42.0], [19.1, 42.0], [19.2, 42.0], [19.3, 42.0], [19.4, 42.0], [19.5, 42.0], [19.6, 42.0], [19.7, 42.0], [19.8, 43.0], [19.9, 43.0], [20.0, 43.0], [20.1, 43.0], [20.2, 43.0], [20.3, 43.0], [20.4, 43.0], [20.5, 43.0], [20.6, 43.0], [20.7, 43.0], [20.8, 43.0], [20.9, 43.0], [21.0, 43.0], [21.1, 43.0], [21.2, 43.0], [21.3, 43.0], [21.4, 43.0], [21.5, 43.0], [21.6, 43.0], [21.7, 43.0], [21.8, 43.0], [21.9, 43.0], [22.0, 43.0], [22.1, 43.0], [22.2, 43.0], [22.3, 43.0], [22.4, 44.0], [22.5, 44.0], [22.6, 44.0], [22.7, 44.0], [22.8, 44.0], [22.9, 44.0], [23.0, 44.0], [23.1, 44.0], [23.2, 44.0], [23.3, 44.0], [23.4, 44.0], [23.5, 44.0], [23.6, 44.0], [23.7, 44.0], [23.8, 44.0], [23.9, 44.0], [24.0, 44.0], [24.1, 44.0], [24.2, 44.0], [24.3, 44.0], [24.4, 44.0], [24.5, 44.0], [24.6, 44.0], [24.7, 44.0], [24.8, 44.0], [24.9, 44.0], [25.0, 44.0], [25.1, 44.0], [25.2, 44.0], [25.3, 44.0], [25.4, 44.0], [25.5, 44.0], [25.6, 45.0], [25.7, 45.0], [25.8, 45.0], [25.9, 45.0], [26.0, 45.0], [26.1, 45.0], [26.2, 45.0], [26.3, 45.0], [26.4, 45.0], [26.5, 45.0], [26.6, 45.0], [26.7, 45.0], [26.8, 45.0], [26.9, 45.0], [27.0, 45.0], [27.1, 45.0], [27.2, 45.0], [27.3, 45.0], [27.4, 45.0], [27.5, 45.0], [27.6, 45.0], [27.7, 45.0], [27.8, 45.0], [27.9, 45.0], [28.0, 45.0], [28.1, 45.0], [28.2, 45.0], [28.3, 45.0], [28.4, 45.0], [28.5, 45.0], [28.6, 45.0], [28.7, 46.0], [28.8, 46.0], [28.9, 46.0], [29.0, 46.0], [29.1, 46.0], [29.2, 46.0], [29.3, 46.0], [29.4, 46.0], [29.5, 46.0], [29.6, 46.0], [29.7, 46.0], [29.8, 46.0], [29.9, 46.0], [30.0, 46.0], [30.1, 46.0], [30.2, 46.0], [30.3, 46.0], [30.4, 46.0], [30.5, 46.0], [30.6, 46.0], [30.7, 46.0], [30.8, 46.0], [30.9, 46.0], [31.0, 46.0], [31.1, 46.0], [31.2, 46.0], [31.3, 46.0], [31.4, 46.0], [31.5, 46.0], [31.6, 46.0], [31.7, 47.0], [31.8, 47.0], [31.9, 47.0], [32.0, 47.0], [32.1, 47.0], [32.2, 47.0], [32.3, 47.0], [32.4, 47.0], [32.5, 47.0], [32.6, 47.0], [32.7, 47.0], [32.8, 47.0], [32.9, 47.0], [33.0, 47.0], [33.1, 47.0], [33.2, 47.0], [33.3, 47.0], [33.4, 47.0], [33.5, 47.0], [33.6, 47.0], [33.7, 47.0], [33.8, 47.0], [33.9, 47.0], [34.0, 47.0], [34.1, 47.0], [34.2, 47.0], [34.3, 47.0], [34.4, 47.0], [34.5, 47.0], [34.6, 47.0], [34.7, 47.0], [34.8, 47.0], [34.9, 47.0], [35.0, 48.0], [35.1, 48.0], [35.2, 48.0], [35.3, 48.0], [35.4, 48.0], [35.5, 48.0], [35.6, 48.0], [35.7, 48.0], [35.8, 48.0], [35.9, 48.0], [36.0, 48.0], [36.1, 48.0], [36.2, 48.0], [36.3, 48.0], [36.4, 48.0], [36.5, 48.0], [36.6, 48.0], [36.7, 48.0], [36.8, 48.0], [36.9, 48.0], [37.0, 48.0], [37.1, 48.0], [37.2, 48.0], [37.3, 48.0], [37.4, 48.0], [37.5, 48.0], [37.6, 48.0], [37.7, 48.0], [37.8, 48.0], [37.9, 48.0], [38.0, 49.0], [38.1, 49.0], [38.2, 49.0], [38.3, 49.0], [38.4, 49.0], [38.5, 49.0], [38.6, 49.0], [38.7, 49.0], [38.8, 49.0], [38.9, 49.0], [39.0, 49.0], [39.1, 49.0], [39.2, 49.0], [39.3, 49.0], [39.4, 49.0], [39.5, 49.0], [39.6, 49.0], [39.7, 49.0], [39.8, 49.0], [39.9, 49.0], [40.0, 49.0], [40.1, 49.0], [40.2, 49.0], [40.3, 49.0], [40.4, 49.0], [40.5, 50.0], [40.6, 50.0], [40.7, 50.0], [40.8, 50.0], [40.9, 50.0], [41.0, 50.0], [41.1, 50.0], [41.2, 50.0], [41.3, 50.0], [41.4, 50.0], [41.5, 50.0], [41.6, 50.0], [41.7, 50.0], [41.8, 50.0], [41.9, 50.0], [42.0, 50.0], [42.1, 50.0], [42.2, 50.0], [42.3, 50.0], [42.4, 50.0], [42.5, 50.0], [42.6, 50.0], [42.7, 50.0], [42.8, 50.0], [42.9, 51.0], [43.0, 51.0], [43.1, 51.0], [43.2, 51.0], [43.3, 51.0], [43.4, 51.0], [43.5, 51.0], [43.6, 51.0], [43.7, 51.0], [43.8, 51.0], [43.9, 51.0], [44.0, 51.0], [44.1, 51.0], [44.2, 51.0], [44.3, 51.0], [44.4, 51.0], [44.5, 51.0], [44.6, 51.0], [44.7, 51.0], [44.8, 51.0], [44.9, 51.0], [45.0, 51.0], [45.1, 51.0], [45.2, 52.0], [45.3, 52.0], [45.4, 52.0], [45.5, 52.0], [45.6, 52.0], [45.7, 52.0], [45.8, 52.0], [45.9, 52.0], [46.0, 52.0], [46.1, 52.0], [46.2, 52.0], [46.3, 52.0], [46.4, 52.0], [46.5, 52.0], [46.6, 52.0], [46.7, 52.0], [46.8, 52.0], [46.9, 52.0], [47.0, 52.0], [47.1, 53.0], [47.2, 53.0], [47.3, 53.0], [47.4, 53.0], [47.5, 53.0], [47.6, 53.0], [47.7, 53.0], [47.8, 53.0], [47.9, 53.0], [48.0, 53.0], [48.1, 53.0], [48.2, 53.0], [48.3, 53.0], [48.4, 53.0], [48.5, 53.0], [48.6, 53.0], [48.7, 53.0], [48.8, 53.0], [48.9, 54.0], [49.0, 54.0], [49.1, 54.0], [49.2, 54.0], [49.3, 54.0], [49.4, 54.0], [49.5, 54.0], [49.6, 54.0], [49.7, 54.0], [49.8, 54.0], [49.9, 54.0], [50.0, 54.0], [50.1, 54.0], [50.2, 54.0], [50.3, 54.0], [50.4, 55.0], [50.5, 55.0], [50.6, 55.0], [50.7, 55.0], [50.8, 55.0], [50.9, 55.0], [51.0, 55.0], [51.1, 55.0], [51.2, 55.0], [51.3, 55.0], [51.4, 55.0], [51.5, 55.0], [51.6, 55.0], [51.7, 56.0], [51.8, 56.0], [51.9, 56.0], [52.0, 56.0], [52.1, 56.0], [52.2, 56.0], [52.3, 56.0], [52.4, 56.0], [52.5, 56.0], [52.6, 56.0], [52.7, 56.0], [52.8, 56.0], [52.9, 57.0], [53.0, 57.0], [53.1, 57.0], [53.2, 57.0], [53.3, 57.0], [53.4, 57.0], [53.5, 57.0], [53.6, 57.0], [53.7, 57.0], [53.8, 57.0], [53.9, 57.0], [54.0, 58.0], [54.1, 58.0], [54.2, 58.0], [54.3, 58.0], [54.4, 58.0], [54.5, 58.0], [54.6, 58.0], [54.7, 58.0], [54.8, 59.0], [54.9, 59.0], [55.0, 59.0], [55.1, 59.0], [55.2, 59.0], [55.3, 59.0], [55.4, 59.0], [55.5, 59.0], [55.6, 60.0], [55.7, 60.0], [55.8, 60.0], [55.9, 60.0], [56.0, 60.0], [56.1, 60.0], [56.2, 60.0], [56.3, 60.0], [56.4, 61.0], [56.5, 61.0], [56.6, 61.0], [56.7, 61.0], [56.8, 61.0], [56.9, 62.0], [57.0, 62.0], [57.1, 62.0], [57.2, 62.0], [57.3, 63.0], [57.4, 63.0], [57.5, 63.0], [57.6, 63.0], [57.7, 63.0], [57.8, 64.0], [57.9, 64.0], [58.0, 64.0], [58.1, 65.0], [58.2, 65.0], [58.3, 65.0], [58.4, 65.0], [58.5, 66.0], [58.6, 66.0], [58.7, 66.0], [58.8, 67.0], [58.9, 67.0], [59.0, 67.0], [59.1, 68.0], [59.2, 68.0], [59.3, 69.0], [59.4, 69.0], [59.5, 69.0], [59.6, 70.0], [59.7, 70.0], [59.8, 71.0], [59.9, 71.0], [60.0, 72.0], [60.1, 72.0], [60.2, 73.0], [60.3, 74.0], [60.4, 75.0], [60.5, 76.0], [60.6, 77.0], [60.7, 78.0], [60.8, 80.0], [60.9, 82.0], [61.0, 83.0], [61.1, 85.0], [61.2, 86.0], [61.3, 89.0], [61.4, 91.0], [61.5, 95.0], [61.6, 101.0], [61.7, 109.0], [61.8, 113.0], [61.9, 115.0], [62.0, 121.0], [62.1, 132.0], [62.2, 141.0], [62.3, 151.0], [62.4, 157.0], [62.5, 161.0], [62.6, 167.0], [62.7, 179.0], [62.8, 188.0], [62.9, 198.0], [63.0, 208.0], [63.1, 217.0], [63.2, 224.0], [63.3, 233.0], [63.4, 238.0], [63.5, 246.0], [63.6, 254.0], [63.7, 261.0], [63.8, 266.0], [63.9, 272.0], [64.0, 281.0], [64.1, 288.0], [64.2, 293.0], [64.3, 300.0], [64.4, 306.0], [64.5, 315.0], [64.6, 319.0], [64.7, 322.0], [64.8, 326.0], [64.9, 331.0], [65.0, 334.0], [65.1, 341.0], [65.2, 346.0], [65.3, 351.0], [65.4, 355.0], [65.5, 358.0], [65.6, 362.0], [65.7, 368.0], [65.8, 371.0], [65.9, 373.0], [66.0, 380.0], [66.1, 384.0], [66.2, 387.0], [66.3, 390.0], [66.4, 395.0], [66.5, 402.0], [66.6, 407.0], [66.7, 411.0], [66.8, 413.0], [66.9, 419.0], [67.0, 423.0], [67.1, 426.0], [67.2, 428.0], [67.3, 431.0], [67.4, 437.0], [67.5, 439.0], [67.6, 445.0], [67.7, 449.0], [67.8, 454.0], [67.9, 456.0], [68.0, 458.0], [68.1, 463.0], [68.2, 466.0], [68.3, 469.0], [68.4, 472.0], [68.5, 477.0], [68.6, 481.0], [68.7, 484.0], [68.8, 487.0], [68.9, 489.0], [69.0, 494.0], [69.1, 497.0], [69.2, 501.0], [69.3, 504.0], [69.4, 508.0], [69.5, 511.0], [69.6, 513.0], [69.7, 516.0], [69.8, 519.0], [69.9, 522.0], [70.0, 525.0], [70.1, 526.0], [70.2, 530.0], [70.3, 533.0], [70.4, 535.0], [70.5, 538.0], [70.6, 540.0], [70.7, 542.0], [70.8, 545.0], [70.9, 547.0], [71.0, 550.0], [71.1, 552.0], [71.2, 556.0], [71.3, 558.0], [71.4, 564.0], [71.5, 566.0], [71.6, 571.0], [71.7, 572.0], [71.8, 575.0], [71.9, 577.0], [72.0, 579.0], [72.1, 581.0], [72.2, 583.0], [72.3, 585.0], [72.4, 588.0], [72.5, 590.0], [72.6, 594.0], [72.7, 597.0], [72.8, 599.0], [72.9, 602.0], [73.0, 603.0], [73.1, 606.0], [73.2, 608.0], [73.3, 610.0], [73.4, 615.0], [73.5, 618.0], [73.6, 622.0], [73.7, 625.0], [73.8, 627.0], [73.9, 630.0], [74.0, 631.0], [74.1, 633.0], [74.2, 638.0], [74.3, 639.0], [74.4, 641.0], [74.5, 645.0], [74.6, 647.0], [74.7, 649.0], [74.8, 651.0], [74.9, 654.0], [75.0, 656.0], [75.1, 659.0], [75.2, 662.0], [75.3, 665.0], [75.4, 668.0], [75.5, 671.0], [75.6, 674.0], [75.7, 675.0], [75.8, 678.0], [75.9, 680.0], [76.0, 682.0], [76.1, 685.0], [76.2, 688.0], [76.3, 692.0], [76.4, 695.0], [76.5, 699.0], [76.6, 702.0], [76.7, 705.0], [76.8, 708.0], [76.9, 709.0], [77.0, 712.0], [77.1, 714.0], [77.2, 716.0], [77.3, 721.0], [77.4, 723.0], [77.5, 726.0], [77.6, 729.0], [77.7, 732.0], [77.8, 733.0], [77.9, 737.0], [78.0, 740.0], [78.1, 741.0], [78.2, 744.0], [78.3, 745.0], [78.4, 747.0], [78.5, 750.0], [78.6, 753.0], [78.7, 755.0], [78.8, 757.0], [78.9, 758.0], [79.0, 761.0], [79.1, 764.0], [79.2, 765.0], [79.3, 767.0], [79.4, 769.0], [79.5, 773.0], [79.6, 775.0], [79.7, 779.0], [79.8, 781.0], [79.9, 783.0], [80.0, 784.0], [80.1, 787.0], [80.2, 790.0], [80.3, 791.0], [80.4, 795.0], [80.5, 797.0], [80.6, 801.0], [80.7, 803.0], [80.8, 807.0], [80.9, 811.0], [81.0, 815.0], [81.1, 818.0], [81.2, 820.0], [81.3, 822.0], [81.4, 827.0], [81.5, 829.0], [81.6, 833.0], [81.7, 835.0], [81.8, 838.0], [81.9, 840.0], [82.0, 842.0], [82.1, 845.0], [82.2, 846.0], [82.3, 849.0], [82.4, 851.0], [82.5, 853.0], [82.6, 856.0], [82.7, 860.0], [82.8, 863.0], [82.9, 867.0], [83.0, 870.0], [83.1, 871.0], [83.2, 873.0], [83.3, 875.0], [83.4, 878.0], [83.5, 881.0], [83.6, 885.0], [83.7, 887.0], [83.8, 890.0], [83.9, 894.0], [84.0, 896.0], [84.1, 899.0], [84.2, 901.0], [84.3, 904.0], [84.4, 907.0], [84.5, 910.0], [84.6, 913.0], [84.7, 915.0], [84.8, 919.0], [84.9, 922.0], [85.0, 927.0], [85.1, 930.0], [85.2, 933.0], [85.3, 937.0], [85.4, 940.0], [85.5, 944.0], [85.6, 946.0], [85.7, 949.0], [85.8, 952.0], [85.9, 954.0], [86.0, 960.0], [86.1, 962.0], [86.2, 965.0], [86.3, 968.0], [86.4, 971.0], [86.5, 973.0], [86.6, 976.0], [86.7, 979.0], [86.8, 984.0], [86.9, 985.0], [87.0, 989.0], [87.1, 992.0], [87.2, 993.0], [87.3, 997.0], [87.4, 1000.0], [87.5, 1004.0], [87.6, 1006.0], [87.7, 1009.0], [87.8, 1011.0], [87.9, 1014.0], [88.0, 1017.0], [88.1, 1020.0], [88.2, 1023.0], [88.3, 1025.0], [88.4, 1028.0], [88.5, 1031.0], [88.6, 1035.0], [88.7, 1039.0], [88.8, 1044.0], [88.9, 1047.0], [89.0, 1050.0], [89.1, 1053.0], [89.2, 1056.0], [89.3, 1059.0], [89.4, 1062.0], [89.5, 1067.0], [89.6, 1070.0], [89.7, 1074.0], [89.8, 1075.0], [89.9, 1079.0], [90.0, 1082.0], [90.1, 1085.0], [90.2, 1088.0], [90.3, 1093.0], [90.4, 1096.0], [90.5, 1099.0], [90.6, 1103.0], [90.7, 1106.0], [90.8, 1110.0], [90.9, 1115.0], [91.0, 1118.0], [91.1, 1122.0], [91.2, 1125.0], [91.3, 1128.0], [91.4, 1134.0], [91.5, 1138.0], [91.6, 1142.0], [91.7, 1147.0], [91.8, 1149.0], [91.9, 1153.0], [92.0, 1157.0], [92.1, 1162.0], [92.2, 1167.0], [92.3, 1170.0], [92.4, 1174.0], [92.5, 1180.0], [92.6, 1185.0], [92.7, 1189.0], [92.8, 1194.0], [92.9, 1199.0], [93.0, 1204.0], [93.1, 1208.0], [93.2, 1211.0], [93.3, 1216.0], [93.4, 1223.0], [93.5, 1228.0], [93.6, 1233.0], [93.7, 1237.0], [93.8, 1240.0], [93.9, 1246.0], [94.0, 1255.0], [94.1, 1262.0], [94.2, 1265.0], [94.3, 1270.0], [94.4, 1277.0], [94.5, 1284.0], [94.6, 1287.0], [94.7, 1294.0], [94.8, 1302.0], [94.9, 1308.0], [95.0, 1312.0], [95.1, 1318.0], [95.2, 1328.0], [95.3, 1337.0], [95.4, 1345.0], [95.5, 1352.0], [95.6, 1359.0], [95.7, 1367.0], [95.8, 1373.0], [95.9, 1380.0], [96.0, 1384.0], [96.1, 1394.0], [96.2, 1404.0], [96.3, 1409.0], [96.4, 1420.0], [96.5, 1425.0], [96.6, 1435.0], [96.7, 1443.0], [96.8, 1453.0], [96.9, 1460.0], [97.0, 1466.0], [97.1, 1474.0], [97.2, 1489.0], [97.3, 1497.0], [97.4, 1506.0], [97.5, 1517.0], [97.6, 1527.0], [97.7, 1545.0], [97.8, 1552.0], [97.9, 1564.0], [98.0, 1580.0], [98.1, 1590.0], [98.2, 1608.0], [98.3, 1624.0], [98.4, 1641.0], [98.5, 1652.0], [98.6, 1682.0], [98.7, 1696.0], [98.8, 1714.0], [98.9, 1742.0], [99.0, 1757.0], [99.1, 1775.0], [99.2, 1797.0], [99.3, 1823.0], [99.4, 1843.0], [99.5, 1885.0], [99.6, 1949.0], [99.7, 2025.0], [99.8, 2114.0], [99.9, 2178.0], [100.0, 2755.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 143.0], [0.1, 143.0], [0.2, 143.0], [0.3, 143.0], [0.4, 143.0], [0.5, 143.0], [0.6, 143.0], [0.7, 143.0], [0.8, 143.0], [0.9, 143.0], [1.0, 152.0], [1.1, 152.0], [1.2, 152.0], [1.3, 152.0], [1.4, 152.0], [1.5, 152.0], [1.6, 152.0], [1.7, 152.0], [1.8, 152.0], [1.9, 152.0], [2.0, 153.0], [2.1, 153.0], [2.2, 153.0], [2.3, 153.0], [2.4, 153.0], [2.5, 153.0], [2.6, 153.0], [2.7, 153.0], [2.8, 153.0], [2.9, 153.0], [3.0, 153.0], [3.1, 153.0], [3.2, 153.0], [3.3, 153.0], [3.4, 153.0], [3.5, 153.0], [3.6, 153.0], [3.7, 153.0], [3.8, 153.0], [3.9, 153.0], [4.0, 154.0], [4.1, 154.0], [4.2, 154.0], [4.3, 154.0], [4.4, 154.0], [4.5, 154.0], [4.6, 154.0], [4.7, 154.0], [4.8, 154.0], [4.9, 154.0], [5.0, 154.0], [5.1, 154.0], [5.2, 154.0], [5.3, 154.0], [5.4, 154.0], [5.5, 154.0], [5.6, 154.0], [5.7, 154.0], [5.8, 154.0], [5.9, 154.0], [6.0, 155.0], [6.1, 155.0], [6.2, 155.0], [6.3, 155.0], [6.4, 155.0], [6.5, 155.0], [6.6, 155.0], [6.7, 155.0], [6.8, 155.0], [6.9, 155.0], [7.0, 155.0], [7.1, 155.0], [7.2, 155.0], [7.3, 155.0], [7.4, 155.0], [7.5, 155.0], [7.6, 155.0], [7.7, 155.0], [7.8, 155.0], [7.9, 155.0], [8.0, 157.0], [8.1, 157.0], [8.2, 157.0], [8.3, 157.0], [8.4, 157.0], [8.5, 157.0], [8.6, 157.0], [8.7, 157.0], [8.8, 157.0], [8.9, 157.0], [9.0, 158.0], [9.1, 158.0], [9.2, 158.0], [9.3, 158.0], [9.4, 158.0], [9.5, 158.0], [9.6, 158.0], [9.7, 158.0], [9.8, 158.0], [9.9, 158.0], [10.0, 158.0], [10.1, 158.0], [10.2, 158.0], [10.3, 158.0], [10.4, 158.0], [10.5, 158.0], [10.6, 158.0], [10.7, 158.0], [10.8, 158.0], [10.9, 158.0], [11.0, 158.0], [11.1, 158.0], [11.2, 158.0], [11.3, 158.0], [11.4, 158.0], [11.5, 158.0], [11.6, 158.0], [11.7, 158.0], [11.8, 158.0], [11.9, 158.0], [12.0, 160.0], [12.1, 160.0], [12.2, 160.0], [12.3, 160.0], [12.4, 160.0], [12.5, 160.0], [12.6, 160.0], [12.7, 160.0], [12.8, 160.0], [12.9, 160.0], [13.0, 160.0], [13.1, 160.0], [13.2, 160.0], [13.3, 160.0], [13.4, 160.0], [13.5, 160.0], [13.6, 160.0], [13.7, 160.0], [13.8, 160.0], [13.9, 160.0], [14.0, 160.0], [14.1, 160.0], [14.2, 160.0], [14.3, 160.0], [14.4, 160.0], [14.5, 160.0], [14.6, 160.0], [14.7, 160.0], [14.8, 160.0], [14.9, 160.0], [15.0, 161.0], [15.1, 161.0], [15.2, 161.0], [15.3, 161.0], [15.4, 161.0], [15.5, 161.0], [15.6, 161.0], [15.7, 161.0], [15.8, 161.0], [15.9, 161.0], [16.0, 161.0], [16.1, 161.0], [16.2, 161.0], [16.3, 161.0], [16.4, 161.0], [16.5, 161.0], [16.6, 161.0], [16.7, 161.0], [16.8, 161.0], [16.9, 161.0], [17.0, 161.0], [17.1, 161.0], [17.2, 161.0], [17.3, 161.0], [17.4, 161.0], [17.5, 161.0], [17.6, 161.0], [17.7, 161.0], [17.8, 161.0], [17.9, 161.0], [18.0, 161.0], [18.1, 161.0], [18.2, 161.0], [18.3, 161.0], [18.4, 161.0], [18.5, 161.0], [18.6, 161.0], [18.7, 161.0], [18.8, 161.0], [18.9, 161.0], [19.0, 162.0], [19.1, 162.0], [19.2, 162.0], [19.3, 162.0], [19.4, 162.0], [19.5, 162.0], [19.6, 162.0], [19.7, 162.0], [19.8, 162.0], [19.9, 162.0], [20.0, 162.0], [20.1, 162.0], [20.2, 162.0], [20.3, 162.0], [20.4, 162.0], [20.5, 162.0], [20.6, 162.0], [20.7, 162.0], [20.8, 162.0], [20.9, 162.0], [21.0, 163.0], [21.1, 163.0], [21.2, 163.0], [21.3, 163.0], [21.4, 163.0], [21.5, 163.0], [21.6, 163.0], [21.7, 163.0], [21.8, 163.0], [21.9, 163.0], [22.0, 163.0], [22.1, 163.0], [22.2, 163.0], [22.3, 163.0], [22.4, 163.0], [22.5, 163.0], [22.6, 163.0], [22.7, 163.0], [22.8, 163.0], [22.9, 163.0], [23.0, 163.0], [23.1, 163.0], [23.2, 163.0], [23.3, 163.0], [23.4, 163.0], [23.5, 163.0], [23.6, 163.0], [23.7, 163.0], [23.8, 163.0], [23.9, 163.0], [24.0, 164.0], [24.1, 164.0], [24.2, 164.0], [24.3, 164.0], [24.4, 164.0], [24.5, 164.0], [24.6, 164.0], [24.7, 164.0], [24.8, 164.0], [24.9, 164.0], [25.0, 164.0], [25.1, 164.0], [25.2, 164.0], [25.3, 164.0], [25.4, 164.0], [25.5, 164.0], [25.6, 164.0], [25.7, 164.0], [25.8, 164.0], [25.9, 164.0], [26.0, 164.0], [26.1, 164.0], [26.2, 164.0], [26.3, 164.0], [26.4, 164.0], [26.5, 164.0], [26.6, 164.0], [26.7, 164.0], [26.8, 164.0], [26.9, 164.0], [27.0, 164.0], [27.1, 164.0], [27.2, 164.0], [27.3, 164.0], [27.4, 164.0], [27.5, 164.0], [27.6, 164.0], [27.7, 164.0], [27.8, 164.0], [27.9, 164.0], [28.0, 164.0], [28.1, 164.0], [28.2, 164.0], [28.3, 164.0], [28.4, 164.0], [28.5, 164.0], [28.6, 164.0], [28.7, 164.0], [28.8, 164.0], [28.9, 164.0], [29.0, 164.0], [29.1, 164.0], [29.2, 164.0], [29.3, 164.0], [29.4, 164.0], [29.5, 164.0], [29.6, 164.0], [29.7, 164.0], [29.8, 164.0], [29.9, 164.0], [30.0, 164.0], [30.1, 164.0], [30.2, 164.0], [30.3, 164.0], [30.4, 164.0], [30.5, 164.0], [30.6, 164.0], [30.7, 164.0], [30.8, 164.0], [30.9, 164.0], [31.0, 164.0], [31.1, 164.0], [31.2, 164.0], [31.3, 164.0], [31.4, 164.0], [31.5, 164.0], [31.6, 164.0], [31.7, 164.0], [31.8, 164.0], [31.9, 164.0], [32.0, 165.0], [32.1, 165.0], [32.2, 165.0], [32.3, 165.0], [32.4, 165.0], [32.5, 165.0], [32.6, 165.0], [32.7, 165.0], [32.8, 165.0], [32.9, 165.0], [33.0, 165.0], [33.1, 165.0], [33.2, 165.0], [33.3, 165.0], [33.4, 165.0], [33.5, 165.0], [33.6, 165.0], [33.7, 165.0], [33.8, 165.0], [33.9, 165.0], [34.0, 166.0], [34.1, 166.0], [34.2, 166.0], [34.3, 166.0], [34.4, 166.0], [34.5, 166.0], [34.6, 166.0], [34.7, 166.0], [34.8, 166.0], [34.9, 166.0], [35.0, 166.0], [35.1, 166.0], [35.2, 166.0], [35.3, 166.0], [35.4, 166.0], [35.5, 166.0], [35.6, 166.0], [35.7, 166.0], [35.8, 166.0], [35.9, 166.0], [36.0, 166.0], [36.1, 166.0], [36.2, 166.0], [36.3, 166.0], [36.4, 166.0], [36.5, 166.0], [36.6, 166.0], [36.7, 166.0], [36.8, 166.0], [36.9, 166.0], [37.0, 166.0], [37.1, 166.0], [37.2, 166.0], [37.3, 166.0], [37.4, 166.0], [37.5, 166.0], [37.6, 166.0], [37.7, 166.0], [37.8, 166.0], [37.9, 166.0], [38.0, 166.0], [38.1, 166.0], [38.2, 166.0], [38.3, 166.0], [38.4, 166.0], [38.5, 166.0], [38.6, 166.0], [38.7, 166.0], [38.8, 166.0], [38.9, 166.0], [39.0, 167.0], [39.1, 167.0], [39.2, 167.0], [39.3, 167.0], [39.4, 167.0], [39.5, 167.0], [39.6, 167.0], [39.7, 167.0], [39.8, 167.0], [39.9, 167.0], [40.0, 167.0], [40.1, 167.0], [40.2, 167.0], [40.3, 167.0], [40.4, 167.0], [40.5, 167.0], [40.6, 167.0], [40.7, 167.0], [40.8, 167.0], [40.9, 167.0], [41.0, 167.0], [41.1, 167.0], [41.2, 167.0], [41.3, 167.0], [41.4, 167.0], [41.5, 167.0], [41.6, 167.0], [41.7, 167.0], [41.8, 167.0], [41.9, 167.0], [42.0, 168.0], [42.1, 168.0], [42.2, 168.0], [42.3, 168.0], [42.4, 168.0], [42.5, 168.0], [42.6, 168.0], [42.7, 168.0], [42.8, 168.0], [42.9, 168.0], [43.0, 168.0], [43.1, 168.0], [43.2, 168.0], [43.3, 168.0], [43.4, 168.0], [43.5, 168.0], [43.6, 168.0], [43.7, 168.0], [43.8, 168.0], [43.9, 168.0], [44.0, 168.0], [44.1, 168.0], [44.2, 168.0], [44.3, 168.0], [44.4, 168.0], [44.5, 168.0], [44.6, 168.0], [44.7, 168.0], [44.8, 168.0], [44.9, 168.0], [45.0, 168.0], [45.1, 168.0], [45.2, 168.0], [45.3, 168.0], [45.4, 168.0], [45.5, 168.0], [45.6, 168.0], [45.7, 168.0], [45.8, 168.0], [45.9, 168.0], [46.0, 168.0], [46.1, 168.0], [46.2, 168.0], [46.3, 168.0], [46.4, 168.0], [46.5, 168.0], [46.6, 168.0], [46.7, 168.0], [46.8, 168.0], [46.9, 168.0], [47.0, 169.0], [47.1, 169.0], [47.2, 169.0], [47.3, 169.0], [47.4, 169.0], [47.5, 169.0], [47.6, 169.0], [47.7, 169.0], [47.8, 169.0], [47.9, 169.0], [48.0, 169.0], [48.1, 169.0], [48.2, 169.0], [48.3, 169.0], [48.4, 169.0], [48.5, 169.0], [48.6, 169.0], [48.7, 169.0], [48.8, 169.0], [48.9, 169.0], [49.0, 169.0], [49.1, 169.0], [49.2, 169.0], [49.3, 169.0], [49.4, 169.0], [49.5, 169.0], [49.6, 169.0], [49.7, 169.0], [49.8, 169.0], [49.9, 169.0], [50.0, 170.0], [50.1, 170.0], [50.2, 170.0], [50.3, 170.0], [50.4, 170.0], [50.5, 170.0], [50.6, 170.0], [50.7, 170.0], [50.8, 170.0], [50.9, 170.0], [51.0, 170.0], [51.1, 170.0], [51.2, 170.0], [51.3, 170.0], [51.4, 170.0], [51.5, 170.0], [51.6, 170.0], [51.7, 170.0], [51.8, 170.0], [51.9, 170.0], [52.0, 170.0], [52.1, 170.0], [52.2, 170.0], [52.3, 170.0], [52.4, 170.0], [52.5, 170.0], [52.6, 170.0], [52.7, 170.0], [52.8, 170.0], [52.9, 170.0], [53.0, 170.0], [53.1, 170.0], [53.2, 170.0], [53.3, 170.0], [53.4, 170.0], [53.5, 170.0], [53.6, 170.0], [53.7, 170.0], [53.8, 170.0], [53.9, 170.0], [54.0, 171.0], [54.1, 171.0], [54.2, 171.0], [54.3, 171.0], [54.4, 171.0], [54.5, 171.0], [54.6, 171.0], [54.7, 171.0], [54.8, 171.0], [54.9, 171.0], [55.0, 171.0], [55.1, 171.0], [55.2, 171.0], [55.3, 171.0], [55.4, 171.0], [55.5, 171.0], [55.6, 171.0], [55.7, 171.0], [55.8, 171.0], [55.9, 171.0], [56.0, 171.0], [56.1, 171.0], [56.2, 171.0], [56.3, 171.0], [56.4, 171.0], [56.5, 171.0], [56.6, 171.0], [56.7, 171.0], [56.8, 171.0], [56.9, 171.0], [57.0, 172.0], [57.1, 172.0], [57.2, 172.0], [57.3, 172.0], [57.4, 172.0], [57.5, 172.0], [57.6, 172.0], [57.7, 172.0], [57.8, 172.0], [57.9, 172.0], [58.0, 172.0], [58.1, 172.0], [58.2, 172.0], [58.3, 172.0], [58.4, 172.0], [58.5, 172.0], [58.6, 172.0], [58.7, 172.0], [58.8, 172.0], [58.9, 172.0], [59.0, 172.0], [59.1, 172.0], [59.2, 172.0], [59.3, 172.0], [59.4, 172.0], [59.5, 172.0], [59.6, 172.0], [59.7, 172.0], [59.8, 172.0], [59.9, 172.0], [60.0, 172.0], [60.1, 172.0], [60.2, 172.0], [60.3, 172.0], [60.4, 172.0], [60.5, 172.0], [60.6, 172.0], [60.7, 172.0], [60.8, 172.0], [60.9, 172.0], [61.0, 173.0], [61.1, 173.0], [61.2, 173.0], [61.3, 173.0], [61.4, 173.0], [61.5, 173.0], [61.6, 173.0], [61.7, 173.0], [61.8, 173.0], [61.9, 173.0], [62.0, 173.0], [62.1, 173.0], [62.2, 173.0], [62.3, 173.0], [62.4, 173.0], [62.5, 173.0], [62.6, 173.0], [62.7, 173.0], [62.8, 173.0], [62.9, 173.0], [63.0, 174.0], [63.1, 174.0], [63.2, 174.0], [63.3, 174.0], [63.4, 174.0], [63.5, 174.0], [63.6, 174.0], [63.7, 174.0], [63.8, 174.0], [63.9, 174.0], [64.0, 174.0], [64.1, 174.0], [64.2, 174.0], [64.3, 174.0], [64.4, 174.0], [64.5, 174.0], [64.6, 174.0], [64.7, 174.0], [64.8, 174.0], [64.9, 174.0], [65.0, 176.0], [65.1, 176.0], [65.2, 176.0], [65.3, 176.0], [65.4, 176.0], [65.5, 176.0], [65.6, 176.0], [65.7, 176.0], [65.8, 176.0], [65.9, 176.0], [66.0, 176.0], [66.1, 176.0], [66.2, 176.0], [66.3, 176.0], [66.4, 176.0], [66.5, 176.0], [66.6, 176.0], [66.7, 176.0], [66.8, 176.0], [66.9, 176.0], [67.0, 177.0], [67.1, 177.0], [67.2, 177.0], [67.3, 177.0], [67.4, 177.0], [67.5, 177.0], [67.6, 177.0], [67.7, 177.0], [67.8, 177.0], [67.9, 177.0], [68.0, 177.0], [68.1, 177.0], [68.2, 177.0], [68.3, 177.0], [68.4, 177.0], [68.5, 177.0], [68.6, 177.0], [68.7, 177.0], [68.8, 177.0], [68.9, 177.0], [69.0, 178.0], [69.1, 178.0], [69.2, 178.0], [69.3, 178.0], [69.4, 178.0], [69.5, 178.0], [69.6, 178.0], [69.7, 178.0], [69.8, 178.0], [69.9, 178.0], [70.0, 178.0], [70.1, 178.0], [70.2, 178.0], [70.3, 178.0], [70.4, 178.0], [70.5, 178.0], [70.6, 178.0], [70.7, 178.0], [70.8, 178.0], [70.9, 178.0], [71.0, 179.0], [71.1, 179.0], [71.2, 179.0], [71.3, 179.0], [71.4, 179.0], [71.5, 179.0], [71.6, 179.0], [71.7, 179.0], [71.8, 179.0], [71.9, 179.0], [72.0, 179.0], [72.1, 179.0], [72.2, 179.0], [72.3, 179.0], [72.4, 179.0], [72.5, 179.0], [72.6, 179.0], [72.7, 179.0], [72.8, 179.0], [72.9, 179.0], [73.0, 179.0], [73.1, 179.0], [73.2, 179.0], [73.3, 179.0], [73.4, 179.0], [73.5, 179.0], [73.6, 179.0], [73.7, 179.0], [73.8, 179.0], [73.9, 179.0], [74.0, 179.0], [74.1, 179.0], [74.2, 179.0], [74.3, 179.0], [74.4, 179.0], [74.5, 179.0], [74.6, 179.0], [74.7, 179.0], [74.8, 179.0], [74.9, 179.0], [75.0, 180.0], [75.1, 180.0], [75.2, 180.0], [75.3, 180.0], [75.4, 180.0], [75.5, 180.0], [75.6, 180.0], [75.7, 180.0], [75.8, 180.0], [75.9, 180.0], [76.0, 180.0], [76.1, 180.0], [76.2, 180.0], [76.3, 180.0], [76.4, 180.0], [76.5, 180.0], [76.6, 180.0], [76.7, 180.0], [76.8, 180.0], [76.9, 180.0], [77.0, 181.0], [77.1, 181.0], [77.2, 181.0], [77.3, 181.0], [77.4, 181.0], [77.5, 181.0], [77.6, 181.0], [77.7, 181.0], [77.8, 181.0], [77.9, 181.0], [78.0, 181.0], [78.1, 181.0], [78.2, 181.0], [78.3, 181.0], [78.4, 181.0], [78.5, 181.0], [78.6, 181.0], [78.7, 181.0], [78.8, 181.0], [78.9, 181.0], [79.0, 183.0], [79.1, 183.0], [79.2, 183.0], [79.3, 183.0], [79.4, 183.0], [79.5, 183.0], [79.6, 183.0], [79.7, 183.0], [79.8, 183.0], [79.9, 183.0], [80.0, 184.0], [80.1, 184.0], [80.2, 184.0], [80.3, 184.0], [80.4, 184.0], [80.5, 184.0], [80.6, 184.0], [80.7, 184.0], [80.8, 184.0], [80.9, 184.0], [81.0, 185.0], [81.1, 185.0], [81.2, 185.0], [81.3, 185.0], [81.4, 185.0], [81.5, 185.0], [81.6, 185.0], [81.7, 185.0], [81.8, 185.0], [81.9, 185.0], [82.0, 188.0], [82.1, 188.0], [82.2, 188.0], [82.3, 188.0], [82.4, 188.0], [82.5, 188.0], [82.6, 188.0], [82.7, 188.0], [82.8, 188.0], [82.9, 188.0], [83.0, 189.0], [83.1, 189.0], [83.2, 189.0], [83.3, 189.0], [83.4, 189.0], [83.5, 189.0], [83.6, 189.0], [83.7, 189.0], [83.8, 189.0], [83.9, 189.0], [84.0, 190.0], [84.1, 190.0], [84.2, 190.0], [84.3, 190.0], [84.4, 190.0], [84.5, 190.0], [84.6, 190.0], [84.7, 190.0], [84.8, 190.0], [84.9, 190.0], [85.0, 190.0], [85.1, 190.0], [85.2, 190.0], [85.3, 190.0], [85.4, 190.0], [85.5, 190.0], [85.6, 190.0], [85.7, 190.0], [85.8, 190.0], [85.9, 190.0], [86.0, 191.0], [86.1, 191.0], [86.2, 191.0], [86.3, 191.0], [86.4, 191.0], [86.5, 191.0], [86.6, 191.0], [86.7, 191.0], [86.8, 191.0], [86.9, 191.0], [87.0, 192.0], [87.1, 192.0], [87.2, 192.0], [87.3, 192.0], [87.4, 192.0], [87.5, 192.0], [87.6, 192.0], [87.7, 192.0], [87.8, 192.0], [87.9, 192.0], [88.0, 193.0], [88.1, 193.0], [88.2, 193.0], [88.3, 193.0], [88.4, 193.0], [88.5, 193.0], [88.6, 193.0], [88.7, 193.0], [88.8, 193.0], [88.9, 193.0], [89.0, 195.0], [89.1, 195.0], [89.2, 195.0], [89.3, 195.0], [89.4, 195.0], [89.5, 195.0], [89.6, 195.0], [89.7, 195.0], [89.8, 195.0], [89.9, 195.0], [90.0, 202.0], [90.1, 202.0], [90.2, 202.0], [90.3, 202.0], [90.4, 202.0], [90.5, 202.0], [90.6, 202.0], [90.7, 202.0], [90.8, 202.0], [90.9, 202.0], [91.0, 207.0], [91.1, 207.0], [91.2, 207.0], [91.3, 207.0], [91.4, 207.0], [91.5, 207.0], [91.6, 207.0], [91.7, 207.0], [91.8, 207.0], [91.9, 207.0], [92.0, 214.0], [92.1, 214.0], [92.2, 214.0], [92.3, 214.0], [92.4, 214.0], [92.5, 214.0], [92.6, 214.0], [92.7, 214.0], [92.8, 214.0], [92.9, 214.0], [93.0, 215.0], [93.1, 215.0], [93.2, 215.0], [93.3, 215.0], [93.4, 215.0], [93.5, 215.0], [93.6, 215.0], [93.7, 215.0], [93.8, 215.0], [93.9, 215.0], [94.0, 215.0], [94.1, 215.0], [94.2, 215.0], [94.3, 215.0], [94.4, 215.0], [94.5, 215.0], [94.6, 215.0], [94.7, 215.0], [94.8, 215.0], [94.9, 215.0], [95.0, 221.0], [95.1, 221.0], [95.2, 221.0], [95.3, 221.0], [95.4, 221.0], [95.5, 221.0], [95.6, 221.0], [95.7, 221.0], [95.8, 221.0], [95.9, 221.0], [96.0, 225.0], [96.1, 225.0], [96.2, 225.0], [96.3, 225.0], [96.4, 225.0], [96.5, 225.0], [96.6, 225.0], [96.7, 225.0], [96.8, 225.0], [96.9, 225.0], [97.0, 226.0], [97.1, 226.0], [97.2, 226.0], [97.3, 226.0], [97.4, 226.0], [97.5, 226.0], [97.6, 226.0], [97.7, 226.0], [97.8, 226.0], [97.9, 226.0], [98.0, 227.0], [98.1, 227.0], [98.2, 227.0], [98.3, 227.0], [98.4, 227.0], [98.5, 227.0], [98.6, 227.0], [98.7, 227.0], [98.8, 227.0], [98.9, 227.0], [99.0, 380.0], [99.1, 380.0], [99.2, 380.0], [99.3, 380.0], [99.4, 380.0], [99.5, 380.0], [99.6, 380.0], [99.7, 380.0], [99.8, 380.0], [99.9, 380.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 25.0], [0.1, 29.0], [0.2, 29.0], [0.3, 30.0], [0.4, 30.0], [0.5, 31.0], [0.6, 31.0], [0.7, 31.0], [0.8, 32.0], [0.9, 32.0], [1.0, 32.0], [1.1, 32.0], [1.2, 33.0], [1.3, 33.0], [1.4, 33.0], [1.5, 33.0], [1.6, 34.0], [1.7, 34.0], [1.8, 34.0], [1.9, 34.0], [2.0, 34.0], [2.1, 34.0], [2.2, 34.0], [2.3, 35.0], [2.4, 35.0], [2.5, 35.0], [2.6, 35.0], [2.7, 35.0], [2.8, 35.0], [2.9, 35.0], [3.0, 35.0], [3.1, 35.0], [3.2, 35.0], [3.3, 35.0], [3.4, 36.0], [3.5, 36.0], [3.6, 36.0], [3.7, 36.0], [3.8, 36.0], [3.9, 36.0], [4.0, 36.0], [4.1, 36.0], [4.2, 36.0], [4.3, 36.0], [4.4, 36.0], [4.5, 36.0], [4.6, 37.0], [4.7, 37.0], [4.8, 37.0], [4.9, 37.0], [5.0, 37.0], [5.1, 37.0], [5.2, 37.0], [5.3, 37.0], [5.4, 37.0], [5.5, 37.0], [5.6, 37.0], [5.7, 37.0], [5.8, 37.0], [5.9, 37.0], [6.0, 38.0], [6.1, 38.0], [6.2, 38.0], [6.3, 38.0], [6.4, 38.0], [6.5, 38.0], [6.6, 38.0], [6.7, 38.0], [6.8, 38.0], [6.9, 38.0], [7.0, 38.0], [7.1, 38.0], [7.2, 38.0], [7.3, 38.0], [7.4, 38.0], [7.5, 38.0], [7.6, 38.0], [7.7, 39.0], [7.8, 39.0], [7.9, 39.0], [8.0, 39.0], [8.1, 39.0], [8.2, 39.0], [8.3, 39.0], [8.4, 39.0], [8.5, 39.0], [8.6, 39.0], [8.7, 39.0], [8.8, 39.0], [8.9, 39.0], [9.0, 39.0], [9.1, 39.0], [9.2, 39.0], [9.3, 39.0], [9.4, 39.0], [9.5, 39.0], [9.6, 39.0], [9.7, 39.0], [9.8, 39.0], [9.9, 40.0], [10.0, 40.0], [10.1, 40.0], [10.2, 40.0], [10.3, 40.0], [10.4, 40.0], [10.5, 40.0], [10.6, 40.0], [10.7, 40.0], [10.8, 40.0], [10.9, 40.0], [11.0, 40.0], [11.1, 40.0], [11.2, 40.0], [11.3, 40.0], [11.4, 40.0], [11.5, 40.0], [11.6, 40.0], [11.7, 40.0], [11.8, 40.0], [11.9, 40.0], [12.0, 40.0], [12.1, 40.0], [12.2, 41.0], [12.3, 41.0], [12.4, 41.0], [12.5, 41.0], [12.6, 41.0], [12.7, 41.0], [12.8, 41.0], [12.9, 41.0], [13.0, 41.0], [13.1, 41.0], [13.2, 41.0], [13.3, 41.0], [13.4, 41.0], [13.5, 41.0], [13.6, 41.0], [13.7, 41.0], [13.8, 41.0], [13.9, 41.0], [14.0, 41.0], [14.1, 41.0], [14.2, 41.0], [14.3, 41.0], [14.4, 41.0], [14.5, 41.0], [14.6, 41.0], [14.7, 41.0], [14.8, 41.0], [14.9, 42.0], [15.0, 42.0], [15.1, 42.0], [15.2, 42.0], [15.3, 42.0], [15.4, 42.0], [15.5, 42.0], [15.6, 42.0], [15.7, 42.0], [15.8, 42.0], [15.9, 42.0], [16.0, 42.0], [16.1, 42.0], [16.2, 42.0], [16.3, 42.0], [16.4, 42.0], [16.5, 42.0], [16.6, 42.0], [16.7, 42.0], [16.8, 42.0], [16.9, 42.0], [17.0, 42.0], [17.1, 42.0], [17.2, 42.0], [17.3, 42.0], [17.4, 42.0], [17.5, 42.0], [17.6, 42.0], [17.7, 42.0], [17.8, 43.0], [17.9, 43.0], [18.0, 43.0], [18.1, 43.0], [18.2, 43.0], [18.3, 43.0], [18.4, 43.0], [18.5, 43.0], [18.6, 43.0], [18.7, 43.0], [18.8, 43.0], [18.9, 43.0], [19.0, 43.0], [19.1, 43.0], [19.2, 43.0], [19.3, 43.0], [19.4, 43.0], [19.5, 43.0], [19.6, 43.0], [19.7, 43.0], [19.8, 43.0], [19.9, 43.0], [20.0, 43.0], [20.1, 43.0], [20.2, 43.0], [20.3, 43.0], [20.4, 43.0], [20.5, 43.0], [20.6, 43.0], [20.7, 43.0], [20.8, 44.0], [20.9, 44.0], [21.0, 44.0], [21.1, 44.0], [21.2, 44.0], [21.3, 44.0], [21.4, 44.0], [21.5, 44.0], [21.6, 44.0], [21.7, 44.0], [21.8, 44.0], [21.9, 44.0], [22.0, 44.0], [22.1, 44.0], [22.2, 44.0], [22.3, 44.0], [22.4, 44.0], [22.5, 44.0], [22.6, 44.0], [22.7, 44.0], [22.8, 44.0], [22.9, 44.0], [23.0, 44.0], [23.1, 44.0], [23.2, 44.0], [23.3, 44.0], [23.4, 44.0], [23.5, 44.0], [23.6, 44.0], [23.7, 44.0], [23.8, 44.0], [23.9, 44.0], [24.0, 44.0], [24.1, 44.0], [24.2, 45.0], [24.3, 45.0], [24.4, 45.0], [24.5, 45.0], [24.6, 45.0], [24.7, 45.0], [24.8, 45.0], [24.9, 45.0], [25.0, 45.0], [25.1, 45.0], [25.2, 45.0], [25.3, 45.0], [25.4, 45.0], [25.5, 45.0], [25.6, 45.0], [25.7, 45.0], [25.8, 45.0], [25.9, 45.0], [26.0, 45.0], [26.1, 45.0], [26.2, 45.0], [26.3, 45.0], [26.4, 45.0], [26.5, 45.0], [26.6, 45.0], [26.7, 45.0], [26.8, 45.0], [26.9, 45.0], [27.0, 45.0], [27.1, 45.0], [27.2, 45.0], [27.3, 45.0], [27.4, 45.0], [27.5, 45.0], [27.6, 46.0], [27.7, 46.0], [27.8, 46.0], [27.9, 46.0], [28.0, 46.0], [28.1, 46.0], [28.2, 46.0], [28.3, 46.0], [28.4, 46.0], [28.5, 46.0], [28.6, 46.0], [28.7, 46.0], [28.8, 46.0], [28.9, 46.0], [29.0, 46.0], [29.1, 46.0], [29.2, 46.0], [29.3, 46.0], [29.4, 46.0], [29.5, 46.0], [29.6, 46.0], [29.7, 46.0], [29.8, 46.0], [29.9, 46.0], [30.0, 46.0], [30.1, 46.0], [30.2, 46.0], [30.3, 46.0], [30.4, 46.0], [30.5, 46.0], [30.6, 47.0], [30.7, 47.0], [30.8, 47.0], [30.9, 47.0], [31.0, 47.0], [31.1, 47.0], [31.2, 47.0], [31.3, 47.0], [31.4, 47.0], [31.5, 47.0], [31.6, 47.0], [31.7, 47.0], [31.8, 47.0], [31.9, 47.0], [32.0, 47.0], [32.1, 47.0], [32.2, 47.0], [32.3, 47.0], [32.4, 47.0], [32.5, 47.0], [32.6, 47.0], [32.7, 47.0], [32.8, 47.0], [32.9, 47.0], [33.0, 47.0], [33.1, 47.0], [33.2, 47.0], [33.3, 47.0], [33.4, 48.0], [33.5, 48.0], [33.6, 48.0], [33.7, 48.0], [33.8, 48.0], [33.9, 48.0], [34.0, 48.0], [34.1, 48.0], [34.2, 48.0], [34.3, 48.0], [34.4, 48.0], [34.5, 48.0], [34.6, 48.0], [34.7, 48.0], [34.8, 48.0], [34.9, 48.0], [35.0, 48.0], [35.1, 48.0], [35.2, 48.0], [35.3, 48.0], [35.4, 48.0], [35.5, 48.0], [35.6, 48.0], [35.7, 48.0], [35.8, 48.0], [35.9, 48.0], [36.0, 48.0], [36.1, 48.0], [36.2, 48.0], [36.3, 48.0], [36.4, 49.0], [36.5, 49.0], [36.6, 49.0], [36.7, 49.0], [36.8, 49.0], [36.9, 49.0], [37.0, 49.0], [37.1, 49.0], [37.2, 49.0], [37.3, 49.0], [37.4, 49.0], [37.5, 49.0], [37.6, 49.0], [37.7, 49.0], [37.8, 49.0], [37.9, 49.0], [38.0, 49.0], [38.1, 49.0], [38.2, 49.0], [38.3, 49.0], [38.4, 49.0], [38.5, 49.0], [38.6, 49.0], [38.7, 49.0], [38.8, 49.0], [38.9, 49.0], [39.0, 50.0], [39.1, 50.0], [39.2, 50.0], [39.3, 50.0], [39.4, 50.0], [39.5, 50.0], [39.6, 50.0], [39.7, 50.0], [39.8, 50.0], [39.9, 50.0], [40.0, 50.0], [40.1, 50.0], [40.2, 50.0], [40.3, 50.0], [40.4, 50.0], [40.5, 50.0], [40.6, 50.0], [40.7, 50.0], [40.8, 50.0], [40.9, 50.0], [41.0, 50.0], [41.1, 50.0], [41.2, 50.0], [41.3, 51.0], [41.4, 51.0], [41.5, 51.0], [41.6, 51.0], [41.7, 51.0], [41.8, 51.0], [41.9, 51.0], [42.0, 51.0], [42.1, 51.0], [42.2, 51.0], [42.3, 51.0], [42.4, 51.0], [42.5, 51.0], [42.6, 51.0], [42.7, 51.0], [42.8, 51.0], [42.9, 51.0], [43.0, 51.0], [43.1, 51.0], [43.2, 51.0], [43.3, 51.0], [43.4, 51.0], [43.5, 51.0], [43.6, 52.0], [43.7, 52.0], [43.8, 52.0], [43.9, 52.0], [44.0, 52.0], [44.1, 52.0], [44.2, 52.0], [44.3, 52.0], [44.4, 52.0], [44.5, 52.0], [44.6, 52.0], [44.7, 52.0], [44.8, 52.0], [44.9, 52.0], [45.0, 52.0], [45.1, 52.0], [45.2, 52.0], [45.3, 52.0], [45.4, 52.0], [45.5, 53.0], [45.6, 53.0], [45.7, 53.0], [45.8, 53.0], [45.9, 53.0], [46.0, 53.0], [46.1, 53.0], [46.2, 53.0], [46.3, 53.0], [46.4, 53.0], [46.5, 53.0], [46.6, 53.0], [46.7, 53.0], [46.8, 53.0], [46.9, 53.0], [47.0, 53.0], [47.1, 54.0], [47.2, 54.0], [47.3, 54.0], [47.4, 54.0], [47.5, 54.0], [47.6, 54.0], [47.7, 54.0], [47.8, 54.0], [47.9, 54.0], [48.0, 54.0], [48.1, 54.0], [48.2, 54.0], [48.3, 54.0], [48.4, 54.0], [48.5, 54.0], [48.6, 54.0], [48.7, 54.0], [48.8, 55.0], [48.9, 55.0], [49.0, 55.0], [49.1, 55.0], [49.2, 55.0], [49.3, 55.0], [49.4, 55.0], [49.5, 55.0], [49.6, 55.0], [49.7, 55.0], [49.8, 55.0], [49.9, 55.0], [50.0, 55.0], [50.1, 55.0], [50.2, 56.0], [50.3, 56.0], [50.4, 56.0], [50.5, 56.0], [50.6, 56.0], [50.7, 56.0], [50.8, 56.0], [50.9, 56.0], [51.0, 56.0], [51.1, 56.0], [51.2, 56.0], [51.3, 56.0], [51.4, 56.0], [51.5, 56.0], [51.6, 57.0], [51.7, 57.0], [51.8, 57.0], [51.9, 57.0], [52.0, 57.0], [52.1, 57.0], [52.2, 57.0], [52.3, 57.0], [52.4, 57.0], [52.5, 57.0], [52.6, 57.0], [52.7, 58.0], [52.8, 58.0], [52.9, 58.0], [53.0, 58.0], [53.1, 58.0], [53.2, 58.0], [53.3, 58.0], [53.4, 58.0], [53.5, 58.0], [53.6, 59.0], [53.7, 59.0], [53.8, 59.0], [53.9, 59.0], [54.0, 59.0], [54.1, 59.0], [54.2, 59.0], [54.3, 59.0], [54.4, 59.0], [54.5, 59.0], [54.6, 60.0], [54.7, 60.0], [54.8, 60.0], [54.9, 60.0], [55.0, 60.0], [55.1, 60.0], [55.2, 60.0], [55.3, 61.0], [55.4, 61.0], [55.5, 61.0], [55.6, 61.0], [55.7, 61.0], [55.8, 61.0], [55.9, 61.0], [56.0, 61.0], [56.1, 62.0], [56.2, 62.0], [56.3, 62.0], [56.4, 62.0], [56.5, 62.0], [56.6, 62.0], [56.7, 63.0], [56.8, 63.0], [56.9, 63.0], [57.0, 63.0], [57.1, 63.0], [57.2, 63.0], [57.3, 64.0], [57.4, 64.0], [57.5, 64.0], [57.6, 64.0], [57.7, 65.0], [57.8, 65.0], [57.9, 65.0], [58.0, 66.0], [58.1, 66.0], [58.2, 66.0], [58.3, 66.0], [58.4, 66.0], [58.5, 67.0], [58.6, 67.0], [58.7, 68.0], [58.8, 68.0], [58.9, 69.0], [59.0, 69.0], [59.1, 69.0], [59.2, 70.0], [59.3, 70.0], [59.4, 71.0], [59.5, 71.0], [59.6, 72.0], [59.7, 72.0], [59.8, 73.0], [59.9, 73.0], [60.0, 74.0], [60.1, 75.0], [60.2, 77.0], [60.3, 78.0], [60.4, 80.0], [60.5, 82.0], [60.6, 83.0], [60.7, 85.0], [60.8, 88.0], [60.9, 90.0], [61.0, 94.0], [61.1, 98.0], [61.2, 101.0], [61.3, 106.0], [61.4, 112.0], [61.5, 115.0], [61.6, 123.0], [61.7, 134.0], [61.8, 139.0], [61.9, 145.0], [62.0, 156.0], [62.1, 165.0], [62.2, 172.0], [62.3, 183.0], [62.4, 195.0], [62.5, 207.0], [62.6, 218.0], [62.7, 223.0], [62.8, 230.0], [62.9, 235.0], [63.0, 242.0], [63.1, 248.0], [63.2, 259.0], [63.3, 265.0], [63.4, 273.0], [63.5, 283.0], [63.6, 290.0], [63.7, 297.0], [63.8, 302.0], [63.9, 306.0], [64.0, 316.0], [64.1, 320.0], [64.2, 326.0], [64.3, 330.0], [64.4, 335.0], [64.5, 338.0], [64.6, 342.0], [64.7, 348.0], [64.8, 351.0], [64.9, 358.0], [65.0, 364.0], [65.1, 369.0], [65.2, 376.0], [65.3, 379.0], [65.4, 383.0], [65.5, 388.0], [65.6, 391.0], [65.7, 395.0], [65.8, 399.0], [65.9, 402.0], [66.0, 407.0], [66.1, 412.0], [66.2, 417.0], [66.3, 419.0], [66.4, 422.0], [66.5, 424.0], [66.6, 428.0], [66.7, 431.0], [66.8, 436.0], [66.9, 438.0], [67.0, 440.0], [67.1, 443.0], [67.2, 446.0], [67.3, 449.0], [67.4, 453.0], [67.5, 458.0], [67.6, 463.0], [67.7, 466.0], [67.8, 469.0], [67.9, 472.0], [68.0, 477.0], [68.1, 481.0], [68.2, 483.0], [68.3, 486.0], [68.4, 488.0], [68.5, 492.0], [68.6, 496.0], [68.7, 499.0], [68.8, 503.0], [68.9, 505.0], [69.0, 508.0], [69.1, 509.0], [69.2, 512.0], [69.3, 515.0], [69.4, 517.0], [69.5, 521.0], [69.6, 525.0], [69.7, 528.0], [69.8, 529.0], [69.9, 531.0], [70.0, 533.0], [70.1, 535.0], [70.2, 537.0], [70.3, 540.0], [70.4, 543.0], [70.5, 545.0], [70.6, 547.0], [70.7, 550.0], [70.8, 553.0], [70.9, 556.0], [71.0, 559.0], [71.1, 562.0], [71.2, 566.0], [71.3, 569.0], [71.4, 571.0], [71.5, 573.0], [71.6, 575.0], [71.7, 576.0], [71.8, 579.0], [71.9, 581.0], [72.0, 585.0], [72.1, 587.0], [72.2, 591.0], [72.3, 595.0], [72.4, 598.0], [72.5, 600.0], [72.6, 605.0], [72.7, 608.0], [72.8, 610.0], [72.9, 614.0], [73.0, 617.0], [73.1, 620.0], [73.2, 623.0], [73.3, 625.0], [73.4, 626.0], [73.5, 630.0], [73.6, 633.0], [73.7, 635.0], [73.8, 637.0], [73.9, 640.0], [74.0, 643.0], [74.1, 645.0], [74.2, 648.0], [74.3, 649.0], [74.4, 652.0], [74.5, 653.0], [74.6, 655.0], [74.7, 657.0], [74.8, 660.0], [74.9, 664.0], [75.0, 666.0], [75.1, 669.0], [75.2, 671.0], [75.3, 673.0], [75.4, 677.0], [75.5, 679.0], [75.6, 683.0], [75.7, 685.0], [75.8, 687.0], [75.9, 689.0], [76.0, 691.0], [76.1, 693.0], [76.2, 696.0], [76.3, 698.0], [76.4, 700.0], [76.5, 702.0], [76.6, 707.0], [76.7, 710.0], [76.8, 712.0], [76.9, 714.0], [77.0, 716.0], [77.1, 718.0], [77.2, 720.0], [77.3, 723.0], [77.4, 726.0], [77.5, 728.0], [77.6, 730.0], [77.7, 731.0], [77.8, 733.0], [77.9, 736.0], [78.0, 738.0], [78.1, 739.0], [78.2, 744.0], [78.3, 746.0], [78.4, 748.0], [78.5, 752.0], [78.6, 755.0], [78.7, 758.0], [78.8, 761.0], [78.9, 763.0], [79.0, 764.0], [79.1, 766.0], [79.2, 769.0], [79.3, 772.0], [79.4, 775.0], [79.5, 778.0], [79.6, 780.0], [79.7, 782.0], [79.8, 783.0], [79.9, 786.0], [80.0, 792.0], [80.1, 795.0], [80.2, 797.0], [80.3, 801.0], [80.4, 803.0], [80.5, 807.0], [80.6, 810.0], [80.7, 814.0], [80.8, 815.0], [80.9, 819.0], [81.0, 821.0], [81.1, 824.0], [81.2, 826.0], [81.3, 828.0], [81.4, 830.0], [81.5, 833.0], [81.6, 835.0], [81.7, 836.0], [81.8, 839.0], [81.9, 842.0], [82.0, 845.0], [82.1, 848.0], [82.2, 851.0], [82.3, 854.0], [82.4, 858.0], [82.5, 861.0], [82.6, 863.0], [82.7, 867.0], [82.8, 868.0], [82.9, 871.0], [83.0, 873.0], [83.1, 876.0], [83.2, 878.0], [83.3, 881.0], [83.4, 884.0], [83.5, 887.0], [83.6, 890.0], [83.7, 893.0], [83.8, 896.0], [83.9, 900.0], [84.0, 905.0], [84.1, 908.0], [84.2, 912.0], [84.3, 914.0], [84.4, 918.0], [84.5, 921.0], [84.6, 926.0], [84.7, 927.0], [84.8, 931.0], [84.9, 937.0], [85.0, 942.0], [85.1, 944.0], [85.2, 947.0], [85.3, 949.0], [85.4, 951.0], [85.5, 953.0], [85.6, 955.0], [85.7, 959.0], [85.8, 961.0], [85.9, 964.0], [86.0, 967.0], [86.1, 970.0], [86.2, 973.0], [86.3, 977.0], [86.4, 980.0], [86.5, 982.0], [86.6, 984.0], [86.7, 989.0], [86.8, 991.0], [86.9, 994.0], [87.0, 996.0], [87.1, 1000.0], [87.2, 1004.0], [87.3, 1007.0], [87.4, 1011.0], [87.5, 1014.0], [87.6, 1017.0], [87.7, 1020.0], [87.8, 1023.0], [87.9, 1028.0], [88.0, 1031.0], [88.1, 1034.0], [88.2, 1038.0], [88.3, 1042.0], [88.4, 1045.0], [88.5, 1047.0], [88.6, 1051.0], [88.7, 1054.0], [88.8, 1058.0], [88.9, 1061.0], [89.0, 1064.0], [89.1, 1069.0], [89.2, 1075.0], [89.3, 1078.0], [89.4, 1083.0], [89.5, 1085.0], [89.6, 1089.0], [89.7, 1092.0], [89.8, 1096.0], [89.9, 1100.0], [90.0, 1103.0], [90.1, 1107.0], [90.2, 1111.0], [90.3, 1115.0], [90.4, 1119.0], [90.5, 1124.0], [90.6, 1127.0], [90.7, 1130.0], [90.8, 1134.0], [90.9, 1138.0], [91.0, 1141.0], [91.1, 1146.0], [91.2, 1152.0], [91.3, 1155.0], [91.4, 1160.0], [91.5, 1164.0], [91.6, 1169.0], [91.7, 1172.0], [91.8, 1175.0], [91.9, 1180.0], [92.0, 1183.0], [92.1, 1188.0], [92.2, 1192.0], [92.3, 1196.0], [92.4, 1199.0], [92.5, 1202.0], [92.6, 1207.0], [92.7, 1211.0], [92.8, 1217.0], [92.9, 1220.0], [93.0, 1224.0], [93.1, 1228.0], [93.2, 1231.0], [93.3, 1235.0], [93.4, 1240.0], [93.5, 1247.0], [93.6, 1251.0], [93.7, 1255.0], [93.8, 1259.0], [93.9, 1262.0], [94.0, 1268.0], [94.1, 1278.0], [94.2, 1284.0], [94.3, 1293.0], [94.4, 1303.0], [94.5, 1309.0], [94.6, 1316.0], [94.7, 1322.0], [94.8, 1328.0], [94.9, 1333.0], [95.0, 1337.0], [95.1, 1343.0], [95.2, 1353.0], [95.3, 1356.0], [95.4, 1363.0], [95.5, 1371.0], [95.6, 1377.0], [95.7, 1382.0], [95.8, 1389.0], [95.9, 1399.0], [96.0, 1407.0], [96.1, 1416.0], [96.2, 1423.0], [96.3, 1431.0], [96.4, 1437.0], [96.5, 1443.0], [96.6, 1451.0], [96.7, 1466.0], [96.8, 1474.0], [96.9, 1484.0], [97.0, 1495.0], [97.1, 1516.0], [97.2, 1529.0], [97.3, 1543.0], [97.4, 1550.0], [97.5, 1557.0], [97.6, 1566.0], [97.7, 1571.0], [97.8, 1580.0], [97.9, 1590.0], [98.0, 1600.0], [98.1, 1616.0], [98.2, 1630.0], [98.3, 1646.0], [98.4, 1661.0], [98.5, 1679.0], [98.6, 1699.0], [98.7, 1722.0], [98.8, 1749.0], [98.9, 1754.0], [99.0, 1785.0], [99.1, 1826.0], [99.2, 1844.0], [99.3, 1859.0], [99.4, 1888.0], [99.5, 1929.0], [99.6, 1963.0], [99.7, 2040.0], [99.8, 2094.0], [99.9, 2162.0], [100.0, 2614.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 6159.0, "series": [{"data": [[0.0, 6159.0], [600.0, 370.0], [700.0, 403.0], [800.0, 357.0], [900.0, 325.0], [1000.0, 313.0], [1100.0, 241.0], [1200.0, 186.0], [1300.0, 138.0], [1400.0, 119.0], [1500.0, 81.0], [100.0, 132.0], [1600.0, 57.0], [1700.0, 48.0], [1800.0, 33.0], [1900.0, 15.0], [2000.0, 9.0], [2100.0, 13.0], [2200.0, 4.0], [2300.0, 2.0], [2400.0, 2.0], [2500.0, 1.0], [2700.0, 1.0], [200.0, 138.0], [300.0, 218.0], [400.0, 269.0], [500.0, 366.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[300.0, 1.0], [200.0, 9.0], [100.0, 90.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 6117.0], [600.0, 387.0], [700.0, 393.0], [800.0, 363.0], [900.0, 318.0], [1000.0, 281.0], [1100.0, 252.0], [1200.0, 195.0], [1300.0, 157.0], [1400.0, 110.0], [1500.0, 96.0], [100.0, 126.0], [1600.0, 62.0], [1700.0, 42.0], [1800.0, 40.0], [1900.0, 24.0], [2000.0, 15.0], [2100.0, 9.0], [2300.0, 5.0], [2200.0, 1.0], [2400.0, 2.0], [2500.0, 1.0], [2600.0, 1.0], [200.0, 132.0], [300.0, 209.0], [400.0, 287.0], [500.0, 375.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 562.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 13889.0, "series": [{"data": [[0.0, 13889.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5649.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 562.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 39.953775038520824, "minX": 1.5854214E12, "maxY": 100.0, "series": [{"data": [[1.58542146E12, 92.91427432216908], [1.58542188E12, 55.48738738738747], [1.58542164E12, 100.0], [1.58542152E12, 100.0], [1.58542182E12, 98.31753167143435], [1.5854217E12, 100.0], [1.5854214E12, 39.953775038520824], [1.58542158E12, 100.0], [1.58542176E12, 100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542188E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 35.0, "minX": 1.0, "maxY": 417.73657440264833, "series": [{"data": [[2.0, 45.0], [5.0, 69.0], [6.0, 57.333333333333336], [7.0, 61.0], [8.0, 47.0], [9.0, 49.285714285714285], [10.0, 288.3333333333333], [11.0, 51.2], [12.0, 52.16666666666667], [13.0, 53.4], [14.0, 50.333333333333336], [15.0, 39.5], [16.0, 41.75], [17.0, 47.2], [18.0, 45.63636363636364], [19.0, 44.0], [20.0, 54.666666666666664], [21.0, 51.6], [22.0, 49.833333333333336], [23.0, 50.333333333333336], [24.0, 48.0], [25.0, 46.92857142857142], [26.0, 51.25], [27.0, 45.77777777777778], [28.0, 50.0], [29.0, 49.8], [30.0, 47.86363636363636], [31.0, 45.090909090909086], [32.0, 45.25], [33.0, 45.33333333333332], [34.0, 46.25], [35.0, 49.41176470588235], [36.0, 41.57142857142857], [37.0, 43.50000000000001], [38.0, 50.22222222222222], [39.0, 45.57142857142857], [40.0, 48.12500000000001], [41.0, 51.090909090909086], [42.0, 45.27272727272727], [43.0, 43.22222222222222], [44.0, 45.04166666666667], [45.0, 49.81818181818181], [46.0, 46.25], [47.0, 42.22222222222222], [48.0, 47.74285714285713], [49.0, 45.17857142857142], [50.0, 46.45454545454547], [51.0, 47.14285714285714], [52.0, 42.714285714285715], [53.0, 46.53333333333333], [54.0, 49.714285714285715], [55.0, 45.22222222222222], [56.0, 42.76923076923077], [57.0, 43.0], [58.0, 44.84615384615385], [59.0, 45.04545454545455], [60.0, 45.91489361702128], [61.0, 80.55172413793103], [62.0, 48.125], [63.0, 46.5], [64.0, 47.50000000000001], [65.0, 41.85714285714286], [66.0, 44.333333333333336], [67.0, 42.4375], [68.0, 42.46153846153847], [69.0, 46.99999999999999], [70.0, 104.80952380952381], [71.0, 393.9722222222222], [72.0, 73.1], [73.0, 48.36363636363636], [74.0, 44.11764705882352], [75.0, 47.54545454545455], [76.0, 44.36363636363635], [77.0, 48.629629629629626], [78.0, 68.77777777777777], [79.0, 60.7906976744186], [80.0, 46.94520547945205], [81.0, 43.78947368421053], [82.0, 41.81249999999999], [83.0, 52.22222222222222], [84.0, 97.94117647058822], [85.0, 57.812500000000014], [86.0, 46.03571428571428], [87.0, 45.555555555555564], [88.0, 46.32], [89.0, 46.75], [90.0, 47.11627906976744], [91.0, 51.2127659574468], [92.0, 49.27272727272727], [93.0, 46.769230769230774], [94.0, 43.81249999999999], [95.0, 52.17647058823528], [96.0, 52.47058823529412], [97.0, 245.7894736842105], [98.0, 312.6666666666667], [99.0, 154.25], [100.0, 409.1860437610884]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[94.73299999999996, 355.97750000000235]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 214.0], [3.0, 202.0], [4.0, 165.0], [5.0, 169.0], [6.0, 191.0], [7.0, 158.0], [8.0, 166.0], [9.0, 166.0], [10.0, 161.0], [11.0, 172.0], [12.0, 152.0], [13.0, 167.0], [14.0, 166.0], [15.0, 163.0], [16.0, 157.0], [17.0, 164.0], [18.0, 169.0], [19.0, 170.0], [20.0, 155.0], [21.0, 215.0], [22.0, 180.0], [23.0, 158.0], [24.0, 143.0], [25.0, 179.0], [26.0, 190.0], [27.0, 161.0], [28.0, 179.0], [29.0, 169.0], [30.0, 170.0], [31.0, 164.0], [32.0, 226.0], [33.0, 168.0], [34.0, 172.0], [35.0, 177.0], [36.0, 168.0], [37.0, 181.0], [38.0, 164.0], [39.0, 171.0], [40.0, 163.0], [41.0, 174.0], [42.0, 163.0], [43.0, 185.0], [44.0, 170.0], [45.0, 178.0], [46.0, 174.0], [47.0, 168.0], [48.0, 164.0], [49.0, 179.0], [50.0, 173.0], [51.0, 184.0], [52.0, 153.0], [53.0, 155.0], [54.0, 161.0], [55.0, 189.0], [56.0, 162.0], [57.0, 172.0], [58.0, 161.0], [59.0, 162.0], [60.0, 188.0], [61.0, 164.0], [62.0, 179.0], [63.0, 168.0], [64.0, 167.0], [65.0, 166.0], [66.0, 171.0], [67.0, 160.0], [68.0, 164.0], [69.0, 160.0], [70.0, 172.0], [71.0, 170.0], [72.0, 171.0], [73.0, 158.0], [74.0, 167.0], [75.0, 164.0], [76.0, 181.0], [77.0, 178.0], [78.0, 176.0], [79.0, 176.0], [80.0, 221.0], [81.0, 166.0], [82.0, 160.0], [83.0, 153.0], [84.0, 195.0], [85.0, 227.0], [86.0, 192.0], [87.0, 215.0], [88.0, 165.0], [89.0, 154.0], [90.0, 180.0], [91.0, 193.0], [92.0, 154.0], [93.0, 183.0], [94.0, 177.0], [95.0, 168.0], [96.0, 173.0], [97.0, 164.0], [98.0, 207.0], [99.0, 190.0], [100.0, 380.0], [1.0, 225.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[50.5, 175.93999999999994]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[3.0, 38.0], [4.0, 56.5], [5.0, 53.5], [6.0, 37.0], [7.0, 35.0], [8.0, 37.0], [9.0, 52.5], [10.0, 50.333333333333336], [11.0, 44.5], [12.0, 56.5], [13.0, 53.55555555555556], [14.0, 39.0], [15.0, 48.666666666666664], [16.0, 49.0], [17.0, 50.0], [18.0, 47.5], [19.0, 48.666666666666664], [20.0, 49.666666666666664], [21.0, 50.0], [22.0, 43.2], [23.0, 50.4], [24.0, 52.75], [25.0, 51.0], [26.0, 48.352941176470594], [27.0, 46.375], [28.0, 46.14285714285714], [29.0, 46.5], [30.0, 45.81818181818182], [31.0, 44.333333333333336], [32.0, 42.45454545454545], [33.0, 42.92857142857143], [34.0, 49.333333333333336], [35.0, 49.0], [36.0, 48.5], [37.0, 43.833333333333336], [38.0, 51.33333333333333], [39.0, 44.23076923076923], [40.0, 49.18181818181818], [41.0, 48.800000000000004], [42.0, 48.81818181818181], [43.0, 43.16666666666667], [44.0, 48.17391304347825], [45.0, 54.285714285714285], [46.0, 45.230769230769226], [47.0, 39.66666666666667], [48.0, 46.57446808510638], [49.0, 44.294117647058826], [50.0, 45.18181818181818], [51.0, 47.17647058823529], [52.0, 44.6], [53.0, 44.91666666666667], [54.0, 46.400000000000006], [55.0, 45.214285714285715], [56.0, 39.7], [57.0, 44.55555555555556], [58.0, 47.050000000000004], [59.0, 47.10526315789473], [60.0, 46.399999999999984], [61.0, 99.15384615384616], [62.0, 47.625], [63.0, 40.93333333333334], [64.0, 45.85000000000001], [65.0, 42.666666666666664], [66.0, 46.35], [67.0, 43.07142857142858], [68.0, 46.31578947368421], [69.0, 45.72727272727272], [70.0, 72.46153846153845], [71.0, 296.2285714285714], [72.0, 70.76923076923076], [73.0, 50.800000000000004], [74.0, 45.56250000000001], [75.0, 42.36363636363636], [76.0, 43.5], [77.0, 45.3], [78.0, 52.77777777777778], [79.0, 46.33333333333334], [80.0, 48.92647058823528], [81.0, 48.888888888888886], [82.0, 43.18181818181818], [83.0, 51.0], [84.0, 82.82608695652173], [85.0, 47.357142857142854], [86.0, 47.806451612903224], [87.0, 47.00000000000001], [88.0, 48.0], [89.0, 49.05882352941177], [90.0, 46.18750000000001], [91.0, 49.500000000000014], [92.0, 49.0], [93.0, 51.88888888888889], [94.0, 44.84848484848485], [95.0, 48.58823529411766], [96.0, 52.76470588235294], [97.0, 194.34482758620692], [98.0, 285.0], [99.0, 165.8181818181818], [100.0, 417.73657440264833]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[94.73530000000014, 362.70940000000013]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4435.666666666667, "minX": 1.5854214E12, "maxY": 341304.98333333334, "series": [{"data": [[1.58542146E12, 293458.56666666665], [1.58542188E12, 131527.53333333333], [1.58542164E12, 305392.5333333333], [1.58542152E12, 298760.0], [1.58542182E12, 289992.35], [1.5854217E12, 330396.31666666665], [1.5854214E12, 71025.58333333333], [1.58542158E12, 310493.8], [1.58542176E12, 341304.98333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58542146E12, 17801.233333333334], [1.58542188E12, 7937.066666666667], [1.58542164E12, 18425.666666666668], [1.58542152E12, 18025.133333333335], [1.58542182E12, 17495.966666666667], [1.5854217E12, 19934.366666666665], [1.5854214E12, 4435.666666666667], [1.58542158E12, 18732.933333333334], [1.58542176E12, 20591.966666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542188E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 49.499999999999986, "minX": 1.5854214E12, "maxY": 538.9673735725944, "series": [{"data": [[1.58542146E12, 365.7681632653065], [1.58542188E12, 74.63111888111894], [1.58542164E12, 462.17105263157936], [1.58542152E12, 486.5103174603168], [1.58542182E12, 536.3701883701888], [1.5854217E12, 262.1050750536098], [1.5854214E12, 49.499999999999986], [1.58542158E12, 399.6345565749239], [1.58542176E12, 208.83877692842236]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58542146E12, 181.15384615384613], [1.5854214E12, 172.6065573770492]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58542146E12, 361.6672025723468], [1.58542188E12, 63.96468401486986], [1.58542164E12, 477.7097276264589], [1.58542152E12, 492.3259318001581], [1.58542182E12, 538.9673735725944], [1.5854217E12, 273.6688264938804], [1.5854214E12, 51.236842105263136], [1.58542158E12, 402.0442073170736], [1.58542176E12, 224.9333795975014]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542188E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 49.30633802816899, "minX": 1.5854214E12, "maxY": 538.7553017944534, "series": [{"data": [[1.58542146E12, 365.5608163265308], [1.58542188E12, 74.39510489510494], [1.58542164E12, 461.9760061919504], [1.58542152E12, 486.3095238095236], [1.58542182E12, 536.1654381654386], [1.5854217E12, 261.7991422444606], [1.5854214E12, 49.30633802816899], [1.58542158E12, 399.4113149847097], [1.58542176E12, 208.6025017373175]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58542146E12, 180.74358974358972], [1.5854214E12, 172.1639344262295]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58542146E12, 361.4549839228296], [1.58542188E12, 63.73977695167291], [1.58542164E12, 477.5058365758752], [1.58542152E12, 492.09912767644687], [1.58542182E12, 538.7553017944534], [1.5854217E12, 273.39236861051154], [1.5854214E12, 51.019736842105246], [1.58542158E12, 401.8163109756094], [1.58542176E12, 224.72519083969456]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542188E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.005244755244755239, "minX": 1.5854214E12, "maxY": 1.39344262295082, "series": [{"data": [[1.58542146E12, 0.19183673469387785], [1.58542188E12, 0.005244755244755239], [1.58542164E12, 0.2058823529411762], [1.58542152E12, 0.20079365079365075], [1.58542182E12, 0.2006552006552009], [1.5854217E12, 0.09435310936383129], [1.5854214E12, 0.24647887323943654], [1.58542158E12, 0.16131498470948036], [1.58542176E12, 0.07296733842946487]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58542146E12, 0.8717948717948716], [1.5854214E12, 1.39344262295082]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58542146E12, 0.7331189710610921], [1.58542188E12, 0.6338289962825283], [1.58542164E12, 0.6871595330739305], [1.58542152E12, 0.6796193497224435], [1.58542182E12, 0.5954323001631319], [1.5854217E12, 0.9100071994240464], [1.5854214E12, 0.8585526315789472], [1.58542158E12, 0.8307926829268292], [1.58542176E12, 0.5940319222761968]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542188E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.5854214E12, "maxY": 2755.0, "series": [{"data": [[1.58542146E12, 2544.0], [1.58542188E12, 747.0], [1.58542164E12, 2132.0], [1.58542152E12, 2455.0], [1.58542182E12, 2557.0], [1.5854217E12, 2755.0], [1.5854214E12, 349.0], [1.58542158E12, 2152.0], [1.58542176E12, 2440.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58542146E12, 26.0], [1.58542188E12, 28.0], [1.58542164E12, 26.0], [1.58542152E12, 27.0], [1.58542182E12, 26.0], [1.5854217E12, 27.0], [1.5854214E12, 30.0], [1.58542158E12, 25.0], [1.58542176E12, 26.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58542146E12, 1183.0], [1.58542188E12, 63.0], [1.58542164E12, 1170.0], [1.58542152E12, 1151.2000000000007], [1.58542182E12, 1255.0], [1.5854217E12, 994.0], [1.5854214E12, 158.0], [1.58542158E12, 1045.9], [1.58542176E12, 864.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58542146E12, 1884.2799999999988], [1.58542188E12, 620.900000000001], [1.58542164E12, 1729.599999999994], [1.58542152E12, 1749.7800000000002], [1.58542182E12, 1828.6399999999999], [1.5854217E12, 1866.530000000003], [1.5854214E12, 235.0], [1.58542158E12, 1734.79], [1.58542176E12, 1741.9000000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58542146E12, 1433.5499999999997], [1.58542188E12, 232.60000000000036], [1.58542164E12, 1354.1], [1.58542152E12, 1384.6000000000004], [1.58542182E12, 1459.6], [1.5854217E12, 1299.849999999998], [1.5854214E12, 172.0], [1.58542158E12, 1289.9499999999998], [1.58542176E12, 1173.8999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542188E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 45.0, "minX": 1.0, "maxY": 904.0, "series": [{"data": [[2.0, 66.5], [3.0, 59.0], [4.0, 51.5], [5.0, 52.0], [6.0, 55.5], [7.0, 53.0], [8.0, 53.0], [9.0, 49.0], [10.0, 47.0], [11.0, 48.0], [12.0, 49.5], [13.0, 47.5], [14.0, 53.0], [15.0, 51.0], [16.0, 156.0], [17.0, 371.0], [18.0, 48.5], [19.0, 145.0], [20.0, 47.5], [22.0, 48.0], [23.0, 85.5], [24.0, 56.5], [25.0, 53.0], [26.0, 768.5], [27.0, 678.0], [28.0, 904.0], [29.0, 560.0], [30.0, 171.5], [31.0, 779.0], [33.0, 693.0], [32.0, 647.0], [35.0, 436.5], [34.0, 596.0], [36.0, 777.0], [37.0, 731.5], [39.0, 597.0], [38.0, 838.0], [41.0, 167.0], [40.0, 774.0], [42.0, 112.5], [43.0, 650.0], [44.0, 501.0], [45.0, 57.0], [46.0, 50.0], [47.0, 56.0], [48.0, 53.0], [49.0, 50.0], [50.0, 49.0], [51.0, 46.0], [53.0, 51.0], [52.0, 48.0], [54.0, 49.0], [55.0, 47.0], [57.0, 48.0], [56.0, 47.0], [58.0, 50.0], [59.0, 45.0], [61.0, 51.0], [60.0, 46.0], [63.0, 50.0], [62.0, 50.0], [68.0, 54.5], [72.0, 87.0], [1.0, 45.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 72.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 44.0, "minX": 1.0, "maxY": 904.0, "series": [{"data": [[2.0, 66.0], [3.0, 59.0], [4.0, 51.5], [5.0, 51.5], [6.0, 55.0], [7.0, 52.0], [8.0, 53.0], [9.0, 49.0], [10.0, 47.0], [11.0, 48.0], [12.0, 49.5], [13.0, 47.0], [14.0, 53.0], [15.0, 51.0], [16.0, 155.5], [17.0, 371.0], [18.0, 48.5], [19.0, 145.0], [20.0, 47.5], [22.0, 48.0], [23.0, 85.0], [24.0, 56.0], [25.0, 53.0], [26.0, 768.5], [27.0, 677.0], [28.0, 904.0], [29.0, 560.0], [30.0, 171.5], [31.0, 779.0], [33.0, 693.0], [32.0, 646.0], [35.0, 436.5], [34.0, 596.0], [36.0, 776.5], [37.0, 731.5], [39.0, 596.5], [38.0, 838.0], [41.0, 166.0], [40.0, 773.5], [42.0, 112.0], [43.0, 650.0], [44.0, 501.0], [45.0, 56.5], [46.0, 50.0], [47.0, 55.0], [48.0, 53.0], [49.0, 49.0], [50.0, 49.0], [51.0, 46.0], [53.0, 50.0], [52.0, 48.0], [54.0, 49.0], [55.0, 46.0], [57.0, 48.0], [56.0, 47.0], [58.0, 49.0], [59.0, 45.0], [61.0, 51.0], [60.0, 46.0], [63.0, 50.0], [62.0, 50.0], [68.0, 54.5], [72.0, 86.5], [1.0, 44.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 72.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.866666666666667, "minX": 1.5854214E12, "maxY": 48.016666666666666, "series": [{"data": [[1.58542146E12, 41.8], [1.58542188E12, 18.483333333333334], [1.58542164E12, 42.53333333333333], [1.58542152E12, 42.13333333333333], [1.58542182E12, 40.71666666666667], [1.5854217E12, 46.483333333333334], [1.5854214E12, 10.866666666666667], [1.58542158E12, 43.96666666666667], [1.58542176E12, 48.016666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542188E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 10.816666666666666, "minX": 1.5854214E12, "maxY": 48.0, "series": [{"data": [[1.58542146E12, 41.8], [1.58542188E12, 18.5], [1.58542164E12, 42.95], [1.58542152E12, 42.016666666666666], [1.58542182E12, 40.78333333333333], [1.5854217E12, 46.46666666666667], [1.5854214E12, 10.816666666666666], [1.58542158E12, 43.666666666666664], [1.58542176E12, 48.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58542188E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.65, "minX": 1.5854214E12, "maxY": 24.016666666666666, "series": [{"data": [[1.58542146E12, 0.65], [1.5854214E12, 1.0166666666666666]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58542146E12, 20.416666666666668], [1.58542188E12, 9.533333333333333], [1.58542164E12, 21.533333333333335], [1.58542152E12, 21.0], [1.58542182E12, 20.35], [1.5854217E12, 23.316666666666666], [1.5854214E12, 4.733333333333333], [1.58542158E12, 21.8], [1.58542176E12, 23.983333333333334]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58542146E12, 20.733333333333334], [1.58542188E12, 8.966666666666667], [1.58542164E12, 21.416666666666668], [1.58542152E12, 21.016666666666666], [1.58542182E12, 20.433333333333334], [1.5854217E12, 23.15], [1.5854214E12, 5.066666666666666], [1.58542158E12, 21.866666666666667], [1.58542176E12, 24.016666666666666]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542188E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 10.816666666666666, "minX": 1.5854214E12, "maxY": 48.0, "series": [{"data": [[1.58542146E12, 41.8], [1.58542188E12, 18.5], [1.58542164E12, 42.95], [1.58542152E12, 42.016666666666666], [1.58542182E12, 40.78333333333333], [1.5854217E12, 46.46666666666667], [1.5854214E12, 10.816666666666666], [1.58542158E12, 43.666666666666664], [1.58542176E12, 48.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58542188E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

