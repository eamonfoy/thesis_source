/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 7917.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 2.0], [14.5, 2.0], [14.6, 2.0], [14.7, 2.0], [14.8, 2.0], [14.9, 2.0], [15.0, 2.0], [15.1, 2.0], [15.2, 2.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 3.0], [17.0, 3.0], [17.1, 3.0], [17.2, 3.0], [17.3, 3.0], [17.4, 3.0], [17.5, 3.0], [17.6, 3.0], [17.7, 3.0], [17.8, 3.0], [17.9, 3.0], [18.0, 3.0], [18.1, 3.0], [18.2, 4.0], [18.3, 4.0], [18.4, 4.0], [18.5, 4.0], [18.6, 4.0], [18.7, 5.0], [18.8, 5.0], [18.9, 5.0], [19.0, 5.0], [19.1, 6.0], [19.2, 7.0], [19.3, 11.0], [19.4, 15.0], [19.5, 17.0], [19.6, 17.0], [19.7, 17.0], [19.8, 18.0], [19.9, 18.0], [20.0, 18.0], [20.1, 19.0], [20.2, 19.0], [20.3, 19.0], [20.4, 19.0], [20.5, 20.0], [20.6, 20.0], [20.7, 20.0], [20.8, 20.0], [20.9, 21.0], [21.0, 21.0], [21.1, 21.0], [21.2, 21.0], [21.3, 21.0], [21.4, 22.0], [21.5, 22.0], [21.6, 22.0], [21.7, 22.0], [21.8, 22.0], [21.9, 22.0], [22.0, 23.0], [22.1, 23.0], [22.2, 23.0], [22.3, 23.0], [22.4, 23.0], [22.5, 23.0], [22.6, 24.0], [22.7, 24.0], [22.8, 24.0], [22.9, 24.0], [23.0, 24.0], [23.1, 24.0], [23.2, 25.0], [23.3, 25.0], [23.4, 25.0], [23.5, 25.0], [23.6, 25.0], [23.7, 26.0], [23.8, 26.0], [23.9, 26.0], [24.0, 26.0], [24.1, 26.0], [24.2, 27.0], [24.3, 27.0], [24.4, 27.0], [24.5, 27.0], [24.6, 27.0], [24.7, 28.0], [24.8, 28.0], [24.9, 28.0], [25.0, 28.0], [25.1, 29.0], [25.2, 29.0], [25.3, 29.0], [25.4, 29.0], [25.5, 30.0], [25.6, 30.0], [25.7, 30.0], [25.8, 30.0], [25.9, 31.0], [26.0, 31.0], [26.1, 31.0], [26.2, 32.0], [26.3, 32.0], [26.4, 32.0], [26.5, 33.0], [26.6, 33.0], [26.7, 34.0], [26.8, 34.0], [26.9, 34.0], [27.0, 35.0], [27.1, 36.0], [27.2, 36.0], [27.3, 37.0], [27.4, 37.0], [27.5, 38.0], [27.6, 39.0], [27.7, 40.0], [27.8, 41.0], [27.9, 42.0], [28.0, 43.0], [28.1, 44.0], [28.2, 44.0], [28.3, 45.0], [28.4, 46.0], [28.5, 48.0], [28.6, 49.0], [28.7, 51.0], [28.8, 51.0], [28.9, 54.0], [29.0, 56.0], [29.1, 58.0], [29.2, 61.0], [29.3, 63.0], [29.4, 66.0], [29.5, 69.0], [29.6, 71.0], [29.7, 75.0], [29.8, 77.0], [29.9, 82.0], [30.0, 87.0], [30.1, 95.0], [30.2, 100.0], [30.3, 106.0], [30.4, 118.0], [30.5, 126.0], [30.6, 138.0], [30.7, 147.0], [30.8, 160.0], [30.9, 174.0], [31.0, 184.0], [31.1, 194.0], [31.2, 202.0], [31.3, 216.0], [31.4, 223.0], [31.5, 232.0], [31.6, 240.0], [31.7, 254.0], [31.8, 262.0], [31.9, 270.0], [32.0, 277.0], [32.1, 285.0], [32.2, 293.0], [32.3, 302.0], [32.4, 309.0], [32.5, 315.0], [32.6, 320.0], [32.7, 326.0], [32.8, 332.0], [32.9, 334.0], [33.0, 344.0], [33.1, 352.0], [33.2, 359.0], [33.3, 363.0], [33.4, 369.0], [33.5, 376.0], [33.6, 383.0], [33.7, 389.0], [33.8, 394.0], [33.9, 399.0], [34.0, 403.0], [34.1, 409.0], [34.2, 416.0], [34.3, 421.0], [34.4, 429.0], [34.5, 434.0], [34.6, 441.0], [34.7, 446.0], [34.8, 450.0], [34.9, 456.0], [35.0, 462.0], [35.1, 468.0], [35.2, 473.0], [35.3, 475.0], [35.4, 480.0], [35.5, 484.0], [35.6, 489.0], [35.7, 494.0], [35.8, 498.0], [35.9, 506.0], [36.0, 511.0], [36.1, 516.0], [36.2, 521.0], [36.3, 526.0], [36.4, 531.0], [36.5, 534.0], [36.6, 539.0], [36.7, 543.0], [36.8, 547.0], [36.9, 551.0], [37.0, 557.0], [37.1, 560.0], [37.2, 564.0], [37.3, 569.0], [37.4, 573.0], [37.5, 576.0], [37.6, 580.0], [37.7, 586.0], [37.8, 590.0], [37.9, 593.0], [38.0, 597.0], [38.1, 601.0], [38.2, 609.0], [38.3, 615.0], [38.4, 620.0], [38.5, 623.0], [38.6, 626.0], [38.7, 630.0], [38.8, 635.0], [38.9, 638.0], [39.0, 644.0], [39.1, 649.0], [39.2, 652.0], [39.3, 656.0], [39.4, 660.0], [39.5, 665.0], [39.6, 669.0], [39.7, 672.0], [39.8, 676.0], [39.9, 682.0], [40.0, 686.0], [40.1, 690.0], [40.2, 695.0], [40.3, 700.0], [40.4, 707.0], [40.5, 711.0], [40.6, 715.0], [40.7, 718.0], [40.8, 723.0], [40.9, 726.0], [41.0, 731.0], [41.1, 735.0], [41.2, 739.0], [41.3, 744.0], [41.4, 747.0], [41.5, 750.0], [41.6, 755.0], [41.7, 757.0], [41.8, 761.0], [41.9, 765.0], [42.0, 768.0], [42.1, 772.0], [42.2, 774.0], [42.3, 777.0], [42.4, 781.0], [42.5, 784.0], [42.6, 788.0], [42.7, 793.0], [42.8, 798.0], [42.9, 801.0], [43.0, 807.0], [43.1, 810.0], [43.2, 815.0], [43.3, 818.0], [43.4, 823.0], [43.5, 827.0], [43.6, 831.0], [43.7, 834.0], [43.8, 841.0], [43.9, 844.0], [44.0, 846.0], [44.1, 849.0], [44.2, 852.0], [44.3, 858.0], [44.4, 862.0], [44.5, 866.0], [44.6, 870.0], [44.7, 873.0], [44.8, 877.0], [44.9, 881.0], [45.0, 884.0], [45.1, 887.0], [45.2, 889.0], [45.3, 892.0], [45.4, 895.0], [45.5, 898.0], [45.6, 901.0], [45.7, 906.0], [45.8, 909.0], [45.9, 912.0], [46.0, 916.0], [46.1, 920.0], [46.2, 923.0], [46.3, 927.0], [46.4, 930.0], [46.5, 934.0], [46.6, 937.0], [46.7, 939.0], [46.8, 942.0], [46.9, 946.0], [47.0, 949.0], [47.1, 951.0], [47.2, 954.0], [47.3, 957.0], [47.4, 960.0], [47.5, 963.0], [47.6, 967.0], [47.7, 971.0], [47.8, 975.0], [47.9, 977.0], [48.0, 979.0], [48.1, 981.0], [48.2, 985.0], [48.3, 988.0], [48.4, 991.0], [48.5, 993.0], [48.6, 995.0], [48.7, 999.0], [48.8, 1001.0], [48.9, 1006.0], [49.0, 1008.0], [49.1, 1012.0], [49.2, 1015.0], [49.3, 1018.0], [49.4, 1020.0], [49.5, 1024.0], [49.6, 1027.0], [49.7, 1029.0], [49.8, 1034.0], [49.9, 1040.0], [50.0, 1044.0], [50.1, 1049.0], [50.2, 1052.0], [50.3, 1055.0], [50.4, 1056.0], [50.5, 1059.0], [50.6, 1064.0], [50.7, 1069.0], [50.8, 1072.0], [50.9, 1075.0], [51.0, 1076.0], [51.1, 1078.0], [51.2, 1081.0], [51.3, 1085.0], [51.4, 1087.0], [51.5, 1089.0], [51.6, 1092.0], [51.7, 1094.0], [51.8, 1097.0], [51.9, 1099.0], [52.0, 1103.0], [52.1, 1106.0], [52.2, 1109.0], [52.3, 1113.0], [52.4, 1116.0], [52.5, 1119.0], [52.6, 1123.0], [52.7, 1126.0], [52.8, 1129.0], [52.9, 1132.0], [53.0, 1136.0], [53.1, 1139.0], [53.2, 1140.0], [53.3, 1143.0], [53.4, 1148.0], [53.5, 1150.0], [53.6, 1155.0], [53.7, 1160.0], [53.8, 1162.0], [53.9, 1166.0], [54.0, 1170.0], [54.1, 1173.0], [54.2, 1177.0], [54.3, 1180.0], [54.4, 1182.0], [54.5, 1185.0], [54.6, 1188.0], [54.7, 1190.0], [54.8, 1193.0], [54.9, 1197.0], [55.0, 1200.0], [55.1, 1203.0], [55.2, 1205.0], [55.3, 1206.0], [55.4, 1209.0], [55.5, 1212.0], [55.6, 1214.0], [55.7, 1218.0], [55.8, 1222.0], [55.9, 1224.0], [56.0, 1228.0], [56.1, 1231.0], [56.2, 1236.0], [56.3, 1239.0], [56.4, 1241.0], [56.5, 1244.0], [56.6, 1246.0], [56.7, 1250.0], [56.8, 1252.0], [56.9, 1254.0], [57.0, 1257.0], [57.1, 1261.0], [57.2, 1264.0], [57.3, 1268.0], [57.4, 1271.0], [57.5, 1274.0], [57.6, 1278.0], [57.7, 1282.0], [57.8, 1285.0], [57.9, 1288.0], [58.0, 1291.0], [58.1, 1294.0], [58.2, 1299.0], [58.3, 1302.0], [58.4, 1306.0], [58.5, 1309.0], [58.6, 1312.0], [58.7, 1315.0], [58.8, 1318.0], [58.9, 1323.0], [59.0, 1326.0], [59.1, 1328.0], [59.2, 1332.0], [59.3, 1334.0], [59.4, 1336.0], [59.5, 1339.0], [59.6, 1342.0], [59.7, 1345.0], [59.8, 1348.0], [59.9, 1353.0], [60.0, 1356.0], [60.1, 1360.0], [60.2, 1363.0], [60.3, 1366.0], [60.4, 1368.0], [60.5, 1370.0], [60.6, 1373.0], [60.7, 1375.0], [60.8, 1378.0], [60.9, 1380.0], [61.0, 1383.0], [61.1, 1387.0], [61.2, 1391.0], [61.3, 1394.0], [61.4, 1397.0], [61.5, 1399.0], [61.6, 1403.0], [61.7, 1406.0], [61.8, 1411.0], [61.9, 1413.0], [62.0, 1417.0], [62.1, 1419.0], [62.2, 1421.0], [62.3, 1427.0], [62.4, 1430.0], [62.5, 1433.0], [62.6, 1436.0], [62.7, 1438.0], [62.8, 1440.0], [62.9, 1443.0], [63.0, 1446.0], [63.1, 1448.0], [63.2, 1451.0], [63.3, 1454.0], [63.4, 1455.0], [63.5, 1458.0], [63.6, 1461.0], [63.7, 1465.0], [63.8, 1468.0], [63.9, 1471.0], [64.0, 1473.0], [64.1, 1476.0], [64.2, 1479.0], [64.3, 1481.0], [64.4, 1484.0], [64.5, 1486.0], [64.6, 1488.0], [64.7, 1491.0], [64.8, 1494.0], [64.9, 1499.0], [65.0, 1501.0], [65.1, 1502.0], [65.2, 1504.0], [65.3, 1508.0], [65.4, 1512.0], [65.5, 1515.0], [65.6, 1518.0], [65.7, 1520.0], [65.8, 1523.0], [65.9, 1524.0], [66.0, 1527.0], [66.1, 1530.0], [66.2, 1533.0], [66.3, 1537.0], [66.4, 1542.0], [66.5, 1545.0], [66.6, 1549.0], [66.7, 1552.0], [66.8, 1555.0], [66.9, 1558.0], [67.0, 1561.0], [67.1, 1564.0], [67.2, 1569.0], [67.3, 1572.0], [67.4, 1574.0], [67.5, 1578.0], [67.6, 1580.0], [67.7, 1583.0], [67.8, 1586.0], [67.9, 1590.0], [68.0, 1593.0], [68.1, 1596.0], [68.2, 1600.0], [68.3, 1602.0], [68.4, 1606.0], [68.5, 1612.0], [68.6, 1615.0], [68.7, 1619.0], [68.8, 1624.0], [68.9, 1627.0], [69.0, 1628.0], [69.1, 1632.0], [69.2, 1637.0], [69.3, 1642.0], [69.4, 1644.0], [69.5, 1647.0], [69.6, 1651.0], [69.7, 1654.0], [69.8, 1657.0], [69.9, 1662.0], [70.0, 1666.0], [70.1, 1669.0], [70.2, 1673.0], [70.3, 1676.0], [70.4, 1680.0], [70.5, 1683.0], [70.6, 1685.0], [70.7, 1689.0], [70.8, 1692.0], [70.9, 1693.0], [71.0, 1699.0], [71.1, 1703.0], [71.2, 1705.0], [71.3, 1709.0], [71.4, 1711.0], [71.5, 1714.0], [71.6, 1717.0], [71.7, 1721.0], [71.8, 1725.0], [71.9, 1729.0], [72.0, 1733.0], [72.1, 1735.0], [72.2, 1740.0], [72.3, 1743.0], [72.4, 1747.0], [72.5, 1751.0], [72.6, 1755.0], [72.7, 1759.0], [72.8, 1764.0], [72.9, 1767.0], [73.0, 1770.0], [73.1, 1774.0], [73.2, 1777.0], [73.3, 1780.0], [73.4, 1783.0], [73.5, 1787.0], [73.6, 1791.0], [73.7, 1798.0], [73.8, 1803.0], [73.9, 1807.0], [74.0, 1809.0], [74.1, 1812.0], [74.2, 1817.0], [74.3, 1820.0], [74.4, 1825.0], [74.5, 1827.0], [74.6, 1831.0], [74.7, 1834.0], [74.8, 1838.0], [74.9, 1843.0], [75.0, 1846.0], [75.1, 1849.0], [75.2, 1853.0], [75.3, 1859.0], [75.4, 1862.0], [75.5, 1866.0], [75.6, 1874.0], [75.7, 1880.0], [75.8, 1886.0], [75.9, 1888.0], [76.0, 1893.0], [76.1, 1898.0], [76.2, 1902.0], [76.3, 1909.0], [76.4, 1917.0], [76.5, 1921.0], [76.6, 1927.0], [76.7, 1933.0], [76.8, 1935.0], [76.9, 1939.0], [77.0, 1943.0], [77.1, 1945.0], [77.2, 1947.0], [77.3, 1950.0], [77.4, 1954.0], [77.5, 1958.0], [77.6, 1963.0], [77.7, 1968.0], [77.8, 1976.0], [77.9, 1982.0], [78.0, 1991.0], [78.1, 1995.0], [78.2, 2001.0], [78.3, 2008.0], [78.4, 2012.0], [78.5, 2018.0], [78.6, 2026.0], [78.7, 2032.0], [78.8, 2037.0], [78.9, 2046.0], [79.0, 2050.0], [79.1, 2056.0], [79.2, 2061.0], [79.3, 2067.0], [79.4, 2072.0], [79.5, 2078.0], [79.6, 2083.0], [79.7, 2089.0], [79.8, 2093.0], [79.9, 2096.0], [80.0, 2101.0], [80.1, 2107.0], [80.2, 2112.0], [80.3, 2118.0], [80.4, 2123.0], [80.5, 2129.0], [80.6, 2135.0], [80.7, 2141.0], [80.8, 2144.0], [80.9, 2149.0], [81.0, 2154.0], [81.1, 2161.0], [81.2, 2165.0], [81.3, 2171.0], [81.4, 2175.0], [81.5, 2178.0], [81.6, 2182.0], [81.7, 2185.0], [81.8, 2190.0], [81.9, 2196.0], [82.0, 2205.0], [82.1, 2213.0], [82.2, 2217.0], [82.3, 2225.0], [82.4, 2230.0], [82.5, 2234.0], [82.6, 2243.0], [82.7, 2247.0], [82.8, 2254.0], [82.9, 2260.0], [83.0, 2266.0], [83.1, 2272.0], [83.2, 2277.0], [83.3, 2283.0], [83.4, 2291.0], [83.5, 2296.0], [83.6, 2304.0], [83.7, 2310.0], [83.8, 2314.0], [83.9, 2323.0], [84.0, 2328.0], [84.1, 2335.0], [84.2, 2340.0], [84.3, 2346.0], [84.4, 2351.0], [84.5, 2357.0], [84.6, 2364.0], [84.7, 2372.0], [84.8, 2380.0], [84.9, 2387.0], [85.0, 2392.0], [85.1, 2398.0], [85.2, 2407.0], [85.3, 2415.0], [85.4, 2425.0], [85.5, 2432.0], [85.6, 2435.0], [85.7, 2442.0], [85.8, 2449.0], [85.9, 2458.0], [86.0, 2466.0], [86.1, 2471.0], [86.2, 2477.0], [86.3, 2485.0], [86.4, 2492.0], [86.5, 2502.0], [86.6, 2508.0], [86.7, 2517.0], [86.8, 2525.0], [86.9, 2534.0], [87.0, 2543.0], [87.1, 2552.0], [87.2, 2561.0], [87.3, 2569.0], [87.4, 2577.0], [87.5, 2584.0], [87.6, 2591.0], [87.7, 2601.0], [87.8, 2610.0], [87.9, 2620.0], [88.0, 2626.0], [88.1, 2633.0], [88.2, 2643.0], [88.3, 2655.0], [88.4, 2665.0], [88.5, 2671.0], [88.6, 2679.0], [88.7, 2687.0], [88.8, 2693.0], [88.9, 2701.0], [89.0, 2708.0], [89.1, 2717.0], [89.2, 2722.0], [89.3, 2731.0], [89.4, 2740.0], [89.5, 2748.0], [89.6, 2756.0], [89.7, 2772.0], [89.8, 2782.0], [89.9, 2793.0], [90.0, 2803.0], [90.1, 2812.0], [90.2, 2821.0], [90.3, 2826.0], [90.4, 2836.0], [90.5, 2848.0], [90.6, 2857.0], [90.7, 2863.0], [90.8, 2875.0], [90.9, 2889.0], [91.0, 2898.0], [91.1, 2905.0], [91.2, 2918.0], [91.3, 2931.0], [91.4, 2947.0], [91.5, 2958.0], [91.6, 2965.0], [91.7, 2974.0], [91.8, 2981.0], [91.9, 2995.0], [92.0, 3008.0], [92.1, 3014.0], [92.2, 3030.0], [92.3, 3042.0], [92.4, 3053.0], [92.5, 3065.0], [92.6, 3081.0], [92.7, 3096.0], [92.8, 3107.0], [92.9, 3123.0], [93.0, 3136.0], [93.1, 3147.0], [93.2, 3161.0], [93.3, 3169.0], [93.4, 3182.0], [93.5, 3190.0], [93.6, 3203.0], [93.7, 3217.0], [93.8, 3229.0], [93.9, 3239.0], [94.0, 3263.0], [94.1, 3279.0], [94.2, 3294.0], [94.3, 3310.0], [94.4, 3342.0], [94.5, 3358.0], [94.6, 3370.0], [94.7, 3393.0], [94.8, 3407.0], [94.9, 3424.0], [95.0, 3437.0], [95.1, 3452.0], [95.2, 3472.0], [95.3, 3489.0], [95.4, 3509.0], [95.5, 3521.0], [95.6, 3534.0], [95.7, 3553.0], [95.8, 3573.0], [95.9, 3592.0], [96.0, 3621.0], [96.1, 3639.0], [96.2, 3666.0], [96.3, 3700.0], [96.4, 3716.0], [96.5, 3748.0], [96.6, 3764.0], [96.7, 3790.0], [96.8, 3803.0], [96.9, 3819.0], [97.0, 3853.0], [97.1, 3877.0], [97.2, 3899.0], [97.3, 3924.0], [97.4, 3964.0], [97.5, 3983.0], [97.6, 4012.0], [97.7, 4041.0], [97.8, 4052.0], [97.9, 4086.0], [98.0, 4136.0], [98.1, 4172.0], [98.2, 4218.0], [98.3, 4246.0], [98.4, 4307.0], [98.5, 4334.0], [98.6, 4384.0], [98.7, 4407.0], [98.8, 4465.0], [98.9, 4545.0], [99.0, 4591.0], [99.1, 4639.0], [99.2, 4704.0], [99.3, 4756.0], [99.4, 4828.0], [99.5, 4935.0], [99.6, 5066.0], [99.7, 5203.0], [99.8, 5420.0], [99.9, 6074.0], [100.0, 6954.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 146.0], [0.1, 146.0], [0.2, 146.0], [0.3, 146.0], [0.4, 146.0], [0.5, 146.0], [0.6, 146.0], [0.7, 146.0], [0.8, 146.0], [0.9, 146.0], [1.0, 146.0], [1.1, 146.0], [1.2, 146.0], [1.3, 146.0], [1.4, 146.0], [1.5, 146.0], [1.6, 146.0], [1.7, 146.0], [1.8, 146.0], [1.9, 146.0], [2.0, 146.0], [2.1, 146.0], [2.2, 146.0], [2.3, 146.0], [2.4, 146.0], [2.5, 146.0], [2.6, 146.0], [2.7, 146.0], [2.8, 146.0], [2.9, 146.0], [3.0, 146.0], [3.1, 147.0], [3.2, 147.0], [3.3, 147.0], [3.4, 147.0], [3.5, 147.0], [3.6, 147.0], [3.7, 147.0], [3.8, 147.0], [3.9, 147.0], [4.0, 147.0], [4.1, 147.0], [4.2, 147.0], [4.3, 147.0], [4.4, 147.0], [4.5, 147.0], [4.6, 147.0], [4.7, 148.0], [4.8, 148.0], [4.9, 148.0], [5.0, 148.0], [5.1, 148.0], [5.2, 148.0], [5.3, 148.0], [5.4, 148.0], [5.5, 148.0], [5.6, 148.0], [5.7, 148.0], [5.8, 148.0], [5.9, 148.0], [6.0, 148.0], [6.1, 148.0], [6.2, 148.0], [6.3, 148.0], [6.4, 148.0], [6.5, 148.0], [6.6, 148.0], [6.7, 148.0], [6.8, 148.0], [6.9, 148.0], [7.0, 148.0], [7.1, 148.0], [7.2, 148.0], [7.3, 148.0], [7.4, 148.0], [7.5, 148.0], [7.6, 148.0], [7.7, 149.0], [7.8, 149.0], [7.9, 149.0], [8.0, 149.0], [8.1, 149.0], [8.2, 149.0], [8.3, 149.0], [8.4, 149.0], [8.5, 149.0], [8.6, 149.0], [8.7, 149.0], [8.8, 149.0], [8.9, 149.0], [9.0, 149.0], [9.1, 149.0], [9.2, 149.0], [9.3, 149.0], [9.4, 149.0], [9.5, 149.0], [9.6, 149.0], [9.7, 149.0], [9.8, 149.0], [9.9, 149.0], [10.0, 149.0], [10.1, 149.0], [10.2, 149.0], [10.3, 149.0], [10.4, 149.0], [10.5, 149.0], [10.6, 149.0], [10.7, 149.0], [10.8, 149.0], [10.9, 149.0], [11.0, 149.0], [11.1, 149.0], [11.2, 149.0], [11.3, 149.0], [11.4, 149.0], [11.5, 149.0], [11.6, 150.0], [11.7, 150.0], [11.8, 150.0], [11.9, 150.0], [12.0, 150.0], [12.1, 150.0], [12.2, 150.0], [12.3, 150.0], [12.4, 150.0], [12.5, 150.0], [12.6, 150.0], [12.7, 150.0], [12.8, 150.0], [12.9, 150.0], [13.0, 150.0], [13.1, 151.0], [13.2, 151.0], [13.3, 151.0], [13.4, 151.0], [13.5, 151.0], [13.6, 151.0], [13.7, 151.0], [13.8, 151.0], [13.9, 151.0], [14.0, 151.0], [14.1, 151.0], [14.2, 151.0], [14.3, 151.0], [14.4, 151.0], [14.5, 151.0], [14.6, 151.0], [14.7, 152.0], [14.8, 152.0], [14.9, 152.0], [15.0, 152.0], [15.1, 152.0], [15.2, 152.0], [15.3, 152.0], [15.4, 152.0], [15.5, 152.0], [15.6, 152.0], [15.7, 152.0], [15.8, 152.0], [15.9, 152.0], [16.0, 152.0], [16.1, 152.0], [16.2, 152.0], [16.3, 152.0], [16.4, 152.0], [16.5, 152.0], [16.6, 152.0], [16.7, 152.0], [16.8, 152.0], [16.9, 152.0], [17.0, 152.0], [17.1, 152.0], [17.2, 152.0], [17.3, 152.0], [17.4, 152.0], [17.5, 152.0], [17.6, 152.0], [17.7, 152.0], [17.8, 152.0], [17.9, 152.0], [18.0, 152.0], [18.1, 152.0], [18.2, 152.0], [18.3, 152.0], [18.4, 152.0], [18.5, 152.0], [18.6, 152.0], [18.7, 152.0], [18.8, 152.0], [18.9, 152.0], [19.0, 152.0], [19.1, 152.0], [19.2, 152.0], [19.3, 153.0], [19.4, 153.0], [19.5, 153.0], [19.6, 153.0], [19.7, 153.0], [19.8, 153.0], [19.9, 153.0], [20.0, 153.0], [20.1, 153.0], [20.2, 153.0], [20.3, 153.0], [20.4, 153.0], [20.5, 153.0], [20.6, 153.0], [20.7, 153.0], [20.8, 153.0], [20.9, 153.0], [21.0, 153.0], [21.1, 153.0], [21.2, 153.0], [21.3, 153.0], [21.4, 153.0], [21.5, 153.0], [21.6, 154.0], [21.7, 154.0], [21.8, 154.0], [21.9, 154.0], [22.0, 154.0], [22.1, 154.0], [22.2, 154.0], [22.3, 154.0], [22.4, 154.0], [22.5, 154.0], [22.6, 154.0], [22.7, 154.0], [22.8, 154.0], [22.9, 154.0], [23.0, 154.0], [23.1, 154.0], [23.2, 154.0], [23.3, 154.0], [23.4, 154.0], [23.5, 154.0], [23.6, 154.0], [23.7, 154.0], [23.8, 154.0], [23.9, 154.0], [24.0, 154.0], [24.1, 154.0], [24.2, 154.0], [24.3, 154.0], [24.4, 154.0], [24.5, 154.0], [24.6, 154.0], [24.7, 154.0], [24.8, 154.0], [24.9, 154.0], [25.0, 154.0], [25.1, 154.0], [25.2, 154.0], [25.3, 154.0], [25.4, 154.0], [25.5, 154.0], [25.6, 154.0], [25.7, 154.0], [25.8, 154.0], [25.9, 154.0], [26.0, 154.0], [26.1, 154.0], [26.2, 154.0], [26.3, 154.0], [26.4, 154.0], [26.5, 154.0], [26.6, 154.0], [26.7, 154.0], [26.8, 154.0], [26.9, 154.0], [27.0, 155.0], [27.1, 155.0], [27.2, 155.0], [27.3, 155.0], [27.4, 155.0], [27.5, 155.0], [27.6, 155.0], [27.7, 155.0], [27.8, 155.0], [27.9, 155.0], [28.0, 155.0], [28.1, 155.0], [28.2, 155.0], [28.3, 155.0], [28.4, 155.0], [28.5, 155.0], [28.6, 155.0], [28.7, 155.0], [28.8, 155.0], [28.9, 155.0], [29.0, 155.0], [29.1, 155.0], [29.2, 155.0], [29.3, 155.0], [29.4, 155.0], [29.5, 155.0], [29.6, 155.0], [29.7, 155.0], [29.8, 155.0], [29.9, 155.0], [30.0, 155.0], [30.1, 155.0], [30.2, 155.0], [30.3, 155.0], [30.4, 155.0], [30.5, 155.0], [30.6, 155.0], [30.7, 155.0], [30.8, 155.0], [30.9, 155.0], [31.0, 155.0], [31.1, 155.0], [31.2, 155.0], [31.3, 155.0], [31.4, 155.0], [31.5, 155.0], [31.6, 155.0], [31.7, 155.0], [31.8, 155.0], [31.9, 155.0], [32.0, 155.0], [32.1, 155.0], [32.2, 155.0], [32.3, 155.0], [32.4, 155.0], [32.5, 155.0], [32.6, 155.0], [32.7, 155.0], [32.8, 155.0], [32.9, 155.0], [33.0, 155.0], [33.1, 155.0], [33.2, 155.0], [33.3, 155.0], [33.4, 155.0], [33.5, 155.0], [33.6, 155.0], [33.7, 155.0], [33.8, 155.0], [33.9, 156.0], [34.0, 156.0], [34.1, 156.0], [34.2, 156.0], [34.3, 156.0], [34.4, 156.0], [34.5, 156.0], [34.6, 156.0], [34.7, 156.0], [34.8, 156.0], [34.9, 156.0], [35.0, 156.0], [35.1, 156.0], [35.2, 156.0], [35.3, 156.0], [35.4, 156.0], [35.5, 156.0], [35.6, 156.0], [35.7, 156.0], [35.8, 156.0], [35.9, 156.0], [36.0, 156.0], [36.1, 156.0], [36.2, 156.0], [36.3, 156.0], [36.4, 156.0], [36.5, 156.0], [36.6, 156.0], [36.7, 156.0], [36.8, 156.0], [36.9, 156.0], [37.0, 156.0], [37.1, 156.0], [37.2, 156.0], [37.3, 156.0], [37.4, 156.0], [37.5, 156.0], [37.6, 156.0], [37.7, 156.0], [37.8, 156.0], [37.9, 156.0], [38.0, 156.0], [38.1, 156.0], [38.2, 156.0], [38.3, 156.0], [38.4, 156.0], [38.5, 156.0], [38.6, 156.0], [38.7, 156.0], [38.8, 156.0], [38.9, 156.0], [39.0, 156.0], [39.1, 156.0], [39.2, 156.0], [39.3, 156.0], [39.4, 156.0], [39.5, 156.0], [39.6, 156.0], [39.7, 156.0], [39.8, 156.0], [39.9, 156.0], [40.0, 156.0], [40.1, 156.0], [40.2, 156.0], [40.3, 156.0], [40.4, 156.0], [40.5, 156.0], [40.6, 156.0], [40.7, 156.0], [40.8, 156.0], [40.9, 156.0], [41.0, 156.0], [41.1, 156.0], [41.2, 156.0], [41.3, 156.0], [41.4, 156.0], [41.5, 156.0], [41.6, 156.0], [41.7, 156.0], [41.8, 156.0], [41.9, 156.0], [42.0, 156.0], [42.1, 156.0], [42.2, 156.0], [42.3, 156.0], [42.4, 157.0], [42.5, 157.0], [42.6, 157.0], [42.7, 157.0], [42.8, 157.0], [42.9, 157.0], [43.0, 157.0], [43.1, 157.0], [43.2, 157.0], [43.3, 157.0], [43.4, 157.0], [43.5, 157.0], [43.6, 157.0], [43.7, 157.0], [43.8, 157.0], [43.9, 157.0], [44.0, 157.0], [44.1, 157.0], [44.2, 157.0], [44.3, 157.0], [44.4, 157.0], [44.5, 157.0], [44.6, 157.0], [44.7, 157.0], [44.8, 157.0], [44.9, 157.0], [45.0, 157.0], [45.1, 157.0], [45.2, 157.0], [45.3, 157.0], [45.4, 157.0], [45.5, 157.0], [45.6, 157.0], [45.7, 157.0], [45.8, 157.0], [45.9, 157.0], [46.0, 157.0], [46.1, 157.0], [46.2, 157.0], [46.3, 157.0], [46.4, 157.0], [46.5, 157.0], [46.6, 157.0], [46.7, 157.0], [46.8, 157.0], [46.9, 157.0], [47.0, 157.0], [47.1, 157.0], [47.2, 157.0], [47.3, 157.0], [47.4, 157.0], [47.5, 157.0], [47.6, 157.0], [47.7, 157.0], [47.8, 157.0], [47.9, 157.0], [48.0, 157.0], [48.1, 157.0], [48.2, 157.0], [48.3, 157.0], [48.4, 157.0], [48.5, 157.0], [48.6, 157.0], [48.7, 157.0], [48.8, 157.0], [48.9, 157.0], [49.0, 157.0], [49.1, 157.0], [49.2, 157.0], [49.3, 157.0], [49.4, 157.0], [49.5, 157.0], [49.6, 157.0], [49.7, 157.0], [49.8, 157.0], [49.9, 157.0], [50.0, 157.0], [50.1, 157.0], [50.2, 157.0], [50.3, 157.0], [50.4, 157.0], [50.5, 157.0], [50.6, 157.0], [50.7, 157.0], [50.8, 158.0], [50.9, 158.0], [51.0, 158.0], [51.1, 158.0], [51.2, 158.0], [51.3, 158.0], [51.4, 158.0], [51.5, 158.0], [51.6, 158.0], [51.7, 158.0], [51.8, 158.0], [51.9, 158.0], [52.0, 158.0], [52.1, 158.0], [52.2, 158.0], [52.3, 158.0], [52.4, 158.0], [52.5, 158.0], [52.6, 158.0], [52.7, 158.0], [52.8, 158.0], [52.9, 158.0], [53.0, 158.0], [53.1, 158.0], [53.2, 158.0], [53.3, 158.0], [53.4, 158.0], [53.5, 158.0], [53.6, 158.0], [53.7, 158.0], [53.8, 158.0], [53.9, 158.0], [54.0, 158.0], [54.1, 158.0], [54.2, 158.0], [54.3, 158.0], [54.4, 158.0], [54.5, 158.0], [54.6, 158.0], [54.7, 158.0], [54.8, 158.0], [54.9, 158.0], [55.0, 158.0], [55.1, 158.0], [55.2, 158.0], [55.3, 158.0], [55.4, 159.0], [55.5, 159.0], [55.6, 159.0], [55.7, 159.0], [55.8, 159.0], [55.9, 159.0], [56.0, 159.0], [56.1, 159.0], [56.2, 159.0], [56.3, 159.0], [56.4, 159.0], [56.5, 159.0], [56.6, 159.0], [56.7, 159.0], [56.8, 159.0], [56.9, 159.0], [57.0, 159.0], [57.1, 159.0], [57.2, 159.0], [57.3, 159.0], [57.4, 159.0], [57.5, 159.0], [57.6, 159.0], [57.7, 159.0], [57.8, 159.0], [57.9, 159.0], [58.0, 159.0], [58.1, 159.0], [58.2, 159.0], [58.3, 159.0], [58.4, 159.0], [58.5, 159.0], [58.6, 159.0], [58.7, 159.0], [58.8, 159.0], [58.9, 159.0], [59.0, 159.0], [59.1, 159.0], [59.2, 159.0], [59.3, 159.0], [59.4, 159.0], [59.5, 159.0], [59.6, 159.0], [59.7, 159.0], [59.8, 159.0], [59.9, 159.0], [60.0, 160.0], [60.1, 160.0], [60.2, 160.0], [60.3, 160.0], [60.4, 160.0], [60.5, 160.0], [60.6, 160.0], [60.7, 160.0], [60.8, 160.0], [60.9, 160.0], [61.0, 160.0], [61.1, 160.0], [61.2, 160.0], [61.3, 160.0], [61.4, 160.0], [61.5, 160.0], [61.6, 160.0], [61.7, 160.0], [61.8, 160.0], [61.9, 160.0], [62.0, 160.0], [62.1, 160.0], [62.2, 160.0], [62.3, 160.0], [62.4, 160.0], [62.5, 160.0], [62.6, 160.0], [62.7, 160.0], [62.8, 160.0], [62.9, 160.0], [63.0, 160.0], [63.1, 160.0], [63.2, 160.0], [63.3, 160.0], [63.4, 160.0], [63.5, 160.0], [63.6, 160.0], [63.7, 160.0], [63.8, 160.0], [63.9, 161.0], [64.0, 161.0], [64.1, 161.0], [64.2, 161.0], [64.3, 161.0], [64.4, 161.0], [64.5, 161.0], [64.6, 161.0], [64.7, 161.0], [64.8, 161.0], [64.9, 161.0], [65.0, 161.0], [65.1, 161.0], [65.2, 161.0], [65.3, 161.0], [65.4, 161.0], [65.5, 161.0], [65.6, 161.0], [65.7, 161.0], [65.8, 161.0], [65.9, 161.0], [66.0, 161.0], [66.1, 161.0], [66.2, 161.0], [66.3, 161.0], [66.4, 161.0], [66.5, 161.0], [66.6, 161.0], [66.7, 161.0], [66.8, 161.0], [66.9, 161.0], [67.0, 162.0], [67.1, 162.0], [67.2, 162.0], [67.3, 162.0], [67.4, 162.0], [67.5, 162.0], [67.6, 162.0], [67.7, 162.0], [67.8, 162.0], [67.9, 162.0], [68.0, 162.0], [68.1, 162.0], [68.2, 162.0], [68.3, 162.0], [68.4, 162.0], [68.5, 162.0], [68.6, 162.0], [68.7, 162.0], [68.8, 162.0], [68.9, 162.0], [69.0, 162.0], [69.1, 162.0], [69.2, 162.0], [69.3, 162.0], [69.4, 162.0], [69.5, 162.0], [69.6, 162.0], [69.7, 162.0], [69.8, 162.0], [69.9, 162.0], [70.0, 162.0], [70.1, 162.0], [70.2, 162.0], [70.3, 162.0], [70.4, 162.0], [70.5, 162.0], [70.6, 162.0], [70.7, 162.0], [70.8, 162.0], [70.9, 162.0], [71.0, 162.0], [71.1, 162.0], [71.2, 162.0], [71.3, 162.0], [71.4, 162.0], [71.5, 162.0], [71.6, 162.0], [71.7, 162.0], [71.8, 162.0], [71.9, 162.0], [72.0, 162.0], [72.1, 162.0], [72.2, 162.0], [72.3, 162.0], [72.4, 162.0], [72.5, 162.0], [72.6, 162.0], [72.7, 162.0], [72.8, 162.0], [72.9, 162.0], [73.0, 162.0], [73.1, 163.0], [73.2, 163.0], [73.3, 163.0], [73.4, 163.0], [73.5, 163.0], [73.6, 163.0], [73.7, 163.0], [73.8, 163.0], [73.9, 163.0], [74.0, 163.0], [74.1, 163.0], [74.2, 163.0], [74.3, 163.0], [74.4, 163.0], [74.5, 163.0], [74.6, 163.0], [74.7, 163.0], [74.8, 163.0], [74.9, 163.0], [75.0, 163.0], [75.1, 163.0], [75.2, 163.0], [75.3, 163.0], [75.4, 163.0], [75.5, 163.0], [75.6, 163.0], [75.7, 163.0], [75.8, 163.0], [75.9, 163.0], [76.0, 163.0], [76.1, 163.0], [76.2, 164.0], [76.3, 164.0], [76.4, 164.0], [76.5, 164.0], [76.6, 164.0], [76.7, 164.0], [76.8, 164.0], [76.9, 164.0], [77.0, 164.0], [77.1, 164.0], [77.2, 164.0], [77.3, 164.0], [77.4, 164.0], [77.5, 164.0], [77.6, 164.0], [77.7, 164.0], [77.8, 164.0], [77.9, 164.0], [78.0, 164.0], [78.1, 164.0], [78.2, 164.0], [78.3, 164.0], [78.4, 164.0], [78.5, 164.0], [78.6, 164.0], [78.7, 164.0], [78.8, 164.0], [78.9, 164.0], [79.0, 164.0], [79.1, 164.0], [79.2, 164.0], [79.3, 165.0], [79.4, 165.0], [79.5, 165.0], [79.6, 165.0], [79.7, 165.0], [79.8, 165.0], [79.9, 165.0], [80.0, 165.0], [80.1, 165.0], [80.2, 165.0], [80.3, 165.0], [80.4, 165.0], [80.5, 165.0], [80.6, 165.0], [80.7, 165.0], [80.8, 165.0], [80.9, 165.0], [81.0, 165.0], [81.1, 165.0], [81.2, 165.0], [81.3, 165.0], [81.4, 165.0], [81.5, 165.0], [81.6, 165.0], [81.7, 165.0], [81.8, 165.0], [81.9, 165.0], [82.0, 165.0], [82.1, 165.0], [82.2, 165.0], [82.3, 165.0], [82.4, 166.0], [82.5, 166.0], [82.6, 166.0], [82.7, 166.0], [82.8, 166.0], [82.9, 166.0], [83.0, 166.0], [83.1, 166.0], [83.2, 166.0], [83.3, 166.0], [83.4, 166.0], [83.5, 166.0], [83.6, 166.0], [83.7, 166.0], [83.8, 166.0], [83.9, 166.0], [84.0, 166.0], [84.1, 166.0], [84.2, 166.0], [84.3, 166.0], [84.4, 166.0], [84.5, 166.0], [84.6, 166.0], [84.7, 166.0], [84.8, 166.0], [84.9, 166.0], [85.0, 166.0], [85.1, 166.0], [85.2, 166.0], [85.3, 166.0], [85.4, 166.0], [85.5, 166.0], [85.6, 166.0], [85.7, 166.0], [85.8, 166.0], [85.9, 166.0], [86.0, 166.0], [86.1, 166.0], [86.2, 167.0], [86.3, 167.0], [86.4, 167.0], [86.5, 167.0], [86.6, 167.0], [86.7, 167.0], [86.8, 167.0], [86.9, 167.0], [87.0, 167.0], [87.1, 167.0], [87.2, 167.0], [87.3, 167.0], [87.4, 167.0], [87.5, 167.0], [87.6, 167.0], [87.7, 167.0], [87.8, 167.0], [87.9, 167.0], [88.0, 167.0], [88.1, 167.0], [88.2, 167.0], [88.3, 167.0], [88.4, 167.0], [88.5, 167.0], [88.6, 167.0], [88.7, 167.0], [88.8, 167.0], [88.9, 167.0], [89.0, 167.0], [89.1, 167.0], [89.2, 167.0], [89.3, 167.0], [89.4, 167.0], [89.5, 167.0], [89.6, 167.0], [89.7, 167.0], [89.8, 167.0], [89.9, 167.0], [90.0, 167.0], [90.1, 167.0], [90.2, 167.0], [90.3, 167.0], [90.4, 167.0], [90.5, 167.0], [90.6, 167.0], [90.7, 167.0], [90.8, 168.0], [90.9, 168.0], [91.0, 168.0], [91.1, 168.0], [91.2, 168.0], [91.3, 168.0], [91.4, 168.0], [91.5, 168.0], [91.6, 168.0], [91.7, 168.0], [91.8, 168.0], [91.9, 168.0], [92.0, 168.0], [92.1, 168.0], [92.2, 168.0], [92.3, 168.0], [92.4, 168.0], [92.5, 168.0], [92.6, 168.0], [92.7, 168.0], [92.8, 168.0], [92.9, 168.0], [93.0, 168.0], [93.1, 168.0], [93.2, 168.0], [93.3, 168.0], [93.4, 168.0], [93.5, 168.0], [93.6, 168.0], [93.7, 168.0], [93.8, 168.0], [93.9, 169.0], [94.0, 169.0], [94.1, 169.0], [94.2, 169.0], [94.3, 169.0], [94.4, 169.0], [94.5, 169.0], [94.6, 169.0], [94.7, 171.0], [94.8, 171.0], [94.9, 171.0], [95.0, 171.0], [95.1, 171.0], [95.2, 171.0], [95.3, 171.0], [95.4, 171.0], [95.5, 171.0], [95.6, 171.0], [95.7, 171.0], [95.8, 171.0], [95.9, 171.0], [96.0, 171.0], [96.1, 171.0], [96.2, 178.0], [96.3, 178.0], [96.4, 178.0], [96.5, 178.0], [96.6, 178.0], [96.7, 178.0], [96.8, 178.0], [96.9, 178.0], [97.0, 181.0], [97.1, 181.0], [97.2, 181.0], [97.3, 181.0], [97.4, 181.0], [97.5, 181.0], [97.6, 181.0], [97.7, 182.0], [97.8, 182.0], [97.9, 182.0], [98.0, 182.0], [98.1, 182.0], [98.2, 182.0], [98.3, 182.0], [98.4, 182.0], [98.5, 184.0], [98.6, 184.0], [98.7, 184.0], [98.8, 184.0], [98.9, 184.0], [99.0, 184.0], [99.1, 184.0], [99.2, 184.0], [99.3, 189.0], [99.4, 189.0], [99.5, 189.0], [99.6, 189.0], [99.7, 189.0], [99.8, 189.0], [99.9, 189.0], [100.0, 189.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 2.0], [4.9, 2.0], [5.0, 2.0], [5.1, 2.0], [5.2, 2.0], [5.3, 2.0], [5.4, 2.0], [5.5, 2.0], [5.6, 2.0], [5.7, 2.0], [5.8, 2.0], [5.9, 2.0], [6.0, 2.0], [6.1, 2.0], [6.2, 2.0], [6.3, 2.0], [6.4, 2.0], [6.5, 2.0], [6.6, 2.0], [6.7, 2.0], [6.8, 2.0], [6.9, 2.0], [7.0, 2.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 3.0], [13.8, 3.0], [13.9, 3.0], [14.0, 3.0], [14.1, 3.0], [14.2, 3.0], [14.3, 3.0], [14.4, 3.0], [14.5, 3.0], [14.6, 3.0], [14.7, 3.0], [14.8, 3.0], [14.9, 3.0], [15.0, 3.0], [15.1, 3.0], [15.2, 3.0], [15.3, 3.0], [15.4, 3.0], [15.5, 3.0], [15.6, 3.0], [15.7, 3.0], [15.8, 3.0], [15.9, 3.0], [16.0, 3.0], [16.1, 3.0], [16.2, 3.0], [16.3, 3.0], [16.4, 3.0], [16.5, 3.0], [16.6, 3.0], [16.7, 3.0], [16.8, 3.0], [16.9, 3.0], [17.0, 3.0], [17.1, 3.0], [17.2, 3.0], [17.3, 3.0], [17.4, 3.0], [17.5, 3.0], [17.6, 3.0], [17.7, 3.0], [17.8, 4.0], [17.9, 4.0], [18.0, 4.0], [18.1, 4.0], [18.2, 4.0], [18.3, 4.0], [18.4, 4.0], [18.5, 4.0], [18.6, 5.0], [18.7, 5.0], [18.8, 6.0], [18.9, 6.0], [19.0, 7.0], [19.1, 9.0], [19.2, 15.0], [19.3, 17.0], [19.4, 17.0], [19.5, 18.0], [19.6, 18.0], [19.7, 18.0], [19.8, 19.0], [19.9, 19.0], [20.0, 19.0], [20.1, 20.0], [20.2, 20.0], [20.3, 20.0], [20.4, 20.0], [20.5, 21.0], [20.6, 21.0], [20.7, 21.0], [20.8, 21.0], [20.9, 21.0], [21.0, 21.0], [21.1, 22.0], [21.2, 22.0], [21.3, 22.0], [21.4, 22.0], [21.5, 22.0], [21.6, 23.0], [21.7, 23.0], [21.8, 23.0], [21.9, 23.0], [22.0, 23.0], [22.1, 23.0], [22.2, 24.0], [22.3, 24.0], [22.4, 24.0], [22.5, 24.0], [22.6, 24.0], [22.7, 24.0], [22.8, 25.0], [22.9, 25.0], [23.0, 25.0], [23.1, 25.0], [23.2, 25.0], [23.3, 25.0], [23.4, 26.0], [23.5, 26.0], [23.6, 26.0], [23.7, 26.0], [23.8, 26.0], [23.9, 26.0], [24.0, 26.0], [24.1, 27.0], [24.2, 27.0], [24.3, 27.0], [24.4, 27.0], [24.5, 28.0], [24.6, 28.0], [24.7, 28.0], [24.8, 28.0], [24.9, 29.0], [25.0, 29.0], [25.1, 29.0], [25.2, 29.0], [25.3, 29.0], [25.4, 30.0], [25.5, 30.0], [25.6, 30.0], [25.7, 30.0], [25.8, 31.0], [25.9, 31.0], [26.0, 31.0], [26.1, 32.0], [26.2, 32.0], [26.3, 32.0], [26.4, 33.0], [26.5, 33.0], [26.6, 33.0], [26.7, 34.0], [26.8, 34.0], [26.9, 35.0], [27.0, 35.0], [27.1, 35.0], [27.2, 36.0], [27.3, 36.0], [27.4, 37.0], [27.5, 37.0], [27.6, 38.0], [27.7, 39.0], [27.8, 39.0], [27.9, 40.0], [28.0, 41.0], [28.1, 42.0], [28.2, 43.0], [28.3, 44.0], [28.4, 44.0], [28.5, 45.0], [28.6, 46.0], [28.7, 47.0], [28.8, 49.0], [28.9, 51.0], [29.0, 52.0], [29.1, 54.0], [29.2, 59.0], [29.3, 62.0], [29.4, 66.0], [29.5, 70.0], [29.6, 74.0], [29.7, 80.0], [29.8, 91.0], [29.9, 101.0], [30.0, 109.0], [30.1, 116.0], [30.2, 124.0], [30.3, 140.0], [30.4, 148.0], [30.5, 157.0], [30.6, 165.0], [30.7, 177.0], [30.8, 190.0], [30.9, 199.0], [31.0, 215.0], [31.1, 227.0], [31.2, 236.0], [31.3, 242.0], [31.4, 252.0], [31.5, 259.0], [31.6, 267.0], [31.7, 282.0], [31.8, 287.0], [31.9, 293.0], [32.0, 301.0], [32.1, 310.0], [32.2, 317.0], [32.3, 321.0], [32.4, 328.0], [32.5, 335.0], [32.6, 342.0], [32.7, 349.0], [32.8, 356.0], [32.9, 360.0], [33.0, 366.0], [33.1, 374.0], [33.2, 380.0], [33.3, 386.0], [33.4, 393.0], [33.5, 401.0], [33.6, 405.0], [33.7, 412.0], [33.8, 418.0], [33.9, 422.0], [34.0, 426.0], [34.1, 432.0], [34.2, 442.0], [34.3, 445.0], [34.4, 448.0], [34.5, 452.0], [34.6, 457.0], [34.7, 466.0], [34.8, 472.0], [34.9, 478.0], [35.0, 486.0], [35.1, 490.0], [35.2, 494.0], [35.3, 501.0], [35.4, 508.0], [35.5, 512.0], [35.6, 518.0], [35.7, 523.0], [35.8, 527.0], [35.9, 529.0], [36.0, 536.0], [36.1, 541.0], [36.2, 545.0], [36.3, 552.0], [36.4, 560.0], [36.5, 565.0], [36.6, 568.0], [36.7, 572.0], [36.8, 579.0], [36.9, 583.0], [37.0, 586.0], [37.1, 591.0], [37.2, 596.0], [37.3, 599.0], [37.4, 604.0], [37.5, 609.0], [37.6, 614.0], [37.7, 618.0], [37.8, 623.0], [37.9, 629.0], [38.0, 634.0], [38.1, 638.0], [38.2, 642.0], [38.3, 649.0], [38.4, 652.0], [38.5, 655.0], [38.6, 659.0], [38.7, 663.0], [38.8, 666.0], [38.9, 670.0], [39.0, 675.0], [39.1, 679.0], [39.2, 682.0], [39.3, 684.0], [39.4, 690.0], [39.5, 694.0], [39.6, 698.0], [39.7, 700.0], [39.8, 704.0], [39.9, 707.0], [40.0, 710.0], [40.1, 714.0], [40.2, 720.0], [40.3, 724.0], [40.4, 727.0], [40.5, 730.0], [40.6, 732.0], [40.7, 737.0], [40.8, 739.0], [40.9, 744.0], [41.0, 748.0], [41.1, 752.0], [41.2, 755.0], [41.3, 757.0], [41.4, 761.0], [41.5, 766.0], [41.6, 770.0], [41.7, 775.0], [41.8, 781.0], [41.9, 784.0], [42.0, 786.0], [42.1, 790.0], [42.2, 794.0], [42.3, 797.0], [42.4, 800.0], [42.5, 804.0], [42.6, 809.0], [42.7, 811.0], [42.8, 815.0], [42.9, 820.0], [43.0, 824.0], [43.1, 829.0], [43.2, 831.0], [43.3, 835.0], [43.4, 840.0], [43.5, 843.0], [43.6, 844.0], [43.7, 848.0], [43.8, 851.0], [43.9, 854.0], [44.0, 860.0], [44.1, 863.0], [44.2, 866.0], [44.3, 868.0], [44.4, 873.0], [44.5, 877.0], [44.6, 881.0], [44.7, 884.0], [44.8, 888.0], [44.9, 890.0], [45.0, 893.0], [45.1, 896.0], [45.2, 899.0], [45.3, 904.0], [45.4, 906.0], [45.5, 910.0], [45.6, 914.0], [45.7, 916.0], [45.8, 919.0], [45.9, 923.0], [46.0, 925.0], [46.1, 926.0], [46.2, 929.0], [46.3, 931.0], [46.4, 935.0], [46.5, 937.0], [46.6, 941.0], [46.7, 945.0], [46.8, 948.0], [46.9, 952.0], [47.0, 956.0], [47.1, 959.0], [47.2, 961.0], [47.3, 965.0], [47.4, 967.0], [47.5, 969.0], [47.6, 971.0], [47.7, 974.0], [47.8, 977.0], [47.9, 981.0], [48.0, 982.0], [48.1, 985.0], [48.2, 989.0], [48.3, 991.0], [48.4, 993.0], [48.5, 997.0], [48.6, 1000.0], [48.7, 1003.0], [48.8, 1006.0], [48.9, 1008.0], [49.0, 1011.0], [49.1, 1015.0], [49.2, 1018.0], [49.3, 1021.0], [49.4, 1024.0], [49.5, 1027.0], [49.6, 1030.0], [49.7, 1032.0], [49.8, 1034.0], [49.9, 1038.0], [50.0, 1041.0], [50.1, 1043.0], [50.2, 1046.0], [50.3, 1048.0], [50.4, 1051.0], [50.5, 1054.0], [50.6, 1058.0], [50.7, 1059.0], [50.8, 1063.0], [50.9, 1065.0], [51.0, 1067.0], [51.1, 1070.0], [51.2, 1072.0], [51.3, 1075.0], [51.4, 1077.0], [51.5, 1081.0], [51.6, 1084.0], [51.7, 1087.0], [51.8, 1090.0], [51.9, 1093.0], [52.0, 1098.0], [52.1, 1099.0], [52.2, 1103.0], [52.3, 1107.0], [52.4, 1112.0], [52.5, 1115.0], [52.6, 1119.0], [52.7, 1124.0], [52.8, 1128.0], [52.9, 1131.0], [53.0, 1134.0], [53.1, 1138.0], [53.2, 1142.0], [53.3, 1145.0], [53.4, 1148.0], [53.5, 1151.0], [53.6, 1154.0], [53.7, 1157.0], [53.8, 1160.0], [53.9, 1165.0], [54.0, 1167.0], [54.1, 1174.0], [54.2, 1176.0], [54.3, 1178.0], [54.4, 1181.0], [54.5, 1185.0], [54.6, 1189.0], [54.7, 1192.0], [54.8, 1196.0], [54.9, 1199.0], [55.0, 1200.0], [55.1, 1204.0], [55.2, 1206.0], [55.3, 1210.0], [55.4, 1212.0], [55.5, 1216.0], [55.6, 1219.0], [55.7, 1222.0], [55.8, 1225.0], [55.9, 1229.0], [56.0, 1232.0], [56.1, 1235.0], [56.2, 1239.0], [56.3, 1243.0], [56.4, 1247.0], [56.5, 1250.0], [56.6, 1253.0], [56.7, 1256.0], [56.8, 1259.0], [56.9, 1262.0], [57.0, 1264.0], [57.1, 1266.0], [57.2, 1270.0], [57.3, 1273.0], [57.4, 1277.0], [57.5, 1278.0], [57.6, 1281.0], [57.7, 1286.0], [57.8, 1289.0], [57.9, 1292.0], [58.0, 1296.0], [58.1, 1299.0], [58.2, 1301.0], [58.3, 1304.0], [58.4, 1307.0], [58.5, 1309.0], [58.6, 1313.0], [58.7, 1316.0], [58.8, 1320.0], [58.9, 1323.0], [59.0, 1326.0], [59.1, 1329.0], [59.2, 1332.0], [59.3, 1335.0], [59.4, 1338.0], [59.5, 1340.0], [59.6, 1342.0], [59.7, 1345.0], [59.8, 1349.0], [59.9, 1350.0], [60.0, 1354.0], [60.1, 1357.0], [60.2, 1360.0], [60.3, 1364.0], [60.4, 1366.0], [60.5, 1369.0], [60.6, 1372.0], [60.7, 1375.0], [60.8, 1378.0], [60.9, 1381.0], [61.0, 1384.0], [61.1, 1386.0], [61.2, 1389.0], [61.3, 1394.0], [61.4, 1397.0], [61.5, 1399.0], [61.6, 1402.0], [61.7, 1405.0], [61.8, 1408.0], [61.9, 1412.0], [62.0, 1414.0], [62.1, 1416.0], [62.2, 1419.0], [62.3, 1422.0], [62.4, 1427.0], [62.5, 1431.0], [62.6, 1434.0], [62.7, 1436.0], [62.8, 1438.0], [62.9, 1440.0], [63.0, 1443.0], [63.1, 1446.0], [63.2, 1448.0], [63.3, 1450.0], [63.4, 1452.0], [63.5, 1455.0], [63.6, 1459.0], [63.7, 1465.0], [63.8, 1468.0], [63.9, 1471.0], [64.0, 1475.0], [64.1, 1478.0], [64.2, 1482.0], [64.3, 1485.0], [64.4, 1488.0], [64.5, 1491.0], [64.6, 1494.0], [64.7, 1497.0], [64.8, 1500.0], [64.9, 1502.0], [65.0, 1506.0], [65.1, 1508.0], [65.2, 1510.0], [65.3, 1512.0], [65.4, 1514.0], [65.5, 1518.0], [65.6, 1521.0], [65.7, 1523.0], [65.8, 1526.0], [65.9, 1529.0], [66.0, 1530.0], [66.1, 1532.0], [66.2, 1536.0], [66.3, 1538.0], [66.4, 1541.0], [66.5, 1545.0], [66.6, 1547.0], [66.7, 1549.0], [66.8, 1552.0], [66.9, 1556.0], [67.0, 1558.0], [67.1, 1561.0], [67.2, 1563.0], [67.3, 1565.0], [67.4, 1568.0], [67.5, 1571.0], [67.6, 1573.0], [67.7, 1575.0], [67.8, 1579.0], [67.9, 1582.0], [68.0, 1585.0], [68.1, 1589.0], [68.2, 1592.0], [68.3, 1594.0], [68.4, 1598.0], [68.5, 1600.0], [68.6, 1603.0], [68.7, 1604.0], [68.8, 1607.0], [68.9, 1610.0], [69.0, 1614.0], [69.1, 1618.0], [69.2, 1621.0], [69.3, 1623.0], [69.4, 1626.0], [69.5, 1630.0], [69.6, 1632.0], [69.7, 1635.0], [69.8, 1639.0], [69.9, 1642.0], [70.0, 1644.0], [70.1, 1647.0], [70.2, 1650.0], [70.3, 1654.0], [70.4, 1657.0], [70.5, 1661.0], [70.6, 1666.0], [70.7, 1669.0], [70.8, 1672.0], [70.9, 1676.0], [71.0, 1679.0], [71.1, 1682.0], [71.2, 1684.0], [71.3, 1686.0], [71.4, 1691.0], [71.5, 1694.0], [71.6, 1698.0], [71.7, 1702.0], [71.8, 1705.0], [71.9, 1710.0], [72.0, 1713.0], [72.1, 1716.0], [72.2, 1719.0], [72.3, 1721.0], [72.4, 1724.0], [72.5, 1727.0], [72.6, 1730.0], [72.7, 1734.0], [72.8, 1737.0], [72.9, 1740.0], [73.0, 1741.0], [73.1, 1745.0], [73.2, 1749.0], [73.3, 1756.0], [73.4, 1759.0], [73.5, 1763.0], [73.6, 1766.0], [73.7, 1770.0], [73.8, 1776.0], [73.9, 1780.0], [74.0, 1784.0], [74.1, 1789.0], [74.2, 1794.0], [74.3, 1800.0], [74.4, 1805.0], [74.5, 1809.0], [74.6, 1814.0], [74.7, 1820.0], [74.8, 1826.0], [74.9, 1830.0], [75.0, 1836.0], [75.1, 1840.0], [75.2, 1845.0], [75.3, 1849.0], [75.4, 1854.0], [75.5, 1857.0], [75.6, 1862.0], [75.7, 1867.0], [75.8, 1872.0], [75.9, 1875.0], [76.0, 1879.0], [76.1, 1882.0], [76.2, 1888.0], [76.3, 1892.0], [76.4, 1896.0], [76.5, 1899.0], [76.6, 1904.0], [76.7, 1908.0], [76.8, 1913.0], [76.9, 1919.0], [77.0, 1924.0], [77.1, 1930.0], [77.2, 1935.0], [77.3, 1940.0], [77.4, 1945.0], [77.5, 1950.0], [77.6, 1957.0], [77.7, 1961.0], [77.8, 1966.0], [77.9, 1970.0], [78.0, 1976.0], [78.1, 1979.0], [78.2, 1984.0], [78.3, 1993.0], [78.4, 1997.0], [78.5, 2001.0], [78.6, 2003.0], [78.7, 2009.0], [78.8, 2015.0], [78.9, 2019.0], [79.0, 2023.0], [79.1, 2026.0], [79.2, 2031.0], [79.3, 2037.0], [79.4, 2042.0], [79.5, 2047.0], [79.6, 2052.0], [79.7, 2056.0], [79.8, 2059.0], [79.9, 2064.0], [80.0, 2072.0], [80.1, 2079.0], [80.2, 2084.0], [80.3, 2089.0], [80.4, 2094.0], [80.5, 2100.0], [80.6, 2104.0], [80.7, 2107.0], [80.8, 2112.0], [80.9, 2116.0], [81.0, 2121.0], [81.1, 2126.0], [81.2, 2131.0], [81.3, 2136.0], [81.4, 2141.0], [81.5, 2150.0], [81.6, 2154.0], [81.7, 2159.0], [81.8, 2163.0], [81.9, 2168.0], [82.0, 2173.0], [82.1, 2178.0], [82.2, 2181.0], [82.3, 2188.0], [82.4, 2193.0], [82.5, 2204.0], [82.6, 2210.0], [82.7, 2220.0], [82.8, 2224.0], [82.9, 2231.0], [83.0, 2239.0], [83.1, 2244.0], [83.2, 2248.0], [83.3, 2254.0], [83.4, 2261.0], [83.5, 2267.0], [83.6, 2271.0], [83.7, 2278.0], [83.8, 2284.0], [83.9, 2289.0], [84.0, 2296.0], [84.1, 2304.0], [84.2, 2311.0], [84.3, 2317.0], [84.4, 2321.0], [84.5, 2328.0], [84.6, 2334.0], [84.7, 2339.0], [84.8, 2347.0], [84.9, 2353.0], [85.0, 2359.0], [85.1, 2364.0], [85.2, 2371.0], [85.3, 2377.0], [85.4, 2383.0], [85.5, 2390.0], [85.6, 2395.0], [85.7, 2402.0], [85.8, 2410.0], [85.9, 2419.0], [86.0, 2424.0], [86.1, 2428.0], [86.2, 2433.0], [86.3, 2440.0], [86.4, 2449.0], [86.5, 2457.0], [86.6, 2466.0], [86.7, 2469.0], [86.8, 2478.0], [86.9, 2488.0], [87.0, 2497.0], [87.1, 2502.0], [87.2, 2513.0], [87.3, 2524.0], [87.4, 2535.0], [87.5, 2542.0], [87.6, 2550.0], [87.7, 2560.0], [87.8, 2567.0], [87.9, 2575.0], [88.0, 2589.0], [88.1, 2595.0], [88.2, 2600.0], [88.3, 2607.0], [88.4, 2622.0], [88.5, 2632.0], [88.6, 2641.0], [88.7, 2654.0], [88.8, 2665.0], [88.9, 2677.0], [89.0, 2685.0], [89.1, 2701.0], [89.2, 2710.0], [89.3, 2722.0], [89.4, 2730.0], [89.5, 2741.0], [89.6, 2749.0], [89.7, 2758.0], [89.8, 2763.0], [89.9, 2778.0], [90.0, 2786.0], [90.1, 2794.0], [90.2, 2805.0], [90.3, 2832.0], [90.4, 2844.0], [90.5, 2850.0], [90.6, 2859.0], [90.7, 2869.0], [90.8, 2878.0], [90.9, 2894.0], [91.0, 2905.0], [91.1, 2918.0], [91.2, 2927.0], [91.3, 2940.0], [91.4, 2946.0], [91.5, 2960.0], [91.6, 2969.0], [91.7, 2980.0], [91.8, 2990.0], [91.9, 3002.0], [92.0, 3007.0], [92.1, 3019.0], [92.2, 3030.0], [92.3, 3041.0], [92.4, 3050.0], [92.5, 3062.0], [92.6, 3075.0], [92.7, 3086.0], [92.8, 3095.0], [92.9, 3110.0], [93.0, 3120.0], [93.1, 3133.0], [93.2, 3150.0], [93.3, 3163.0], [93.4, 3178.0], [93.5, 3192.0], [93.6, 3207.0], [93.7, 3224.0], [93.8, 3245.0], [93.9, 3271.0], [94.0, 3285.0], [94.1, 3300.0], [94.2, 3320.0], [94.3, 3344.0], [94.4, 3362.0], [94.5, 3382.0], [94.6, 3400.0], [94.7, 3414.0], [94.8, 3437.0], [94.9, 3449.0], [95.0, 3461.0], [95.1, 3476.0], [95.2, 3499.0], [95.3, 3532.0], [95.4, 3552.0], [95.5, 3580.0], [95.6, 3600.0], [95.7, 3632.0], [95.8, 3655.0], [95.9, 3674.0], [96.0, 3723.0], [96.1, 3745.0], [96.2, 3788.0], [96.3, 3802.0], [96.4, 3833.0], [96.5, 3851.0], [96.6, 3885.0], [96.7, 3901.0], [96.8, 3929.0], [96.9, 3953.0], [97.0, 3993.0], [97.1, 4022.0], [97.2, 4075.0], [97.3, 4100.0], [97.4, 4128.0], [97.5, 4169.0], [97.6, 4197.0], [97.7, 4228.0], [97.8, 4258.0], [97.9, 4318.0], [98.0, 4348.0], [98.1, 4402.0], [98.2, 4450.0], [98.3, 4529.0], [98.4, 4551.0], [98.5, 4603.0], [98.6, 4638.0], [98.7, 4681.0], [98.8, 4745.0], [98.9, 4826.0], [99.0, 4885.0], [99.1, 4927.0], [99.2, 5014.0], [99.3, 5097.0], [99.4, 5173.0], [99.5, 5276.0], [99.6, 5358.0], [99.7, 5443.0], [99.8, 5558.0], [99.9, 5705.0], [100.0, 7917.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3923.0, "series": [{"data": [[0.0, 3923.0], [600.0, 293.0], [700.0, 333.0], [800.0, 348.0], [900.0, 415.0], [1000.0, 414.0], [1100.0, 395.0], [1200.0, 425.0], [1300.0, 428.0], [1400.0, 445.0], [1500.0, 424.0], [1600.0, 368.0], [1700.0, 350.0], [1800.0, 315.0], [1900.0, 266.0], [2000.0, 228.0], [2100.0, 257.0], [2200.0, 209.0], [2300.0, 205.0], [2400.0, 179.0], [2500.0, 154.0], [2600.0, 155.0], [2700.0, 143.0], [2800.0, 140.0], [2900.0, 118.0], [3000.0, 106.0], [3100.0, 106.0], [3200.0, 84.0], [3300.0, 70.0], [3400.0, 77.0], [3500.0, 75.0], [3700.0, 60.0], [3600.0, 48.0], [3800.0, 58.0], [3900.0, 47.0], [4000.0, 47.0], [4100.0, 29.0], [4200.0, 31.0], [4300.0, 37.0], [4600.0, 22.0], [4500.0, 25.0], [4400.0, 20.0], [4800.0, 14.0], [4700.0, 22.0], [4900.0, 10.0], [5000.0, 11.0], [5100.0, 9.0], [5300.0, 6.0], [5200.0, 7.0], [5400.0, 6.0], [5600.0, 4.0], [5700.0, 2.0], [5800.0, 1.0], [6100.0, 4.0], [6000.0, 1.0], [6300.0, 3.0], [6200.0, 1.0], [6400.0, 3.0], [6500.0, 1.0], [6900.0, 1.0], [100.0, 128.0], [200.0, 145.0], [300.0, 213.0], [400.0, 246.0], [500.0, 290.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[100.0, 130.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 3884.0], [600.0, 306.0], [700.0, 353.0], [800.0, 368.0], [900.0, 440.0], [1000.0, 457.0], [1100.0, 372.0], [1200.0, 410.0], [1300.0, 442.0], [1400.0, 425.0], [1500.0, 480.0], [1600.0, 410.0], [1700.0, 345.0], [1800.0, 289.0], [1900.0, 254.0], [2000.0, 262.0], [2100.0, 257.0], [2200.0, 205.0], [2300.0, 214.0], [2400.0, 176.0], [2500.0, 150.0], [2600.0, 118.0], [2700.0, 139.0], [2800.0, 99.0], [2900.0, 124.0], [3000.0, 125.0], [3100.0, 91.0], [3200.0, 72.0], [3300.0, 65.0], [3400.0, 80.0], [3500.0, 50.0], [3600.0, 44.0], [3700.0, 47.0], [3800.0, 51.0], [3900.0, 45.0], [4000.0, 34.0], [4100.0, 40.0], [4200.0, 36.0], [4300.0, 28.0], [4600.0, 31.0], [4500.0, 27.0], [4400.0, 24.0], [4700.0, 18.0], [4800.0, 23.0], [5100.0, 18.0], [5000.0, 16.0], [4900.0, 18.0], [5300.0, 11.0], [5200.0, 13.0], [5500.0, 13.0], [5400.0, 15.0], [5600.0, 7.0], [5700.0, 2.0], [5800.0, 1.0], [6100.0, 1.0], [5900.0, 4.0], [6000.0, 1.0], [6400.0, 1.0], [6700.0, 1.0], [6900.0, 1.0], [6800.0, 1.0], [7900.0, 1.0], [100.0, 133.0], [200.0, 137.0], [300.0, 199.0], [400.0, 229.0], [500.0, 267.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4314.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8972.0, "series": [{"data": [[0.0, 4314.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7481.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 8972.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 5363.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 30.987577639751564, "minX": 1.58767944E12, "maxY": 130.0, "series": [{"data": [[1.58767974E12, 130.0], [1.58767956E12, 130.0], [1.58768004E12, 127.05725490196073], [1.58767986E12, 130.0], [1.58767968E12, 130.0], [1.5876795E12, 102.37753587332996], [1.58767998E12, 130.0], [1.5876798E12, 130.0], [1.58767962E12, 130.0], [1.5876801E12, 76.93319118692253], [1.58767944E12, 30.987577639751564], [1.58767992E12, 130.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876801E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 18.0, "minX": 1.0, "maxY": 2148.599999999999, "series": [{"data": [[5.0, 37.5], [6.0, 34.0], [7.0, 45.0], [8.0, 27.0], [9.0, 34.5], [10.0, 26.0], [11.0, 35.0], [12.0, 28.666666666666668], [13.0, 25.0], [14.0, 29.666666666666668], [15.0, 116.75], [16.0, 28.5], [17.0, 26.0], [18.0, 26.4], [19.0, 38.75], [20.0, 33.5], [21.0, 32.0], [22.0, 31.25], [23.0, 29.2], [24.0, 32.888888888888886], [25.0, 41.5], [26.0, 28.2], [27.0, 22.0], [28.0, 34.14285714285714], [29.0, 30.666666666666668], [30.0, 40.4], [31.0, 28.428571428571427], [32.0, 40.0], [33.0, 21.0], [34.0, 29.333333333333332], [35.0, 32.15384615384616], [36.0, 23.71428571428571], [37.0, 18.0], [38.0, 53.148148148148145], [39.0, 34.375], [40.0, 33.0], [41.0, 28.25], [42.0, 38.583333333333336], [43.0, 34.2], [44.0, 52.666666666666664], [45.0, 32.526315789473685], [46.0, 38.857142857142854], [47.0, 27.0], [48.0, 35.25], [49.0, 46.571428571428584], [50.0, 29.22222222222222], [51.0, 32.5625], [52.0, 48.714285714285715], [53.0, 29.0], [54.0, 35.54545454545455], [55.0, 45.083333333333336], [56.0, 46.46153846153846], [57.0, 27.555555555555557], [58.0, 34.480000000000004], [59.0, 95.41176470588235], [60.0, 124.5], [61.0, 26.72727272727273], [62.0, 153.0], [63.0, 32.800000000000004], [64.0, 24.666666666666664], [65.0, 27.666666666666664], [66.0, 33.66666666666667], [67.0, 81.40000000000002], [68.0, 63.25], [69.0, 180.61111111111111], [70.0, 68.22222222222223], [71.0, 32.18518518518518], [72.0, 27.636363636363637], [73.0, 151.25], [74.0, 110.00000000000001], [75.0, 58.30000000000001], [76.0, 30.31578947368421], [77.0, 21.88888888888889], [78.0, 33.904761904761905], [79.0, 35.10526315789473], [80.0, 84.03448275862068], [81.0, 385.51612903225805], [82.0, 32.125], [83.0, 284.74074074074076], [84.0, 214.74418604651154], [85.0, 151.0], [86.0, 432.6388888888889], [87.0, 247.9615384615385], [88.0, 157.3], [89.0, 74.75], [90.0, 343.6578947368421], [91.0, 544.3181818181818], [92.0, 644.6], [93.0, 667.6666666666666], [94.0, 978.8571428571427], [95.0, 792.7391304347826], [96.0, 816.3000000000001], [97.0, 763.1428571428572], [98.0, 652.939393939394], [99.0, 824.5294117647059], [100.0, 742.0], [101.0, 1016.1000000000001], [102.0, 1139.888888888889], [103.0, 1207.090909090909], [104.0, 1385.0833333333333], [105.0, 1205.0000000000002], [106.0, 1912.2857142857144], [107.0, 1400.25], [108.0, 1333.0], [109.0, 1061.5], [110.0, 1588.028571428572], [111.0, 1686.7], [112.0, 1576.5625], [113.0, 1212.904761904762], [114.0, 1245.5151515151517], [115.0, 1428.2222222222222], [116.0, 1296.0], [117.0, 634.0624999999999], [118.0, 558.469387755102], [119.0, 1025.2083333333333], [120.0, 1435.8928571428569], [121.0, 2148.599999999999], [122.0, 1511.3333333333333], [123.0, 1739.7187500000002], [124.0, 1890.9999999999998], [126.0, 1569.7777777777776], [127.0, 1561.3773584905657], [125.0, 1533.5806451612902], [128.0, 1065.35], [129.0, 1075.2734375], [130.0, 1287.1545083824237], [1.0, 31.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[123.78984615384638, 1194.1130769230701]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 152.0], [3.0, 149.0], [4.0, 169.0], [5.0, 146.0], [6.0, 151.0], [7.0, 166.0], [8.0, 162.0], [9.0, 156.0], [10.0, 162.0], [11.0, 148.0], [12.0, 168.0], [13.0, 162.0], [14.0, 154.0], [15.0, 182.0], [16.0, 166.0], [17.0, 160.0], [18.0, 152.0], [19.0, 166.0], [20.0, 157.0], [21.0, 158.0], [22.0, 152.0], [23.0, 158.0], [24.0, 155.0], [25.0, 156.0], [26.0, 160.0], [27.0, 155.0], [28.0, 149.0], [29.0, 154.0], [30.0, 167.0], [31.0, 152.0], [32.0, 167.0], [33.0, 157.0], [34.0, 164.0], [35.0, 158.0], [36.0, 157.0], [37.0, 165.0], [38.0, 167.0], [39.0, 162.0], [40.0, 160.0], [41.0, 159.0], [42.0, 147.0], [43.0, 156.0], [44.0, 164.0], [45.0, 171.0], [46.0, 157.0], [47.0, 156.0], [48.0, 148.0], [49.0, 163.0], [50.0, 159.0], [51.0, 155.0], [52.0, 155.0], [53.0, 163.0], [54.0, 156.0], [55.0, 147.0], [56.0, 146.0], [57.0, 154.0], [58.0, 164.0], [59.0, 157.0], [60.0, 150.0], [61.0, 167.0], [62.0, 155.0], [63.0, 159.0], [64.0, 161.0], [65.0, 162.0], [66.0, 156.0], [67.0, 153.0], [68.0, 161.0], [69.0, 167.0], [70.0, 184.0], [71.0, 154.0], [72.0, 152.0], [73.0, 158.0], [74.0, 155.0], [75.0, 165.0], [76.0, 162.0], [77.0, 153.0], [78.0, 162.0], [79.0, 178.0], [80.0, 155.0], [81.0, 152.0], [82.0, 155.0], [83.0, 165.0], [84.0, 162.0], [85.0, 156.0], [86.0, 168.0], [87.0, 156.0], [88.0, 146.0], [89.0, 158.0], [90.0, 163.0], [91.0, 153.0], [92.0, 171.0], [93.0, 149.0], [94.0, 189.0], [95.0, 157.0], [96.0, 150.0], [97.0, 157.0], [98.0, 156.0], [99.0, 154.0], [100.0, 158.0], [101.0, 155.0], [102.0, 156.0], [103.0, 148.0], [104.0, 160.0], [105.0, 164.0], [106.0, 157.0], [107.0, 167.0], [108.0, 161.0], [109.0, 160.0], [110.0, 166.0], [111.0, 159.0], [112.0, 161.0], [113.0, 149.0], [114.0, 157.0], [115.0, 151.0], [116.0, 166.0], [117.0, 149.0], [118.0, 168.0], [119.0, 168.0], [120.0, 156.0], [121.0, 165.0], [122.0, 154.0], [123.0, 157.0], [124.0, 159.0], [125.0, 146.0], [126.0, 163.0], [127.0, 159.0], [128.0, 148.0], [129.0, 154.0], [130.0, 157.0], [1.0, 181.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[65.5, 158.79230769230762]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[4.0, 37.0], [5.0, 27.0], [6.0, 25.0], [7.0, 18.0], [8.0, 26.0], [9.0, 37.333333333333336], [10.0, 37.0], [11.0, 34.5], [12.0, 32.0], [13.0, 33.0], [14.0, 26.8], [15.0, 159.7142857142857], [16.0, 22.0], [17.0, 25.75], [18.0, 30.5], [19.0, 38.0], [20.0, 36.714285714285715], [21.0, 30.0], [22.0, 34.0], [23.0, 29.5], [24.0, 38.875], [25.0, 40.333333333333336], [26.0, 36.0], [27.0, 28.333333333333332], [28.0, 33.2], [29.0, 33.888888888888886], [30.0, 40.0], [31.0, 39.75], [32.0, 37.0], [33.0, 25.75], [34.0, 24.42857142857143], [35.0, 28.125000000000004], [36.0, 28.0], [37.0, 31.0], [38.0, 58.30769230769232], [39.0, 33.72727272727273], [40.0, 28.857142857142854], [41.0, 28.28571428571429], [42.0, 41.27272727272727], [43.0, 41.5], [44.0, 36.0], [45.0, 36.53846153846154], [46.0, 26.0], [47.0, 28.9], [48.0, 53.875], [49.0, 41.72222222222222], [50.0, 28.0], [51.0, 29.785714285714285], [52.0, 33.833333333333336], [53.0, 28.77777777777778], [54.0, 33.25], [55.0, 36.22222222222222], [56.0, 52.13333333333333], [57.0, 27.285714285714285], [58.0, 36.5], [59.0, 108.99999999999997], [60.0, 85.0], [61.0, 26.4], [62.0, 141.6875], [63.0, 30.583333333333336], [64.0, 27.75], [65.0, 28.272727272727273], [66.0, 37.99999999999999], [67.0, 79.07142857142858], [68.0, 47.0], [69.0, 150.5], [70.0, 83.08333333333334], [71.0, 28.115384615384617], [72.0, 31.899999999999995], [73.0, 179.99999999999997], [74.0, 64.25], [75.0, 76.04761904761904], [76.0, 36.65384615384615], [77.0, 30.0], [78.0, 32.61904761904762], [79.0, 37.0], [80.0, 114.55172413793105], [81.0, 298.18750000000006], [82.0, 30.124999999999996], [83.0, 239.45000000000002], [84.0, 275.92], [85.0, 207.42857142857144], [86.0, 438.65624999999994], [87.0, 268.95], [88.0, 30.333333333333332], [89.0, 69.0], [90.0, 347.32500000000005], [91.0, 521.8695652173911], [92.0, 569.4285714285714], [93.0, 639.5], [94.0, 846.6666666666666], [95.0, 1083.7058823529412], [96.0, 756.9375000000001], [97.0, 943.03125], [98.0, 702.7142857142858], [99.0, 920.5999999999999], [101.0, 952.8], [102.0, 932.1428571428572], [103.0, 1163.3333333333335], [104.0, 1327.384615384615], [105.0, 1173.519480519481], [106.0, 1310.1666666666667], [107.0, 1460.15], [108.0, 1846.1874999999998], [109.0, 1030.1428571428573], [110.0, 1633.787878787879], [111.0, 1631.1304347826087], [112.0, 1745.0], [113.0, 1277.0000000000002], [114.0, 1204.9722222222222], [115.0, 907.1999999999999], [116.0, 1702.772727272727], [117.0, 511.3076923076923], [118.0, 375.75], [119.0, 1070.1153846153845], [120.0, 1506.9696969696975], [121.0, 2084.0666666666675], [122.0, 1794.2222222222222], [123.0, 1608.885714285714], [124.0, 1970.3076923076922], [125.0, 1565.9090909090905], [126.0, 1517.5625], [127.0, 1397.5681818181815], [128.0, 1075.9705882352941], [129.0, 1093.2706766917295], [130.0, 1295.3369900272012], [1.0, 960.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[123.7877692307695, 1201.1626153846107]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 130.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2141.266666666667, "minX": 1.58767944E12, "maxY": 296050.93333333335, "series": [{"data": [[1.58767974E12, 294854.01666666666], [1.58767956E12, 179607.08333333334], [1.58768004E12, 296050.93333333335], [1.58767986E12, 267332.7], [1.58767968E12, 200543.95], [1.5876795E12, 226953.28333333333], [1.58767998E12, 271218.4666666667], [1.5876798E12, 236450.63333333333], [1.58767962E12, 199715.8], [1.5876801E12, 163302.23333333334], [1.58767944E12, 32878.53333333333], [1.58767992E12, 44760.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58767974E12, 18647.266666666666], [1.58767956E12, 18611.8], [1.58768004E12, 18232.566666666666], [1.58767986E12, 16752.433333333334], [1.58767968E12, 12405.433333333332], [1.5876795E12, 14174.8], [1.58767998E12, 16702.5], [1.5876798E12, 14664.633333333333], [1.58767962E12, 17810.166666666668], [1.5876801E12, 10060.833333333334], [1.58767944E12, 2141.266666666667], [1.58767992E12, 26190.3]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876801E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 32.69230769230771, "minX": 1.58767944E12, "maxY": 2636.004640371229, "series": [{"data": [[1.58767974E12, 1150.557427258807], [1.58767956E12, 1132.8559451219517], [1.58768004E12, 1091.1096319498827], [1.58767986E12, 1549.3040136635357], [1.58767968E12, 2556.3665521191315], [1.5876795E12, 1291.1252631578957], [1.58767998E12, 1592.3552519214322], [1.5876798E12, 1875.8439024390261], [1.58767962E12, 1213.654752233957], [1.5876801E12, 445.2764786795053], [1.58767944E12, 32.69230769230771], [1.58767992E12, 141.93377120963302]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.5876795E12, 158.57317073170728], [1.58767944E12, 159.16666666666666]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58767974E12, 1188.7910906298007], [1.58767956E12, 1166.8094500387313], [1.58768004E12, 1086.7274155538112], [1.58767986E12, 1489.9488054607489], [1.58767968E12, 2636.004640371229], [1.5876795E12, 1268.3417593528818], [1.58767998E12, 1616.969098712445], [1.5876798E12, 1825.375243664717], [1.58767962E12, 1241.5174603174614], [1.5876801E12, 446.41470588235256], [1.58767944E12, 37.07638888888888], [1.58767992E12, 149.722222222222]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876801E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 32.407692307692294, "minX": 1.58767944E12, "maxY": 2635.334106728542, "series": [{"data": [[1.58767974E12, 1150.1470137825427], [1.58767956E12, 1132.7439024390226], [1.58768004E12, 1090.7353171495683], [1.58767986E12, 1549.0512382578981], [1.58767968E12, 2555.991981672394], [1.5876795E12, 1290.9052631578957], [1.58767998E12, 1591.5362937660122], [1.5876798E12, 1875.5512195121944], [1.58767962E12, 1212.9220146222572], [1.5876801E12, 445.0907840440165], [1.58767944E12, 32.407692307692294], [1.58767992E12, 141.80021893814992]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.5876795E12, 158.5487804878049], [1.58767944E12, 159.06250000000003]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58767974E12, 1188.521505376344], [1.58767956E12, 1166.6886134779256], [1.58768004E12, 1086.4406912804393], [1.58767986E12, 1489.6484641638224], [1.58767968E12, 2635.334106728542], [1.5876795E12, 1268.08493427705], [1.58767998E12, 1616.4523605150216], [1.5876798E12, 1824.963937621833], [1.58767962E12, 1240.76349206349], [1.5876801E12, 446.19264705882404], [1.58767944E12, 36.83333333333332], [1.58767992E12, 149.68355119825713]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876801E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.029556650246305403, "minX": 1.58767944E12, "maxY": 1.2916666666666665, "series": [{"data": [[1.58767974E12, 0.28254211332312434], [1.58767956E12, 0.3399390243902436], [1.58768004E12, 0.3860610806577914], [1.58767986E12, 0.3424423569598632], [1.58767968E12, 0.41122565864833927], [1.5876795E12, 0.33894736842105255], [1.58767998E12, 0.4235695986336472], [1.5876798E12, 0.28878048780487786], [1.58767962E12, 0.26482534524776574], [1.5876801E12, 0.1072902338376891], [1.58767944E12, 0.2692307692307691], [1.58767992E12, 0.029556650246305403]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.5876795E12, 0.7439024390243902], [1.58767944E12, 1.2916666666666665]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58767974E12, 0.43778801843317955], [1.58767956E12, 0.5499612703330745], [1.58768004E12, 0.5184603299293012], [1.58767986E12, 0.4155290102389082], [1.58767968E12, 0.42923433874709965], [1.5876795E12, 0.5773508594539932], [1.58767998E12, 0.4214592274678105], [1.5876798E12, 0.43372319688109173], [1.58767962E12, 0.5142857142857145], [1.5876801E12, 0.4573529411764706], [1.58767944E12, 0.5763888888888887], [1.58767992E12, 0.4123093681917207]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876801E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.58767944E12, "maxY": 7917.0, "series": [{"data": [[1.58767974E12, 5533.0], [1.58767956E12, 4910.0], [1.58768004E12, 2950.0], [1.58767986E12, 4255.0], [1.58767968E12, 7917.0], [1.5876795E12, 6124.0], [1.58767998E12, 6055.0], [1.5876798E12, 5705.0], [1.58767962E12, 5195.0], [1.5876801E12, 2165.0], [1.58767944E12, 529.0], [1.58767992E12, 4408.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58767974E12, 13.0], [1.58767956E12, 147.0], [1.58768004E12, 15.0], [1.58767986E12, 16.0], [1.58767968E12, 75.0], [1.5876795E12, 13.0], [1.58767998E12, 463.0], [1.5876798E12, 17.0], [1.58767962E12, 61.0], [1.5876801E12, 15.0], [1.58767944E12, 13.0], [1.58767992E12, 162.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58767974E12, 2556.2000000000003], [1.58767956E12, 2533.3000000000006], [1.58768004E12, 1862.2000000000007], [1.58767986E12, 2855.0], [1.58767968E12, 4344.4000000000015], [1.5876795E12, 2913.0], [1.58767998E12, 2091.500000000001], [1.5876798E12, 3838.5], [1.58767962E12, 3211.2000000000003], [1.5876801E12, 1203.2], [1.58767944E12, 157.0], [1.58767992E12, 3463.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58767974E12, 4323.299999999998], [1.58767956E12, 4217.16], [1.58768004E12, 2495.959999999999], [1.58767986E12, 3576.0], [1.58767968E12, 6121.04], [1.5876795E12, 4627.24], [1.58767998E12, 5414.0], [1.5876798E12, 4791.9299999999985], [1.58767962E12, 4959.7300000000005], [1.5876801E12, 1889.6800000000003], [1.58767944E12, 225.03999999999905], [1.58767992E12, 4347.46]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58767974E12, 3156.3999999999987], [1.58767956E12, 3194.0], [1.58768004E12, 2147.0], [1.58767986E12, 3129.6000000000013], [1.58767968E12, 4902.0], [1.5876795E12, 3579.8999999999996], [1.58767998E12, 3587.0], [1.5876798E12, 4210.9], [1.58767962E12, 3874.8999999999987], [1.5876801E12, 1412.1999999999998], [1.58767944E12, 164.84999999999997], [1.58767992E12, 3953.450000000001]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876801E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 2381.5, "series": [{"data": [[2.0, 101.5], [4.0, 91.5], [5.0, 45.0], [6.0, 31.0], [7.0, 39.0], [8.0, 30.0], [9.0, 34.0], [10.0, 29.5], [11.0, 760.0], [12.0, 1249.5], [13.0, 48.0], [14.0, 2381.5], [15.0, 2203.5], [16.0, 1514.0], [17.0, 426.5], [18.0, 40.0], [19.0, 2028.0], [20.0, 1756.0], [21.0, 2367.0], [22.0, 2250.0], [23.0, 1607.0], [24.0, 978.5], [25.0, 1355.0], [26.0, 2093.5], [27.0, 1961.5], [28.0, 1816.5], [29.0, 1788.5], [30.0, 1876.0], [31.0, 1763.0], [32.0, 1606.0], [33.0, 1930.5], [35.0, 1500.0], [34.0, 1641.0], [37.0, 1231.0], [36.0, 1475.5], [39.0, 1275.0], [38.0, 1221.0], [41.0, 1390.0], [40.0, 1264.5], [43.0, 1545.0], [42.0, 1185.5], [44.0, 1171.5], [45.0, 1129.0], [46.0, 1535.5], [47.0, 1142.0], [48.0, 894.0], [49.0, 1113.0], [51.0, 1447.0], [50.0, 1213.0], [53.0, 2111.0], [52.0, 1104.0], [54.0, 1441.0], [55.0, 831.0], [56.0, 994.0], [57.0, 937.0], [58.0, 43.5], [59.0, 26.0], [60.0, 1082.0], [61.0, 720.5], [62.0, 126.0], [67.0, 749.0], [64.0, 654.5], [66.0, 62.0], [65.0, 28.0], [68.0, 31.5], [71.0, 32.5], [70.0, 23.0], [69.0, 23.0], [72.0, 59.0], [76.0, 692.0], [78.0, 691.5], [77.0, 30.0], [81.0, 88.0], [82.0, 1594.0], [93.0, 909.0], [1.0, 106.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[35.0, 901.0], [34.0, 3.0], [38.0, 1320.0], [48.0, 2.0], [51.0, 2.0], [52.0, 2.0], [53.0, 2.0], [54.0, 1511.0], [55.0, 2.0], [56.0, 2.0], [57.0, 2.0], [58.0, 2.0], [59.0, 2.0], [61.0, 2.0], [60.0, 2.0], [62.0, 2.0], [64.0, 2.0], [66.0, 2.0], [67.0, 2.0], [65.0, 2.0], [69.0, 2.0], [70.0, 2.0], [68.0, 1337.5], [71.0, 2.0], [74.0, 2.0], [75.0, 2.0], [73.0, 2.0], [72.0, 2.0], [76.0, 1728.0], [77.0, 2.0], [79.0, 2.0], [78.0, 2.0], [81.0, 2.0], [82.0, 3.0], [80.0, 2.0], [84.0, 2.0], [87.0, 2.0], [86.0, 2.0], [91.0, 2.0], [94.0, 2.0], [93.0, 2.0], [108.0, 705.5], [12.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 108.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 2381.5, "series": [{"data": [[2.0, 101.5], [4.0, 91.0], [5.0, 44.0], [6.0, 30.5], [7.0, 38.5], [8.0, 30.0], [9.0, 34.0], [10.0, 29.0], [11.0, 760.0], [12.0, 1249.5], [13.0, 48.0], [14.0, 2381.5], [15.0, 2201.5], [16.0, 1514.0], [17.0, 426.5], [18.0, 40.0], [19.0, 2028.0], [20.0, 1756.0], [21.0, 2367.0], [22.0, 2250.0], [23.0, 1607.0], [24.0, 978.0], [25.0, 1355.0], [26.0, 2090.5], [27.0, 1961.5], [28.0, 1816.5], [29.0, 1788.5], [30.0, 1876.0], [31.0, 1763.0], [32.0, 1606.0], [33.0, 1930.0], [35.0, 1500.0], [34.0, 1641.0], [37.0, 1231.0], [36.0, 1475.5], [39.0, 1275.0], [38.0, 1221.0], [41.0, 1390.0], [40.0, 1264.5], [43.0, 1545.0], [42.0, 1184.0], [44.0, 1171.5], [45.0, 1129.0], [46.0, 1535.5], [47.0, 1139.5], [48.0, 894.0], [49.0, 1113.0], [51.0, 1447.0], [50.0, 1211.0], [53.0, 2111.0], [52.0, 1104.0], [54.0, 1436.0], [55.0, 831.0], [56.0, 994.0], [57.0, 937.0], [58.0, 43.0], [59.0, 25.0], [60.0, 1082.0], [61.0, 720.0], [62.0, 126.0], [67.0, 749.0], [64.0, 654.5], [66.0, 62.0], [65.0, 28.0], [68.0, 31.0], [71.0, 32.0], [70.0, 23.0], [69.0, 23.0], [72.0, 58.0], [76.0, 692.0], [78.0, 691.0], [77.0, 30.0], [81.0, 88.0], [82.0, 1594.0], [93.0, 909.0], [1.0, 104.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[35.0, 901.0], [34.0, 3.0], [38.0, 1320.0], [48.0, 2.0], [51.0, 2.0], [52.0, 2.0], [53.0, 2.0], [54.0, 1511.0], [55.0, 2.0], [56.0, 2.0], [57.0, 2.0], [58.0, 2.0], [59.0, 2.0], [61.0, 2.0], [60.0, 2.0], [62.0, 2.0], [64.0, 2.0], [66.0, 2.0], [67.0, 2.0], [65.0, 2.0], [69.0, 2.0], [70.0, 2.0], [68.0, 1337.5], [71.0, 2.0], [74.0, 2.0], [75.0, 2.0], [73.0, 2.0], [72.0, 2.0], [76.0, 1728.0], [77.0, 2.0], [79.0, 2.0], [78.0, 2.0], [81.0, 2.0], [82.0, 3.0], [80.0, 2.0], [84.0, 2.0], [87.0, 2.0], [86.0, 2.0], [91.0, 2.0], [94.0, 2.0], [93.0, 2.0], [108.0, 705.5], [12.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 108.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.4, "minX": 1.58767944E12, "maxY": 62.38333333333333, "series": [{"data": [[1.58767974E12, 42.38333333333333], [1.58767956E12, 42.43333333333333], [1.58768004E12, 42.6], [1.58767986E12, 38.06666666666667], [1.58767968E12, 29.133333333333333], [1.5876795E12, 34.6], [1.58767998E12, 38.13333333333333], [1.5876798E12, 35.35], [1.58767962E12, 42.38333333333333], [1.5876801E12, 22.633333333333333], [1.58767944E12, 5.4], [1.58767992E12, 62.38333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876801E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.58767944E12, "maxY": 55.916666666666664, "series": [{"data": [[1.58767974E12, 42.28333333333333], [1.58767956E12, 25.333333333333332], [1.58768004E12, 42.5], [1.58767986E12, 38.35], [1.58767968E12, 28.783333333333335], [1.5876795E12, 33.68333333333333], [1.58767998E12, 38.93333333333333], [1.5876798E12, 33.93333333333333], [1.58767962E12, 28.366666666666667], [1.5876801E12, 23.45], [1.58767944E12, 5.366666666666666], [1.58767992E12, 5.133333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58767974E12, 1.1833333333333333], [1.58767956E12, 18.05], [1.58767986E12, 0.7], [1.58767968E12, 0.13333333333333333], [1.5876798E12, 0.25], [1.58767962E12, 13.15], [1.58767992E12, 55.916666666666664]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876801E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.58767944E12, "maxY": 28.016666666666666, "series": [{"data": [[1.5876795E12, 1.3666666666666667], [1.58767944E12, 0.8]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58767974E12, 21.0], [1.58767956E12, 12.683333333333334], [1.58768004E12, 21.283333333333335], [1.58767986E12, 19.216666666666665], [1.58767968E12, 14.5], [1.5876795E12, 15.833333333333334], [1.58767998E12, 19.516666666666666], [1.5876798E12, 16.95], [1.58767962E12, 13.983333333333333], [1.5876801E12, 12.116666666666667], [1.58767944E12, 2.1666666666666665], [1.58767992E12, 2.433333333333333]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58767974E12, 0.7666666666666667], [1.58767956E12, 9.183333333333334], [1.58767986E12, 0.3], [1.58767968E12, 0.05], [1.5876798E12, 0.13333333333333333], [1.58767962E12, 6.533333333333333], [1.58767992E12, 28.016666666666666]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.58767974E12, 21.283333333333335], [1.58767956E12, 12.65], [1.58768004E12, 21.216666666666665], [1.58767986E12, 19.133333333333333], [1.58767968E12, 14.283333333333333], [1.5876795E12, 16.483333333333334], [1.58767998E12, 19.416666666666668], [1.5876798E12, 16.983333333333334], [1.58767962E12, 14.383333333333333], [1.5876801E12, 11.333333333333334], [1.58767944E12, 2.4], [1.58767992E12, 2.7]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58767974E12, 0.4166666666666667], [1.58767956E12, 8.866666666666667], [1.58767986E12, 0.4], [1.58767968E12, 0.08333333333333333], [1.5876798E12, 0.11666666666666667], [1.58767962E12, 6.616666666666666], [1.58767992E12, 27.9]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876801E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.58767944E12, "maxY": 55.916666666666664, "series": [{"data": [[1.58767974E12, 42.28333333333333], [1.58767956E12, 25.333333333333332], [1.58768004E12, 42.5], [1.58767986E12, 38.35], [1.58767968E12, 28.783333333333335], [1.5876795E12, 33.68333333333333], [1.58767998E12, 38.93333333333333], [1.5876798E12, 33.93333333333333], [1.58767962E12, 28.366666666666667], [1.5876801E12, 23.45], [1.58767944E12, 5.366666666666666], [1.58767992E12, 5.133333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58767974E12, 1.1833333333333333], [1.58767956E12, 18.05], [1.58767986E12, 0.7], [1.58767968E12, 0.13333333333333333], [1.5876798E12, 0.25], [1.58767962E12, 13.15], [1.58767992E12, 55.916666666666664]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876801E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

