/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 9172.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 2.0], [17.7, 2.0], [17.8, 2.0], [17.9, 2.0], [18.0, 2.0], [18.1, 2.0], [18.2, 2.0], [18.3, 2.0], [18.4, 2.0], [18.5, 2.0], [18.6, 2.0], [18.7, 2.0], [18.8, 2.0], [18.9, 2.0], [19.0, 2.0], [19.1, 2.0], [19.2, 2.0], [19.3, 2.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 2.0], [20.0, 2.0], [20.1, 2.0], [20.2, 2.0], [20.3, 2.0], [20.4, 2.0], [20.5, 2.0], [20.6, 2.0], [20.7, 2.0], [20.8, 2.0], [20.9, 2.0], [21.0, 2.0], [21.1, 2.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 2.0], [21.6, 2.0], [21.7, 2.0], [21.8, 2.0], [21.9, 2.0], [22.0, 2.0], [22.1, 2.0], [22.2, 2.0], [22.3, 2.0], [22.4, 2.0], [22.5, 2.0], [22.6, 2.0], [22.7, 2.0], [22.8, 2.0], [22.9, 2.0], [23.0, 2.0], [23.1, 2.0], [23.2, 2.0], [23.3, 2.0], [23.4, 2.0], [23.5, 2.0], [23.6, 2.0], [23.7, 2.0], [23.8, 2.0], [23.9, 2.0], [24.0, 2.0], [24.1, 2.0], [24.2, 2.0], [24.3, 2.0], [24.4, 2.0], [24.5, 2.0], [24.6, 2.0], [24.7, 2.0], [24.8, 2.0], [24.9, 2.0], [25.0, 2.0], [25.1, 2.0], [25.2, 2.0], [25.3, 2.0], [25.4, 2.0], [25.5, 2.0], [25.6, 2.0], [25.7, 2.0], [25.8, 2.0], [25.9, 2.0], [26.0, 2.0], [26.1, 2.0], [26.2, 2.0], [26.3, 2.0], [26.4, 2.0], [26.5, 2.0], [26.6, 2.0], [26.7, 2.0], [26.8, 2.0], [26.9, 2.0], [27.0, 2.0], [27.1, 2.0], [27.2, 2.0], [27.3, 2.0], [27.4, 2.0], [27.5, 2.0], [27.6, 2.0], [27.7, 2.0], [27.8, 2.0], [27.9, 2.0], [28.0, 2.0], [28.1, 2.0], [28.2, 2.0], [28.3, 2.0], [28.4, 2.0], [28.5, 2.0], [28.6, 2.0], [28.7, 2.0], [28.8, 2.0], [28.9, 2.0], [29.0, 2.0], [29.1, 2.0], [29.2, 2.0], [29.3, 2.0], [29.4, 2.0], [29.5, 2.0], [29.6, 2.0], [29.7, 2.0], [29.8, 2.0], [29.9, 2.0], [30.0, 2.0], [30.1, 2.0], [30.2, 2.0], [30.3, 2.0], [30.4, 2.0], [30.5, 2.0], [30.6, 2.0], [30.7, 2.0], [30.8, 2.0], [30.9, 2.0], [31.0, 2.0], [31.1, 2.0], [31.2, 2.0], [31.3, 2.0], [31.4, 2.0], [31.5, 2.0], [31.6, 2.0], [31.7, 2.0], [31.8, 2.0], [31.9, 2.0], [32.0, 2.0], [32.1, 2.0], [32.2, 2.0], [32.3, 2.0], [32.4, 2.0], [32.5, 2.0], [32.6, 2.0], [32.7, 2.0], [32.8, 2.0], [32.9, 2.0], [33.0, 2.0], [33.1, 2.0], [33.2, 2.0], [33.3, 2.0], [33.4, 2.0], [33.5, 2.0], [33.6, 2.0], [33.7, 2.0], [33.8, 2.0], [33.9, 2.0], [34.0, 2.0], [34.1, 2.0], [34.2, 2.0], [34.3, 2.0], [34.4, 2.0], [34.5, 2.0], [34.6, 2.0], [34.7, 2.0], [34.8, 2.0], [34.9, 2.0], [35.0, 2.0], [35.1, 2.0], [35.2, 2.0], [35.3, 2.0], [35.4, 2.0], [35.5, 2.0], [35.6, 2.0], [35.7, 2.0], [35.8, 2.0], [35.9, 2.0], [36.0, 2.0], [36.1, 2.0], [36.2, 2.0], [36.3, 2.0], [36.4, 2.0], [36.5, 2.0], [36.6, 2.0], [36.7, 2.0], [36.8, 2.0], [36.9, 2.0], [37.0, 2.0], [37.1, 2.0], [37.2, 2.0], [37.3, 2.0], [37.4, 2.0], [37.5, 2.0], [37.6, 2.0], [37.7, 2.0], [37.8, 2.0], [37.9, 2.0], [38.0, 2.0], [38.1, 2.0], [38.2, 2.0], [38.3, 2.0], [38.4, 2.0], [38.5, 2.0], [38.6, 2.0], [38.7, 2.0], [38.8, 2.0], [38.9, 2.0], [39.0, 2.0], [39.1, 2.0], [39.2, 2.0], [39.3, 2.0], [39.4, 2.0], [39.5, 2.0], [39.6, 2.0], [39.7, 2.0], [39.8, 2.0], [39.9, 2.0], [40.0, 2.0], [40.1, 2.0], [40.2, 2.0], [40.3, 2.0], [40.4, 3.0], [40.5, 3.0], [40.6, 3.0], [40.7, 3.0], [40.8, 3.0], [40.9, 3.0], [41.0, 3.0], [41.1, 3.0], [41.2, 3.0], [41.3, 3.0], [41.4, 3.0], [41.5, 3.0], [41.6, 3.0], [41.7, 3.0], [41.8, 3.0], [41.9, 3.0], [42.0, 3.0], [42.1, 3.0], [42.2, 3.0], [42.3, 3.0], [42.4, 3.0], [42.5, 3.0], [42.6, 3.0], [42.7, 3.0], [42.8, 3.0], [42.9, 3.0], [43.0, 3.0], [43.1, 3.0], [43.2, 3.0], [43.3, 3.0], [43.4, 3.0], [43.5, 3.0], [43.6, 4.0], [43.7, 4.0], [43.8, 4.0], [43.9, 4.0], [44.0, 5.0], [44.1, 6.0], [44.2, 11.0], [44.3, 24.0], [44.4, 28.0], [44.5, 33.0], [44.6, 36.0], [44.7, 39.0], [44.8, 44.0], [44.9, 49.0], [45.0, 57.0], [45.1, 70.0], [45.2, 88.0], [45.3, 99.0], [45.4, 115.0], [45.5, 137.0], [45.6, 166.0], [45.7, 178.0], [45.8, 222.0], [45.9, 283.0], [46.0, 336.0], [46.1, 361.0], [46.2, 400.0], [46.3, 434.0], [46.4, 451.0], [46.5, 485.0], [46.6, 514.0], [46.7, 536.0], [46.8, 565.0], [46.9, 589.0], [47.0, 616.0], [47.1, 642.0], [47.2, 666.0], [47.3, 693.0], [47.4, 717.0], [47.5, 745.0], [47.6, 762.0], [47.7, 785.0], [47.8, 798.0], [47.9, 820.0], [48.0, 840.0], [48.1, 851.0], [48.2, 867.0], [48.3, 881.0], [48.4, 899.0], [48.5, 912.0], [48.6, 930.0], [48.7, 941.0], [48.8, 954.0], [48.9, 968.0], [49.0, 980.0], [49.1, 992.0], [49.2, 1009.0], [49.3, 1015.0], [49.4, 1027.0], [49.5, 1040.0], [49.6, 1050.0], [49.7, 1064.0], [49.8, 1074.0], [49.9, 1086.0], [50.0, 1094.0], [50.1, 1101.0], [50.2, 1113.0], [50.3, 1122.0], [50.4, 1131.0], [50.5, 1136.0], [50.6, 1147.0], [50.7, 1157.0], [50.8, 1166.0], [50.9, 1178.0], [51.0, 1186.0], [51.1, 1195.0], [51.2, 1200.0], [51.3, 1208.0], [51.4, 1216.0], [51.5, 1224.0], [51.6, 1233.0], [51.7, 1239.0], [51.8, 1245.0], [51.9, 1251.0], [52.0, 1257.0], [52.1, 1269.0], [52.2, 1276.0], [52.3, 1287.0], [52.4, 1297.0], [52.5, 1304.0], [52.6, 1313.0], [52.7, 1322.0], [52.8, 1330.0], [52.9, 1335.0], [53.0, 1342.0], [53.1, 1346.0], [53.2, 1355.0], [53.3, 1364.0], [53.4, 1372.0], [53.5, 1382.0], [53.6, 1391.0], [53.7, 1397.0], [53.8, 1401.0], [53.9, 1410.0], [54.0, 1415.0], [54.1, 1423.0], [54.2, 1430.0], [54.3, 1437.0], [54.4, 1445.0], [54.5, 1452.0], [54.6, 1463.0], [54.7, 1472.0], [54.8, 1481.0], [54.9, 1487.0], [55.0, 1493.0], [55.1, 1498.0], [55.2, 1504.0], [55.3, 1510.0], [55.4, 1514.0], [55.5, 1519.0], [55.6, 1525.0], [55.7, 1530.0], [55.8, 1538.0], [55.9, 1543.0], [56.0, 1551.0], [56.1, 1559.0], [56.2, 1566.0], [56.3, 1572.0], [56.4, 1577.0], [56.5, 1582.0], [56.6, 1591.0], [56.7, 1594.0], [56.8, 1598.0], [56.9, 1605.0], [57.0, 1609.0], [57.1, 1615.0], [57.2, 1620.0], [57.3, 1627.0], [57.4, 1632.0], [57.5, 1640.0], [57.6, 1645.0], [57.7, 1648.0], [57.8, 1651.0], [57.9, 1657.0], [58.0, 1664.0], [58.1, 1669.0], [58.2, 1675.0], [58.3, 1679.0], [58.4, 1686.0], [58.5, 1693.0], [58.6, 1698.0], [58.7, 1703.0], [58.8, 1708.0], [58.9, 1715.0], [59.0, 1718.0], [59.1, 1726.0], [59.2, 1733.0], [59.3, 1737.0], [59.4, 1744.0], [59.5, 1752.0], [59.6, 1757.0], [59.7, 1763.0], [59.8, 1769.0], [59.9, 1773.0], [60.0, 1778.0], [60.1, 1786.0], [60.2, 1790.0], [60.3, 1798.0], [60.4, 1805.0], [60.5, 1810.0], [60.6, 1815.0], [60.7, 1821.0], [60.8, 1827.0], [60.9, 1832.0], [61.0, 1839.0], [61.1, 1844.0], [61.2, 1851.0], [61.3, 1856.0], [61.4, 1862.0], [61.5, 1870.0], [61.6, 1875.0], [61.7, 1881.0], [61.8, 1889.0], [61.9, 1896.0], [62.0, 1903.0], [62.1, 1907.0], [62.2, 1912.0], [62.3, 1917.0], [62.4, 1921.0], [62.5, 1927.0], [62.6, 1930.0], [62.7, 1938.0], [62.8, 1942.0], [62.9, 1950.0], [63.0, 1956.0], [63.1, 1963.0], [63.2, 1969.0], [63.3, 1975.0], [63.4, 1979.0], [63.5, 1989.0], [63.6, 1993.0], [63.7, 1999.0], [63.8, 2004.0], [63.9, 2009.0], [64.0, 2014.0], [64.1, 2021.0], [64.2, 2028.0], [64.3, 2036.0], [64.4, 2040.0], [64.5, 2046.0], [64.6, 2052.0], [64.7, 2058.0], [64.8, 2063.0], [64.9, 2071.0], [65.0, 2075.0], [65.1, 2081.0], [65.2, 2087.0], [65.3, 2092.0], [65.4, 2097.0], [65.5, 2105.0], [65.6, 2110.0], [65.7, 2118.0], [65.8, 2121.0], [65.9, 2129.0], [66.0, 2136.0], [66.1, 2140.0], [66.2, 2145.0], [66.3, 2150.0], [66.4, 2154.0], [66.5, 2161.0], [66.6, 2166.0], [66.7, 2170.0], [66.8, 2174.0], [66.9, 2181.0], [67.0, 2188.0], [67.1, 2192.0], [67.2, 2198.0], [67.3, 2203.0], [67.4, 2208.0], [67.5, 2213.0], [67.6, 2219.0], [67.7, 2225.0], [67.8, 2227.0], [67.9, 2233.0], [68.0, 2237.0], [68.1, 2242.0], [68.2, 2248.0], [68.3, 2253.0], [68.4, 2258.0], [68.5, 2264.0], [68.6, 2271.0], [68.7, 2281.0], [68.8, 2286.0], [68.9, 2291.0], [69.0, 2297.0], [69.1, 2301.0], [69.2, 2307.0], [69.3, 2313.0], [69.4, 2319.0], [69.5, 2325.0], [69.6, 2331.0], [69.7, 2339.0], [69.8, 2344.0], [69.9, 2349.0], [70.0, 2354.0], [70.1, 2363.0], [70.2, 2367.0], [70.3, 2378.0], [70.4, 2384.0], [70.5, 2387.0], [70.6, 2394.0], [70.7, 2401.0], [70.8, 2408.0], [70.9, 2413.0], [71.0, 2419.0], [71.1, 2425.0], [71.2, 2430.0], [71.3, 2439.0], [71.4, 2445.0], [71.5, 2449.0], [71.6, 2455.0], [71.7, 2459.0], [71.8, 2466.0], [71.9, 2471.0], [72.0, 2475.0], [72.1, 2482.0], [72.2, 2486.0], [72.3, 2494.0], [72.4, 2500.0], [72.5, 2505.0], [72.6, 2510.0], [72.7, 2515.0], [72.8, 2521.0], [72.9, 2527.0], [73.0, 2532.0], [73.1, 2540.0], [73.2, 2545.0], [73.3, 2550.0], [73.4, 2555.0], [73.5, 2559.0], [73.6, 2566.0], [73.7, 2571.0], [73.8, 2576.0], [73.9, 2582.0], [74.0, 2590.0], [74.1, 2596.0], [74.2, 2602.0], [74.3, 2609.0], [74.4, 2617.0], [74.5, 2622.0], [74.6, 2627.0], [74.7, 2635.0], [74.8, 2641.0], [74.9, 2651.0], [75.0, 2657.0], [75.1, 2663.0], [75.2, 2671.0], [75.3, 2678.0], [75.4, 2688.0], [75.5, 2695.0], [75.6, 2702.0], [75.7, 2708.0], [75.8, 2718.0], [75.9, 2722.0], [76.0, 2727.0], [76.1, 2734.0], [76.2, 2740.0], [76.3, 2744.0], [76.4, 2749.0], [76.5, 2755.0], [76.6, 2759.0], [76.7, 2769.0], [76.8, 2773.0], [76.9, 2779.0], [77.0, 2784.0], [77.1, 2792.0], [77.2, 2799.0], [77.3, 2804.0], [77.4, 2813.0], [77.5, 2816.0], [77.6, 2827.0], [77.7, 2833.0], [77.8, 2838.0], [77.9, 2843.0], [78.0, 2850.0], [78.1, 2855.0], [78.2, 2860.0], [78.3, 2866.0], [78.4, 2871.0], [78.5, 2877.0], [78.6, 2884.0], [78.7, 2889.0], [78.8, 2901.0], [78.9, 2905.0], [79.0, 2913.0], [79.1, 2918.0], [79.2, 2924.0], [79.3, 2928.0], [79.4, 2934.0], [79.5, 2939.0], [79.6, 2945.0], [79.7, 2954.0], [79.8, 2960.0], [79.9, 2966.0], [80.0, 2972.0], [80.1, 2977.0], [80.2, 2982.0], [80.3, 2988.0], [80.4, 2991.0], [80.5, 2995.0], [80.6, 2997.0], [80.7, 3004.0], [80.8, 3010.0], [80.9, 3013.0], [81.0, 3018.0], [81.1, 3024.0], [81.2, 3029.0], [81.3, 3034.0], [81.4, 3038.0], [81.5, 3042.0], [81.6, 3051.0], [81.7, 3058.0], [81.8, 3063.0], [81.9, 3067.0], [82.0, 3074.0], [82.1, 3082.0], [82.2, 3090.0], [82.3, 3095.0], [82.4, 3101.0], [82.5, 3107.0], [82.6, 3113.0], [82.7, 3120.0], [82.8, 3124.0], [82.9, 3132.0], [83.0, 3140.0], [83.1, 3151.0], [83.2, 3159.0], [83.3, 3168.0], [83.4, 3175.0], [83.5, 3180.0], [83.6, 3187.0], [83.7, 3193.0], [83.8, 3198.0], [83.9, 3205.0], [84.0, 3213.0], [84.1, 3221.0], [84.2, 3227.0], [84.3, 3235.0], [84.4, 3239.0], [84.5, 3243.0], [84.6, 3251.0], [84.7, 3262.0], [84.8, 3268.0], [84.9, 3272.0], [85.0, 3277.0], [85.1, 3282.0], [85.2, 3288.0], [85.3, 3295.0], [85.4, 3305.0], [85.5, 3313.0], [85.6, 3319.0], [85.7, 3325.0], [85.8, 3330.0], [85.9, 3337.0], [86.0, 3346.0], [86.1, 3350.0], [86.2, 3360.0], [86.3, 3372.0], [86.4, 3377.0], [86.5, 3386.0], [86.6, 3392.0], [86.7, 3399.0], [86.8, 3406.0], [86.9, 3413.0], [87.0, 3422.0], [87.1, 3426.0], [87.2, 3432.0], [87.3, 3440.0], [87.4, 3447.0], [87.5, 3456.0], [87.6, 3461.0], [87.7, 3468.0], [87.8, 3475.0], [87.9, 3484.0], [88.0, 3490.0], [88.1, 3498.0], [88.2, 3505.0], [88.3, 3512.0], [88.4, 3523.0], [88.5, 3533.0], [88.6, 3539.0], [88.7, 3546.0], [88.8, 3552.0], [88.9, 3559.0], [89.0, 3570.0], [89.1, 3579.0], [89.2, 3587.0], [89.3, 3597.0], [89.4, 3606.0], [89.5, 3612.0], [89.6, 3622.0], [89.7, 3630.0], [89.8, 3640.0], [89.9, 3651.0], [90.0, 3660.0], [90.1, 3670.0], [90.2, 3676.0], [90.3, 3685.0], [90.4, 3697.0], [90.5, 3703.0], [90.6, 3711.0], [90.7, 3720.0], [90.8, 3728.0], [90.9, 3735.0], [91.0, 3747.0], [91.1, 3757.0], [91.2, 3766.0], [91.3, 3776.0], [91.4, 3787.0], [91.5, 3799.0], [91.6, 3807.0], [91.7, 3815.0], [91.8, 3828.0], [91.9, 3836.0], [92.0, 3848.0], [92.1, 3857.0], [92.2, 3869.0], [92.3, 3877.0], [92.4, 3892.0], [92.5, 3904.0], [92.6, 3915.0], [92.7, 3929.0], [92.8, 3941.0], [92.9, 3958.0], [93.0, 3970.0], [93.1, 3978.0], [93.2, 3989.0], [93.3, 4001.0], [93.4, 4011.0], [93.5, 4027.0], [93.6, 4040.0], [93.7, 4055.0], [93.8, 4069.0], [93.9, 4079.0], [94.0, 4097.0], [94.1, 4110.0], [94.2, 4123.0], [94.3, 4138.0], [94.4, 4152.0], [94.5, 4167.0], [94.6, 4180.0], [94.7, 4192.0], [94.8, 4204.0], [94.9, 4217.0], [95.0, 4232.0], [95.1, 4250.0], [95.2, 4262.0], [95.3, 4272.0], [95.4, 4283.0], [95.5, 4294.0], [95.6, 4305.0], [95.7, 4323.0], [95.8, 4338.0], [95.9, 4355.0], [96.0, 4373.0], [96.1, 4392.0], [96.2, 4414.0], [96.3, 4426.0], [96.4, 4450.0], [96.5, 4466.0], [96.6, 4480.0], [96.7, 4505.0], [96.8, 4537.0], [96.9, 4560.0], [97.0, 4587.0], [97.1, 4606.0], [97.2, 4635.0], [97.3, 4660.0], [97.4, 4684.0], [97.5, 4715.0], [97.6, 4739.0], [97.7, 4760.0], [97.8, 4803.0], [97.9, 4824.0], [98.0, 4843.0], [98.1, 4885.0], [98.2, 4933.0], [98.3, 4978.0], [98.4, 5015.0], [98.5, 5050.0], [98.6, 5112.0], [98.7, 5146.0], [98.8, 5205.0], [98.9, 5259.0], [99.0, 5339.0], [99.1, 5389.0], [99.2, 5478.0], [99.3, 5607.0], [99.4, 5690.0], [99.5, 5786.0], [99.6, 5968.0], [99.7, 6126.0], [99.8, 6416.0], [99.9, 6887.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 141.0], [0.1, 141.0], [0.2, 141.0], [0.3, 141.0], [0.4, 141.0], [0.5, 141.0], [0.6, 141.0], [0.7, 143.0], [0.8, 143.0], [0.9, 143.0], [1.0, 143.0], [1.1, 143.0], [1.2, 143.0], [1.3, 144.0], [1.4, 144.0], [1.5, 144.0], [1.6, 144.0], [1.7, 144.0], [1.8, 144.0], [1.9, 145.0], [2.0, 145.0], [2.1, 145.0], [2.2, 145.0], [2.3, 145.0], [2.4, 145.0], [2.5, 146.0], [2.6, 146.0], [2.7, 146.0], [2.8, 146.0], [2.9, 146.0], [3.0, 146.0], [3.1, 146.0], [3.2, 146.0], [3.3, 146.0], [3.4, 146.0], [3.5, 146.0], [3.6, 146.0], [3.7, 146.0], [3.8, 147.0], [3.9, 147.0], [4.0, 147.0], [4.1, 147.0], [4.2, 147.0], [4.3, 147.0], [4.4, 147.0], [4.5, 147.0], [4.6, 147.0], [4.7, 147.0], [4.8, 147.0], [4.9, 147.0], [5.0, 147.0], [5.1, 147.0], [5.2, 147.0], [5.3, 147.0], [5.4, 147.0], [5.5, 147.0], [5.6, 147.0], [5.7, 147.0], [5.8, 147.0], [5.9, 147.0], [6.0, 147.0], [6.1, 147.0], [6.2, 147.0], [6.3, 147.0], [6.4, 147.0], [6.5, 147.0], [6.6, 147.0], [6.7, 147.0], [6.8, 147.0], [6.9, 147.0], [7.0, 147.0], [7.1, 147.0], [7.2, 147.0], [7.3, 147.0], [7.4, 147.0], [7.5, 148.0], [7.6, 148.0], [7.7, 148.0], [7.8, 148.0], [7.9, 148.0], [8.0, 148.0], [8.1, 148.0], [8.2, 148.0], [8.3, 148.0], [8.4, 148.0], [8.5, 148.0], [8.6, 148.0], [8.7, 148.0], [8.8, 148.0], [8.9, 148.0], [9.0, 148.0], [9.1, 148.0], [9.2, 148.0], [9.3, 148.0], [9.4, 148.0], [9.5, 148.0], [9.6, 148.0], [9.7, 148.0], [9.8, 148.0], [9.9, 148.0], [10.0, 148.0], [10.1, 148.0], [10.2, 148.0], [10.3, 148.0], [10.4, 148.0], [10.5, 148.0], [10.6, 148.0], [10.7, 148.0], [10.8, 148.0], [10.9, 148.0], [11.0, 148.0], [11.1, 148.0], [11.2, 148.0], [11.3, 148.0], [11.4, 148.0], [11.5, 148.0], [11.6, 148.0], [11.7, 148.0], [11.8, 148.0], [11.9, 149.0], [12.0, 149.0], [12.1, 149.0], [12.2, 149.0], [12.3, 149.0], [12.4, 149.0], [12.5, 149.0], [12.6, 149.0], [12.7, 149.0], [12.8, 149.0], [12.9, 149.0], [13.0, 149.0], [13.1, 149.0], [13.2, 149.0], [13.3, 149.0], [13.4, 149.0], [13.5, 149.0], [13.6, 149.0], [13.7, 149.0], [13.8, 149.0], [13.9, 149.0], [14.0, 149.0], [14.1, 149.0], [14.2, 149.0], [14.3, 149.0], [14.4, 149.0], [14.5, 149.0], [14.6, 149.0], [14.7, 149.0], [14.8, 149.0], [14.9, 149.0], [15.0, 149.0], [15.1, 149.0], [15.2, 149.0], [15.3, 149.0], [15.4, 149.0], [15.5, 149.0], [15.6, 149.0], [15.7, 149.0], [15.8, 149.0], [15.9, 149.0], [16.0, 149.0], [16.1, 149.0], [16.2, 149.0], [16.3, 149.0], [16.4, 149.0], [16.5, 149.0], [16.6, 149.0], [16.7, 149.0], [16.8, 149.0], [16.9, 149.0], [17.0, 149.0], [17.1, 149.0], [17.2, 149.0], [17.3, 149.0], [17.4, 149.0], [17.5, 149.0], [17.6, 149.0], [17.7, 149.0], [17.8, 149.0], [17.9, 149.0], [18.0, 149.0], [18.1, 149.0], [18.2, 149.0], [18.3, 149.0], [18.4, 149.0], [18.5, 149.0], [18.6, 149.0], [18.7, 149.0], [18.8, 149.0], [18.9, 149.0], [19.0, 149.0], [19.1, 149.0], [19.2, 149.0], [19.3, 149.0], [19.4, 149.0], [19.5, 149.0], [19.6, 149.0], [19.7, 149.0], [19.8, 149.0], [19.9, 149.0], [20.0, 150.0], [20.1, 150.0], [20.2, 150.0], [20.3, 150.0], [20.4, 150.0], [20.5, 150.0], [20.6, 150.0], [20.7, 150.0], [20.8, 150.0], [20.9, 150.0], [21.0, 150.0], [21.1, 150.0], [21.2, 150.0], [21.3, 150.0], [21.4, 150.0], [21.5, 150.0], [21.6, 150.0], [21.7, 150.0], [21.8, 150.0], [21.9, 150.0], [22.0, 150.0], [22.1, 150.0], [22.2, 150.0], [22.3, 150.0], [22.4, 150.0], [22.5, 150.0], [22.6, 150.0], [22.7, 150.0], [22.8, 150.0], [22.9, 150.0], [23.0, 150.0], [23.1, 150.0], [23.2, 150.0], [23.3, 150.0], [23.4, 150.0], [23.5, 150.0], [23.6, 150.0], [23.7, 150.0], [23.8, 150.0], [23.9, 150.0], [24.0, 150.0], [24.1, 150.0], [24.2, 150.0], [24.3, 150.0], [24.4, 150.0], [24.5, 150.0], [24.6, 150.0], [24.7, 150.0], [24.8, 150.0], [24.9, 150.0], [25.0, 151.0], [25.1, 151.0], [25.2, 151.0], [25.3, 151.0], [25.4, 151.0], [25.5, 151.0], [25.6, 151.0], [25.7, 151.0], [25.8, 151.0], [25.9, 151.0], [26.0, 151.0], [26.1, 151.0], [26.2, 151.0], [26.3, 151.0], [26.4, 151.0], [26.5, 151.0], [26.6, 151.0], [26.7, 151.0], [26.8, 151.0], [26.9, 151.0], [27.0, 151.0], [27.1, 151.0], [27.2, 151.0], [27.3, 151.0], [27.4, 151.0], [27.5, 151.0], [27.6, 151.0], [27.7, 151.0], [27.8, 151.0], [27.9, 151.0], [28.0, 151.0], [28.1, 151.0], [28.2, 151.0], [28.3, 151.0], [28.4, 151.0], [28.5, 151.0], [28.6, 151.0], [28.7, 151.0], [28.8, 151.0], [28.9, 151.0], [29.0, 151.0], [29.1, 151.0], [29.2, 151.0], [29.3, 151.0], [29.4, 152.0], [29.5, 152.0], [29.6, 152.0], [29.7, 152.0], [29.8, 152.0], [29.9, 152.0], [30.0, 152.0], [30.1, 152.0], [30.2, 152.0], [30.3, 152.0], [30.4, 152.0], [30.5, 152.0], [30.6, 152.0], [30.7, 152.0], [30.8, 152.0], [30.9, 152.0], [31.0, 152.0], [31.1, 152.0], [31.2, 152.0], [31.3, 152.0], [31.4, 152.0], [31.5, 152.0], [31.6, 152.0], [31.7, 152.0], [31.8, 152.0], [31.9, 152.0], [32.0, 152.0], [32.1, 152.0], [32.2, 152.0], [32.3, 152.0], [32.4, 152.0], [32.5, 152.0], [32.6, 152.0], [32.7, 152.0], [32.8, 152.0], [32.9, 152.0], [33.0, 152.0], [33.1, 152.0], [33.2, 152.0], [33.3, 152.0], [33.4, 152.0], [33.5, 152.0], [33.6, 152.0], [33.7, 152.0], [33.8, 152.0], [33.9, 152.0], [34.0, 152.0], [34.1, 152.0], [34.2, 152.0], [34.3, 152.0], [34.4, 152.0], [34.5, 152.0], [34.6, 152.0], [34.7, 152.0], [34.8, 152.0], [34.9, 152.0], [35.0, 152.0], [35.1, 152.0], [35.2, 152.0], [35.3, 152.0], [35.4, 152.0], [35.5, 152.0], [35.6, 152.0], [35.7, 152.0], [35.8, 152.0], [35.9, 152.0], [36.0, 152.0], [36.1, 152.0], [36.2, 152.0], [36.3, 153.0], [36.4, 153.0], [36.5, 153.0], [36.6, 153.0], [36.7, 153.0], [36.8, 153.0], [36.9, 153.0], [37.0, 153.0], [37.1, 153.0], [37.2, 153.0], [37.3, 153.0], [37.4, 153.0], [37.5, 153.0], [37.6, 153.0], [37.7, 153.0], [37.8, 153.0], [37.9, 153.0], [38.0, 153.0], [38.1, 153.0], [38.2, 153.0], [38.3, 153.0], [38.4, 153.0], [38.5, 153.0], [38.6, 153.0], [38.7, 153.0], [38.8, 153.0], [38.9, 153.0], [39.0, 153.0], [39.1, 153.0], [39.2, 153.0], [39.3, 153.0], [39.4, 153.0], [39.5, 153.0], [39.6, 153.0], [39.7, 153.0], [39.8, 153.0], [39.9, 153.0], [40.0, 153.0], [40.1, 153.0], [40.2, 153.0], [40.3, 153.0], [40.4, 153.0], [40.5, 153.0], [40.6, 153.0], [40.7, 154.0], [40.8, 154.0], [40.9, 154.0], [41.0, 154.0], [41.1, 154.0], [41.2, 154.0], [41.3, 154.0], [41.4, 154.0], [41.5, 154.0], [41.6, 154.0], [41.7, 154.0], [41.8, 154.0], [41.9, 154.0], [42.0, 154.0], [42.1, 154.0], [42.2, 154.0], [42.3, 154.0], [42.4, 154.0], [42.5, 154.0], [42.6, 154.0], [42.7, 154.0], [42.8, 154.0], [42.9, 154.0], [43.0, 154.0], [43.1, 154.0], [43.2, 154.0], [43.3, 154.0], [43.4, 154.0], [43.5, 154.0], [43.6, 154.0], [43.7, 154.0], [43.8, 154.0], [43.9, 154.0], [44.0, 154.0], [44.1, 154.0], [44.2, 154.0], [44.3, 154.0], [44.4, 154.0], [44.5, 154.0], [44.6, 154.0], [44.7, 154.0], [44.8, 154.0], [44.9, 154.0], [45.0, 154.0], [45.1, 154.0], [45.2, 154.0], [45.3, 154.0], [45.4, 154.0], [45.5, 154.0], [45.6, 154.0], [45.7, 154.0], [45.8, 154.0], [45.9, 154.0], [46.0, 154.0], [46.1, 154.0], [46.2, 154.0], [46.3, 154.0], [46.4, 154.0], [46.5, 154.0], [46.6, 154.0], [46.7, 154.0], [46.8, 154.0], [46.9, 155.0], [47.0, 155.0], [47.1, 155.0], [47.2, 155.0], [47.3, 155.0], [47.4, 155.0], [47.5, 155.0], [47.6, 155.0], [47.7, 155.0], [47.8, 155.0], [47.9, 155.0], [48.0, 155.0], [48.1, 155.0], [48.2, 155.0], [48.3, 155.0], [48.4, 155.0], [48.5, 155.0], [48.6, 155.0], [48.7, 155.0], [48.8, 155.0], [48.9, 155.0], [49.0, 155.0], [49.1, 155.0], [49.2, 155.0], [49.3, 155.0], [49.4, 155.0], [49.5, 155.0], [49.6, 155.0], [49.7, 155.0], [49.8, 155.0], [49.9, 155.0], [50.0, 155.0], [50.1, 155.0], [50.2, 155.0], [50.3, 155.0], [50.4, 155.0], [50.5, 155.0], [50.6, 155.0], [50.7, 155.0], [50.8, 155.0], [50.9, 155.0], [51.0, 155.0], [51.1, 155.0], [51.2, 155.0], [51.3, 155.0], [51.4, 155.0], [51.5, 155.0], [51.6, 155.0], [51.7, 155.0], [51.8, 155.0], [51.9, 155.0], [52.0, 155.0], [52.1, 155.0], [52.2, 155.0], [52.3, 155.0], [52.4, 155.0], [52.5, 155.0], [52.6, 155.0], [52.7, 155.0], [52.8, 155.0], [52.9, 155.0], [53.0, 155.0], [53.1, 155.0], [53.2, 155.0], [53.3, 155.0], [53.4, 155.0], [53.5, 155.0], [53.6, 155.0], [53.7, 155.0], [53.8, 155.0], [53.9, 155.0], [54.0, 155.0], [54.1, 155.0], [54.2, 155.0], [54.3, 155.0], [54.4, 155.0], [54.5, 155.0], [54.6, 155.0], [54.7, 155.0], [54.8, 155.0], [54.9, 155.0], [55.0, 156.0], [55.1, 156.0], [55.2, 156.0], [55.3, 156.0], [55.4, 156.0], [55.5, 156.0], [55.6, 156.0], [55.7, 156.0], [55.8, 156.0], [55.9, 156.0], [56.0, 156.0], [56.1, 156.0], [56.2, 156.0], [56.3, 156.0], [56.4, 156.0], [56.5, 156.0], [56.6, 156.0], [56.7, 156.0], [56.8, 156.0], [56.9, 156.0], [57.0, 156.0], [57.1, 156.0], [57.2, 156.0], [57.3, 156.0], [57.4, 156.0], [57.5, 156.0], [57.6, 156.0], [57.7, 156.0], [57.8, 156.0], [57.9, 156.0], [58.0, 156.0], [58.1, 156.0], [58.2, 156.0], [58.3, 156.0], [58.4, 156.0], [58.5, 156.0], [58.6, 156.0], [58.7, 156.0], [58.8, 157.0], [58.9, 157.0], [59.0, 157.0], [59.1, 157.0], [59.2, 157.0], [59.3, 157.0], [59.4, 157.0], [59.5, 157.0], [59.6, 157.0], [59.7, 157.0], [59.8, 157.0], [59.9, 157.0], [60.0, 157.0], [60.1, 157.0], [60.2, 157.0], [60.3, 157.0], [60.4, 157.0], [60.5, 157.0], [60.6, 157.0], [60.7, 157.0], [60.8, 157.0], [60.9, 157.0], [61.0, 157.0], [61.1, 157.0], [61.2, 157.0], [61.3, 157.0], [61.4, 157.0], [61.5, 157.0], [61.6, 157.0], [61.7, 157.0], [61.8, 157.0], [61.9, 157.0], [62.0, 157.0], [62.1, 157.0], [62.2, 157.0], [62.3, 157.0], [62.4, 157.0], [62.5, 157.0], [62.6, 157.0], [62.7, 157.0], [62.8, 157.0], [62.9, 157.0], [63.0, 157.0], [63.1, 157.0], [63.2, 157.0], [63.3, 157.0], [63.4, 157.0], [63.5, 157.0], [63.6, 157.0], [63.7, 157.0], [63.8, 157.0], [63.9, 157.0], [64.0, 157.0], [64.1, 157.0], [64.2, 157.0], [64.3, 157.0], [64.4, 157.0], [64.5, 157.0], [64.6, 157.0], [64.7, 157.0], [64.8, 157.0], [64.9, 157.0], [65.0, 158.0], [65.1, 158.0], [65.2, 158.0], [65.3, 158.0], [65.4, 158.0], [65.5, 158.0], [65.6, 158.0], [65.7, 158.0], [65.8, 158.0], [65.9, 158.0], [66.0, 158.0], [66.1, 158.0], [66.2, 158.0], [66.3, 158.0], [66.4, 158.0], [66.5, 158.0], [66.6, 158.0], [66.7, 158.0], [66.8, 158.0], [66.9, 158.0], [67.0, 158.0], [67.1, 158.0], [67.2, 158.0], [67.3, 158.0], [67.4, 158.0], [67.5, 158.0], [67.6, 158.0], [67.7, 158.0], [67.8, 158.0], [67.9, 158.0], [68.0, 158.0], [68.1, 158.0], [68.2, 158.0], [68.3, 158.0], [68.4, 158.0], [68.5, 158.0], [68.6, 158.0], [68.7, 158.0], [68.8, 158.0], [68.9, 158.0], [69.0, 158.0], [69.1, 158.0], [69.2, 158.0], [69.3, 158.0], [69.4, 158.0], [69.5, 158.0], [69.6, 158.0], [69.7, 158.0], [69.8, 158.0], [69.9, 158.0], [70.0, 158.0], [70.1, 158.0], [70.2, 158.0], [70.3, 158.0], [70.4, 158.0], [70.5, 158.0], [70.6, 158.0], [70.7, 159.0], [70.8, 159.0], [70.9, 159.0], [71.0, 159.0], [71.1, 159.0], [71.2, 159.0], [71.3, 159.0], [71.4, 159.0], [71.5, 159.0], [71.6, 159.0], [71.7, 159.0], [71.8, 159.0], [71.9, 159.0], [72.0, 159.0], [72.1, 159.0], [72.2, 159.0], [72.3, 159.0], [72.4, 159.0], [72.5, 159.0], [72.6, 159.0], [72.7, 159.0], [72.8, 159.0], [72.9, 159.0], [73.0, 159.0], [73.1, 159.0], [73.2, 159.0], [73.3, 159.0], [73.4, 159.0], [73.5, 159.0], [73.6, 159.0], [73.7, 159.0], [73.8, 159.0], [73.9, 159.0], [74.0, 159.0], [74.1, 159.0], [74.2, 159.0], [74.3, 159.0], [74.4, 159.0], [74.5, 159.0], [74.6, 159.0], [74.7, 159.0], [74.8, 159.0], [74.9, 159.0], [75.0, 159.0], [75.1, 159.0], [75.2, 159.0], [75.3, 159.0], [75.4, 159.0], [75.5, 159.0], [75.6, 159.0], [75.7, 159.0], [75.8, 159.0], [75.9, 159.0], [76.0, 159.0], [76.1, 159.0], [76.2, 159.0], [76.3, 159.0], [76.4, 159.0], [76.5, 159.0], [76.6, 159.0], [76.7, 159.0], [76.8, 159.0], [76.9, 159.0], [77.0, 159.0], [77.1, 159.0], [77.2, 159.0], [77.3, 159.0], [77.4, 159.0], [77.5, 160.0], [77.6, 160.0], [77.7, 160.0], [77.8, 160.0], [77.9, 160.0], [78.0, 160.0], [78.1, 160.0], [78.2, 160.0], [78.3, 160.0], [78.4, 160.0], [78.5, 160.0], [78.6, 160.0], [78.7, 160.0], [78.8, 160.0], [78.9, 160.0], [79.0, 160.0], [79.1, 160.0], [79.2, 160.0], [79.3, 160.0], [79.4, 160.0], [79.5, 160.0], [79.6, 160.0], [79.7, 160.0], [79.8, 160.0], [79.9, 160.0], [80.0, 160.0], [80.1, 160.0], [80.2, 160.0], [80.3, 160.0], [80.4, 160.0], [80.5, 160.0], [80.6, 160.0], [80.7, 161.0], [80.8, 161.0], [80.9, 161.0], [81.0, 161.0], [81.1, 161.0], [81.2, 161.0], [81.3, 161.0], [81.4, 161.0], [81.5, 161.0], [81.6, 161.0], [81.7, 161.0], [81.8, 161.0], [81.9, 161.0], [82.0, 161.0], [82.1, 161.0], [82.2, 161.0], [82.3, 161.0], [82.4, 161.0], [82.5, 162.0], [82.6, 162.0], [82.7, 162.0], [82.8, 162.0], [82.9, 162.0], [83.0, 162.0], [83.1, 162.0], [83.2, 162.0], [83.3, 162.0], [83.4, 162.0], [83.5, 162.0], [83.6, 162.0], [83.7, 162.0], [83.8, 162.0], [83.9, 162.0], [84.0, 162.0], [84.1, 162.0], [84.2, 162.0], [84.3, 162.0], [84.4, 162.0], [84.5, 162.0], [84.6, 162.0], [84.7, 162.0], [84.8, 162.0], [84.9, 162.0], [85.0, 162.0], [85.1, 162.0], [85.2, 162.0], [85.3, 162.0], [85.4, 162.0], [85.5, 162.0], [85.6, 162.0], [85.7, 162.0], [85.8, 162.0], [85.9, 162.0], [86.0, 162.0], [86.1, 162.0], [86.2, 162.0], [86.3, 162.0], [86.4, 162.0], [86.5, 162.0], [86.6, 162.0], [86.7, 162.0], [86.8, 162.0], [86.9, 163.0], [87.0, 163.0], [87.1, 163.0], [87.2, 163.0], [87.3, 163.0], [87.4, 163.0], [87.5, 163.0], [87.6, 163.0], [87.7, 163.0], [87.8, 163.0], [87.9, 163.0], [88.0, 163.0], [88.1, 163.0], [88.2, 164.0], [88.3, 164.0], [88.4, 164.0], [88.5, 164.0], [88.6, 164.0], [88.7, 164.0], [88.8, 164.0], [88.9, 164.0], [89.0, 164.0], [89.1, 164.0], [89.2, 164.0], [89.3, 164.0], [89.4, 164.0], [89.5, 164.0], [89.6, 164.0], [89.7, 164.0], [89.8, 164.0], [89.9, 164.0], [90.0, 164.0], [90.1, 164.0], [90.2, 164.0], [90.3, 164.0], [90.4, 164.0], [90.5, 164.0], [90.6, 164.0], [90.7, 165.0], [90.8, 165.0], [90.9, 165.0], [91.0, 165.0], [91.1, 165.0], [91.2, 165.0], [91.3, 165.0], [91.4, 165.0], [91.5, 165.0], [91.6, 165.0], [91.7, 165.0], [91.8, 165.0], [91.9, 166.0], [92.0, 166.0], [92.1, 166.0], [92.2, 166.0], [92.3, 166.0], [92.4, 166.0], [92.5, 166.0], [92.6, 166.0], [92.7, 166.0], [92.8, 166.0], [92.9, 166.0], [93.0, 166.0], [93.1, 166.0], [93.2, 166.0], [93.3, 166.0], [93.4, 166.0], [93.5, 166.0], [93.6, 166.0], [93.7, 166.0], [93.8, 167.0], [93.9, 167.0], [94.0, 167.0], [94.1, 167.0], [94.2, 167.0], [94.3, 167.0], [94.4, 169.0], [94.5, 169.0], [94.6, 169.0], [94.7, 169.0], [94.8, 169.0], [94.9, 169.0], [95.0, 169.0], [95.1, 169.0], [95.2, 169.0], [95.3, 169.0], [95.4, 169.0], [95.5, 169.0], [95.6, 169.0], [95.7, 170.0], [95.8, 170.0], [95.9, 170.0], [96.0, 170.0], [96.1, 170.0], [96.2, 170.0], [96.3, 171.0], [96.4, 171.0], [96.5, 171.0], [96.6, 171.0], [96.7, 171.0], [96.8, 171.0], [96.9, 176.0], [97.0, 176.0], [97.1, 176.0], [97.2, 176.0], [97.3, 176.0], [97.4, 176.0], [97.5, 179.0], [97.6, 179.0], [97.7, 179.0], [97.8, 179.0], [97.9, 179.0], [98.0, 179.0], [98.1, 179.0], [98.2, 184.0], [98.3, 184.0], [98.4, 184.0], [98.5, 184.0], [98.6, 184.0], [98.7, 184.0], [98.8, 191.0], [98.9, 191.0], [99.0, 191.0], [99.1, 191.0], [99.2, 191.0], [99.3, 191.0], [99.4, 192.0], [99.5, 192.0], [99.6, 192.0], [99.7, 192.0], [99.8, 192.0], [99.9, 192.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 2.0], [4.9, 2.0], [5.0, 2.0], [5.1, 2.0], [5.2, 2.0], [5.3, 2.0], [5.4, 2.0], [5.5, 2.0], [5.6, 2.0], [5.7, 2.0], [5.8, 2.0], [5.9, 2.0], [6.0, 2.0], [6.1, 2.0], [6.2, 2.0], [6.3, 2.0], [6.4, 2.0], [6.5, 2.0], [6.6, 2.0], [6.7, 2.0], [6.8, 2.0], [6.9, 2.0], [7.0, 2.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 2.0], [14.5, 2.0], [14.6, 2.0], [14.7, 2.0], [14.8, 2.0], [14.9, 2.0], [15.0, 2.0], [15.1, 2.0], [15.2, 2.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 2.0], [17.7, 2.0], [17.8, 2.0], [17.9, 2.0], [18.0, 2.0], [18.1, 2.0], [18.2, 2.0], [18.3, 2.0], [18.4, 2.0], [18.5, 2.0], [18.6, 2.0], [18.7, 2.0], [18.8, 2.0], [18.9, 2.0], [19.0, 2.0], [19.1, 2.0], [19.2, 2.0], [19.3, 2.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 2.0], [20.0, 2.0], [20.1, 2.0], [20.2, 2.0], [20.3, 2.0], [20.4, 2.0], [20.5, 2.0], [20.6, 2.0], [20.7, 2.0], [20.8, 2.0], [20.9, 2.0], [21.0, 2.0], [21.1, 2.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 2.0], [21.6, 2.0], [21.7, 2.0], [21.8, 2.0], [21.9, 2.0], [22.0, 2.0], [22.1, 2.0], [22.2, 2.0], [22.3, 2.0], [22.4, 2.0], [22.5, 2.0], [22.6, 2.0], [22.7, 2.0], [22.8, 2.0], [22.9, 2.0], [23.0, 2.0], [23.1, 2.0], [23.2, 2.0], [23.3, 2.0], [23.4, 2.0], [23.5, 2.0], [23.6, 2.0], [23.7, 2.0], [23.8, 2.0], [23.9, 2.0], [24.0, 2.0], [24.1, 2.0], [24.2, 2.0], [24.3, 2.0], [24.4, 2.0], [24.5, 2.0], [24.6, 2.0], [24.7, 2.0], [24.8, 2.0], [24.9, 2.0], [25.0, 2.0], [25.1, 2.0], [25.2, 2.0], [25.3, 2.0], [25.4, 2.0], [25.5, 2.0], [25.6, 2.0], [25.7, 2.0], [25.8, 2.0], [25.9, 2.0], [26.0, 2.0], [26.1, 2.0], [26.2, 2.0], [26.3, 2.0], [26.4, 2.0], [26.5, 2.0], [26.6, 2.0], [26.7, 2.0], [26.8, 2.0], [26.9, 2.0], [27.0, 2.0], [27.1, 2.0], [27.2, 2.0], [27.3, 2.0], [27.4, 2.0], [27.5, 2.0], [27.6, 2.0], [27.7, 2.0], [27.8, 2.0], [27.9, 2.0], [28.0, 2.0], [28.1, 2.0], [28.2, 2.0], [28.3, 2.0], [28.4, 2.0], [28.5, 2.0], [28.6, 2.0], [28.7, 2.0], [28.8, 2.0], [28.9, 2.0], [29.0, 2.0], [29.1, 2.0], [29.2, 2.0], [29.3, 2.0], [29.4, 3.0], [29.5, 3.0], [29.6, 3.0], [29.7, 3.0], [29.8, 3.0], [29.9, 3.0], [30.0, 3.0], [30.1, 3.0], [30.2, 3.0], [30.3, 3.0], [30.4, 3.0], [30.5, 3.0], [30.6, 3.0], [30.7, 3.0], [30.8, 3.0], [30.9, 3.0], [31.0, 3.0], [31.1, 3.0], [31.2, 3.0], [31.3, 3.0], [31.4, 3.0], [31.5, 3.0], [31.6, 3.0], [31.7, 3.0], [31.8, 3.0], [31.9, 3.0], [32.0, 3.0], [32.1, 3.0], [32.2, 3.0], [32.3, 3.0], [32.4, 3.0], [32.5, 3.0], [32.6, 3.0], [32.7, 3.0], [32.8, 3.0], [32.9, 3.0], [33.0, 3.0], [33.1, 3.0], [33.2, 3.0], [33.3, 3.0], [33.4, 3.0], [33.5, 3.0], [33.6, 3.0], [33.7, 3.0], [33.8, 3.0], [33.9, 3.0], [34.0, 3.0], [34.1, 3.0], [34.2, 3.0], [34.3, 3.0], [34.4, 3.0], [34.5, 3.0], [34.6, 3.0], [34.7, 3.0], [34.8, 3.0], [34.9, 3.0], [35.0, 3.0], [35.1, 3.0], [35.2, 3.0], [35.3, 3.0], [35.4, 3.0], [35.5, 3.0], [35.6, 3.0], [35.7, 3.0], [35.8, 3.0], [35.9, 3.0], [36.0, 3.0], [36.1, 3.0], [36.2, 3.0], [36.3, 3.0], [36.4, 3.0], [36.5, 3.0], [36.6, 3.0], [36.7, 3.0], [36.8, 3.0], [36.9, 3.0], [37.0, 3.0], [37.1, 3.0], [37.2, 3.0], [37.3, 3.0], [37.4, 3.0], [37.5, 3.0], [37.6, 3.0], [37.7, 3.0], [37.8, 3.0], [37.9, 3.0], [38.0, 3.0], [38.1, 3.0], [38.2, 3.0], [38.3, 3.0], [38.4, 3.0], [38.5, 3.0], [38.6, 3.0], [38.7, 3.0], [38.8, 3.0], [38.9, 3.0], [39.0, 3.0], [39.1, 3.0], [39.2, 3.0], [39.3, 3.0], [39.4, 3.0], [39.5, 3.0], [39.6, 3.0], [39.7, 3.0], [39.8, 3.0], [39.9, 3.0], [40.0, 3.0], [40.1, 3.0], [40.2, 3.0], [40.3, 3.0], [40.4, 3.0], [40.5, 3.0], [40.6, 3.0], [40.7, 3.0], [40.8, 3.0], [40.9, 3.0], [41.0, 3.0], [41.1, 3.0], [41.2, 3.0], [41.3, 3.0], [41.4, 3.0], [41.5, 3.0], [41.6, 3.0], [41.7, 3.0], [41.8, 3.0], [41.9, 3.0], [42.0, 3.0], [42.1, 3.0], [42.2, 3.0], [42.3, 3.0], [42.4, 3.0], [42.5, 3.0], [42.6, 3.0], [42.7, 4.0], [42.8, 4.0], [42.9, 4.0], [43.0, 4.0], [43.1, 4.0], [43.2, 4.0], [43.3, 4.0], [43.4, 4.0], [43.5, 5.0], [43.6, 5.0], [43.7, 5.0], [43.8, 6.0], [43.9, 6.0], [44.0, 7.0], [44.1, 10.0], [44.2, 23.0], [44.3, 28.0], [44.4, 32.0], [44.5, 37.0], [44.6, 43.0], [44.7, 51.0], [44.8, 61.0], [44.9, 71.0], [45.0, 84.0], [45.1, 98.0], [45.2, 111.0], [45.3, 128.0], [45.4, 154.0], [45.5, 176.0], [45.6, 215.0], [45.7, 279.0], [45.8, 335.0], [45.9, 391.0], [46.0, 443.0], [46.1, 485.0], [46.2, 518.0], [46.3, 553.0], [46.4, 585.0], [46.5, 609.0], [46.6, 635.0], [46.7, 654.0], [46.8, 673.0], [46.9, 698.0], [47.0, 713.0], [47.1, 737.0], [47.2, 759.0], [47.3, 779.0], [47.4, 796.0], [47.5, 820.0], [47.6, 844.0], [47.7, 856.0], [47.8, 875.0], [47.9, 897.0], [48.0, 912.0], [48.1, 928.0], [48.2, 936.0], [48.3, 955.0], [48.4, 967.0], [48.5, 977.0], [48.6, 986.0], [48.7, 999.0], [48.8, 1015.0], [48.9, 1025.0], [49.0, 1040.0], [49.1, 1047.0], [49.2, 1054.0], [49.3, 1064.0], [49.4, 1075.0], [49.5, 1086.0], [49.6, 1095.0], [49.7, 1106.0], [49.8, 1114.0], [49.9, 1122.0], [50.0, 1133.0], [50.1, 1143.0], [50.2, 1152.0], [50.3, 1160.0], [50.4, 1166.0], [50.5, 1175.0], [50.6, 1184.0], [50.7, 1195.0], [50.8, 1203.0], [50.9, 1210.0], [51.0, 1217.0], [51.1, 1229.0], [51.2, 1236.0], [51.3, 1246.0], [51.4, 1254.0], [51.5, 1259.0], [51.6, 1265.0], [51.7, 1272.0], [51.8, 1283.0], [51.9, 1289.0], [52.0, 1297.0], [52.1, 1305.0], [52.2, 1313.0], [52.3, 1321.0], [52.4, 1326.0], [52.5, 1333.0], [52.6, 1341.0], [52.7, 1349.0], [52.8, 1355.0], [52.9, 1364.0], [53.0, 1372.0], [53.1, 1379.0], [53.2, 1392.0], [53.3, 1398.0], [53.4, 1407.0], [53.5, 1415.0], [53.6, 1422.0], [53.7, 1429.0], [53.8, 1441.0], [53.9, 1447.0], [54.0, 1456.0], [54.1, 1461.0], [54.2, 1468.0], [54.3, 1474.0], [54.4, 1480.0], [54.5, 1488.0], [54.6, 1492.0], [54.7, 1499.0], [54.8, 1507.0], [54.9, 1513.0], [55.0, 1519.0], [55.1, 1523.0], [55.2, 1530.0], [55.3, 1537.0], [55.4, 1542.0], [55.5, 1548.0], [55.6, 1555.0], [55.7, 1562.0], [55.8, 1565.0], [55.9, 1569.0], [56.0, 1576.0], [56.1, 1582.0], [56.2, 1587.0], [56.3, 1593.0], [56.4, 1599.0], [56.5, 1606.0], [56.6, 1612.0], [56.7, 1619.0], [56.8, 1624.0], [56.9, 1630.0], [57.0, 1635.0], [57.1, 1643.0], [57.2, 1651.0], [57.3, 1657.0], [57.4, 1663.0], [57.5, 1669.0], [57.6, 1676.0], [57.7, 1681.0], [57.8, 1686.0], [57.9, 1690.0], [58.0, 1694.0], [58.1, 1699.0], [58.2, 1705.0], [58.3, 1707.0], [58.4, 1716.0], [58.5, 1720.0], [58.6, 1724.0], [58.7, 1729.0], [58.8, 1734.0], [58.9, 1743.0], [59.0, 1748.0], [59.1, 1755.0], [59.2, 1760.0], [59.3, 1764.0], [59.4, 1771.0], [59.5, 1774.0], [59.6, 1779.0], [59.7, 1782.0], [59.8, 1790.0], [59.9, 1796.0], [60.0, 1803.0], [60.1, 1812.0], [60.2, 1817.0], [60.3, 1820.0], [60.4, 1824.0], [60.5, 1829.0], [60.6, 1837.0], [60.7, 1843.0], [60.8, 1849.0], [60.9, 1859.0], [61.0, 1861.0], [61.1, 1866.0], [61.2, 1872.0], [61.3, 1877.0], [61.4, 1883.0], [61.5, 1886.0], [61.6, 1893.0], [61.7, 1899.0], [61.8, 1907.0], [61.9, 1914.0], [62.0, 1919.0], [62.1, 1924.0], [62.2, 1931.0], [62.3, 1934.0], [62.4, 1940.0], [62.5, 1945.0], [62.6, 1951.0], [62.7, 1954.0], [62.8, 1958.0], [62.9, 1962.0], [63.0, 1965.0], [63.1, 1972.0], [63.2, 1979.0], [63.3, 1984.0], [63.4, 1992.0], [63.5, 1997.0], [63.6, 2001.0], [63.7, 2003.0], [63.8, 2006.0], [63.9, 2012.0], [64.0, 2018.0], [64.1, 2022.0], [64.2, 2026.0], [64.3, 2032.0], [64.4, 2039.0], [64.5, 2044.0], [64.6, 2050.0], [64.7, 2056.0], [64.8, 2061.0], [64.9, 2065.0], [65.0, 2070.0], [65.1, 2074.0], [65.2, 2084.0], [65.3, 2089.0], [65.4, 2096.0], [65.5, 2105.0], [65.6, 2109.0], [65.7, 2112.0], [65.8, 2118.0], [65.9, 2124.0], [66.0, 2128.0], [66.1, 2132.0], [66.2, 2136.0], [66.3, 2141.0], [66.4, 2144.0], [66.5, 2150.0], [66.6, 2155.0], [66.7, 2159.0], [66.8, 2163.0], [66.9, 2167.0], [67.0, 2174.0], [67.1, 2179.0], [67.2, 2185.0], [67.3, 2188.0], [67.4, 2193.0], [67.5, 2201.0], [67.6, 2205.0], [67.7, 2210.0], [67.8, 2213.0], [67.9, 2217.0], [68.0, 2223.0], [68.1, 2228.0], [68.2, 2234.0], [68.3, 2238.0], [68.4, 2244.0], [68.5, 2248.0], [68.6, 2253.0], [68.7, 2261.0], [68.8, 2266.0], [68.9, 2270.0], [69.0, 2275.0], [69.1, 2279.0], [69.2, 2286.0], [69.3, 2291.0], [69.4, 2298.0], [69.5, 2305.0], [69.6, 2311.0], [69.7, 2318.0], [69.8, 2323.0], [69.9, 2327.0], [70.0, 2334.0], [70.1, 2341.0], [70.2, 2346.0], [70.3, 2349.0], [70.4, 2355.0], [70.5, 2358.0], [70.6, 2362.0], [70.7, 2368.0], [70.8, 2371.0], [70.9, 2376.0], [71.0, 2382.0], [71.1, 2389.0], [71.2, 2393.0], [71.3, 2397.0], [71.4, 2404.0], [71.5, 2410.0], [71.6, 2416.0], [71.7, 2421.0], [71.8, 2426.0], [71.9, 2431.0], [72.0, 2439.0], [72.1, 2445.0], [72.2, 2450.0], [72.3, 2456.0], [72.4, 2462.0], [72.5, 2470.0], [72.6, 2475.0], [72.7, 2480.0], [72.8, 2488.0], [72.9, 2494.0], [73.0, 2498.0], [73.1, 2503.0], [73.2, 2507.0], [73.3, 2515.0], [73.4, 2521.0], [73.5, 2527.0], [73.6, 2533.0], [73.7, 2538.0], [73.8, 2544.0], [73.9, 2550.0], [74.0, 2557.0], [74.1, 2562.0], [74.2, 2570.0], [74.3, 2577.0], [74.4, 2584.0], [74.5, 2592.0], [74.6, 2598.0], [74.7, 2604.0], [74.8, 2610.0], [74.9, 2615.0], [75.0, 2620.0], [75.1, 2627.0], [75.2, 2633.0], [75.3, 2640.0], [75.4, 2648.0], [75.5, 2651.0], [75.6, 2657.0], [75.7, 2662.0], [75.8, 2665.0], [75.9, 2671.0], [76.0, 2676.0], [76.1, 2683.0], [76.2, 2687.0], [76.3, 2693.0], [76.4, 2699.0], [76.5, 2707.0], [76.6, 2714.0], [76.7, 2718.0], [76.8, 2727.0], [76.9, 2735.0], [77.0, 2744.0], [77.1, 2748.0], [77.2, 2757.0], [77.3, 2762.0], [77.4, 2769.0], [77.5, 2777.0], [77.6, 2781.0], [77.7, 2788.0], [77.8, 2794.0], [77.9, 2802.0], [78.0, 2807.0], [78.1, 2814.0], [78.2, 2820.0], [78.3, 2828.0], [78.4, 2834.0], [78.5, 2840.0], [78.6, 2845.0], [78.7, 2856.0], [78.8, 2862.0], [78.9, 2868.0], [79.0, 2875.0], [79.1, 2883.0], [79.2, 2890.0], [79.3, 2896.0], [79.4, 2902.0], [79.5, 2909.0], [79.6, 2916.0], [79.7, 2924.0], [79.8, 2930.0], [79.9, 2938.0], [80.0, 2944.0], [80.1, 2951.0], [80.2, 2958.0], [80.3, 2963.0], [80.4, 2972.0], [80.5, 2978.0], [80.6, 2984.0], [80.7, 2989.0], [80.8, 2996.0], [80.9, 3002.0], [81.0, 3011.0], [81.1, 3017.0], [81.2, 3021.0], [81.3, 3029.0], [81.4, 3033.0], [81.5, 3037.0], [81.6, 3044.0], [81.7, 3051.0], [81.8, 3058.0], [81.9, 3063.0], [82.0, 3071.0], [82.1, 3078.0], [82.2, 3085.0], [82.3, 3092.0], [82.4, 3095.0], [82.5, 3100.0], [82.6, 3105.0], [82.7, 3115.0], [82.8, 3122.0], [82.9, 3127.0], [83.0, 3133.0], [83.1, 3138.0], [83.2, 3145.0], [83.3, 3150.0], [83.4, 3154.0], [83.5, 3164.0], [83.6, 3170.0], [83.7, 3175.0], [83.8, 3183.0], [83.9, 3192.0], [84.0, 3198.0], [84.1, 3204.0], [84.2, 3213.0], [84.3, 3220.0], [84.4, 3232.0], [84.5, 3239.0], [84.6, 3244.0], [84.7, 3252.0], [84.8, 3258.0], [84.9, 3265.0], [85.0, 3273.0], [85.1, 3281.0], [85.2, 3288.0], [85.3, 3295.0], [85.4, 3305.0], [85.5, 3313.0], [85.6, 3320.0], [85.7, 3327.0], [85.8, 3332.0], [85.9, 3338.0], [86.0, 3344.0], [86.1, 3351.0], [86.2, 3359.0], [86.3, 3366.0], [86.4, 3373.0], [86.5, 3385.0], [86.6, 3397.0], [86.7, 3404.0], [86.8, 3410.0], [86.9, 3417.0], [87.0, 3423.0], [87.1, 3429.0], [87.2, 3436.0], [87.3, 3446.0], [87.4, 3455.0], [87.5, 3462.0], [87.6, 3468.0], [87.7, 3474.0], [87.8, 3482.0], [87.9, 3489.0], [88.0, 3498.0], [88.1, 3504.0], [88.2, 3512.0], [88.3, 3517.0], [88.4, 3528.0], [88.5, 3537.0], [88.6, 3547.0], [88.7, 3552.0], [88.8, 3561.0], [88.9, 3568.0], [89.0, 3575.0], [89.1, 3581.0], [89.2, 3589.0], [89.3, 3598.0], [89.4, 3605.0], [89.5, 3612.0], [89.6, 3619.0], [89.7, 3629.0], [89.8, 3640.0], [89.9, 3646.0], [90.0, 3653.0], [90.1, 3661.0], [90.2, 3674.0], [90.3, 3684.0], [90.4, 3692.0], [90.5, 3704.0], [90.6, 3710.0], [90.7, 3719.0], [90.8, 3727.0], [90.9, 3732.0], [91.0, 3745.0], [91.1, 3754.0], [91.2, 3765.0], [91.3, 3778.0], [91.4, 3790.0], [91.5, 3797.0], [91.6, 3813.0], [91.7, 3827.0], [91.8, 3837.0], [91.9, 3847.0], [92.0, 3856.0], [92.1, 3868.0], [92.2, 3881.0], [92.3, 3888.0], [92.4, 3895.0], [92.5, 3909.0], [92.6, 3918.0], [92.7, 3930.0], [92.8, 3942.0], [92.9, 3956.0], [93.0, 3965.0], [93.1, 3974.0], [93.2, 3984.0], [93.3, 4001.0], [93.4, 4010.0], [93.5, 4028.0], [93.6, 4048.0], [93.7, 4061.0], [93.8, 4079.0], [93.9, 4090.0], [94.0, 4101.0], [94.1, 4122.0], [94.2, 4140.0], [94.3, 4155.0], [94.4, 4162.0], [94.5, 4183.0], [94.6, 4191.0], [94.7, 4214.0], [94.8, 4230.0], [94.9, 4247.0], [95.0, 4261.0], [95.1, 4273.0], [95.2, 4285.0], [95.3, 4300.0], [95.4, 4317.0], [95.5, 4340.0], [95.6, 4355.0], [95.7, 4376.0], [95.8, 4395.0], [95.9, 4411.0], [96.0, 4430.0], [96.1, 4449.0], [96.2, 4464.0], [96.3, 4492.0], [96.4, 4508.0], [96.5, 4525.0], [96.6, 4539.0], [96.7, 4562.0], [96.8, 4590.0], [96.9, 4604.0], [97.0, 4634.0], [97.1, 4665.0], [97.2, 4682.0], [97.3, 4700.0], [97.4, 4723.0], [97.5, 4737.0], [97.6, 4760.0], [97.7, 4799.0], [97.8, 4822.0], [97.9, 4848.0], [98.0, 4886.0], [98.1, 4947.0], [98.2, 4987.0], [98.3, 5019.0], [98.4, 5057.0], [98.5, 5096.0], [98.6, 5119.0], [98.7, 5163.0], [98.8, 5208.0], [98.9, 5247.0], [99.0, 5311.0], [99.1, 5367.0], [99.2, 5417.0], [99.3, 5483.0], [99.4, 5587.0], [99.5, 5672.0], [99.6, 5818.0], [99.7, 6027.0], [99.8, 6275.0], [99.9, 6629.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 7249.0, "series": [{"data": [[0.0, 7249.0], [600.0, 63.0], [700.0, 76.0], [800.0, 95.0], [900.0, 120.0], [1000.0, 148.0], [1100.0, 177.0], [1200.0, 201.0], [1300.0, 207.0], [1400.0, 221.0], [1500.0, 272.0], [1600.0, 293.0], [1700.0, 267.0], [1800.0, 264.0], [1900.0, 278.0], [2000.0, 276.0], [2100.0, 291.0], [2200.0, 292.0], [2300.0, 255.0], [2400.0, 274.0], [2500.0, 286.0], [2600.0, 221.0], [2700.0, 267.0], [2800.0, 250.0], [2900.0, 298.0], [3000.0, 277.0], [3100.0, 231.0], [3200.0, 246.0], [3300.0, 217.0], [3400.0, 227.0], [3500.0, 190.0], [3600.0, 178.0], [3700.0, 172.0], [3800.0, 151.0], [3900.0, 135.0], [4000.0, 120.0], [4200.0, 118.0], [4100.0, 120.0], [4300.0, 99.0], [4400.0, 86.0], [4600.0, 61.0], [4500.0, 65.0], [4700.0, 52.0], [4800.0, 53.0], [5000.0, 33.0], [4900.0, 39.0], [5100.0, 36.0], [5200.0, 26.0], [5300.0, 25.0], [5500.0, 10.0], [5400.0, 19.0], [5600.0, 17.0], [5700.0, 17.0], [5800.0, 8.0], [5900.0, 12.0], [6000.0, 10.0], [6100.0, 3.0], [6300.0, 9.0], [6200.0, 4.0], [6400.0, 4.0], [6500.0, 5.0], [6600.0, 3.0], [6800.0, 3.0], [6700.0, 2.0], [6900.0, 3.0], [7100.0, 1.0], [7000.0, 3.0], [7400.0, 1.0], [7200.0, 2.0], [7500.0, 1.0], [7800.0, 1.0], [8100.0, 1.0], [8400.0, 1.0], [9100.0, 1.0], [100.0, 71.0], [200.0, 32.0], [300.0, 39.0], [400.0, 55.0], [500.0, 64.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[100.0, 160.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 7218.0], [600.0, 74.0], [700.0, 80.0], [800.0, 82.0], [900.0, 125.0], [1000.0, 150.0], [1100.0, 179.0], [1200.0, 201.0], [1300.0, 210.0], [1400.0, 221.0], [1500.0, 271.0], [1600.0, 271.0], [1700.0, 298.0], [1800.0, 278.0], [1900.0, 298.0], [2000.0, 301.0], [2100.0, 325.0], [2200.0, 312.0], [2300.0, 306.0], [2400.0, 273.0], [2500.0, 258.0], [2600.0, 280.0], [2800.0, 241.0], [2700.0, 231.0], [2900.0, 236.0], [3000.0, 263.0], [3100.0, 248.0], [3200.0, 213.0], [3300.0, 208.0], [3400.0, 221.0], [3500.0, 206.0], [3700.0, 168.0], [3600.0, 180.0], [3800.0, 150.0], [3900.0, 137.0], [4000.0, 111.0], [4300.0, 88.0], [4100.0, 108.0], [4200.0, 102.0], [4400.0, 81.0], [4600.0, 67.0], [4500.0, 84.0], [4700.0, 66.0], [4800.0, 51.0], [4900.0, 35.0], [5100.0, 43.0], [5000.0, 43.0], [5200.0, 33.0], [5300.0, 30.0], [5500.0, 16.0], [5400.0, 22.0], [5600.0, 16.0], [5800.0, 9.0], [5700.0, 11.0], [6000.0, 9.0], [5900.0, 6.0], [6100.0, 4.0], [6200.0, 7.0], [6300.0, 2.0], [6600.0, 4.0], [6400.0, 4.0], [6500.0, 9.0], [6700.0, 4.0], [6800.0, 5.0], [6900.0, 1.0], [7000.0, 1.0], [8700.0, 1.0], [100.0, 72.0], [200.0, 27.0], [300.0, 29.0], [400.0, 39.0], [500.0, 47.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 780.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 14713.0, "series": [{"data": [[0.0, 780.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2579.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 14088.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 14713.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 18.493827160493826, "minX": 1.58768382E12, "maxY": 160.0, "series": [{"data": [[1.58768418E12, 160.0], [1.58768448E12, 130.82622663551396], [1.58768454E12, 18.493827160493826], [1.58768388E12, 155.62398471094144], [1.58768394E12, 160.0], [1.58768424E12, 160.0], [1.5876843E12, 160.0], [1.587684E12, 160.0], [1.58768406E12, 160.0], [1.58768436E12, 160.0], [1.58768442E12, 160.0], [1.58768382E12, 74.39351081530783], [1.58768412E12, 160.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768454E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.0, "maxY": 2933.7000000000003, "series": [{"data": [[3.0, 47.0], [5.0, 36.5], [6.0, 43.0], [7.0, 3.0], [9.0, 15.0], [10.0, 41.5], [11.0, 43.0], [12.0, 13.333333333333334], [14.0, 29.8], [15.0, 29.5], [17.0, 2.6666666666666665], [18.0, 2.6666666666666665], [19.0, 21.333333333333332], [21.0, 28.5], [22.0, 19.625], [23.0, 3.0], [24.0, 37.0], [25.0, 16.5], [26.0, 29.75], [27.0, 3.0], [28.0, 18.333333333333332], [29.0, 9.666666666666666], [30.0, 70.0], [31.0, 26.0], [32.0, 2.25], [33.0, 19.5], [34.0, 7.625], [35.0, 2.6666666666666665], [36.0, 28.25], [37.0, 20.0], [38.0, 24.2], [39.0, 23.333333333333336], [40.0, 31.555555555555557], [41.0, 14.142857142857142], [42.0, 24.22222222222222], [43.0, 39.07692307692308], [44.0, 29.0], [45.0, 22.272727272727273], [46.0, 2.142857142857143], [47.0, 2.5], [48.0, 8.8], [49.0, 7.142857142857143], [50.0, 1.5], [51.0, 33.31578947368421], [52.0, 62.60000000000001], [53.0, 118.77777777777777], [54.0, 6.125], [55.0, 93.25], [56.0, 18.625], [57.0, 79.99999999999999], [58.0, 31.7], [59.0, 28.9], [60.0, 2.0], [61.0, 18.636363636363637], [62.0, 36.0], [63.0, 12.555555555555555], [64.0, 20.0], [65.0, 14.333333333333334], [66.0, 36.705882352941174], [67.0, 18.571428571428573], [68.0, 55.57142857142857], [69.0, 31.066666666666666], [70.0, 84.0], [71.0, 87.83333333333334], [75.0, 543.6666666666666], [74.0, 209.21739130434779], [73.0, 186.0], [76.0, 1399.875], [77.0, 2177.5], [78.0, 1378.2222222222222], [79.0, 1297.0588235294117], [80.0, 2357.4], [81.0, 2018.9230769230765], [82.0, 1046.857142857143], [83.0, 1433.529411764706], [84.0, 979.0], [85.0, 568.3809523809524], [86.0, 1177.769230769231], [87.0, 2506.439024390245], [88.0, 160.0], [90.0, 416.7], [91.0, 1047.0], [92.0, 447.5], [93.0, 954.0000000000002], [94.0, 1393.8333333333335], [95.0, 325.75], [96.0, 595.6153846153845], [97.0, 71.21428571428571], [98.0, 582.0], [99.0, 497.74999999999994], [100.0, 562.7619047619046], [101.0, 267.25], [102.0, 692.4444444444443], [103.0, 545.5], [104.0, 327.0370370370371], [105.0, 422.80000000000007], [106.0, 730.75], [107.0, 198.125], [108.0, 97.94444444444444], [109.0, 673.0], [110.0, 405.0909090909091], [111.0, 222.37499999999997], [112.0, 145.02499999999998], [113.0, 489.50000000000006], [114.0, 503.94444444444446], [115.0, 611.2], [116.0, 1000.0], [117.0, 728.909090909091], [118.0, 1205.142857142857], [119.0, 630.8333333333334], [120.0, 638.4705882352939], [121.0, 795.9285714285714], [122.0, 275.58536585365846], [123.0, 295.66666666666674], [124.0, 1746.857142857143], [125.0, 673.6000000000001], [126.0, 1829.7142857142856], [127.0, 1036.0], [128.0, 1683.625], [129.0, 550.0624999999999], [130.0, 368.86666666666673], [131.0, 649.3333333333334], [132.0, 60.97435897435898], [133.0, 190.30555555555557], [134.0, 375.5], [135.0, 299.35294117647067], [136.0, 379.8648648648649], [137.0, 1265.25], [138.0, 321.0961538461538], [139.0, 1258.7777777777776], [140.0, 1279.4666666666667], [141.0, 365.0555555555556], [142.0, 753.090909090909], [143.0, 530.1935483870969], [144.0, 534.9999999999999], [145.0, 646.1999999999999], [146.0, 958.2857142857146], [147.0, 308.2051282051281], [148.0, 534.8181818181818], [149.0, 386.03448275862075], [150.0, 1359.125], [151.0, 1173.5714285714287], [152.0, 733.8823529411765], [153.0, 671.2105263157897], [154.0, 557.1111111111113], [155.0, 811.8749999999999], [156.0, 346.2564102564103], [157.0, 119.4328358208955], [158.0, 45.41549295774643], [159.0, 526.0270270270269], [160.0, 1572.6402623612398], [1.0, 31.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[153.43149999999926, 1424.4051875000068]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 156.0], [3.0, 155.0], [4.0, 155.0], [5.0, 149.0], [6.0, 150.0], [7.0, 152.0], [8.0, 158.0], [9.0, 151.0], [10.0, 155.0], [11.0, 159.0], [12.0, 155.0], [13.0, 160.0], [14.0, 149.0], [15.0, 159.0], [16.0, 156.0], [17.0, 150.0], [18.0, 149.0], [19.0, 158.0], [20.0, 150.0], [21.0, 162.0], [22.0, 162.0], [23.0, 157.0], [24.0, 147.0], [25.0, 149.0], [26.0, 149.0], [27.0, 147.0], [28.0, 160.0], [29.0, 151.0], [30.0, 150.0], [31.0, 143.0], [32.0, 153.0], [33.0, 158.0], [34.0, 149.0], [35.0, 148.0], [36.0, 153.0], [37.0, 149.0], [38.0, 152.0], [39.0, 149.0], [40.0, 149.0], [41.0, 158.0], [42.0, 152.0], [43.0, 152.0], [44.0, 144.0], [45.0, 147.0], [46.0, 154.0], [47.0, 153.0], [48.0, 159.0], [49.0, 154.0], [50.0, 155.0], [51.0, 157.0], [52.0, 152.0], [53.0, 149.0], [54.0, 152.0], [55.0, 158.0], [56.0, 161.0], [57.0, 152.0], [58.0, 149.0], [59.0, 148.0], [60.0, 158.0], [61.0, 154.0], [62.0, 154.0], [63.0, 162.0], [64.0, 153.0], [65.0, 153.0], [66.0, 157.0], [67.0, 148.0], [68.0, 148.0], [69.0, 161.0], [70.0, 152.0], [71.0, 176.0], [72.0, 161.0], [73.0, 163.0], [74.0, 157.0], [75.0, 160.0], [76.0, 148.0], [77.0, 165.0], [78.0, 159.0], [79.0, 159.0], [80.0, 145.0], [81.0, 169.0], [82.0, 157.0], [83.0, 162.0], [84.0, 171.0], [85.0, 152.0], [86.0, 157.0], [87.0, 151.0], [88.0, 151.0], [89.0, 152.0], [90.0, 149.0], [91.0, 169.0], [92.0, 155.0], [93.0, 157.0], [94.0, 154.0], [95.0, 162.0], [96.0, 155.0], [97.0, 154.0], [98.0, 164.0], [99.0, 155.0], [100.0, 164.0], [101.0, 153.0], [102.0, 150.0], [103.0, 153.0], [104.0, 158.0], [105.0, 155.0], [106.0, 154.0], [107.0, 159.0], [108.0, 159.0], [109.0, 157.0], [110.0, 154.0], [111.0, 146.0], [112.0, 151.0], [113.0, 156.0], [114.0, 159.0], [115.0, 156.0], [116.0, 166.0], [117.0, 147.0], [118.0, 151.0], [119.0, 160.0], [120.0, 159.0], [121.0, 159.0], [122.0, 192.0], [123.0, 158.0], [124.0, 154.0], [125.0, 158.0], [126.0, 155.0], [127.0, 155.0], [128.0, 147.0], [129.0, 164.0], [130.0, 162.0], [131.0, 166.0], [132.0, 151.0], [133.0, 149.0], [134.0, 156.0], [135.0, 155.0], [136.0, 162.0], [137.0, 141.0], [138.0, 150.0], [139.0, 163.0], [140.0, 154.0], [141.0, 157.0], [142.0, 157.0], [143.0, 166.0], [144.0, 167.0], [145.0, 146.0], [146.0, 150.0], [147.0, 160.0], [148.0, 148.0], [149.0, 184.0], [150.0, 156.0], [151.0, 159.0], [152.0, 170.0], [153.0, 165.0], [154.0, 147.0], [155.0, 179.0], [156.0, 164.0], [157.0, 152.0], [158.0, 148.0], [159.0, 155.0], [160.0, 150.0], [1.0, 191.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[80.5, 155.91875000000005]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[4.0, 3.0], [5.0, 26.0], [6.0, 14.5], [7.0, 2.0], [9.0, 141.5], [10.0, 3.0], [11.0, 46.0], [12.0, 20.0], [13.0, 3.5], [14.0, 26.2], [15.0, 10.0], [16.0, 2.5], [18.0, 2.6666666666666665], [19.0, 31.6], [20.0, 3.5], [21.0, 18.0], [22.0, 14.666666666666666], [23.0, 2.5], [24.0, 21.5], [25.0, 11.875], [26.0, 44.72727272727273], [27.0, 2.0], [28.0, 14.75], [29.0, 19.2], [30.0, 28.333333333333332], [31.0, 16.166666666666668], [32.0, 2.3333333333333335], [33.0, 43.25], [34.0, 2.3333333333333335], [35.0, 2.75], [36.0, 19.833333333333336], [37.0, 26.8], [38.0, 2.666666666666667], [39.0, 14.2], [40.0, 12.625], [41.0, 12.5], [42.0, 27.1], [43.0, 60.75], [44.0, 63.0], [45.0, 27.0], [46.0, 8.5], [47.0, 2.0], [48.0, 31.142857142857142], [49.0, 2.3000000000000003], [50.0, 3.0], [51.0, 25.0], [52.0, 91.625], [53.0, 24.555555555555557], [54.0, 10.25], [55.0, 71.46153846153845], [56.0, 26.6], [57.0, 119.33333333333333], [58.0, 20.875], [59.0, 66.0], [60.0, 4.0], [61.0, 21.555555555555557], [62.0, 25.8], [63.0, 34.57142857142857], [64.0, 74.0], [65.0, 9.545454545454545], [66.0, 51.166666666666664], [67.0, 2.6], [68.0, 34.666666666666664], [69.0, 27.0], [70.0, 31.18181818181818], [71.0, 100.25], [75.0, 979.0], [74.0, 212.6], [73.0, 147.25], [76.0, 1838.5], [77.0, 1481.5], [78.0, 1066.2666666666664], [79.0, 1514.875], [80.0, 2019.2142857142858], [81.0, 2026.9999999999998], [82.0, 1806.5], [83.0, 1592.4999999999998], [84.0, 2231.875], [85.0, 467.37499999999994], [86.0, 2461.916666666667], [87.0, 2933.7000000000003], [88.0, 151.5], [90.0, 247.50000000000006], [91.0, 726.0], [92.0, 147.42857142857142], [93.0, 763.0], [94.0, 1025.0], [95.0, 997.2500000000002], [96.0, 1198.1764705882354], [97.0, 318.75], [98.0, 1056.8125], [99.0, 1201.8235294117644], [100.0, 509.4999999999999], [101.0, 246.2857142857143], [102.0, 434.7777777777777], [103.0, 408.55555555555566], [104.0, 102.00000000000004], [105.0, 275.4347826086957], [106.0, 415.5], [107.0, 174.6923076923077], [108.0, 450.2142857142857], [109.0, 739.7272727272727], [110.0, 156.6], [111.0, 441.6000000000001], [112.0, 131.49019607843135], [113.0, 360.09090909090907], [114.0, 625.4090909090909], [115.0, 630.0000000000001], [116.0, 888.0833333333333], [117.0, 844.6666666666667], [118.0, 997.8571428571427], [119.0, 1060.5], [120.0, 869.6923076923075], [121.0, 1025.375], [122.0, 355.8571428571427], [123.0, 590.590909090909], [124.0, 1292.75], [125.0, 380.84], [126.0, 1787.25], [127.0, 707.5714285714286], [128.0, 1806.8333333333333], [129.0, 366.42857142857144], [130.0, 430.4545454545455], [131.0, 577.6071428571427], [132.0, 152.34210526315783], [133.0, 527.230769230769], [134.0, 422.3225806451612], [135.0, 250.91999999999987], [136.0, 343.6944444444444], [137.0, 2049.6666666666665], [138.0, 433.4999999999999], [139.0, 1095.6153846153845], [140.0, 1053.3125], [141.0, 362.04545454545445], [142.0, 725.1999999999998], [143.0, 343.0344827586206], [144.0, 780.6923076923077], [145.0, 246.84999999999997], [146.0, 1136.9130434782608], [147.0, 275.53125], [148.0, 190.33333333333337], [149.0, 853.5999999999998], [150.0, 1009.3636363636363], [151.0, 1027.3333333333328], [152.0, 809.8636363636361], [153.0, 403.0750000000001], [154.0, 783.3333333333334], [155.0, 815.9], [156.0, 686.9574468085106], [157.0, 73.6825396825397], [158.0, 32.63703703703705], [159.0, 438.4181818181816], [160.0, 1569.298079699689], [1.0, 48.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[153.40031250000084, 1427.7849374999992]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 160.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 579.3, "minX": 1.58768382E12, "maxY": 252146.68333333332, "series": [{"data": [[1.58768418E12, 180172.31666666668], [1.58768448E12, 66457.46666666666], [1.58768454E12, 9395.7], [1.58768388E12, 239551.55], [1.58768394E12, 245427.7], [1.58768424E12, 226418.61666666667], [1.5876843E12, 252146.68333333332], [1.587684E12, 231793.15], [1.58768406E12, 230233.88333333333], [1.58768436E12, 46328.3], [1.58768442E12, 13562.7], [1.58768382E12, 71632.23333333334], [1.58768412E12, 237625.76666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58768418E12, 19462.4], [1.58768448E12, 24482.366666666665], [1.58768454E12, 579.3], [1.58768388E12, 14840.7], [1.58768394E12, 15444.1], [1.58768424E12, 14149.666666666666], [1.5876843E12, 16187.7], [1.587684E12, 15072.1], [1.58768406E12, 14178.6], [1.58768436E12, 34978.23333333333], [1.58768442E12, 36593.566666666666], [1.58768382E12, 8181.366666666667], [1.58768412E12, 15257.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768454E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2.1365949119373777, "minX": 1.58768382E12, "maxY": 3037.585365853662, "series": [{"data": [[1.58768418E12, 1587.050586510265], [1.58768448E12, 120.50778097982703], [1.58768454E12, 44.11111111111111], [1.58768388E12, 2574.3513248282657], [1.58768394E12, 2543.260387811631], [1.58768424E12, 3037.585365853662], [1.5876843E12, 2455.6740088105726], [1.587684E12, 2702.489058039964], [1.58768406E12, 2983.204819277109], [1.58768436E12, 125.11834078893858], [1.58768442E12, 2.1365949119373777], [1.58768382E12, 638.0116959064327], [1.58768412E12, 2647.387370405278]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768388E12, 157.3513513513514], [1.58768382E12, 155.4878048780488]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768418E12, 1699.7444771723115], [1.58768448E12, 141.92303137951447], [1.58768454E12, 47.555555555555564], [1.58768388E12, 2592.6769527483116], [1.58768394E12, 2597.477251624884], [1.58768424E12, 2916.6783919597992], [1.5876843E12, 2379.3906111603187], [1.587684E12, 2668.8628192999045], [1.58768406E12, 2948.591691995949], [1.58768436E12, 112.78257295519978], [1.58768442E12, 2.3004291845493623], [1.58768382E12, 715.0512367491165], [1.58768412E12, 2613.333643988818]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768454E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2.1291585127201595, "minX": 1.58768382E12, "maxY": 3037.298780487803, "series": [{"data": [[1.58768418E12, 1586.7419354838717], [1.58768448E12, 120.02017291066286], [1.58768454E12, 43.82222222222223], [1.58768388E12, 2574.041216879291], [1.58768394E12, 2543.023084025855], [1.58768424E12, 3037.298780487803], [1.5876843E12, 2455.4643171806197], [1.587684E12, 2702.006660323502], [1.58768406E12, 2982.800200803207], [1.58768436E12, 125.10980073200511], [1.58768442E12, 2.1291585127201595], [1.58768382E12, 636.1734892787523], [1.58768412E12, 2647.1074458058424]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768388E12, 157.29729729729726], [1.58768382E12, 155.4146341463414]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768418E12, 1698.941089837999], [1.58768448E12, 141.28004736530502], [1.58768454E12, 47.27777777777778], [1.58768388E12, 2592.199614271934], [1.58768394E12, 2597.2339832869056], [1.58768424E12, 2916.3105527638177], [1.5876843E12, 2379.1532329495103], [1.587684E12, 2668.1286660359497], [1.58768406E12, 2948.2877406281664], [1.58768436E12, 112.75092478421654], [1.58768442E12, 2.29379633242294], [1.58768382E12, 712.906360424028], [1.58768412E12, 2613.0205032618796]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768454E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58768382E12, "maxY": 1.3783783783783787, "series": [{"data": [[1.58768418E12, 0.2697947214076247], [1.58768448E12, 0.01902017291066283], [1.58768454E12, 0.0], [1.58768388E12, 0.5868498527968604], [1.58768394E12, 0.5096952908587257], [1.58768424E12, 0.42581300813008155], [1.5876843E12, 0.43700440528634343], [1.587684E12, 0.4462416745956229], [1.58768406E12, 0.43875502008032113], [1.58768436E12, 0.04595363969093145], [1.58768442E12, 0.0], [1.58768382E12, 0.38011695906432796], [1.58768412E12, 0.4316682375117815]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768388E12, 1.3783783783783787], [1.58768382E12, 0.9268292682926838]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768418E12, 0.41163475699558166], [1.58768448E12, 0.4274718768502076], [1.58768454E12, 0.5], [1.58768388E12, 0.5197685631629698], [1.58768394E12, 0.4791086350974927], [1.58768424E12, 0.4733668341708545], [1.5876843E12, 0.4650132860938883], [1.587684E12, 0.4862819299905394], [1.58768406E12, 0.4589665653495443], [1.58768436E12, 0.44266337854500654], [1.58768442E12, 0.4365977370269225], [1.58768382E12, 0.5706713780918723], [1.58768412E12, 0.4287045666356011]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768454E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 17.0, "minX": 1.58768382E12, "maxY": 9172.0, "series": [{"data": [[1.58768418E12, 5764.0], [1.587684E12, 9172.0], [1.58768448E12, 3867.0], [1.58768406E12, 7537.0], [1.58768454E12, 89.0], [1.58768388E12, 5243.0], [1.58768436E12, 2043.0], [1.58768394E12, 6444.0], [1.58768424E12, 5601.0], [1.58768382E12, 3622.0], [1.5876843E12, 5609.0], [1.58768412E12, 7864.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58768418E12, 716.0], [1.587684E12, 25.0], [1.58768448E12, 22.0], [1.58768406E12, 107.0], [1.58768454E12, 23.0], [1.58768388E12, 141.0], [1.58768436E12, 928.0], [1.58768394E12, 238.0], [1.58768424E12, 320.0], [1.58768382E12, 25.0], [1.5876843E12, 17.0], [1.58768412E12, 287.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58768418E12, 3773.7], [1.587684E12, 4354.1], [1.58768448E12, 3200.4], [1.58768406E12, 5233.6], [1.58768454E12, 69.39999999999999], [1.58768388E12, 3870.800000000001], [1.58768436E12, 1810.8000000000002], [1.58768394E12, 4069.4], [1.58768424E12, 4365.0], [1.58768382E12, 2237.7999999999997], [1.5876843E12, 3975.1000000000004], [1.58768412E12, 3939.4000000000024]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58768418E12, 5425.0], [1.587684E12, 5381.609999999999], [1.58768448E12, 3736.55], [1.58768406E12, 6728.120000000001], [1.58768454E12, 89.0], [1.58768388E12, 4527.24], [1.58768436E12, 1984.08], [1.58768394E12, 5059.629999999995], [1.58768424E12, 5109.0], [1.58768382E12, 3455.7599999999998], [1.5876843E12, 5119.0], [1.58768412E12, 5967.639999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58768418E12, 4526.599999999997], [1.587684E12, 4673.15], [1.58768448E12, 3474.6], [1.58768406E12, 5822.0], [1.58768454E12, 76.69999999999997], [1.58768388E12, 4157.3], [1.58768436E12, 1890.9], [1.58768394E12, 4488.099999999999], [1.58768424E12, 4642.5], [1.58768382E12, 2625.7], [1.5876843E12, 4651.599999999997], [1.58768412E12, 4897.799999999998]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768454E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 3323.5, "series": [{"data": [[2.0, 104.0], [3.0, 103.5], [4.0, 48.0], [6.0, 54.0], [9.0, 43.0], [10.0, 154.0], [11.0, 70.0], [12.0, 153.0], [15.0, 41.0], [16.0, 2620.5], [17.0, 1009.0], [18.0, 2533.0], [19.0, 2918.0], [20.0, 2589.0], [21.0, 1680.0], [22.0, 2190.0], [23.0, 2747.0], [24.0, 2398.5], [25.0, 2816.5], [26.0, 3031.5], [27.0, 3208.0], [28.0, 2589.0], [29.0, 3025.5], [30.0, 3032.0], [31.0, 2794.0], [33.0, 2602.0], [32.0, 2359.0], [34.0, 2607.0], [35.0, 2493.5], [36.0, 2636.0], [37.0, 2501.5], [38.0, 2404.0], [39.0, 2264.5], [41.0, 2248.0], [40.0, 2501.0], [43.0, 1954.0], [42.0, 1960.0], [44.0, 2653.0], [45.0, 2447.5], [46.0, 2447.0], [47.0, 3002.0], [48.0, 1899.0], [49.0, 1834.5], [50.0, 3323.5], [51.0, 1514.0], [52.0, 2112.0], [53.0, 2139.0], [54.0, 731.0], [55.0, 1632.0], [57.0, 1535.0], [66.0, 1261.5], [72.0, 2137.5], [76.0, 1878.5], [87.0, 1815.5], [85.0, 1334.0], [101.0, 2031.0], [123.0, 1840.5], [125.0, 2448.0], [127.0, 527.0], [1.0, 39.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 3.0], [6.0, 2.0], [9.0, 3.0], [10.0, 4.0], [12.0, 3.0], [15.0, 3.0], [16.0, 3.0], [21.0, 2.0], [23.0, 2.0], [25.0, 2.5], [27.0, 2.0], [28.0, 2.0], [30.0, 2.0], [33.0, 2.0], [32.0, 3.0], [34.0, 2.0], [36.0, 2.0], [37.0, 2.0], [38.0, 2.0], [39.0, 2.0], [41.0, 2.0], [40.0, 2.0], [42.0, 2.0], [47.0, 3.0], [46.0, 2.0], [48.0, 2.0], [53.0, 2.0], [54.0, 912.0], [55.0, 2.0], [58.0, 2.0], [59.0, 2.0], [61.0, 2.0], [62.0, 2.0], [63.0, 2.0], [64.0, 2.0], [67.0, 2.0], [66.0, 2.0], [65.0, 2.0], [69.0, 2.0], [71.0, 2.0], [74.0, 2.0], [75.0, 2.0], [73.0, 2.0], [72.0, 2.0], [76.0, 2.0], [79.0, 2.0], [77.0, 2.0], [78.0, 2.0], [80.0, 2.0], [82.0, 2.0], [81.0, 2.0], [83.0, 2.0], [87.0, 2.0], [85.0, 2.0], [86.0, 2.0], [84.0, 2.0], [91.0, 2.0], [89.0, 2.0], [88.0, 2.0], [90.0, 2.0], [95.0, 2.0], [94.0, 2.0], [92.0, 2.0], [93.0, 2.0], [97.0, 2.0], [99.0, 2.0], [96.0, 2.0], [101.0, 2.5], [102.0, 2.0], [100.0, 2.0], [105.0, 2.0], [106.0, 2.0], [108.0, 2.0], [112.0, 2.0], [123.0, 1171.0], [125.0, 1022.5], [127.0, 2782.0], [124.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 127.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 3323.0, "series": [{"data": [[2.0, 104.0], [3.0, 103.0], [4.0, 48.0], [6.0, 53.0], [9.0, 43.0], [10.0, 154.0], [11.0, 70.0], [12.0, 152.5], [15.0, 41.0], [16.0, 2618.5], [17.0, 1009.0], [18.0, 2516.5], [19.0, 2918.0], [20.0, 2589.0], [21.0, 1680.0], [22.0, 2189.5], [23.0, 2746.0], [24.0, 2398.5], [25.0, 2816.5], [26.0, 3028.5], [27.0, 3208.0], [28.0, 2589.0], [29.0, 3025.0], [30.0, 3032.0], [31.0, 2794.0], [33.0, 2602.0], [32.0, 2359.0], [34.0, 2607.0], [35.0, 2493.5], [36.0, 2636.0], [37.0, 2501.5], [38.0, 2402.0], [39.0, 2264.5], [41.0, 2248.0], [40.0, 2501.0], [43.0, 1954.0], [42.0, 1960.0], [44.0, 2646.0], [45.0, 2447.0], [46.0, 2446.5], [47.0, 3002.0], [48.0, 1899.0], [49.0, 1832.5], [50.0, 3323.0], [51.0, 1514.0], [52.0, 2111.5], [53.0, 2139.0], [54.0, 724.0], [55.0, 1632.0], [57.0, 1535.0], [66.0, 1261.5], [72.0, 2137.5], [76.0, 1877.5], [87.0, 1813.5], [85.0, 1334.0], [101.0, 2030.5], [123.0, 1839.5], [125.0, 2414.0], [127.0, 527.0], [1.0, 39.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 2.0], [6.0, 2.0], [9.0, 3.0], [10.0, 3.5], [12.0, 3.0], [15.0, 3.0], [16.0, 3.0], [21.0, 2.0], [23.0, 2.0], [25.0, 2.0], [27.0, 2.0], [28.0, 2.0], [30.0, 2.0], [33.0, 2.0], [32.0, 3.0], [34.0, 2.0], [36.0, 2.0], [37.0, 2.0], [38.0, 2.0], [39.0, 2.0], [41.0, 2.0], [40.0, 2.0], [42.0, 2.0], [47.0, 3.0], [46.0, 2.0], [48.0, 2.0], [53.0, 2.0], [54.0, 912.0], [55.0, 2.0], [58.0, 2.0], [59.0, 2.0], [61.0, 2.0], [62.0, 2.0], [63.0, 2.0], [64.0, 2.0], [67.0, 2.0], [66.0, 2.0], [65.0, 2.0], [69.0, 2.0], [71.0, 2.0], [74.0, 2.0], [75.0, 2.0], [73.0, 2.0], [72.0, 2.0], [76.0, 2.0], [79.0, 2.0], [77.0, 2.0], [78.0, 2.0], [80.0, 2.0], [82.0, 2.0], [81.0, 2.0], [83.0, 2.0], [87.0, 2.0], [85.0, 2.0], [86.0, 2.0], [84.0, 2.0], [91.0, 2.0], [89.0, 2.0], [88.0, 2.0], [90.0, 2.0], [95.0, 2.0], [94.0, 2.0], [92.0, 2.0], [93.0, 2.0], [97.0, 2.0], [99.0, 2.0], [96.0, 2.0], [101.0, 2.5], [102.0, 2.0], [100.0, 2.0], [105.0, 2.0], [106.0, 2.0], [108.0, 2.0], [112.0, 2.0], [123.0, 1171.0], [125.0, 1022.5], [127.0, 2782.0], [124.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 127.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.35, "minX": 1.58768382E12, "maxY": 85.31666666666666, "series": [{"data": [[1.58768418E12, 45.333333333333336], [1.58768448E12, 57.05], [1.58768454E12, 1.35], [1.58768388E12, 35.56666666666667], [1.58768394E12, 36.06666666666667], [1.58768424E12, 33.233333333333334], [1.5876843E12, 37.233333333333334], [1.587684E12, 35.25], [1.58768406E12, 32.7], [1.58768436E12, 80.25], [1.58768442E12, 85.31666666666666], [1.58768382E12, 21.0], [1.58768412E12, 35.65]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768454E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.58768382E12, "maxY": 85.3, "series": [{"data": [[1.58768418E12, 25.366666666666667], [1.587684E12, 33.2], [1.58768448E12, 8.433333333333334], [1.58768406E12, 33.05], [1.58768454E12, 1.35], [1.58768388E12, 34.88333333333333], [1.58768436E12, 4.883333333333334], [1.58768394E12, 35.2], [1.58768424E12, 32.483333333333334], [1.58768382E12, 11.75], [1.5876843E12, 36.13333333333333], [1.58768412E12, 34.05]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58768418E12, 20.0], [1.587684E12, 1.9333333333333333], [1.58768448E12, 48.63333333333333], [1.58768436E12, 76.65], [1.58768394E12, 0.8], [1.58768442E12, 85.3], [1.58768424E12, 0.5], [1.58768382E12, 8.283333333333333], [1.5876843E12, 1.6], [1.58768412E12, 1.5166666666666666]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768454E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.58768382E12, "maxY": 42.71666666666667, "series": [{"data": [[1.58768388E12, 0.6166666666666667], [1.58768382E12, 2.05]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58768418E12, 10.183333333333334], [1.587684E12, 0.9333333333333333], [1.58768448E12, 24.5], [1.58768436E12, 38.666666666666664], [1.58768394E12, 0.35], [1.58768442E12, 42.583333333333336], [1.58768424E12, 0.16666666666666666], [1.58768382E12, 3.9166666666666665], [1.5876843E12, 0.7666666666666667], [1.58768412E12, 0.7166666666666667]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.58768418E12, 12.55], [1.587684E12, 16.583333333333332], [1.58768448E12, 4.416666666666667], [1.58768406E12, 16.6], [1.58768454E12, 0.75], [1.58768388E12, 16.983333333333334], [1.58768436E12, 2.316666666666667], [1.58768394E12, 17.7], [1.58768424E12, 16.233333333333334], [1.58768382E12, 4.633333333333334], [1.5876843E12, 18.15], [1.58768412E12, 16.966666666666665]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58768418E12, 12.816666666666666], [1.587684E12, 16.616666666666667], [1.58768448E12, 4.016666666666667], [1.58768406E12, 16.45], [1.58768454E12, 0.6], [1.58768388E12, 17.283333333333335], [1.58768436E12, 2.566666666666667], [1.58768394E12, 17.5], [1.58768424E12, 16.25], [1.58768382E12, 5.066666666666666], [1.5876843E12, 17.983333333333334], [1.58768412E12, 17.083333333333332]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58768418E12, 9.816666666666666], [1.587684E12, 1.0], [1.58768448E12, 24.133333333333333], [1.58768436E12, 37.983333333333334], [1.58768394E12, 0.45], [1.58768442E12, 42.71666666666667], [1.58768424E12, 0.3333333333333333], [1.58768382E12, 4.366666666666666], [1.5876843E12, 0.8333333333333334], [1.58768412E12, 0.8]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768454E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.58768382E12, "maxY": 85.3, "series": [{"data": [[1.58768418E12, 25.366666666666667], [1.587684E12, 33.2], [1.58768448E12, 8.433333333333334], [1.58768406E12, 33.05], [1.58768454E12, 1.35], [1.58768388E12, 34.88333333333333], [1.58768436E12, 4.883333333333334], [1.58768394E12, 35.2], [1.58768424E12, 32.483333333333334], [1.58768382E12, 11.75], [1.5876843E12, 36.13333333333333], [1.58768412E12, 34.05]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58768418E12, 20.0], [1.587684E12, 1.9333333333333333], [1.58768448E12, 48.63333333333333], [1.58768436E12, 76.65], [1.58768394E12, 0.8], [1.58768442E12, 85.3], [1.58768424E12, 0.5], [1.58768382E12, 8.283333333333333], [1.5876843E12, 1.6], [1.58768412E12, 1.5166666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768454E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

