/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 15572.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 2.0], [28.9, 2.0], [29.0, 2.0], [29.1, 2.0], [29.2, 2.0], [29.3, 2.0], [29.4, 2.0], [29.5, 2.0], [29.6, 2.0], [29.7, 2.0], [29.8, 2.0], [29.9, 2.0], [30.0, 2.0], [30.1, 2.0], [30.2, 2.0], [30.3, 2.0], [30.4, 2.0], [30.5, 2.0], [30.6, 2.0], [30.7, 2.0], [30.8, 2.0], [30.9, 2.0], [31.0, 2.0], [31.1, 2.0], [31.2, 2.0], [31.3, 2.0], [31.4, 2.0], [31.5, 2.0], [31.6, 2.0], [31.7, 2.0], [31.8, 2.0], [31.9, 2.0], [32.0, 2.0], [32.1, 2.0], [32.2, 2.0], [32.3, 2.0], [32.4, 2.0], [32.5, 2.0], [32.6, 2.0], [32.7, 2.0], [32.8, 2.0], [32.9, 2.0], [33.0, 2.0], [33.1, 2.0], [33.2, 2.0], [33.3, 2.0], [33.4, 2.0], [33.5, 2.0], [33.6, 2.0], [33.7, 2.0], [33.8, 2.0], [33.9, 2.0], [34.0, 2.0], [34.1, 2.0], [34.2, 2.0], [34.3, 2.0], [34.4, 2.0], [34.5, 2.0], [34.6, 2.0], [34.7, 2.0], [34.8, 2.0], [34.9, 2.0], [35.0, 2.0], [35.1, 2.0], [35.2, 2.0], [35.3, 2.0], [35.4, 2.0], [35.5, 2.0], [35.6, 2.0], [35.7, 2.0], [35.8, 2.0], [35.9, 2.0], [36.0, 2.0], [36.1, 2.0], [36.2, 2.0], [36.3, 2.0], [36.4, 2.0], [36.5, 2.0], [36.6, 2.0], [36.7, 2.0], [36.8, 2.0], [36.9, 2.0], [37.0, 2.0], [37.1, 2.0], [37.2, 2.0], [37.3, 2.0], [37.4, 2.0], [37.5, 2.0], [37.6, 2.0], [37.7, 2.0], [37.8, 2.0], [37.9, 2.0], [38.0, 2.0], [38.1, 2.0], [38.2, 2.0], [38.3, 2.0], [38.4, 2.0], [38.5, 2.0], [38.6, 2.0], [38.7, 2.0], [38.8, 2.0], [38.9, 2.0], [39.0, 2.0], [39.1, 2.0], [39.2, 2.0], [39.3, 2.0], [39.4, 2.0], [39.5, 2.0], [39.6, 2.0], [39.7, 2.0], [39.8, 2.0], [39.9, 2.0], [40.0, 2.0], [40.1, 2.0], [40.2, 2.0], [40.3, 2.0], [40.4, 2.0], [40.5, 2.0], [40.6, 2.0], [40.7, 2.0], [40.8, 2.0], [40.9, 2.0], [41.0, 2.0], [41.1, 2.0], [41.2, 2.0], [41.3, 2.0], [41.4, 2.0], [41.5, 2.0], [41.6, 2.0], [41.7, 2.0], [41.8, 2.0], [41.9, 2.0], [42.0, 2.0], [42.1, 2.0], [42.2, 2.0], [42.3, 2.0], [42.4, 2.0], [42.5, 2.0], [42.6, 2.0], [42.7, 2.0], [42.8, 2.0], [42.9, 2.0], [43.0, 2.0], [43.1, 2.0], [43.2, 2.0], [43.3, 2.0], [43.4, 2.0], [43.5, 2.0], [43.6, 2.0], [43.7, 2.0], [43.8, 2.0], [43.9, 2.0], [44.0, 2.0], [44.1, 2.0], [44.2, 2.0], [44.3, 2.0], [44.4, 2.0], [44.5, 2.0], [44.6, 2.0], [44.7, 2.0], [44.8, 2.0], [44.9, 2.0], [45.0, 2.0], [45.1, 2.0], [45.2, 2.0], [45.3, 2.0], [45.4, 2.0], [45.5, 2.0], [45.6, 2.0], [45.7, 2.0], [45.8, 2.0], [45.9, 2.0], [46.0, 2.0], [46.1, 2.0], [46.2, 2.0], [46.3, 2.0], [46.4, 2.0], [46.5, 2.0], [46.6, 2.0], [46.7, 2.0], [46.8, 2.0], [46.9, 2.0], [47.0, 2.0], [47.1, 2.0], [47.2, 2.0], [47.3, 2.0], [47.4, 2.0], [47.5, 2.0], [47.6, 2.0], [47.7, 2.0], [47.8, 2.0], [47.9, 2.0], [48.0, 2.0], [48.1, 2.0], [48.2, 2.0], [48.3, 2.0], [48.4, 2.0], [48.5, 2.0], [48.6, 2.0], [48.7, 2.0], [48.8, 2.0], [48.9, 2.0], [49.0, 2.0], [49.1, 2.0], [49.2, 2.0], [49.3, 2.0], [49.4, 2.0], [49.5, 2.0], [49.6, 2.0], [49.7, 2.0], [49.8, 2.0], [49.9, 2.0], [50.0, 2.0], [50.1, 2.0], [50.2, 2.0], [50.3, 2.0], [50.4, 2.0], [50.5, 2.0], [50.6, 2.0], [50.7, 2.0], [50.8, 2.0], [50.9, 2.0], [51.0, 2.0], [51.1, 2.0], [51.2, 2.0], [51.3, 2.0], [51.4, 2.0], [51.5, 2.0], [51.6, 2.0], [51.7, 2.0], [51.8, 2.0], [51.9, 2.0], [52.0, 2.0], [52.1, 2.0], [52.2, 2.0], [52.3, 2.0], [52.4, 2.0], [52.5, 2.0], [52.6, 2.0], [52.7, 2.0], [52.8, 2.0], [52.9, 2.0], [53.0, 2.0], [53.1, 2.0], [53.2, 2.0], [53.3, 2.0], [53.4, 2.0], [53.5, 2.0], [53.6, 2.0], [53.7, 2.0], [53.8, 2.0], [53.9, 2.0], [54.0, 2.0], [54.1, 2.0], [54.2, 2.0], [54.3, 2.0], [54.4, 2.0], [54.5, 2.0], [54.6, 2.0], [54.7, 2.0], [54.8, 2.0], [54.9, 2.0], [55.0, 2.0], [55.1, 2.0], [55.2, 2.0], [55.3, 2.0], [55.4, 2.0], [55.5, 2.0], [55.6, 2.0], [55.7, 2.0], [55.8, 2.0], [55.9, 2.0], [56.0, 2.0], [56.1, 2.0], [56.2, 2.0], [56.3, 2.0], [56.4, 2.0], [56.5, 2.0], [56.6, 2.0], [56.7, 2.0], [56.8, 2.0], [56.9, 2.0], [57.0, 2.0], [57.1, 2.0], [57.2, 2.0], [57.3, 2.0], [57.4, 2.0], [57.5, 2.0], [57.6, 2.0], [57.7, 2.0], [57.8, 2.0], [57.9, 2.0], [58.0, 2.0], [58.1, 2.0], [58.2, 2.0], [58.3, 2.0], [58.4, 2.0], [58.5, 2.0], [58.6, 2.0], [58.7, 2.0], [58.8, 2.0], [58.9, 2.0], [59.0, 2.0], [59.1, 2.0], [59.2, 2.0], [59.3, 2.0], [59.4, 2.0], [59.5, 2.0], [59.6, 2.0], [59.7, 2.0], [59.8, 2.0], [59.9, 2.0], [60.0, 2.0], [60.1, 2.0], [60.2, 2.0], [60.3, 2.0], [60.4, 2.0], [60.5, 2.0], [60.6, 2.0], [60.7, 2.0], [60.8, 2.0], [60.9, 2.0], [61.0, 2.0], [61.1, 2.0], [61.2, 2.0], [61.3, 2.0], [61.4, 2.0], [61.5, 2.0], [61.6, 2.0], [61.7, 2.0], [61.8, 2.0], [61.9, 2.0], [62.0, 2.0], [62.1, 2.0], [62.2, 2.0], [62.3, 2.0], [62.4, 2.0], [62.5, 2.0], [62.6, 2.0], [62.7, 2.0], [62.8, 2.0], [62.9, 2.0], [63.0, 2.0], [63.1, 2.0], [63.2, 3.0], [63.3, 3.0], [63.4, 3.0], [63.5, 3.0], [63.6, 3.0], [63.7, 3.0], [63.8, 3.0], [63.9, 3.0], [64.0, 3.0], [64.1, 3.0], [64.2, 3.0], [64.3, 3.0], [64.4, 3.0], [64.5, 3.0], [64.6, 3.0], [64.7, 3.0], [64.8, 3.0], [64.9, 3.0], [65.0, 3.0], [65.1, 3.0], [65.2, 3.0], [65.3, 3.0], [65.4, 3.0], [65.5, 3.0], [65.6, 3.0], [65.7, 3.0], [65.8, 3.0], [65.9, 3.0], [66.0, 3.0], [66.1, 3.0], [66.2, 3.0], [66.3, 3.0], [66.4, 3.0], [66.5, 3.0], [66.6, 3.0], [66.7, 3.0], [66.8, 3.0], [66.9, 3.0], [67.0, 3.0], [67.1, 3.0], [67.2, 3.0], [67.3, 3.0], [67.4, 3.0], [67.5, 3.0], [67.6, 3.0], [67.7, 4.0], [67.8, 4.0], [67.9, 4.0], [68.0, 4.0], [68.1, 4.0], [68.2, 4.0], [68.3, 4.0], [68.4, 4.0], [68.5, 4.0], [68.6, 5.0], [68.7, 5.0], [68.8, 5.0], [68.9, 5.0], [69.0, 6.0], [69.1, 7.0], [69.2, 8.0], [69.3, 9.0], [69.4, 17.0], [69.5, 22.0], [69.6, 26.0], [69.7, 29.0], [69.8, 30.0], [69.9, 33.0], [70.0, 34.0], [70.1, 36.0], [70.2, 38.0], [70.3, 40.0], [70.4, 42.0], [70.5, 45.0], [70.6, 48.0], [70.7, 53.0], [70.8, 57.0], [70.9, 66.0], [71.0, 73.0], [71.1, 87.0], [71.2, 102.0], [71.3, 128.0], [71.4, 165.0], [71.5, 218.0], [71.6, 249.0], [71.7, 304.0], [71.8, 329.0], [71.9, 366.0], [72.0, 402.0], [72.1, 439.0], [72.2, 481.0], [72.3, 515.0], [72.4, 551.0], [72.5, 592.0], [72.6, 628.0], [72.7, 694.0], [72.8, 727.0], [72.9, 773.0], [73.0, 808.0], [73.1, 848.0], [73.2, 888.0], [73.3, 949.0], [73.4, 995.0], [73.5, 1039.0], [73.6, 1084.0], [73.7, 1119.0], [73.8, 1151.0], [73.9, 1192.0], [74.0, 1238.0], [74.1, 1268.0], [74.2, 1297.0], [74.3, 1332.0], [74.4, 1354.0], [74.5, 1380.0], [74.6, 1417.0], [74.7, 1442.0], [74.8, 1463.0], [74.9, 1487.0], [75.0, 1507.0], [75.1, 1539.0], [75.2, 1557.0], [75.3, 1582.0], [75.4, 1608.0], [75.5, 1635.0], [75.6, 1656.0], [75.7, 1678.0], [75.8, 1700.0], [75.9, 1728.0], [76.0, 1749.0], [76.1, 1765.0], [76.2, 1782.0], [76.3, 1805.0], [76.4, 1834.0], [76.5, 1863.0], [76.6, 1899.0], [76.7, 1921.0], [76.8, 1941.0], [76.9, 1973.0], [77.0, 1996.0], [77.1, 2018.0], [77.2, 2034.0], [77.3, 2053.0], [77.4, 2071.0], [77.5, 2091.0], [77.6, 2108.0], [77.7, 2130.0], [77.8, 2161.0], [77.9, 2181.0], [78.0, 2203.0], [78.1, 2225.0], [78.2, 2244.0], [78.3, 2261.0], [78.4, 2285.0], [78.5, 2311.0], [78.6, 2352.0], [78.7, 2377.0], [78.8, 2402.0], [78.9, 2426.0], [79.0, 2443.0], [79.1, 2474.0], [79.2, 2507.0], [79.3, 2538.0], [79.4, 2567.0], [79.5, 2591.0], [79.6, 2610.0], [79.7, 2629.0], [79.8, 2651.0], [79.9, 2674.0], [80.0, 2691.0], [80.1, 2714.0], [80.2, 2736.0], [80.3, 2750.0], [80.4, 2758.0], [80.5, 2776.0], [80.6, 2791.0], [80.7, 2811.0], [80.8, 2831.0], [80.9, 2844.0], [81.0, 2865.0], [81.1, 2876.0], [81.2, 2889.0], [81.3, 2901.0], [81.4, 2917.0], [81.5, 2935.0], [81.6, 2950.0], [81.7, 2975.0], [81.8, 2985.0], [81.9, 2997.0], [82.0, 3012.0], [82.1, 3025.0], [82.2, 3040.0], [82.3, 3053.0], [82.4, 3067.0], [82.5, 3083.0], [82.6, 3104.0], [82.7, 3118.0], [82.8, 3129.0], [82.9, 3149.0], [83.0, 3166.0], [83.1, 3182.0], [83.2, 3198.0], [83.3, 3208.0], [83.4, 3223.0], [83.5, 3235.0], [83.6, 3248.0], [83.7, 3259.0], [83.8, 3269.0], [83.9, 3285.0], [84.0, 3295.0], [84.1, 3303.0], [84.2, 3313.0], [84.3, 3329.0], [84.4, 3338.0], [84.5, 3349.0], [84.6, 3362.0], [84.7, 3371.0], [84.8, 3383.0], [84.9, 3392.0], [85.0, 3401.0], [85.1, 3410.0], [85.2, 3416.0], [85.3, 3424.0], [85.4, 3434.0], [85.5, 3444.0], [85.6, 3455.0], [85.7, 3466.0], [85.8, 3476.0], [85.9, 3484.0], [86.0, 3492.0], [86.1, 3500.0], [86.2, 3512.0], [86.3, 3520.0], [86.4, 3529.0], [86.5, 3540.0], [86.6, 3549.0], [86.7, 3556.0], [86.8, 3563.0], [86.9, 3571.0], [87.0, 3579.0], [87.1, 3586.0], [87.2, 3596.0], [87.3, 3602.0], [87.4, 3609.0], [87.5, 3619.0], [87.6, 3628.0], [87.7, 3637.0], [87.8, 3644.0], [87.9, 3652.0], [88.0, 3658.0], [88.1, 3665.0], [88.2, 3674.0], [88.3, 3681.0], [88.4, 3691.0], [88.5, 3698.0], [88.6, 3702.0], [88.7, 3707.0], [88.8, 3715.0], [88.9, 3722.0], [89.0, 3729.0], [89.1, 3735.0], [89.2, 3742.0], [89.3, 3750.0], [89.4, 3759.0], [89.5, 3766.0], [89.6, 3770.0], [89.7, 3778.0], [89.8, 3787.0], [89.9, 3793.0], [90.0, 3799.0], [90.1, 3806.0], [90.2, 3811.0], [90.3, 3819.0], [90.4, 3825.0], [90.5, 3832.0], [90.6, 3839.0], [90.7, 3844.0], [90.8, 3849.0], [90.9, 3855.0], [91.0, 3862.0], [91.1, 3868.0], [91.2, 3876.0], [91.3, 3885.0], [91.4, 3890.0], [91.5, 3898.0], [91.6, 3904.0], [91.7, 3913.0], [91.8, 3919.0], [91.9, 3929.0], [92.0, 3937.0], [92.1, 3944.0], [92.2, 3953.0], [92.3, 3964.0], [92.4, 3972.0], [92.5, 3982.0], [92.6, 3988.0], [92.7, 4003.0], [92.8, 4009.0], [92.9, 4019.0], [93.0, 4029.0], [93.1, 4037.0], [93.2, 4046.0], [93.3, 4057.0], [93.4, 4069.0], [93.5, 4079.0], [93.6, 4090.0], [93.7, 4101.0], [93.8, 4109.0], [93.9, 4119.0], [94.0, 4128.0], [94.1, 4140.0], [94.2, 4151.0], [94.3, 4162.0], [94.4, 4175.0], [94.5, 4190.0], [94.6, 4198.0], [94.7, 4209.0], [94.8, 4217.0], [94.9, 4232.0], [95.0, 4245.0], [95.1, 4262.0], [95.2, 4274.0], [95.3, 4285.0], [95.4, 4298.0], [95.5, 4317.0], [95.6, 4335.0], [95.7, 4355.0], [95.8, 4372.0], [95.9, 4396.0], [96.0, 4421.0], [96.1, 4441.0], [96.2, 4469.0], [96.3, 4500.0], [96.4, 4541.0], [96.5, 4584.0], [96.6, 4616.0], [96.7, 4648.0], [96.8, 4678.0], [96.9, 4722.0], [97.0, 4765.0], [97.1, 4802.0], [97.2, 4835.0], [97.3, 4876.0], [97.4, 4908.0], [97.5, 4941.0], [97.6, 4978.0], [97.7, 5029.0], [97.8, 5074.0], [97.9, 5131.0], [98.0, 5194.0], [98.1, 5263.0], [98.2, 5314.0], [98.3, 5396.0], [98.4, 5482.0], [98.5, 5565.0], [98.6, 5673.0], [98.7, 5815.0], [98.8, 5968.0], [98.9, 6206.0], [99.0, 6457.0], [99.1, 7041.0], [99.2, 8134.0], [99.3, 9561.0], [99.4, 10377.0], [99.5, 10954.0], [99.6, 11207.0], [99.7, 11685.0], [99.8, 12073.0], [99.9, 12580.0], [100.0, 14333.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 142.0], [0.1, 142.0], [0.2, 142.0], [0.3, 142.0], [0.4, 142.0], [0.5, 142.0], [0.6, 144.0], [0.7, 144.0], [0.8, 144.0], [0.9, 144.0], [1.0, 144.0], [1.1, 145.0], [1.2, 145.0], [1.3, 145.0], [1.4, 145.0], [1.5, 145.0], [1.6, 145.0], [1.7, 145.0], [1.8, 145.0], [1.9, 145.0], [2.0, 145.0], [2.1, 145.0], [2.2, 145.0], [2.3, 145.0], [2.4, 145.0], [2.5, 145.0], [2.6, 145.0], [2.7, 145.0], [2.8, 145.0], [2.9, 145.0], [3.0, 145.0], [3.1, 145.0], [3.2, 145.0], [3.3, 146.0], [3.4, 146.0], [3.5, 146.0], [3.6, 146.0], [3.7, 146.0], [3.8, 146.0], [3.9, 146.0], [4.0, 146.0], [4.1, 146.0], [4.2, 146.0], [4.3, 146.0], [4.4, 147.0], [4.5, 147.0], [4.6, 147.0], [4.7, 147.0], [4.8, 147.0], [4.9, 147.0], [5.0, 147.0], [5.1, 147.0], [5.2, 147.0], [5.3, 147.0], [5.4, 147.0], [5.5, 147.0], [5.6, 147.0], [5.7, 147.0], [5.8, 147.0], [5.9, 147.0], [6.0, 147.0], [6.1, 147.0], [6.2, 147.0], [6.3, 147.0], [6.4, 147.0], [6.5, 148.0], [6.6, 148.0], [6.7, 148.0], [6.8, 148.0], [6.9, 148.0], [7.0, 148.0], [7.1, 148.0], [7.2, 148.0], [7.3, 148.0], [7.4, 148.0], [7.5, 148.0], [7.6, 148.0], [7.7, 148.0], [7.8, 148.0], [7.9, 148.0], [8.0, 148.0], [8.1, 148.0], [8.2, 148.0], [8.3, 148.0], [8.4, 148.0], [8.5, 148.0], [8.6, 148.0], [8.7, 148.0], [8.8, 148.0], [8.9, 148.0], [9.0, 148.0], [9.1, 148.0], [9.2, 148.0], [9.3, 148.0], [9.4, 148.0], [9.5, 148.0], [9.6, 148.0], [9.7, 148.0], [9.8, 148.0], [9.9, 148.0], [10.0, 148.0], [10.1, 148.0], [10.2, 148.0], [10.3, 148.0], [10.4, 148.0], [10.5, 148.0], [10.6, 148.0], [10.7, 148.0], [10.8, 148.0], [10.9, 148.0], [11.0, 148.0], [11.1, 148.0], [11.2, 148.0], [11.3, 148.0], [11.4, 148.0], [11.5, 148.0], [11.6, 148.0], [11.7, 148.0], [11.8, 148.0], [11.9, 149.0], [12.0, 149.0], [12.1, 149.0], [12.2, 149.0], [12.3, 149.0], [12.4, 149.0], [12.5, 149.0], [12.6, 149.0], [12.7, 149.0], [12.8, 149.0], [12.9, 149.0], [13.0, 149.0], [13.1, 149.0], [13.2, 149.0], [13.3, 149.0], [13.4, 149.0], [13.5, 149.0], [13.6, 149.0], [13.7, 149.0], [13.8, 149.0], [13.9, 149.0], [14.0, 149.0], [14.1, 149.0], [14.2, 149.0], [14.3, 149.0], [14.4, 149.0], [14.5, 149.0], [14.6, 150.0], [14.7, 150.0], [14.8, 150.0], [14.9, 150.0], [15.0, 150.0], [15.1, 150.0], [15.2, 150.0], [15.3, 150.0], [15.4, 150.0], [15.5, 150.0], [15.6, 150.0], [15.7, 150.0], [15.8, 150.0], [15.9, 150.0], [16.0, 150.0], [16.1, 150.0], [16.2, 150.0], [16.3, 150.0], [16.4, 150.0], [16.5, 150.0], [16.6, 150.0], [16.7, 150.0], [16.8, 150.0], [16.9, 150.0], [17.0, 150.0], [17.1, 150.0], [17.2, 150.0], [17.3, 150.0], [17.4, 150.0], [17.5, 150.0], [17.6, 150.0], [17.7, 150.0], [17.8, 150.0], [17.9, 150.0], [18.0, 150.0], [18.1, 150.0], [18.2, 150.0], [18.3, 150.0], [18.4, 150.0], [18.5, 150.0], [18.6, 150.0], [18.7, 150.0], [18.8, 150.0], [18.9, 150.0], [19.0, 150.0], [19.1, 150.0], [19.2, 150.0], [19.3, 150.0], [19.4, 150.0], [19.5, 150.0], [19.6, 150.0], [19.7, 150.0], [19.8, 150.0], [19.9, 150.0], [20.0, 151.0], [20.1, 151.0], [20.2, 151.0], [20.3, 151.0], [20.4, 151.0], [20.5, 151.0], [20.6, 151.0], [20.7, 151.0], [20.8, 151.0], [20.9, 151.0], [21.0, 151.0], [21.1, 151.0], [21.2, 151.0], [21.3, 151.0], [21.4, 151.0], [21.5, 151.0], [21.6, 151.0], [21.7, 151.0], [21.8, 151.0], [21.9, 151.0], [22.0, 151.0], [22.1, 151.0], [22.2, 151.0], [22.3, 151.0], [22.4, 151.0], [22.5, 151.0], [22.6, 151.0], [22.7, 151.0], [22.8, 152.0], [22.9, 152.0], [23.0, 152.0], [23.1, 152.0], [23.2, 152.0], [23.3, 152.0], [23.4, 152.0], [23.5, 152.0], [23.6, 152.0], [23.7, 152.0], [23.8, 152.0], [23.9, 152.0], [24.0, 152.0], [24.1, 152.0], [24.2, 152.0], [24.3, 152.0], [24.4, 152.0], [24.5, 152.0], [24.6, 152.0], [24.7, 152.0], [24.8, 152.0], [24.9, 152.0], [25.0, 152.0], [25.1, 152.0], [25.2, 152.0], [25.3, 152.0], [25.4, 152.0], [25.5, 152.0], [25.6, 152.0], [25.7, 152.0], [25.8, 152.0], [25.9, 152.0], [26.0, 152.0], [26.1, 152.0], [26.2, 152.0], [26.3, 152.0], [26.4, 152.0], [26.5, 152.0], [26.6, 152.0], [26.7, 152.0], [26.8, 152.0], [26.9, 152.0], [27.0, 152.0], [27.1, 152.0], [27.2, 152.0], [27.3, 152.0], [27.4, 152.0], [27.5, 152.0], [27.6, 152.0], [27.7, 152.0], [27.8, 152.0], [27.9, 152.0], [28.0, 152.0], [28.1, 152.0], [28.2, 153.0], [28.3, 153.0], [28.4, 153.0], [28.5, 153.0], [28.6, 153.0], [28.7, 153.0], [28.8, 153.0], [28.9, 153.0], [29.0, 153.0], [29.1, 153.0], [29.2, 153.0], [29.3, 153.0], [29.4, 153.0], [29.5, 153.0], [29.6, 153.0], [29.7, 153.0], [29.8, 153.0], [29.9, 153.0], [30.0, 153.0], [30.1, 153.0], [30.2, 153.0], [30.3, 153.0], [30.4, 153.0], [30.5, 153.0], [30.6, 153.0], [30.7, 153.0], [30.8, 153.0], [30.9, 153.0], [31.0, 153.0], [31.1, 153.0], [31.2, 153.0], [31.3, 153.0], [31.4, 153.0], [31.5, 153.0], [31.6, 153.0], [31.7, 153.0], [31.8, 153.0], [31.9, 153.0], [32.0, 153.0], [32.1, 153.0], [32.2, 153.0], [32.3, 153.0], [32.4, 153.0], [32.5, 153.0], [32.6, 153.0], [32.7, 153.0], [32.8, 153.0], [32.9, 153.0], [33.0, 153.0], [33.1, 153.0], [33.2, 153.0], [33.3, 153.0], [33.4, 153.0], [33.5, 153.0], [33.6, 153.0], [33.7, 153.0], [33.8, 153.0], [33.9, 153.0], [34.0, 153.0], [34.1, 153.0], [34.2, 153.0], [34.3, 153.0], [34.4, 153.0], [34.5, 153.0], [34.6, 154.0], [34.7, 154.0], [34.8, 154.0], [34.9, 154.0], [35.0, 154.0], [35.1, 154.0], [35.2, 154.0], [35.3, 154.0], [35.4, 154.0], [35.5, 154.0], [35.6, 154.0], [35.7, 154.0], [35.8, 154.0], [35.9, 154.0], [36.0, 154.0], [36.1, 154.0], [36.2, 154.0], [36.3, 154.0], [36.4, 154.0], [36.5, 154.0], [36.6, 154.0], [36.7, 154.0], [36.8, 154.0], [36.9, 154.0], [37.0, 154.0], [37.1, 154.0], [37.2, 154.0], [37.3, 154.0], [37.4, 154.0], [37.5, 154.0], [37.6, 154.0], [37.7, 154.0], [37.8, 154.0], [37.9, 154.0], [38.0, 154.0], [38.1, 154.0], [38.2, 154.0], [38.3, 154.0], [38.4, 154.0], [38.5, 154.0], [38.6, 154.0], [38.7, 154.0], [38.8, 154.0], [38.9, 154.0], [39.0, 154.0], [39.1, 154.0], [39.2, 154.0], [39.3, 154.0], [39.4, 154.0], [39.5, 154.0], [39.6, 154.0], [39.7, 154.0], [39.8, 154.0], [39.9, 154.0], [40.0, 155.0], [40.1, 155.0], [40.2, 155.0], [40.3, 155.0], [40.4, 155.0], [40.5, 155.0], [40.6, 155.0], [40.7, 155.0], [40.8, 155.0], [40.9, 155.0], [41.0, 155.0], [41.1, 155.0], [41.2, 155.0], [41.3, 155.0], [41.4, 155.0], [41.5, 155.0], [41.6, 155.0], [41.7, 155.0], [41.8, 155.0], [41.9, 155.0], [42.0, 155.0], [42.1, 155.0], [42.2, 155.0], [42.3, 155.0], [42.4, 155.0], [42.5, 155.0], [42.6, 155.0], [42.7, 155.0], [42.8, 155.0], [42.9, 155.0], [43.0, 155.0], [43.1, 155.0], [43.2, 155.0], [43.3, 155.0], [43.4, 155.0], [43.5, 155.0], [43.6, 155.0], [43.7, 155.0], [43.8, 156.0], [43.9, 156.0], [44.0, 156.0], [44.1, 156.0], [44.2, 156.0], [44.3, 156.0], [44.4, 156.0], [44.5, 156.0], [44.6, 156.0], [44.7, 156.0], [44.8, 156.0], [44.9, 156.0], [45.0, 156.0], [45.1, 156.0], [45.2, 156.0], [45.3, 156.0], [45.4, 156.0], [45.5, 156.0], [45.6, 156.0], [45.7, 156.0], [45.8, 156.0], [45.9, 156.0], [46.0, 156.0], [46.1, 156.0], [46.2, 156.0], [46.3, 156.0], [46.4, 156.0], [46.5, 156.0], [46.6, 156.0], [46.7, 156.0], [46.8, 156.0], [46.9, 156.0], [47.0, 156.0], [47.1, 156.0], [47.2, 156.0], [47.3, 156.0], [47.4, 156.0], [47.5, 156.0], [47.6, 156.0], [47.7, 156.0], [47.8, 156.0], [47.9, 156.0], [48.0, 156.0], [48.1, 156.0], [48.2, 156.0], [48.3, 156.0], [48.4, 156.0], [48.5, 156.0], [48.6, 156.0], [48.7, 156.0], [48.8, 156.0], [48.9, 156.0], [49.0, 156.0], [49.1, 156.0], [49.2, 157.0], [49.3, 157.0], [49.4, 157.0], [49.5, 157.0], [49.6, 157.0], [49.7, 157.0], [49.8, 157.0], [49.9, 157.0], [50.0, 157.0], [50.1, 157.0], [50.2, 157.0], [50.3, 157.0], [50.4, 157.0], [50.5, 157.0], [50.6, 157.0], [50.7, 157.0], [50.8, 157.0], [50.9, 157.0], [51.0, 157.0], [51.1, 157.0], [51.2, 157.0], [51.3, 157.0], [51.4, 157.0], [51.5, 157.0], [51.6, 157.0], [51.7, 157.0], [51.8, 157.0], [51.9, 157.0], [52.0, 157.0], [52.1, 157.0], [52.2, 157.0], [52.3, 157.0], [52.4, 157.0], [52.5, 157.0], [52.6, 157.0], [52.7, 157.0], [52.8, 157.0], [52.9, 157.0], [53.0, 157.0], [53.1, 157.0], [53.2, 157.0], [53.3, 157.0], [53.4, 157.0], [53.5, 157.0], [53.6, 157.0], [53.7, 157.0], [53.8, 157.0], [53.9, 157.0], [54.0, 157.0], [54.1, 157.0], [54.2, 157.0], [54.3, 157.0], [54.4, 157.0], [54.5, 157.0], [54.6, 157.0], [54.7, 157.0], [54.8, 157.0], [54.9, 157.0], [55.0, 157.0], [55.1, 157.0], [55.2, 157.0], [55.3, 157.0], [55.4, 157.0], [55.5, 157.0], [55.6, 157.0], [55.7, 157.0], [55.8, 157.0], [55.9, 157.0], [56.0, 157.0], [56.1, 157.0], [56.2, 157.0], [56.3, 158.0], [56.4, 158.0], [56.5, 158.0], [56.6, 158.0], [56.7, 158.0], [56.8, 158.0], [56.9, 158.0], [57.0, 158.0], [57.1, 158.0], [57.2, 158.0], [57.3, 158.0], [57.4, 158.0], [57.5, 158.0], [57.6, 158.0], [57.7, 158.0], [57.8, 158.0], [57.9, 158.0], [58.0, 158.0], [58.1, 158.0], [58.2, 158.0], [58.3, 158.0], [58.4, 158.0], [58.5, 158.0], [58.6, 158.0], [58.7, 158.0], [58.8, 158.0], [58.9, 158.0], [59.0, 158.0], [59.1, 158.0], [59.2, 158.0], [59.3, 158.0], [59.4, 158.0], [59.5, 158.0], [59.6, 158.0], [59.7, 158.0], [59.8, 158.0], [59.9, 158.0], [60.0, 158.0], [60.1, 158.0], [60.2, 158.0], [60.3, 158.0], [60.4, 158.0], [60.5, 158.0], [60.6, 159.0], [60.7, 159.0], [60.8, 159.0], [60.9, 159.0], [61.0, 159.0], [61.1, 159.0], [61.2, 159.0], [61.3, 159.0], [61.4, 159.0], [61.5, 159.0], [61.6, 159.0], [61.7, 159.0], [61.8, 159.0], [61.9, 159.0], [62.0, 159.0], [62.1, 159.0], [62.2, 159.0], [62.3, 159.0], [62.4, 159.0], [62.5, 159.0], [62.6, 159.0], [62.7, 159.0], [62.8, 159.0], [62.9, 159.0], [63.0, 159.0], [63.1, 159.0], [63.2, 159.0], [63.3, 159.0], [63.4, 159.0], [63.5, 159.0], [63.6, 159.0], [63.7, 159.0], [63.8, 159.0], [63.9, 159.0], [64.0, 159.0], [64.1, 159.0], [64.2, 159.0], [64.3, 159.0], [64.4, 159.0], [64.5, 159.0], [64.6, 159.0], [64.7, 159.0], [64.8, 159.0], [64.9, 159.0], [65.0, 159.0], [65.1, 159.0], [65.2, 159.0], [65.3, 159.0], [65.4, 159.0], [65.5, 160.0], [65.6, 160.0], [65.7, 160.0], [65.8, 160.0], [65.9, 160.0], [66.0, 160.0], [66.1, 160.0], [66.2, 160.0], [66.3, 160.0], [66.4, 160.0], [66.5, 160.0], [66.6, 160.0], [66.7, 160.0], [66.8, 160.0], [66.9, 160.0], [67.0, 160.0], [67.1, 160.0], [67.2, 160.0], [67.3, 160.0], [67.4, 160.0], [67.5, 160.0], [67.6, 160.0], [67.7, 160.0], [67.8, 160.0], [67.9, 160.0], [68.0, 160.0], [68.1, 160.0], [68.2, 160.0], [68.3, 160.0], [68.4, 160.0], [68.5, 160.0], [68.6, 160.0], [68.7, 160.0], [68.8, 160.0], [68.9, 160.0], [69.0, 160.0], [69.1, 160.0], [69.2, 160.0], [69.3, 160.0], [69.4, 160.0], [69.5, 160.0], [69.6, 160.0], [69.7, 160.0], [69.8, 161.0], [69.9, 161.0], [70.0, 161.0], [70.1, 161.0], [70.2, 161.0], [70.3, 161.0], [70.4, 161.0], [70.5, 161.0], [70.6, 161.0], [70.7, 161.0], [70.8, 161.0], [70.9, 161.0], [71.0, 161.0], [71.1, 161.0], [71.2, 161.0], [71.3, 161.0], [71.4, 161.0], [71.5, 161.0], [71.6, 161.0], [71.7, 161.0], [71.8, 161.0], [71.9, 161.0], [72.0, 161.0], [72.1, 161.0], [72.2, 161.0], [72.3, 161.0], [72.4, 161.0], [72.5, 161.0], [72.6, 161.0], [72.7, 161.0], [72.8, 161.0], [72.9, 161.0], [73.0, 161.0], [73.1, 161.0], [73.2, 161.0], [73.3, 161.0], [73.4, 161.0], [73.5, 161.0], [73.6, 161.0], [73.7, 161.0], [73.8, 161.0], [73.9, 161.0], [74.0, 161.0], [74.1, 161.0], [74.2, 161.0], [74.3, 161.0], [74.4, 161.0], [74.5, 161.0], [74.6, 161.0], [74.7, 161.0], [74.8, 161.0], [74.9, 161.0], [75.0, 161.0], [75.1, 161.0], [75.2, 162.0], [75.3, 162.0], [75.4, 162.0], [75.5, 162.0], [75.6, 162.0], [75.7, 162.0], [75.8, 162.0], [75.9, 162.0], [76.0, 162.0], [76.1, 162.0], [76.2, 162.0], [76.3, 162.0], [76.4, 162.0], [76.5, 162.0], [76.6, 162.0], [76.7, 162.0], [76.8, 162.0], [76.9, 162.0], [77.0, 162.0], [77.1, 162.0], [77.2, 162.0], [77.3, 163.0], [77.4, 163.0], [77.5, 163.0], [77.6, 163.0], [77.7, 163.0], [77.8, 163.0], [77.9, 164.0], [78.0, 164.0], [78.1, 164.0], [78.2, 164.0], [78.3, 164.0], [78.4, 164.0], [78.5, 164.0], [78.6, 164.0], [78.7, 164.0], [78.8, 164.0], [78.9, 164.0], [79.0, 165.0], [79.1, 165.0], [79.2, 165.0], [79.3, 165.0], [79.4, 165.0], [79.5, 166.0], [79.6, 166.0], [79.7, 166.0], [79.8, 166.0], [79.9, 166.0], [80.0, 166.0], [80.1, 166.0], [80.2, 166.0], [80.3, 166.0], [80.4, 166.0], [80.5, 166.0], [80.6, 166.0], [80.7, 166.0], [80.8, 166.0], [80.9, 166.0], [81.0, 166.0], [81.1, 168.0], [81.2, 168.0], [81.3, 168.0], [81.4, 168.0], [81.5, 168.0], [81.6, 168.0], [81.7, 168.0], [81.8, 168.0], [81.9, 168.0], [82.0, 168.0], [82.1, 168.0], [82.2, 170.0], [82.3, 170.0], [82.4, 170.0], [82.5, 170.0], [82.6, 170.0], [82.7, 170.0], [82.8, 170.0], [82.9, 170.0], [83.0, 170.0], [83.1, 170.0], [83.2, 170.0], [83.3, 170.0], [83.4, 170.0], [83.5, 170.0], [83.6, 170.0], [83.7, 170.0], [83.8, 173.0], [83.9, 173.0], [84.0, 173.0], [84.1, 173.0], [84.2, 173.0], [84.3, 173.0], [84.4, 173.0], [84.5, 173.0], [84.6, 173.0], [84.7, 173.0], [84.8, 173.0], [84.9, 176.0], [85.0, 176.0], [85.1, 176.0], [85.2, 176.0], [85.3, 176.0], [85.4, 176.0], [85.5, 180.0], [85.6, 180.0], [85.7, 180.0], [85.8, 180.0], [85.9, 180.0], [86.0, 181.0], [86.1, 181.0], [86.2, 181.0], [86.3, 181.0], [86.4, 181.0], [86.5, 190.0], [86.6, 190.0], [86.7, 190.0], [86.8, 190.0], [86.9, 190.0], [87.0, 190.0], [87.1, 191.0], [87.2, 191.0], [87.3, 191.0], [87.4, 191.0], [87.5, 191.0], [87.6, 195.0], [87.7, 195.0], [87.8, 195.0], [87.9, 195.0], [88.0, 195.0], [88.1, 195.0], [88.2, 198.0], [88.3, 198.0], [88.4, 198.0], [88.5, 198.0], [88.6, 198.0], [88.7, 198.0], [88.8, 198.0], [88.9, 198.0], [89.0, 198.0], [89.1, 198.0], [89.2, 206.0], [89.3, 206.0], [89.4, 206.0], [89.5, 206.0], [89.6, 206.0], [89.7, 206.0], [89.8, 209.0], [89.9, 209.0], [90.0, 209.0], [90.1, 209.0], [90.2, 209.0], [90.3, 210.0], [90.4, 210.0], [90.5, 210.0], [90.6, 210.0], [90.7, 210.0], [90.8, 210.0], [90.9, 213.0], [91.0, 213.0], [91.1, 213.0], [91.2, 213.0], [91.3, 213.0], [91.4, 215.0], [91.5, 215.0], [91.6, 215.0], [91.7, 215.0], [91.8, 215.0], [91.9, 215.0], [92.0, 215.0], [92.1, 215.0], [92.2, 215.0], [92.3, 215.0], [92.4, 215.0], [92.5, 218.0], [92.6, 218.0], [92.7, 218.0], [92.8, 218.0], [92.9, 218.0], [93.0, 221.0], [93.1, 221.0], [93.2, 221.0], [93.3, 221.0], [93.4, 221.0], [93.5, 221.0], [93.6, 227.0], [93.7, 227.0], [93.8, 227.0], [93.9, 227.0], [94.0, 227.0], [94.1, 253.0], [94.2, 253.0], [94.3, 253.0], [94.4, 253.0], [94.5, 253.0], [94.6, 259.0], [94.7, 259.0], [94.8, 259.0], [94.9, 259.0], [95.0, 259.0], [95.1, 259.0], [95.2, 262.0], [95.3, 262.0], [95.4, 262.0], [95.5, 262.0], [95.6, 262.0], [95.7, 265.0], [95.8, 265.0], [95.9, 265.0], [96.0, 265.0], [96.1, 265.0], [96.2, 265.0], [96.3, 269.0], [96.4, 269.0], [96.5, 269.0], [96.6, 269.0], [96.7, 269.0], [96.8, 272.0], [96.9, 272.0], [97.0, 272.0], [97.1, 272.0], [97.2, 272.0], [97.3, 279.0], [97.4, 279.0], [97.5, 279.0], [97.6, 279.0], [97.7, 279.0], [97.8, 279.0], [97.9, 296.0], [98.0, 296.0], [98.1, 296.0], [98.2, 296.0], [98.3, 296.0], [98.4, 309.0], [98.5, 309.0], [98.6, 309.0], [98.7, 309.0], [98.8, 309.0], [98.9, 309.0], [99.0, 519.0], [99.1, 519.0], [99.2, 519.0], [99.3, 519.0], [99.4, 519.0], [99.5, 631.0], [99.6, 631.0], [99.7, 631.0], [99.8, 631.0], [99.9, 631.0], [100.0, 631.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 2.0], [14.5, 2.0], [14.6, 2.0], [14.7, 2.0], [14.8, 2.0], [14.9, 2.0], [15.0, 2.0], [15.1, 2.0], [15.2, 2.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 2.0], [17.7, 2.0], [17.8, 2.0], [17.9, 2.0], [18.0, 2.0], [18.1, 2.0], [18.2, 2.0], [18.3, 2.0], [18.4, 2.0], [18.5, 2.0], [18.6, 2.0], [18.7, 2.0], [18.8, 2.0], [18.9, 2.0], [19.0, 2.0], [19.1, 2.0], [19.2, 2.0], [19.3, 2.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 2.0], [20.0, 2.0], [20.1, 2.0], [20.2, 2.0], [20.3, 2.0], [20.4, 2.0], [20.5, 2.0], [20.6, 2.0], [20.7, 2.0], [20.8, 2.0], [20.9, 2.0], [21.0, 2.0], [21.1, 2.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 2.0], [21.6, 2.0], [21.7, 2.0], [21.8, 2.0], [21.9, 2.0], [22.0, 2.0], [22.1, 2.0], [22.2, 2.0], [22.3, 2.0], [22.4, 2.0], [22.5, 2.0], [22.6, 2.0], [22.7, 2.0], [22.8, 2.0], [22.9, 2.0], [23.0, 2.0], [23.1, 2.0], [23.2, 2.0], [23.3, 2.0], [23.4, 2.0], [23.5, 2.0], [23.6, 2.0], [23.7, 2.0], [23.8, 2.0], [23.9, 2.0], [24.0, 2.0], [24.1, 2.0], [24.2, 2.0], [24.3, 2.0], [24.4, 2.0], [24.5, 2.0], [24.6, 2.0], [24.7, 2.0], [24.8, 2.0], [24.9, 2.0], [25.0, 2.0], [25.1, 2.0], [25.2, 2.0], [25.3, 2.0], [25.4, 2.0], [25.5, 2.0], [25.6, 2.0], [25.7, 2.0], [25.8, 2.0], [25.9, 2.0], [26.0, 2.0], [26.1, 2.0], [26.2, 2.0], [26.3, 2.0], [26.4, 2.0], [26.5, 2.0], [26.6, 2.0], [26.7, 2.0], [26.8, 2.0], [26.9, 2.0], [27.0, 2.0], [27.1, 2.0], [27.2, 2.0], [27.3, 2.0], [27.4, 2.0], [27.5, 2.0], [27.6, 2.0], [27.7, 2.0], [27.8, 2.0], [27.9, 2.0], [28.0, 2.0], [28.1, 2.0], [28.2, 2.0], [28.3, 2.0], [28.4, 2.0], [28.5, 2.0], [28.6, 2.0], [28.7, 2.0], [28.8, 2.0], [28.9, 2.0], [29.0, 2.0], [29.1, 2.0], [29.2, 2.0], [29.3, 2.0], [29.4, 2.0], [29.5, 2.0], [29.6, 2.0], [29.7, 2.0], [29.8, 2.0], [29.9, 2.0], [30.0, 2.0], [30.1, 2.0], [30.2, 2.0], [30.3, 2.0], [30.4, 2.0], [30.5, 2.0], [30.6, 2.0], [30.7, 2.0], [30.8, 2.0], [30.9, 2.0], [31.0, 2.0], [31.1, 2.0], [31.2, 2.0], [31.3, 2.0], [31.4, 2.0], [31.5, 2.0], [31.6, 2.0], [31.7, 2.0], [31.8, 2.0], [31.9, 2.0], [32.0, 2.0], [32.1, 2.0], [32.2, 2.0], [32.3, 2.0], [32.4, 2.0], [32.5, 2.0], [32.6, 2.0], [32.7, 2.0], [32.8, 2.0], [32.9, 2.0], [33.0, 2.0], [33.1, 2.0], [33.2, 2.0], [33.3, 2.0], [33.4, 2.0], [33.5, 2.0], [33.6, 2.0], [33.7, 2.0], [33.8, 2.0], [33.9, 2.0], [34.0, 2.0], [34.1, 2.0], [34.2, 2.0], [34.3, 2.0], [34.4, 2.0], [34.5, 2.0], [34.6, 2.0], [34.7, 2.0], [34.8, 2.0], [34.9, 2.0], [35.0, 2.0], [35.1, 2.0], [35.2, 2.0], [35.3, 2.0], [35.4, 2.0], [35.5, 2.0], [35.6, 2.0], [35.7, 2.0], [35.8, 2.0], [35.9, 2.0], [36.0, 2.0], [36.1, 2.0], [36.2, 2.0], [36.3, 2.0], [36.4, 2.0], [36.5, 2.0], [36.6, 2.0], [36.7, 2.0], [36.8, 2.0], [36.9, 2.0], [37.0, 2.0], [37.1, 2.0], [37.2, 2.0], [37.3, 2.0], [37.4, 2.0], [37.5, 2.0], [37.6, 2.0], [37.7, 2.0], [37.8, 2.0], [37.9, 2.0], [38.0, 2.0], [38.1, 2.0], [38.2, 2.0], [38.3, 2.0], [38.4, 2.0], [38.5, 2.0], [38.6, 2.0], [38.7, 2.0], [38.8, 2.0], [38.9, 2.0], [39.0, 2.0], [39.1, 2.0], [39.2, 2.0], [39.3, 2.0], [39.4, 2.0], [39.5, 2.0], [39.6, 2.0], [39.7, 2.0], [39.8, 2.0], [39.9, 2.0], [40.0, 2.0], [40.1, 2.0], [40.2, 2.0], [40.3, 2.0], [40.4, 2.0], [40.5, 2.0], [40.6, 2.0], [40.7, 2.0], [40.8, 2.0], [40.9, 2.0], [41.0, 2.0], [41.1, 2.0], [41.2, 2.0], [41.3, 2.0], [41.4, 2.0], [41.5, 2.0], [41.6, 2.0], [41.7, 2.0], [41.8, 2.0], [41.9, 2.0], [42.0, 2.0], [42.1, 2.0], [42.2, 2.0], [42.3, 2.0], [42.4, 2.0], [42.5, 2.0], [42.6, 2.0], [42.7, 2.0], [42.8, 2.0], [42.9, 2.0], [43.0, 2.0], [43.1, 2.0], [43.2, 2.0], [43.3, 2.0], [43.4, 2.0], [43.5, 2.0], [43.6, 2.0], [43.7, 2.0], [43.8, 2.0], [43.9, 2.0], [44.0, 2.0], [44.1, 2.0], [44.2, 2.0], [44.3, 2.0], [44.4, 2.0], [44.5, 2.0], [44.6, 2.0], [44.7, 2.0], [44.8, 2.0], [44.9, 2.0], [45.0, 2.0], [45.1, 2.0], [45.2, 2.0], [45.3, 2.0], [45.4, 2.0], [45.5, 2.0], [45.6, 2.0], [45.7, 2.0], [45.8, 2.0], [45.9, 2.0], [46.0, 2.0], [46.1, 2.0], [46.2, 2.0], [46.3, 2.0], [46.4, 2.0], [46.5, 2.0], [46.6, 2.0], [46.7, 2.0], [46.8, 2.0], [46.9, 2.0], [47.0, 2.0], [47.1, 2.0], [47.2, 2.0], [47.3, 2.0], [47.4, 2.0], [47.5, 2.0], [47.6, 2.0], [47.7, 2.0], [47.8, 2.0], [47.9, 2.0], [48.0, 2.0], [48.1, 2.0], [48.2, 2.0], [48.3, 2.0], [48.4, 2.0], [48.5, 2.0], [48.6, 2.0], [48.7, 2.0], [48.8, 2.0], [48.9, 2.0], [49.0, 2.0], [49.1, 2.0], [49.2, 2.0], [49.3, 2.0], [49.4, 2.0], [49.5, 2.0], [49.6, 2.0], [49.7, 2.0], [49.8, 2.0], [49.9, 2.0], [50.0, 2.0], [50.1, 2.0], [50.2, 2.0], [50.3, 2.0], [50.4, 2.0], [50.5, 3.0], [50.6, 3.0], [50.7, 3.0], [50.8, 3.0], [50.9, 3.0], [51.0, 3.0], [51.1, 3.0], [51.2, 3.0], [51.3, 3.0], [51.4, 3.0], [51.5, 3.0], [51.6, 3.0], [51.7, 3.0], [51.8, 3.0], [51.9, 3.0], [52.0, 3.0], [52.1, 3.0], [52.2, 3.0], [52.3, 3.0], [52.4, 3.0], [52.5, 3.0], [52.6, 3.0], [52.7, 3.0], [52.8, 3.0], [52.9, 3.0], [53.0, 3.0], [53.1, 3.0], [53.2, 3.0], [53.3, 3.0], [53.4, 3.0], [53.5, 3.0], [53.6, 3.0], [53.7, 3.0], [53.8, 3.0], [53.9, 3.0], [54.0, 3.0], [54.1, 3.0], [54.2, 3.0], [54.3, 3.0], [54.4, 3.0], [54.5, 3.0], [54.6, 3.0], [54.7, 3.0], [54.8, 3.0], [54.9, 3.0], [55.0, 3.0], [55.1, 3.0], [55.2, 3.0], [55.3, 3.0], [55.4, 3.0], [55.5, 3.0], [55.6, 3.0], [55.7, 3.0], [55.8, 3.0], [55.9, 3.0], [56.0, 3.0], [56.1, 3.0], [56.2, 3.0], [56.3, 3.0], [56.4, 3.0], [56.5, 3.0], [56.6, 3.0], [56.7, 3.0], [56.8, 3.0], [56.9, 3.0], [57.0, 3.0], [57.1, 3.0], [57.2, 3.0], [57.3, 3.0], [57.4, 3.0], [57.5, 3.0], [57.6, 3.0], [57.7, 3.0], [57.8, 3.0], [57.9, 3.0], [58.0, 3.0], [58.1, 3.0], [58.2, 3.0], [58.3, 3.0], [58.4, 3.0], [58.5, 3.0], [58.6, 3.0], [58.7, 3.0], [58.8, 3.0], [58.9, 3.0], [59.0, 3.0], [59.1, 3.0], [59.2, 3.0], [59.3, 3.0], [59.4, 3.0], [59.5, 3.0], [59.6, 3.0], [59.7, 3.0], [59.8, 3.0], [59.9, 3.0], [60.0, 3.0], [60.1, 3.0], [60.2, 3.0], [60.3, 3.0], [60.4, 3.0], [60.5, 3.0], [60.6, 3.0], [60.7, 3.0], [60.8, 3.0], [60.9, 3.0], [61.0, 3.0], [61.1, 3.0], [61.2, 3.0], [61.3, 3.0], [61.4, 3.0], [61.5, 3.0], [61.6, 3.0], [61.7, 3.0], [61.8, 3.0], [61.9, 3.0], [62.0, 3.0], [62.1, 3.0], [62.2, 3.0], [62.3, 3.0], [62.4, 3.0], [62.5, 3.0], [62.6, 3.0], [62.7, 3.0], [62.8, 3.0], [62.9, 3.0], [63.0, 3.0], [63.1, 3.0], [63.2, 3.0], [63.3, 3.0], [63.4, 3.0], [63.5, 3.0], [63.6, 3.0], [63.7, 3.0], [63.8, 3.0], [63.9, 3.0], [64.0, 3.0], [64.1, 3.0], [64.2, 3.0], [64.3, 3.0], [64.4, 3.0], [64.5, 3.0], [64.6, 3.0], [64.7, 3.0], [64.8, 3.0], [64.9, 3.0], [65.0, 3.0], [65.1, 3.0], [65.2, 3.0], [65.3, 3.0], [65.4, 3.0], [65.5, 3.0], [65.6, 3.0], [65.7, 3.0], [65.8, 3.0], [65.9, 3.0], [66.0, 3.0], [66.1, 3.0], [66.2, 3.0], [66.3, 4.0], [66.4, 4.0], [66.5, 4.0], [66.6, 4.0], [66.7, 4.0], [66.8, 4.0], [66.9, 4.0], [67.0, 4.0], [67.1, 4.0], [67.2, 4.0], [67.3, 4.0], [67.4, 4.0], [67.5, 4.0], [67.6, 4.0], [67.7, 5.0], [67.8, 5.0], [67.9, 5.0], [68.0, 5.0], [68.1, 5.0], [68.2, 5.0], [68.3, 6.0], [68.4, 6.0], [68.5, 7.0], [68.6, 8.0], [68.7, 9.0], [68.8, 13.0], [68.9, 20.0], [69.0, 24.0], [69.1, 27.0], [69.2, 29.0], [69.3, 31.0], [69.4, 32.0], [69.5, 34.0], [69.6, 35.0], [69.7, 38.0], [69.8, 40.0], [69.9, 43.0], [70.0, 46.0], [70.1, 48.0], [70.2, 53.0], [70.3, 57.0], [70.4, 65.0], [70.5, 77.0], [70.6, 88.0], [70.7, 119.0], [70.8, 158.0], [70.9, 201.0], [71.0, 261.0], [71.1, 306.0], [71.2, 362.0], [71.3, 400.0], [71.4, 433.0], [71.5, 472.0], [71.6, 509.0], [71.7, 564.0], [71.8, 608.0], [71.9, 662.0], [72.0, 727.0], [72.1, 784.0], [72.2, 822.0], [72.3, 873.0], [72.4, 905.0], [72.5, 943.0], [72.6, 982.0], [72.7, 1011.0], [72.8, 1051.0], [72.9, 1101.0], [73.0, 1127.0], [73.1, 1159.0], [73.2, 1186.0], [73.3, 1221.0], [73.4, 1251.0], [73.5, 1279.0], [73.6, 1306.0], [73.7, 1329.0], [73.8, 1355.0], [73.9, 1384.0], [74.0, 1406.0], [74.1, 1435.0], [74.2, 1470.0], [74.3, 1492.0], [74.4, 1518.0], [74.5, 1551.0], [74.6, 1576.0], [74.7, 1627.0], [74.8, 1647.0], [74.9, 1679.0], [75.0, 1700.0], [75.1, 1729.0], [75.2, 1756.0], [75.3, 1784.0], [75.4, 1806.0], [75.5, 1827.0], [75.6, 1851.0], [75.7, 1890.0], [75.8, 1913.0], [75.9, 1940.0], [76.0, 1959.0], [76.1, 1985.0], [76.2, 2008.0], [76.3, 2029.0], [76.4, 2055.0], [76.5, 2083.0], [76.6, 2103.0], [76.7, 2135.0], [76.8, 2166.0], [76.9, 2187.0], [77.0, 2208.0], [77.1, 2221.0], [77.2, 2240.0], [77.3, 2267.0], [77.4, 2288.0], [77.5, 2318.0], [77.6, 2338.0], [77.7, 2362.0], [77.8, 2386.0], [77.9, 2413.0], [78.0, 2437.0], [78.1, 2457.0], [78.2, 2478.0], [78.3, 2493.0], [78.4, 2513.0], [78.5, 2537.0], [78.6, 2552.0], [78.7, 2570.0], [78.8, 2592.0], [78.9, 2604.0], [79.0, 2622.0], [79.1, 2637.0], [79.2, 2655.0], [79.3, 2666.0], [79.4, 2683.0], [79.5, 2697.0], [79.6, 2717.0], [79.7, 2731.0], [79.8, 2757.0], [79.9, 2770.0], [80.0, 2784.0], [80.1, 2797.0], [80.2, 2804.0], [80.3, 2817.0], [80.4, 2831.0], [80.5, 2842.0], [80.6, 2856.0], [80.7, 2873.0], [80.8, 2882.0], [80.9, 2896.0], [81.0, 2906.0], [81.1, 2922.0], [81.2, 2933.0], [81.3, 2950.0], [81.4, 2964.0], [81.5, 2975.0], [81.6, 2987.0], [81.7, 3003.0], [81.8, 3016.0], [81.9, 3030.0], [82.0, 3041.0], [82.1, 3050.0], [82.2, 3061.0], [82.3, 3068.0], [82.4, 3082.0], [82.5, 3090.0], [82.6, 3105.0], [82.7, 3119.0], [82.8, 3133.0], [82.9, 3146.0], [83.0, 3156.0], [83.1, 3172.0], [83.2, 3181.0], [83.3, 3190.0], [83.4, 3207.0], [83.5, 3218.0], [83.6, 3227.0], [83.7, 3240.0], [83.8, 3249.0], [83.9, 3257.0], [84.0, 3266.0], [84.1, 3279.0], [84.2, 3290.0], [84.3, 3301.0], [84.4, 3311.0], [84.5, 3321.0], [84.6, 3333.0], [84.7, 3341.0], [84.8, 3352.0], [84.9, 3359.0], [85.0, 3368.0], [85.1, 3382.0], [85.2, 3390.0], [85.3, 3400.0], [85.4, 3406.0], [85.5, 3414.0], [85.6, 3421.0], [85.7, 3431.0], [85.8, 3439.0], [85.9, 3448.0], [86.0, 3456.0], [86.1, 3465.0], [86.2, 3470.0], [86.3, 3479.0], [86.4, 3486.0], [86.5, 3498.0], [86.6, 3507.0], [86.7, 3516.0], [86.8, 3525.0], [86.9, 3532.0], [87.0, 3543.0], [87.1, 3552.0], [87.2, 3558.0], [87.3, 3562.0], [87.4, 3570.0], [87.5, 3577.0], [87.6, 3581.0], [87.7, 3590.0], [87.8, 3598.0], [87.9, 3606.0], [88.0, 3612.0], [88.1, 3623.0], [88.2, 3629.0], [88.3, 3638.0], [88.4, 3645.0], [88.5, 3653.0], [88.6, 3661.0], [88.7, 3670.0], [88.8, 3677.0], [88.9, 3681.0], [89.0, 3687.0], [89.1, 3697.0], [89.2, 3705.0], [89.3, 3712.0], [89.4, 3720.0], [89.5, 3727.0], [89.6, 3735.0], [89.7, 3742.0], [89.8, 3752.0], [89.9, 3762.0], [90.0, 3775.0], [90.1, 3783.0], [90.2, 3789.0], [90.3, 3798.0], [90.4, 3805.0], [90.5, 3812.0], [90.6, 3821.0], [90.7, 3827.0], [90.8, 3834.0], [90.9, 3840.0], [91.0, 3847.0], [91.1, 3855.0], [91.2, 3862.0], [91.3, 3872.0], [91.4, 3882.0], [91.5, 3893.0], [91.6, 3899.0], [91.7, 3907.0], [91.8, 3915.0], [91.9, 3926.0], [92.0, 3936.0], [92.1, 3944.0], [92.2, 3953.0], [92.3, 3962.0], [92.4, 3977.0], [92.5, 3987.0], [92.6, 3994.0], [92.7, 4002.0], [92.8, 4009.0], [92.9, 4020.0], [93.0, 4029.0], [93.1, 4041.0], [93.2, 4053.0], [93.3, 4064.0], [93.4, 4073.0], [93.5, 4081.0], [93.6, 4091.0], [93.7, 4099.0], [93.8, 4108.0], [93.9, 4125.0], [94.0, 4137.0], [94.1, 4149.0], [94.2, 4164.0], [94.3, 4175.0], [94.4, 4188.0], [94.5, 4203.0], [94.6, 4215.0], [94.7, 4230.0], [94.8, 4241.0], [94.9, 4256.0], [95.0, 4274.0], [95.1, 4288.0], [95.2, 4303.0], [95.3, 4321.0], [95.4, 4341.0], [95.5, 4364.0], [95.6, 4381.0], [95.7, 4406.0], [95.8, 4419.0], [95.9, 4441.0], [96.0, 4494.0], [96.1, 4528.0], [96.2, 4568.0], [96.3, 4598.0], [96.4, 4629.0], [96.5, 4666.0], [96.6, 4710.0], [96.7, 4734.0], [96.8, 4762.0], [96.9, 4794.0], [97.0, 4831.0], [97.1, 4904.0], [97.2, 4939.0], [97.3, 4997.0], [97.4, 5084.0], [97.5, 5172.0], [97.6, 5221.0], [97.7, 5301.0], [97.8, 5365.0], [97.9, 5430.0], [98.0, 5533.0], [98.1, 5619.0], [98.2, 5746.0], [98.3, 5916.0], [98.4, 6079.0], [98.5, 6414.0], [98.6, 6568.0], [98.7, 6742.0], [98.8, 6813.0], [98.9, 6949.0], [99.0, 7280.0], [99.1, 7392.0], [99.2, 7516.0], [99.3, 8081.0], [99.4, 9423.0], [99.5, 10280.0], [99.6, 10910.0], [99.7, 11421.0], [99.8, 11765.0], [99.9, 12472.0], [100.0, 15572.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 13170.0, "series": [{"data": [[0.0, 13170.0], [100.0, 54.0], [200.0, 39.0], [300.0, 54.0], [400.0, 49.0], [500.0, 53.0], [600.0, 33.0], [700.0, 49.0], [800.0, 42.0], [900.0, 38.0], [1000.0, 46.0], [1100.0, 49.0], [1200.0, 51.0], [1300.0, 66.0], [1400.0, 73.0], [1500.0, 74.0], [1600.0, 82.0], [1700.0, 93.0], [1800.0, 56.0], [1900.0, 80.0], [2000.0, 96.0], [2100.0, 78.0], [2300.0, 57.0], [2200.0, 91.0], [2400.0, 71.0], [2500.0, 68.0], [2600.0, 96.0], [2700.0, 110.0], [2800.0, 121.0], [2900.0, 114.0], [3000.0, 122.0], [3100.0, 119.0], [3200.0, 158.0], [3300.0, 168.0], [3400.0, 207.0], [3500.0, 218.0], [3600.0, 235.0], [3700.0, 271.0], [3800.0, 281.0], [3900.0, 213.0], [4000.0, 187.0], [4200.0, 144.0], [4300.0, 94.0], [4100.0, 174.0], [4400.0, 71.0], [4500.0, 50.0], [4600.0, 53.0], [4800.0, 53.0], [4700.0, 43.0], [5100.0, 29.0], [5000.0, 37.0], [4900.0, 52.0], [5200.0, 29.0], [5300.0, 26.0], [5500.0, 18.0], [5600.0, 17.0], [5400.0, 20.0], [5700.0, 16.0], [5800.0, 11.0], [6000.0, 9.0], [5900.0, 10.0], [6100.0, 8.0], [6200.0, 5.0], [6300.0, 10.0], [6400.0, 5.0], [6500.0, 6.0], [6600.0, 3.0], [6800.0, 5.0], [6700.0, 3.0], [7000.0, 4.0], [7100.0, 2.0], [7200.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [7900.0, 4.0], [7700.0, 2.0], [8000.0, 3.0], [8100.0, 2.0], [8200.0, 1.0], [8400.0, 2.0], [8600.0, 1.0], [8800.0, 2.0], [8900.0, 2.0], [9200.0, 1.0], [9700.0, 1.0], [9300.0, 4.0], [9500.0, 4.0], [9400.0, 3.0], [10100.0, 2.0], [10200.0, 5.0], [10000.0, 2.0], [9900.0, 2.0], [10300.0, 5.0], [10600.0, 4.0], [10400.0, 3.0], [10700.0, 2.0], [10500.0, 1.0], [11200.0, 6.0], [11000.0, 9.0], [11100.0, 6.0], [10900.0, 5.0], [10800.0, 5.0], [11400.0, 6.0], [11500.0, 4.0], [11700.0, 3.0], [11600.0, 4.0], [11300.0, 1.0], [11800.0, 5.0], [12000.0, 5.0], [12100.0, 5.0], [12200.0, 6.0], [11900.0, 5.0], [12400.0, 3.0], [12500.0, 4.0], [12700.0, 2.0], [12600.0, 1.0], [13000.0, 3.0], [13100.0, 1.0], [12900.0, 2.0], [13200.0, 1.0], [13500.0, 1.0], [13800.0, 2.0], [13700.0, 1.0], [13400.0, 1.0], [14300.0, 1.0], [13900.0, 1.0], [14100.0, 1.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[300.0, 1.0], [600.0, 1.0], [200.0, 17.0], [100.0, 165.0], [500.0, 1.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 13067.0], [100.0, 48.0], [200.0, 34.0], [300.0, 41.0], [400.0, 52.0], [500.0, 36.0], [600.0, 35.0], [700.0, 38.0], [800.0, 39.0], [900.0, 52.0], [1000.0, 44.0], [1100.0, 62.0], [1200.0, 63.0], [1300.0, 72.0], [1400.0, 70.0], [1500.0, 56.0], [1600.0, 65.0], [1700.0, 68.0], [1800.0, 70.0], [1900.0, 77.0], [2000.0, 75.0], [2100.0, 71.0], [2300.0, 80.0], [2200.0, 90.0], [2400.0, 83.0], [2500.0, 99.0], [2600.0, 123.0], [2700.0, 120.0], [2800.0, 144.0], [2900.0, 136.0], [3000.0, 165.0], [3100.0, 144.0], [3200.0, 176.0], [3300.0, 184.0], [3400.0, 227.0], [3500.0, 241.0], [3700.0, 222.0], [3600.0, 240.0], [3800.0, 239.0], [3900.0, 195.0], [4000.0, 193.0], [4300.0, 92.0], [4200.0, 131.0], [4100.0, 143.0], [4500.0, 51.0], [4400.0, 63.0], [4600.0, 50.0], [4700.0, 65.0], [4800.0, 30.0], [4900.0, 41.0], [5100.0, 28.0], [5000.0, 19.0], [5200.0, 25.0], [5300.0, 28.0], [5500.0, 17.0], [5600.0, 19.0], [5400.0, 23.0], [5700.0, 15.0], [5800.0, 9.0], [5900.0, 10.0], [6100.0, 5.0], [6000.0, 9.0], [6200.0, 6.0], [6300.0, 5.0], [6500.0, 7.0], [6400.0, 14.0], [6600.0, 8.0], [6800.0, 15.0], [6700.0, 26.0], [6900.0, 9.0], [7100.0, 7.0], [7000.0, 4.0], [7200.0, 6.0], [7300.0, 19.0], [7400.0, 14.0], [7500.0, 12.0], [7600.0, 3.0], [7900.0, 2.0], [7700.0, 2.0], [7800.0, 1.0], [8000.0, 2.0], [8100.0, 1.0], [8200.0, 2.0], [8500.0, 1.0], [8700.0, 1.0], [8800.0, 2.0], [8900.0, 1.0], [9000.0, 2.0], [9100.0, 2.0], [9200.0, 1.0], [9400.0, 3.0], [9300.0, 2.0], [9700.0, 2.0], [9500.0, 3.0], [9600.0, 1.0], [10200.0, 5.0], [10100.0, 4.0], [9900.0, 1.0], [9800.0, 3.0], [10000.0, 1.0], [10600.0, 3.0], [10500.0, 3.0], [10400.0, 3.0], [10700.0, 2.0], [10800.0, 5.0], [11100.0, 4.0], [11200.0, 4.0], [11000.0, 3.0], [10900.0, 4.0], [11400.0, 7.0], [11700.0, 4.0], [11500.0, 3.0], [11600.0, 5.0], [11300.0, 4.0], [11900.0, 2.0], [12000.0, 4.0], [12100.0, 6.0], [12200.0, 1.0], [11800.0, 2.0], [12600.0, 4.0], [12700.0, 3.0], [12400.0, 2.0], [12500.0, 2.0], [12300.0, 2.0], [12900.0, 2.0], [13300.0, 1.0], [12800.0, 2.0], [13000.0, 1.0], [13600.0, 1.0], [14700.0, 1.0], [15500.0, 1.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 15500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 910.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 26234.0, "series": [{"data": [[0.0, 1013.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 910.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9028.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 26234.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 91.1976744186047, "minX": 1.58768754E12, "maxY": 185.0, "series": [{"data": [[1.58768814E12, 98.03132341425194], [1.58768766E12, 185.0], [1.58768796E12, 185.0], [1.58768778E12, 185.0], [1.58768808E12, 179.35063113604514], [1.5876876E12, 183.59424603174625], [1.5876879E12, 185.0], [1.58768772E12, 185.0], [1.58768802E12, 185.0], [1.58768754E12, 91.1976744186047], [1.58768784E12, 185.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768814E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0833333333333337, "minX": 1.0, "maxY": 3478.125, "series": [{"data": [[4.0, 52.666666666666664], [8.0, 78.2], [11.0, 130.0], [13.0, 42.666666666666664], [14.0, 75.0], [15.0, 190.0], [16.0, 29.0], [17.0, 48.0], [18.0, 44.0], [19.0, 142.5], [21.0, 37.5], [22.0, 47.5], [23.0, 1380.642857142857], [24.0, 37.0], [25.0, 58.0], [26.0, 79.5], [27.0, 61.333333333333336], [28.0, 69.33333333333333], [30.0, 13.75], [31.0, 23.5], [32.0, 67.33333333333333], [33.0, 51.333333333333336], [35.0, 35.4], [36.0, 26.42857142857143], [37.0, 24.6], [38.0, 33.666666666666664], [39.0, 10.666666666666668], [40.0, 30.333333333333332], [41.0, 23.800000000000004], [42.0, 9.25], [43.0, 21.8], [44.0, 12.5625], [45.0, 23.25], [46.0, 38.0], [47.0, 136.25], [48.0, 182.00000000000003], [49.0, 545.0], [50.0, 713.3333333333335], [51.0, 1.8], [53.0, 11.857142857142858], [52.0, 2.5], [54.0, 38.099999999999994], [55.0, 17.88888888888889], [56.0, 9.1], [58.0, 1113.7777777777778], [59.0, 305.42857142857144], [60.0, 43.333333333333336], [61.0, 32.25], [62.0, 40.44444444444444], [63.0, 67.27272727272727], [64.0, 50.24999999999999], [65.0, 19.454545454545453], [66.0, 57.2], [67.0, 63.5], [68.0, 15.7], [69.0, 17.333333333333336], [70.0, 65.10000000000001], [71.0, 34.15384615384615], [72.0, 29.777777777777786], [73.0, 46.875], [74.0, 18.42857142857143], [75.0, 32.77777777777778], [76.0, 16.0625], [77.0, 22.0], [78.0, 24.714285714285715], [79.0, 47.44444444444444], [80.0, 40.63636363636363], [81.0, 26.2], [82.0, 49.75], [83.0, 20.857142857142858], [84.0, 32.111111111111114], [85.0, 22.823529411764707], [86.0, 23.083333333333332], [87.0, 25.6969696969697], [88.0, 38.625], [89.0, 38.111111111111114], [90.0, 20.444444444444443], [91.0, 37.61111111111113], [92.0, 74.0], [93.0, 11.25], [95.0, 247.33333333333331], [97.0, 1111.8], [98.0, 728.8333333333333], [99.0, 493.4285714285714], [96.0, 2.6666666666666665], [100.0, 845.3333333333333], [103.0, 578.3333333333335], [102.0, 3.0], [101.0, 1.0833333333333337], [104.0, 381.0526315789473], [105.0, 908.9999999999999], [106.0, 374.19999999999993], [107.0, 707.357142857143], [108.0, 428.8], [109.0, 925.4736842105266], [110.0, 204.50000000000003], [111.0, 1482.5], [112.0, 509.15384615384613], [113.0, 731.3000000000001], [114.0, 1880.0000000000002], [115.0, 1301.9523809523812], [116.0, 463.6153846153846], [117.0, 894.3333333333333], [118.0, 365.1111111111111], [119.0, 1607.2999999999997], [120.0, 274.33333333333337], [121.0, 359.1428571428571], [122.0, 488.6363636363635], [123.0, 528.304347826087], [124.0, 640.4705882352941], [125.0, 1606.75], [126.0, 361.30303030303037], [127.0, 898.8], [128.0, 755.8666666666667], [130.0, 1978.1428571428573], [131.0, 923.6818181818182], [132.0, 129.76744186046514], [133.0, 341.30769230769226], [134.0, 1087.95652173913], [135.0, 984.0], [129.0, 2.3333333333333335], [136.0, 1203.1666666666667], [137.0, 293.33333333333314], [138.0, 1614.4117647058824], [139.0, 368.85000000000014], [140.0, 1540.0], [141.0, 943.6666666666667], [142.0, 276.2727272727275], [143.0, 622.1], [144.0, 1466.611111111111], [145.0, 788.3333333333333], [146.0, 1775.75], [147.0, 166.75757575757578], [148.0, 1268.5555555555557], [149.0, 406.86363636363643], [150.0, 352.7999999999999], [151.0, 184.07142857142864], [152.0, 771.1428571428571], [153.0, 860.2647058823528], [154.0, 895.6190476190477], [155.0, 2798.0], [156.0, 605.25], [158.0, 614.0243902439022], [159.0, 1.2857142857142856], [157.0, 1.5], [160.0, 1319.1], [161.0, 1084.823529411765], [162.0, 3478.125], [163.0, 120.35294117647057], [164.0, 1067.375], [165.0, 664.6451612903227], [166.0, 888.4347826086961], [167.0, 676.825], [168.0, 204.66666666666663], [169.0, 960.2222222222224], [170.0, 1353.5], [172.0, 3157.2999999999997], [173.0, 376.2222222222223], [174.0, 934.212121212121], [175.0, 1602.0], [171.0, 1.5897435897435896], [176.0, 1603.0], [177.0, 452.59322033898314], [178.0, 2313.4545454545455], [179.0, 634.5555555555555], [180.0, 54.92857142857141], [181.0, 898.9285714285716], [182.0, 1153.8125000000002], [183.0, 310.8], [184.0, 15.457831325301221], [185.0, 1080.5853518612946]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[177.7903783783781, 972.613081081083]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 195.0], [3.0, 190.0], [4.0, 157.0], [5.0, 160.0], [6.0, 153.0], [7.0, 168.0], [8.0, 163.0], [9.0, 164.0], [10.0, 148.0], [11.0, 155.0], [12.0, 309.0], [13.0, 296.0], [14.0, 265.0], [15.0, 154.0], [16.0, 154.0], [17.0, 161.0], [18.0, 253.0], [19.0, 161.0], [20.0, 158.0], [21.0, 161.0], [22.0, 160.0], [23.0, 155.0], [24.0, 180.0], [25.0, 153.0], [26.0, 151.0], [27.0, 148.0], [28.0, 227.0], [29.0, 272.0], [30.0, 206.0], [31.0, 148.0], [32.0, 148.0], [33.0, 156.0], [34.0, 162.0], [35.0, 156.0], [36.0, 159.0], [37.0, 150.0], [38.0, 269.0], [39.0, 279.0], [40.0, 191.0], [41.0, 153.0], [42.0, 145.0], [43.0, 158.0], [44.0, 152.0], [45.0, 155.0], [47.0, 631.0], [48.0, 370.0], [49.0, 142.0], [50.0, 149.0], [51.0, 152.0], [52.0, 215.0], [53.0, 157.0], [54.0, 150.0], [55.0, 144.0], [56.0, 156.0], [57.0, 148.0], [58.0, 160.0], [59.0, 158.0], [60.0, 159.0], [61.0, 164.0], [62.0, 159.0], [63.0, 156.0], [64.0, 150.0], [65.0, 168.0], [66.0, 150.0], [67.0, 150.0], [68.0, 213.0], [69.0, 262.0], [70.0, 198.0], [71.0, 154.0], [72.0, 147.0], [73.0, 154.0], [74.0, 155.0], [75.0, 166.0], [76.0, 157.0], [77.0, 160.0], [78.0, 158.0], [79.0, 165.0], [80.0, 161.0], [81.0, 151.0], [82.0, 151.0], [83.0, 159.0], [84.0, 156.0], [85.0, 162.0], [86.0, 161.0], [87.0, 152.0], [88.0, 170.0], [89.0, 150.0], [90.0, 160.0], [91.0, 210.0], [92.0, 155.0], [93.0, 154.0], [94.0, 154.0], [95.0, 152.0], [96.0, 153.0], [97.0, 176.0], [98.0, 156.0], [99.0, 155.0], [100.0, 155.0], [101.0, 154.0], [102.0, 154.0], [103.0, 157.0], [104.0, 152.0], [105.0, 150.0], [106.0, 146.0], [107.0, 152.0], [108.0, 149.0], [109.0, 161.0], [110.0, 156.0], [111.0, 146.0], [112.0, 152.0], [113.0, 157.0], [114.0, 158.0], [115.0, 158.0], [116.0, 159.0], [117.0, 156.0], [118.0, 147.0], [119.0, 150.0], [120.0, 157.0], [121.0, 162.0], [122.0, 148.0], [123.0, 181.0], [124.0, 158.0], [125.0, 166.0], [126.0, 198.0], [127.0, 259.0], [128.0, 153.0], [129.0, 152.0], [130.0, 153.0], [131.0, 173.0], [132.0, 157.0], [133.0, 152.0], [134.0, 209.0], [135.0, 218.0], [136.0, 154.0], [137.0, 159.0], [138.0, 170.0], [139.0, 145.0], [140.0, 161.0], [141.0, 159.0], [142.0, 166.0], [143.0, 162.0], [144.0, 157.0], [145.0, 150.0], [146.0, 148.0], [147.0, 147.0], [148.0, 157.0], [149.0, 170.0], [150.0, 153.0], [151.0, 149.0], [152.0, 150.0], [153.0, 160.0], [154.0, 145.0], [155.0, 157.0], [156.0, 148.0], [157.0, 151.0], [158.0, 149.0], [159.0, 151.0], [160.0, 157.0], [161.0, 160.0], [162.0, 153.0], [163.0, 145.0], [164.0, 153.0], [165.0, 157.0], [166.0, 148.0], [167.0, 159.0], [168.0, 149.0], [169.0, 153.0], [170.0, 153.0], [171.0, 159.0], [172.0, 161.0], [173.0, 158.0], [174.0, 160.0], [175.0, 153.0], [176.0, 173.0], [177.0, 147.0], [178.0, 161.0], [179.0, 157.0], [180.0, 148.0], [181.0, 152.0], [182.0, 161.0], [183.0, 156.0], [184.0, 154.0], [185.0, 156.0], [1.0, 215.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[93.0108108108108, 169.9675675675677]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[7.0, 80.0], [8.0, 53.5], [9.0, 48.0], [10.0, 907.0], [11.0, 71.0], [12.0, 40.0], [13.0, 39.0], [14.0, 59.0], [15.0, 105.33333333333333], [17.0, 45.0], [19.0, 32.333333333333336], [20.0, 37.666666666666664], [21.0, 47.75], [22.0, 42.0], [23.0, 1192.2857142857142], [24.0, 35.5], [25.0, 47.0], [26.0, 36.57142857142857], [27.0, 37.0], [28.0, 23.999999999999996], [29.0, 34.0], [30.0, 23.333333333333332], [31.0, 42.0], [32.0, 46.333333333333336], [33.0, 48.25], [34.0, 43.0], [35.0, 56.83333333333333], [36.0, 42.5], [37.0, 23.0], [38.0, 30.500000000000004], [39.0, 29.666666666666664], [40.0, 35.333333333333336], [41.0, 18.0], [42.0, 28.2], [43.0, 31.333333333333332], [44.0, 13.714285714285712], [45.0, 16.8], [47.0, 2.0], [46.0, 2.0], [49.0, 465.0], [48.0, 2.0], [50.0, 601.7000000000002], [51.0, 8.25], [52.0, 16.875], [53.0, 45.5], [55.0, 14.0], [54.0, 2.0], [56.0, 12.77777777777778], [57.0, 1538.0], [58.0, 305.6363636363636], [59.0, 615.6666666666666], [60.0, 41.33333333333333], [61.0, 44.0], [62.0, 50.333333333333336], [63.0, 155.42857142857144], [64.0, 39.6], [65.0, 19.000000000000004], [66.0, 59.0], [67.0, 35.75000000000001], [68.0, 41.66666666666667], [69.0, 27.85714285714286], [70.0, 66.4], [71.0, 25.64285714285714], [72.0, 29.999999999999996], [73.0, 9.5], [74.0, 19.733333333333334], [75.0, 30.58333333333333], [76.0, 22.066666666666666], [77.0, 27.8], [78.0, 34.28571428571429], [79.0, 56.5], [80.0, 62.428571428571416], [81.0, 32.625], [82.0, 38.57142857142857], [83.0, 27.400000000000002], [84.0, 16.90909090909091], [85.0, 21.153846153846153], [86.0, 32.8], [87.0, 17.703703703703706], [88.0, 51.42857142857143], [89.0, 22.14285714285715], [90.0, 26.375000000000004], [91.0, 26.083333333333336], [92.0, 85.25], [93.0, 21.30769230769231], [94.0, 208.25], [95.0, 277.66666666666663], [97.0, 865.5], [98.0, 928.7142857142858], [99.0, 524.8888888888888], [100.0, 1433.875], [101.0, 562.142857142857], [102.0, 1077.5], [103.0, 598.1578947368421], [104.0, 581.1666666666667], [105.0, 1764.6153846153845], [107.0, 393.5], [106.0, 2.0], [108.0, 478.66666666666663], [109.0, 813.1999999999999], [110.0, 205.39999999999998], [111.0, 1155.0], [112.0, 651.3846153846155], [113.0, 748.3333333333334], [114.0, 1766.0], [115.0, 1499.4117647058822], [116.0, 374.40000000000003], [117.0, 983.6666666666667], [118.0, 445.38888888888886], [119.0, 1343.3571428571427], [121.0, 556.5], [122.0, 514.2727272727273], [123.0, 622.3333333333331], [120.0, 1.9999999999999998], [124.0, 646.526315789474], [125.0, 2570.0], [126.0, 596.5652173913043], [127.0, 2.0], [128.0, 1219.705882352941], [129.0, 1090.5], [130.0, 1834.5555555555557], [131.0, 890.7894736842103], [132.0, 210.90909090909088], [133.0, 376.3999999999999], [134.0, 1006.4827586206897], [135.0, 636.8823529411764], [136.0, 589.0], [137.0, 385.5], [138.0, 1702.5625], [139.0, 358.17647058823536], [140.0, 975.375], [141.0, 361.75], [142.0, 806.8421052631579], [143.0, 602.1666666666667], [144.0, 731.0], [145.0, 722.7333333333335], [146.0, 1952.2857142857144], [147.0, 169.73134328358202], [148.0, 611.9999999999999], [149.0, 573.9473684210526], [150.0, 524.6470588235294], [151.0, 216.37837837837833], [152.0, 549.6842105263158], [153.0, 604.783783783784], [154.0, 1145.857142857143], [155.0, 2789.0], [156.0, 487.4516129032258], [157.0, 228.82352941176475], [158.0, 313.60869565217394], [159.0, 2.75], [160.0, 2509.818181818182], [161.0, 1644.3809523809516], [162.0, 2871.6666666666665], [163.0, 151.00000000000003], [164.0, 2720.5], [165.0, 934.7419354838707], [166.0, 518.5600000000001], [167.0, 586.8461538461537], [168.0, 376.7111111111111], [169.0, 1702.8181818181818], [170.0, 1578.3529411764707], [171.0, 120.89285714285711], [172.0, 3346.857142857143], [173.0, 1136.2142857142858], [174.0, 608.7777777777776], [175.0, 1195.0], [176.0, 947.6], [177.0, 381.9166666666667], [178.0, 2187.3333333333335], [179.0, 973.7142857142853], [181.0, 1506.2], [182.0, 1447.7142857142856], [183.0, 681.3999999999999], [180.0, 2.12987012987013], [184.0, 17.137770897832805], [185.0, 1102.9705488621155]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[177.74178378378244, 998.2675675675586]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 185.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9047.816666666668, "minX": 1.58768754E12, "maxY": 225855.5, "series": [{"data": [[1.58768814E12, 9047.816666666668], [1.58768766E12, 128580.86666666667], [1.58768796E12, 130481.0], [1.58768778E12, 221135.4], [1.58768808E12, 15115.6], [1.5876876E12, 182398.5], [1.5876879E12, 225855.5], [1.58768772E12, 218714.16666666666], [1.58768802E12, 15682.7], [1.58768754E12, 154926.91666666666], [1.58768784E12, 23785.9]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58768814E12, 9131.4], [1.58768766E12, 28177.466666666667], [1.58768796E12, 27885.333333333332], [1.58768778E12, 14922.1], [1.58768808E12, 40783.833333333336], [1.5876876E12, 21531.4], [1.5876879E12, 13906.166666666666], [1.58768772E12, 16330.733333333334], [1.58768802E12, 42313.666666666664], [1.58768754E12, 9923.033333333333], [1.58768784E12, 40347.86666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768814E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2.34628378378378, "minX": 1.58768754E12, "maxY": 3849.9252525252546, "series": [{"data": [[1.58768814E12, 34.63102409638555], [1.58768766E12, 835.4102564102567], [1.58768796E12, 1045.2591836734678], [1.58768778E12, 3605.089952153107], [1.58768808E12, 4.632388947184331], [1.5876876E12, 1818.7596281540511], [1.5876879E12, 3794.1329842931923], [1.58768772E12, 2810.038394415352], [1.58768802E12, 3.3482082488167664], [1.58768754E12, 1012.120385232745], [1.58768784E12, 101.91178546224407]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.5876876E12, 155.33333333333334], [1.58768754E12, 172.46835443037983]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768814E12, 30.052202283849915], [1.58768766E12, 965.0627825213456], [1.58768796E12, 1023.9170103092783], [1.58768778E12, 3541.367562380033], [1.58768808E12, 4.086818980667827], [1.5876876E12, 1930.668008048287], [1.5876879E12, 3849.9252525252546], [1.58768772E12, 2792.4622144112454], [1.58768802E12, 2.34628378378378], [1.58768754E12, 1000.4258443465491], [1.58768784E12, 101.04948380206456]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768814E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2.341554054054051, "minX": 1.58768754E12, "maxY": 3849.230303030305, "series": [{"data": [[1.58768814E12, 33.92921686746987], [1.58768766E12, 834.8753846153842], [1.58768796E12, 1045.2265306122436], [1.58768778E12, 3604.8191387559805], [1.58768808E12, 4.628191675410991], [1.5876876E12, 1818.5577689243048], [1.5876879E12, 3793.1057591623025], [1.58768772E12, 2809.737347294941], [1.58768802E12, 3.3431372549019636], [1.58768754E12, 1011.685393258427], [1.58768784E12, 101.86944248412162]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.5876876E12, 155.2592592592593], [1.58768754E12, 172.4430379746836]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768814E12, 30.021207177814023], [1.58768766E12, 964.461074836766], [1.58768796E12, 1023.8613402061902], [1.58768778E12, 3541.054702495202], [1.58768808E12, 4.080843585237256], [1.5876876E12, 1930.5211267605641], [1.5876879E12, 3849.230303030305], [1.58768772E12, 2791.9543057996466], [1.58768802E12, 2.341554054054051], [1.58768754E12, 999.6960352422898], [1.58768784E12, 101.03844784620851]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768814E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58768754E12, "maxY": 0.9240506329113926, "series": [{"data": [[1.58768814E12, 0.00753012048192771], [1.58768766E12, 0.095897435897436], [1.58768796E12, 0.11989795918367373], [1.58768778E12, 0.37799043062200977], [1.58768808E12, 0.0], [1.5876876E12, 0.29282868525896405], [1.5876879E12, 0.39267015706806335], [1.58768772E12, 0.2879581151832463], [1.58768802E12, 0.0], [1.58768754E12, 0.33707865168539347], [1.58768784E12, 0.026464361326746583]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.5876876E12, 0.6666666666666666], [1.58768754E12, 0.9240506329113926]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768814E12, 0.4225122349102776], [1.58768766E12, 0.4439979909593169], [1.58768796E12, 0.4010309278350515], [1.58768778E12, 0.4069097888675617], [1.58768808E12, 0.4551845342706509], [1.5876876E12, 0.4761904761904763], [1.5876879E12, 0.3969696969696968], [1.58768772E12, 0.3804920913884013], [1.58768802E12, 0.3939189189189197], [1.58768754E12, 0.43612334801762154], [1.58768784E12, 0.39088643645425397]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768814E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 17.0, "minX": 1.58768754E12, "maxY": 15572.0, "series": [{"data": [[1.58768814E12, 2104.0], [1.58768766E12, 7680.0], [1.58768796E12, 5067.0], [1.58768778E12, 14773.0], [1.5876876E12, 8048.0], [1.5876879E12, 7001.0], [1.58768772E12, 15572.0], [1.58768754E12, 5138.0], [1.58768784E12, 5193.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58768814E12, 42.0], [1.58768766E12, 69.0], [1.58768796E12, 2825.0], [1.58768778E12, 575.0], [1.5876876E12, 145.0], [1.5876879E12, 2422.0], [1.58768772E12, 145.0], [1.58768754E12, 17.0], [1.58768784E12, 3252.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58768814E12, 1780.8], [1.58768766E12, 5693.6], [1.58768796E12, 4217.0], [1.58768778E12, 4828.2], [1.5876876E12, 4928.800000000001], [1.5876879E12, 4479.800000000001], [1.58768772E12, 10210.0], [1.58768754E12, 2508.0000000000005], [1.58768784E12, 4360.400000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58768814E12, 2104.0], [1.58768766E12, 7512.099999999999], [1.58768796E12, 4525.4000000000015], [1.58768778E12, 7987.199999999991], [1.5876876E12, 6087.720000000003], [1.5876879E12, 6782.08], [1.58768772E12, 12911.9], [1.58768754E12, 3726.329999999999], [1.58768784E12, 5193.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58768814E12, 1949.2499999999998], [1.58768766E12, 7097.599999999999], [1.58768796E12, 4302.0], [1.58768778E12, 5118.2], [1.5876876E12, 5496.999999999998], [1.5876879E12, 5393.5999999999985], [1.58768772E12, 11583.0], [1.58768754E12, 3014.5499999999997], [1.58768784E12, 4665.3]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768814E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 2.0, "maxY": 5367.0, "series": [{"data": [[2.0, 63.0], [3.0, 160.0], [4.0, 65.5], [5.0, 153.0], [6.0, 108.0], [7.0, 155.0], [8.0, 199.5], [9.0, 214.0], [10.0, 48.0], [11.0, 52.0], [13.0, 42.0], [14.0, 47.5], [16.0, 62.5], [17.0, 1473.5], [18.0, 471.0], [19.0, 2339.0], [20.0, 1641.5], [21.0, 2904.0], [22.0, 2310.5], [23.0, 2276.0], [24.0, 3620.5], [25.0, 3385.0], [26.0, 3535.5], [27.0, 3775.0], [28.0, 3463.0], [29.0, 3735.5], [30.0, 3621.5], [31.0, 3388.5], [33.0, 3391.5], [32.0, 3515.5], [34.0, 3640.0], [35.0, 3544.0], [36.0, 3722.0], [37.0, 3085.0], [38.0, 3240.5], [39.0, 3090.0], [41.0, 2859.0], [40.0, 3609.5], [42.0, 2874.5], [43.0, 4054.0], [45.0, 2697.0], [44.0, 3397.5], [47.0, 2331.0], [46.0, 3554.0], [48.0, 54.0], [49.0, 3020.0], [51.0, 3619.0], [50.0, 3363.0], [52.0, 3589.5], [53.0, 2591.5], [55.0, 1418.0], [54.0, 4263.0], [57.0, 2976.0], [59.0, 2811.0], [58.0, 2750.0], [60.0, 5367.0], [62.0, 2318.0], [66.0, 4785.0], [64.0, 2886.0], [67.0, 3035.0], [65.0, 3673.5], [72.0, 3823.5], [80.0, 3866.5], [90.0, 3398.0], [94.0, 3272.0], [95.0, 3446.0], [107.0, 3774.0], [157.0, 3756.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 2.0], [14.0, 2.0], [21.0, 2.0], [24.0, 2.0], [26.0, 2.5], [27.0, 2.0], [28.0, 2.0], [29.0, 2.5], [30.0, 2.0], [31.0, 2.0], [33.0, 2.0], [34.0, 2.0], [35.0, 2.0], [37.0, 2.0], [36.0, 2.0], [38.0, 2.0], [39.0, 2.0], [41.0, 2.0], [40.0, 2.0], [43.0, 2.0], [42.0, 2.0], [44.0, 2.0], [47.0, 2.0], [46.0, 2.0], [49.0, 2.0], [51.0, 2.0], [50.0, 2.0], [52.0, 2.0], [53.0, 2.0], [54.0, 2.0], [55.0, 2.0], [57.0, 2.0], [56.0, 2.0], [59.0, 2.0], [58.0, 2.0], [60.0, 1777.0], [62.0, 2.0], [63.0, 2.0], [66.0, 2.0], [64.0, 2.0], [67.0, 2.0], [65.0, 2426.0], [70.0, 2.0], [69.0, 2.0], [74.0, 2.0], [75.0, 2.0], [72.0, 2536.0], [73.0, 2.0], [79.0, 2.0], [78.0, 2.0], [76.0, 2.0], [77.0, 2.0], [80.0, 2.0], [82.0, 2.0], [83.0, 2.0], [81.0, 2.0], [87.0, 2.0], [86.0, 2.0], [85.0, 2.0], [84.0, 2.0], [89.0, 2.0], [88.0, 2.0], [90.0, 2.0], [91.0, 2.0], [95.0, 2.0], [94.0, 2.0], [93.0, 2.0], [92.0, 2.0], [99.0, 2.0], [96.0, 2.0], [97.0, 2.0], [98.0, 2.0], [103.0, 2.0], [101.0, 2.0], [100.0, 2.0], [102.0, 2.0], [105.0, 2.0], [107.0, 2.0], [104.0, 2.0], [106.0, 2.0], [109.0, 2.0], [111.0, 2.0], [108.0, 2.0], [110.0, 2.0], [112.0, 2.0], [114.0, 2.0], [113.0, 2.0], [116.0, 2.0], [118.0, 2.0], [119.0, 2.0], [117.0, 2.0], [123.0, 1.0], [122.0, 2.0], [121.0, 2.0], [126.0, 2.0], [124.0, 2.0], [131.0, 2.0], [133.0, 2.0], [139.0, 2.0], [157.0, 1779.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 157.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 2.0, "maxY": 5367.0, "series": [{"data": [[2.0, 63.0], [3.0, 160.0], [4.0, 65.5], [5.0, 153.0], [6.0, 108.0], [7.0, 155.0], [8.0, 199.5], [9.0, 213.5], [10.0, 48.0], [11.0, 52.0], [13.0, 42.0], [14.0, 47.5], [16.0, 60.5], [17.0, 1473.5], [18.0, 471.0], [19.0, 2339.0], [20.0, 1633.5], [21.0, 2904.0], [22.0, 2310.5], [23.0, 2276.0], [24.0, 3620.5], [25.0, 3385.0], [26.0, 3534.5], [27.0, 3775.0], [28.0, 3463.0], [29.0, 3735.5], [30.0, 3621.5], [31.0, 3383.5], [33.0, 3391.5], [32.0, 3513.0], [34.0, 3640.0], [35.0, 3544.0], [36.0, 3722.0], [37.0, 3085.0], [38.0, 3240.5], [39.0, 3090.0], [41.0, 2859.0], [40.0, 3608.0], [42.0, 2874.5], [43.0, 4054.0], [45.0, 2697.0], [44.0, 3397.5], [47.0, 2331.0], [46.0, 3554.0], [48.0, 53.5], [49.0, 3020.0], [51.0, 3619.0], [50.0, 3363.0], [52.0, 3589.5], [53.0, 2589.5], [55.0, 1418.0], [54.0, 4263.0], [57.0, 2976.0], [59.0, 2811.0], [58.0, 2750.0], [60.0, 5367.0], [62.0, 2318.0], [66.0, 4785.0], [64.0, 2886.0], [67.0, 3035.0], [65.0, 3671.5], [72.0, 3823.5], [80.0, 3866.5], [90.0, 3398.0], [94.0, 3272.0], [95.0, 3446.0], [107.0, 3719.0], [157.0, 3756.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 2.0], [14.0, 2.0], [21.0, 2.0], [24.0, 2.0], [26.0, 2.5], [27.0, 2.0], [28.0, 2.0], [29.0, 2.5], [30.0, 2.0], [31.0, 2.0], [33.0, 2.0], [34.0, 2.0], [35.0, 2.0], [37.0, 2.0], [36.0, 2.0], [38.0, 2.0], [39.0, 2.0], [41.0, 2.0], [40.0, 2.0], [43.0, 2.0], [42.0, 2.0], [44.0, 2.0], [47.0, 2.0], [46.0, 2.0], [49.0, 2.0], [51.0, 2.0], [50.0, 2.0], [52.0, 2.0], [53.0, 2.0], [54.0, 2.0], [55.0, 2.0], [57.0, 2.0], [56.0, 2.0], [59.0, 2.0], [58.0, 2.0], [60.0, 1777.0], [62.0, 2.0], [63.0, 2.0], [66.0, 2.0], [64.0, 2.0], [67.0, 2.0], [65.0, 2426.0], [70.0, 2.0], [69.0, 2.0], [74.0, 2.0], [75.0, 2.0], [72.0, 2536.0], [73.0, 2.0], [79.0, 2.0], [78.0, 2.0], [76.0, 2.0], [77.0, 2.0], [80.0, 2.0], [82.0, 2.0], [83.0, 2.0], [81.0, 2.0], [87.0, 2.0], [86.0, 2.0], [85.0, 2.0], [84.0, 2.0], [89.0, 2.0], [88.0, 2.0], [90.0, 2.0], [91.0, 2.0], [95.0, 2.0], [94.0, 2.0], [93.0, 2.0], [92.0, 2.0], [99.0, 2.0], [96.0, 2.0], [97.0, 2.0], [98.0, 2.0], [103.0, 2.0], [101.0, 2.0], [100.0, 2.0], [102.0, 2.0], [105.0, 2.0], [107.0, 2.0], [104.0, 2.0], [106.0, 2.0], [109.0, 2.0], [111.0, 2.0], [108.0, 2.0], [110.0, 2.0], [112.0, 2.0], [114.0, 2.0], [113.0, 2.0], [116.0, 2.0], [118.0, 2.0], [119.0, 2.0], [117.0, 2.0], [123.0, 1.0], [122.0, 2.0], [121.0, 2.0], [126.0, 2.0], [124.0, 2.0], [131.0, 2.0], [133.0, 2.0], [139.0, 2.0], [157.0, 1779.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 157.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 21.283333333333335, "minX": 1.58768754E12, "maxY": 98.61666666666666, "series": [{"data": [[1.58768814E12, 21.283333333333335], [1.58768766E12, 67.03333333333333], [1.58768796E12, 63.166666666666664], [1.58768778E12, 34.36666666666667], [1.58768808E12, 95.06666666666666], [1.5876876E12, 48.7], [1.5876879E12, 32.15], [1.58768772E12, 38.81666666666667], [1.58768802E12, 98.61666666666666], [1.58768754E12, 26.1], [1.58768784E12, 94.45]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768814E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.38333333333333336, "minX": 1.58768754E12, "maxY": 98.63333333333334, "series": [{"data": [[1.58768814E12, 0.8333333333333334], [1.58768766E12, 17.283333333333335], [1.58768796E12, 17.65], [1.58768778E12, 31.616666666666667], [1.5876876E12, 25.916666666666668], [1.5876879E12, 32.416666666666664], [1.58768772E12, 31.15], [1.58768754E12, 24.366666666666667], [1.58768784E12, 1.2833333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58768784E12, 0.38333333333333336]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.58768814E12, 20.45], [1.58768766E12, 48.4], [1.58768796E12, 47.35], [1.58768778E12, 3.1666666666666665], [1.58768808E12, 95.06666666666666], [1.5876876E12, 24.483333333333334], [1.58768772E12, 6.916666666666667], [1.58768802E12, 98.63333333333334], [1.58768784E12, 92.38333333333334]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768814E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.58768754E12, "maxY": 49.333333333333336, "series": [{"data": [[1.5876876E12, 0.45], [1.58768754E12, 2.6333333333333333]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58768814E12, 0.5166666666666667], [1.58768766E12, 8.3], [1.58768796E12, 8.9], [1.58768778E12, 15.533333333333333], [1.5876876E12, 12.35], [1.5876879E12, 15.916666666666666], [1.58768772E12, 15.566666666666666], [1.58768754E12, 10.383333333333333], [1.58768784E12, 0.8333333333333334]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58768814E12, 10.55], [1.58768766E12, 24.2], [1.58768796E12, 23.766666666666666], [1.58768778E12, 1.8833333333333333], [1.58768808E12, 47.65], [1.5876876E12, 12.75], [1.58768772E12, 3.533333333333333], [1.58768802E12, 49.3], [1.58768784E12, 46.4]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.58768814E12, 0.31666666666666665], [1.58768766E12, 8.983333333333333], [1.58768796E12, 8.75], [1.58768778E12, 16.083333333333332], [1.5876876E12, 13.116666666666667], [1.5876879E12, 16.5], [1.58768772E12, 15.583333333333334], [1.58768754E12, 11.35], [1.58768784E12, 0.45]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58768814E12, 9.9], [1.58768766E12, 24.2], [1.58768796E12, 23.583333333333332], [1.58768778E12, 1.2833333333333334], [1.58768808E12, 47.416666666666664], [1.5876876E12, 11.733333333333333], [1.58768772E12, 3.3833333333333333], [1.58768802E12, 49.333333333333336], [1.58768784E12, 46.36666666666667]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768814E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.58768754E12, "maxY": 98.63333333333334, "series": [{"data": [[1.58768814E12, 0.8333333333333334], [1.58768766E12, 17.283333333333335], [1.58768796E12, 17.65], [1.58768778E12, 31.616666666666667], [1.5876876E12, 25.916666666666668], [1.5876879E12, 32.416666666666664], [1.58768772E12, 31.15], [1.58768754E12, 24.366666666666667], [1.58768784E12, 1.2833333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58768814E12, 20.45], [1.58768766E12, 48.4], [1.58768796E12, 47.35], [1.58768778E12, 3.1666666666666665], [1.58768808E12, 95.06666666666666], [1.5876876E12, 24.483333333333334], [1.58768772E12, 6.916666666666667], [1.58768802E12, 98.63333333333334], [1.58768784E12, 92.76666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768814E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

