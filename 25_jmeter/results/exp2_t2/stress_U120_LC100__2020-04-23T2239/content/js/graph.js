/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 13.0, "minX": 0.0, "maxY": 6859.0, "series": [{"data": [[0.0, 13.0], [0.1, 15.0], [0.2, 17.0], [0.3, 17.0], [0.4, 18.0], [0.5, 18.0], [0.6, 18.0], [0.7, 19.0], [0.8, 19.0], [0.9, 19.0], [1.0, 20.0], [1.1, 20.0], [1.2, 20.0], [1.3, 21.0], [1.4, 21.0], [1.5, 21.0], [1.6, 21.0], [1.7, 22.0], [1.8, 22.0], [1.9, 22.0], [2.0, 22.0], [2.1, 23.0], [2.2, 23.0], [2.3, 23.0], [2.4, 23.0], [2.5, 24.0], [2.6, 24.0], [2.7, 24.0], [2.8, 24.0], [2.9, 24.0], [3.0, 25.0], [3.1, 25.0], [3.2, 25.0], [3.3, 25.0], [3.4, 25.0], [3.5, 26.0], [3.6, 26.0], [3.7, 26.0], [3.8, 26.0], [3.9, 27.0], [4.0, 27.0], [4.1, 27.0], [4.2, 27.0], [4.3, 27.0], [4.4, 28.0], [4.5, 28.0], [4.6, 28.0], [4.7, 28.0], [4.8, 29.0], [4.9, 29.0], [5.0, 29.0], [5.1, 29.0], [5.2, 30.0], [5.3, 30.0], [5.4, 30.0], [5.5, 31.0], [5.6, 31.0], [5.7, 31.0], [5.8, 32.0], [5.9, 32.0], [6.0, 33.0], [6.1, 33.0], [6.2, 33.0], [6.3, 34.0], [6.4, 34.0], [6.5, 35.0], [6.6, 35.0], [6.7, 36.0], [6.8, 36.0], [6.9, 37.0], [7.0, 38.0], [7.1, 39.0], [7.2, 40.0], [7.3, 41.0], [7.4, 42.0], [7.5, 45.0], [7.6, 47.0], [7.7, 53.0], [7.8, 56.0], [7.9, 63.0], [8.0, 78.0], [8.1, 103.0], [8.2, 131.0], [8.3, 158.0], [8.4, 184.0], [8.5, 208.0], [8.6, 226.0], [8.7, 246.0], [8.8, 268.0], [8.9, 284.0], [9.0, 297.0], [9.1, 314.0], [9.2, 326.0], [9.3, 332.0], [9.4, 345.0], [9.5, 372.0], [9.6, 383.0], [9.7, 395.0], [9.8, 407.0], [9.9, 414.0], [10.0, 425.0], [10.1, 434.0], [10.2, 442.0], [10.3, 448.0], [10.4, 454.0], [10.5, 461.0], [10.6, 467.0], [10.7, 469.0], [10.8, 481.0], [10.9, 484.0], [11.0, 491.0], [11.1, 498.0], [11.2, 505.0], [11.3, 510.0], [11.4, 514.0], [11.5, 521.0], [11.6, 526.0], [11.7, 531.0], [11.8, 538.0], [11.9, 542.0], [12.0, 545.0], [12.1, 551.0], [12.2, 556.0], [12.3, 561.0], [12.4, 564.0], [12.5, 569.0], [12.6, 574.0], [12.7, 578.0], [12.8, 581.0], [12.9, 585.0], [13.0, 589.0], [13.1, 595.0], [13.2, 599.0], [13.3, 605.0], [13.4, 608.0], [13.5, 615.0], [13.6, 619.0], [13.7, 622.0], [13.8, 625.0], [13.9, 629.0], [14.0, 632.0], [14.1, 636.0], [14.2, 641.0], [14.3, 648.0], [14.4, 652.0], [14.5, 656.0], [14.6, 661.0], [14.7, 666.0], [14.8, 670.0], [14.9, 673.0], [15.0, 675.0], [15.1, 678.0], [15.2, 681.0], [15.3, 687.0], [15.4, 690.0], [15.5, 694.0], [15.6, 698.0], [15.7, 702.0], [15.8, 708.0], [15.9, 712.0], [16.0, 714.0], [16.1, 716.0], [16.2, 719.0], [16.3, 723.0], [16.4, 728.0], [16.5, 731.0], [16.6, 735.0], [16.7, 737.0], [16.8, 742.0], [16.9, 744.0], [17.0, 747.0], [17.1, 752.0], [17.2, 755.0], [17.3, 760.0], [17.4, 762.0], [17.5, 765.0], [17.6, 769.0], [17.7, 772.0], [17.8, 775.0], [17.9, 780.0], [18.0, 783.0], [18.1, 785.0], [18.2, 789.0], [18.3, 794.0], [18.4, 796.0], [18.5, 800.0], [18.6, 803.0], [18.7, 806.0], [18.8, 809.0], [18.9, 812.0], [19.0, 815.0], [19.1, 817.0], [19.2, 820.0], [19.3, 823.0], [19.4, 827.0], [19.5, 830.0], [19.6, 832.0], [19.7, 834.0], [19.8, 838.0], [19.9, 842.0], [20.0, 845.0], [20.1, 847.0], [20.2, 850.0], [20.3, 853.0], [20.4, 855.0], [20.5, 858.0], [20.6, 860.0], [20.7, 863.0], [20.8, 867.0], [20.9, 870.0], [21.0, 873.0], [21.1, 875.0], [21.2, 879.0], [21.3, 883.0], [21.4, 886.0], [21.5, 888.0], [21.6, 890.0], [21.7, 894.0], [21.8, 897.0], [21.9, 899.0], [22.0, 903.0], [22.1, 907.0], [22.2, 909.0], [22.3, 912.0], [22.4, 914.0], [22.5, 919.0], [22.6, 921.0], [22.7, 924.0], [22.8, 927.0], [22.9, 929.0], [23.0, 931.0], [23.1, 934.0], [23.2, 936.0], [23.3, 938.0], [23.4, 942.0], [23.5, 944.0], [23.6, 947.0], [23.7, 948.0], [23.8, 952.0], [23.9, 954.0], [24.0, 955.0], [24.1, 960.0], [24.2, 962.0], [24.3, 965.0], [24.4, 967.0], [24.5, 970.0], [24.6, 972.0], [24.7, 974.0], [24.8, 978.0], [24.9, 981.0], [25.0, 984.0], [25.1, 987.0], [25.2, 989.0], [25.3, 992.0], [25.4, 995.0], [25.5, 997.0], [25.6, 999.0], [25.7, 1000.0], [25.8, 1003.0], [25.9, 1005.0], [26.0, 1008.0], [26.1, 1011.0], [26.2, 1013.0], [26.3, 1015.0], [26.4, 1017.0], [26.5, 1020.0], [26.6, 1023.0], [26.7, 1025.0], [26.8, 1028.0], [26.9, 1029.0], [27.0, 1030.0], [27.1, 1032.0], [27.2, 1035.0], [27.3, 1037.0], [27.4, 1039.0], [27.5, 1042.0], [27.6, 1044.0], [27.7, 1047.0], [27.8, 1048.0], [27.9, 1051.0], [28.0, 1055.0], [28.1, 1057.0], [28.2, 1060.0], [28.3, 1062.0], [28.4, 1065.0], [28.5, 1068.0], [28.6, 1070.0], [28.7, 1073.0], [28.8, 1075.0], [28.9, 1078.0], [29.0, 1080.0], [29.1, 1081.0], [29.2, 1084.0], [29.3, 1086.0], [29.4, 1087.0], [29.5, 1091.0], [29.6, 1092.0], [29.7, 1094.0], [29.8, 1096.0], [29.9, 1098.0], [30.0, 1100.0], [30.1, 1103.0], [30.2, 1106.0], [30.3, 1108.0], [30.4, 1110.0], [30.5, 1113.0], [30.6, 1115.0], [30.7, 1117.0], [30.8, 1119.0], [30.9, 1121.0], [31.0, 1125.0], [31.1, 1127.0], [31.2, 1129.0], [31.3, 1132.0], [31.4, 1136.0], [31.5, 1139.0], [31.6, 1143.0], [31.7, 1145.0], [31.8, 1148.0], [31.9, 1150.0], [32.0, 1152.0], [32.1, 1155.0], [32.2, 1158.0], [32.3, 1162.0], [32.4, 1164.0], [32.5, 1166.0], [32.6, 1169.0], [32.7, 1170.0], [32.8, 1172.0], [32.9, 1174.0], [33.0, 1176.0], [33.1, 1178.0], [33.2, 1180.0], [33.3, 1183.0], [33.4, 1187.0], [33.5, 1189.0], [33.6, 1190.0], [33.7, 1194.0], [33.8, 1196.0], [33.9, 1197.0], [34.0, 1200.0], [34.1, 1202.0], [34.2, 1204.0], [34.3, 1206.0], [34.4, 1208.0], [34.5, 1210.0], [34.6, 1213.0], [34.7, 1216.0], [34.8, 1217.0], [34.9, 1219.0], [35.0, 1223.0], [35.1, 1226.0], [35.2, 1228.0], [35.3, 1229.0], [35.4, 1231.0], [35.5, 1234.0], [35.6, 1236.0], [35.7, 1239.0], [35.8, 1241.0], [35.9, 1243.0], [36.0, 1245.0], [36.1, 1247.0], [36.2, 1250.0], [36.3, 1252.0], [36.4, 1255.0], [36.5, 1258.0], [36.6, 1260.0], [36.7, 1262.0], [36.8, 1265.0], [36.9, 1267.0], [37.0, 1268.0], [37.1, 1271.0], [37.2, 1272.0], [37.3, 1275.0], [37.4, 1277.0], [37.5, 1279.0], [37.6, 1280.0], [37.7, 1283.0], [37.8, 1286.0], [37.9, 1288.0], [38.0, 1290.0], [38.1, 1291.0], [38.2, 1293.0], [38.3, 1295.0], [38.4, 1297.0], [38.5, 1299.0], [38.6, 1301.0], [38.7, 1303.0], [38.8, 1305.0], [38.9, 1306.0], [39.0, 1310.0], [39.1, 1314.0], [39.2, 1315.0], [39.3, 1317.0], [39.4, 1319.0], [39.5, 1322.0], [39.6, 1327.0], [39.7, 1329.0], [39.8, 1332.0], [39.9, 1333.0], [40.0, 1335.0], [40.1, 1338.0], [40.2, 1341.0], [40.3, 1343.0], [40.4, 1345.0], [40.5, 1346.0], [40.6, 1348.0], [40.7, 1351.0], [40.8, 1353.0], [40.9, 1355.0], [41.0, 1356.0], [41.1, 1359.0], [41.2, 1361.0], [41.3, 1364.0], [41.4, 1365.0], [41.5, 1367.0], [41.6, 1370.0], [41.7, 1372.0], [41.8, 1374.0], [41.9, 1376.0], [42.0, 1378.0], [42.1, 1382.0], [42.2, 1387.0], [42.3, 1389.0], [42.4, 1393.0], [42.5, 1395.0], [42.6, 1397.0], [42.7, 1400.0], [42.8, 1403.0], [42.9, 1405.0], [43.0, 1408.0], [43.1, 1409.0], [43.2, 1411.0], [43.3, 1413.0], [43.4, 1415.0], [43.5, 1417.0], [43.6, 1418.0], [43.7, 1420.0], [43.8, 1423.0], [43.9, 1425.0], [44.0, 1428.0], [44.1, 1430.0], [44.2, 1432.0], [44.3, 1434.0], [44.4, 1436.0], [44.5, 1438.0], [44.6, 1440.0], [44.7, 1442.0], [44.8, 1444.0], [44.9, 1446.0], [45.0, 1448.0], [45.1, 1450.0], [45.2, 1452.0], [45.3, 1454.0], [45.4, 1456.0], [45.5, 1458.0], [45.6, 1460.0], [45.7, 1462.0], [45.8, 1466.0], [45.9, 1467.0], [46.0, 1470.0], [46.1, 1472.0], [46.2, 1475.0], [46.3, 1478.0], [46.4, 1480.0], [46.5, 1481.0], [46.6, 1483.0], [46.7, 1485.0], [46.8, 1487.0], [46.9, 1488.0], [47.0, 1489.0], [47.1, 1491.0], [47.2, 1492.0], [47.3, 1494.0], [47.4, 1497.0], [47.5, 1498.0], [47.6, 1501.0], [47.7, 1503.0], [47.8, 1505.0], [47.9, 1507.0], [48.0, 1509.0], [48.1, 1510.0], [48.2, 1513.0], [48.3, 1515.0], [48.4, 1517.0], [48.5, 1519.0], [48.6, 1521.0], [48.7, 1523.0], [48.8, 1524.0], [48.9, 1527.0], [49.0, 1529.0], [49.1, 1531.0], [49.2, 1533.0], [49.3, 1535.0], [49.4, 1537.0], [49.5, 1539.0], [49.6, 1543.0], [49.7, 1545.0], [49.8, 1548.0], [49.9, 1551.0], [50.0, 1552.0], [50.1, 1555.0], [50.2, 1559.0], [50.3, 1560.0], [50.4, 1563.0], [50.5, 1564.0], [50.6, 1567.0], [50.7, 1568.0], [50.8, 1569.0], [50.9, 1573.0], [51.0, 1575.0], [51.1, 1578.0], [51.2, 1579.0], [51.3, 1581.0], [51.4, 1583.0], [51.5, 1585.0], [51.6, 1588.0], [51.7, 1590.0], [51.8, 1593.0], [51.9, 1595.0], [52.0, 1596.0], [52.1, 1598.0], [52.2, 1600.0], [52.3, 1602.0], [52.4, 1605.0], [52.5, 1608.0], [52.6, 1609.0], [52.7, 1613.0], [52.8, 1615.0], [52.9, 1618.0], [53.0, 1620.0], [53.1, 1622.0], [53.2, 1625.0], [53.3, 1626.0], [53.4, 1629.0], [53.5, 1631.0], [53.6, 1634.0], [53.7, 1637.0], [53.8, 1640.0], [53.9, 1643.0], [54.0, 1645.0], [54.1, 1647.0], [54.2, 1650.0], [54.3, 1652.0], [54.4, 1655.0], [54.5, 1657.0], [54.6, 1659.0], [54.7, 1661.0], [54.8, 1663.0], [54.9, 1665.0], [55.0, 1667.0], [55.1, 1670.0], [55.2, 1672.0], [55.3, 1674.0], [55.4, 1676.0], [55.5, 1677.0], [55.6, 1678.0], [55.7, 1680.0], [55.8, 1682.0], [55.9, 1684.0], [56.0, 1687.0], [56.1, 1690.0], [56.2, 1692.0], [56.3, 1695.0], [56.4, 1697.0], [56.5, 1700.0], [56.6, 1702.0], [56.7, 1704.0], [56.8, 1706.0], [56.9, 1708.0], [57.0, 1710.0], [57.1, 1712.0], [57.2, 1714.0], [57.3, 1717.0], [57.4, 1718.0], [57.5, 1720.0], [57.6, 1722.0], [57.7, 1725.0], [57.8, 1729.0], [57.9, 1732.0], [58.0, 1735.0], [58.1, 1736.0], [58.2, 1738.0], [58.3, 1741.0], [58.4, 1742.0], [58.5, 1745.0], [58.6, 1748.0], [58.7, 1752.0], [58.8, 1754.0], [58.9, 1757.0], [59.0, 1759.0], [59.1, 1762.0], [59.2, 1765.0], [59.3, 1768.0], [59.4, 1771.0], [59.5, 1773.0], [59.6, 1776.0], [59.7, 1779.0], [59.8, 1780.0], [59.9, 1782.0], [60.0, 1784.0], [60.1, 1787.0], [60.2, 1790.0], [60.3, 1793.0], [60.4, 1797.0], [60.5, 1800.0], [60.6, 1802.0], [60.7, 1805.0], [60.8, 1807.0], [60.9, 1809.0], [61.0, 1812.0], [61.1, 1814.0], [61.2, 1816.0], [61.3, 1818.0], [61.4, 1822.0], [61.5, 1826.0], [61.6, 1828.0], [61.7, 1831.0], [61.8, 1833.0], [61.9, 1834.0], [62.0, 1836.0], [62.1, 1838.0], [62.2, 1842.0], [62.3, 1844.0], [62.4, 1847.0], [62.5, 1849.0], [62.6, 1851.0], [62.7, 1853.0], [62.8, 1855.0], [62.9, 1858.0], [63.0, 1861.0], [63.1, 1862.0], [63.2, 1864.0], [63.3, 1866.0], [63.4, 1870.0], [63.5, 1873.0], [63.6, 1876.0], [63.7, 1879.0], [63.8, 1883.0], [63.9, 1884.0], [64.0, 1887.0], [64.1, 1889.0], [64.2, 1891.0], [64.3, 1893.0], [64.4, 1894.0], [64.5, 1897.0], [64.6, 1899.0], [64.7, 1903.0], [64.8, 1905.0], [64.9, 1909.0], [65.0, 1912.0], [65.1, 1914.0], [65.2, 1917.0], [65.3, 1920.0], [65.4, 1924.0], [65.5, 1926.0], [65.6, 1928.0], [65.7, 1930.0], [65.8, 1932.0], [65.9, 1936.0], [66.0, 1938.0], [66.1, 1940.0], [66.2, 1941.0], [66.3, 1944.0], [66.4, 1947.0], [66.5, 1949.0], [66.6, 1952.0], [66.7, 1954.0], [66.8, 1957.0], [66.9, 1959.0], [67.0, 1963.0], [67.1, 1965.0], [67.2, 1970.0], [67.3, 1974.0], [67.4, 1975.0], [67.5, 1978.0], [67.6, 1982.0], [67.7, 1985.0], [67.8, 1989.0], [67.9, 1992.0], [68.0, 1994.0], [68.1, 1997.0], [68.2, 1999.0], [68.3, 2002.0], [68.4, 2005.0], [68.5, 2008.0], [68.6, 2010.0], [68.7, 2014.0], [68.8, 2018.0], [68.9, 2020.0], [69.0, 2023.0], [69.1, 2025.0], [69.2, 2028.0], [69.3, 2031.0], [69.4, 2035.0], [69.5, 2039.0], [69.6, 2041.0], [69.7, 2045.0], [69.8, 2049.0], [69.9, 2052.0], [70.0, 2054.0], [70.1, 2058.0], [70.2, 2061.0], [70.3, 2064.0], [70.4, 2069.0], [70.5, 2073.0], [70.6, 2076.0], [70.7, 2080.0], [70.8, 2083.0], [70.9, 2085.0], [71.0, 2087.0], [71.1, 2091.0], [71.2, 2092.0], [71.3, 2096.0], [71.4, 2100.0], [71.5, 2102.0], [71.6, 2105.0], [71.7, 2108.0], [71.8, 2111.0], [71.9, 2113.0], [72.0, 2118.0], [72.1, 2120.0], [72.2, 2124.0], [72.3, 2129.0], [72.4, 2132.0], [72.5, 2135.0], [72.6, 2137.0], [72.7, 2139.0], [72.8, 2143.0], [72.9, 2146.0], [73.0, 2148.0], [73.1, 2152.0], [73.2, 2154.0], [73.3, 2157.0], [73.4, 2163.0], [73.5, 2165.0], [73.6, 2169.0], [73.7, 2170.0], [73.8, 2174.0], [73.9, 2180.0], [74.0, 2182.0], [74.1, 2186.0], [74.2, 2188.0], [74.3, 2191.0], [74.4, 2195.0], [74.5, 2198.0], [74.6, 2200.0], [74.7, 2204.0], [74.8, 2207.0], [74.9, 2210.0], [75.0, 2216.0], [75.1, 2220.0], [75.2, 2223.0], [75.3, 2226.0], [75.4, 2230.0], [75.5, 2235.0], [75.6, 2236.0], [75.7, 2240.0], [75.8, 2242.0], [75.9, 2245.0], [76.0, 2249.0], [76.1, 2254.0], [76.2, 2256.0], [76.3, 2262.0], [76.4, 2266.0], [76.5, 2270.0], [76.6, 2273.0], [76.7, 2277.0], [76.8, 2281.0], [76.9, 2284.0], [77.0, 2288.0], [77.1, 2291.0], [77.2, 2293.0], [77.3, 2295.0], [77.4, 2299.0], [77.5, 2301.0], [77.6, 2306.0], [77.7, 2310.0], [77.8, 2314.0], [77.9, 2318.0], [78.0, 2321.0], [78.1, 2324.0], [78.2, 2330.0], [78.3, 2333.0], [78.4, 2336.0], [78.5, 2338.0], [78.6, 2341.0], [78.7, 2346.0], [78.8, 2351.0], [78.9, 2355.0], [79.0, 2358.0], [79.1, 2360.0], [79.2, 2365.0], [79.3, 2368.0], [79.4, 2372.0], [79.5, 2376.0], [79.6, 2379.0], [79.7, 2382.0], [79.8, 2386.0], [79.9, 2388.0], [80.0, 2390.0], [80.1, 2394.0], [80.2, 2398.0], [80.3, 2403.0], [80.4, 2405.0], [80.5, 2408.0], [80.6, 2412.0], [80.7, 2415.0], [80.8, 2422.0], [80.9, 2425.0], [81.0, 2430.0], [81.1, 2434.0], [81.2, 2437.0], [81.3, 2441.0], [81.4, 2448.0], [81.5, 2450.0], [81.6, 2454.0], [81.7, 2459.0], [81.8, 2463.0], [81.9, 2468.0], [82.0, 2474.0], [82.1, 2479.0], [82.2, 2483.0], [82.3, 2488.0], [82.4, 2493.0], [82.5, 2498.0], [82.6, 2503.0], [82.7, 2508.0], [82.8, 2514.0], [82.9, 2517.0], [83.0, 2523.0], [83.1, 2527.0], [83.2, 2532.0], [83.3, 2537.0], [83.4, 2543.0], [83.5, 2548.0], [83.6, 2554.0], [83.7, 2561.0], [83.8, 2567.0], [83.9, 2571.0], [84.0, 2576.0], [84.1, 2580.0], [84.2, 2586.0], [84.3, 2590.0], [84.4, 2594.0], [84.5, 2600.0], [84.6, 2606.0], [84.7, 2612.0], [84.8, 2616.0], [84.9, 2621.0], [85.0, 2627.0], [85.1, 2633.0], [85.2, 2638.0], [85.3, 2646.0], [85.4, 2652.0], [85.5, 2656.0], [85.6, 2658.0], [85.7, 2661.0], [85.8, 2668.0], [85.9, 2672.0], [86.0, 2674.0], [86.1, 2678.0], [86.2, 2683.0], [86.3, 2691.0], [86.4, 2696.0], [86.5, 2700.0], [86.6, 2704.0], [86.7, 2708.0], [86.8, 2714.0], [86.9, 2720.0], [87.0, 2726.0], [87.1, 2735.0], [87.2, 2740.0], [87.3, 2745.0], [87.4, 2749.0], [87.5, 2753.0], [87.6, 2758.0], [87.7, 2763.0], [87.8, 2772.0], [87.9, 2780.0], [88.0, 2784.0], [88.1, 2789.0], [88.2, 2796.0], [88.3, 2805.0], [88.4, 2810.0], [88.5, 2814.0], [88.6, 2819.0], [88.7, 2827.0], [88.8, 2830.0], [88.9, 2840.0], [89.0, 2847.0], [89.1, 2855.0], [89.2, 2864.0], [89.3, 2867.0], [89.4, 2873.0], [89.5, 2878.0], [89.6, 2886.0], [89.7, 2891.0], [89.8, 2899.0], [89.9, 2903.0], [90.0, 2911.0], [90.1, 2920.0], [90.2, 2929.0], [90.3, 2940.0], [90.4, 2947.0], [90.5, 2954.0], [90.6, 2965.0], [90.7, 2973.0], [90.8, 2980.0], [90.9, 2993.0], [91.0, 2998.0], [91.1, 3009.0], [91.2, 3018.0], [91.3, 3026.0], [91.4, 3039.0], [91.5, 3046.0], [91.6, 3052.0], [91.7, 3060.0], [91.8, 3067.0], [91.9, 3074.0], [92.0, 3087.0], [92.1, 3097.0], [92.2, 3103.0], [92.3, 3117.0], [92.4, 3125.0], [92.5, 3132.0], [92.6, 3145.0], [92.7, 3158.0], [92.8, 3168.0], [92.9, 3174.0], [93.0, 3185.0], [93.1, 3202.0], [93.2, 3213.0], [93.3, 3224.0], [93.4, 3232.0], [93.5, 3243.0], [93.6, 3257.0], [93.7, 3270.0], [93.8, 3278.0], [93.9, 3287.0], [94.0, 3300.0], [94.1, 3310.0], [94.2, 3321.0], [94.3, 3341.0], [94.4, 3354.0], [94.5, 3363.0], [94.6, 3384.0], [94.7, 3396.0], [94.8, 3412.0], [94.9, 3429.0], [95.0, 3440.0], [95.1, 3450.0], [95.2, 3468.0], [95.3, 3486.0], [95.4, 3497.0], [95.5, 3514.0], [95.6, 3534.0], [95.7, 3549.0], [95.8, 3565.0], [95.9, 3574.0], [96.0, 3584.0], [96.1, 3601.0], [96.2, 3626.0], [96.3, 3652.0], [96.4, 3663.0], [96.5, 3687.0], [96.6, 3710.0], [96.7, 3740.0], [96.8, 3765.0], [96.9, 3777.0], [97.0, 3809.0], [97.1, 3830.0], [97.2, 3850.0], [97.3, 3875.0], [97.4, 3895.0], [97.5, 3911.0], [97.6, 3934.0], [97.7, 3955.0], [97.8, 3985.0], [97.9, 4001.0], [98.0, 4036.0], [98.1, 4062.0], [98.2, 4094.0], [98.3, 4137.0], [98.4, 4202.0], [98.5, 4232.0], [98.6, 4281.0], [98.7, 4324.0], [98.8, 4359.0], [98.9, 4405.0], [99.0, 4425.0], [99.1, 4460.0], [99.2, 4504.0], [99.3, 4567.0], [99.4, 4664.0], [99.5, 4727.0], [99.6, 4808.0], [99.7, 4910.0], [99.8, 5085.0], [99.9, 5537.0], [100.0, 6176.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 143.0], [0.1, 143.0], [0.2, 143.0], [0.3, 143.0], [0.4, 143.0], [0.5, 143.0], [0.6, 143.0], [0.7, 143.0], [0.8, 143.0], [0.9, 146.0], [1.0, 146.0], [1.1, 146.0], [1.2, 146.0], [1.3, 146.0], [1.4, 146.0], [1.5, 146.0], [1.6, 146.0], [1.7, 147.0], [1.8, 147.0], [1.9, 147.0], [2.0, 147.0], [2.1, 147.0], [2.2, 147.0], [2.3, 147.0], [2.4, 147.0], [2.5, 148.0], [2.6, 148.0], [2.7, 148.0], [2.8, 148.0], [2.9, 148.0], [3.0, 148.0], [3.1, 148.0], [3.2, 148.0], [3.3, 148.0], [3.4, 148.0], [3.5, 148.0], [3.6, 148.0], [3.7, 148.0], [3.8, 148.0], [3.9, 148.0], [4.0, 148.0], [4.1, 148.0], [4.2, 148.0], [4.3, 148.0], [4.4, 148.0], [4.5, 148.0], [4.6, 148.0], [4.7, 148.0], [4.8, 148.0], [4.9, 148.0], [5.0, 148.0], [5.1, 148.0], [5.2, 148.0], [5.3, 148.0], [5.4, 148.0], [5.5, 148.0], [5.6, 148.0], [5.7, 148.0], [5.8, 148.0], [5.9, 149.0], [6.0, 149.0], [6.1, 149.0], [6.2, 149.0], [6.3, 149.0], [6.4, 149.0], [6.5, 149.0], [6.6, 149.0], [6.7, 149.0], [6.8, 149.0], [6.9, 149.0], [7.0, 149.0], [7.1, 149.0], [7.2, 149.0], [7.3, 149.0], [7.4, 149.0], [7.5, 149.0], [7.6, 149.0], [7.7, 149.0], [7.8, 149.0], [7.9, 149.0], [8.0, 149.0], [8.1, 149.0], [8.2, 149.0], [8.3, 149.0], [8.4, 149.0], [8.5, 149.0], [8.6, 149.0], [8.7, 149.0], [8.8, 149.0], [8.9, 149.0], [9.0, 149.0], [9.1, 149.0], [9.2, 149.0], [9.3, 149.0], [9.4, 149.0], [9.5, 149.0], [9.6, 149.0], [9.7, 149.0], [9.8, 149.0], [9.9, 149.0], [10.0, 150.0], [10.1, 150.0], [10.2, 150.0], [10.3, 150.0], [10.4, 150.0], [10.5, 150.0], [10.6, 150.0], [10.7, 150.0], [10.8, 150.0], [10.9, 150.0], [11.0, 150.0], [11.1, 150.0], [11.2, 150.0], [11.3, 150.0], [11.4, 150.0], [11.5, 150.0], [11.6, 150.0], [11.7, 150.0], [11.8, 150.0], [11.9, 150.0], [12.0, 150.0], [12.1, 150.0], [12.2, 150.0], [12.3, 150.0], [12.4, 150.0], [12.5, 151.0], [12.6, 151.0], [12.7, 151.0], [12.8, 151.0], [12.9, 151.0], [13.0, 151.0], [13.1, 151.0], [13.2, 151.0], [13.3, 151.0], [13.4, 151.0], [13.5, 151.0], [13.6, 151.0], [13.7, 151.0], [13.8, 151.0], [13.9, 151.0], [14.0, 151.0], [14.1, 151.0], [14.2, 151.0], [14.3, 151.0], [14.4, 151.0], [14.5, 151.0], [14.6, 151.0], [14.7, 151.0], [14.8, 151.0], [14.9, 151.0], [15.0, 151.0], [15.1, 151.0], [15.2, 151.0], [15.3, 151.0], [15.4, 151.0], [15.5, 151.0], [15.6, 151.0], [15.7, 151.0], [15.8, 151.0], [15.9, 151.0], [16.0, 151.0], [16.1, 151.0], [16.2, 151.0], [16.3, 151.0], [16.4, 151.0], [16.5, 151.0], [16.6, 151.0], [16.7, 151.0], [16.8, 151.0], [16.9, 151.0], [17.0, 151.0], [17.1, 151.0], [17.2, 151.0], [17.3, 151.0], [17.4, 151.0], [17.5, 152.0], [17.6, 152.0], [17.7, 152.0], [17.8, 152.0], [17.9, 152.0], [18.0, 152.0], [18.1, 152.0], [18.2, 152.0], [18.3, 152.0], [18.4, 152.0], [18.5, 152.0], [18.6, 152.0], [18.7, 152.0], [18.8, 152.0], [18.9, 152.0], [19.0, 152.0], [19.1, 152.0], [19.2, 152.0], [19.3, 152.0], [19.4, 152.0], [19.5, 152.0], [19.6, 152.0], [19.7, 152.0], [19.8, 152.0], [19.9, 152.0], [20.0, 152.0], [20.1, 152.0], [20.2, 152.0], [20.3, 152.0], [20.4, 152.0], [20.5, 152.0], [20.6, 152.0], [20.7, 152.0], [20.8, 152.0], [20.9, 152.0], [21.0, 152.0], [21.1, 152.0], [21.2, 152.0], [21.3, 152.0], [21.4, 152.0], [21.5, 152.0], [21.6, 152.0], [21.7, 153.0], [21.8, 153.0], [21.9, 153.0], [22.0, 153.0], [22.1, 153.0], [22.2, 153.0], [22.3, 153.0], [22.4, 153.0], [22.5, 153.0], [22.6, 153.0], [22.7, 153.0], [22.8, 153.0], [22.9, 153.0], [23.0, 153.0], [23.1, 153.0], [23.2, 153.0], [23.3, 153.0], [23.4, 153.0], [23.5, 153.0], [23.6, 153.0], [23.7, 153.0], [23.8, 153.0], [23.9, 153.0], [24.0, 153.0], [24.1, 153.0], [24.2, 153.0], [24.3, 153.0], [24.4, 153.0], [24.5, 153.0], [24.6, 153.0], [24.7, 153.0], [24.8, 153.0], [24.9, 153.0], [25.0, 153.0], [25.1, 153.0], [25.2, 153.0], [25.3, 153.0], [25.4, 153.0], [25.5, 153.0], [25.6, 153.0], [25.7, 153.0], [25.8, 153.0], [25.9, 153.0], [26.0, 153.0], [26.1, 153.0], [26.2, 153.0], [26.3, 153.0], [26.4, 153.0], [26.5, 153.0], [26.6, 153.0], [26.7, 154.0], [26.8, 154.0], [26.9, 154.0], [27.0, 154.0], [27.1, 154.0], [27.2, 154.0], [27.3, 154.0], [27.4, 154.0], [27.5, 154.0], [27.6, 154.0], [27.7, 154.0], [27.8, 154.0], [27.9, 154.0], [28.0, 154.0], [28.1, 154.0], [28.2, 154.0], [28.3, 154.0], [28.4, 154.0], [28.5, 154.0], [28.6, 154.0], [28.7, 154.0], [28.8, 154.0], [28.9, 154.0], [29.0, 154.0], [29.1, 154.0], [29.2, 155.0], [29.3, 155.0], [29.4, 155.0], [29.5, 155.0], [29.6, 155.0], [29.7, 155.0], [29.8, 155.0], [29.9, 155.0], [30.0, 155.0], [30.1, 155.0], [30.2, 155.0], [30.3, 155.0], [30.4, 155.0], [30.5, 155.0], [30.6, 155.0], [30.7, 155.0], [30.8, 155.0], [30.9, 155.0], [31.0, 155.0], [31.1, 155.0], [31.2, 155.0], [31.3, 155.0], [31.4, 155.0], [31.5, 155.0], [31.6, 155.0], [31.7, 155.0], [31.8, 155.0], [31.9, 155.0], [32.0, 155.0], [32.1, 155.0], [32.2, 155.0], [32.3, 155.0], [32.4, 155.0], [32.5, 155.0], [32.6, 155.0], [32.7, 155.0], [32.8, 155.0], [32.9, 155.0], [33.0, 155.0], [33.1, 155.0], [33.2, 155.0], [33.3, 155.0], [33.4, 155.0], [33.5, 155.0], [33.6, 155.0], [33.7, 155.0], [33.8, 155.0], [33.9, 155.0], [34.0, 155.0], [34.1, 155.0], [34.2, 155.0], [34.3, 155.0], [34.4, 155.0], [34.5, 155.0], [34.6, 155.0], [34.7, 155.0], [34.8, 155.0], [34.9, 155.0], [35.0, 155.0], [35.1, 155.0], [35.2, 155.0], [35.3, 155.0], [35.4, 155.0], [35.5, 155.0], [35.6, 155.0], [35.7, 155.0], [35.8, 155.0], [35.9, 156.0], [36.0, 156.0], [36.1, 156.0], [36.2, 156.0], [36.3, 156.0], [36.4, 156.0], [36.5, 156.0], [36.6, 156.0], [36.7, 156.0], [36.8, 156.0], [36.9, 156.0], [37.0, 156.0], [37.1, 156.0], [37.2, 156.0], [37.3, 156.0], [37.4, 156.0], [37.5, 156.0], [37.6, 156.0], [37.7, 156.0], [37.8, 156.0], [37.9, 156.0], [38.0, 156.0], [38.1, 156.0], [38.2, 156.0], [38.3, 156.0], [38.4, 156.0], [38.5, 156.0], [38.6, 156.0], [38.7, 156.0], [38.8, 156.0], [38.9, 156.0], [39.0, 156.0], [39.1, 156.0], [39.2, 156.0], [39.3, 156.0], [39.4, 156.0], [39.5, 156.0], [39.6, 156.0], [39.7, 156.0], [39.8, 156.0], [39.9, 156.0], [40.0, 156.0], [40.1, 156.0], [40.2, 156.0], [40.3, 156.0], [40.4, 156.0], [40.5, 156.0], [40.6, 156.0], [40.7, 156.0], [40.8, 156.0], [40.9, 156.0], [41.0, 156.0], [41.1, 156.0], [41.2, 156.0], [41.3, 156.0], [41.4, 156.0], [41.5, 156.0], [41.6, 156.0], [41.7, 157.0], [41.8, 157.0], [41.9, 157.0], [42.0, 157.0], [42.1, 157.0], [42.2, 157.0], [42.3, 157.0], [42.4, 157.0], [42.5, 157.0], [42.6, 157.0], [42.7, 157.0], [42.8, 157.0], [42.9, 157.0], [43.0, 157.0], [43.1, 157.0], [43.2, 157.0], [43.3, 157.0], [43.4, 157.0], [43.5, 157.0], [43.6, 157.0], [43.7, 157.0], [43.8, 157.0], [43.9, 157.0], [44.0, 157.0], [44.1, 157.0], [44.2, 157.0], [44.3, 157.0], [44.4, 157.0], [44.5, 157.0], [44.6, 157.0], [44.7, 157.0], [44.8, 157.0], [44.9, 157.0], [45.0, 157.0], [45.1, 157.0], [45.2, 157.0], [45.3, 157.0], [45.4, 157.0], [45.5, 157.0], [45.6, 157.0], [45.7, 157.0], [45.8, 157.0], [45.9, 158.0], [46.0, 158.0], [46.1, 158.0], [46.2, 158.0], [46.3, 158.0], [46.4, 158.0], [46.5, 158.0], [46.6, 158.0], [46.7, 158.0], [46.8, 158.0], [46.9, 158.0], [47.0, 158.0], [47.1, 158.0], [47.2, 158.0], [47.3, 158.0], [47.4, 158.0], [47.5, 158.0], [47.6, 158.0], [47.7, 158.0], [47.8, 158.0], [47.9, 158.0], [48.0, 158.0], [48.1, 158.0], [48.2, 158.0], [48.3, 158.0], [48.4, 158.0], [48.5, 158.0], [48.6, 158.0], [48.7, 158.0], [48.8, 158.0], [48.9, 158.0], [49.0, 158.0], [49.1, 158.0], [49.2, 158.0], [49.3, 158.0], [49.4, 158.0], [49.5, 158.0], [49.6, 158.0], [49.7, 158.0], [49.8, 158.0], [49.9, 158.0], [50.0, 158.0], [50.1, 158.0], [50.2, 158.0], [50.3, 158.0], [50.4, 158.0], [50.5, 158.0], [50.6, 158.0], [50.7, 158.0], [50.8, 158.0], [50.9, 158.0], [51.0, 158.0], [51.1, 158.0], [51.2, 158.0], [51.3, 158.0], [51.4, 158.0], [51.5, 158.0], [51.6, 158.0], [51.7, 159.0], [51.8, 159.0], [51.9, 159.0], [52.0, 159.0], [52.1, 159.0], [52.2, 159.0], [52.3, 159.0], [52.4, 159.0], [52.5, 159.0], [52.6, 159.0], [52.7, 159.0], [52.8, 159.0], [52.9, 159.0], [53.0, 159.0], [53.1, 159.0], [53.2, 159.0], [53.3, 159.0], [53.4, 159.0], [53.5, 159.0], [53.6, 159.0], [53.7, 159.0], [53.8, 159.0], [53.9, 159.0], [54.0, 159.0], [54.1, 159.0], [54.2, 159.0], [54.3, 159.0], [54.4, 159.0], [54.5, 159.0], [54.6, 159.0], [54.7, 159.0], [54.8, 159.0], [54.9, 159.0], [55.0, 159.0], [55.1, 159.0], [55.2, 159.0], [55.3, 159.0], [55.4, 159.0], [55.5, 159.0], [55.6, 159.0], [55.7, 159.0], [55.8, 159.0], [55.9, 159.0], [56.0, 159.0], [56.1, 159.0], [56.2, 159.0], [56.3, 159.0], [56.4, 159.0], [56.5, 159.0], [56.6, 159.0], [56.7, 160.0], [56.8, 160.0], [56.9, 160.0], [57.0, 160.0], [57.1, 160.0], [57.2, 160.0], [57.3, 160.0], [57.4, 160.0], [57.5, 160.0], [57.6, 160.0], [57.7, 160.0], [57.8, 160.0], [57.9, 160.0], [58.0, 160.0], [58.1, 160.0], [58.2, 160.0], [58.3, 160.0], [58.4, 160.0], [58.5, 160.0], [58.6, 160.0], [58.7, 160.0], [58.8, 160.0], [58.9, 160.0], [59.0, 160.0], [59.1, 160.0], [59.2, 160.0], [59.3, 160.0], [59.4, 160.0], [59.5, 160.0], [59.6, 160.0], [59.7, 160.0], [59.8, 160.0], [59.9, 160.0], [60.0, 160.0], [60.1, 160.0], [60.2, 160.0], [60.3, 160.0], [60.4, 160.0], [60.5, 160.0], [60.6, 160.0], [60.7, 160.0], [60.8, 160.0], [60.9, 160.0], [61.0, 160.0], [61.1, 160.0], [61.2, 160.0], [61.3, 160.0], [61.4, 160.0], [61.5, 160.0], [61.6, 160.0], [61.7, 160.0], [61.8, 160.0], [61.9, 160.0], [62.0, 160.0], [62.1, 160.0], [62.2, 160.0], [62.3, 160.0], [62.4, 160.0], [62.5, 160.0], [62.6, 160.0], [62.7, 160.0], [62.8, 160.0], [62.9, 160.0], [63.0, 160.0], [63.1, 160.0], [63.2, 160.0], [63.3, 160.0], [63.4, 160.0], [63.5, 160.0], [63.6, 160.0], [63.7, 160.0], [63.8, 160.0], [63.9, 160.0], [64.0, 160.0], [64.1, 160.0], [64.2, 161.0], [64.3, 161.0], [64.4, 161.0], [64.5, 161.0], [64.6, 161.0], [64.7, 161.0], [64.8, 161.0], [64.9, 161.0], [65.0, 161.0], [65.1, 161.0], [65.2, 161.0], [65.3, 161.0], [65.4, 161.0], [65.5, 161.0], [65.6, 161.0], [65.7, 161.0], [65.8, 161.0], [65.9, 161.0], [66.0, 161.0], [66.1, 161.0], [66.2, 161.0], [66.3, 161.0], [66.4, 161.0], [66.5, 161.0], [66.6, 161.0], [66.7, 161.0], [66.8, 161.0], [66.9, 161.0], [67.0, 161.0], [67.1, 161.0], [67.2, 161.0], [67.3, 161.0], [67.4, 161.0], [67.5, 161.0], [67.6, 161.0], [67.7, 161.0], [67.8, 161.0], [67.9, 161.0], [68.0, 161.0], [68.1, 161.0], [68.2, 161.0], [68.3, 161.0], [68.4, 161.0], [68.5, 161.0], [68.6, 161.0], [68.7, 161.0], [68.8, 161.0], [68.9, 161.0], [69.0, 161.0], [69.1, 161.0], [69.2, 162.0], [69.3, 162.0], [69.4, 162.0], [69.5, 162.0], [69.6, 162.0], [69.7, 162.0], [69.8, 162.0], [69.9, 162.0], [70.0, 162.0], [70.1, 162.0], [70.2, 162.0], [70.3, 162.0], [70.4, 162.0], [70.5, 162.0], [70.6, 162.0], [70.7, 162.0], [70.8, 162.0], [70.9, 163.0], [71.0, 163.0], [71.1, 163.0], [71.2, 163.0], [71.3, 163.0], [71.4, 163.0], [71.5, 163.0], [71.6, 163.0], [71.7, 163.0], [71.8, 163.0], [71.9, 163.0], [72.0, 163.0], [72.1, 163.0], [72.2, 163.0], [72.3, 163.0], [72.4, 163.0], [72.5, 163.0], [72.6, 163.0], [72.7, 163.0], [72.8, 163.0], [72.9, 163.0], [73.0, 163.0], [73.1, 163.0], [73.2, 163.0], [73.3, 163.0], [73.4, 163.0], [73.5, 163.0], [73.6, 163.0], [73.7, 163.0], [73.8, 163.0], [73.9, 163.0], [74.0, 163.0], [74.1, 163.0], [74.2, 163.0], [74.3, 163.0], [74.4, 163.0], [74.5, 163.0], [74.6, 163.0], [74.7, 163.0], [74.8, 163.0], [74.9, 163.0], [75.0, 163.0], [75.1, 164.0], [75.2, 164.0], [75.3, 164.0], [75.4, 164.0], [75.5, 164.0], [75.6, 164.0], [75.7, 164.0], [75.8, 164.0], [75.9, 164.0], [76.0, 164.0], [76.1, 164.0], [76.2, 164.0], [76.3, 164.0], [76.4, 164.0], [76.5, 164.0], [76.6, 164.0], [76.7, 164.0], [76.8, 164.0], [76.9, 164.0], [77.0, 164.0], [77.1, 164.0], [77.2, 164.0], [77.3, 164.0], [77.4, 164.0], [77.5, 164.0], [77.6, 165.0], [77.7, 165.0], [77.8, 165.0], [77.9, 165.0], [78.0, 165.0], [78.1, 165.0], [78.2, 165.0], [78.3, 165.0], [78.4, 165.0], [78.5, 165.0], [78.6, 165.0], [78.7, 165.0], [78.8, 165.0], [78.9, 165.0], [79.0, 165.0], [79.1, 165.0], [79.2, 166.0], [79.3, 166.0], [79.4, 166.0], [79.5, 166.0], [79.6, 166.0], [79.7, 166.0], [79.8, 166.0], [79.9, 166.0], [80.0, 166.0], [80.1, 166.0], [80.2, 166.0], [80.3, 166.0], [80.4, 166.0], [80.5, 166.0], [80.6, 166.0], [80.7, 166.0], [80.8, 166.0], [80.9, 166.0], [81.0, 166.0], [81.1, 166.0], [81.2, 166.0], [81.3, 166.0], [81.4, 166.0], [81.5, 166.0], [81.6, 166.0], [81.7, 166.0], [81.8, 166.0], [81.9, 166.0], [82.0, 166.0], [82.1, 166.0], [82.2, 166.0], [82.3, 166.0], [82.4, 166.0], [82.5, 166.0], [82.6, 167.0], [82.7, 167.0], [82.8, 167.0], [82.9, 167.0], [83.0, 167.0], [83.1, 167.0], [83.2, 167.0], [83.3, 167.0], [83.4, 167.0], [83.5, 167.0], [83.6, 167.0], [83.7, 167.0], [83.8, 167.0], [83.9, 167.0], [84.0, 167.0], [84.1, 167.0], [84.2, 167.0], [84.3, 167.0], [84.4, 167.0], [84.5, 167.0], [84.6, 167.0], [84.7, 167.0], [84.8, 167.0], [84.9, 167.0], [85.0, 167.0], [85.1, 167.0], [85.2, 167.0], [85.3, 167.0], [85.4, 167.0], [85.5, 167.0], [85.6, 167.0], [85.7, 167.0], [85.8, 167.0], [85.9, 168.0], [86.0, 168.0], [86.1, 168.0], [86.2, 168.0], [86.3, 168.0], [86.4, 168.0], [86.5, 168.0], [86.6, 168.0], [86.7, 168.0], [86.8, 168.0], [86.9, 168.0], [87.0, 168.0], [87.1, 168.0], [87.2, 168.0], [87.3, 168.0], [87.4, 168.0], [87.5, 168.0], [87.6, 168.0], [87.7, 168.0], [87.8, 168.0], [87.9, 168.0], [88.0, 168.0], [88.1, 168.0], [88.2, 168.0], [88.3, 168.0], [88.4, 169.0], [88.5, 169.0], [88.6, 169.0], [88.7, 169.0], [88.8, 169.0], [88.9, 169.0], [89.0, 169.0], [89.1, 169.0], [89.2, 169.0], [89.3, 169.0], [89.4, 169.0], [89.5, 169.0], [89.6, 169.0], [89.7, 169.0], [89.8, 169.0], [89.9, 169.0], [90.0, 169.0], [90.1, 169.0], [90.2, 169.0], [90.3, 169.0], [90.4, 169.0], [90.5, 169.0], [90.6, 169.0], [90.7, 169.0], [90.8, 169.0], [90.9, 170.0], [91.0, 170.0], [91.1, 170.0], [91.2, 170.0], [91.3, 170.0], [91.4, 170.0], [91.5, 170.0], [91.6, 170.0], [91.7, 170.0], [91.8, 170.0], [91.9, 170.0], [92.0, 170.0], [92.1, 170.0], [92.2, 170.0], [92.3, 170.0], [92.4, 170.0], [92.5, 170.0], [92.6, 171.0], [92.7, 171.0], [92.8, 171.0], [92.9, 171.0], [93.0, 171.0], [93.1, 171.0], [93.2, 171.0], [93.3, 171.0], [93.4, 171.0], [93.5, 171.0], [93.6, 171.0], [93.7, 171.0], [93.8, 171.0], [93.9, 171.0], [94.0, 171.0], [94.1, 171.0], [94.2, 173.0], [94.3, 173.0], [94.4, 173.0], [94.5, 173.0], [94.6, 173.0], [94.7, 173.0], [94.8, 173.0], [94.9, 173.0], [95.0, 173.0], [95.1, 173.0], [95.2, 173.0], [95.3, 173.0], [95.4, 173.0], [95.5, 173.0], [95.6, 173.0], [95.7, 173.0], [95.8, 173.0], [95.9, 174.0], [96.0, 174.0], [96.1, 174.0], [96.2, 174.0], [96.3, 174.0], [96.4, 174.0], [96.5, 174.0], [96.6, 174.0], [96.7, 177.0], [96.8, 177.0], [96.9, 177.0], [97.0, 177.0], [97.1, 177.0], [97.2, 177.0], [97.3, 177.0], [97.4, 177.0], [97.5, 177.0], [97.6, 194.0], [97.7, 194.0], [97.8, 194.0], [97.9, 194.0], [98.0, 194.0], [98.1, 194.0], [98.2, 194.0], [98.3, 194.0], [98.4, 208.0], [98.5, 208.0], [98.6, 208.0], [98.7, 208.0], [98.8, 208.0], [98.9, 208.0], [99.0, 208.0], [99.1, 208.0], [99.2, 217.0], [99.3, 217.0], [99.4, 217.0], [99.5, 217.0], [99.6, 217.0], [99.7, 217.0], [99.8, 217.0], [99.9, 217.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 13.0], [0.1, 16.0], [0.2, 17.0], [0.3, 18.0], [0.4, 18.0], [0.5, 18.0], [0.6, 19.0], [0.7, 19.0], [0.8, 20.0], [0.9, 20.0], [1.0, 20.0], [1.1, 21.0], [1.2, 21.0], [1.3, 21.0], [1.4, 21.0], [1.5, 22.0], [1.6, 22.0], [1.7, 22.0], [1.8, 22.0], [1.9, 23.0], [2.0, 23.0], [2.1, 23.0], [2.2, 23.0], [2.3, 23.0], [2.4, 24.0], [2.5, 24.0], [2.6, 24.0], [2.7, 24.0], [2.8, 25.0], [2.9, 25.0], [3.0, 25.0], [3.1, 25.0], [3.2, 25.0], [3.3, 25.0], [3.4, 26.0], [3.5, 26.0], [3.6, 26.0], [3.7, 26.0], [3.8, 27.0], [3.9, 27.0], [4.0, 27.0], [4.1, 28.0], [4.2, 28.0], [4.3, 28.0], [4.4, 28.0], [4.5, 28.0], [4.6, 29.0], [4.7, 29.0], [4.8, 29.0], [4.9, 29.0], [5.0, 30.0], [5.1, 30.0], [5.2, 30.0], [5.3, 30.0], [5.4, 31.0], [5.5, 31.0], [5.6, 31.0], [5.7, 32.0], [5.8, 32.0], [5.9, 32.0], [6.0, 33.0], [6.1, 33.0], [6.2, 34.0], [6.3, 34.0], [6.4, 34.0], [6.5, 35.0], [6.6, 36.0], [6.7, 36.0], [6.8, 37.0], [6.9, 38.0], [7.0, 39.0], [7.1, 40.0], [7.2, 41.0], [7.3, 43.0], [7.4, 44.0], [7.5, 45.0], [7.6, 49.0], [7.7, 53.0], [7.8, 59.0], [7.9, 68.0], [8.0, 82.0], [8.1, 115.0], [8.2, 139.0], [8.3, 164.0], [8.4, 200.0], [8.5, 231.0], [8.6, 254.0], [8.7, 269.0], [8.8, 287.0], [8.9, 299.0], [9.0, 307.0], [9.1, 320.0], [9.2, 336.0], [9.3, 355.0], [9.4, 363.0], [9.5, 380.0], [9.6, 390.0], [9.7, 398.0], [9.8, 406.0], [9.9, 412.0], [10.0, 422.0], [10.1, 428.0], [10.2, 436.0], [10.3, 443.0], [10.4, 452.0], [10.5, 459.0], [10.6, 463.0], [10.7, 467.0], [10.8, 474.0], [10.9, 479.0], [11.0, 482.0], [11.1, 492.0], [11.2, 499.0], [11.3, 504.0], [11.4, 511.0], [11.5, 516.0], [11.6, 522.0], [11.7, 530.0], [11.8, 533.0], [11.9, 537.0], [12.0, 544.0], [12.1, 548.0], [12.2, 553.0], [12.3, 559.0], [12.4, 562.0], [12.5, 566.0], [12.6, 569.0], [12.7, 573.0], [12.8, 577.0], [12.9, 582.0], [13.0, 586.0], [13.1, 592.0], [13.2, 596.0], [13.3, 603.0], [13.4, 608.0], [13.5, 612.0], [13.6, 616.0], [13.7, 620.0], [13.8, 624.0], [13.9, 629.0], [14.0, 631.0], [14.1, 638.0], [14.2, 642.0], [14.3, 645.0], [14.4, 649.0], [14.5, 653.0], [14.6, 657.0], [14.7, 662.0], [14.8, 667.0], [14.9, 672.0], [15.0, 679.0], [15.1, 682.0], [15.2, 686.0], [15.3, 689.0], [15.4, 692.0], [15.5, 697.0], [15.6, 702.0], [15.7, 706.0], [15.8, 709.0], [15.9, 712.0], [16.0, 716.0], [16.1, 720.0], [16.2, 724.0], [16.3, 728.0], [16.4, 734.0], [16.5, 737.0], [16.6, 741.0], [16.7, 746.0], [16.8, 750.0], [16.9, 755.0], [17.0, 757.0], [17.1, 760.0], [17.2, 764.0], [17.3, 767.0], [17.4, 768.0], [17.5, 771.0], [17.6, 775.0], [17.7, 777.0], [17.8, 780.0], [17.9, 782.0], [18.0, 786.0], [18.1, 788.0], [18.2, 791.0], [18.3, 798.0], [18.4, 801.0], [18.5, 805.0], [18.6, 807.0], [18.7, 810.0], [18.8, 814.0], [18.9, 818.0], [19.0, 821.0], [19.1, 824.0], [19.2, 827.0], [19.3, 832.0], [19.4, 835.0], [19.5, 836.0], [19.6, 839.0], [19.7, 841.0], [19.8, 844.0], [19.9, 848.0], [20.0, 850.0], [20.1, 854.0], [20.2, 856.0], [20.3, 859.0], [20.4, 861.0], [20.5, 864.0], [20.6, 866.0], [20.7, 870.0], [20.8, 872.0], [20.9, 876.0], [21.0, 879.0], [21.1, 883.0], [21.2, 886.0], [21.3, 889.0], [21.4, 892.0], [21.5, 895.0], [21.6, 896.0], [21.7, 899.0], [21.8, 903.0], [21.9, 905.0], [22.0, 906.0], [22.1, 908.0], [22.2, 910.0], [22.3, 911.0], [22.4, 915.0], [22.5, 918.0], [22.6, 923.0], [22.7, 925.0], [22.8, 927.0], [22.9, 929.0], [23.0, 933.0], [23.1, 937.0], [23.2, 941.0], [23.3, 943.0], [23.4, 947.0], [23.5, 950.0], [23.6, 953.0], [23.7, 955.0], [23.8, 957.0], [23.9, 960.0], [24.0, 965.0], [24.1, 967.0], [24.2, 969.0], [24.3, 971.0], [24.4, 973.0], [24.5, 975.0], [24.6, 977.0], [24.7, 980.0], [24.8, 983.0], [24.9, 986.0], [25.0, 989.0], [25.1, 992.0], [25.2, 994.0], [25.3, 997.0], [25.4, 999.0], [25.5, 1001.0], [25.6, 1003.0], [25.7, 1005.0], [25.8, 1009.0], [25.9, 1014.0], [26.0, 1018.0], [26.1, 1021.0], [26.2, 1023.0], [26.3, 1026.0], [26.4, 1029.0], [26.5, 1031.0], [26.6, 1033.0], [26.7, 1035.0], [26.8, 1037.0], [26.9, 1041.0], [27.0, 1045.0], [27.1, 1047.0], [27.2, 1048.0], [27.3, 1052.0], [27.4, 1054.0], [27.5, 1056.0], [27.6, 1058.0], [27.7, 1059.0], [27.8, 1061.0], [27.9, 1063.0], [28.0, 1065.0], [28.1, 1067.0], [28.2, 1071.0], [28.3, 1073.0], [28.4, 1075.0], [28.5, 1078.0], [28.6, 1081.0], [28.7, 1083.0], [28.8, 1086.0], [28.9, 1088.0], [29.0, 1091.0], [29.1, 1093.0], [29.2, 1094.0], [29.3, 1096.0], [29.4, 1100.0], [29.5, 1102.0], [29.6, 1104.0], [29.7, 1106.0], [29.8, 1108.0], [29.9, 1111.0], [30.0, 1114.0], [30.1, 1117.0], [30.2, 1120.0], [30.3, 1122.0], [30.4, 1125.0], [30.5, 1127.0], [30.6, 1130.0], [30.7, 1132.0], [30.8, 1133.0], [30.9, 1135.0], [31.0, 1137.0], [31.1, 1140.0], [31.2, 1143.0], [31.3, 1145.0], [31.4, 1148.0], [31.5, 1151.0], [31.6, 1153.0], [31.7, 1156.0], [31.8, 1158.0], [31.9, 1160.0], [32.0, 1162.0], [32.1, 1164.0], [32.2, 1166.0], [32.3, 1168.0], [32.4, 1170.0], [32.5, 1173.0], [32.6, 1175.0], [32.7, 1177.0], [32.8, 1179.0], [32.9, 1182.0], [33.0, 1184.0], [33.1, 1186.0], [33.2, 1188.0], [33.3, 1191.0], [33.4, 1192.0], [33.5, 1195.0], [33.6, 1198.0], [33.7, 1200.0], [33.8, 1203.0], [33.9, 1207.0], [34.0, 1208.0], [34.1, 1210.0], [34.2, 1213.0], [34.3, 1215.0], [34.4, 1216.0], [34.5, 1219.0], [34.6, 1221.0], [34.7, 1225.0], [34.8, 1226.0], [34.9, 1228.0], [35.0, 1232.0], [35.1, 1234.0], [35.2, 1236.0], [35.3, 1239.0], [35.4, 1241.0], [35.5, 1243.0], [35.6, 1246.0], [35.7, 1248.0], [35.8, 1250.0], [35.9, 1252.0], [36.0, 1255.0], [36.1, 1258.0], [36.2, 1261.0], [36.3, 1266.0], [36.4, 1267.0], [36.5, 1269.0], [36.6, 1272.0], [36.7, 1276.0], [36.8, 1279.0], [36.9, 1281.0], [37.0, 1283.0], [37.1, 1285.0], [37.2, 1286.0], [37.3, 1289.0], [37.4, 1291.0], [37.5, 1293.0], [37.6, 1295.0], [37.7, 1297.0], [37.8, 1300.0], [37.9, 1302.0], [38.0, 1304.0], [38.1, 1307.0], [38.2, 1309.0], [38.3, 1312.0], [38.4, 1314.0], [38.5, 1315.0], [38.6, 1318.0], [38.7, 1321.0], [38.8, 1323.0], [38.9, 1325.0], [39.0, 1327.0], [39.1, 1328.0], [39.2, 1332.0], [39.3, 1335.0], [39.4, 1337.0], [39.5, 1339.0], [39.6, 1342.0], [39.7, 1344.0], [39.8, 1346.0], [39.9, 1348.0], [40.0, 1351.0], [40.1, 1352.0], [40.2, 1356.0], [40.3, 1358.0], [40.4, 1360.0], [40.5, 1362.0], [40.6, 1366.0], [40.7, 1368.0], [40.8, 1370.0], [40.9, 1373.0], [41.0, 1375.0], [41.1, 1376.0], [41.2, 1378.0], [41.3, 1381.0], [41.4, 1383.0], [41.5, 1385.0], [41.6, 1387.0], [41.7, 1389.0], [41.8, 1391.0], [41.9, 1393.0], [42.0, 1395.0], [42.1, 1397.0], [42.2, 1401.0], [42.3, 1404.0], [42.4, 1407.0], [42.5, 1408.0], [42.6, 1410.0], [42.7, 1412.0], [42.8, 1413.0], [42.9, 1417.0], [43.0, 1420.0], [43.1, 1421.0], [43.2, 1423.0], [43.3, 1425.0], [43.4, 1428.0], [43.5, 1430.0], [43.6, 1432.0], [43.7, 1433.0], [43.8, 1435.0], [43.9, 1438.0], [44.0, 1440.0], [44.1, 1442.0], [44.2, 1444.0], [44.3, 1447.0], [44.4, 1449.0], [44.5, 1451.0], [44.6, 1454.0], [44.7, 1455.0], [44.8, 1457.0], [44.9, 1460.0], [45.0, 1463.0], [45.1, 1466.0], [45.2, 1467.0], [45.3, 1470.0], [45.4, 1471.0], [45.5, 1474.0], [45.6, 1476.0], [45.7, 1478.0], [45.8, 1480.0], [45.9, 1483.0], [46.0, 1484.0], [46.1, 1486.0], [46.2, 1491.0], [46.3, 1494.0], [46.4, 1496.0], [46.5, 1500.0], [46.6, 1502.0], [46.7, 1504.0], [46.8, 1506.0], [46.9, 1507.0], [47.0, 1510.0], [47.1, 1512.0], [47.2, 1513.0], [47.3, 1517.0], [47.4, 1518.0], [47.5, 1521.0], [47.6, 1524.0], [47.7, 1527.0], [47.8, 1529.0], [47.9, 1532.0], [48.0, 1535.0], [48.1, 1538.0], [48.2, 1540.0], [48.3, 1542.0], [48.4, 1544.0], [48.5, 1546.0], [48.6, 1550.0], [48.7, 1552.0], [48.8, 1554.0], [48.9, 1556.0], [49.0, 1558.0], [49.1, 1561.0], [49.2, 1564.0], [49.3, 1566.0], [49.4, 1569.0], [49.5, 1571.0], [49.6, 1573.0], [49.7, 1576.0], [49.8, 1578.0], [49.9, 1580.0], [50.0, 1581.0], [50.1, 1583.0], [50.2, 1585.0], [50.3, 1588.0], [50.4, 1590.0], [50.5, 1592.0], [50.6, 1593.0], [50.7, 1596.0], [50.8, 1597.0], [50.9, 1600.0], [51.0, 1602.0], [51.1, 1604.0], [51.2, 1607.0], [51.3, 1608.0], [51.4, 1610.0], [51.5, 1611.0], [51.6, 1613.0], [51.7, 1615.0], [51.8, 1618.0], [51.9, 1621.0], [52.0, 1624.0], [52.1, 1627.0], [52.2, 1629.0], [52.3, 1631.0], [52.4, 1634.0], [52.5, 1636.0], [52.6, 1638.0], [52.7, 1640.0], [52.8, 1642.0], [52.9, 1646.0], [53.0, 1648.0], [53.1, 1650.0], [53.2, 1653.0], [53.3, 1654.0], [53.4, 1657.0], [53.5, 1659.0], [53.6, 1661.0], [53.7, 1663.0], [53.8, 1665.0], [53.9, 1666.0], [54.0, 1668.0], [54.1, 1670.0], [54.2, 1672.0], [54.3, 1674.0], [54.4, 1676.0], [54.5, 1678.0], [54.6, 1679.0], [54.7, 1681.0], [54.8, 1683.0], [54.9, 1685.0], [55.0, 1687.0], [55.1, 1690.0], [55.2, 1691.0], [55.3, 1693.0], [55.4, 1695.0], [55.5, 1697.0], [55.6, 1700.0], [55.7, 1701.0], [55.8, 1704.0], [55.9, 1707.0], [56.0, 1709.0], [56.1, 1711.0], [56.2, 1713.0], [56.3, 1714.0], [56.4, 1717.0], [56.5, 1720.0], [56.6, 1722.0], [56.7, 1725.0], [56.8, 1726.0], [56.9, 1728.0], [57.0, 1732.0], [57.1, 1735.0], [57.2, 1738.0], [57.3, 1739.0], [57.4, 1743.0], [57.5, 1746.0], [57.6, 1748.0], [57.7, 1750.0], [57.8, 1754.0], [57.9, 1756.0], [58.0, 1759.0], [58.1, 1762.0], [58.2, 1764.0], [58.3, 1766.0], [58.4, 1768.0], [58.5, 1770.0], [58.6, 1773.0], [58.7, 1775.0], [58.8, 1778.0], [58.9, 1780.0], [59.0, 1783.0], [59.1, 1785.0], [59.2, 1789.0], [59.3, 1791.0], [59.4, 1793.0], [59.5, 1795.0], [59.6, 1800.0], [59.7, 1801.0], [59.8, 1804.0], [59.9, 1808.0], [60.0, 1809.0], [60.1, 1812.0], [60.2, 1815.0], [60.3, 1816.0], [60.4, 1819.0], [60.5, 1821.0], [60.6, 1824.0], [60.7, 1826.0], [60.8, 1829.0], [60.9, 1831.0], [61.0, 1835.0], [61.1, 1838.0], [61.2, 1840.0], [61.3, 1843.0], [61.4, 1846.0], [61.5, 1848.0], [61.6, 1851.0], [61.7, 1854.0], [61.8, 1856.0], [61.9, 1858.0], [62.0, 1861.0], [62.1, 1863.0], [62.2, 1865.0], [62.3, 1868.0], [62.4, 1873.0], [62.5, 1875.0], [62.6, 1877.0], [62.7, 1880.0], [62.8, 1882.0], [62.9, 1884.0], [63.0, 1886.0], [63.1, 1889.0], [63.2, 1891.0], [63.3, 1895.0], [63.4, 1899.0], [63.5, 1900.0], [63.6, 1903.0], [63.7, 1908.0], [63.8, 1909.0], [63.9, 1912.0], [64.0, 1914.0], [64.1, 1916.0], [64.2, 1919.0], [64.3, 1921.0], [64.4, 1923.0], [64.5, 1926.0], [64.6, 1930.0], [64.7, 1931.0], [64.8, 1934.0], [64.9, 1937.0], [65.0, 1939.0], [65.1, 1942.0], [65.2, 1946.0], [65.3, 1948.0], [65.4, 1951.0], [65.5, 1953.0], [65.6, 1956.0], [65.7, 1957.0], [65.8, 1961.0], [65.9, 1963.0], [66.0, 1965.0], [66.1, 1968.0], [66.2, 1971.0], [66.3, 1974.0], [66.4, 1976.0], [66.5, 1978.0], [66.6, 1980.0], [66.7, 1982.0], [66.8, 1985.0], [66.9, 1987.0], [67.0, 1990.0], [67.1, 1994.0], [67.2, 1997.0], [67.3, 1998.0], [67.4, 2003.0], [67.5, 2006.0], [67.6, 2009.0], [67.7, 2011.0], [67.8, 2013.0], [67.9, 2017.0], [68.0, 2021.0], [68.1, 2024.0], [68.2, 2026.0], [68.3, 2028.0], [68.4, 2032.0], [68.5, 2035.0], [68.6, 2038.0], [68.7, 2041.0], [68.8, 2046.0], [68.9, 2048.0], [69.0, 2051.0], [69.1, 2055.0], [69.2, 2057.0], [69.3, 2060.0], [69.4, 2064.0], [69.5, 2067.0], [69.6, 2070.0], [69.7, 2074.0], [69.8, 2077.0], [69.9, 2080.0], [70.0, 2083.0], [70.1, 2085.0], [70.2, 2087.0], [70.3, 2089.0], [70.4, 2092.0], [70.5, 2094.0], [70.6, 2098.0], [70.7, 2103.0], [70.8, 2106.0], [70.9, 2109.0], [71.0, 2112.0], [71.1, 2115.0], [71.2, 2118.0], [71.3, 2122.0], [71.4, 2126.0], [71.5, 2129.0], [71.6, 2131.0], [71.7, 2133.0], [71.8, 2135.0], [71.9, 2139.0], [72.0, 2142.0], [72.1, 2147.0], [72.2, 2149.0], [72.3, 2152.0], [72.4, 2158.0], [72.5, 2160.0], [72.6, 2162.0], [72.7, 2165.0], [72.8, 2169.0], [72.9, 2172.0], [73.0, 2174.0], [73.1, 2177.0], [73.2, 2180.0], [73.3, 2183.0], [73.4, 2186.0], [73.5, 2188.0], [73.6, 2191.0], [73.7, 2193.0], [73.8, 2197.0], [73.9, 2199.0], [74.0, 2202.0], [74.1, 2204.0], [74.2, 2209.0], [74.3, 2212.0], [74.4, 2215.0], [74.5, 2220.0], [74.6, 2222.0], [74.7, 2225.0], [74.8, 2230.0], [74.9, 2235.0], [75.0, 2237.0], [75.1, 2240.0], [75.2, 2242.0], [75.3, 2244.0], [75.4, 2247.0], [75.5, 2251.0], [75.6, 2255.0], [75.7, 2258.0], [75.8, 2264.0], [75.9, 2268.0], [76.0, 2271.0], [76.1, 2273.0], [76.2, 2277.0], [76.3, 2281.0], [76.4, 2286.0], [76.5, 2289.0], [76.6, 2292.0], [76.7, 2296.0], [76.8, 2301.0], [76.9, 2305.0], [77.0, 2308.0], [77.1, 2311.0], [77.2, 2315.0], [77.3, 2320.0], [77.4, 2323.0], [77.5, 2326.0], [77.6, 2329.0], [77.7, 2333.0], [77.8, 2337.0], [77.9, 2340.0], [78.0, 2345.0], [78.1, 2349.0], [78.2, 2355.0], [78.3, 2357.0], [78.4, 2361.0], [78.5, 2366.0], [78.6, 2368.0], [78.7, 2372.0], [78.8, 2374.0], [78.9, 2379.0], [79.0, 2383.0], [79.1, 2388.0], [79.2, 2392.0], [79.3, 2395.0], [79.4, 2400.0], [79.5, 2405.0], [79.6, 2408.0], [79.7, 2412.0], [79.8, 2415.0], [79.9, 2421.0], [80.0, 2424.0], [80.1, 2427.0], [80.2, 2430.0], [80.3, 2432.0], [80.4, 2436.0], [80.5, 2439.0], [80.6, 2443.0], [80.7, 2449.0], [80.8, 2452.0], [80.9, 2456.0], [81.0, 2461.0], [81.1, 2467.0], [81.2, 2471.0], [81.3, 2474.0], [81.4, 2477.0], [81.5, 2482.0], [81.6, 2484.0], [81.7, 2488.0], [81.8, 2493.0], [81.9, 2497.0], [82.0, 2503.0], [82.1, 2508.0], [82.2, 2512.0], [82.3, 2514.0], [82.4, 2521.0], [82.5, 2526.0], [82.6, 2530.0], [82.7, 2535.0], [82.8, 2538.0], [82.9, 2542.0], [83.0, 2547.0], [83.1, 2551.0], [83.2, 2555.0], [83.3, 2559.0], [83.4, 2565.0], [83.5, 2567.0], [83.6, 2572.0], [83.7, 2579.0], [83.8, 2583.0], [83.9, 2588.0], [84.0, 2594.0], [84.1, 2597.0], [84.2, 2602.0], [84.3, 2607.0], [84.4, 2611.0], [84.5, 2613.0], [84.6, 2617.0], [84.7, 2623.0], [84.8, 2629.0], [84.9, 2633.0], [85.0, 2635.0], [85.1, 2641.0], [85.2, 2647.0], [85.3, 2651.0], [85.4, 2656.0], [85.5, 2660.0], [85.6, 2666.0], [85.7, 2673.0], [85.8, 2675.0], [85.9, 2682.0], [86.0, 2688.0], [86.1, 2694.0], [86.2, 2700.0], [86.3, 2707.0], [86.4, 2714.0], [86.5, 2719.0], [86.6, 2727.0], [86.7, 2732.0], [86.8, 2738.0], [86.9, 2743.0], [87.0, 2748.0], [87.1, 2754.0], [87.2, 2762.0], [87.3, 2768.0], [87.4, 2776.0], [87.5, 2782.0], [87.6, 2787.0], [87.7, 2793.0], [87.8, 2802.0], [87.9, 2812.0], [88.0, 2817.0], [88.1, 2823.0], [88.2, 2827.0], [88.3, 2836.0], [88.4, 2842.0], [88.5, 2848.0], [88.6, 2853.0], [88.7, 2860.0], [88.8, 2863.0], [88.9, 2868.0], [89.0, 2872.0], [89.1, 2880.0], [89.2, 2883.0], [89.3, 2891.0], [89.4, 2902.0], [89.5, 2909.0], [89.6, 2916.0], [89.7, 2925.0], [89.8, 2934.0], [89.9, 2939.0], [90.0, 2949.0], [90.1, 2956.0], [90.2, 2961.0], [90.3, 2970.0], [90.4, 2981.0], [90.5, 2992.0], [90.6, 3000.0], [90.7, 3008.0], [90.8, 3015.0], [90.9, 3029.0], [91.0, 3038.0], [91.1, 3042.0], [91.2, 3049.0], [91.3, 3058.0], [91.4, 3064.0], [91.5, 3073.0], [91.6, 3085.0], [91.7, 3092.0], [91.8, 3102.0], [91.9, 3108.0], [92.0, 3113.0], [92.1, 3122.0], [92.2, 3132.0], [92.3, 3142.0], [92.4, 3156.0], [92.5, 3164.0], [92.6, 3178.0], [92.7, 3188.0], [92.8, 3200.0], [92.9, 3209.0], [93.0, 3216.0], [93.1, 3231.0], [93.2, 3242.0], [93.3, 3252.0], [93.4, 3268.0], [93.5, 3282.0], [93.6, 3289.0], [93.7, 3301.0], [93.8, 3310.0], [93.9, 3321.0], [94.0, 3338.0], [94.1, 3352.0], [94.2, 3363.0], [94.3, 3383.0], [94.4, 3395.0], [94.5, 3403.0], [94.6, 3421.0], [94.7, 3430.0], [94.8, 3447.0], [94.9, 3455.0], [95.0, 3474.0], [95.1, 3488.0], [95.2, 3502.0], [95.3, 3523.0], [95.4, 3537.0], [95.5, 3544.0], [95.6, 3561.0], [95.7, 3576.0], [95.8, 3600.0], [95.9, 3609.0], [96.0, 3629.0], [96.1, 3647.0], [96.2, 3658.0], [96.3, 3676.0], [96.4, 3693.0], [96.5, 3714.0], [96.6, 3735.0], [96.7, 3753.0], [96.8, 3787.0], [96.9, 3806.0], [97.0, 3829.0], [97.1, 3853.0], [97.2, 3869.0], [97.3, 3891.0], [97.4, 3911.0], [97.5, 3934.0], [97.6, 3966.0], [97.7, 3994.0], [97.8, 4020.0], [97.9, 4046.0], [98.0, 4090.0], [98.1, 4124.0], [98.2, 4151.0], [98.3, 4184.0], [98.4, 4227.0], [98.5, 4264.0], [98.6, 4312.0], [98.7, 4360.0], [98.8, 4407.0], [98.9, 4454.0], [99.0, 4482.0], [99.1, 4540.0], [99.2, 4618.0], [99.3, 4729.0], [99.4, 4819.0], [99.5, 4954.0], [99.6, 5060.0], [99.7, 5182.0], [99.8, 5382.0], [99.9, 5593.0], [100.0, 6859.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 971.0, "series": [{"data": [[0.0, 971.0], [600.0, 291.0], [700.0, 340.0], [800.0, 413.0], [900.0, 450.0], [1000.0, 517.0], [1100.0, 484.0], [1200.0, 544.0], [1300.0, 501.0], [1400.0, 582.0], [1500.0, 555.0], [1600.0, 516.0], [1700.0, 480.0], [1800.0, 496.0], [1900.0, 433.0], [2000.0, 381.0], [2100.0, 382.0], [2300.0, 334.0], [2200.0, 344.0], [2400.0, 275.0], [2500.0, 236.0], [2600.0, 239.0], [2700.0, 216.0], [2800.0, 185.0], [2900.0, 144.0], [3000.0, 134.0], [3100.0, 114.0], [3200.0, 109.0], [3300.0, 90.0], [3400.0, 80.0], [3500.0, 80.0], [3600.0, 53.0], [3700.0, 56.0], [3800.0, 55.0], [3900.0, 54.0], [4000.0, 39.0], [4300.0, 31.0], [4100.0, 21.0], [4200.0, 28.0], [4600.0, 14.0], [4400.0, 35.0], [4500.0, 19.0], [4800.0, 10.0], [4700.0, 16.0], [5000.0, 10.0], [5100.0, 3.0], [4900.0, 6.0], [5200.0, 4.0], [5300.0, 2.0], [5500.0, 5.0], [5600.0, 5.0], [5400.0, 1.0], [5700.0, 2.0], [6100.0, 1.0], [6000.0, 1.0], [100.0, 45.0], [200.0, 66.0], [300.0, 86.0], [400.0, 167.0], [500.0, 249.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[100.0, 118.0], [200.0, 2.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 971.0], [600.0, 280.0], [700.0, 334.0], [800.0, 402.0], [900.0, 446.0], [1000.0, 477.0], [1100.0, 517.0], [1200.0, 492.0], [1300.0, 523.0], [1400.0, 519.0], [1500.0, 527.0], [1600.0, 567.0], [1700.0, 479.0], [1800.0, 465.0], [1900.0, 465.0], [2000.0, 396.0], [2100.0, 392.0], [2200.0, 344.0], [2300.0, 315.0], [2400.0, 303.0], [2500.0, 268.0], [2600.0, 244.0], [2700.0, 189.0], [2800.0, 194.0], [2900.0, 143.0], [3000.0, 144.0], [3100.0, 122.0], [3300.0, 92.0], [3200.0, 105.0], [3400.0, 87.0], [3500.0, 76.0], [3600.0, 76.0], [3700.0, 50.0], [3800.0, 59.0], [3900.0, 46.0], [4000.0, 37.0], [4100.0, 37.0], [4300.0, 25.0], [4200.0, 29.0], [4400.0, 31.0], [4500.0, 15.0], [4600.0, 15.0], [4800.0, 11.0], [4700.0, 10.0], [4900.0, 9.0], [5000.0, 12.0], [5100.0, 9.0], [5300.0, 5.0], [5200.0, 6.0], [5400.0, 5.0], [5500.0, 7.0], [5600.0, 1.0], [5800.0, 2.0], [5700.0, 2.0], [6100.0, 1.0], [5900.0, 1.0], [6200.0, 1.0], [6500.0, 2.0], [6800.0, 1.0], [100.0, 37.0], [200.0, 63.0], [300.0, 95.0], [400.0, 179.0], [500.0, 243.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 194.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 12605.0, "series": [{"data": [[0.0, 2775.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8546.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 12605.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 194.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 64.6738967838445, "minX": 1.58767794E12, "maxY": 120.0, "series": [{"data": [[1.587678E12, 119.14759725400452], [1.58767842E12, 120.0], [1.58767806E12, 120.0], [1.58767824E12, 120.0], [1.58767854E12, 120.0], [1.58767794E12, 64.6738967838445], [1.58767848E12, 120.0], [1.5876783E12, 120.0], [1.58767818E12, 120.0], [1.5876786E12, 116.56874328678839], [1.58767836E12, 120.0], [1.58767812E12, 120.0], [1.58767866E12, 68.20739064856711]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767866E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 19.666666666666668, "minX": 1.0, "maxY": 2850.0, "series": [{"data": [[2.0, 31.0], [4.0, 26.0], [6.0, 27.0], [7.0, 31.0], [8.0, 39.0], [9.0, 26.5], [10.0, 24.0], [11.0, 27.0], [12.0, 23.0], [13.0, 31.5], [14.0, 66.0], [15.0, 35.0], [16.0, 34.666666666666664], [17.0, 33.0], [18.0, 38.2], [19.0, 24.857142857142858], [20.0, 22.4], [21.0, 27.25], [22.0, 25.5], [23.0, 25.75], [24.0, 34.333333333333336], [25.0, 29.5], [26.0, 28.2], [27.0, 31.624999999999993], [28.0, 33.375], [29.0, 36.666666666666664], [30.0, 38.99999999999999], [31.0, 29.0], [32.0, 30.5], [33.0, 33.42857142857143], [34.0, 56.62499999999999], [35.0, 25.5], [36.0, 34.5], [37.0, 29.35294117647059], [38.0, 28.0], [39.0, 31.444444444444443], [40.0, 26.0], [41.0, 28.428571428571427], [42.0, 26.999999999999996], [43.0, 35.6], [44.0, 24.200000000000003], [45.0, 29.619047619047617], [46.0, 33.8421052631579], [47.0, 24.529411764705884], [48.0, 28.6], [49.0, 25.454545454545453], [50.0, 25.555555555555557], [51.0, 32.72727272727273], [52.0, 29.52], [53.0, 28.625], [54.0, 28.8], [55.0, 24.866666666666667], [56.0, 29.125], [57.0, 26.764705882352946], [58.0, 27.777777777777775], [59.0, 25.35], [60.0, 27.375], [61.0, 27.869565217391305], [62.0, 29.71428571428572], [63.0, 27.266666666666662], [64.0, 31.66666666666666], [65.0, 26.894736842105264], [66.0, 23.714285714285715], [67.0, 26.0], [68.0, 34.46666666666666], [69.0, 33.28571428571428], [70.0, 27.11111111111111], [71.0, 26.416666666666664], [72.0, 31.789473684210527], [73.0, 28.53333333333333], [74.0, 27.2], [75.0, 23.24137931034483], [76.0, 26.59259259259259], [77.0, 24.9], [78.0, 24.500000000000004], [79.0, 25.375000000000004], [80.0, 25.80952380952381], [81.0, 26.58823529411765], [82.0, 789.0869565217395], [83.0, 1041.3714285714286], [84.0, 615.2903225806451], [85.0, 870.6956521739129], [86.0, 193.92857142857144], [87.0, 120.76923076923077], [88.0, 307.6153846153846], [89.0, 504.84210526315786], [90.0, 347.2], [91.0, 642.8571428571428], [93.0, 947.8000000000002], [94.0, 1465.1785714285713], [95.0, 1639.5], [92.0, 87.5], [96.0, 1706.862068965517], [97.0, 1481.578947368421], [98.0, 1464.6250000000002], [99.0, 1098.5], [100.0, 1308.8], [101.0, 1991.3902439024391], [102.0, 1876.4545454545457], [103.0, 1910.904761904762], [104.0, 1863.857142857143], [105.0, 2354.5294117647054], [106.0, 2444.5833333333335], [107.0, 1623.5454545454545], [108.0, 1877.6363636363637], [109.0, 1720.0833333333333], [110.0, 1413.5], [111.0, 1373.1], [112.0, 1744.2068965517242], [113.0, 2242.8399999999997], [114.0, 2032.5952380952383], [115.0, 1744.1818181818182], [116.0, 1821.8070175438595], [117.0, 1615.4], [118.0, 2429.0], [119.0, 1970.1321839080467], [120.0, 1786.4357530864168]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[114.02000000000011, 1641.5144166666682]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 171.0], [3.0, 158.0], [4.0, 171.0], [5.0, 158.0], [6.0, 168.0], [7.0, 152.0], [8.0, 160.0], [9.0, 153.0], [10.0, 159.0], [11.0, 158.0], [12.0, 217.0], [13.0, 170.0], [14.0, 161.0], [15.0, 163.0], [16.0, 151.0], [17.0, 149.0], [18.0, 162.0], [19.0, 177.0], [20.0, 156.0], [21.0, 173.0], [22.0, 160.0], [23.0, 155.0], [24.0, 160.0], [25.0, 163.0], [26.0, 169.0], [27.0, 157.0], [28.0, 157.0], [29.0, 162.0], [30.0, 149.0], [31.0, 146.0], [32.0, 159.0], [33.0, 155.0], [34.0, 154.0], [35.0, 167.0], [36.0, 149.0], [37.0, 156.0], [38.0, 160.0], [39.0, 155.0], [40.0, 149.0], [41.0, 151.0], [42.0, 158.0], [43.0, 154.0], [44.0, 143.0], [45.0, 163.0], [46.0, 155.0], [47.0, 147.0], [48.0, 148.0], [49.0, 170.0], [50.0, 153.0], [51.0, 151.0], [52.0, 151.0], [53.0, 152.0], [54.0, 155.0], [55.0, 155.0], [56.0, 156.0], [57.0, 157.0], [58.0, 161.0], [59.0, 157.0], [60.0, 151.0], [61.0, 159.0], [62.0, 159.0], [63.0, 168.0], [64.0, 150.0], [65.0, 151.0], [66.0, 169.0], [67.0, 158.0], [68.0, 153.0], [69.0, 164.0], [70.0, 152.0], [71.0, 149.0], [72.0, 159.0], [73.0, 156.0], [74.0, 152.0], [75.0, 155.0], [76.0, 167.0], [77.0, 153.0], [78.0, 154.0], [79.0, 208.0], [80.0, 166.0], [81.0, 160.0], [82.0, 161.0], [83.0, 173.0], [84.0, 152.0], [85.0, 161.0], [86.0, 148.0], [87.0, 167.0], [88.0, 174.0], [89.0, 161.0], [90.0, 153.0], [91.0, 166.0], [92.0, 160.0], [93.0, 160.0], [94.0, 168.0], [95.0, 166.0], [96.0, 164.0], [97.0, 155.0], [98.0, 163.0], [99.0, 163.0], [100.0, 156.0], [101.0, 165.0], [102.0, 158.0], [103.0, 159.0], [104.0, 158.0], [105.0, 164.0], [106.0, 161.0], [107.0, 165.0], [108.0, 156.0], [109.0, 169.0], [110.0, 166.0], [111.0, 160.0], [112.0, 150.0], [113.0, 150.0], [114.0, 160.0], [115.0, 167.0], [116.0, 153.0], [117.0, 157.0], [118.0, 156.0], [119.0, 148.0], [120.0, 148.0], [1.0, 194.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[60.5, 159.61666666666667]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[4.0, 25.0], [6.0, 34.5], [7.0, 19.666666666666668], [8.0, 24.0], [9.0, 33.0], [10.0, 21.0], [11.0, 23.0], [12.0, 992.0], [13.0, 34.666666666666664], [14.0, 30.0], [15.0, 37.0], [16.0, 34.6], [18.0, 39.25], [19.0, 26.833333333333336], [20.0, 49.357142857142854], [21.0, 30.5], [22.0, 27.0], [23.0, 30.0], [24.0, 35.4], [25.0, 45.666666666666664], [26.0, 35.25], [27.0, 26.625], [28.0, 45.0], [29.0, 46.75], [30.0, 25.857142857142858], [31.0, 33.44444444444445], [32.0, 32.42857142857143], [33.0, 36.0], [34.0, 46.0], [35.0, 30.555555555555557], [36.0, 24.57142857142857], [37.0, 28.499999999999996], [38.0, 27.05], [39.0, 23.666666666666668], [40.0, 29.272727272727273], [41.0, 27.5], [42.0, 31.3], [43.0, 27.249999999999996], [44.0, 26.857142857142858], [45.0, 33.46666666666667], [46.0, 27.461538461538463], [47.0, 31.35], [48.0, 29.299999999999997], [49.0, 28.7], [50.0, 27.0], [51.0, 38.00000000000001], [52.0, 28.52173913043478], [53.0, 25.166666666666664], [54.0, 36.0], [55.0, 25.5], [56.0, 35.78571428571429], [57.0, 26.46666666666667], [58.0, 29.862068965517235], [59.0, 25.684210526315788], [60.0, 29.285714285714285], [61.0, 31.266666666666666], [62.0, 29.899999999999995], [63.0, 27.0625], [64.0, 25.928571428571434], [65.0, 27.88888888888889], [66.0, 26.357142857142858], [67.0, 28.555555555555554], [68.0, 32.82608695652174], [69.0, 28.529411764705884], [70.0, 25.789473684210524], [71.0, 30.5], [72.0, 32.388888888888886], [73.0, 27.363636363636367], [74.0, 34.64705882352942], [75.0, 25.85714285714286], [76.0, 27.09090909090909], [77.0, 29.299999999999997], [78.0, 26.6], [79.0, 27.476190476190474], [80.0, 26.249999999999996], [81.0, 25.76923076923077], [82.0, 691.4237288135593], [83.0, 746.3809523809524], [84.0, 761.40625], [85.0, 723.0967741935483], [86.0, 113.81818181818183], [87.0, 178.25], [88.0, 162.36363636363637], [89.0, 375.4117647058823], [90.0, 325.44444444444446], [91.0, 633.6], [92.0, 166.45], [93.0, 842.7931034482759], [94.0, 1305.7222222222224], [95.0, 1722.6666666666667], [96.0, 1600.2173913043482], [97.0, 1886.6666666666665], [98.0, 1843.1818181818182], [99.0, 1507.3333333333333], [100.0, 2850.0], [101.0, 1918.3333333333335], [102.0, 2279.0], [103.0, 2129.7999999999997], [104.0, 1900.3157894736842], [105.0, 1961.2631578947369], [106.0, 2054.6071428571427], [107.0, 1872.5714285714287], [108.0, 1757.642857142857], [109.0, 1815.4666666666665], [110.0, 1227.5000000000002], [111.0, 1631.0526315789473], [112.0, 1639.3604651162796], [113.0, 2195.8536585365855], [114.0, 2202.204081632652], [115.0, 2297.142857142857], [116.0, 1949.810344827586], [117.0, 1224.111111111111], [118.0, 2395.0], [119.0, 1908.4883720930236], [120.0, 1808.7329713721597]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[114.0310833333333, 1660.4009166666676]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 120.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9203.666666666666, "minX": 1.58767794E12, "maxY": 244649.11666666667, "series": [{"data": [[1.587678E12, 196060.8], [1.58767842E12, 215908.35], [1.58767806E12, 236278.75], [1.58767824E12, 244649.11666666667], [1.58767854E12, 222006.6], [1.58767794E12, 145277.5], [1.58767848E12, 236165.15], [1.5876783E12, 231153.61666666667], [1.58767818E12, 241381.18333333332], [1.5876786E12, 216177.36666666667], [1.58767836E12, 220830.76666666666], [1.58767812E12, 207697.18333333332], [1.58767866E12, 153898.46666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.587678E12, 12451.366666666667], [1.58767842E12, 13399.1], [1.58767806E12, 14550.1], [1.58767824E12, 15272.566666666668], [1.58767854E12, 13863.733333333334], [1.58767794E12, 9203.666666666666], [1.58767848E12, 14729.0], [1.5876783E12, 14392.833333333334], [1.58767818E12, 14864.833333333334], [1.5876786E12, 13313.566666666668], [1.58767836E12, 13599.366666666667], [1.58767812E12, 12934.3], [1.58767866E12, 9481.566666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767866E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 157.5, "minX": 1.58767794E12, "maxY": 2287.6069364161845, "series": [{"data": [[1.587678E12, 2208.6490218642134], [1.58767842E12, 1996.802561366063], [1.58767806E12, 1633.3622902270472], [1.58767824E12, 1515.4249767008403], [1.58767854E12, 1834.837474120082], [1.58767794E12, 278.04391891891896], [1.58767848E12, 1617.3815533980567], [1.5876783E12, 1668.4416749750735], [1.58767818E12, 1574.1953801732457], [1.5876786E12, 1855.4579339723118], [1.58767836E12, 1843.4438614900307], [1.58767812E12, 2122.046511627908], [1.58767866E12, 439.1317715959013]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.587678E12, 157.5], [1.58767794E12, 159.89622641509436]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.587678E12, 2287.6069364161845], [1.58767842E12, 1981.7289220917814], [1.58767806E12, 1673.406066536203], [1.58767824E12, 1509.7375352775161], [1.58767854E12, 1831.2086330935258], [1.58767794E12, 313.399061032864], [1.58767848E12, 1629.5728155339816], [1.5876783E12, 1669.0722772277234], [1.58767818E12, 1595.5528846153838], [1.5876786E12, 1875.8894907908996], [1.58767836E12, 1919.9726027397273], [1.58767812E12, 2144.1136865342155], [1.58767866E12, 423.6174183514773]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767866E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 157.42857142857144, "minX": 1.58767794E12, "maxY": 2287.30867052023, "series": [{"data": [[1.587678E12, 2208.4361334867676], [1.58767842E12, 1996.548559231591], [1.58767806E12, 1633.138203356364], [1.58767824E12, 1514.9030754892804], [1.58767854E12, 1834.4430641821923], [1.58767794E12, 277.8023648648648], [1.58767848E12, 1617.1038834951441], [1.5876783E12, 1668.2003988035865], [1.58767818E12, 1573.974975938401], [1.5876786E12, 1855.156549520766], [1.58767836E12, 1843.175236096538], [1.58767812E12, 2121.765227021042], [1.58767866E12, 438.84333821376305]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.587678E12, 157.42857142857144], [1.58767794E12, 159.84905660377362]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.587678E12, 2287.30867052023], [1.58767842E12, 1981.3799359658499], [1.58767806E12, 1673.1428571428573], [1.58767824E12, 1509.3226716839138], [1.58767854E12, 1830.7965056526218], [1.58767794E12, 313.018779342723], [1.58767848E12, 1629.3436893203886], [1.5876783E12, 1668.7544554455471], [1.58767818E12, 1595.248076923076], [1.5876786E12, 1875.598049837485], [1.58767836E12, 1919.660695468917], [1.58767812E12, 2143.740618101547], [1.58767866E12, 423.20528771384215]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767866E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.1332357247437774, "minX": 1.58767794E12, "maxY": 1.0849056603773577, "series": [{"data": [[1.587678E12, 0.514384349827388], [1.58767842E12, 0.3874066168623267], [1.58767806E12, 0.4363277393879567], [1.58767824E12, 0.3774464119291712], [1.58767854E12, 0.3819875776397518], [1.58767794E12, 0.16216216216216212], [1.58767848E12, 0.3786407766990294], [1.5876783E12, 0.3998005982053839], [1.58767818E12, 0.3782483156881618], [1.5876786E12, 0.3887113951011712], [1.58767836E12, 0.3798530954879329], [1.58767812E12, 0.4983388704318933], [1.58767866E12, 0.1332357247437774]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.587678E12, 0.7142857142857143], [1.58767794E12, 1.0849056603773577]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.587678E12, 0.5699421965317917], [1.58767842E12, 0.44823906083244414], [1.58767806E12, 0.5332681017612534], [1.58767824E12, 0.41862652869237976], [1.58767854E12, 0.47790339157245637], [1.58767794E12, 0.6056338028169014], [1.58767848E12, 0.4300970873786408], [1.5876783E12, 0.4267326732673267], [1.58767818E12, 0.4711538461538463], [1.5876786E12, 0.4366197183098591], [1.58767836E12, 0.4046364594309798], [1.58767812E12, 0.4701986754966887], [1.58767866E12, 0.4136858475894246]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767866E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.58767794E12, "maxY": 6859.0, "series": [{"data": [[1.587678E12, 6859.0], [1.58767842E12, 5558.0], [1.58767806E12, 4912.0], [1.58767824E12, 4370.0], [1.58767854E12, 5620.0], [1.58767794E12, 4381.0], [1.58767848E12, 5593.0], [1.5876783E12, 5182.0], [1.58767818E12, 4153.0], [1.5876786E12, 5213.0], [1.58767836E12, 5935.0], [1.58767812E12, 6099.0], [1.58767866E12, 4383.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.587678E12, 37.0], [1.58767842E12, 83.0], [1.58767806E12, 44.0], [1.58767824E12, 23.0], [1.58767854E12, 45.0], [1.58767794E12, 13.0], [1.58767848E12, 111.0], [1.5876783E12, 87.0], [1.58767818E12, 46.0], [1.5876786E12, 29.0], [1.58767836E12, 39.0], [1.58767812E12, 133.0], [1.58767866E12, 13.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.587678E12, 3666.4000000000005], [1.58767842E12, 3421.0], [1.58767806E12, 2837.8], [1.58767824E12, 2403.8999999999996], [1.58767854E12, 3452.5999999999995], [1.58767794E12, 1376.200000000001], [1.58767848E12, 2643.8], [1.5876783E12, 2755.6000000000004], [1.58767818E12, 2566.0], [1.5876786E12, 3033.5], [1.58767836E12, 3005.600000000001], [1.58767812E12, 3371.1000000000013], [1.58767866E12, 1549.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.587678E12, 5451.21], [1.58767842E12, 4430.600000000001], [1.58767806E12, 4204.399999999999], [1.58767824E12, 3287.3699999999985], [1.58767854E12, 4986.559999999996], [1.58767794E12, 2744.0], [1.58767848E12, 3794.8200000000024], [1.5876783E12, 4284.0], [1.58767818E12, 3391.999999999999], [1.5876786E12, 4161.549999999998], [1.58767836E12, 5043.91], [1.58767812E12, 4986.209999999999], [1.58767866E12, 2861.11]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.587678E12, 4062.749999999999], [1.58767842E12, 3831.0], [1.58767806E12, 3309.2], [1.58767824E12, 2673.0], [1.58767854E12, 4076.3999999999996], [1.58767794E12, 2027.2999999999997], [1.58767848E12, 2946.3], [1.5876783E12, 3179.7999999999993], [1.58767818E12, 2815.0], [1.5876786E12, 3402.0], [1.58767836E12, 3920.5499999999997], [1.58767812E12, 3868.3999999999996], [1.58767866E12, 1983.9499999999996]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767866E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 25.5, "minX": 1.0, "maxY": 2673.5, "series": [{"data": [[2.0, 95.5], [4.0, 32.0], [5.0, 25.5], [6.0, 37.5], [7.0, 2235.0], [8.0, 46.0], [9.0, 29.0], [10.0, 936.5], [11.0, 602.0], [12.0, 36.0], [13.0, 1815.0], [14.0, 591.5], [15.0, 251.0], [16.0, 1740.5], [17.0, 1583.0], [18.0, 1486.0], [19.0, 1196.0], [20.0, 1823.5], [21.0, 1714.5], [22.0, 1682.0], [23.0, 1514.5], [24.0, 1747.0], [25.0, 1796.0], [26.0, 1720.0], [27.0, 1722.5], [28.0, 1909.5], [29.0, 1577.5], [30.0, 1529.5], [31.0, 1559.0], [32.0, 1642.0], [33.0, 1673.0], [35.0, 1602.5], [34.0, 1694.0], [37.0, 1463.5], [36.0, 1537.5], [39.0, 1561.0], [38.0, 1670.5], [40.0, 1556.0], [41.0, 1298.0], [43.0, 1378.0], [42.0, 1236.5], [44.0, 1437.5], [45.0, 1426.0], [46.0, 1579.0], [47.0, 1398.5], [49.0, 1031.0], [48.0, 1658.5], [50.0, 988.0], [51.0, 1439.0], [52.0, 526.0], [54.0, 1663.5], [55.0, 1344.0], [56.0, 862.0], [58.0, 1569.0], [61.0, 965.0], [65.0, 1676.5], [68.0, 1641.0], [1.0, 112.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 1665.0], [65.0, 1767.0], [34.0, 1496.0], [43.0, 1063.0], [46.0, 1622.0], [49.0, 833.0], [56.0, 2673.5], [58.0, 1546.0], [61.0, 789.5], [31.0, 1987.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 68.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 25.5, "minX": 1.0, "maxY": 2673.5, "series": [{"data": [[2.0, 95.0], [4.0, 32.0], [5.0, 25.5], [6.0, 37.0], [7.0, 2235.0], [8.0, 46.0], [9.0, 29.0], [10.0, 936.0], [11.0, 601.5], [12.0, 35.5], [13.0, 1815.0], [14.0, 590.5], [15.0, 251.0], [16.0, 1738.5], [17.0, 1583.0], [18.0, 1485.5], [19.0, 1196.0], [20.0, 1823.5], [21.0, 1714.5], [22.0, 1681.5], [23.0, 1514.5], [24.0, 1744.5], [25.0, 1796.0], [26.0, 1720.0], [27.0, 1722.0], [28.0, 1909.5], [29.0, 1577.5], [30.0, 1529.0], [31.0, 1559.0], [32.0, 1642.0], [33.0, 1673.0], [35.0, 1602.5], [34.0, 1694.0], [37.0, 1463.5], [36.0, 1537.0], [39.0, 1561.0], [38.0, 1670.5], [40.0, 1556.0], [41.0, 1298.0], [43.0, 1378.0], [42.0, 1236.5], [44.0, 1437.5], [45.0, 1426.0], [46.0, 1578.0], [47.0, 1398.0], [49.0, 1031.0], [48.0, 1658.0], [50.0, 988.0], [51.0, 1439.0], [52.0, 526.0], [54.0, 1663.5], [55.0, 1344.0], [56.0, 862.0], [58.0, 1569.0], [61.0, 965.0], [65.0, 1676.0], [68.0, 1640.5], [1.0, 111.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 1665.0], [65.0, 1767.0], [34.0, 1496.0], [43.0, 1063.0], [46.0, 1622.0], [49.0, 833.0], [56.0, 2673.5], [58.0, 1546.0], [61.0, 789.5], [31.0, 1987.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 68.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 21.233333333333334, "minX": 1.58767794E12, "maxY": 35.416666666666664, "series": [{"data": [[1.587678E12, 29.166666666666668], [1.58767842E12, 31.133333333333333], [1.58767806E12, 33.88333333333333], [1.58767824E12, 35.416666666666664], [1.58767854E12, 32.5], [1.58767794E12, 23.283333333333335], [1.58767848E12, 34.31666666666667], [1.5876783E12, 33.78333333333333], [1.58767818E12, 34.63333333333333], [1.5876786E12, 30.75], [1.58767836E12, 31.8], [1.58767812E12, 30.1], [1.58767866E12, 21.233333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767866E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.58767794E12, "maxY": 35.1, "series": [{"data": [[1.587678E12, 28.3], [1.58767842E12, 30.983333333333334], [1.58767806E12, 33.916666666666664], [1.58767824E12, 35.1], [1.58767854E12, 31.85], [1.58767794E12, 22.283333333333335], [1.58767848E12, 33.88333333333333], [1.5876783E12, 33.166666666666664], [1.58767818E12, 34.65], [1.5876786E12, 31.033333333333335], [1.58767836E12, 31.7], [1.58767812E12, 29.8], [1.58767866E12, 22.1]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.587678E12, 0.8333333333333334], [1.5876783E12, 0.38333333333333336], [1.58767842E12, 0.25], [1.58767824E12, 0.5], [1.58767854E12, 0.4666666666666667], [1.58767812E12, 0.35], [1.58767848E12, 0.45]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767866E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.58767794E12, "maxY": 17.583333333333332, "series": [{"data": [[1.587678E12, 0.23333333333333334], [1.58767794E12, 1.7666666666666666]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.587678E12, 14.033333333333333], [1.58767842E12, 15.5], [1.58767806E12, 16.883333333333333], [1.58767824E12, 17.583333333333332], [1.58767854E12, 15.866666666666667], [1.58767794E12, 9.866666666666667], [1.58767848E12, 16.916666666666668], [1.5876783E12, 16.566666666666666], [1.58767818E12, 17.316666666666666], [1.5876786E12, 15.65], [1.58767836E12, 15.883333333333333], [1.58767812E12, 14.866666666666667], [1.58767866E12, 11.383333333333333]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.587678E12, 0.45], [1.5876783E12, 0.15], [1.58767842E12, 0.11666666666666667], [1.58767824E12, 0.3], [1.58767854E12, 0.23333333333333334], [1.58767812E12, 0.18333333333333332], [1.58767848E12, 0.25]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.587678E12, 14.033333333333333], [1.58767842E12, 15.483333333333333], [1.58767806E12, 17.033333333333335], [1.58767824E12, 17.516666666666666], [1.58767854E12, 15.983333333333333], [1.58767794E12, 10.65], [1.58767848E12, 16.966666666666665], [1.5876783E12, 16.6], [1.58767818E12, 17.333333333333332], [1.5876786E12, 15.383333333333333], [1.58767836E12, 15.816666666666666], [1.58767812E12, 14.933333333333334], [1.58767866E12, 10.716666666666667]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.587678E12, 0.38333333333333336], [1.5876783E12, 0.23333333333333334], [1.58767842E12, 0.13333333333333333], [1.58767824E12, 0.2], [1.58767854E12, 0.23333333333333334], [1.58767812E12, 0.16666666666666666], [1.58767848E12, 0.2]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767866E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.58767794E12, "maxY": 35.1, "series": [{"data": [[1.587678E12, 28.3], [1.58767842E12, 30.983333333333334], [1.58767806E12, 33.916666666666664], [1.58767824E12, 35.1], [1.58767854E12, 31.85], [1.58767794E12, 22.283333333333335], [1.58767848E12, 33.88333333333333], [1.5876783E12, 33.166666666666664], [1.58767818E12, 34.65], [1.5876786E12, 31.033333333333335], [1.58767836E12, 31.7], [1.58767812E12, 29.8], [1.58767866E12, 22.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.587678E12, 0.8333333333333334], [1.5876783E12, 0.38333333333333336], [1.58767842E12, 0.25], [1.58767824E12, 0.5], [1.58767854E12, 0.4666666666666667], [1.58767812E12, 0.35], [1.58767848E12, 0.45]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767866E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

