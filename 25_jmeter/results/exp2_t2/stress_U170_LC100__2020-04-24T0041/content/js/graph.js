/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 9583.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 2.0], [14.5, 2.0], [14.6, 2.0], [14.7, 2.0], [14.8, 2.0], [14.9, 2.0], [15.0, 2.0], [15.1, 2.0], [15.2, 2.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 2.0], [17.7, 2.0], [17.8, 2.0], [17.9, 2.0], [18.0, 2.0], [18.1, 2.0], [18.2, 2.0], [18.3, 2.0], [18.4, 2.0], [18.5, 2.0], [18.6, 2.0], [18.7, 2.0], [18.8, 2.0], [18.9, 2.0], [19.0, 2.0], [19.1, 2.0], [19.2, 2.0], [19.3, 2.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 2.0], [20.0, 2.0], [20.1, 2.0], [20.2, 2.0], [20.3, 2.0], [20.4, 2.0], [20.5, 2.0], [20.6, 2.0], [20.7, 2.0], [20.8, 2.0], [20.9, 2.0], [21.0, 2.0], [21.1, 2.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 2.0], [21.6, 2.0], [21.7, 2.0], [21.8, 2.0], [21.9, 2.0], [22.0, 2.0], [22.1, 2.0], [22.2, 3.0], [22.3, 3.0], [22.4, 3.0], [22.5, 3.0], [22.6, 3.0], [22.7, 3.0], [22.8, 3.0], [22.9, 3.0], [23.0, 3.0], [23.1, 3.0], [23.2, 3.0], [23.3, 3.0], [23.4, 3.0], [23.5, 3.0], [23.6, 3.0], [23.7, 3.0], [23.8, 3.0], [23.9, 3.0], [24.0, 3.0], [24.1, 3.0], [24.2, 3.0], [24.3, 3.0], [24.4, 4.0], [24.5, 4.0], [24.6, 4.0], [24.7, 4.0], [24.8, 5.0], [24.9, 5.0], [25.0, 6.0], [25.1, 14.0], [25.2, 19.0], [25.3, 20.0], [25.4, 21.0], [25.5, 22.0], [25.6, 23.0], [25.7, 25.0], [25.8, 25.0], [25.9, 26.0], [26.0, 27.0], [26.1, 28.0], [26.2, 28.0], [26.3, 29.0], [26.4, 30.0], [26.5, 31.0], [26.6, 32.0], [26.7, 33.0], [26.8, 33.0], [26.9, 34.0], [27.0, 36.0], [27.1, 37.0], [27.2, 38.0], [27.3, 39.0], [27.4, 40.0], [27.5, 42.0], [27.6, 44.0], [27.7, 48.0], [27.8, 50.0], [27.9, 55.0], [28.0, 63.0], [28.1, 74.0], [28.2, 86.0], [28.3, 107.0], [28.4, 140.0], [28.5, 164.0], [28.6, 186.0], [28.7, 208.0], [28.8, 229.0], [28.9, 252.0], [29.0, 268.0], [29.1, 286.0], [29.2, 299.0], [29.3, 309.0], [29.4, 323.0], [29.5, 338.0], [29.6, 349.0], [29.7, 360.0], [29.8, 369.0], [29.9, 379.0], [30.0, 393.0], [30.1, 406.0], [30.2, 414.0], [30.3, 428.0], [30.4, 437.0], [30.5, 449.0], [30.6, 460.0], [30.7, 470.0], [30.8, 477.0], [30.9, 485.0], [31.0, 496.0], [31.1, 508.0], [31.2, 516.0], [31.3, 524.0], [31.4, 535.0], [31.5, 542.0], [31.6, 550.0], [31.7, 560.0], [31.8, 570.0], [31.9, 576.0], [32.0, 584.0], [32.1, 592.0], [32.2, 599.0], [32.3, 608.0], [32.4, 616.0], [32.5, 625.0], [32.6, 633.0], [32.7, 638.0], [32.8, 648.0], [32.9, 655.0], [33.0, 665.0], [33.1, 671.0], [33.2, 677.0], [33.3, 688.0], [33.4, 698.0], [33.5, 704.0], [33.6, 714.0], [33.7, 721.0], [33.8, 727.0], [33.9, 733.0], [34.0, 741.0], [34.1, 748.0], [34.2, 755.0], [34.3, 762.0], [34.4, 766.0], [34.5, 774.0], [34.6, 782.0], [34.7, 790.0], [34.8, 795.0], [34.9, 804.0], [35.0, 808.0], [35.1, 815.0], [35.2, 822.0], [35.3, 828.0], [35.4, 833.0], [35.5, 840.0], [35.6, 846.0], [35.7, 851.0], [35.8, 857.0], [35.9, 864.0], [36.0, 868.0], [36.1, 875.0], [36.2, 882.0], [36.3, 890.0], [36.4, 898.0], [36.5, 903.0], [36.6, 908.0], [36.7, 915.0], [36.8, 923.0], [36.9, 932.0], [37.0, 940.0], [37.1, 945.0], [37.2, 953.0], [37.3, 960.0], [37.4, 966.0], [37.5, 972.0], [37.6, 978.0], [37.7, 985.0], [37.8, 993.0], [37.9, 999.0], [38.0, 1007.0], [38.1, 1017.0], [38.2, 1022.0], [38.3, 1027.0], [38.4, 1034.0], [38.5, 1040.0], [38.6, 1045.0], [38.7, 1052.0], [38.8, 1060.0], [38.9, 1065.0], [39.0, 1072.0], [39.1, 1080.0], [39.2, 1086.0], [39.3, 1095.0], [39.4, 1101.0], [39.5, 1108.0], [39.6, 1117.0], [39.7, 1121.0], [39.8, 1127.0], [39.9, 1133.0], [40.0, 1139.0], [40.1, 1146.0], [40.2, 1153.0], [40.3, 1161.0], [40.4, 1168.0], [40.5, 1174.0], [40.6, 1185.0], [40.7, 1191.0], [40.8, 1200.0], [40.9, 1210.0], [41.0, 1217.0], [41.1, 1223.0], [41.2, 1232.0], [41.3, 1240.0], [41.4, 1248.0], [41.5, 1256.0], [41.6, 1263.0], [41.7, 1269.0], [41.8, 1275.0], [41.9, 1284.0], [42.0, 1294.0], [42.1, 1301.0], [42.2, 1305.0], [42.3, 1313.0], [42.4, 1320.0], [42.5, 1327.0], [42.6, 1333.0], [42.7, 1338.0], [42.8, 1343.0], [42.9, 1349.0], [43.0, 1359.0], [43.1, 1366.0], [43.2, 1371.0], [43.3, 1378.0], [43.4, 1385.0], [43.5, 1391.0], [43.6, 1402.0], [43.7, 1408.0], [43.8, 1415.0], [43.9, 1424.0], [44.0, 1429.0], [44.1, 1434.0], [44.2, 1438.0], [44.3, 1444.0], [44.4, 1454.0], [44.5, 1461.0], [44.6, 1469.0], [44.7, 1477.0], [44.8, 1489.0], [44.9, 1493.0], [45.0, 1500.0], [45.1, 1509.0], [45.2, 1514.0], [45.3, 1520.0], [45.4, 1527.0], [45.5, 1534.0], [45.6, 1543.0], [45.7, 1549.0], [45.8, 1556.0], [45.9, 1563.0], [46.0, 1570.0], [46.1, 1579.0], [46.2, 1586.0], [46.3, 1592.0], [46.4, 1604.0], [46.5, 1610.0], [46.6, 1618.0], [46.7, 1623.0], [46.8, 1629.0], [46.9, 1638.0], [47.0, 1645.0], [47.1, 1654.0], [47.2, 1660.0], [47.3, 1668.0], [47.4, 1675.0], [47.5, 1684.0], [47.6, 1694.0], [47.7, 1700.0], [47.8, 1706.0], [47.9, 1717.0], [48.0, 1726.0], [48.1, 1736.0], [48.2, 1744.0], [48.3, 1753.0], [48.4, 1760.0], [48.5, 1767.0], [48.6, 1775.0], [48.7, 1784.0], [48.8, 1798.0], [48.9, 1805.0], [49.0, 1816.0], [49.1, 1822.0], [49.2, 1831.0], [49.3, 1839.0], [49.4, 1848.0], [49.5, 1861.0], [49.6, 1870.0], [49.7, 1877.0], [49.8, 1884.0], [49.9, 1894.0], [50.0, 1903.0], [50.1, 1913.0], [50.2, 1922.0], [50.3, 1932.0], [50.4, 1943.0], [50.5, 1950.0], [50.6, 1959.0], [50.7, 1967.0], [50.8, 1976.0], [50.9, 1987.0], [51.0, 1995.0], [51.1, 2003.0], [51.2, 2014.0], [51.3, 2022.0], [51.4, 2030.0], [51.5, 2041.0], [51.6, 2049.0], [51.7, 2054.0], [51.8, 2060.0], [51.9, 2067.0], [52.0, 2073.0], [52.1, 2082.0], [52.2, 2092.0], [52.3, 2101.0], [52.4, 2107.0], [52.5, 2120.0], [52.6, 2131.0], [52.7, 2139.0], [52.8, 2148.0], [52.9, 2155.0], [53.0, 2160.0], [53.1, 2167.0], [53.2, 2175.0], [53.3, 2183.0], [53.4, 2190.0], [53.5, 2202.0], [53.6, 2210.0], [53.7, 2216.0], [53.8, 2221.0], [53.9, 2227.0], [54.0, 2234.0], [54.1, 2240.0], [54.2, 2247.0], [54.3, 2252.0], [54.4, 2257.0], [54.5, 2263.0], [54.6, 2271.0], [54.7, 2276.0], [54.8, 2283.0], [54.9, 2291.0], [55.0, 2301.0], [55.1, 2309.0], [55.2, 2315.0], [55.3, 2321.0], [55.4, 2328.0], [55.5, 2334.0], [55.6, 2340.0], [55.7, 2346.0], [55.8, 2353.0], [55.9, 2360.0], [56.0, 2364.0], [56.1, 2370.0], [56.2, 2377.0], [56.3, 2385.0], [56.4, 2390.0], [56.5, 2396.0], [56.6, 2402.0], [56.7, 2411.0], [56.8, 2417.0], [56.9, 2424.0], [57.0, 2430.0], [57.1, 2437.0], [57.2, 2443.0], [57.3, 2447.0], [57.4, 2454.0], [57.5, 2458.0], [57.6, 2462.0], [57.7, 2470.0], [57.8, 2475.0], [57.9, 2480.0], [58.0, 2487.0], [58.1, 2495.0], [58.2, 2500.0], [58.3, 2504.0], [58.4, 2509.0], [58.5, 2514.0], [58.6, 2520.0], [58.7, 2526.0], [58.8, 2535.0], [58.9, 2539.0], [59.0, 2544.0], [59.1, 2550.0], [59.2, 2556.0], [59.3, 2559.0], [59.4, 2567.0], [59.5, 2576.0], [59.6, 2581.0], [59.7, 2585.0], [59.8, 2590.0], [59.9, 2594.0], [60.0, 2599.0], [60.1, 2604.0], [60.2, 2608.0], [60.3, 2613.0], [60.4, 2619.0], [60.5, 2623.0], [60.6, 2628.0], [60.7, 2634.0], [60.8, 2639.0], [60.9, 2646.0], [61.0, 2649.0], [61.1, 2654.0], [61.2, 2656.0], [61.3, 2662.0], [61.4, 2666.0], [61.5, 2672.0], [61.6, 2678.0], [61.7, 2682.0], [61.8, 2686.0], [61.9, 2689.0], [62.0, 2693.0], [62.1, 2697.0], [62.2, 2701.0], [62.3, 2706.0], [62.4, 2710.0], [62.5, 2716.0], [62.6, 2721.0], [62.7, 2727.0], [62.8, 2732.0], [62.9, 2735.0], [63.0, 2738.0], [63.1, 2742.0], [63.2, 2746.0], [63.3, 2748.0], [63.4, 2753.0], [63.5, 2757.0], [63.6, 2762.0], [63.7, 2767.0], [63.8, 2771.0], [63.9, 2774.0], [64.0, 2777.0], [64.1, 2781.0], [64.2, 2787.0], [64.3, 2791.0], [64.4, 2797.0], [64.5, 2801.0], [64.6, 2805.0], [64.7, 2809.0], [64.8, 2815.0], [64.9, 2820.0], [65.0, 2826.0], [65.1, 2830.0], [65.2, 2833.0], [65.3, 2838.0], [65.4, 2842.0], [65.5, 2844.0], [65.6, 2847.0], [65.7, 2852.0], [65.8, 2857.0], [65.9, 2865.0], [66.0, 2869.0], [66.1, 2873.0], [66.2, 2878.0], [66.3, 2883.0], [66.4, 2885.0], [66.5, 2889.0], [66.6, 2892.0], [66.7, 2897.0], [66.8, 2899.0], [66.9, 2904.0], [67.0, 2908.0], [67.1, 2913.0], [67.2, 2918.0], [67.3, 2923.0], [67.4, 2926.0], [67.5, 2932.0], [67.6, 2935.0], [67.7, 2939.0], [67.8, 2942.0], [67.9, 2945.0], [68.0, 2949.0], [68.1, 2953.0], [68.2, 2957.0], [68.3, 2960.0], [68.4, 2964.0], [68.5, 2969.0], [68.6, 2972.0], [68.7, 2976.0], [68.8, 2981.0], [68.9, 2987.0], [69.0, 2991.0], [69.1, 2994.0], [69.2, 2998.0], [69.3, 3000.0], [69.4, 3003.0], [69.5, 3009.0], [69.6, 3012.0], [69.7, 3016.0], [69.8, 3020.0], [69.9, 3023.0], [70.0, 3029.0], [70.1, 3034.0], [70.2, 3039.0], [70.3, 3043.0], [70.4, 3046.0], [70.5, 3050.0], [70.6, 3053.0], [70.7, 3058.0], [70.8, 3061.0], [70.9, 3066.0], [71.0, 3071.0], [71.1, 3074.0], [71.2, 3077.0], [71.3, 3080.0], [71.4, 3084.0], [71.5, 3087.0], [71.6, 3092.0], [71.7, 3094.0], [71.8, 3097.0], [71.9, 3099.0], [72.0, 3103.0], [72.1, 3107.0], [72.2, 3112.0], [72.3, 3116.0], [72.4, 3119.0], [72.5, 3122.0], [72.6, 3125.0], [72.7, 3129.0], [72.8, 3135.0], [72.9, 3139.0], [73.0, 3144.0], [73.1, 3148.0], [73.2, 3150.0], [73.3, 3155.0], [73.4, 3159.0], [73.5, 3164.0], [73.6, 3168.0], [73.7, 3172.0], [73.8, 3177.0], [73.9, 3183.0], [74.0, 3186.0], [74.1, 3188.0], [74.2, 3192.0], [74.3, 3195.0], [74.4, 3200.0], [74.5, 3204.0], [74.6, 3207.0], [74.7, 3208.0], [74.8, 3213.0], [74.9, 3217.0], [75.0, 3221.0], [75.1, 3226.0], [75.2, 3231.0], [75.3, 3234.0], [75.4, 3238.0], [75.5, 3241.0], [75.6, 3246.0], [75.7, 3250.0], [75.8, 3253.0], [75.9, 3258.0], [76.0, 3263.0], [76.1, 3268.0], [76.2, 3273.0], [76.3, 3277.0], [76.4, 3279.0], [76.5, 3285.0], [76.6, 3290.0], [76.7, 3294.0], [76.8, 3299.0], [76.9, 3304.0], [77.0, 3308.0], [77.1, 3315.0], [77.2, 3318.0], [77.3, 3322.0], [77.4, 3326.0], [77.5, 3330.0], [77.6, 3334.0], [77.7, 3340.0], [77.8, 3345.0], [77.9, 3349.0], [78.0, 3353.0], [78.1, 3359.0], [78.2, 3364.0], [78.3, 3369.0], [78.4, 3376.0], [78.5, 3382.0], [78.6, 3388.0], [78.7, 3392.0], [78.8, 3396.0], [78.9, 3402.0], [79.0, 3408.0], [79.1, 3413.0], [79.2, 3418.0], [79.3, 3423.0], [79.4, 3427.0], [79.5, 3433.0], [79.6, 3441.0], [79.7, 3445.0], [79.8, 3449.0], [79.9, 3455.0], [80.0, 3458.0], [80.1, 3463.0], [80.2, 3470.0], [80.3, 3476.0], [80.4, 3483.0], [80.5, 3489.0], [80.6, 3494.0], [80.7, 3499.0], [80.8, 3504.0], [80.9, 3513.0], [81.0, 3518.0], [81.1, 3526.0], [81.2, 3533.0], [81.3, 3543.0], [81.4, 3548.0], [81.5, 3554.0], [81.6, 3560.0], [81.7, 3569.0], [81.8, 3577.0], [81.9, 3584.0], [82.0, 3596.0], [82.1, 3601.0], [82.2, 3606.0], [82.3, 3616.0], [82.4, 3623.0], [82.5, 3632.0], [82.6, 3640.0], [82.7, 3651.0], [82.8, 3659.0], [82.9, 3669.0], [83.0, 3679.0], [83.1, 3685.0], [83.2, 3692.0], [83.3, 3703.0], [83.4, 3709.0], [83.5, 3715.0], [83.6, 3724.0], [83.7, 3735.0], [83.8, 3743.0], [83.9, 3751.0], [84.0, 3761.0], [84.1, 3769.0], [84.2, 3775.0], [84.3, 3790.0], [84.4, 3799.0], [84.5, 3808.0], [84.6, 3814.0], [84.7, 3823.0], [84.8, 3827.0], [84.9, 3836.0], [85.0, 3842.0], [85.1, 3851.0], [85.2, 3860.0], [85.3, 3871.0], [85.4, 3882.0], [85.5, 3893.0], [85.6, 3904.0], [85.7, 3912.0], [85.8, 3927.0], [85.9, 3934.0], [86.0, 3946.0], [86.1, 3956.0], [86.2, 3970.0], [86.3, 3982.0], [86.4, 3991.0], [86.5, 4002.0], [86.6, 4023.0], [86.7, 4034.0], [86.8, 4042.0], [86.9, 4050.0], [87.0, 4062.0], [87.1, 4072.0], [87.2, 4084.0], [87.3, 4094.0], [87.4, 4106.0], [87.5, 4113.0], [87.6, 4126.0], [87.7, 4137.0], [87.8, 4147.0], [87.9, 4158.0], [88.0, 4172.0], [88.1, 4183.0], [88.2, 4194.0], [88.3, 4207.0], [88.4, 4222.0], [88.5, 4237.0], [88.6, 4251.0], [88.7, 4264.0], [88.8, 4279.0], [88.9, 4287.0], [89.0, 4297.0], [89.1, 4307.0], [89.2, 4315.0], [89.3, 4324.0], [89.4, 4335.0], [89.5, 4353.0], [89.6, 4366.0], [89.7, 4381.0], [89.8, 4397.0], [89.9, 4408.0], [90.0, 4424.0], [90.1, 4433.0], [90.2, 4445.0], [90.3, 4458.0], [90.4, 4469.0], [90.5, 4483.0], [90.6, 4495.0], [90.7, 4511.0], [90.8, 4522.0], [90.9, 4532.0], [91.0, 4543.0], [91.1, 4555.0], [91.2, 4571.0], [91.3, 4583.0], [91.4, 4600.0], [91.5, 4609.0], [91.6, 4620.0], [91.7, 4631.0], [91.8, 4645.0], [91.9, 4657.0], [92.0, 4673.0], [92.1, 4691.0], [92.2, 4709.0], [92.3, 4727.0], [92.4, 4740.0], [92.5, 4758.0], [92.6, 4765.0], [92.7, 4781.0], [92.8, 4796.0], [92.9, 4808.0], [93.0, 4822.0], [93.1, 4836.0], [93.2, 4848.0], [93.3, 4865.0], [93.4, 4882.0], [93.5, 4899.0], [93.6, 4914.0], [93.7, 4927.0], [93.8, 4937.0], [93.9, 4962.0], [94.0, 4977.0], [94.1, 4991.0], [94.2, 5010.0], [94.3, 5028.0], [94.4, 5051.0], [94.5, 5069.0], [94.6, 5082.0], [94.7, 5095.0], [94.8, 5107.0], [94.9, 5121.0], [95.0, 5141.0], [95.1, 5162.0], [95.2, 5182.0], [95.3, 5209.0], [95.4, 5238.0], [95.5, 5258.0], [95.6, 5276.0], [95.7, 5304.0], [95.8, 5322.0], [95.9, 5343.0], [96.0, 5367.0], [96.1, 5391.0], [96.2, 5416.0], [96.3, 5441.0], [96.4, 5467.0], [96.5, 5491.0], [96.6, 5516.0], [96.7, 5539.0], [96.8, 5565.0], [96.9, 5598.0], [97.0, 5625.0], [97.1, 5670.0], [97.2, 5699.0], [97.3, 5724.0], [97.4, 5751.0], [97.5, 5771.0], [97.6, 5800.0], [97.7, 5831.0], [97.8, 5864.0], [97.9, 5899.0], [98.0, 5928.0], [98.1, 5949.0], [98.2, 5993.0], [98.3, 6027.0], [98.4, 6064.0], [98.5, 6108.0], [98.6, 6143.0], [98.7, 6190.0], [98.8, 6245.0], [98.9, 6289.0], [99.0, 6373.0], [99.1, 6442.0], [99.2, 6528.0], [99.3, 6575.0], [99.4, 6623.0], [99.5, 6778.0], [99.6, 6934.0], [99.7, 7179.0], [99.8, 7461.0], [99.9, 8027.0], [100.0, 9521.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 143.0], [0.1, 143.0], [0.2, 143.0], [0.3, 143.0], [0.4, 143.0], [0.5, 143.0], [0.6, 143.0], [0.7, 143.0], [0.8, 143.0], [0.9, 143.0], [1.0, 143.0], [1.1, 143.0], [1.2, 144.0], [1.3, 144.0], [1.4, 144.0], [1.5, 144.0], [1.6, 144.0], [1.7, 144.0], [1.8, 144.0], [1.9, 144.0], [2.0, 144.0], [2.1, 144.0], [2.2, 144.0], [2.3, 144.0], [2.4, 144.0], [2.5, 144.0], [2.6, 144.0], [2.7, 144.0], [2.8, 144.0], [2.9, 144.0], [3.0, 144.0], [3.1, 144.0], [3.2, 144.0], [3.3, 144.0], [3.4, 144.0], [3.5, 144.0], [3.6, 144.0], [3.7, 144.0], [3.8, 144.0], [3.9, 144.0], [4.0, 144.0], [4.1, 144.0], [4.2, 145.0], [4.3, 145.0], [4.4, 145.0], [4.5, 145.0], [4.6, 145.0], [4.7, 145.0], [4.8, 145.0], [4.9, 145.0], [5.0, 145.0], [5.1, 145.0], [5.2, 145.0], [5.3, 146.0], [5.4, 146.0], [5.5, 146.0], [5.6, 146.0], [5.7, 146.0], [5.8, 146.0], [5.9, 146.0], [6.0, 146.0], [6.1, 146.0], [6.2, 146.0], [6.3, 146.0], [6.4, 146.0], [6.5, 146.0], [6.6, 146.0], [6.7, 146.0], [6.8, 146.0], [6.9, 146.0], [7.0, 146.0], [7.1, 146.0], [7.2, 146.0], [7.3, 146.0], [7.4, 146.0], [7.5, 146.0], [7.6, 146.0], [7.7, 146.0], [7.8, 146.0], [7.9, 146.0], [8.0, 146.0], [8.1, 146.0], [8.2, 146.0], [8.3, 146.0], [8.4, 146.0], [8.5, 146.0], [8.6, 146.0], [8.7, 146.0], [8.8, 146.0], [8.9, 147.0], [9.0, 147.0], [9.1, 147.0], [9.2, 147.0], [9.3, 147.0], [9.4, 147.0], [9.5, 147.0], [9.6, 147.0], [9.7, 147.0], [9.8, 147.0], [9.9, 147.0], [10.0, 147.0], [10.1, 147.0], [10.2, 147.0], [10.3, 147.0], [10.4, 147.0], [10.5, 147.0], [10.6, 147.0], [10.7, 147.0], [10.8, 147.0], [10.9, 147.0], [11.0, 147.0], [11.1, 147.0], [11.2, 147.0], [11.3, 147.0], [11.4, 147.0], [11.5, 147.0], [11.6, 147.0], [11.7, 147.0], [11.8, 147.0], [11.9, 147.0], [12.0, 147.0], [12.1, 147.0], [12.2, 147.0], [12.3, 147.0], [12.4, 147.0], [12.5, 147.0], [12.6, 147.0], [12.7, 147.0], [12.8, 147.0], [12.9, 147.0], [13.0, 147.0], [13.1, 147.0], [13.2, 147.0], [13.3, 147.0], [13.4, 147.0], [13.5, 147.0], [13.6, 147.0], [13.7, 147.0], [13.8, 147.0], [13.9, 147.0], [14.0, 147.0], [14.1, 147.0], [14.2, 147.0], [14.3, 147.0], [14.4, 147.0], [14.5, 147.0], [14.6, 147.0], [14.7, 147.0], [14.8, 147.0], [14.9, 147.0], [15.0, 147.0], [15.1, 147.0], [15.2, 147.0], [15.3, 147.0], [15.4, 147.0], [15.5, 147.0], [15.6, 147.0], [15.7, 147.0], [15.8, 147.0], [15.9, 147.0], [16.0, 147.0], [16.1, 147.0], [16.2, 147.0], [16.3, 147.0], [16.4, 147.0], [16.5, 147.0], [16.6, 147.0], [16.7, 147.0], [16.8, 147.0], [16.9, 147.0], [17.0, 147.0], [17.1, 148.0], [17.2, 148.0], [17.3, 148.0], [17.4, 148.0], [17.5, 148.0], [17.6, 148.0], [17.7, 148.0], [17.8, 148.0], [17.9, 148.0], [18.0, 148.0], [18.1, 148.0], [18.2, 148.0], [18.3, 148.0], [18.4, 148.0], [18.5, 148.0], [18.6, 148.0], [18.7, 148.0], [18.8, 148.0], [18.9, 148.0], [19.0, 148.0], [19.1, 148.0], [19.2, 148.0], [19.3, 148.0], [19.4, 148.0], [19.5, 148.0], [19.6, 148.0], [19.7, 148.0], [19.8, 148.0], [19.9, 148.0], [20.0, 148.0], [20.1, 148.0], [20.2, 148.0], [20.3, 148.0], [20.4, 148.0], [20.5, 148.0], [20.6, 148.0], [20.7, 148.0], [20.8, 148.0], [20.9, 148.0], [21.0, 148.0], [21.1, 148.0], [21.2, 148.0], [21.3, 148.0], [21.4, 148.0], [21.5, 148.0], [21.6, 148.0], [21.7, 148.0], [21.8, 148.0], [21.9, 148.0], [22.0, 148.0], [22.1, 148.0], [22.2, 148.0], [22.3, 148.0], [22.4, 149.0], [22.5, 149.0], [22.6, 149.0], [22.7, 149.0], [22.8, 149.0], [22.9, 149.0], [23.0, 149.0], [23.1, 149.0], [23.2, 149.0], [23.3, 149.0], [23.4, 149.0], [23.5, 149.0], [23.6, 149.0], [23.7, 149.0], [23.8, 149.0], [23.9, 149.0], [24.0, 149.0], [24.1, 149.0], [24.2, 149.0], [24.3, 149.0], [24.4, 149.0], [24.5, 149.0], [24.6, 149.0], [24.7, 149.0], [24.8, 149.0], [24.9, 149.0], [25.0, 149.0], [25.1, 149.0], [25.2, 149.0], [25.3, 149.0], [25.4, 149.0], [25.5, 149.0], [25.6, 149.0], [25.7, 149.0], [25.8, 149.0], [25.9, 149.0], [26.0, 149.0], [26.1, 149.0], [26.2, 149.0], [26.3, 149.0], [26.4, 149.0], [26.5, 149.0], [26.6, 149.0], [26.7, 149.0], [26.8, 149.0], [26.9, 149.0], [27.0, 149.0], [27.1, 149.0], [27.2, 149.0], [27.3, 149.0], [27.4, 149.0], [27.5, 149.0], [27.6, 149.0], [27.7, 150.0], [27.8, 150.0], [27.9, 150.0], [28.0, 150.0], [28.1, 150.0], [28.2, 150.0], [28.3, 150.0], [28.4, 150.0], [28.5, 150.0], [28.6, 150.0], [28.7, 150.0], [28.8, 150.0], [28.9, 150.0], [29.0, 150.0], [29.1, 150.0], [29.2, 150.0], [29.3, 150.0], [29.4, 150.0], [29.5, 150.0], [29.6, 150.0], [29.7, 150.0], [29.8, 150.0], [29.9, 150.0], [30.0, 150.0], [30.1, 150.0], [30.2, 150.0], [30.3, 150.0], [30.4, 150.0], [30.5, 150.0], [30.6, 150.0], [30.7, 150.0], [30.8, 150.0], [30.9, 150.0], [31.0, 150.0], [31.1, 150.0], [31.2, 150.0], [31.3, 150.0], [31.4, 150.0], [31.5, 150.0], [31.6, 150.0], [31.7, 150.0], [31.8, 150.0], [31.9, 150.0], [32.0, 150.0], [32.1, 150.0], [32.2, 150.0], [32.3, 150.0], [32.4, 150.0], [32.5, 150.0], [32.6, 150.0], [32.7, 150.0], [32.8, 150.0], [32.9, 150.0], [33.0, 150.0], [33.1, 150.0], [33.2, 150.0], [33.3, 150.0], [33.4, 150.0], [33.5, 150.0], [33.6, 150.0], [33.7, 150.0], [33.8, 150.0], [33.9, 150.0], [34.0, 150.0], [34.1, 150.0], [34.2, 150.0], [34.3, 150.0], [34.4, 150.0], [34.5, 150.0], [34.6, 150.0], [34.7, 150.0], [34.8, 151.0], [34.9, 151.0], [35.0, 151.0], [35.1, 151.0], [35.2, 151.0], [35.3, 151.0], [35.4, 151.0], [35.5, 151.0], [35.6, 151.0], [35.7, 151.0], [35.8, 151.0], [35.9, 151.0], [36.0, 151.0], [36.1, 151.0], [36.2, 151.0], [36.3, 151.0], [36.4, 151.0], [36.5, 151.0], [36.6, 151.0], [36.7, 151.0], [36.8, 151.0], [36.9, 151.0], [37.0, 151.0], [37.1, 151.0], [37.2, 151.0], [37.3, 151.0], [37.4, 151.0], [37.5, 151.0], [37.6, 151.0], [37.7, 151.0], [37.8, 151.0], [37.9, 151.0], [38.0, 151.0], [38.1, 151.0], [38.2, 151.0], [38.3, 151.0], [38.4, 151.0], [38.5, 151.0], [38.6, 151.0], [38.7, 151.0], [38.8, 151.0], [38.9, 151.0], [39.0, 151.0], [39.1, 151.0], [39.2, 151.0], [39.3, 151.0], [39.4, 151.0], [39.5, 151.0], [39.6, 151.0], [39.7, 151.0], [39.8, 151.0], [39.9, 151.0], [40.0, 152.0], [40.1, 152.0], [40.2, 152.0], [40.3, 152.0], [40.4, 152.0], [40.5, 152.0], [40.6, 152.0], [40.7, 152.0], [40.8, 152.0], [40.9, 152.0], [41.0, 152.0], [41.1, 152.0], [41.2, 152.0], [41.3, 152.0], [41.4, 152.0], [41.5, 152.0], [41.6, 152.0], [41.7, 152.0], [41.8, 152.0], [41.9, 152.0], [42.0, 152.0], [42.1, 152.0], [42.2, 152.0], [42.3, 152.0], [42.4, 152.0], [42.5, 152.0], [42.6, 152.0], [42.7, 152.0], [42.8, 152.0], [42.9, 152.0], [43.0, 152.0], [43.1, 152.0], [43.2, 152.0], [43.3, 152.0], [43.4, 152.0], [43.5, 152.0], [43.6, 152.0], [43.7, 152.0], [43.8, 152.0], [43.9, 152.0], [44.0, 152.0], [44.1, 152.0], [44.2, 152.0], [44.3, 152.0], [44.4, 152.0], [44.5, 152.0], [44.6, 152.0], [44.7, 152.0], [44.8, 152.0], [44.9, 152.0], [45.0, 152.0], [45.1, 152.0], [45.2, 152.0], [45.3, 152.0], [45.4, 152.0], [45.5, 152.0], [45.6, 152.0], [45.7, 152.0], [45.8, 152.0], [45.9, 152.0], [46.0, 152.0], [46.1, 152.0], [46.2, 152.0], [46.3, 152.0], [46.4, 152.0], [46.5, 152.0], [46.6, 152.0], [46.7, 152.0], [46.8, 152.0], [46.9, 152.0], [47.0, 152.0], [47.1, 153.0], [47.2, 153.0], [47.3, 153.0], [47.4, 153.0], [47.5, 153.0], [47.6, 153.0], [47.7, 153.0], [47.8, 153.0], [47.9, 153.0], [48.0, 153.0], [48.1, 153.0], [48.2, 153.0], [48.3, 153.0], [48.4, 153.0], [48.5, 153.0], [48.6, 153.0], [48.7, 153.0], [48.8, 153.0], [48.9, 153.0], [49.0, 153.0], [49.1, 153.0], [49.2, 153.0], [49.3, 153.0], [49.4, 153.0], [49.5, 153.0], [49.6, 153.0], [49.7, 153.0], [49.8, 153.0], [49.9, 153.0], [50.0, 153.0], [50.1, 153.0], [50.2, 153.0], [50.3, 153.0], [50.4, 153.0], [50.5, 153.0], [50.6, 153.0], [50.7, 153.0], [50.8, 153.0], [50.9, 153.0], [51.0, 153.0], [51.1, 153.0], [51.2, 153.0], [51.3, 153.0], [51.4, 153.0], [51.5, 153.0], [51.6, 153.0], [51.7, 153.0], [51.8, 153.0], [51.9, 153.0], [52.0, 153.0], [52.1, 153.0], [52.2, 153.0], [52.3, 153.0], [52.4, 153.0], [52.5, 153.0], [52.6, 153.0], [52.7, 153.0], [52.8, 153.0], [52.9, 153.0], [53.0, 153.0], [53.1, 153.0], [53.2, 153.0], [53.3, 153.0], [53.4, 153.0], [53.5, 153.0], [53.6, 153.0], [53.7, 153.0], [53.8, 153.0], [53.9, 153.0], [54.0, 153.0], [54.1, 153.0], [54.2, 154.0], [54.3, 154.0], [54.4, 154.0], [54.5, 154.0], [54.6, 154.0], [54.7, 154.0], [54.8, 154.0], [54.9, 154.0], [55.0, 154.0], [55.1, 154.0], [55.2, 154.0], [55.3, 154.0], [55.4, 154.0], [55.5, 154.0], [55.6, 154.0], [55.7, 154.0], [55.8, 154.0], [55.9, 154.0], [56.0, 154.0], [56.1, 154.0], [56.2, 154.0], [56.3, 154.0], [56.4, 154.0], [56.5, 154.0], [56.6, 154.0], [56.7, 154.0], [56.8, 154.0], [56.9, 154.0], [57.0, 154.0], [57.1, 154.0], [57.2, 154.0], [57.3, 154.0], [57.4, 154.0], [57.5, 154.0], [57.6, 154.0], [57.7, 154.0], [57.8, 154.0], [57.9, 154.0], [58.0, 154.0], [58.1, 154.0], [58.2, 154.0], [58.3, 154.0], [58.4, 154.0], [58.5, 154.0], [58.6, 154.0], [58.7, 154.0], [58.8, 154.0], [58.9, 154.0], [59.0, 154.0], [59.1, 154.0], [59.2, 154.0], [59.3, 154.0], [59.4, 154.0], [59.5, 154.0], [59.6, 154.0], [59.7, 154.0], [59.8, 154.0], [59.9, 154.0], [60.0, 154.0], [60.1, 154.0], [60.2, 154.0], [60.3, 154.0], [60.4, 154.0], [60.5, 154.0], [60.6, 154.0], [60.7, 154.0], [60.8, 154.0], [60.9, 154.0], [61.0, 154.0], [61.1, 154.0], [61.2, 155.0], [61.3, 155.0], [61.4, 155.0], [61.5, 155.0], [61.6, 155.0], [61.7, 155.0], [61.8, 155.0], [61.9, 155.0], [62.0, 155.0], [62.1, 155.0], [62.2, 155.0], [62.3, 155.0], [62.4, 155.0], [62.5, 155.0], [62.6, 155.0], [62.7, 155.0], [62.8, 155.0], [62.9, 155.0], [63.0, 155.0], [63.1, 155.0], [63.2, 155.0], [63.3, 155.0], [63.4, 155.0], [63.5, 155.0], [63.6, 155.0], [63.7, 155.0], [63.8, 155.0], [63.9, 155.0], [64.0, 155.0], [64.1, 155.0], [64.2, 155.0], [64.3, 155.0], [64.4, 155.0], [64.5, 155.0], [64.6, 155.0], [64.7, 155.0], [64.8, 155.0], [64.9, 155.0], [65.0, 155.0], [65.1, 155.0], [65.2, 155.0], [65.3, 155.0], [65.4, 155.0], [65.5, 155.0], [65.6, 155.0], [65.7, 155.0], [65.8, 155.0], [65.9, 156.0], [66.0, 156.0], [66.1, 156.0], [66.2, 156.0], [66.3, 156.0], [66.4, 156.0], [66.5, 156.0], [66.6, 156.0], [66.7, 156.0], [66.8, 156.0], [66.9, 156.0], [67.0, 156.0], [67.1, 156.0], [67.2, 156.0], [67.3, 156.0], [67.4, 156.0], [67.5, 156.0], [67.6, 156.0], [67.7, 156.0], [67.8, 156.0], [67.9, 156.0], [68.0, 156.0], [68.1, 156.0], [68.2, 156.0], [68.3, 156.0], [68.4, 156.0], [68.5, 156.0], [68.6, 156.0], [68.7, 156.0], [68.8, 156.0], [68.9, 156.0], [69.0, 156.0], [69.1, 156.0], [69.2, 156.0], [69.3, 156.0], [69.4, 156.0], [69.5, 156.0], [69.6, 156.0], [69.7, 156.0], [69.8, 156.0], [69.9, 156.0], [70.0, 157.0], [70.1, 157.0], [70.2, 157.0], [70.3, 157.0], [70.4, 157.0], [70.5, 157.0], [70.6, 157.0], [70.7, 157.0], [70.8, 157.0], [70.9, 157.0], [71.0, 157.0], [71.1, 157.0], [71.2, 157.0], [71.3, 157.0], [71.4, 157.0], [71.5, 157.0], [71.6, 157.0], [71.7, 157.0], [71.8, 157.0], [71.9, 157.0], [72.0, 157.0], [72.1, 157.0], [72.2, 157.0], [72.3, 157.0], [72.4, 157.0], [72.5, 157.0], [72.6, 157.0], [72.7, 157.0], [72.8, 157.0], [72.9, 157.0], [73.0, 157.0], [73.1, 157.0], [73.2, 157.0], [73.3, 157.0], [73.4, 157.0], [73.5, 157.0], [73.6, 157.0], [73.7, 157.0], [73.8, 157.0], [73.9, 157.0], [74.0, 157.0], [74.1, 157.0], [74.2, 157.0], [74.3, 157.0], [74.4, 157.0], [74.5, 157.0], [74.6, 157.0], [74.7, 157.0], [74.8, 157.0], [74.9, 157.0], [75.0, 157.0], [75.1, 157.0], [75.2, 157.0], [75.3, 157.0], [75.4, 157.0], [75.5, 157.0], [75.6, 157.0], [75.7, 157.0], [75.8, 157.0], [75.9, 158.0], [76.0, 158.0], [76.1, 158.0], [76.2, 158.0], [76.3, 158.0], [76.4, 158.0], [76.5, 158.0], [76.6, 158.0], [76.7, 158.0], [76.8, 158.0], [76.9, 158.0], [77.0, 158.0], [77.1, 158.0], [77.2, 158.0], [77.3, 158.0], [77.4, 158.0], [77.5, 158.0], [77.6, 158.0], [77.7, 158.0], [77.8, 158.0], [77.9, 158.0], [78.0, 158.0], [78.1, 158.0], [78.2, 158.0], [78.3, 158.0], [78.4, 158.0], [78.5, 158.0], [78.6, 158.0], [78.7, 158.0], [78.8, 158.0], [78.9, 158.0], [79.0, 158.0], [79.1, 158.0], [79.2, 158.0], [79.3, 158.0], [79.4, 158.0], [79.5, 158.0], [79.6, 158.0], [79.7, 158.0], [79.8, 158.0], [79.9, 158.0], [80.0, 159.0], [80.1, 159.0], [80.2, 159.0], [80.3, 159.0], [80.4, 159.0], [80.5, 159.0], [80.6, 159.0], [80.7, 159.0], [80.8, 159.0], [80.9, 159.0], [81.0, 159.0], [81.1, 159.0], [81.2, 159.0], [81.3, 159.0], [81.4, 159.0], [81.5, 159.0], [81.6, 159.0], [81.7, 159.0], [81.8, 159.0], [81.9, 159.0], [82.0, 159.0], [82.1, 159.0], [82.2, 159.0], [82.3, 159.0], [82.4, 159.0], [82.5, 159.0], [82.6, 159.0], [82.7, 159.0], [82.8, 159.0], [82.9, 159.0], [83.0, 160.0], [83.1, 160.0], [83.2, 160.0], [83.3, 160.0], [83.4, 160.0], [83.5, 160.0], [83.6, 160.0], [83.7, 160.0], [83.8, 160.0], [83.9, 160.0], [84.0, 160.0], [84.1, 160.0], [84.2, 160.0], [84.3, 160.0], [84.4, 160.0], [84.5, 160.0], [84.6, 160.0], [84.7, 160.0], [84.8, 161.0], [84.9, 161.0], [85.0, 161.0], [85.1, 161.0], [85.2, 161.0], [85.3, 161.0], [85.4, 161.0], [85.5, 161.0], [85.6, 161.0], [85.7, 161.0], [85.8, 161.0], [85.9, 161.0], [86.0, 161.0], [86.1, 161.0], [86.2, 161.0], [86.3, 161.0], [86.4, 161.0], [86.5, 161.0], [86.6, 161.0], [86.7, 161.0], [86.8, 161.0], [86.9, 161.0], [87.0, 161.0], [87.1, 161.0], [87.2, 161.0], [87.3, 161.0], [87.4, 161.0], [87.5, 161.0], [87.6, 161.0], [87.7, 162.0], [87.8, 162.0], [87.9, 162.0], [88.0, 162.0], [88.1, 162.0], [88.2, 162.0], [88.3, 162.0], [88.4, 162.0], [88.5, 162.0], [88.6, 162.0], [88.7, 162.0], [88.8, 162.0], [88.9, 163.0], [89.0, 163.0], [89.1, 163.0], [89.2, 163.0], [89.3, 163.0], [89.4, 163.0], [89.5, 163.0], [89.6, 163.0], [89.7, 163.0], [89.8, 163.0], [89.9, 163.0], [90.0, 163.0], [90.1, 163.0], [90.2, 163.0], [90.3, 163.0], [90.4, 163.0], [90.5, 163.0], [90.6, 164.0], [90.7, 164.0], [90.8, 164.0], [90.9, 164.0], [91.0, 164.0], [91.1, 164.0], [91.2, 165.0], [91.3, 165.0], [91.4, 165.0], [91.5, 165.0], [91.6, 165.0], [91.7, 165.0], [91.8, 166.0], [91.9, 166.0], [92.0, 166.0], [92.1, 166.0], [92.2, 166.0], [92.3, 166.0], [92.4, 166.0], [92.5, 166.0], [92.6, 166.0], [92.7, 166.0], [92.8, 166.0], [92.9, 166.0], [93.0, 167.0], [93.1, 167.0], [93.2, 167.0], [93.3, 167.0], [93.4, 167.0], [93.5, 167.0], [93.6, 169.0], [93.7, 169.0], [93.8, 169.0], [93.9, 169.0], [94.0, 169.0], [94.1, 169.0], [94.2, 169.0], [94.3, 169.0], [94.4, 169.0], [94.5, 169.0], [94.6, 169.0], [94.7, 169.0], [94.8, 169.0], [94.9, 169.0], [95.0, 169.0], [95.1, 169.0], [95.2, 169.0], [95.3, 170.0], [95.4, 170.0], [95.5, 170.0], [95.6, 170.0], [95.7, 170.0], [95.8, 170.0], [95.9, 180.0], [96.0, 180.0], [96.1, 180.0], [96.2, 180.0], [96.3, 180.0], [96.4, 180.0], [96.5, 180.0], [96.6, 180.0], [96.7, 180.0], [96.8, 180.0], [96.9, 180.0], [97.0, 180.0], [97.1, 191.0], [97.2, 191.0], [97.3, 191.0], [97.4, 191.0], [97.5, 191.0], [97.6, 191.0], [97.7, 225.0], [97.8, 225.0], [97.9, 225.0], [98.0, 225.0], [98.1, 225.0], [98.2, 225.0], [98.3, 233.0], [98.4, 233.0], [98.5, 233.0], [98.6, 233.0], [98.7, 233.0], [98.8, 233.0], [98.9, 241.0], [99.0, 241.0], [99.1, 241.0], [99.2, 241.0], [99.3, 241.0], [99.4, 241.0], [99.5, 314.0], [99.6, 314.0], [99.7, 314.0], [99.8, 314.0], [99.9, 314.0], [100.0, 314.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 2.0], [4.9, 2.0], [5.0, 2.0], [5.1, 2.0], [5.2, 2.0], [5.3, 2.0], [5.4, 2.0], [5.5, 2.0], [5.6, 2.0], [5.7, 2.0], [5.8, 2.0], [5.9, 2.0], [6.0, 2.0], [6.1, 2.0], [6.2, 2.0], [6.3, 2.0], [6.4, 2.0], [6.5, 2.0], [6.6, 2.0], [6.7, 2.0], [6.8, 2.0], [6.9, 2.0], [7.0, 2.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 2.0], [14.5, 2.0], [14.6, 2.0], [14.7, 2.0], [14.8, 2.0], [14.9, 2.0], [15.0, 2.0], [15.1, 2.0], [15.2, 2.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 3.0], [17.2, 3.0], [17.3, 3.0], [17.4, 3.0], [17.5, 3.0], [17.6, 3.0], [17.7, 3.0], [17.8, 3.0], [17.9, 3.0], [18.0, 3.0], [18.1, 3.0], [18.2, 3.0], [18.3, 3.0], [18.4, 3.0], [18.5, 3.0], [18.6, 3.0], [18.7, 3.0], [18.8, 3.0], [18.9, 3.0], [19.0, 3.0], [19.1, 3.0], [19.2, 3.0], [19.3, 3.0], [19.4, 3.0], [19.5, 3.0], [19.6, 3.0], [19.7, 3.0], [19.8, 3.0], [19.9, 3.0], [20.0, 3.0], [20.1, 3.0], [20.2, 3.0], [20.3, 3.0], [20.4, 3.0], [20.5, 3.0], [20.6, 3.0], [20.7, 3.0], [20.8, 3.0], [20.9, 3.0], [21.0, 3.0], [21.1, 3.0], [21.2, 3.0], [21.3, 3.0], [21.4, 3.0], [21.5, 3.0], [21.6, 3.0], [21.7, 3.0], [21.8, 3.0], [21.9, 3.0], [22.0, 3.0], [22.1, 3.0], [22.2, 3.0], [22.3, 3.0], [22.4, 3.0], [22.5, 3.0], [22.6, 3.0], [22.7, 3.0], [22.8, 3.0], [22.9, 3.0], [23.0, 3.0], [23.1, 3.0], [23.2, 3.0], [23.3, 3.0], [23.4, 3.0], [23.5, 3.0], [23.6, 3.0], [23.7, 3.0], [23.8, 4.0], [23.9, 4.0], [24.0, 4.0], [24.1, 4.0], [24.2, 5.0], [24.3, 5.0], [24.4, 5.0], [24.5, 7.0], [24.6, 18.0], [24.7, 20.0], [24.8, 22.0], [24.9, 23.0], [25.0, 23.0], [25.1, 24.0], [25.2, 25.0], [25.3, 26.0], [25.4, 26.0], [25.5, 27.0], [25.6, 28.0], [25.7, 29.0], [25.8, 29.0], [25.9, 31.0], [26.0, 32.0], [26.1, 33.0], [26.2, 33.0], [26.3, 34.0], [26.4, 35.0], [26.5, 36.0], [26.6, 37.0], [26.7, 38.0], [26.8, 39.0], [26.9, 41.0], [27.0, 43.0], [27.1, 46.0], [27.2, 49.0], [27.3, 55.0], [27.4, 59.0], [27.5, 66.0], [27.6, 79.0], [27.7, 97.0], [27.8, 117.0], [27.9, 139.0], [28.0, 165.0], [28.1, 178.0], [28.2, 203.0], [28.3, 231.0], [28.4, 242.0], [28.5, 255.0], [28.6, 274.0], [28.7, 296.0], [28.8, 314.0], [28.9, 331.0], [29.0, 344.0], [29.1, 357.0], [29.2, 368.0], [29.3, 387.0], [29.4, 403.0], [29.5, 414.0], [29.6, 425.0], [29.7, 434.0], [29.8, 445.0], [29.9, 455.0], [30.0, 466.0], [30.1, 480.0], [30.2, 487.0], [30.3, 497.0], [30.4, 508.0], [30.5, 517.0], [30.6, 531.0], [30.7, 541.0], [30.8, 551.0], [30.9, 558.0], [31.0, 568.0], [31.1, 577.0], [31.2, 585.0], [31.3, 595.0], [31.4, 605.0], [31.5, 613.0], [31.6, 621.0], [31.7, 628.0], [31.8, 639.0], [31.9, 647.0], [32.0, 657.0], [32.1, 666.0], [32.2, 672.0], [32.3, 679.0], [32.4, 688.0], [32.5, 695.0], [32.6, 700.0], [32.7, 707.0], [32.8, 713.0], [32.9, 723.0], [33.0, 732.0], [33.1, 740.0], [33.2, 747.0], [33.3, 755.0], [33.4, 762.0], [33.5, 769.0], [33.6, 778.0], [33.7, 783.0], [33.8, 788.0], [33.9, 794.0], [34.0, 798.0], [34.1, 804.0], [34.2, 812.0], [34.3, 818.0], [34.4, 825.0], [34.5, 831.0], [34.6, 836.0], [34.7, 846.0], [34.8, 852.0], [34.9, 858.0], [35.0, 863.0], [35.1, 868.0], [35.2, 873.0], [35.3, 880.0], [35.4, 886.0], [35.5, 891.0], [35.6, 895.0], [35.7, 899.0], [35.8, 907.0], [35.9, 911.0], [36.0, 919.0], [36.1, 925.0], [36.2, 931.0], [36.3, 937.0], [36.4, 944.0], [36.5, 951.0], [36.6, 960.0], [36.7, 966.0], [36.8, 971.0], [36.9, 976.0], [37.0, 984.0], [37.1, 994.0], [37.2, 999.0], [37.3, 1006.0], [37.4, 1015.0], [37.5, 1023.0], [37.6, 1030.0], [37.7, 1036.0], [37.8, 1041.0], [37.9, 1046.0], [38.0, 1053.0], [38.1, 1059.0], [38.2, 1066.0], [38.3, 1077.0], [38.4, 1083.0], [38.5, 1090.0], [38.6, 1096.0], [38.7, 1101.0], [38.8, 1109.0], [38.9, 1117.0], [39.0, 1122.0], [39.1, 1132.0], [39.2, 1142.0], [39.3, 1149.0], [39.4, 1156.0], [39.5, 1165.0], [39.6, 1174.0], [39.7, 1180.0], [39.8, 1192.0], [39.9, 1199.0], [40.0, 1204.0], [40.1, 1210.0], [40.2, 1217.0], [40.3, 1224.0], [40.4, 1231.0], [40.5, 1238.0], [40.6, 1248.0], [40.7, 1256.0], [40.8, 1264.0], [40.9, 1271.0], [41.0, 1279.0], [41.1, 1285.0], [41.2, 1293.0], [41.3, 1297.0], [41.4, 1304.0], [41.5, 1310.0], [41.6, 1321.0], [41.7, 1326.0], [41.8, 1334.0], [41.9, 1342.0], [42.0, 1347.0], [42.1, 1354.0], [42.2, 1361.0], [42.3, 1366.0], [42.4, 1372.0], [42.5, 1380.0], [42.6, 1390.0], [42.7, 1396.0], [42.8, 1402.0], [42.9, 1407.0], [43.0, 1414.0], [43.1, 1421.0], [43.2, 1429.0], [43.3, 1433.0], [43.4, 1439.0], [43.5, 1448.0], [43.6, 1455.0], [43.7, 1462.0], [43.8, 1466.0], [43.9, 1472.0], [44.0, 1483.0], [44.1, 1490.0], [44.2, 1496.0], [44.3, 1501.0], [44.4, 1507.0], [44.5, 1514.0], [44.6, 1522.0], [44.7, 1528.0], [44.8, 1537.0], [44.9, 1540.0], [45.0, 1546.0], [45.1, 1553.0], [45.2, 1563.0], [45.3, 1568.0], [45.4, 1575.0], [45.5, 1582.0], [45.6, 1587.0], [45.7, 1594.0], [45.8, 1598.0], [45.9, 1604.0], [46.0, 1612.0], [46.1, 1620.0], [46.2, 1630.0], [46.3, 1637.0], [46.4, 1644.0], [46.5, 1653.0], [46.6, 1662.0], [46.7, 1668.0], [46.8, 1676.0], [46.9, 1684.0], [47.0, 1692.0], [47.1, 1700.0], [47.2, 1709.0], [47.3, 1717.0], [47.4, 1727.0], [47.5, 1737.0], [47.6, 1744.0], [47.7, 1753.0], [47.8, 1760.0], [47.9, 1767.0], [48.0, 1774.0], [48.1, 1784.0], [48.2, 1790.0], [48.3, 1807.0], [48.4, 1814.0], [48.5, 1820.0], [48.6, 1828.0], [48.7, 1834.0], [48.8, 1840.0], [48.9, 1850.0], [49.0, 1863.0], [49.1, 1871.0], [49.2, 1878.0], [49.3, 1887.0], [49.4, 1897.0], [49.5, 1906.0], [49.6, 1914.0], [49.7, 1922.0], [49.8, 1932.0], [49.9, 1940.0], [50.0, 1951.0], [50.1, 1959.0], [50.2, 1969.0], [50.3, 1978.0], [50.4, 1987.0], [50.5, 1997.0], [50.6, 2007.0], [50.7, 2015.0], [50.8, 2026.0], [50.9, 2037.0], [51.0, 2045.0], [51.1, 2053.0], [51.2, 2061.0], [51.3, 2068.0], [51.4, 2080.0], [51.5, 2086.0], [51.6, 2094.0], [51.7, 2100.0], [51.8, 2109.0], [51.9, 2122.0], [52.0, 2132.0], [52.1, 2141.0], [52.2, 2148.0], [52.3, 2153.0], [52.4, 2164.0], [52.5, 2170.0], [52.6, 2178.0], [52.7, 2185.0], [52.8, 2193.0], [52.9, 2202.0], [53.0, 2209.0], [53.1, 2218.0], [53.2, 2229.0], [53.3, 2236.0], [53.4, 2243.0], [53.5, 2250.0], [53.6, 2255.0], [53.7, 2263.0], [53.8, 2271.0], [53.9, 2279.0], [54.0, 2284.0], [54.1, 2291.0], [54.2, 2299.0], [54.3, 2308.0], [54.4, 2315.0], [54.5, 2320.0], [54.6, 2326.0], [54.7, 2331.0], [54.8, 2338.0], [54.9, 2341.0], [55.0, 2347.0], [55.1, 2353.0], [55.2, 2359.0], [55.3, 2368.0], [55.4, 2373.0], [55.5, 2377.0], [55.6, 2385.0], [55.7, 2389.0], [55.8, 2395.0], [55.9, 2399.0], [56.0, 2405.0], [56.1, 2407.0], [56.2, 2413.0], [56.3, 2419.0], [56.4, 2424.0], [56.5, 2432.0], [56.6, 2437.0], [56.7, 2443.0], [56.8, 2447.0], [56.9, 2454.0], [57.0, 2457.0], [57.1, 2460.0], [57.2, 2464.0], [57.3, 2470.0], [57.4, 2473.0], [57.5, 2478.0], [57.6, 2485.0], [57.7, 2490.0], [57.8, 2495.0], [57.9, 2501.0], [58.0, 2506.0], [58.1, 2509.0], [58.2, 2513.0], [58.3, 2517.0], [58.4, 2521.0], [58.5, 2526.0], [58.6, 2530.0], [58.7, 2536.0], [58.8, 2541.0], [58.9, 2546.0], [59.0, 2551.0], [59.1, 2555.0], [59.2, 2559.0], [59.3, 2562.0], [59.4, 2567.0], [59.5, 2570.0], [59.6, 2573.0], [59.7, 2577.0], [59.8, 2580.0], [59.9, 2583.0], [60.0, 2587.0], [60.1, 2592.0], [60.2, 2598.0], [60.3, 2601.0], [60.4, 2606.0], [60.5, 2610.0], [60.6, 2614.0], [60.7, 2620.0], [60.8, 2626.0], [60.9, 2631.0], [61.0, 2636.0], [61.1, 2639.0], [61.2, 2645.0], [61.3, 2649.0], [61.4, 2655.0], [61.5, 2659.0], [61.6, 2662.0], [61.7, 2667.0], [61.8, 2672.0], [61.9, 2675.0], [62.0, 2679.0], [62.1, 2682.0], [62.2, 2685.0], [62.3, 2690.0], [62.4, 2694.0], [62.5, 2696.0], [62.6, 2699.0], [62.7, 2703.0], [62.8, 2709.0], [62.9, 2713.0], [63.0, 2718.0], [63.1, 2723.0], [63.2, 2729.0], [63.3, 2735.0], [63.4, 2737.0], [63.5, 2740.0], [63.6, 2745.0], [63.7, 2750.0], [63.8, 2755.0], [63.9, 2760.0], [64.0, 2764.0], [64.1, 2767.0], [64.2, 2771.0], [64.3, 2775.0], [64.4, 2780.0], [64.5, 2784.0], [64.6, 2787.0], [64.7, 2791.0], [64.8, 2795.0], [64.9, 2798.0], [65.0, 2802.0], [65.1, 2805.0], [65.2, 2809.0], [65.3, 2812.0], [65.4, 2816.0], [65.5, 2819.0], [65.6, 2824.0], [65.7, 2827.0], [65.8, 2831.0], [65.9, 2835.0], [66.0, 2839.0], [66.1, 2842.0], [66.2, 2845.0], [66.3, 2850.0], [66.4, 2855.0], [66.5, 2858.0], [66.6, 2864.0], [66.7, 2867.0], [66.8, 2870.0], [66.9, 2873.0], [67.0, 2877.0], [67.1, 2882.0], [67.2, 2884.0], [67.3, 2887.0], [67.4, 2891.0], [67.5, 2895.0], [67.6, 2897.0], [67.7, 2901.0], [67.8, 2905.0], [67.9, 2909.0], [68.0, 2914.0], [68.1, 2918.0], [68.2, 2921.0], [68.3, 2925.0], [68.4, 2931.0], [68.5, 2936.0], [68.6, 2941.0], [68.7, 2944.0], [68.8, 2948.0], [68.9, 2951.0], [69.0, 2955.0], [69.1, 2958.0], [69.2, 2962.0], [69.3, 2967.0], [69.4, 2970.0], [69.5, 2973.0], [69.6, 2977.0], [69.7, 2983.0], [69.8, 2987.0], [69.9, 2992.0], [70.0, 2996.0], [70.1, 3000.0], [70.2, 3004.0], [70.3, 3009.0], [70.4, 3012.0], [70.5, 3016.0], [70.6, 3020.0], [70.7, 3022.0], [70.8, 3025.0], [70.9, 3028.0], [71.0, 3030.0], [71.1, 3035.0], [71.2, 3038.0], [71.3, 3040.0], [71.4, 3043.0], [71.5, 3045.0], [71.6, 3048.0], [71.7, 3052.0], [71.8, 3057.0], [71.9, 3061.0], [72.0, 3064.0], [72.1, 3068.0], [72.2, 3071.0], [72.3, 3074.0], [72.4, 3078.0], [72.5, 3083.0], [72.6, 3088.0], [72.7, 3092.0], [72.8, 3096.0], [72.9, 3099.0], [73.0, 3103.0], [73.1, 3106.0], [73.2, 3109.0], [73.3, 3114.0], [73.4, 3118.0], [73.5, 3123.0], [73.6, 3126.0], [73.7, 3131.0], [73.8, 3135.0], [73.9, 3138.0], [74.0, 3141.0], [74.1, 3146.0], [74.2, 3150.0], [74.3, 3156.0], [74.4, 3159.0], [74.5, 3163.0], [74.6, 3167.0], [74.7, 3169.0], [74.8, 3173.0], [74.9, 3178.0], [75.0, 3182.0], [75.1, 3186.0], [75.2, 3190.0], [75.3, 3194.0], [75.4, 3200.0], [75.5, 3205.0], [75.6, 3210.0], [75.7, 3215.0], [75.8, 3217.0], [75.9, 3223.0], [76.0, 3228.0], [76.1, 3234.0], [76.2, 3238.0], [76.3, 3242.0], [76.4, 3248.0], [76.5, 3252.0], [76.6, 3255.0], [76.7, 3261.0], [76.8, 3266.0], [76.9, 3270.0], [77.0, 3276.0], [77.1, 3281.0], [77.2, 3285.0], [77.3, 3291.0], [77.4, 3298.0], [77.5, 3304.0], [77.6, 3308.0], [77.7, 3313.0], [77.8, 3318.0], [77.9, 3325.0], [78.0, 3330.0], [78.1, 3335.0], [78.2, 3340.0], [78.3, 3345.0], [78.4, 3349.0], [78.5, 3353.0], [78.6, 3358.0], [78.7, 3364.0], [78.8, 3373.0], [78.9, 3380.0], [79.0, 3384.0], [79.1, 3389.0], [79.2, 3393.0], [79.3, 3398.0], [79.4, 3407.0], [79.5, 3413.0], [79.6, 3420.0], [79.7, 3424.0], [79.8, 3429.0], [79.9, 3435.0], [80.0, 3444.0], [80.1, 3449.0], [80.2, 3455.0], [80.3, 3460.0], [80.4, 3470.0], [80.5, 3477.0], [80.6, 3482.0], [80.7, 3486.0], [80.8, 3493.0], [80.9, 3502.0], [81.0, 3510.0], [81.1, 3516.0], [81.2, 3524.0], [81.3, 3530.0], [81.4, 3540.0], [81.5, 3547.0], [81.6, 3552.0], [81.7, 3560.0], [81.8, 3566.0], [81.9, 3572.0], [82.0, 3581.0], [82.1, 3588.0], [82.2, 3596.0], [82.3, 3601.0], [82.4, 3610.0], [82.5, 3618.0], [82.6, 3626.0], [82.7, 3635.0], [82.8, 3646.0], [82.9, 3659.0], [83.0, 3667.0], [83.1, 3674.0], [83.2, 3683.0], [83.3, 3689.0], [83.4, 3696.0], [83.5, 3707.0], [83.6, 3711.0], [83.7, 3716.0], [83.8, 3726.0], [83.9, 3732.0], [84.0, 3738.0], [84.1, 3749.0], [84.2, 3760.0], [84.3, 3770.0], [84.4, 3783.0], [84.5, 3792.0], [84.6, 3802.0], [84.7, 3811.0], [84.8, 3825.0], [84.9, 3838.0], [85.0, 3846.0], [85.1, 3854.0], [85.2, 3868.0], [85.3, 3884.0], [85.4, 3900.0], [85.5, 3913.0], [85.6, 3922.0], [85.7, 3935.0], [85.8, 3949.0], [85.9, 3959.0], [86.0, 3971.0], [86.1, 3983.0], [86.2, 3999.0], [86.3, 4008.0], [86.4, 4017.0], [86.5, 4026.0], [86.6, 4041.0], [86.7, 4051.0], [86.8, 4059.0], [86.9, 4070.0], [87.0, 4082.0], [87.1, 4093.0], [87.2, 4104.0], [87.3, 4111.0], [87.4, 4127.0], [87.5, 4140.0], [87.6, 4154.0], [87.7, 4165.0], [87.8, 4173.0], [87.9, 4183.0], [88.0, 4197.0], [88.1, 4212.0], [88.2, 4219.0], [88.3, 4226.0], [88.4, 4234.0], [88.5, 4245.0], [88.6, 4261.0], [88.7, 4273.0], [88.8, 4288.0], [88.9, 4302.0], [89.0, 4315.0], [89.1, 4330.0], [89.2, 4342.0], [89.3, 4349.0], [89.4, 4363.0], [89.5, 4373.0], [89.6, 4384.0], [89.7, 4393.0], [89.8, 4402.0], [89.9, 4411.0], [90.0, 4425.0], [90.1, 4436.0], [90.2, 4449.0], [90.3, 4464.0], [90.4, 4476.0], [90.5, 4488.0], [90.6, 4500.0], [90.7, 4511.0], [90.8, 4529.0], [90.9, 4544.0], [91.0, 4558.0], [91.1, 4568.0], [91.2, 4581.0], [91.3, 4591.0], [91.4, 4603.0], [91.5, 4611.0], [91.6, 4619.0], [91.7, 4636.0], [91.8, 4656.0], [91.9, 4671.0], [92.0, 4686.0], [92.1, 4699.0], [92.2, 4716.0], [92.3, 4726.0], [92.4, 4739.0], [92.5, 4763.0], [92.6, 4781.0], [92.7, 4795.0], [92.8, 4807.0], [92.9, 4824.0], [93.0, 4846.0], [93.1, 4865.0], [93.2, 4888.0], [93.3, 4909.0], [93.4, 4922.0], [93.5, 4939.0], [93.6, 4953.0], [93.7, 4973.0], [93.8, 4989.0], [93.9, 5005.0], [94.0, 5026.0], [94.1, 5046.0], [94.2, 5063.0], [94.3, 5095.0], [94.4, 5106.0], [94.5, 5125.0], [94.6, 5147.0], [94.7, 5172.0], [94.8, 5194.0], [94.9, 5204.0], [95.0, 5231.0], [95.1, 5246.0], [95.2, 5276.0], [95.3, 5292.0], [95.4, 5323.0], [95.5, 5348.0], [95.6, 5361.0], [95.7, 5381.0], [95.8, 5402.0], [95.9, 5438.0], [96.0, 5465.0], [96.1, 5485.0], [96.2, 5511.0], [96.3, 5532.0], [96.4, 5550.0], [96.5, 5582.0], [96.6, 5601.0], [96.7, 5626.0], [96.8, 5652.0], [96.9, 5674.0], [97.0, 5699.0], [97.1, 5726.0], [97.2, 5779.0], [97.3, 5810.0], [97.4, 5846.0], [97.5, 5880.0], [97.6, 5914.0], [97.7, 5948.0], [97.8, 5980.0], [97.9, 6011.0], [98.0, 6052.0], [98.1, 6083.0], [98.2, 6118.0], [98.3, 6158.0], [98.4, 6185.0], [98.5, 6224.0], [98.6, 6281.0], [98.7, 6311.0], [98.8, 6355.0], [98.9, 6416.0], [99.0, 6468.0], [99.1, 6518.0], [99.2, 6614.0], [99.3, 6726.0], [99.4, 6811.0], [99.5, 6901.0], [99.6, 6980.0], [99.7, 7130.0], [99.8, 7471.0], [99.9, 7945.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 4804.0, "series": [{"data": [[0.0, 4804.0], [600.0, 206.0], [700.0, 246.0], [800.0, 266.0], [900.0, 251.0], [1000.0, 245.0], [1100.0, 244.0], [1200.0, 221.0], [1300.0, 253.0], [1400.0, 239.0], [1500.0, 236.0], [1600.0, 226.0], [1700.0, 194.0], [1800.0, 192.0], [1900.0, 187.0], [2000.0, 206.0], [2100.0, 201.0], [2300.0, 269.0], [2200.0, 260.0], [2400.0, 273.0], [2500.0, 310.0], [2600.0, 369.0], [2700.0, 390.0], [2800.0, 397.0], [2900.0, 424.0], [3000.0, 444.0], [3100.0, 423.0], [3200.0, 410.0], [3300.0, 348.0], [3400.0, 315.0], [3500.0, 228.0], [3700.0, 195.0], [3600.0, 207.0], [3800.0, 194.0], [3900.0, 155.0], [4000.0, 151.0], [4100.0, 150.0], [4200.0, 133.0], [4300.0, 136.0], [4400.0, 139.0], [4600.0, 128.0], [4500.0, 128.0], [4700.0, 116.0], [4800.0, 115.0], [4900.0, 111.0], [5100.0, 92.0], [5000.0, 96.0], [5300.0, 76.0], [5200.0, 72.0], [5500.0, 63.0], [5400.0, 69.0], [5600.0, 51.0], [5700.0, 66.0], [5800.0, 52.0], [5900.0, 54.0], [6000.0, 47.0], [6100.0, 36.0], [6200.0, 35.0], [6300.0, 21.0], [6500.0, 32.0], [6400.0, 21.0], [6600.0, 18.0], [6800.0, 11.0], [6900.0, 8.0], [6700.0, 10.0], [7000.0, 5.0], [7100.0, 8.0], [7200.0, 7.0], [7300.0, 7.0], [7400.0, 3.0], [7500.0, 9.0], [7600.0, 4.0], [7700.0, 1.0], [7900.0, 1.0], [7800.0, 1.0], [8000.0, 2.0], [8400.0, 4.0], [8600.0, 1.0], [8300.0, 1.0], [8200.0, 5.0], [8700.0, 1.0], [9200.0, 2.0], [8900.0, 1.0], [9500.0, 1.0], [100.0, 74.0], [200.0, 88.0], [300.0, 143.0], [400.0, 166.0], [500.0, 200.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[300.0, 1.0], [100.0, 166.0], [200.0, 3.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 4710.0], [600.0, 210.0], [700.0, 247.0], [800.0, 288.0], [900.0, 252.0], [1000.0, 249.0], [1100.0, 214.0], [1200.0, 239.0], [1300.0, 243.0], [1400.0, 256.0], [1500.0, 264.0], [1600.0, 217.0], [1700.0, 198.0], [1800.0, 196.0], [1900.0, 186.0], [2000.0, 200.0], [2100.0, 201.0], [2200.0, 228.0], [2300.0, 288.0], [2400.0, 337.0], [2500.0, 398.0], [2600.0, 410.0], [2800.0, 460.0], [2700.0, 396.0], [2900.0, 410.0], [3000.0, 481.0], [3100.0, 422.0], [3300.0, 325.0], [3200.0, 342.0], [3400.0, 264.0], [3500.0, 240.0], [3600.0, 197.0], [3700.0, 193.0], [3800.0, 139.0], [3900.0, 137.0], [4000.0, 163.0], [4300.0, 151.0], [4200.0, 146.0], [4100.0, 145.0], [4400.0, 141.0], [4500.0, 134.0], [4600.0, 123.0], [4700.0, 108.0], [4800.0, 87.0], [5000.0, 80.0], [4900.0, 104.0], [5100.0, 88.0], [5200.0, 84.0], [5300.0, 74.0], [5400.0, 65.0], [5500.0, 73.0], [5600.0, 70.0], [5700.0, 44.0], [5800.0, 48.0], [5900.0, 52.0], [6000.0, 51.0], [6100.0, 47.0], [6200.0, 40.0], [6300.0, 36.0], [6600.0, 15.0], [6500.0, 20.0], [6400.0, 35.0], [6700.0, 17.0], [6900.0, 20.0], [6800.0, 20.0], [7000.0, 11.0], [7100.0, 6.0], [7400.0, 7.0], [7200.0, 7.0], [7300.0, 2.0], [7600.0, 4.0], [7500.0, 5.0], [7700.0, 3.0], [7900.0, 4.0], [7800.0, 1.0], [8100.0, 3.0], [8400.0, 2.0], [8500.0, 1.0], [8800.0, 2.0], [8900.0, 1.0], [9000.0, 2.0], [9200.0, 1.0], [9300.0, 2.0], [9500.0, 1.0], [100.0, 80.0], [200.0, 93.0], [300.0, 113.0], [400.0, 159.0], [500.0, 172.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2055.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 18407.0, "series": [{"data": [[0.0, 2055.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4548.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 18407.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 9160.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 26.532994923857874, "minX": 1.58768526E12, "maxY": 170.0, "series": [{"data": [[1.58768544E12, 170.0], [1.5876861E12, 82.23441396508744], [1.5876858E12, 170.0], [1.5876855E12, 170.0], [1.58768586E12, 170.0], [1.58768556E12, 170.0], [1.58768526E12, 26.532994923857874], [1.58768592E12, 170.0], [1.58768562E12, 170.0], [1.58768532E12, 122.21434977578465], [1.58768598E12, 170.0], [1.58768568E12, 170.0], [1.58768538E12, 170.0], [1.58768604E12, 154.92504118616156], [1.58768574E12, 170.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876861E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 23.625, "minX": 1.0, "maxY": 4791.174603174604, "series": [{"data": [[4.0, 37.0], [7.0, 33.0], [8.0, 43.0], [9.0, 38.0], [10.0, 28.6], [11.0, 36.666666666666664], [12.0, 31.0], [13.0, 32.0], [15.0, 33.0], [16.0, 39.0], [18.0, 142.66666666666666], [19.0, 55.666666666666664], [20.0, 73.66666666666666], [21.0, 51.0], [22.0, 44.666666666666664], [23.0, 54.333333333333336], [24.0, 35.166666666666664], [25.0, 62.09090909090909], [26.0, 28.0], [27.0, 35.5], [28.0, 57.75], [29.0, 58.75], [30.0, 35.666666666666664], [31.0, 54.666666666666664], [32.0, 32.6], [33.0, 44.1], [34.0, 40.8], [35.0, 37.5], [36.0, 35.333333333333336], [37.0, 348.3157894736842], [38.0, 257.125], [39.0, 341.0], [40.0, 93.8], [41.0, 61.33333333333333], [42.0, 91.42857142857143], [43.0, 41.333333333333336], [44.0, 226.4285714285714], [45.0, 117.33333333333333], [46.0, 279.44444444444446], [47.0, 363.72727272727275], [48.0, 25.5], [49.0, 41.5], [50.0, 33.4], [51.0, 40.8], [52.0, 33.625], [53.0, 44.57142857142857], [54.0, 38.07692307692307], [55.0, 31.615384615384613], [56.0, 34.14285714285714], [57.0, 50.5], [58.0, 33.0], [59.0, 34.714285714285715], [60.0, 33.06666666666667], [61.0, 33.24999999999999], [62.0, 32.46153846153847], [63.0, 36.33333333333334], [64.0, 29.11111111111111], [65.0, 29.599999999999998], [66.0, 28.227272727272727], [67.0, 65.0], [68.0, 78.57142857142857], [69.0, 35.25], [70.0, 37.111111111111114], [71.0, 33.166666666666664], [72.0, 26.722222222222225], [73.0, 124.58333333333334], [74.0, 31.375000000000004], [75.0, 226.30769230769232], [76.0, 36.0], [77.0, 75.15384615384615], [78.0, 64.25], [79.0, 363.5483870967742], [80.0, 136.375], [81.0, 52.333333333333336], [82.0, 514.4358974358973], [83.0, 365.35714285714283], [84.0, 99.75], [85.0, 564.8461538461539], [86.0, 617.875], [87.0, 823.3548387096774], [88.0, 699.0], [89.0, 985.3870967741934], [90.0, 962.0454545454545], [91.0, 551.0], [92.0, 996.4999999999999], [93.0, 241.0], [94.0, 1085.642857142857], [95.0, 786.2857142857143], [96.0, 786.9545454545456], [97.0, 829.0], [98.0, 1128.5], [99.0, 840.7142857142857], [100.0, 1180.9166666666667], [101.0, 836.0], [102.0, 758.111111111111], [103.0, 255.79999999999998], [104.0, 289.4117647058824], [105.0, 289.0], [106.0, 589.2], [107.0, 424.9761904761904], [108.0, 1117.5], [109.0, 861.6842105263158], [110.0, 587.304347826087], [111.0, 1001.0], [112.0, 972.5714285714286], [113.0, 840.1666666666665], [114.0, 811.1111111111111], [115.0, 899.0], [116.0, 993.5294117647059], [117.0, 725.0], [118.0, 643.9166666666666], [119.0, 492.27777777777777], [120.0, 890.8666666666667], [121.0, 1120.8999999999999], [122.0, 781.7500000000001], [123.0, 1184.8571428571431], [124.0, 643.3529411764704], [125.0, 1256.2], [126.0, 678.2142857142856], [127.0, 908.3846153846154], [128.0, 938.6250000000002], [129.0, 1163.1666666666667], [130.0, 964.2727272727273], [131.0, 934.6], [132.0, 931.5238095238094], [133.0, 1200.0833333333335], [134.0, 1278.4545454545453], [135.0, 1387.2], [136.0, 1433.3823529411766], [137.0, 1408.1666666666667], [138.0, 989.1917808219182], [139.0, 968.0731707317073], [140.0, 1230.8125], [141.0, 1068.774193548387], [142.0, 1240.8571428571427], [143.0, 1460.3333333333333], [144.0, 1382.3529411764705], [145.0, 1805.0], [146.0, 1422.7500000000002], [147.0, 1975.1538461538462], [148.0, 1975.0666666666666], [149.0, 1976.9523809523812], [150.0, 1578.0], [151.0, 1597.2199999999993], [152.0, 1783.3], [153.0, 1952.7666666666667], [154.0, 2272.6470588235293], [155.0, 1794.0], [156.0, 3509.8048780487807], [157.0, 4791.174603174604], [158.0, 942.7222222222222], [159.0, 990.2222222222222], [160.0, 2429.0], [161.0, 1269.857142857143], [162.0, 883.3181818181815], [163.0, 387.67741935483855], [164.0, 1939.2], [165.0, 1008.9473684210527], [166.0, 345.23999999999995], [167.0, 1134.628865979381], [168.0, 2950.5057471264377], [169.0, 3104.0], [170.0, 2134.9314643890348], [1.0, 32.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[162.28276470588278, 1993.0487058823512]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 157.0], [3.0, 166.0], [4.0, 166.0], [5.0, 161.0], [6.0, 163.0], [7.0, 155.0], [8.0, 169.0], [9.0, 154.0], [10.0, 161.0], [11.0, 162.0], [12.0, 153.0], [13.0, 152.0], [14.0, 147.0], [15.0, 153.0], [16.0, 152.0], [17.0, 153.0], [18.0, 143.0], [19.0, 152.0], [20.0, 147.0], [21.0, 155.0], [22.0, 148.0], [23.0, 160.0], [24.0, 156.0], [25.0, 151.0], [26.0, 158.0], [27.0, 150.0], [28.0, 159.0], [29.0, 162.0], [30.0, 148.0], [31.0, 155.0], [32.0, 156.0], [33.0, 149.0], [34.0, 163.0], [35.0, 180.0], [36.0, 153.0], [37.0, 157.0], [38.0, 150.0], [39.0, 152.0], [40.0, 156.0], [41.0, 154.0], [42.0, 149.0], [43.0, 159.0], [44.0, 154.0], [45.0, 152.0], [46.0, 146.0], [47.0, 148.0], [48.0, 161.0], [49.0, 153.0], [50.0, 160.0], [51.0, 153.0], [52.0, 150.0], [53.0, 151.0], [54.0, 153.0], [55.0, 169.0], [56.0, 161.0], [57.0, 150.0], [58.0, 149.0], [59.0, 144.0], [60.0, 154.0], [61.0, 145.0], [62.0, 151.0], [63.0, 150.0], [64.0, 152.0], [65.0, 149.0], [66.0, 147.0], [67.0, 154.0], [68.0, 170.0], [69.0, 148.0], [70.0, 150.0], [71.0, 151.0], [72.0, 147.0], [73.0, 147.0], [74.0, 167.0], [75.0, 148.0], [76.0, 152.0], [77.0, 144.0], [78.0, 154.0], [79.0, 143.0], [80.0, 153.0], [81.0, 147.0], [82.0, 161.0], [83.0, 157.0], [84.0, 150.0], [85.0, 152.0], [86.0, 146.0], [87.0, 145.0], [88.0, 147.0], [89.0, 152.0], [90.0, 149.0], [91.0, 147.0], [92.0, 144.0], [93.0, 149.0], [94.0, 153.0], [95.0, 148.0], [96.0, 164.0], [97.0, 159.0], [98.0, 155.0], [99.0, 158.0], [100.0, 149.0], [101.0, 158.0], [102.0, 165.0], [103.0, 156.0], [104.0, 148.0], [105.0, 152.0], [106.0, 150.0], [107.0, 146.0], [108.0, 147.0], [109.0, 147.0], [110.0, 144.0], [111.0, 151.0], [112.0, 152.0], [113.0, 157.0], [114.0, 241.0], [115.0, 225.0], [116.0, 314.0], [117.0, 233.0], [118.0, 154.0], [119.0, 147.0], [120.0, 157.0], [121.0, 147.0], [122.0, 169.0], [123.0, 144.0], [124.0, 150.0], [125.0, 157.0], [126.0, 154.0], [127.0, 155.0], [128.0, 159.0], [129.0, 146.0], [130.0, 163.0], [131.0, 146.0], [132.0, 154.0], [133.0, 151.0], [134.0, 151.0], [135.0, 148.0], [136.0, 157.0], [137.0, 147.0], [138.0, 154.0], [139.0, 159.0], [140.0, 150.0], [141.0, 148.0], [142.0, 158.0], [143.0, 152.0], [144.0, 155.0], [145.0, 150.0], [146.0, 154.0], [147.0, 150.0], [148.0, 180.0], [149.0, 153.0], [150.0, 147.0], [151.0, 158.0], [152.0, 151.0], [153.0, 153.0], [154.0, 155.0], [155.0, 146.0], [156.0, 156.0], [157.0, 151.0], [158.0, 149.0], [159.0, 153.0], [160.0, 155.0], [161.0, 156.0], [162.0, 157.0], [163.0, 158.0], [164.0, 157.0], [165.0, 149.0], [166.0, 156.0], [167.0, 158.0], [168.0, 160.0], [169.0, 157.0], [170.0, 154.0], [1.0, 191.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[85.5, 156.1176470588235]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[4.0, 27.0], [5.0, 32.0], [6.0, 37.0], [7.0, 34.0], [8.0, 38.6], [10.0, 27.857142857142858], [11.0, 31.0], [12.0, 35.0], [14.0, 33.5], [15.0, 326.33333333333337], [16.0, 33.0], [17.0, 135.33333333333334], [18.0, 114.0], [19.0, 228.0], [20.0, 80.66666666666666], [21.0, 118.5], [22.0, 38.0], [23.0, 31.0], [24.0, 38.0], [25.0, 78.0], [26.0, 45.333333333333336], [27.0, 47.5], [28.0, 36.0], [29.0, 36.0], [30.0, 51.3], [31.0, 46.28571428571429], [32.0, 38.0], [33.0, 47.333333333333336], [34.0, 33.25], [35.0, 31.333333333333332], [36.0, 33.666666666666664], [37.0, 118.00000000000001], [38.0, 150.0], [39.0, 300.40000000000003], [40.0, 41.5], [41.0, 92.0], [42.0, 115.0], [43.0, 53.8], [44.0, 200.72727272727272], [45.0, 36.666666666666664], [46.0, 349.875], [47.0, 114.0909090909091], [48.0, 26.75], [49.0, 35.125], [50.0, 31.7], [51.0, 30.333333333333332], [52.0, 23.625], [53.0, 31.857142857142858], [54.0, 33.0625], [55.0, 32.285714285714285], [56.0, 28.333333333333332], [57.0, 30.4], [58.0, 28.000000000000004], [59.0, 40.38461538461539], [60.0, 30.999999999999996], [61.0, 34.92857142857143], [62.0, 30.25], [63.0, 44.57142857142857], [64.0, 33.125], [65.0, 31.470588235294116], [66.0, 27.099999999999998], [67.0, 84.9090909090909], [68.0, 51.00000000000001], [69.0, 32.45454545454545], [70.0, 45.81818181818181], [71.0, 28.166666666666668], [72.0, 29.818181818181817], [73.0, 141.75], [74.0, 28.0], [75.0, 125.66666666666666], [76.0, 31.857142857142858], [77.0, 74.28571428571429], [78.0, 90.37500000000001], [79.0, 329.8], [80.0, 72.18181818181819], [81.0, 46.833333333333336], [82.0, 713.4482758620691], [83.0, 528.5416666666666], [84.0, 92.22222222222223], [85.0, 552.8571428571429], [86.0, 703.95], [87.0, 622.25], [88.0, 518.5], [89.0, 1063.625], [90.0, 1009.047619047619], [91.0, 730.25], [92.0, 872.0384615384615], [93.0, 718.8], [94.0, 1099.6206896551726], [95.0, 1043.9090909090908], [96.0, 762.2307692307693], [97.0, 521.0], [98.0, 1014.8571428571428], [99.0, 1144.142857142857], [100.0, 1355.375], [101.0, 1164.4], [102.0, 893.4285714285716], [103.0, 347.42857142857144], [104.0, 357.6428571428571], [105.0, 355.1666666666667], [106.0, 619.3076923076923], [107.0, 330.1111111111111], [108.0, 987.8571428571428], [110.0, 602.0270270270269], [111.0, 950.4666666666667], [109.0, 631.375], [112.0, 1076.0], [113.0, 1015.7857142857142], [114.0, 822.952380952381], [115.0, 1154.0000000000002], [116.0, 789.8666666666666], [117.0, 740.1666666666666], [118.0, 630.2500000000001], [119.0, 684.3076923076923], [120.0, 1083.777777777778], [121.0, 1080.5555555555557], [122.0, 666.9090909090909], [123.0, 1310.2222222222222], [124.0, 574.1428571428572], [125.0, 1105.25], [126.0, 501.60714285714295], [127.0, 982.4000000000002], [128.0, 827.2272727272727], [129.0, 1096.5833333333335], [130.0, 934.3000000000001], [131.0, 991.2500000000001], [132.0, 1028.55], [133.0, 1166.4482758620686], [134.0, 1277.1034482758623], [135.0, 1135.0], [136.0, 1419.4285714285718], [137.0, 1347.8], [138.0, 919.3970588235295], [139.0, 979.7435897435898], [140.0, 1177.5624999999998], [141.0, 1084.7058823529412], [142.0, 995.9444444444445], [143.0, 1547.5], [144.0, 1317.2222222222224], [145.0, 1560.5], [146.0, 1435.5932203389834], [147.0, 1869.75], [148.0, 2007.7368421052631], [149.0, 1948.0208333333333], [150.0, 1790.7857142857142], [151.0, 1622.0000000000005], [152.0, 1646.4444444444441], [153.0, 1813.1612903225807], [154.0, 2120.2], [155.0, 2147.5], [156.0, 3802.365079365082], [157.0, 4491.614457831325], [158.0, 612.0285714285715], [159.0, 550.4285714285713], [160.0, 1901.7999999999997], [161.0, 548.0689655172413], [162.0, 1003.0666666666666], [163.0, 1977.4285714285713], [164.0, 2157.3], [165.0, 1159.5], [166.0, 2615.5714285714284], [167.0, 1702.7685185185187], [168.0, 2821.659459459461], [169.0, 3184.833333333333], [170.0, 2149.5296390863177], [1.0, 24.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[162.26758823529383, 2010.6055294117489]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 170.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1270.9666666666667, "minX": 1.58768526E12, "maxY": 258866.9, "series": [{"data": [[1.58768544E12, 258866.9], [1.5876861E12, 139624.96666666667], [1.5876858E12, 207546.36666666667], [1.5876855E12, 217062.56666666668], [1.58768586E12, 14384.2], [1.58768556E12, 240930.46666666667], [1.58768526E12, 19026.733333333334], [1.58768592E12, 173204.65], [1.58768562E12, 230558.58333333334], [1.58768532E12, 246820.6], [1.58768598E12, 214927.06666666668], [1.58768568E12, 233417.11666666667], [1.58768538E12, 243269.91666666666], [1.58768604E12, 244478.63333333333], [1.58768574E12, 230224.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58768544E12, 16237.7], [1.5876861E12, 8602.133333333333], [1.5876858E12, 18210.866666666665], [1.5876855E12, 14407.433333333332], [1.58768586E12, 38810.6], [1.58768556E12, 14836.066666666668], [1.58768526E12, 1270.9666666666667], [1.58768592E12, 19419.133333333335], [1.58768562E12, 15014.7], [1.58768532E12, 15511.366666666667], [1.58768598E12, 19355.433333333334], [1.58768568E12, 14793.4], [1.58768538E12, 15729.966666666667], [1.58768604E12, 17360.366666666665], [1.58768574E12, 14178.733333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876861E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2.2890451517394506, "minX": 1.58768526E12, "maxY": 3234.244999999999, "series": [{"data": [[1.58768544E12, 2660.5892700087993], [1.5876861E12, 450.32154340836036], [1.5876858E12, 2249.3241324921087], [1.5876855E12, 3191.8696939782853], [1.58768586E12, 3.313646368305206], [1.58768556E12, 3028.8614341085236], [1.58768526E12, 49.59154929577465], [1.58768592E12, 1736.5170370370372], [1.58768562E12, 2964.7463976945214], [1.58768532E12, 1430.2340842311453], [1.58768598E12, 1920.5509157509168], [1.58768568E12, 3035.339768339764], [1.58768538E12, 2748.4012738853494], [1.58768604E12, 2002.4790812141086], [1.58768574E12, 3234.244999999999]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768532E12, 155.89922480620154], [1.58768526E12, 156.8048780487805]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768544E12, 2610.8509700176396], [1.5876861E12, 444.8123924268498], [1.5876858E12, 2304.1960937499975], [1.5876855E12, 3204.4481037924143], [1.58768586E12, 2.2890451517394506], [1.58768556E12, 3012.516778523492], [1.58768526E12, 67.36470588235298], [1.58768592E12, 1831.9370424597348], [1.58768562E12, 2996.1520302171853], [1.58768532E12, 1413.8583333333343], [1.58768598E12, 1945.289120715348], [1.58768568E12, 3018.8509196515006], [1.58768538E12, 2786.1852861035427], [1.58768604E12, 2064.430107526881], [1.58768574E12, 3206.616480162764]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876861E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2.280903034789039, "minX": 1.58768526E12, "maxY": 3233.9539999999965, "series": [{"data": [[1.58768544E12, 2660.074758135449], [1.5876861E12, 449.89389067524104], [1.5876858E12, 2249.231861198748], [1.5876855E12, 3191.508390918069], [1.58768586E12, 3.3085106382978733], [1.58768556E12, 3028.5009689922467], [1.58768526E12, 48.6056338028169], [1.58768592E12, 1735.6481481481503], [1.58768562E12, 2964.457252641692], [1.58768532E12, 1429.9618021547499], [1.58768598E12, 1920.3648351648278], [1.58768568E12, 3034.687258687259], [1.58768538E12, 2747.9818016378517], [1.58768604E12, 2001.6562756357687], [1.58768574E12, 3233.9539999999965]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768532E12, 155.88372093023258], [1.58768526E12, 156.65853658536585]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768544E12, 2610.226631393298], [1.5876861E12, 444.34595524956956], [1.5876858E12, 2302.4484374999975], [1.5876855E12, 3204.046906187631], [1.58768586E12, 2.280903034789039], [1.58768556E12, 3012.18983700863], [1.58768526E12, 66.92941176470585], [1.58768592E12, 1831.3689604685221], [1.58768562E12, 2995.699716713882], [1.58768532E12, 1413.5768518518516], [1.58768598E12, 1944.9858420268217], [1.58768568E12, 3017.9351403678565], [1.58768538E12, 2785.583106267037], [1.58768604E12, 2063.628618693134], [1.58768574E12, 3206.2828077314357]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876861E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58768526E12, "maxY": 1.4634146341463414, "series": [{"data": [[1.58768544E12, 0.47405452946350035], [1.5876861E12, 0.08520900321543412], [1.5876858E12, 0.3209779179810728], [1.5876855E12, 0.3998025666337605], [1.58768586E12, 0.0], [1.58768556E12, 0.40600775193798483], [1.58768526E12, 0.4788732394366197], [1.58768592E12, 0.24222222222222212], [1.58768562E12, 0.5417867435158502], [1.58768532E12, 0.3418217433888344], [1.58768598E12, 0.30989010989010973], [1.58768568E12, 0.4488416988416989], [1.58768538E12, 0.45586897179253844], [1.58768604E12, 0.371616078753076], [1.58768574E12, 0.36500000000000027]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768532E12, 0.5813953488372092], [1.58768526E12, 1.4634146341463414]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768544E12, 0.4647266313932981], [1.5876861E12, 0.48020654044750394], [1.5876858E12, 0.4234374999999999], [1.5876855E12, 0.44710578842315335], [1.58768586E12, 0.4363434492968178], [1.58768556E12, 0.4333652924256948], [1.58768526E12, 0.5529411764705883], [1.58768592E12, 0.40995607613469975], [1.58768562E12, 0.5977337110481585], [1.58768532E12, 0.5240740740740742], [1.58768598E12, 0.42175856929955247], [1.58768568E12, 0.4365924491771544], [1.58768538E12, 0.5122615803814722], [1.58768604E12, 0.40612076095947053], [1.58768574E12, 0.4303153611393693]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876861E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.58768526E12, "maxY": 9583.0, "series": [{"data": [[1.58768544E12, 5461.0], [1.5876861E12, 2256.0], [1.5876858E12, 6495.0], [1.5876855E12, 9583.0], [1.58768556E12, 6710.0], [1.58768526E12, 911.0], [1.58768592E12, 7421.0], [1.58768562E12, 7936.0], [1.58768532E12, 5939.0], [1.58768598E12, 4314.0], [1.58768568E12, 5358.0], [1.58768538E12, 7471.0], [1.58768604E12, 6784.0], [1.58768574E12, 7130.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58768544E12, 40.0], [1.5876861E12, 15.0], [1.5876858E12, 229.0], [1.5876855E12, 164.0], [1.58768556E12, 120.0], [1.58768526E12, 21.0], [1.58768592E12, 2054.0], [1.58768562E12, 217.0], [1.58768532E12, 17.0], [1.58768598E12, 13.0], [1.58768568E12, 113.0], [1.58768538E12, 226.0], [1.58768604E12, 204.0], [1.58768574E12, 14.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58768544E12, 3785.2000000000003], [1.5876861E12, 1063.0], [1.5876858E12, 5593.8], [1.5876855E12, 6442.5], [1.58768556E12, 4648.0], [1.58768526E12, 162.0], [1.58768592E12, 4600.8], [1.58768562E12, 4772.8], [1.58768532E12, 3514.0], [1.58768598E12, 3414.6], [1.58768568E12, 4071.600000000001], [1.58768538E12, 4743.799999999999], [1.58768604E12, 3557.2000000000003], [1.58768574E12, 5905.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58768544E12, 4762.42], [1.5876861E12, 1643.8000000000002], [1.5876858E12, 6204.919999999998], [1.5876855E12, 8478.099999999999], [1.58768556E12, 5744.479999999989], [1.58768526E12, 299.4800000000064], [1.58768592E12, 6933.959999999999], [1.58768562E12, 6577.700000000001], [1.58768532E12, 5216.800000000001], [1.58768598E12, 3780.7200000000003], [1.58768568E12, 4817.460000000001], [1.58768538E12, 6031.999999999998], [1.58768604E12, 6274.079999999999], [1.58768574E12, 6713.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58768544E12, 4218.549999999999], [1.5876861E12, 1259.5999999999995], [1.5876858E12, 5849.2], [1.5876855E12, 7118.25], [1.58768556E12, 4940.5999999999985], [1.58768526E12, 185.29999999999998], [1.58768592E12, 5831.0], [1.58768562E12, 5234.599999999999], [1.58768532E12, 4155.149999999999], [1.58768598E12, 3585.7999999999997], [1.58768568E12, 4409.049999999999], [1.58768538E12, 5216.999999999997], [1.58768604E12, 4614.9], [1.58768574E12, 6166.799999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876861E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 3852.0, "series": [{"data": [[2.0, 44.0], [3.0, 35.0], [4.0, 41.0], [5.0, 34.0], [6.0, 33.0], [7.0, 28.0], [8.0, 39.5], [9.0, 42.0], [10.0, 34.0], [12.0, 1243.0], [13.0, 185.0], [14.0, 1289.5], [15.0, 131.0], [16.0, 41.5], [17.0, 1636.5], [18.0, 266.5], [19.0, 396.0], [20.0, 2369.5], [21.0, 3441.0], [22.0, 3318.5], [23.0, 2635.0], [24.0, 3025.5], [25.0, 3067.0], [26.0, 2854.0], [27.0, 2682.0], [28.0, 2492.0], [29.0, 2842.0], [30.0, 3006.5], [31.0, 3198.0], [33.0, 2912.0], [32.0, 2741.0], [35.0, 2857.0], [34.0, 2890.0], [37.0, 2741.0], [36.0, 2684.0], [39.0, 2846.0], [38.0, 2949.5], [41.0, 2609.0], [40.0, 2834.5], [42.0, 2003.0], [43.0, 2339.0], [44.0, 1466.0], [45.0, 2912.5], [46.0, 1427.0], [47.0, 2445.0], [49.0, 1638.0], [48.0, 1443.0], [51.0, 2434.0], [50.0, 2202.0], [52.0, 634.5], [53.0, 1061.0], [54.0, 1273.0], [55.0, 919.5], [56.0, 1022.5], [57.0, 1526.0], [58.0, 855.0], [61.0, 732.0], [60.0, 3255.5], [62.0, 610.5], [67.0, 2018.0], [65.0, 893.0], [68.0, 3506.5], [69.0, 3402.0], [80.0, 2355.0], [86.0, 3852.0], [85.0, 2119.0], [90.0, 3143.0], [95.0, 1859.0], [94.0, 3176.0], [115.0, 959.0], [144.0, 2760.5], [154.0, 3232.0], [1.0, 25.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[13.0, 2.0], [21.0, 3.0], [27.0, 1.0], [28.0, 3.0], [30.0, 2.0], [31.0, 3.0], [33.0, 2.0], [32.0, 136.0], [37.0, 2.0], [36.0, 2.0], [39.0, 2.0], [40.0, 2.0], [43.0, 2.0], [44.0, 2.0], [45.0, 3.0], [47.0, 2.0], [46.0, 2.5], [48.0, 2.0], [49.0, 2334.0], [53.0, 2.0], [54.0, 1774.0], [57.0, 3.0], [56.0, 2.0], [61.0, 2.0], [60.0, 1126.0], [62.0, 2.0], [64.0, 2.0], [67.0, 2.0], [66.0, 2.0], [68.0, 2.0], [71.0, 2.0], [69.0, 2.0], [70.0, 2.0], [75.0, 2.0], [74.0, 2.0], [72.0, 2.0], [73.0, 2.0], [78.0, 2.0], [76.0, 2.0], [77.0, 2.0], [79.0, 2.0], [80.0, 3.0], [81.0, 2.0], [83.0, 2.0], [82.0, 2.0], [86.0, 3.0], [85.0, 2.0], [87.0, 2.0], [84.0, 2.0], [88.0, 2.0], [91.0, 2.0], [90.0, 2.0], [89.0, 2.0], [95.0, 2.0], [93.0, 2.0], [94.0, 2.0], [92.0, 2.0], [99.0, 2.0], [97.0, 2.0], [96.0, 2.0], [100.0, 2.0], [102.0, 2.0], [101.0, 2.0], [104.0, 2.0], [106.0, 2.0], [111.0, 2.0], [109.0, 2.0], [115.0, 2652.5], [112.0, 2.0], [116.0, 2.0], [120.0, 2.0], [131.0, 2.0], [144.0, 1376.0], [154.0, 1567.0], [152.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 154.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 3852.0, "series": [{"data": [[2.0, 43.5], [3.0, 35.0], [4.0, 40.5], [5.0, 33.0], [6.0, 32.5], [7.0, 28.0], [8.0, 39.0], [9.0, 42.0], [10.0, 33.5], [12.0, 1242.0], [13.0, 185.0], [14.0, 1254.5], [15.0, 131.0], [16.0, 41.0], [17.0, 1636.5], [18.0, 266.0], [19.0, 396.0], [20.0, 2303.5], [21.0, 3441.0], [22.0, 3318.5], [23.0, 2635.0], [24.0, 3025.5], [25.0, 3067.0], [26.0, 2854.0], [27.0, 2682.0], [28.0, 2492.0], [29.0, 2841.5], [30.0, 3006.5], [31.0, 3196.5], [33.0, 2911.0], [32.0, 2741.0], [35.0, 2857.0], [34.0, 2890.0], [37.0, 2741.0], [36.0, 2684.0], [39.0, 2844.0], [38.0, 2949.5], [41.0, 2609.0], [40.0, 2834.5], [42.0, 2003.0], [43.0, 2339.0], [44.0, 1466.0], [45.0, 2912.5], [46.0, 1427.0], [47.0, 2445.0], [49.0, 1638.0], [48.0, 1443.0], [51.0, 2434.0], [50.0, 2202.0], [52.0, 634.5], [53.0, 1061.0], [54.0, 1273.0], [55.0, 919.5], [56.0, 1019.5], [57.0, 1526.0], [58.0, 854.5], [61.0, 732.0], [60.0, 3255.5], [62.0, 610.5], [67.0, 2018.0], [65.0, 893.0], [68.0, 3506.5], [69.0, 3402.0], [80.0, 2355.0], [86.0, 3852.0], [85.0, 2118.5], [90.0, 3143.0], [95.0, 1859.0], [94.0, 3176.0], [115.0, 958.0], [144.0, 2760.5], [154.0, 3232.0], [1.0, 25.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[13.0, 2.0], [21.0, 3.0], [27.0, 1.0], [28.0, 3.0], [30.0, 2.0], [31.0, 3.0], [33.0, 2.0], [32.0, 136.0], [37.0, 2.0], [36.0, 2.0], [39.0, 2.0], [40.0, 2.0], [43.0, 2.0], [44.0, 2.0], [45.0, 3.0], [47.0, 2.0], [46.0, 2.5], [48.0, 2.0], [49.0, 2334.0], [53.0, 2.0], [54.0, 1774.0], [57.0, 3.0], [56.0, 2.0], [61.0, 2.0], [60.0, 1126.0], [62.0, 2.0], [64.0, 2.0], [67.0, 2.0], [66.0, 2.0], [68.0, 2.0], [71.0, 2.0], [69.0, 2.0], [70.0, 2.0], [75.0, 2.0], [74.0, 2.0], [72.0, 2.0], [73.0, 2.0], [78.0, 2.0], [76.0, 2.0], [77.0, 2.0], [79.0, 2.0], [80.0, 3.0], [81.0, 2.0], [83.0, 2.0], [82.0, 2.0], [86.0, 3.0], [85.0, 2.0], [87.0, 2.0], [84.0, 2.0], [88.0, 2.0], [91.0, 2.0], [90.0, 2.0], [89.0, 2.0], [95.0, 2.0], [93.0, 2.0], [94.0, 2.0], [92.0, 2.0], [99.0, 2.0], [97.0, 2.0], [96.0, 2.0], [100.0, 2.0], [102.0, 2.0], [101.0, 2.0], [104.0, 2.0], [106.0, 2.0], [111.0, 2.0], [109.0, 2.0], [115.0, 2652.5], [112.0, 2.0], [116.0, 2.0], [120.0, 2.0], [131.0, 2.0], [144.0, 1376.0], [154.0, 1567.0], [152.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 154.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.4, "minX": 1.58768526E12, "maxY": 90.46666666666667, "series": [{"data": [[1.58768544E12, 37.46666666666667], [1.5876861E12, 19.75], [1.5876858E12, 40.483333333333334], [1.5876855E12, 33.88333333333333], [1.58768586E12, 90.46666666666667], [1.58768556E12, 34.5], [1.58768526E12, 3.4], [1.58768592E12, 46.983333333333334], [1.58768562E12, 35.15], [1.58768532E12, 38.75], [1.58768598E12, 44.63333333333333], [1.58768568E12, 34.65], [1.58768538E12, 36.916666666666664], [1.58768604E12, 39.53333333333333], [1.58768574E12, 32.93333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876861E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.58768526E12, "maxY": 90.46666666666667, "series": [{"data": [[1.58768544E12, 37.13333333333333], [1.5876861E12, 20.05], [1.5876858E12, 29.383333333333333], [1.5876855E12, 31.066666666666666], [1.58768556E12, 34.583333333333336], [1.58768526E12, 3.283333333333333], [1.58768592E12, 24.383333333333333], [1.58768562E12, 33.016666666666666], [1.58768532E12, 37.166666666666664], [1.58768598E12, 30.516666666666666], [1.58768568E12, 33.46666666666667], [1.58768538E12, 34.85], [1.58768604E12, 34.88333333333333], [1.58768574E12, 33.05]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.5876858E12, 0.36666666666666664], [1.58768604E12, 0.3333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.58768592E12, 20.883333333333333], [1.58768544E12, 0.7166666666666667], [1.58768562E12, 1.9833333333333334], [1.5876858E12, 12.7], [1.58768598E12, 14.6], [1.5876855E12, 2.5166666666666666], [1.58768568E12, 1.0166666666666666], [1.58768586E12, 90.46666666666667], [1.58768538E12, 1.8166666666666667], [1.58768604E12, 5.25]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.5876858E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876861E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.58768526E12, "maxY": 45.43333333333333, "series": [{"data": [[1.58768532E12, 2.15], [1.58768526E12, 0.6833333333333333]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58768544E12, 18.516666666666666], [1.5876861E12, 10.366666666666667], [1.5876858E12, 14.633333333333333], [1.5876855E12, 15.633333333333333], [1.58768556E12, 17.2], [1.58768526E12, 1.1833333333333333], [1.58768592E12, 11.983333333333333], [1.58768562E12, 16.383333333333333], [1.58768532E12, 17.016666666666666], [1.58768598E12, 15.316666666666666], [1.58768568E12, 16.783333333333335], [1.58768538E12, 17.45], [1.58768604E12, 17.45], [1.58768574E12, 16.666666666666668]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58768592E12, 10.516666666666667], [1.58768544E12, 0.43333333333333335], [1.58768562E12, 0.9666666666666667], [1.5876858E12, 6.5], [1.58768598E12, 7.433333333333334], [1.5876855E12, 1.25], [1.58768568E12, 0.48333333333333334], [1.58768586E12, 45.43333333333333], [1.58768538E12, 0.8666666666666667], [1.58768604E12, 2.8666666666666667]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.58768544E12, 18.616666666666667], [1.5876861E12, 9.683333333333334], [1.5876858E12, 14.75], [1.5876855E12, 15.433333333333334], [1.58768556E12, 17.383333333333333], [1.58768526E12, 1.4166666666666667], [1.58768592E12, 12.4], [1.58768562E12, 16.633333333333333], [1.58768532E12, 18.0], [1.58768598E12, 15.2], [1.58768568E12, 16.683333333333334], [1.58768538E12, 17.4], [1.58768604E12, 17.433333333333334], [1.58768574E12, 16.383333333333333]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58768592E12, 10.366666666666667], [1.58768544E12, 0.2833333333333333], [1.58768562E12, 1.0166666666666666], [1.5876858E12, 6.583333333333333], [1.58768598E12, 7.166666666666667], [1.5876855E12, 1.2666666666666666], [1.58768568E12, 0.5333333333333333], [1.58768586E12, 45.03333333333333], [1.58768538E12, 0.95], [1.58768604E12, 2.716666666666667]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876861E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.7166666666666667, "minX": 1.58768526E12, "maxY": 90.46666666666667, "series": [{"data": [[1.58768544E12, 37.13333333333333], [1.5876861E12, 20.05], [1.5876858E12, 29.383333333333333], [1.5876855E12, 31.066666666666666], [1.58768556E12, 34.583333333333336], [1.58768526E12, 3.283333333333333], [1.58768592E12, 24.383333333333333], [1.58768562E12, 33.016666666666666], [1.58768532E12, 37.166666666666664], [1.58768598E12, 30.516666666666666], [1.58768568E12, 33.46666666666667], [1.58768538E12, 34.85], [1.58768604E12, 34.88333333333333], [1.58768574E12, 33.05]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58768592E12, 20.883333333333333], [1.58768544E12, 0.7166666666666667], [1.58768562E12, 1.9833333333333334], [1.5876858E12, 13.083333333333334], [1.58768598E12, 14.6], [1.5876855E12, 2.5166666666666666], [1.58768568E12, 1.0166666666666666], [1.58768586E12, 90.46666666666667], [1.58768538E12, 1.8166666666666667], [1.58768604E12, 5.583333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876861E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

