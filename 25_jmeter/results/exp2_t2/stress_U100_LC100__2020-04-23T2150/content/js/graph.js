/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "maxY": 5673.0, "series": [{"data": [[0.0, 10.0], [0.1, 11.0], [0.2, 12.0], [0.3, 13.0], [0.4, 13.0], [0.5, 13.0], [0.6, 14.0], [0.7, 14.0], [0.8, 14.0], [0.9, 14.0], [1.0, 15.0], [1.1, 15.0], [1.2, 15.0], [1.3, 15.0], [1.4, 15.0], [1.5, 16.0], [1.6, 16.0], [1.7, 16.0], [1.8, 16.0], [1.9, 16.0], [2.0, 16.0], [2.1, 16.0], [2.2, 16.0], [2.3, 17.0], [2.4, 17.0], [2.5, 17.0], [2.6, 17.0], [2.7, 17.0], [2.8, 17.0], [2.9, 17.0], [3.0, 17.0], [3.1, 17.0], [3.2, 17.0], [3.3, 17.0], [3.4, 18.0], [3.5, 18.0], [3.6, 18.0], [3.7, 18.0], [3.8, 18.0], [3.9, 18.0], [4.0, 18.0], [4.1, 18.0], [4.2, 18.0], [4.3, 18.0], [4.4, 18.0], [4.5, 18.0], [4.6, 18.0], [4.7, 19.0], [4.8, 19.0], [4.9, 19.0], [5.0, 19.0], [5.1, 19.0], [5.2, 19.0], [5.3, 19.0], [5.4, 19.0], [5.5, 19.0], [5.6, 19.0], [5.7, 19.0], [5.8, 19.0], [5.9, 19.0], [6.0, 19.0], [6.1, 19.0], [6.2, 20.0], [6.3, 20.0], [6.4, 20.0], [6.5, 20.0], [6.6, 20.0], [6.7, 20.0], [6.8, 20.0], [6.9, 20.0], [7.0, 20.0], [7.1, 20.0], [7.2, 20.0], [7.3, 20.0], [7.4, 20.0], [7.5, 20.0], [7.6, 21.0], [7.7, 21.0], [7.8, 21.0], [7.9, 21.0], [8.0, 21.0], [8.1, 21.0], [8.2, 21.0], [8.3, 21.0], [8.4, 21.0], [8.5, 21.0], [8.6, 21.0], [8.7, 21.0], [8.8, 21.0], [8.9, 21.0], [9.0, 21.0], [9.1, 21.0], [9.2, 22.0], [9.3, 22.0], [9.4, 22.0], [9.5, 22.0], [9.6, 22.0], [9.7, 22.0], [9.8, 22.0], [9.9, 22.0], [10.0, 22.0], [10.1, 22.0], [10.2, 22.0], [10.3, 22.0], [10.4, 22.0], [10.5, 22.0], [10.6, 22.0], [10.7, 22.0], [10.8, 23.0], [10.9, 23.0], [11.0, 23.0], [11.1, 23.0], [11.2, 23.0], [11.3, 23.0], [11.4, 23.0], [11.5, 23.0], [11.6, 23.0], [11.7, 23.0], [11.8, 23.0], [11.9, 23.0], [12.0, 23.0], [12.1, 23.0], [12.2, 23.0], [12.3, 23.0], [12.4, 23.0], [12.5, 23.0], [12.6, 24.0], [12.7, 24.0], [12.8, 24.0], [12.9, 24.0], [13.0, 24.0], [13.1, 24.0], [13.2, 24.0], [13.3, 24.0], [13.4, 24.0], [13.5, 24.0], [13.6, 24.0], [13.7, 24.0], [13.8, 24.0], [13.9, 24.0], [14.0, 24.0], [14.1, 25.0], [14.2, 25.0], [14.3, 25.0], [14.4, 25.0], [14.5, 25.0], [14.6, 25.0], [14.7, 25.0], [14.8, 25.0], [14.9, 25.0], [15.0, 25.0], [15.1, 25.0], [15.2, 25.0], [15.3, 25.0], [15.4, 25.0], [15.5, 25.0], [15.6, 25.0], [15.7, 26.0], [15.8, 26.0], [15.9, 26.0], [16.0, 26.0], [16.1, 26.0], [16.2, 26.0], [16.3, 26.0], [16.4, 26.0], [16.5, 26.0], [16.6, 26.0], [16.7, 26.0], [16.8, 26.0], [16.9, 26.0], [17.0, 26.0], [17.1, 27.0], [17.2, 27.0], [17.3, 27.0], [17.4, 27.0], [17.5, 27.0], [17.6, 27.0], [17.7, 27.0], [17.8, 27.0], [17.9, 27.0], [18.0, 27.0], [18.1, 27.0], [18.2, 27.0], [18.3, 28.0], [18.4, 28.0], [18.5, 28.0], [18.6, 28.0], [18.7, 28.0], [18.8, 28.0], [18.9, 28.0], [19.0, 28.0], [19.1, 28.0], [19.2, 28.0], [19.3, 28.0], [19.4, 28.0], [19.5, 28.0], [19.6, 29.0], [19.7, 29.0], [19.8, 29.0], [19.9, 29.0], [20.0, 29.0], [20.1, 29.0], [20.2, 29.0], [20.3, 29.0], [20.4, 29.0], [20.5, 29.0], [20.6, 30.0], [20.7, 30.0], [20.8, 30.0], [20.9, 30.0], [21.0, 30.0], [21.1, 30.0], [21.2, 31.0], [21.3, 31.0], [21.4, 31.0], [21.5, 31.0], [21.6, 31.0], [21.7, 31.0], [21.8, 31.0], [21.9, 32.0], [22.0, 32.0], [22.1, 32.0], [22.2, 32.0], [22.3, 32.0], [22.4, 33.0], [22.5, 33.0], [22.6, 33.0], [22.7, 33.0], [22.8, 33.0], [22.9, 33.0], [23.0, 34.0], [23.1, 34.0], [23.2, 34.0], [23.3, 34.0], [23.4, 34.0], [23.5, 35.0], [23.6, 35.0], [23.7, 35.0], [23.8, 35.0], [23.9, 36.0], [24.0, 36.0], [24.1, 37.0], [24.2, 37.0], [24.3, 38.0], [24.4, 39.0], [24.5, 39.0], [24.6, 41.0], [24.7, 43.0], [24.8, 46.0], [24.9, 49.0], [25.0, 54.0], [25.1, 91.0], [25.2, 105.0], [25.3, 120.0], [25.4, 140.0], [25.5, 165.0], [25.6, 191.0], [25.7, 205.0], [25.8, 223.0], [25.9, 231.0], [26.0, 236.0], [26.1, 246.0], [26.2, 256.0], [26.3, 264.0], [26.4, 276.0], [26.5, 288.0], [26.6, 301.0], [26.7, 309.0], [26.8, 315.0], [26.9, 325.0], [27.0, 332.0], [27.1, 342.0], [27.2, 350.0], [27.3, 360.0], [27.4, 363.0], [27.5, 377.0], [27.6, 384.0], [27.7, 393.0], [27.8, 401.0], [27.9, 409.0], [28.0, 417.0], [28.1, 423.0], [28.2, 429.0], [28.3, 433.0], [28.4, 437.0], [28.5, 442.0], [28.6, 445.0], [28.7, 452.0], [28.8, 458.0], [28.9, 465.0], [29.0, 468.0], [29.1, 472.0], [29.2, 477.0], [29.3, 481.0], [29.4, 486.0], [29.5, 492.0], [29.6, 500.0], [29.7, 504.0], [29.8, 509.0], [29.9, 518.0], [30.0, 523.0], [30.1, 527.0], [30.2, 531.0], [30.3, 537.0], [30.4, 540.0], [30.5, 546.0], [30.6, 549.0], [30.7, 555.0], [30.8, 559.0], [30.9, 566.0], [31.0, 572.0], [31.1, 575.0], [31.2, 581.0], [31.3, 584.0], [31.4, 589.0], [31.5, 594.0], [31.6, 597.0], [31.7, 600.0], [31.8, 603.0], [31.9, 605.0], [32.0, 608.0], [32.1, 615.0], [32.2, 623.0], [32.3, 626.0], [32.4, 632.0], [32.5, 634.0], [32.6, 638.0], [32.7, 642.0], [32.8, 645.0], [32.9, 649.0], [33.0, 652.0], [33.1, 654.0], [33.2, 661.0], [33.3, 663.0], [33.4, 668.0], [33.5, 670.0], [33.6, 675.0], [33.7, 680.0], [33.8, 682.0], [33.9, 686.0], [34.0, 690.0], [34.1, 695.0], [34.2, 699.0], [34.3, 701.0], [34.4, 704.0], [34.5, 706.0], [34.6, 710.0], [34.7, 716.0], [34.8, 719.0], [34.9, 722.0], [35.0, 726.0], [35.1, 729.0], [35.2, 730.0], [35.3, 734.0], [35.4, 738.0], [35.5, 741.0], [35.6, 746.0], [35.7, 751.0], [35.8, 756.0], [35.9, 759.0], [36.0, 763.0], [36.1, 767.0], [36.2, 770.0], [36.3, 773.0], [36.4, 777.0], [36.5, 780.0], [36.6, 783.0], [36.7, 787.0], [36.8, 790.0], [36.9, 793.0], [37.0, 798.0], [37.1, 801.0], [37.2, 804.0], [37.3, 807.0], [37.4, 810.0], [37.5, 813.0], [37.6, 816.0], [37.7, 820.0], [37.8, 822.0], [37.9, 825.0], [38.0, 828.0], [38.1, 832.0], [38.2, 835.0], [38.3, 840.0], [38.4, 842.0], [38.5, 845.0], [38.6, 848.0], [38.7, 851.0], [38.8, 854.0], [38.9, 861.0], [39.0, 864.0], [39.1, 866.0], [39.2, 869.0], [39.3, 873.0], [39.4, 876.0], [39.5, 878.0], [39.6, 882.0], [39.7, 886.0], [39.8, 889.0], [39.9, 892.0], [40.0, 896.0], [40.1, 899.0], [40.2, 902.0], [40.3, 905.0], [40.4, 906.0], [40.5, 910.0], [40.6, 911.0], [40.7, 913.0], [40.8, 915.0], [40.9, 918.0], [41.0, 921.0], [41.1, 923.0], [41.2, 925.0], [41.3, 928.0], [41.4, 930.0], [41.5, 931.0], [41.6, 933.0], [41.7, 936.0], [41.8, 939.0], [41.9, 943.0], [42.0, 947.0], [42.1, 949.0], [42.2, 951.0], [42.3, 953.0], [42.4, 956.0], [42.5, 959.0], [42.6, 962.0], [42.7, 964.0], [42.8, 966.0], [42.9, 967.0], [43.0, 969.0], [43.1, 971.0], [43.2, 974.0], [43.3, 978.0], [43.4, 982.0], [43.5, 983.0], [43.6, 985.0], [43.7, 988.0], [43.8, 989.0], [43.9, 992.0], [44.0, 995.0], [44.1, 998.0], [44.2, 1001.0], [44.3, 1004.0], [44.4, 1006.0], [44.5, 1010.0], [44.6, 1012.0], [44.7, 1015.0], [44.8, 1016.0], [44.9, 1019.0], [45.0, 1021.0], [45.1, 1023.0], [45.2, 1025.0], [45.3, 1028.0], [45.4, 1030.0], [45.5, 1032.0], [45.6, 1035.0], [45.7, 1037.0], [45.8, 1040.0], [45.9, 1042.0], [46.0, 1045.0], [46.1, 1047.0], [46.2, 1049.0], [46.3, 1051.0], [46.4, 1054.0], [46.5, 1057.0], [46.6, 1059.0], [46.7, 1061.0], [46.8, 1065.0], [46.9, 1068.0], [47.0, 1071.0], [47.1, 1074.0], [47.2, 1076.0], [47.3, 1078.0], [47.4, 1079.0], [47.5, 1081.0], [47.6, 1084.0], [47.7, 1087.0], [47.8, 1089.0], [47.9, 1090.0], [48.0, 1092.0], [48.1, 1094.0], [48.2, 1097.0], [48.3, 1101.0], [48.4, 1104.0], [48.5, 1106.0], [48.6, 1108.0], [48.7, 1111.0], [48.8, 1114.0], [48.9, 1117.0], [49.0, 1119.0], [49.1, 1122.0], [49.2, 1124.0], [49.3, 1127.0], [49.4, 1129.0], [49.5, 1131.0], [49.6, 1133.0], [49.7, 1134.0], [49.8, 1136.0], [49.9, 1138.0], [50.0, 1141.0], [50.1, 1144.0], [50.2, 1146.0], [50.3, 1150.0], [50.4, 1153.0], [50.5, 1155.0], [50.6, 1157.0], [50.7, 1160.0], [50.8, 1162.0], [50.9, 1165.0], [51.0, 1167.0], [51.1, 1170.0], [51.2, 1172.0], [51.3, 1174.0], [51.4, 1177.0], [51.5, 1178.0], [51.6, 1180.0], [51.7, 1182.0], [51.8, 1184.0], [51.9, 1187.0], [52.0, 1190.0], [52.1, 1192.0], [52.2, 1197.0], [52.3, 1202.0], [52.4, 1205.0], [52.5, 1207.0], [52.6, 1209.0], [52.7, 1211.0], [52.8, 1212.0], [52.9, 1213.0], [53.0, 1215.0], [53.1, 1217.0], [53.2, 1219.0], [53.3, 1221.0], [53.4, 1224.0], [53.5, 1226.0], [53.6, 1228.0], [53.7, 1230.0], [53.8, 1232.0], [53.9, 1234.0], [54.0, 1237.0], [54.1, 1238.0], [54.2, 1243.0], [54.3, 1247.0], [54.4, 1248.0], [54.5, 1250.0], [54.6, 1253.0], [54.7, 1255.0], [54.8, 1259.0], [54.9, 1260.0], [55.0, 1263.0], [55.1, 1265.0], [55.2, 1267.0], [55.3, 1271.0], [55.4, 1273.0], [55.5, 1274.0], [55.6, 1277.0], [55.7, 1278.0], [55.8, 1281.0], [55.9, 1284.0], [56.0, 1286.0], [56.1, 1288.0], [56.2, 1291.0], [56.3, 1293.0], [56.4, 1294.0], [56.5, 1297.0], [56.6, 1300.0], [56.7, 1302.0], [56.8, 1306.0], [56.9, 1307.0], [57.0, 1308.0], [57.1, 1311.0], [57.2, 1313.0], [57.3, 1315.0], [57.4, 1317.0], [57.5, 1319.0], [57.6, 1322.0], [57.7, 1325.0], [57.8, 1328.0], [57.9, 1330.0], [58.0, 1332.0], [58.1, 1336.0], [58.2, 1338.0], [58.3, 1341.0], [58.4, 1344.0], [58.5, 1347.0], [58.6, 1349.0], [58.7, 1352.0], [58.8, 1354.0], [58.9, 1356.0], [59.0, 1360.0], [59.1, 1362.0], [59.2, 1364.0], [59.3, 1365.0], [59.4, 1368.0], [59.5, 1371.0], [59.6, 1373.0], [59.7, 1375.0], [59.8, 1379.0], [59.9, 1381.0], [60.0, 1384.0], [60.1, 1387.0], [60.2, 1389.0], [60.3, 1391.0], [60.4, 1393.0], [60.5, 1394.0], [60.6, 1399.0], [60.7, 1401.0], [60.8, 1404.0], [60.9, 1405.0], [61.0, 1408.0], [61.1, 1410.0], [61.2, 1413.0], [61.3, 1415.0], [61.4, 1418.0], [61.5, 1420.0], [61.6, 1422.0], [61.7, 1423.0], [61.8, 1426.0], [61.9, 1428.0], [62.0, 1432.0], [62.1, 1434.0], [62.2, 1437.0], [62.3, 1438.0], [62.4, 1441.0], [62.5, 1443.0], [62.6, 1446.0], [62.7, 1449.0], [62.8, 1451.0], [62.9, 1453.0], [63.0, 1455.0], [63.1, 1457.0], [63.2, 1458.0], [63.3, 1461.0], [63.4, 1465.0], [63.5, 1468.0], [63.6, 1472.0], [63.7, 1473.0], [63.8, 1475.0], [63.9, 1477.0], [64.0, 1479.0], [64.1, 1481.0], [64.2, 1484.0], [64.3, 1484.0], [64.4, 1487.0], [64.5, 1492.0], [64.6, 1494.0], [64.7, 1497.0], [64.8, 1501.0], [64.9, 1503.0], [65.0, 1504.0], [65.1, 1506.0], [65.2, 1508.0], [65.3, 1510.0], [65.4, 1515.0], [65.5, 1519.0], [65.6, 1521.0], [65.7, 1524.0], [65.8, 1526.0], [65.9, 1529.0], [66.0, 1532.0], [66.1, 1534.0], [66.2, 1537.0], [66.3, 1539.0], [66.4, 1541.0], [66.5, 1544.0], [66.6, 1546.0], [66.7, 1548.0], [66.8, 1553.0], [66.9, 1554.0], [67.0, 1557.0], [67.1, 1560.0], [67.2, 1563.0], [67.3, 1566.0], [67.4, 1569.0], [67.5, 1570.0], [67.6, 1572.0], [67.7, 1574.0], [67.8, 1576.0], [67.9, 1580.0], [68.0, 1583.0], [68.1, 1585.0], [68.2, 1587.0], [68.3, 1589.0], [68.4, 1591.0], [68.5, 1594.0], [68.6, 1597.0], [68.7, 1600.0], [68.8, 1602.0], [68.9, 1605.0], [69.0, 1608.0], [69.1, 1612.0], [69.2, 1615.0], [69.3, 1617.0], [69.4, 1620.0], [69.5, 1623.0], [69.6, 1625.0], [69.7, 1628.0], [69.8, 1631.0], [69.9, 1635.0], [70.0, 1639.0], [70.1, 1641.0], [70.2, 1643.0], [70.3, 1644.0], [70.4, 1647.0], [70.5, 1648.0], [70.6, 1651.0], [70.7, 1653.0], [70.8, 1654.0], [70.9, 1656.0], [71.0, 1658.0], [71.1, 1660.0], [71.2, 1662.0], [71.3, 1665.0], [71.4, 1667.0], [71.5, 1671.0], [71.6, 1673.0], [71.7, 1675.0], [71.8, 1677.0], [71.9, 1678.0], [72.0, 1681.0], [72.1, 1683.0], [72.2, 1686.0], [72.3, 1688.0], [72.4, 1691.0], [72.5, 1693.0], [72.6, 1697.0], [72.7, 1700.0], [72.8, 1703.0], [72.9, 1706.0], [73.0, 1708.0], [73.1, 1710.0], [73.2, 1713.0], [73.3, 1716.0], [73.4, 1719.0], [73.5, 1723.0], [73.6, 1725.0], [73.7, 1729.0], [73.8, 1733.0], [73.9, 1738.0], [74.0, 1742.0], [74.1, 1747.0], [74.2, 1750.0], [74.3, 1753.0], [74.4, 1755.0], [74.5, 1757.0], [74.6, 1760.0], [74.7, 1764.0], [74.8, 1766.0], [74.9, 1770.0], [75.0, 1774.0], [75.1, 1776.0], [75.2, 1778.0], [75.3, 1779.0], [75.4, 1782.0], [75.5, 1783.0], [75.6, 1786.0], [75.7, 1788.0], [75.8, 1791.0], [75.9, 1793.0], [76.0, 1796.0], [76.1, 1799.0], [76.2, 1803.0], [76.3, 1805.0], [76.4, 1807.0], [76.5, 1810.0], [76.6, 1811.0], [76.7, 1814.0], [76.8, 1819.0], [76.9, 1822.0], [77.0, 1826.0], [77.1, 1830.0], [77.2, 1833.0], [77.3, 1836.0], [77.4, 1838.0], [77.5, 1840.0], [77.6, 1843.0], [77.7, 1845.0], [77.8, 1848.0], [77.9, 1850.0], [78.0, 1854.0], [78.1, 1855.0], [78.2, 1858.0], [78.3, 1865.0], [78.4, 1866.0], [78.5, 1869.0], [78.6, 1872.0], [78.7, 1875.0], [78.8, 1879.0], [78.9, 1883.0], [79.0, 1886.0], [79.1, 1891.0], [79.2, 1894.0], [79.3, 1897.0], [79.4, 1899.0], [79.5, 1903.0], [79.6, 1906.0], [79.7, 1909.0], [79.8, 1910.0], [79.9, 1914.0], [80.0, 1918.0], [80.1, 1920.0], [80.2, 1924.0], [80.3, 1928.0], [80.4, 1930.0], [80.5, 1935.0], [80.6, 1938.0], [80.7, 1942.0], [80.8, 1944.0], [80.9, 1947.0], [81.0, 1950.0], [81.1, 1956.0], [81.2, 1960.0], [81.3, 1962.0], [81.4, 1966.0], [81.5, 1968.0], [81.6, 1972.0], [81.7, 1976.0], [81.8, 1981.0], [81.9, 1985.0], [82.0, 1988.0], [82.1, 1992.0], [82.2, 1995.0], [82.3, 1999.0], [82.4, 2005.0], [82.5, 2007.0], [82.6, 2012.0], [82.7, 2014.0], [82.8, 2017.0], [82.9, 2020.0], [83.0, 2023.0], [83.1, 2026.0], [83.2, 2029.0], [83.3, 2033.0], [83.4, 2036.0], [83.5, 2039.0], [83.6, 2042.0], [83.7, 2047.0], [83.8, 2051.0], [83.9, 2055.0], [84.0, 2059.0], [84.1, 2065.0], [84.2, 2068.0], [84.3, 2072.0], [84.4, 2077.0], [84.5, 2081.0], [84.6, 2085.0], [84.7, 2087.0], [84.8, 2092.0], [84.9, 2096.0], [85.0, 2100.0], [85.1, 2106.0], [85.2, 2112.0], [85.3, 2117.0], [85.4, 2122.0], [85.5, 2126.0], [85.6, 2131.0], [85.7, 2136.0], [85.8, 2139.0], [85.9, 2145.0], [86.0, 2150.0], [86.1, 2154.0], [86.2, 2161.0], [86.3, 2166.0], [86.4, 2169.0], [86.5, 2174.0], [86.6, 2183.0], [86.7, 2188.0], [86.8, 2194.0], [86.9, 2198.0], [87.0, 2203.0], [87.1, 2208.0], [87.2, 2212.0], [87.3, 2215.0], [87.4, 2221.0], [87.5, 2226.0], [87.6, 2229.0], [87.7, 2235.0], [87.8, 2240.0], [87.9, 2248.0], [88.0, 2255.0], [88.1, 2259.0], [88.2, 2264.0], [88.3, 2269.0], [88.4, 2272.0], [88.5, 2277.0], [88.6, 2278.0], [88.7, 2283.0], [88.8, 2287.0], [88.9, 2292.0], [89.0, 2299.0], [89.1, 2302.0], [89.2, 2308.0], [89.3, 2311.0], [89.4, 2315.0], [89.5, 2319.0], [89.6, 2325.0], [89.7, 2331.0], [89.8, 2336.0], [89.9, 2344.0], [90.0, 2349.0], [90.1, 2357.0], [90.2, 2367.0], [90.3, 2371.0], [90.4, 2378.0], [90.5, 2383.0], [90.6, 2394.0], [90.7, 2398.0], [90.8, 2407.0], [90.9, 2414.0], [91.0, 2418.0], [91.1, 2422.0], [91.2, 2430.0], [91.3, 2437.0], [91.4, 2442.0], [91.5, 2447.0], [91.6, 2456.0], [91.7, 2464.0], [91.8, 2469.0], [91.9, 2480.0], [92.0, 2487.0], [92.1, 2494.0], [92.2, 2501.0], [92.3, 2509.0], [92.4, 2515.0], [92.5, 2520.0], [92.6, 2528.0], [92.7, 2533.0], [92.8, 2543.0], [92.9, 2547.0], [93.0, 2558.0], [93.1, 2564.0], [93.2, 2572.0], [93.3, 2579.0], [93.4, 2588.0], [93.5, 2598.0], [93.6, 2609.0], [93.7, 2620.0], [93.8, 2625.0], [93.9, 2643.0], [94.0, 2648.0], [94.1, 2655.0], [94.2, 2658.0], [94.3, 2672.0], [94.4, 2676.0], [94.5, 2684.0], [94.6, 2691.0], [94.7, 2698.0], [94.8, 2708.0], [94.9, 2715.0], [95.0, 2722.0], [95.1, 2731.0], [95.2, 2739.0], [95.3, 2750.0], [95.4, 2762.0], [95.5, 2773.0], [95.6, 2785.0], [95.7, 2800.0], [95.8, 2814.0], [95.9, 2825.0], [96.0, 2832.0], [96.1, 2846.0], [96.2, 2852.0], [96.3, 2868.0], [96.4, 2877.0], [96.5, 2889.0], [96.6, 2906.0], [96.7, 2920.0], [96.8, 2932.0], [96.9, 2948.0], [97.0, 2975.0], [97.1, 3003.0], [97.2, 3010.0], [97.3, 3030.0], [97.4, 3043.0], [97.5, 3058.0], [97.6, 3075.0], [97.7, 3094.0], [97.8, 3119.0], [97.9, 3139.0], [98.0, 3160.0], [98.1, 3187.0], [98.2, 3206.0], [98.3, 3221.0], [98.4, 3242.0], [98.5, 3262.0], [98.6, 3283.0], [98.7, 3321.0], [98.8, 3371.0], [98.9, 3413.0], [99.0, 3455.0], [99.1, 3500.0], [99.2, 3525.0], [99.3, 3579.0], [99.4, 3637.0], [99.5, 3679.0], [99.6, 3783.0], [99.7, 3892.0], [99.8, 4042.0], [99.9, 4295.0], [100.0, 4841.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 152.0], [0.1, 152.0], [0.2, 152.0], [0.3, 152.0], [0.4, 152.0], [0.5, 152.0], [0.6, 152.0], [0.7, 152.0], [0.8, 152.0], [0.9, 152.0], [1.0, 152.0], [1.1, 152.0], [1.2, 152.0], [1.3, 152.0], [1.4, 152.0], [1.5, 152.0], [1.6, 152.0], [1.7, 152.0], [1.8, 152.0], [1.9, 152.0], [2.0, 152.0], [2.1, 152.0], [2.2, 152.0], [2.3, 152.0], [2.4, 152.0], [2.5, 152.0], [2.6, 152.0], [2.7, 152.0], [2.8, 152.0], [2.9, 152.0], [3.0, 153.0], [3.1, 153.0], [3.2, 153.0], [3.3, 153.0], [3.4, 153.0], [3.5, 153.0], [3.6, 153.0], [3.7, 153.0], [3.8, 153.0], [3.9, 153.0], [4.0, 153.0], [4.1, 153.0], [4.2, 153.0], [4.3, 153.0], [4.4, 153.0], [4.5, 153.0], [4.6, 153.0], [4.7, 153.0], [4.8, 153.0], [4.9, 153.0], [5.0, 153.0], [5.1, 153.0], [5.2, 153.0], [5.3, 153.0], [5.4, 153.0], [5.5, 153.0], [5.6, 153.0], [5.7, 153.0], [5.8, 153.0], [5.9, 153.0], [6.0, 153.0], [6.1, 153.0], [6.2, 153.0], [6.3, 153.0], [6.4, 153.0], [6.5, 153.0], [6.6, 153.0], [6.7, 153.0], [6.8, 153.0], [6.9, 153.0], [7.0, 153.0], [7.1, 153.0], [7.2, 153.0], [7.3, 153.0], [7.4, 153.0], [7.5, 153.0], [7.6, 153.0], [7.7, 153.0], [7.8, 153.0], [7.9, 153.0], [8.0, 154.0], [8.1, 154.0], [8.2, 154.0], [8.3, 154.0], [8.4, 154.0], [8.5, 154.0], [8.6, 154.0], [8.7, 154.0], [8.8, 154.0], [8.9, 154.0], [9.0, 154.0], [9.1, 154.0], [9.2, 154.0], [9.3, 154.0], [9.4, 154.0], [9.5, 154.0], [9.6, 154.0], [9.7, 154.0], [9.8, 154.0], [9.9, 154.0], [10.0, 155.0], [10.1, 155.0], [10.2, 155.0], [10.3, 155.0], [10.4, 155.0], [10.5, 155.0], [10.6, 155.0], [10.7, 155.0], [10.8, 155.0], [10.9, 155.0], [11.0, 155.0], [11.1, 155.0], [11.2, 155.0], [11.3, 155.0], [11.4, 155.0], [11.5, 155.0], [11.6, 155.0], [11.7, 155.0], [11.8, 155.0], [11.9, 155.0], [12.0, 155.0], [12.1, 155.0], [12.2, 155.0], [12.3, 155.0], [12.4, 155.0], [12.5, 155.0], [12.6, 155.0], [12.7, 155.0], [12.8, 155.0], [12.9, 155.0], [13.0, 155.0], [13.1, 155.0], [13.2, 155.0], [13.3, 155.0], [13.4, 155.0], [13.5, 155.0], [13.6, 155.0], [13.7, 155.0], [13.8, 155.0], [13.9, 155.0], [14.0, 155.0], [14.1, 155.0], [14.2, 155.0], [14.3, 155.0], [14.4, 155.0], [14.5, 155.0], [14.6, 155.0], [14.7, 155.0], [14.8, 155.0], [14.9, 155.0], [15.0, 156.0], [15.1, 156.0], [15.2, 156.0], [15.3, 156.0], [15.4, 156.0], [15.5, 156.0], [15.6, 156.0], [15.7, 156.0], [15.8, 156.0], [15.9, 156.0], [16.0, 156.0], [16.1, 156.0], [16.2, 156.0], [16.3, 156.0], [16.4, 156.0], [16.5, 156.0], [16.6, 156.0], [16.7, 156.0], [16.8, 156.0], [16.9, 156.0], [17.0, 156.0], [17.1, 156.0], [17.2, 156.0], [17.3, 156.0], [17.4, 156.0], [17.5, 156.0], [17.6, 156.0], [17.7, 156.0], [17.8, 156.0], [17.9, 156.0], [18.0, 156.0], [18.1, 156.0], [18.2, 156.0], [18.3, 156.0], [18.4, 156.0], [18.5, 156.0], [18.6, 156.0], [18.7, 156.0], [18.8, 156.0], [18.9, 156.0], [19.0, 156.0], [19.1, 156.0], [19.2, 156.0], [19.3, 156.0], [19.4, 156.0], [19.5, 156.0], [19.6, 156.0], [19.7, 156.0], [19.8, 156.0], [19.9, 156.0], [20.0, 156.0], [20.1, 156.0], [20.2, 156.0], [20.3, 156.0], [20.4, 156.0], [20.5, 156.0], [20.6, 156.0], [20.7, 156.0], [20.8, 156.0], [20.9, 156.0], [21.0, 156.0], [21.1, 156.0], [21.2, 156.0], [21.3, 156.0], [21.4, 156.0], [21.5, 156.0], [21.6, 156.0], [21.7, 156.0], [21.8, 156.0], [21.9, 156.0], [22.0, 156.0], [22.1, 156.0], [22.2, 156.0], [22.3, 156.0], [22.4, 156.0], [22.5, 156.0], [22.6, 156.0], [22.7, 156.0], [22.8, 156.0], [22.9, 156.0], [23.0, 156.0], [23.1, 156.0], [23.2, 156.0], [23.3, 156.0], [23.4, 156.0], [23.5, 156.0], [23.6, 156.0], [23.7, 156.0], [23.8, 156.0], [23.9, 156.0], [24.0, 157.0], [24.1, 157.0], [24.2, 157.0], [24.3, 157.0], [24.4, 157.0], [24.5, 157.0], [24.6, 157.0], [24.7, 157.0], [24.8, 157.0], [24.9, 157.0], [25.0, 157.0], [25.1, 157.0], [25.2, 157.0], [25.3, 157.0], [25.4, 157.0], [25.5, 157.0], [25.6, 157.0], [25.7, 157.0], [25.8, 157.0], [25.9, 157.0], [26.0, 157.0], [26.1, 157.0], [26.2, 157.0], [26.3, 157.0], [26.4, 157.0], [26.5, 157.0], [26.6, 157.0], [26.7, 157.0], [26.8, 157.0], [26.9, 157.0], [27.0, 158.0], [27.1, 158.0], [27.2, 158.0], [27.3, 158.0], [27.4, 158.0], [27.5, 158.0], [27.6, 158.0], [27.7, 158.0], [27.8, 158.0], [27.9, 158.0], [28.0, 158.0], [28.1, 158.0], [28.2, 158.0], [28.3, 158.0], [28.4, 158.0], [28.5, 158.0], [28.6, 158.0], [28.7, 158.0], [28.8, 158.0], [28.9, 158.0], [29.0, 158.0], [29.1, 158.0], [29.2, 158.0], [29.3, 158.0], [29.4, 158.0], [29.5, 158.0], [29.6, 158.0], [29.7, 158.0], [29.8, 158.0], [29.9, 158.0], [30.0, 158.0], [30.1, 158.0], [30.2, 158.0], [30.3, 158.0], [30.4, 158.0], [30.5, 158.0], [30.6, 158.0], [30.7, 158.0], [30.8, 158.0], [30.9, 158.0], [31.0, 158.0], [31.1, 158.0], [31.2, 158.0], [31.3, 158.0], [31.4, 158.0], [31.5, 158.0], [31.6, 158.0], [31.7, 158.0], [31.8, 158.0], [31.9, 158.0], [32.0, 158.0], [32.1, 158.0], [32.2, 158.0], [32.3, 158.0], [32.4, 158.0], [32.5, 158.0], [32.6, 158.0], [32.7, 158.0], [32.8, 158.0], [32.9, 158.0], [33.0, 158.0], [33.1, 158.0], [33.2, 158.0], [33.3, 158.0], [33.4, 158.0], [33.5, 158.0], [33.6, 158.0], [33.7, 158.0], [33.8, 158.0], [33.9, 158.0], [34.0, 158.0], [34.1, 158.0], [34.2, 158.0], [34.3, 158.0], [34.4, 158.0], [34.5, 158.0], [34.6, 158.0], [34.7, 158.0], [34.8, 158.0], [34.9, 158.0], [35.0, 159.0], [35.1, 159.0], [35.2, 159.0], [35.3, 159.0], [35.4, 159.0], [35.5, 159.0], [35.6, 159.0], [35.7, 159.0], [35.8, 159.0], [35.9, 159.0], [36.0, 159.0], [36.1, 159.0], [36.2, 159.0], [36.3, 159.0], [36.4, 159.0], [36.5, 159.0], [36.6, 159.0], [36.7, 159.0], [36.8, 159.0], [36.9, 159.0], [37.0, 159.0], [37.1, 159.0], [37.2, 159.0], [37.3, 159.0], [37.4, 159.0], [37.5, 159.0], [37.6, 159.0], [37.7, 159.0], [37.8, 159.0], [37.9, 159.0], [38.0, 159.0], [38.1, 159.0], [38.2, 159.0], [38.3, 159.0], [38.4, 159.0], [38.5, 159.0], [38.6, 159.0], [38.7, 159.0], [38.8, 159.0], [38.9, 159.0], [39.0, 160.0], [39.1, 160.0], [39.2, 160.0], [39.3, 160.0], [39.4, 160.0], [39.5, 160.0], [39.6, 160.0], [39.7, 160.0], [39.8, 160.0], [39.9, 160.0], [40.0, 160.0], [40.1, 160.0], [40.2, 160.0], [40.3, 160.0], [40.4, 160.0], [40.5, 160.0], [40.6, 160.0], [40.7, 160.0], [40.8, 160.0], [40.9, 160.0], [41.0, 160.0], [41.1, 160.0], [41.2, 160.0], [41.3, 160.0], [41.4, 160.0], [41.5, 160.0], [41.6, 160.0], [41.7, 160.0], [41.8, 160.0], [41.9, 160.0], [42.0, 160.0], [42.1, 160.0], [42.2, 160.0], [42.3, 160.0], [42.4, 160.0], [42.5, 160.0], [42.6, 160.0], [42.7, 160.0], [42.8, 160.0], [42.9, 160.0], [43.0, 160.0], [43.1, 160.0], [43.2, 160.0], [43.3, 160.0], [43.4, 160.0], [43.5, 160.0], [43.6, 160.0], [43.7, 160.0], [43.8, 160.0], [43.9, 160.0], [44.0, 161.0], [44.1, 161.0], [44.2, 161.0], [44.3, 161.0], [44.4, 161.0], [44.5, 161.0], [44.6, 161.0], [44.7, 161.0], [44.8, 161.0], [44.9, 161.0], [45.0, 161.0], [45.1, 161.0], [45.2, 161.0], [45.3, 161.0], [45.4, 161.0], [45.5, 161.0], [45.6, 161.0], [45.7, 161.0], [45.8, 161.0], [45.9, 161.0], [46.0, 161.0], [46.1, 161.0], [46.2, 161.0], [46.3, 161.0], [46.4, 161.0], [46.5, 161.0], [46.6, 161.0], [46.7, 161.0], [46.8, 161.0], [46.9, 161.0], [47.0, 161.0], [47.1, 161.0], [47.2, 161.0], [47.3, 161.0], [47.4, 161.0], [47.5, 161.0], [47.6, 161.0], [47.7, 161.0], [47.8, 161.0], [47.9, 161.0], [48.0, 162.0], [48.1, 162.0], [48.2, 162.0], [48.3, 162.0], [48.4, 162.0], [48.5, 162.0], [48.6, 162.0], [48.7, 162.0], [48.8, 162.0], [48.9, 162.0], [49.0, 162.0], [49.1, 162.0], [49.2, 162.0], [49.3, 162.0], [49.4, 162.0], [49.5, 162.0], [49.6, 162.0], [49.7, 162.0], [49.8, 162.0], [49.9, 162.0], [50.0, 162.0], [50.1, 162.0], [50.2, 162.0], [50.3, 162.0], [50.4, 162.0], [50.5, 162.0], [50.6, 162.0], [50.7, 162.0], [50.8, 162.0], [50.9, 162.0], [51.0, 163.0], [51.1, 163.0], [51.2, 163.0], [51.3, 163.0], [51.4, 163.0], [51.5, 163.0], [51.6, 163.0], [51.7, 163.0], [51.8, 163.0], [51.9, 163.0], [52.0, 163.0], [52.1, 163.0], [52.2, 163.0], [52.3, 163.0], [52.4, 163.0], [52.5, 163.0], [52.6, 163.0], [52.7, 163.0], [52.8, 163.0], [52.9, 163.0], [53.0, 163.0], [53.1, 163.0], [53.2, 163.0], [53.3, 163.0], [53.4, 163.0], [53.5, 163.0], [53.6, 163.0], [53.7, 163.0], [53.8, 163.0], [53.9, 163.0], [54.0, 164.0], [54.1, 164.0], [54.2, 164.0], [54.3, 164.0], [54.4, 164.0], [54.5, 164.0], [54.6, 164.0], [54.7, 164.0], [54.8, 164.0], [54.9, 164.0], [55.0, 164.0], [55.1, 164.0], [55.2, 164.0], [55.3, 164.0], [55.4, 164.0], [55.5, 164.0], [55.6, 164.0], [55.7, 164.0], [55.8, 164.0], [55.9, 164.0], [56.0, 164.0], [56.1, 164.0], [56.2, 164.0], [56.3, 164.0], [56.4, 164.0], [56.5, 164.0], [56.6, 164.0], [56.7, 164.0], [56.8, 164.0], [56.9, 164.0], [57.0, 164.0], [57.1, 164.0], [57.2, 164.0], [57.3, 164.0], [57.4, 164.0], [57.5, 164.0], [57.6, 164.0], [57.7, 164.0], [57.8, 164.0], [57.9, 164.0], [58.0, 164.0], [58.1, 164.0], [58.2, 164.0], [58.3, 164.0], [58.4, 164.0], [58.5, 164.0], [58.6, 164.0], [58.7, 164.0], [58.8, 164.0], [58.9, 164.0], [59.0, 164.0], [59.1, 164.0], [59.2, 164.0], [59.3, 164.0], [59.4, 164.0], [59.5, 164.0], [59.6, 164.0], [59.7, 164.0], [59.8, 164.0], [59.9, 164.0], [60.0, 165.0], [60.1, 165.0], [60.2, 165.0], [60.3, 165.0], [60.4, 165.0], [60.5, 165.0], [60.6, 165.0], [60.7, 165.0], [60.8, 165.0], [60.9, 165.0], [61.0, 165.0], [61.1, 165.0], [61.2, 165.0], [61.3, 165.0], [61.4, 165.0], [61.5, 165.0], [61.6, 165.0], [61.7, 165.0], [61.8, 165.0], [61.9, 165.0], [62.0, 165.0], [62.1, 165.0], [62.2, 165.0], [62.3, 165.0], [62.4, 165.0], [62.5, 165.0], [62.6, 165.0], [62.7, 165.0], [62.8, 165.0], [62.9, 165.0], [63.0, 165.0], [63.1, 165.0], [63.2, 165.0], [63.3, 165.0], [63.4, 165.0], [63.5, 165.0], [63.6, 165.0], [63.7, 165.0], [63.8, 165.0], [63.9, 165.0], [64.0, 165.0], [64.1, 165.0], [64.2, 165.0], [64.3, 165.0], [64.4, 165.0], [64.5, 165.0], [64.6, 165.0], [64.7, 165.0], [64.8, 165.0], [64.9, 165.0], [65.0, 165.0], [65.1, 165.0], [65.2, 165.0], [65.3, 165.0], [65.4, 165.0], [65.5, 165.0], [65.6, 165.0], [65.7, 165.0], [65.8, 165.0], [65.9, 165.0], [66.0, 165.0], [66.1, 165.0], [66.2, 165.0], [66.3, 165.0], [66.4, 165.0], [66.5, 165.0], [66.6, 165.0], [66.7, 165.0], [66.8, 165.0], [66.9, 165.0], [67.0, 166.0], [67.1, 166.0], [67.2, 166.0], [67.3, 166.0], [67.4, 166.0], [67.5, 166.0], [67.6, 166.0], [67.7, 166.0], [67.8, 166.0], [67.9, 166.0], [68.0, 166.0], [68.1, 166.0], [68.2, 166.0], [68.3, 166.0], [68.4, 166.0], [68.5, 166.0], [68.6, 166.0], [68.7, 166.0], [68.8, 166.0], [68.9, 166.0], [69.0, 166.0], [69.1, 166.0], [69.2, 166.0], [69.3, 166.0], [69.4, 166.0], [69.5, 166.0], [69.6, 166.0], [69.7, 166.0], [69.8, 166.0], [69.9, 166.0], [70.0, 166.0], [70.1, 166.0], [70.2, 166.0], [70.3, 166.0], [70.4, 166.0], [70.5, 166.0], [70.6, 166.0], [70.7, 166.0], [70.8, 166.0], [70.9, 166.0], [71.0, 166.0], [71.1, 166.0], [71.2, 166.0], [71.3, 166.0], [71.4, 166.0], [71.5, 166.0], [71.6, 166.0], [71.7, 166.0], [71.8, 166.0], [71.9, 166.0], [72.0, 166.0], [72.1, 166.0], [72.2, 166.0], [72.3, 166.0], [72.4, 166.0], [72.5, 166.0], [72.6, 166.0], [72.7, 166.0], [72.8, 166.0], [72.9, 166.0], [73.0, 167.0], [73.1, 167.0], [73.2, 167.0], [73.3, 167.0], [73.4, 167.0], [73.5, 167.0], [73.6, 167.0], [73.7, 167.0], [73.8, 167.0], [73.9, 167.0], [74.0, 167.0], [74.1, 167.0], [74.2, 167.0], [74.3, 167.0], [74.4, 167.0], [74.5, 167.0], [74.6, 167.0], [74.7, 167.0], [74.8, 167.0], [74.9, 167.0], [75.0, 168.0], [75.1, 168.0], [75.2, 168.0], [75.3, 168.0], [75.4, 168.0], [75.5, 168.0], [75.6, 168.0], [75.7, 168.0], [75.8, 168.0], [75.9, 168.0], [76.0, 168.0], [76.1, 168.0], [76.2, 168.0], [76.3, 168.0], [76.4, 168.0], [76.5, 168.0], [76.6, 168.0], [76.7, 168.0], [76.8, 168.0], [76.9, 168.0], [77.0, 168.0], [77.1, 168.0], [77.2, 168.0], [77.3, 168.0], [77.4, 168.0], [77.5, 168.0], [77.6, 168.0], [77.7, 168.0], [77.8, 168.0], [77.9, 168.0], [78.0, 168.0], [78.1, 168.0], [78.2, 168.0], [78.3, 168.0], [78.4, 168.0], [78.5, 168.0], [78.6, 168.0], [78.7, 168.0], [78.8, 168.0], [78.9, 168.0], [79.0, 169.0], [79.1, 169.0], [79.2, 169.0], [79.3, 169.0], [79.4, 169.0], [79.5, 169.0], [79.6, 169.0], [79.7, 169.0], [79.8, 169.0], [79.9, 169.0], [80.0, 169.0], [80.1, 169.0], [80.2, 169.0], [80.3, 169.0], [80.4, 169.0], [80.5, 169.0], [80.6, 169.0], [80.7, 169.0], [80.8, 169.0], [80.9, 169.0], [81.0, 170.0], [81.1, 170.0], [81.2, 170.0], [81.3, 170.0], [81.4, 170.0], [81.5, 170.0], [81.6, 170.0], [81.7, 170.0], [81.8, 170.0], [81.9, 170.0], [82.0, 170.0], [82.1, 170.0], [82.2, 170.0], [82.3, 170.0], [82.4, 170.0], [82.5, 170.0], [82.6, 170.0], [82.7, 170.0], [82.8, 170.0], [82.9, 170.0], [83.0, 170.0], [83.1, 170.0], [83.2, 170.0], [83.3, 170.0], [83.4, 170.0], [83.5, 170.0], [83.6, 170.0], [83.7, 170.0], [83.8, 170.0], [83.9, 170.0], [84.0, 171.0], [84.1, 171.0], [84.2, 171.0], [84.3, 171.0], [84.4, 171.0], [84.5, 171.0], [84.6, 171.0], [84.7, 171.0], [84.8, 171.0], [84.9, 171.0], [85.0, 171.0], [85.1, 171.0], [85.2, 171.0], [85.3, 171.0], [85.4, 171.0], [85.5, 171.0], [85.6, 171.0], [85.7, 171.0], [85.8, 171.0], [85.9, 171.0], [86.0, 172.0], [86.1, 172.0], [86.2, 172.0], [86.3, 172.0], [86.4, 172.0], [86.5, 172.0], [86.6, 172.0], [86.7, 172.0], [86.8, 172.0], [86.9, 172.0], [87.0, 173.0], [87.1, 173.0], [87.2, 173.0], [87.3, 173.0], [87.4, 173.0], [87.5, 173.0], [87.6, 173.0], [87.7, 173.0], [87.8, 173.0], [87.9, 173.0], [88.0, 174.0], [88.1, 174.0], [88.2, 174.0], [88.3, 174.0], [88.4, 174.0], [88.5, 174.0], [88.6, 174.0], [88.7, 174.0], [88.8, 174.0], [88.9, 174.0], [89.0, 174.0], [89.1, 174.0], [89.2, 174.0], [89.3, 174.0], [89.4, 174.0], [89.5, 174.0], [89.6, 174.0], [89.7, 174.0], [89.8, 174.0], [89.9, 174.0], [90.0, 175.0], [90.1, 175.0], [90.2, 175.0], [90.3, 175.0], [90.4, 175.0], [90.5, 175.0], [90.6, 175.0], [90.7, 175.0], [90.8, 175.0], [90.9, 175.0], [91.0, 176.0], [91.1, 176.0], [91.2, 176.0], [91.3, 176.0], [91.4, 176.0], [91.5, 176.0], [91.6, 176.0], [91.7, 176.0], [91.8, 176.0], [91.9, 176.0], [92.0, 177.0], [92.1, 177.0], [92.2, 177.0], [92.3, 177.0], [92.4, 177.0], [92.5, 177.0], [92.6, 177.0], [92.7, 177.0], [92.8, 177.0], [92.9, 177.0], [93.0, 202.0], [93.1, 202.0], [93.2, 202.0], [93.3, 202.0], [93.4, 202.0], [93.5, 202.0], [93.6, 202.0], [93.7, 202.0], [93.8, 202.0], [93.9, 202.0], [94.0, 203.0], [94.1, 203.0], [94.2, 203.0], [94.3, 203.0], [94.4, 203.0], [94.5, 203.0], [94.6, 203.0], [94.7, 203.0], [94.8, 203.0], [94.9, 203.0], [95.0, 215.0], [95.1, 215.0], [95.2, 215.0], [95.3, 215.0], [95.4, 215.0], [95.5, 215.0], [95.6, 215.0], [95.7, 215.0], [95.8, 215.0], [95.9, 215.0], [96.0, 249.0], [96.1, 249.0], [96.2, 249.0], [96.3, 249.0], [96.4, 249.0], [96.5, 249.0], [96.6, 249.0], [96.7, 249.0], [96.8, 249.0], [96.9, 249.0], [97.0, 271.0], [97.1, 271.0], [97.2, 271.0], [97.3, 271.0], [97.4, 271.0], [97.5, 271.0], [97.6, 271.0], [97.7, 271.0], [97.8, 271.0], [97.9, 271.0], [98.0, 279.0], [98.1, 279.0], [98.2, 279.0], [98.3, 279.0], [98.4, 279.0], [98.5, 279.0], [98.6, 279.0], [98.7, 279.0], [98.8, 279.0], [98.9, 279.0], [99.0, 283.0], [99.1, 283.0], [99.2, 283.0], [99.3, 283.0], [99.4, 283.0], [99.5, 283.0], [99.6, 283.0], [99.7, 283.0], [99.8, 283.0], [99.9, 283.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 10.0], [0.1, 12.0], [0.2, 12.0], [0.3, 13.0], [0.4, 13.0], [0.5, 14.0], [0.6, 14.0], [0.7, 14.0], [0.8, 14.0], [0.9, 15.0], [1.0, 15.0], [1.1, 15.0], [1.2, 15.0], [1.3, 15.0], [1.4, 15.0], [1.5, 16.0], [1.6, 16.0], [1.7, 16.0], [1.8, 16.0], [1.9, 16.0], [2.0, 16.0], [2.1, 16.0], [2.2, 17.0], [2.3, 17.0], [2.4, 17.0], [2.5, 17.0], [2.6, 17.0], [2.7, 17.0], [2.8, 17.0], [2.9, 17.0], [3.0, 17.0], [3.1, 17.0], [3.2, 17.0], [3.3, 18.0], [3.4, 18.0], [3.5, 18.0], [3.6, 18.0], [3.7, 18.0], [3.8, 18.0], [3.9, 18.0], [4.0, 18.0], [4.1, 18.0], [4.2, 18.0], [4.3, 18.0], [4.4, 19.0], [4.5, 19.0], [4.6, 19.0], [4.7, 19.0], [4.8, 19.0], [4.9, 19.0], [5.0, 19.0], [5.1, 19.0], [5.2, 19.0], [5.3, 19.0], [5.4, 19.0], [5.5, 19.0], [5.6, 19.0], [5.7, 20.0], [5.8, 20.0], [5.9, 20.0], [6.0, 20.0], [6.1, 20.0], [6.2, 20.0], [6.3, 20.0], [6.4, 20.0], [6.5, 20.0], [6.6, 20.0], [6.7, 20.0], [6.8, 20.0], [6.9, 20.0], [7.0, 21.0], [7.1, 21.0], [7.2, 21.0], [7.3, 21.0], [7.4, 21.0], [7.5, 21.0], [7.6, 21.0], [7.7, 21.0], [7.8, 21.0], [7.9, 21.0], [8.0, 21.0], [8.1, 21.0], [8.2, 21.0], [8.3, 21.0], [8.4, 21.0], [8.5, 21.0], [8.6, 22.0], [8.7, 22.0], [8.8, 22.0], [8.9, 22.0], [9.0, 22.0], [9.1, 22.0], [9.2, 22.0], [9.3, 22.0], [9.4, 22.0], [9.5, 22.0], [9.6, 22.0], [9.7, 22.0], [9.8, 22.0], [9.9, 22.0], [10.0, 22.0], [10.1, 22.0], [10.2, 22.0], [10.3, 22.0], [10.4, 22.0], [10.5, 23.0], [10.6, 23.0], [10.7, 23.0], [10.8, 23.0], [10.9, 23.0], [11.0, 23.0], [11.1, 23.0], [11.2, 23.0], [11.3, 23.0], [11.4, 23.0], [11.5, 23.0], [11.6, 23.0], [11.7, 23.0], [11.8, 23.0], [11.9, 23.0], [12.0, 23.0], [12.1, 24.0], [12.2, 24.0], [12.3, 24.0], [12.4, 24.0], [12.5, 24.0], [12.6, 24.0], [12.7, 24.0], [12.8, 24.0], [12.9, 24.0], [13.0, 24.0], [13.1, 24.0], [13.2, 24.0], [13.3, 24.0], [13.4, 24.0], [13.5, 24.0], [13.6, 25.0], [13.7, 25.0], [13.8, 25.0], [13.9, 25.0], [14.0, 25.0], [14.1, 25.0], [14.2, 25.0], [14.3, 25.0], [14.4, 25.0], [14.5, 25.0], [14.6, 25.0], [14.7, 25.0], [14.8, 25.0], [14.9, 25.0], [15.0, 26.0], [15.1, 26.0], [15.2, 26.0], [15.3, 26.0], [15.4, 26.0], [15.5, 26.0], [15.6, 26.0], [15.7, 26.0], [15.8, 26.0], [15.9, 26.0], [16.0, 26.0], [16.1, 26.0], [16.2, 26.0], [16.3, 26.0], [16.4, 26.0], [16.5, 27.0], [16.6, 27.0], [16.7, 27.0], [16.8, 27.0], [16.9, 27.0], [17.0, 27.0], [17.1, 27.0], [17.2, 27.0], [17.3, 27.0], [17.4, 27.0], [17.5, 27.0], [17.6, 27.0], [17.7, 27.0], [17.8, 27.0], [17.9, 27.0], [18.0, 28.0], [18.1, 28.0], [18.2, 28.0], [18.3, 28.0], [18.4, 28.0], [18.5, 28.0], [18.6, 28.0], [18.7, 28.0], [18.8, 28.0], [18.9, 28.0], [19.0, 29.0], [19.1, 29.0], [19.2, 29.0], [19.3, 29.0], [19.4, 29.0], [19.5, 29.0], [19.6, 29.0], [19.7, 29.0], [19.8, 29.0], [19.9, 30.0], [20.0, 30.0], [20.1, 30.0], [20.2, 30.0], [20.3, 30.0], [20.4, 30.0], [20.5, 30.0], [20.6, 30.0], [20.7, 30.0], [20.8, 30.0], [20.9, 31.0], [21.0, 31.0], [21.1, 31.0], [21.2, 31.0], [21.3, 31.0], [21.4, 31.0], [21.5, 31.0], [21.6, 31.0], [21.7, 32.0], [21.8, 32.0], [21.9, 32.0], [22.0, 32.0], [22.1, 32.0], [22.2, 32.0], [22.3, 32.0], [22.4, 32.0], [22.5, 33.0], [22.6, 33.0], [22.7, 33.0], [22.8, 33.0], [22.9, 33.0], [23.0, 34.0], [23.1, 34.0], [23.2, 34.0], [23.3, 35.0], [23.4, 35.0], [23.5, 35.0], [23.6, 35.0], [23.7, 36.0], [23.8, 36.0], [23.9, 36.0], [24.0, 37.0], [24.1, 37.0], [24.2, 37.0], [24.3, 38.0], [24.4, 39.0], [24.5, 39.0], [24.6, 41.0], [24.7, 43.0], [24.8, 44.0], [24.9, 49.0], [25.0, 58.0], [25.1, 83.0], [25.2, 106.0], [25.3, 123.0], [25.4, 137.0], [25.5, 160.0], [25.6, 194.0], [25.7, 218.0], [25.8, 238.0], [25.9, 253.0], [26.0, 268.0], [26.1, 281.0], [26.2, 296.0], [26.3, 310.0], [26.4, 319.0], [26.5, 327.0], [26.6, 331.0], [26.7, 338.0], [26.8, 350.0], [26.9, 356.0], [27.0, 361.0], [27.1, 370.0], [27.2, 384.0], [27.3, 395.0], [27.4, 401.0], [27.5, 404.0], [27.6, 417.0], [27.7, 423.0], [27.8, 432.0], [27.9, 440.0], [28.0, 448.0], [28.1, 455.0], [28.2, 461.0], [28.3, 466.0], [28.4, 476.0], [28.5, 485.0], [28.6, 491.0], [28.7, 498.0], [28.8, 502.0], [28.9, 510.0], [29.0, 515.0], [29.1, 523.0], [29.2, 528.0], [29.3, 531.0], [29.4, 535.0], [29.5, 539.0], [29.6, 544.0], [29.7, 550.0], [29.8, 555.0], [29.9, 559.0], [30.0, 564.0], [30.1, 569.0], [30.2, 573.0], [30.3, 578.0], [30.4, 582.0], [30.5, 586.0], [30.6, 590.0], [30.7, 595.0], [30.8, 598.0], [30.9, 605.0], [31.0, 608.0], [31.1, 611.0], [31.2, 614.0], [31.3, 618.0], [31.4, 621.0], [31.5, 626.0], [31.6, 631.0], [31.7, 635.0], [31.8, 641.0], [31.9, 645.0], [32.0, 648.0], [32.1, 652.0], [32.2, 655.0], [32.3, 658.0], [32.4, 662.0], [32.5, 668.0], [32.6, 670.0], [32.7, 673.0], [32.8, 677.0], [32.9, 681.0], [33.0, 685.0], [33.1, 689.0], [33.2, 693.0], [33.3, 697.0], [33.4, 700.0], [33.5, 703.0], [33.6, 706.0], [33.7, 709.0], [33.8, 711.0], [33.9, 715.0], [34.0, 718.0], [34.1, 720.0], [34.2, 724.0], [34.3, 728.0], [34.4, 731.0], [34.5, 734.0], [34.6, 737.0], [34.7, 739.0], [34.8, 742.0], [34.9, 744.0], [35.0, 746.0], [35.1, 749.0], [35.2, 751.0], [35.3, 757.0], [35.4, 760.0], [35.5, 763.0], [35.6, 767.0], [35.7, 770.0], [35.8, 773.0], [35.9, 780.0], [36.0, 784.0], [36.1, 787.0], [36.2, 790.0], [36.3, 793.0], [36.4, 795.0], [36.5, 798.0], [36.6, 802.0], [36.7, 805.0], [36.8, 808.0], [36.9, 809.0], [37.0, 813.0], [37.1, 818.0], [37.2, 821.0], [37.3, 826.0], [37.4, 830.0], [37.5, 834.0], [37.6, 838.0], [37.7, 842.0], [37.8, 845.0], [37.9, 847.0], [38.0, 850.0], [38.1, 855.0], [38.2, 859.0], [38.3, 861.0], [38.4, 863.0], [38.5, 866.0], [38.6, 870.0], [38.7, 873.0], [38.8, 876.0], [38.9, 879.0], [39.0, 882.0], [39.1, 884.0], [39.2, 886.0], [39.3, 890.0], [39.4, 892.0], [39.5, 896.0], [39.6, 899.0], [39.7, 903.0], [39.8, 904.0], [39.9, 908.0], [40.0, 912.0], [40.1, 915.0], [40.2, 918.0], [40.3, 920.0], [40.4, 923.0], [40.5, 926.0], [40.6, 928.0], [40.7, 931.0], [40.8, 933.0], [40.9, 935.0], [41.0, 938.0], [41.1, 941.0], [41.2, 945.0], [41.3, 948.0], [41.4, 952.0], [41.5, 956.0], [41.6, 959.0], [41.7, 960.0], [41.8, 963.0], [41.9, 965.0], [42.0, 967.0], [42.1, 969.0], [42.2, 972.0], [42.3, 974.0], [42.4, 978.0], [42.5, 980.0], [42.6, 983.0], [42.7, 986.0], [42.8, 990.0], [42.9, 994.0], [43.0, 997.0], [43.1, 999.0], [43.2, 1003.0], [43.3, 1007.0], [43.4, 1009.0], [43.5, 1013.0], [43.6, 1015.0], [43.7, 1017.0], [43.8, 1018.0], [43.9, 1020.0], [44.0, 1023.0], [44.1, 1027.0], [44.2, 1028.0], [44.3, 1029.0], [44.4, 1031.0], [44.5, 1034.0], [44.6, 1039.0], [44.7, 1042.0], [44.8, 1044.0], [44.9, 1046.0], [45.0, 1048.0], [45.1, 1050.0], [45.2, 1051.0], [45.3, 1055.0], [45.4, 1057.0], [45.5, 1060.0], [45.6, 1063.0], [45.7, 1065.0], [45.8, 1068.0], [45.9, 1072.0], [46.0, 1075.0], [46.1, 1076.0], [46.2, 1079.0], [46.3, 1082.0], [46.4, 1084.0], [46.5, 1087.0], [46.6, 1089.0], [46.7, 1092.0], [46.8, 1093.0], [46.9, 1097.0], [47.0, 1099.0], [47.1, 1101.0], [47.2, 1103.0], [47.3, 1105.0], [47.4, 1107.0], [47.5, 1109.0], [47.6, 1111.0], [47.7, 1113.0], [47.8, 1116.0], [47.9, 1117.0], [48.0, 1119.0], [48.1, 1122.0], [48.2, 1124.0], [48.3, 1128.0], [48.4, 1131.0], [48.5, 1136.0], [48.6, 1139.0], [48.7, 1140.0], [48.8, 1143.0], [48.9, 1145.0], [49.0, 1148.0], [49.1, 1151.0], [49.2, 1153.0], [49.3, 1155.0], [49.4, 1156.0], [49.5, 1160.0], [49.6, 1163.0], [49.7, 1166.0], [49.8, 1170.0], [49.9, 1172.0], [50.0, 1174.0], [50.1, 1175.0], [50.2, 1178.0], [50.3, 1182.0], [50.4, 1184.0], [50.5, 1186.0], [50.6, 1188.0], [50.7, 1191.0], [50.8, 1192.0], [50.9, 1195.0], [51.0, 1196.0], [51.1, 1199.0], [51.2, 1202.0], [51.3, 1205.0], [51.4, 1207.0], [51.5, 1209.0], [51.6, 1212.0], [51.7, 1214.0], [51.8, 1217.0], [51.9, 1220.0], [52.0, 1223.0], [52.1, 1226.0], [52.2, 1229.0], [52.3, 1232.0], [52.4, 1233.0], [52.5, 1235.0], [52.6, 1237.0], [52.7, 1240.0], [52.8, 1242.0], [52.9, 1243.0], [53.0, 1247.0], [53.1, 1249.0], [53.2, 1250.0], [53.3, 1252.0], [53.4, 1256.0], [53.5, 1259.0], [53.6, 1263.0], [53.7, 1264.0], [53.8, 1266.0], [53.9, 1268.0], [54.0, 1271.0], [54.1, 1274.0], [54.2, 1276.0], [54.3, 1277.0], [54.4, 1279.0], [54.5, 1281.0], [54.6, 1283.0], [54.7, 1286.0], [54.8, 1289.0], [54.9, 1291.0], [55.0, 1294.0], [55.1, 1296.0], [55.2, 1299.0], [55.3, 1301.0], [55.4, 1305.0], [55.5, 1307.0], [55.6, 1310.0], [55.7, 1312.0], [55.8, 1313.0], [55.9, 1315.0], [56.0, 1317.0], [56.1, 1320.0], [56.2, 1322.0], [56.3, 1325.0], [56.4, 1326.0], [56.5, 1328.0], [56.6, 1331.0], [56.7, 1333.0], [56.8, 1334.0], [56.9, 1337.0], [57.0, 1338.0], [57.1, 1341.0], [57.2, 1343.0], [57.3, 1347.0], [57.4, 1351.0], [57.5, 1354.0], [57.6, 1355.0], [57.7, 1357.0], [57.8, 1359.0], [57.9, 1361.0], [58.0, 1364.0], [58.1, 1366.0], [58.2, 1370.0], [58.3, 1372.0], [58.4, 1373.0], [58.5, 1376.0], [58.6, 1378.0], [58.7, 1380.0], [58.8, 1384.0], [58.9, 1387.0], [59.0, 1390.0], [59.1, 1392.0], [59.2, 1394.0], [59.3, 1396.0], [59.4, 1399.0], [59.5, 1401.0], [59.6, 1403.0], [59.7, 1405.0], [59.8, 1407.0], [59.9, 1409.0], [60.0, 1410.0], [60.1, 1412.0], [60.2, 1415.0], [60.3, 1419.0], [60.4, 1421.0], [60.5, 1424.0], [60.6, 1426.0], [60.7, 1428.0], [60.8, 1430.0], [60.9, 1432.0], [61.0, 1434.0], [61.1, 1436.0], [61.2, 1439.0], [61.3, 1441.0], [61.4, 1444.0], [61.5, 1448.0], [61.6, 1450.0], [61.7, 1452.0], [61.8, 1453.0], [61.9, 1455.0], [62.0, 1457.0], [62.1, 1459.0], [62.2, 1461.0], [62.3, 1464.0], [62.4, 1466.0], [62.5, 1469.0], [62.6, 1472.0], [62.7, 1474.0], [62.8, 1477.0], [62.9, 1480.0], [63.0, 1483.0], [63.1, 1485.0], [63.2, 1487.0], [63.3, 1488.0], [63.4, 1491.0], [63.5, 1494.0], [63.6, 1496.0], [63.7, 1498.0], [63.8, 1500.0], [63.9, 1502.0], [64.0, 1505.0], [64.1, 1508.0], [64.2, 1510.0], [64.3, 1512.0], [64.4, 1516.0], [64.5, 1521.0], [64.6, 1523.0], [64.7, 1525.0], [64.8, 1528.0], [64.9, 1530.0], [65.0, 1533.0], [65.1, 1534.0], [65.2, 1537.0], [65.3, 1539.0], [65.4, 1541.0], [65.5, 1543.0], [65.6, 1546.0], [65.7, 1548.0], [65.8, 1550.0], [65.9, 1551.0], [66.0, 1553.0], [66.1, 1555.0], [66.2, 1557.0], [66.3, 1560.0], [66.4, 1562.0], [66.5, 1563.0], [66.6, 1566.0], [66.7, 1569.0], [66.8, 1572.0], [66.9, 1573.0], [67.0, 1576.0], [67.1, 1579.0], [67.2, 1581.0], [67.3, 1585.0], [67.4, 1587.0], [67.5, 1590.0], [67.6, 1592.0], [67.7, 1593.0], [67.8, 1596.0], [67.9, 1598.0], [68.0, 1601.0], [68.1, 1602.0], [68.2, 1605.0], [68.3, 1608.0], [68.4, 1610.0], [68.5, 1613.0], [68.6, 1616.0], [68.7, 1621.0], [68.8, 1622.0], [68.9, 1624.0], [69.0, 1627.0], [69.1, 1628.0], [69.2, 1632.0], [69.3, 1634.0], [69.4, 1638.0], [69.5, 1640.0], [69.6, 1643.0], [69.7, 1645.0], [69.8, 1649.0], [69.9, 1653.0], [70.0, 1655.0], [70.1, 1658.0], [70.2, 1660.0], [70.3, 1664.0], [70.4, 1667.0], [70.5, 1669.0], [70.6, 1673.0], [70.7, 1676.0], [70.8, 1678.0], [70.9, 1682.0], [71.0, 1686.0], [71.1, 1689.0], [71.2, 1691.0], [71.3, 1694.0], [71.4, 1696.0], [71.5, 1698.0], [71.6, 1700.0], [71.7, 1702.0], [71.8, 1705.0], [71.9, 1707.0], [72.0, 1709.0], [72.1, 1713.0], [72.2, 1716.0], [72.3, 1719.0], [72.4, 1721.0], [72.5, 1723.0], [72.6, 1727.0], [72.7, 1729.0], [72.8, 1732.0], [72.9, 1735.0], [73.0, 1737.0], [73.1, 1741.0], [73.2, 1743.0], [73.3, 1747.0], [73.4, 1750.0], [73.5, 1752.0], [73.6, 1755.0], [73.7, 1756.0], [73.8, 1761.0], [73.9, 1764.0], [74.0, 1766.0], [74.1, 1768.0], [74.2, 1770.0], [74.3, 1773.0], [74.4, 1776.0], [74.5, 1780.0], [74.6, 1783.0], [74.7, 1785.0], [74.8, 1787.0], [74.9, 1790.0], [75.0, 1792.0], [75.1, 1795.0], [75.2, 1798.0], [75.3, 1800.0], [75.4, 1803.0], [75.5, 1806.0], [75.6, 1808.0], [75.7, 1810.0], [75.8, 1813.0], [75.9, 1815.0], [76.0, 1817.0], [76.1, 1820.0], [76.2, 1823.0], [76.3, 1825.0], [76.4, 1827.0], [76.5, 1831.0], [76.6, 1834.0], [76.7, 1836.0], [76.8, 1838.0], [76.9, 1840.0], [77.0, 1845.0], [77.1, 1848.0], [77.2, 1850.0], [77.3, 1855.0], [77.4, 1857.0], [77.5, 1861.0], [77.6, 1863.0], [77.7, 1867.0], [77.8, 1870.0], [77.9, 1875.0], [78.0, 1877.0], [78.1, 1883.0], [78.2, 1886.0], [78.3, 1890.0], [78.4, 1894.0], [78.5, 1896.0], [78.6, 1899.0], [78.7, 1903.0], [78.8, 1905.0], [78.9, 1909.0], [79.0, 1911.0], [79.1, 1915.0], [79.2, 1917.0], [79.3, 1919.0], [79.4, 1923.0], [79.5, 1926.0], [79.6, 1929.0], [79.7, 1932.0], [79.8, 1937.0], [79.9, 1939.0], [80.0, 1944.0], [80.1, 1948.0], [80.2, 1950.0], [80.3, 1954.0], [80.4, 1958.0], [80.5, 1961.0], [80.6, 1964.0], [80.7, 1969.0], [80.8, 1971.0], [80.9, 1975.0], [81.0, 1978.0], [81.1, 1985.0], [81.2, 1988.0], [81.3, 1991.0], [81.4, 1994.0], [81.5, 1996.0], [81.6, 1999.0], [81.7, 2004.0], [81.8, 2008.0], [81.9, 2010.0], [82.0, 2013.0], [82.1, 2017.0], [82.2, 2021.0], [82.3, 2025.0], [82.4, 2033.0], [82.5, 2035.0], [82.6, 2039.0], [82.7, 2044.0], [82.8, 2050.0], [82.9, 2055.0], [83.0, 2057.0], [83.1, 2061.0], [83.2, 2063.0], [83.3, 2067.0], [83.4, 2070.0], [83.5, 2072.0], [83.6, 2075.0], [83.7, 2078.0], [83.8, 2082.0], [83.9, 2084.0], [84.0, 2087.0], [84.1, 2092.0], [84.2, 2097.0], [84.3, 2101.0], [84.4, 2103.0], [84.5, 2106.0], [84.6, 2110.0], [84.7, 2112.0], [84.8, 2115.0], [84.9, 2119.0], [85.0, 2123.0], [85.1, 2127.0], [85.2, 2133.0], [85.3, 2138.0], [85.4, 2143.0], [85.5, 2146.0], [85.6, 2151.0], [85.7, 2156.0], [85.8, 2161.0], [85.9, 2164.0], [86.0, 2169.0], [86.1, 2175.0], [86.2, 2180.0], [86.3, 2184.0], [86.4, 2188.0], [86.5, 2192.0], [86.6, 2196.0], [86.7, 2201.0], [86.8, 2205.0], [86.9, 2210.0], [87.0, 2214.0], [87.1, 2222.0], [87.2, 2226.0], [87.3, 2230.0], [87.4, 2235.0], [87.5, 2240.0], [87.6, 2244.0], [87.7, 2247.0], [87.8, 2251.0], [87.9, 2257.0], [88.0, 2262.0], [88.1, 2269.0], [88.2, 2274.0], [88.3, 2279.0], [88.4, 2284.0], [88.5, 2290.0], [88.6, 2295.0], [88.7, 2302.0], [88.8, 2305.0], [88.9, 2309.0], [89.0, 2311.0], [89.1, 2318.0], [89.2, 2324.0], [89.3, 2328.0], [89.4, 2335.0], [89.5, 2342.0], [89.6, 2348.0], [89.7, 2353.0], [89.8, 2357.0], [89.9, 2363.0], [90.0, 2366.0], [90.1, 2368.0], [90.2, 2374.0], [90.3, 2380.0], [90.4, 2390.0], [90.5, 2395.0], [90.6, 2401.0], [90.7, 2408.0], [90.8, 2417.0], [90.9, 2420.0], [91.0, 2426.0], [91.1, 2432.0], [91.2, 2438.0], [91.3, 2442.0], [91.4, 2449.0], [91.5, 2459.0], [91.6, 2467.0], [91.7, 2472.0], [91.8, 2481.0], [91.9, 2488.0], [92.0, 2493.0], [92.1, 2508.0], [92.2, 2515.0], [92.3, 2522.0], [92.4, 2528.0], [92.5, 2534.0], [92.6, 2538.0], [92.7, 2549.0], [92.8, 2554.0], [92.9, 2561.0], [93.0, 2568.0], [93.1, 2573.0], [93.2, 2580.0], [93.3, 2589.0], [93.4, 2599.0], [93.5, 2607.0], [93.6, 2615.0], [93.7, 2621.0], [93.8, 2633.0], [93.9, 2640.0], [94.0, 2646.0], [94.1, 2651.0], [94.2, 2658.0], [94.3, 2669.0], [94.4, 2676.0], [94.5, 2681.0], [94.6, 2689.0], [94.7, 2696.0], [94.8, 2703.0], [94.9, 2711.0], [95.0, 2717.0], [95.1, 2727.0], [95.2, 2736.0], [95.3, 2747.0], [95.4, 2754.0], [95.5, 2773.0], [95.6, 2793.0], [95.7, 2800.0], [95.8, 2814.0], [95.9, 2825.0], [96.0, 2831.0], [96.1, 2841.0], [96.2, 2852.0], [96.3, 2867.0], [96.4, 2879.0], [96.5, 2893.0], [96.6, 2915.0], [96.7, 2926.0], [96.8, 2939.0], [96.9, 2960.0], [97.0, 2973.0], [97.1, 2990.0], [97.2, 3013.0], [97.3, 3028.0], [97.4, 3048.0], [97.5, 3059.0], [97.6, 3070.0], [97.7, 3082.0], [97.8, 3102.0], [97.9, 3124.0], [98.0, 3130.0], [98.1, 3150.0], [98.2, 3180.0], [98.3, 3209.0], [98.4, 3227.0], [98.5, 3253.0], [98.6, 3271.0], [98.7, 3297.0], [98.8, 3319.0], [98.9, 3358.0], [99.0, 3384.0], [99.1, 3446.0], [99.2, 3493.0], [99.3, 3549.0], [99.4, 3635.0], [99.5, 3764.0], [99.6, 3829.0], [99.7, 3953.0], [99.8, 4064.0], [99.9, 4234.0], [100.0, 5673.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2518.0, "series": [{"data": [[0.0, 2515.0], [600.0, 261.0], [700.0, 276.0], [800.0, 307.0], [900.0, 404.0], [1000.0, 407.0], [1100.0, 402.0], [1200.0, 435.0], [1300.0, 405.0], [1400.0, 414.0], [1500.0, 388.0], [100.0, 50.0], [1600.0, 401.0], [1700.0, 345.0], [1800.0, 328.0], [1900.0, 290.0], [2000.0, 268.0], [2100.0, 195.0], [2300.0, 171.0], [2200.0, 208.0], [2400.0, 145.0], [2500.0, 135.0], [2600.0, 119.0], [2700.0, 98.0], [2800.0, 85.0], [2900.0, 54.0], [3000.0, 67.0], [3100.0, 39.0], [200.0, 94.0], [3200.0, 52.0], [3300.0, 22.0], [3400.0, 21.0], [3500.0, 25.0], [3700.0, 9.0], [3600.0, 20.0], [3800.0, 7.0], [3900.0, 8.0], [4000.0, 3.0], [4100.0, 5.0], [4200.0, 4.0], [4300.0, 3.0], [4600.0, 2.0], [4500.0, 1.0], [4400.0, 2.0], [300.0, 119.0], [4800.0, 2.0], [400.0, 180.0], [500.0, 209.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[200.0, 7.0], [100.0, 93.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 2518.0], [600.0, 254.0], [700.0, 315.0], [800.0, 310.0], [900.0, 348.0], [1000.0, 390.0], [1100.0, 411.0], [1200.0, 410.0], [1300.0, 422.0], [1400.0, 433.0], [1500.0, 416.0], [1600.0, 364.0], [1700.0, 372.0], [1800.0, 333.0], [1900.0, 300.0], [2000.0, 267.0], [2100.0, 241.0], [2200.0, 197.0], [2300.0, 189.0], [2400.0, 149.0], [2500.0, 136.0], [2600.0, 136.0], [2800.0, 86.0], [2700.0, 91.0], [2900.0, 64.0], [3000.0, 61.0], [3100.0, 48.0], [3300.0, 28.0], [3200.0, 46.0], [3400.0, 22.0], [3500.0, 13.0], [3600.0, 10.0], [3700.0, 10.0], [3800.0, 11.0], [3900.0, 10.0], [4000.0, 6.0], [4300.0, 2.0], [4100.0, 6.0], [4200.0, 3.0], [4400.0, 1.0], [4700.0, 1.0], [4900.0, 1.0], [5100.0, 1.0], [5300.0, 1.0], [5400.0, 1.0], [5600.0, 1.0], [100.0, 42.0], [200.0, 61.0], [300.0, 117.0], [400.0, 136.0], [500.0, 209.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5935.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7138.0, "series": [{"data": [[0.0, 5935.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7027.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7138.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.587675E12, "maxY": 100.0, "series": [{"data": [[1.58767512E12, 100.0], [1.58767518E12, 100.0], [1.58767548E12, 100.0], [1.58767506E12, 67.33688833124228], [1.58767536E12, 100.0], [1.58767542E12, 100.0], [1.58767572E12, 1.6666666666666667], [1.5876753E12, 100.0], [1.5876756E12, 99.85063045586809], [1.58767566E12, 64.15430861723443], [1.587675E12, 7.068965517241382], [1.58767554E12, 100.0], [1.58767524E12, 100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767572E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16.0, "minX": 1.0, "maxY": 2436.6, "series": [{"data": [[2.0, 29.0], [3.0, 23.0], [4.0, 16.0], [5.0, 33.0], [6.0, 22.0], [7.0, 22.666666666666668], [8.0, 28.0], [9.0, 26.666666666666664], [10.0, 34.0], [11.0, 33.0], [12.0, 21.249999999999996], [13.0, 27.8], [14.0, 22.0], [15.0, 22.25], [16.0, 30.333333333333332], [17.0, 25.875], [18.0, 28.2], [19.0, 29.5], [20.0, 20.833333333333332], [21.0, 24.333333333333332], [22.0, 29.0], [23.0, 29.142857142857142], [24.0, 24.09090909090909], [25.0, 26.25], [26.0, 25.071428571428573], [27.0, 19.8], [28.0, 26.5], [29.0, 27.666666666666668], [30.0, 26.875], [31.0, 23.454545454545453], [32.0, 25.28571428571429], [33.0, 25.166666666666668], [34.0, 22.3], [35.0, 25.071428571428573], [36.0, 26.181818181818183], [37.0, 23.133333333333333], [38.0, 26.0], [39.0, 24.692307692307693], [40.0, 22.58823529411765], [41.0, 23.69230769230769], [42.0, 31.8], [43.0, 24.733333333333334], [44.0, 23.625], [45.0, 26.636363636363633], [46.0, 24.583333333333332], [47.0, 24.26086956521739], [48.0, 26.81818181818182], [49.0, 24.0], [50.0, 25.857142857142858], [51.0, 23.57575757575757], [52.0, 21.28571428571429], [53.0, 24.653846153846153], [54.0, 25.823529411764707], [55.0, 22.8], [56.0, 21.96875], [57.0, 24.0], [58.0, 26.47058823529412], [59.0, 24.166666666666668], [60.0, 23.363636363636363], [61.0, 26.78571428571429], [62.0, 26.153846153846157], [63.0, 24.173913043478258], [64.0, 24.5], [65.0, 27.11111111111111], [66.0, 24.000000000000004], [67.0, 26.192307692307693], [68.0, 27.692307692307693], [69.0, 25.200000000000003], [70.0, 33.90909090909091], [71.0, 26.16666666666666], [72.0, 24.705882352941174], [73.0, 40.4], [74.0, 79.22727272727276], [75.0, 24.153846153846153], [76.0, 20.75], [77.0, 29.80645161290323], [78.0, 24.57894736842105], [79.0, 18.5], [81.0, 218.93333333333334], [82.0, 216.97297297297294], [83.0, 1594.3333333333333], [80.0, 27.75], [84.0, 460.74576271186424], [85.0, 302.0], [86.0, 35.06896551724138], [87.0, 760.9622641509436], [88.0, 187.7], [89.0, 887.7741935483871], [90.0, 975.0588235294117], [91.0, 876.2105263157895], [92.0, 807.5714285714286], [93.0, 1760.431818181818], [94.0, 1568.8], [95.0, 1674.9375000000002], [96.0, 1434.8333333333335], [97.0, 2436.6], [98.0, 1690.4210526315787], [99.0, 1299.521739130435], [100.0, 1292.610378912689], [1.0, 29.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[94.79200000000004, 1147.9597999999892]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 174.0], [3.0, 249.0], [4.0, 271.0], [5.0, 158.0], [6.0, 170.0], [7.0, 159.0], [8.0, 170.0], [9.0, 161.0], [10.0, 156.0], [11.0, 164.0], [12.0, 165.0], [13.0, 157.0], [14.0, 153.0], [15.0, 156.0], [16.0, 157.0], [17.0, 168.0], [18.0, 152.0], [19.0, 158.0], [20.0, 155.0], [21.0, 163.0], [22.0, 166.0], [23.0, 154.0], [24.0, 168.0], [25.0, 165.0], [26.0, 159.0], [27.0, 166.0], [28.0, 168.0], [29.0, 156.0], [30.0, 155.0], [31.0, 158.0], [32.0, 171.0], [33.0, 153.0], [34.0, 153.0], [35.0, 165.0], [36.0, 177.0], [37.0, 170.0], [38.0, 203.0], [39.0, 166.0], [40.0, 156.0], [41.0, 166.0], [42.0, 167.0], [43.0, 164.0], [44.0, 152.0], [45.0, 158.0], [46.0, 156.0], [47.0, 169.0], [48.0, 172.0], [49.0, 155.0], [50.0, 161.0], [51.0, 160.0], [52.0, 158.0], [53.0, 163.0], [54.0, 160.0], [55.0, 158.0], [56.0, 175.0], [57.0, 161.0], [58.0, 166.0], [59.0, 154.0], [60.0, 162.0], [61.0, 162.0], [62.0, 168.0], [63.0, 160.0], [64.0, 165.0], [65.0, 163.0], [66.0, 164.0], [67.0, 157.0], [68.0, 158.0], [69.0, 155.0], [70.0, 165.0], [71.0, 156.0], [72.0, 162.0], [73.0, 156.0], [74.0, 158.0], [75.0, 164.0], [76.0, 153.0], [77.0, 173.0], [78.0, 159.0], [79.0, 156.0], [80.0, 167.0], [81.0, 153.0], [82.0, 169.0], [83.0, 279.0], [84.0, 215.0], [85.0, 161.0], [86.0, 171.0], [87.0, 155.0], [88.0, 283.0], [89.0, 164.0], [90.0, 159.0], [91.0, 160.0], [92.0, 165.0], [93.0, 176.0], [94.0, 166.0], [95.0, 165.0], [96.0, 174.0], [97.0, 164.0], [98.0, 160.0], [99.0, 156.0], [100.0, 152.0], [1.0, 202.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[50.5, 167.5200000000001]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[2.0, 26.0], [3.0, 37.0], [4.0, 36.0], [5.0, 24.0], [6.0, 28.5], [7.0, 27.0], [8.0, 26.5], [9.0, 23.333333333333332], [10.0, 26.4], [11.0, 26.5], [12.0, 29.5], [13.0, 26.5], [14.0, 20.25], [15.0, 23.2], [16.0, 30.8], [17.0, 27.625], [18.0, 28.5], [19.0, 27.25], [20.0, 33.333333333333336], [21.0, 22.5], [22.0, 30.4], [23.0, 25.428571428571427], [24.0, 24.77777777777778], [25.0, 25.333333333333332], [26.0, 24.294117647058822], [27.0, 21.75], [28.0, 26.625], [29.0, 22.833333333333336], [30.0, 27.71428571428571], [31.0, 23.875], [32.0, 26.545454545454543], [33.0, 27.6], [34.0, 26.571428571428573], [35.0, 22.970588235294123], [36.0, 22.9], [37.0, 24.76923076923077], [38.0, 26.09090909090909], [39.0, 24.714285714285715], [40.0, 22.666666666666668], [41.0, 25.222222222222218], [42.0, 25.142857142857142], [43.0, 29.333333333333332], [44.0, 24.818181818181817], [45.0, 24.000000000000004], [46.0, 26.555555555555557], [47.0, 23.96296296296297], [48.0, 24.857142857142858], [49.0, 25.300000000000004], [50.0, 24.444444444444443], [51.0, 25.13333333333333], [52.0, 23.583333333333336], [53.0, 25.346153846153847], [54.0, 25.416666666666668], [55.0, 26.68181818181818], [56.0, 24.01818181818182], [57.0, 24.115384615384617], [58.0, 23.833333333333336], [59.0, 25.11111111111111], [60.0, 29.538461538461537], [61.0, 24.857142857142858], [62.0, 27.166666666666664], [63.0, 24.26666666666667], [64.0, 25.857142857142858], [65.0, 28.133333333333333], [66.0, 27.35714285714286], [67.0, 24.58974358974359], [68.0, 27.75], [69.0, 28.09090909090909], [70.0, 37.86666666666667], [71.0, 23.722222222222225], [72.0, 26.176470588235293], [73.0, 44.7], [74.0, 98.31250000000001], [75.0, 24.60869565217391], [76.0, 22.869565217391305], [77.0, 30.666666666666664], [78.0, 24.699999999999996], [81.0, 215.05555555555557], [82.0, 373.4], [83.0, 1148.5714285714287], [80.0, 22.0], [84.0, 681.5679012345678], [85.0, 1436.8461538461538], [86.0, 31.515151515151516], [87.0, 621.7777777777779], [88.0, 630.4615384615385], [89.0, 526.6875], [90.0, 803.2051282051282], [91.0, 575.0], [92.0, 1147.9090909090908], [93.0, 1880.7714285714285], [95.0, 1695.888888888889], [96.0, 1415.3333333333335], [97.0, 2154.1111111111113], [98.0, 1988.5526315789475], [99.0, 1395.210526315789], [100.0, 1308.874882186617]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[94.8005999999998, 1165.329200000003]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 21.466666666666665, "minX": 1.587675E12, "maxY": 258881.35, "series": [{"data": [[1.58767512E12, 215249.5], [1.58767518E12, 218044.53333333333], [1.58767548E12, 258881.35], [1.58767506E12, 176705.41666666666], [1.58767536E12, 200499.53333333333], [1.58767542E12, 218979.9], [1.58767572E12, 347.51666666666665], [1.5876753E12, 190878.68333333332], [1.5876756E12, 239384.68333333332], [1.58767566E12, 173743.38333333333], [1.587675E12, 2336.016666666667], [1.58767554E12, 234745.81666666668], [1.58767524E12, 194356.71666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58767512E12, 13256.233333333334], [1.58767518E12, 13427.5], [1.58767548E12, 15944.5], [1.58767506E12, 11098.3], [1.58767536E12, 12348.366666666667], [1.58767542E12, 13484.666666666666], [1.58767572E12, 21.466666666666665], [1.5876753E12, 11754.566666666668], [1.5876756E12, 14743.333333333334], [1.58767566E12, 10704.2], [1.587675E12, 170.43333333333334], [1.58767554E12, 14457.266666666666], [1.58767524E12, 11969.166666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767572E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 23.0, "minX": 1.587675E12, "maxY": 1742.965435041717, "series": [{"data": [[1.58767512E12, 1396.066595059075], [1.58767518E12, 1290.538049303322], [1.58767548E12, 762.4304932735427], [1.58767506E12, 419.15143246930415], [1.58767536E12, 1615.3356242840773], [1.58767542E12, 1304.6420940170933], [1.58767572E12, 29.0], [1.5876753E12, 1679.5578562728376], [1.5876756E12, 1014.0029069767445], [1.58767566E12, 253.91276041666694], [1.587675E12, 32.42857142857143], [1.58767554E12, 1093.1693069306916], [1.58767524E12, 1742.965435041717]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.587675E12, 184.9090909090909], [1.58767506E12, 165.37078651685403]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58767512E12, 1395.1321776814739], [1.58767518E12, 1324.0867724867712], [1.58767548E12, 820.982062780268], [1.58767506E12, 439.4300518134713], [1.58767536E12, 1667.7622950819673], [1.58767542E12, 1292.489473684211], [1.58767572E12, 23.0], [1.5876753E12, 1726.4532199270961], [1.5876756E12, 1021.2815533980586], [1.58767566E12, 254.19478737997298], [1.587675E12, 28.90909090909091], [1.58767554E12, 1137.5662055335988], [1.58767524E12, 1674.1281437125745]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767572E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 22.0, "minX": 1.587675E12, "maxY": 1742.7794994040528, "series": [{"data": [[1.58767512E12, 1395.8958109559633], [1.58767518E12, 1290.3376205787768], [1.58767548E12, 762.2251121076235], [1.58767506E12, 418.9222373806277], [1.58767536E12, 1615.119129438718], [1.58767542E12, 1304.4850427350425], [1.58767572E12, 28.5], [1.5876753E12, 1679.3897685749093], [1.5876756E12, 1013.8265503875971], [1.58767566E12, 253.6888020833337], [1.587675E12, 32.142857142857146], [1.58767554E12, 1092.985148514852], [1.58767524E12, 1742.7794994040528]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.587675E12, 184.72727272727278], [1.58767506E12, 165.33707865168543]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58767512E12, 1394.9089924160342], [1.58767518E12, 1323.8941798941805], [1.58767548E12, 820.7004484304944], [1.58767506E12, 439.1787564766841], [1.58767536E12, 1667.5526932084292], [1.58767542E12, 1292.3178947368433], [1.58767572E12, 22.0], [1.5876753E12, 1726.2320777642753], [1.5876756E12, 1021.0601941747583], [1.58767566E12, 253.9026063100136], [1.587675E12, 28.000000000000004], [1.58767554E12, 1137.3666007905126], [1.58767524E12, 1673.9485029940108]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767572E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.587675E12, "maxY": 3.1818181818181817, "series": [{"data": [[1.58767512E12, 0.47690655209452204], [1.58767518E12, 0.3837084673097539], [1.58767548E12, 0.20717488789237665], [1.58767506E12, 0.21009549795361548], [1.58767536E12, 0.4032073310423828], [1.58767542E12, 0.3632478632478636], [1.58767572E12, 0.0], [1.5876753E12, 0.4445797807551767], [1.5876756E12, 0.23643410852713198], [1.58767566E12, 0.08463541666666664], [1.587675E12, 1.1428571428571428], [1.58767554E12, 0.25148514851485154], [1.58767524E12, 0.4445768772348033]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.587675E12, 3.1818181818181817], [1.58767506E12, 0.6966292134831459]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58767512E12, 0.5579631635969672], [1.58767518E12, 0.5132275132275128], [1.58767548E12, 0.42421524663677124], [1.58767506E12, 0.595854922279793], [1.58767536E12, 0.4297423887587821], [1.58767542E12, 0.4526315789473686], [1.58767572E12, 1.0], [1.5876753E12, 0.4410692588092342], [1.5876756E12, 0.4388349514563106], [1.58767566E12, 0.44993141289437577], [1.587675E12, 0.1818181818181818], [1.58767554E12, 0.43379446640316216], [1.58767524E12, 0.5041916167664667]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767572E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.587675E12, "maxY": 5673.0, "series": [{"data": [[1.58767512E12, 4304.0], [1.58767518E12, 3945.0], [1.58767548E12, 3826.0], [1.58767506E12, 3449.0], [1.58767536E12, 5673.0], [1.58767542E12, 3661.0], [1.58767572E12, 29.0], [1.5876753E12, 4820.0], [1.5876756E12, 3953.0], [1.58767566E12, 3764.0], [1.587675E12, 271.0], [1.58767554E12, 4841.0], [1.58767524E12, 5415.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58767512E12, 29.0], [1.58767518E12, 12.0], [1.58767548E12, 10.0], [1.58767506E12, 11.0], [1.58767536E12, 39.0], [1.58767542E12, 39.0], [1.58767572E12, 23.0], [1.5876753E12, 41.0], [1.5876756E12, 12.0], [1.58767566E12, 10.0], [1.587675E12, 21.0], [1.58767554E12, 10.0], [1.58767524E12, 19.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58767512E12, 2313.5], [1.58767518E12, 2440.2000000000003], [1.58767548E12, 2051.8], [1.58767506E12, 1717.0], [1.58767536E12, 2673.2], [1.58767542E12, 2062.6], [1.58767572E12, 29.0], [1.5876753E12, 2678.5], [1.5876756E12, 2291.0], [1.58767566E12, 1249.4], [1.587675E12, 202.0], [1.58767554E12, 2529.8000000000006], [1.58767524E12, 2821.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58767512E12, 3365.3500000000004], [1.58767518E12, 3403.5200000000004], [1.58767548E12, 2950.4500000000003], [1.58767506E12, 2832.6999999999985], [1.58767536E12, 3645.6400000000003], [1.58767542E12, 2937.3899999999994], [1.58767572E12, 29.0], [1.5876753E12, 3829.8499999999976], [1.5876756E12, 3154.4399999999987], [1.58767566E12, 2492.7999999999993], [1.587675E12, 271.0], [1.58767554E12, 3784.77], [1.58767524E12, 3939.5]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58767512E12, 2680.75], [1.58767518E12, 2739.0], [1.58767548E12, 2359.949999999998], [1.58767506E12, 2111.25], [1.58767536E12, 3008.0], [1.58767542E12, 2311.95], [1.58767572E12, 29.0], [1.5876753E12, 3011.0], [1.5876756E12, 2602.7], [1.58767566E12, 1817.8999999999992], [1.587675E12, 260.0], [1.58767554E12, 2965.349999999999], [1.58767524E12, 3130.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767572E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 22.0, "minX": 1.0, "maxY": 1552.5, "series": [{"data": [[2.0, 26.0], [3.0, 23.5], [4.0, 27.0], [5.0, 35.0], [6.0, 28.0], [7.0, 37.0], [8.0, 928.5], [9.0, 203.0], [10.0, 834.5], [11.0, 1168.5], [12.0, 524.0], [13.0, 1221.0], [14.0, 970.5], [15.0, 1241.0], [16.0, 1198.0], [17.0, 1230.0], [18.0, 1322.5], [19.0, 1377.5], [20.0, 1393.0], [21.0, 1412.0], [22.0, 1389.5], [23.0, 1338.5], [24.0, 1333.0], [25.0, 1552.5], [26.0, 1067.0], [27.0, 1331.5], [28.0, 1259.0], [29.0, 1489.0], [30.0, 1313.5], [31.0, 1505.5], [32.0, 1488.0], [33.0, 1403.5], [34.0, 1457.0], [35.0, 1407.0], [36.0, 1043.0], [37.0, 1395.0], [39.0, 1182.0], [38.0, 1232.5], [40.0, 1469.5], [41.0, 879.5], [42.0, 1056.0], [43.0, 871.0], [44.0, 27.0], [45.0, 649.5], [47.0, 493.0], [46.0, 165.0], [49.0, 266.0], [48.0, 27.5], [51.0, 1084.0], [50.0, 26.0], [53.0, 30.0], [52.0, 28.0], [54.0, 29.0], [55.0, 771.0], [56.0, 25.5], [57.0, 768.0], [58.0, 702.5], [59.0, 22.0], [61.0, 37.0], [63.0, 226.5], [67.0, 22.0], [65.0, 1469.0], [71.0, 23.0], [69.0, 23.0], [68.0, 752.0], [72.0, 24.0], [1.0, 98.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 72.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 22.0, "minX": 1.0, "maxY": 1552.0, "series": [{"data": [[2.0, 25.5], [3.0, 23.5], [4.0, 26.5], [5.0, 33.5], [6.0, 27.5], [7.0, 37.0], [8.0, 928.5], [9.0, 203.0], [10.0, 834.5], [11.0, 1168.5], [12.0, 524.0], [13.0, 1221.0], [14.0, 970.5], [15.0, 1241.0], [16.0, 1198.0], [17.0, 1230.0], [18.0, 1321.5], [19.0, 1377.5], [20.0, 1393.0], [21.0, 1411.0], [22.0, 1389.5], [23.0, 1338.5], [24.0, 1333.0], [25.0, 1552.0], [26.0, 1066.5], [27.0, 1331.5], [28.0, 1259.0], [29.0, 1489.0], [30.0, 1313.5], [31.0, 1505.5], [32.0, 1488.0], [33.0, 1403.5], [34.0, 1457.0], [35.0, 1406.0], [36.0, 1043.0], [37.0, 1395.0], [39.0, 1182.0], [38.0, 1232.5], [40.0, 1469.5], [41.0, 879.5], [42.0, 1056.0], [43.0, 871.0], [44.0, 27.0], [45.0, 649.5], [47.0, 493.0], [46.0, 165.0], [49.0, 266.0], [48.0, 27.0], [51.0, 1084.0], [50.0, 25.5], [53.0, 29.0], [52.0, 28.0], [54.0, 29.0], [55.0, 771.0], [56.0, 25.0], [57.0, 767.0], [58.0, 702.5], [59.0, 22.0], [61.0, 37.0], [63.0, 226.5], [67.0, 22.0], [65.0, 1469.0], [71.0, 23.0], [69.0, 23.0], [68.0, 752.0], [72.0, 24.0], [1.0, 98.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 72.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.587675E12, "maxY": 37.43333333333333, "series": [{"data": [[1.58767512E12, 30.516666666666666], [1.58767518E12, 31.483333333333334], [1.58767548E12, 37.43333333333333], [1.58767506E12, 27.516666666666666], [1.58767536E12, 28.416666666666668], [1.58767542E12, 31.483333333333334], [1.58767572E12, 0.05], [1.5876753E12, 27.95], [1.5876756E12, 34.53333333333333], [1.58767566E12, 24.0], [1.587675E12, 0.48333333333333334], [1.58767554E12, 33.35], [1.58767524E12, 27.783333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767572E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.587675E12, "maxY": 37.166666666666664, "series": [{"data": [[1.58767512E12, 30.9], [1.58767518E12, 31.3], [1.58767548E12, 37.166666666666664], [1.58767506E12, 26.566666666666666], [1.58767536E12, 28.783333333333335], [1.58767542E12, 31.433333333333334], [1.58767572E12, 0.05], [1.5876753E12, 27.4], [1.5876756E12, 34.36666666666667], [1.58767566E12, 24.95], [1.587675E12, 0.48333333333333334], [1.58767554E12, 33.7], [1.58767524E12, 27.9]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767572E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.587675E12, "maxY": 18.583333333333332, "series": [{"data": [[1.587675E12, 0.18333333333333332], [1.58767506E12, 1.4833333333333334]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58767512E12, 15.516666666666667], [1.58767518E12, 15.55], [1.58767548E12, 18.583333333333332], [1.58767506E12, 12.216666666666667], [1.58767536E12, 14.55], [1.58767542E12, 15.6], [1.58767572E12, 0.03333333333333333], [1.5876753E12, 13.683333333333334], [1.5876756E12, 17.2], [1.58767566E12, 12.8], [1.587675E12, 0.11666666666666667], [1.58767554E12, 16.833333333333332], [1.58767524E12, 13.983333333333333]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58767512E12, 15.383333333333333], [1.58767518E12, 15.75], [1.58767548E12, 18.583333333333332], [1.58767506E12, 12.866666666666667], [1.58767536E12, 14.233333333333333], [1.58767542E12, 15.833333333333334], [1.58767572E12, 0.016666666666666666], [1.5876753E12, 13.716666666666667], [1.5876756E12, 17.166666666666668], [1.58767566E12, 12.15], [1.587675E12, 0.18333333333333332], [1.58767554E12, 16.866666666666667], [1.58767524E12, 13.916666666666666]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767572E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.587675E12, "maxY": 37.166666666666664, "series": [{"data": [[1.58767512E12, 30.9], [1.58767518E12, 31.3], [1.58767548E12, 37.166666666666664], [1.58767506E12, 26.566666666666666], [1.58767536E12, 28.783333333333335], [1.58767542E12, 31.433333333333334], [1.58767572E12, 0.05], [1.5876753E12, 27.4], [1.5876756E12, 34.36666666666667], [1.58767566E12, 24.95], [1.587675E12, 0.48333333333333334], [1.58767554E12, 33.7], [1.58767524E12, 27.9]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767572E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

