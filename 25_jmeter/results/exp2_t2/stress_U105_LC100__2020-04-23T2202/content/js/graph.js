/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "maxY": 5726.0, "series": [{"data": [[0.0, 10.0], [0.1, 12.0], [0.2, 12.0], [0.3, 13.0], [0.4, 14.0], [0.5, 14.0], [0.6, 14.0], [0.7, 14.0], [0.8, 15.0], [0.9, 15.0], [1.0, 15.0], [1.1, 16.0], [1.2, 16.0], [1.3, 16.0], [1.4, 16.0], [1.5, 16.0], [1.6, 17.0], [1.7, 17.0], [1.8, 17.0], [1.9, 17.0], [2.0, 17.0], [2.1, 18.0], [2.2, 18.0], [2.3, 18.0], [2.4, 18.0], [2.5, 18.0], [2.6, 18.0], [2.7, 18.0], [2.8, 19.0], [2.9, 19.0], [3.0, 19.0], [3.1, 19.0], [3.2, 19.0], [3.3, 19.0], [3.4, 19.0], [3.5, 19.0], [3.6, 20.0], [3.7, 20.0], [3.8, 20.0], [3.9, 20.0], [4.0, 20.0], [4.1, 20.0], [4.2, 20.0], [4.3, 21.0], [4.4, 21.0], [4.5, 21.0], [4.6, 21.0], [4.7, 21.0], [4.8, 21.0], [4.9, 21.0], [5.0, 21.0], [5.1, 21.0], [5.2, 22.0], [5.3, 22.0], [5.4, 22.0], [5.5, 22.0], [5.6, 22.0], [5.7, 22.0], [5.8, 22.0], [5.9, 23.0], [6.0, 23.0], [6.1, 23.0], [6.2, 23.0], [6.3, 23.0], [6.4, 23.0], [6.5, 23.0], [6.6, 23.0], [6.7, 23.0], [6.8, 23.0], [6.9, 24.0], [7.0, 24.0], [7.1, 24.0], [7.2, 24.0], [7.3, 24.0], [7.4, 24.0], [7.5, 24.0], [7.6, 24.0], [7.7, 25.0], [7.8, 25.0], [7.9, 25.0], [8.0, 25.0], [8.1, 25.0], [8.2, 25.0], [8.3, 25.0], [8.4, 25.0], [8.5, 26.0], [8.6, 26.0], [8.7, 26.0], [8.8, 26.0], [8.9, 26.0], [9.0, 26.0], [9.1, 26.0], [9.2, 26.0], [9.3, 27.0], [9.4, 27.0], [9.5, 27.0], [9.6, 27.0], [9.7, 27.0], [9.8, 27.0], [9.9, 27.0], [10.0, 27.0], [10.1, 28.0], [10.2, 28.0], [10.3, 28.0], [10.4, 28.0], [10.5, 28.0], [10.6, 28.0], [10.7, 28.0], [10.8, 29.0], [10.9, 29.0], [11.0, 29.0], [11.1, 29.0], [11.2, 29.0], [11.3, 29.0], [11.4, 30.0], [11.5, 30.0], [11.6, 30.0], [11.7, 30.0], [11.8, 30.0], [11.9, 31.0], [12.0, 31.0], [12.1, 31.0], [12.2, 32.0], [12.3, 32.0], [12.4, 32.0], [12.5, 32.0], [12.6, 33.0], [12.7, 33.0], [12.8, 33.0], [12.9, 34.0], [13.0, 34.0], [13.1, 35.0], [13.2, 35.0], [13.3, 35.0], [13.4, 36.0], [13.5, 37.0], [13.6, 38.0], [13.7, 39.0], [13.8, 40.0], [13.9, 41.0], [14.0, 44.0], [14.1, 48.0], [14.2, 58.0], [14.3, 77.0], [14.4, 94.0], [14.5, 112.0], [14.6, 129.0], [14.7, 142.0], [14.8, 166.0], [14.9, 184.0], [15.0, 214.0], [15.1, 247.0], [15.2, 275.0], [15.3, 286.0], [15.4, 301.0], [15.5, 313.0], [15.6, 328.0], [15.7, 336.0], [15.8, 345.0], [15.9, 355.0], [16.0, 364.0], [16.1, 378.0], [16.2, 391.0], [16.3, 401.0], [16.4, 414.0], [16.5, 420.0], [16.6, 426.0], [16.7, 435.0], [16.8, 441.0], [16.9, 447.0], [17.0, 453.0], [17.1, 459.0], [17.2, 466.0], [17.3, 474.0], [17.4, 480.0], [17.5, 484.0], [17.6, 491.0], [17.7, 498.0], [17.8, 504.0], [17.9, 509.0], [18.0, 515.0], [18.1, 518.0], [18.2, 524.0], [18.3, 531.0], [18.4, 534.0], [18.5, 541.0], [18.6, 544.0], [18.7, 548.0], [18.8, 553.0], [18.9, 558.0], [19.0, 562.0], [19.1, 569.0], [19.2, 573.0], [19.3, 576.0], [19.4, 580.0], [19.5, 585.0], [19.6, 589.0], [19.7, 596.0], [19.8, 601.0], [19.9, 605.0], [20.0, 609.0], [20.1, 614.0], [20.2, 617.0], [20.3, 620.0], [20.4, 623.0], [20.5, 627.0], [20.6, 631.0], [20.7, 638.0], [20.8, 641.0], [20.9, 645.0], [21.0, 651.0], [21.1, 654.0], [21.2, 661.0], [21.3, 665.0], [21.4, 669.0], [21.5, 672.0], [21.6, 678.0], [21.7, 682.0], [21.8, 685.0], [21.9, 688.0], [22.0, 691.0], [22.1, 694.0], [22.2, 698.0], [22.3, 703.0], [22.4, 706.0], [22.5, 709.0], [22.6, 713.0], [22.7, 715.0], [22.8, 718.0], [22.9, 722.0], [23.0, 730.0], [23.1, 733.0], [23.2, 738.0], [23.3, 740.0], [23.4, 742.0], [23.5, 745.0], [23.6, 749.0], [23.7, 755.0], [23.8, 759.0], [23.9, 761.0], [24.0, 765.0], [24.1, 768.0], [24.2, 774.0], [24.3, 778.0], [24.4, 782.0], [24.5, 785.0], [24.6, 790.0], [24.7, 793.0], [24.8, 795.0], [24.9, 796.0], [25.0, 799.0], [25.1, 803.0], [25.2, 806.0], [25.3, 810.0], [25.4, 813.0], [25.5, 817.0], [25.6, 819.0], [25.7, 822.0], [25.8, 825.0], [25.9, 829.0], [26.0, 831.0], [26.1, 834.0], [26.2, 838.0], [26.3, 841.0], [26.4, 845.0], [26.5, 847.0], [26.6, 851.0], [26.7, 854.0], [26.8, 857.0], [26.9, 859.0], [27.0, 861.0], [27.1, 864.0], [27.2, 868.0], [27.3, 871.0], [27.4, 874.0], [27.5, 876.0], [27.6, 879.0], [27.7, 881.0], [27.8, 885.0], [27.9, 889.0], [28.0, 893.0], [28.1, 898.0], [28.2, 900.0], [28.3, 903.0], [28.4, 905.0], [28.5, 909.0], [28.6, 912.0], [28.7, 915.0], [28.8, 918.0], [28.9, 920.0], [29.0, 922.0], [29.1, 924.0], [29.2, 926.0], [29.3, 929.0], [29.4, 930.0], [29.5, 932.0], [29.6, 934.0], [29.7, 937.0], [29.8, 940.0], [29.9, 943.0], [30.0, 944.0], [30.1, 948.0], [30.2, 951.0], [30.3, 953.0], [30.4, 957.0], [30.5, 959.0], [30.6, 961.0], [30.7, 963.0], [30.8, 966.0], [30.9, 968.0], [31.0, 970.0], [31.1, 972.0], [31.2, 975.0], [31.3, 979.0], [31.4, 981.0], [31.5, 983.0], [31.6, 985.0], [31.7, 988.0], [31.8, 991.0], [31.9, 995.0], [32.0, 1000.0], [32.1, 1002.0], [32.2, 1004.0], [32.3, 1007.0], [32.4, 1009.0], [32.5, 1011.0], [32.6, 1014.0], [32.7, 1016.0], [32.8, 1020.0], [32.9, 1022.0], [33.0, 1025.0], [33.1, 1027.0], [33.2, 1033.0], [33.3, 1037.0], [33.4, 1040.0], [33.5, 1043.0], [33.6, 1046.0], [33.7, 1048.0], [33.8, 1050.0], [33.9, 1052.0], [34.0, 1054.0], [34.1, 1057.0], [34.2, 1059.0], [34.3, 1061.0], [34.4, 1063.0], [34.5, 1065.0], [34.6, 1067.0], [34.7, 1071.0], [34.8, 1074.0], [34.9, 1077.0], [35.0, 1079.0], [35.1, 1082.0], [35.2, 1084.0], [35.3, 1088.0], [35.4, 1089.0], [35.5, 1093.0], [35.6, 1096.0], [35.7, 1097.0], [35.8, 1099.0], [35.9, 1102.0], [36.0, 1103.0], [36.1, 1105.0], [36.2, 1108.0], [36.3, 1110.0], [36.4, 1112.0], [36.5, 1114.0], [36.6, 1115.0], [36.7, 1118.0], [36.8, 1120.0], [36.9, 1123.0], [37.0, 1125.0], [37.1, 1128.0], [37.2, 1133.0], [37.3, 1136.0], [37.4, 1137.0], [37.5, 1140.0], [37.6, 1144.0], [37.7, 1147.0], [37.8, 1150.0], [37.9, 1153.0], [38.0, 1155.0], [38.1, 1156.0], [38.2, 1159.0], [38.3, 1163.0], [38.4, 1165.0], [38.5, 1167.0], [38.6, 1168.0], [38.7, 1170.0], [38.8, 1173.0], [38.9, 1175.0], [39.0, 1177.0], [39.1, 1180.0], [39.2, 1181.0], [39.3, 1184.0], [39.4, 1187.0], [39.5, 1189.0], [39.6, 1191.0], [39.7, 1193.0], [39.8, 1196.0], [39.9, 1197.0], [40.0, 1199.0], [40.1, 1200.0], [40.2, 1204.0], [40.3, 1206.0], [40.4, 1208.0], [40.5, 1211.0], [40.6, 1213.0], [40.7, 1216.0], [40.8, 1217.0], [40.9, 1219.0], [41.0, 1221.0], [41.1, 1224.0], [41.2, 1225.0], [41.3, 1227.0], [41.4, 1229.0], [41.5, 1230.0], [41.6, 1232.0], [41.7, 1234.0], [41.8, 1237.0], [41.9, 1239.0], [42.0, 1241.0], [42.1, 1244.0], [42.2, 1246.0], [42.3, 1248.0], [42.4, 1250.0], [42.5, 1252.0], [42.6, 1254.0], [42.7, 1257.0], [42.8, 1259.0], [42.9, 1261.0], [43.0, 1262.0], [43.1, 1264.0], [43.2, 1267.0], [43.3, 1268.0], [43.4, 1271.0], [43.5, 1272.0], [43.6, 1274.0], [43.7, 1276.0], [43.8, 1278.0], [43.9, 1281.0], [44.0, 1284.0], [44.1, 1285.0], [44.2, 1286.0], [44.3, 1288.0], [44.4, 1289.0], [44.5, 1292.0], [44.6, 1293.0], [44.7, 1295.0], [44.8, 1297.0], [44.9, 1301.0], [45.0, 1303.0], [45.1, 1305.0], [45.2, 1306.0], [45.3, 1308.0], [45.4, 1311.0], [45.5, 1312.0], [45.6, 1314.0], [45.7, 1316.0], [45.8, 1319.0], [45.9, 1321.0], [46.0, 1323.0], [46.1, 1325.0], [46.2, 1327.0], [46.3, 1329.0], [46.4, 1331.0], [46.5, 1333.0], [46.6, 1334.0], [46.7, 1337.0], [46.8, 1337.0], [46.9, 1339.0], [47.0, 1341.0], [47.1, 1343.0], [47.2, 1345.0], [47.3, 1347.0], [47.4, 1349.0], [47.5, 1352.0], [47.6, 1355.0], [47.7, 1357.0], [47.8, 1358.0], [47.9, 1360.0], [48.0, 1360.0], [48.1, 1363.0], [48.2, 1364.0], [48.3, 1366.0], [48.4, 1367.0], [48.5, 1369.0], [48.6, 1372.0], [48.7, 1373.0], [48.8, 1375.0], [48.9, 1378.0], [49.0, 1378.0], [49.1, 1380.0], [49.2, 1382.0], [49.3, 1385.0], [49.4, 1386.0], [49.5, 1389.0], [49.6, 1391.0], [49.7, 1393.0], [49.8, 1395.0], [49.9, 1398.0], [50.0, 1400.0], [50.1, 1402.0], [50.2, 1403.0], [50.3, 1406.0], [50.4, 1409.0], [50.5, 1410.0], [50.6, 1411.0], [50.7, 1413.0], [50.8, 1415.0], [50.9, 1416.0], [51.0, 1418.0], [51.1, 1420.0], [51.2, 1422.0], [51.3, 1423.0], [51.4, 1426.0], [51.5, 1429.0], [51.6, 1431.0], [51.7, 1433.0], [51.8, 1434.0], [51.9, 1436.0], [52.0, 1437.0], [52.1, 1440.0], [52.2, 1443.0], [52.3, 1446.0], [52.4, 1448.0], [52.5, 1450.0], [52.6, 1452.0], [52.7, 1455.0], [52.8, 1457.0], [52.9, 1458.0], [53.0, 1460.0], [53.1, 1462.0], [53.2, 1464.0], [53.3, 1465.0], [53.4, 1467.0], [53.5, 1469.0], [53.6, 1472.0], [53.7, 1474.0], [53.8, 1475.0], [53.9, 1477.0], [54.0, 1479.0], [54.1, 1480.0], [54.2, 1482.0], [54.3, 1484.0], [54.4, 1485.0], [54.5, 1487.0], [54.6, 1489.0], [54.7, 1491.0], [54.8, 1493.0], [54.9, 1496.0], [55.0, 1499.0], [55.1, 1500.0], [55.2, 1501.0], [55.3, 1503.0], [55.4, 1505.0], [55.5, 1507.0], [55.6, 1509.0], [55.7, 1510.0], [55.8, 1512.0], [55.9, 1515.0], [56.0, 1518.0], [56.1, 1520.0], [56.2, 1522.0], [56.3, 1524.0], [56.4, 1525.0], [56.5, 1527.0], [56.6, 1530.0], [56.7, 1532.0], [56.8, 1534.0], [56.9, 1536.0], [57.0, 1538.0], [57.1, 1542.0], [57.2, 1544.0], [57.3, 1547.0], [57.4, 1551.0], [57.5, 1553.0], [57.6, 1555.0], [57.7, 1558.0], [57.8, 1560.0], [57.9, 1563.0], [58.0, 1565.0], [58.1, 1567.0], [58.2, 1569.0], [58.3, 1572.0], [58.4, 1573.0], [58.5, 1576.0], [58.6, 1578.0], [58.7, 1580.0], [58.8, 1581.0], [58.9, 1583.0], [59.0, 1585.0], [59.1, 1587.0], [59.2, 1589.0], [59.3, 1592.0], [59.4, 1596.0], [59.5, 1597.0], [59.6, 1599.0], [59.7, 1603.0], [59.8, 1604.0], [59.9, 1607.0], [60.0, 1608.0], [60.1, 1610.0], [60.2, 1615.0], [60.3, 1616.0], [60.4, 1620.0], [60.5, 1622.0], [60.6, 1625.0], [60.7, 1625.0], [60.8, 1627.0], [60.9, 1629.0], [61.0, 1631.0], [61.1, 1633.0], [61.2, 1634.0], [61.3, 1637.0], [61.4, 1640.0], [61.5, 1643.0], [61.6, 1645.0], [61.7, 1646.0], [61.8, 1648.0], [61.9, 1652.0], [62.0, 1653.0], [62.1, 1656.0], [62.2, 1659.0], [62.3, 1660.0], [62.4, 1663.0], [62.5, 1664.0], [62.6, 1667.0], [62.7, 1670.0], [62.8, 1671.0], [62.9, 1673.0], [63.0, 1675.0], [63.1, 1678.0], [63.2, 1679.0], [63.3, 1683.0], [63.4, 1685.0], [63.5, 1687.0], [63.6, 1688.0], [63.7, 1690.0], [63.8, 1693.0], [63.9, 1695.0], [64.0, 1698.0], [64.1, 1701.0], [64.2, 1704.0], [64.3, 1706.0], [64.4, 1708.0], [64.5, 1710.0], [64.6, 1713.0], [64.7, 1715.0], [64.8, 1717.0], [64.9, 1721.0], [65.0, 1725.0], [65.1, 1726.0], [65.2, 1729.0], [65.3, 1733.0], [65.4, 1736.0], [65.5, 1738.0], [65.6, 1741.0], [65.7, 1743.0], [65.8, 1745.0], [65.9, 1746.0], [66.0, 1749.0], [66.1, 1751.0], [66.2, 1753.0], [66.3, 1755.0], [66.4, 1758.0], [66.5, 1761.0], [66.6, 1762.0], [66.7, 1765.0], [66.8, 1767.0], [66.9, 1770.0], [67.0, 1772.0], [67.1, 1774.0], [67.2, 1776.0], [67.3, 1778.0], [67.4, 1780.0], [67.5, 1783.0], [67.6, 1785.0], [67.7, 1786.0], [67.8, 1788.0], [67.9, 1790.0], [68.0, 1794.0], [68.1, 1796.0], [68.2, 1798.0], [68.3, 1801.0], [68.4, 1804.0], [68.5, 1806.0], [68.6, 1809.0], [68.7, 1812.0], [68.8, 1815.0], [68.9, 1818.0], [69.0, 1821.0], [69.1, 1824.0], [69.2, 1826.0], [69.3, 1829.0], [69.4, 1831.0], [69.5, 1834.0], [69.6, 1836.0], [69.7, 1838.0], [69.8, 1841.0], [69.9, 1845.0], [70.0, 1847.0], [70.1, 1850.0], [70.2, 1853.0], [70.3, 1856.0], [70.4, 1859.0], [70.5, 1861.0], [70.6, 1863.0], [70.7, 1866.0], [70.8, 1870.0], [70.9, 1874.0], [71.0, 1875.0], [71.1, 1878.0], [71.2, 1881.0], [71.3, 1885.0], [71.4, 1887.0], [71.5, 1890.0], [71.6, 1891.0], [71.7, 1892.0], [71.8, 1894.0], [71.9, 1898.0], [72.0, 1899.0], [72.1, 1901.0], [72.2, 1905.0], [72.3, 1907.0], [72.4, 1909.0], [72.5, 1912.0], [72.6, 1916.0], [72.7, 1919.0], [72.8, 1923.0], [72.9, 1925.0], [73.0, 1927.0], [73.1, 1929.0], [73.2, 1932.0], [73.3, 1936.0], [73.4, 1938.0], [73.5, 1941.0], [73.6, 1944.0], [73.7, 1947.0], [73.8, 1951.0], [73.9, 1954.0], [74.0, 1957.0], [74.1, 1959.0], [74.2, 1962.0], [74.3, 1966.0], [74.4, 1968.0], [74.5, 1971.0], [74.6, 1973.0], [74.7, 1975.0], [74.8, 1976.0], [74.9, 1980.0], [75.0, 1982.0], [75.1, 1983.0], [75.2, 1987.0], [75.3, 1989.0], [75.4, 1993.0], [75.5, 1997.0], [75.6, 2000.0], [75.7, 2003.0], [75.8, 2007.0], [75.9, 2009.0], [76.0, 2012.0], [76.1, 2017.0], [76.2, 2020.0], [76.3, 2025.0], [76.4, 2027.0], [76.5, 2029.0], [76.6, 2031.0], [76.7, 2034.0], [76.8, 2038.0], [76.9, 2040.0], [77.0, 2043.0], [77.1, 2045.0], [77.2, 2048.0], [77.3, 2051.0], [77.4, 2054.0], [77.5, 2056.0], [77.6, 2059.0], [77.7, 2061.0], [77.8, 2064.0], [77.9, 2067.0], [78.0, 2069.0], [78.1, 2072.0], [78.2, 2074.0], [78.3, 2077.0], [78.4, 2079.0], [78.5, 2081.0], [78.6, 2084.0], [78.7, 2088.0], [78.8, 2091.0], [78.9, 2094.0], [79.0, 2098.0], [79.1, 2102.0], [79.2, 2104.0], [79.3, 2107.0], [79.4, 2110.0], [79.5, 2114.0], [79.6, 2116.0], [79.7, 2120.0], [79.8, 2123.0], [79.9, 2125.0], [80.0, 2128.0], [80.1, 2131.0], [80.2, 2133.0], [80.3, 2135.0], [80.4, 2138.0], [80.5, 2141.0], [80.6, 2142.0], [80.7, 2146.0], [80.8, 2148.0], [80.9, 2151.0], [81.0, 2156.0], [81.1, 2159.0], [81.2, 2163.0], [81.3, 2165.0], [81.4, 2167.0], [81.5, 2171.0], [81.6, 2172.0], [81.7, 2177.0], [81.8, 2180.0], [81.9, 2183.0], [82.0, 2187.0], [82.1, 2190.0], [82.2, 2194.0], [82.3, 2198.0], [82.4, 2201.0], [82.5, 2205.0], [82.6, 2209.0], [82.7, 2213.0], [82.8, 2216.0], [82.9, 2218.0], [83.0, 2224.0], [83.1, 2229.0], [83.2, 2231.0], [83.3, 2234.0], [83.4, 2237.0], [83.5, 2239.0], [83.6, 2241.0], [83.7, 2244.0], [83.8, 2247.0], [83.9, 2253.0], [84.0, 2257.0], [84.1, 2261.0], [84.2, 2266.0], [84.3, 2270.0], [84.4, 2274.0], [84.5, 2278.0], [84.6, 2281.0], [84.7, 2285.0], [84.8, 2289.0], [84.9, 2292.0], [85.0, 2295.0], [85.1, 2299.0], [85.2, 2301.0], [85.3, 2306.0], [85.4, 2309.0], [85.5, 2314.0], [85.6, 2317.0], [85.7, 2320.0], [85.8, 2325.0], [85.9, 2327.0], [86.0, 2331.0], [86.1, 2338.0], [86.2, 2341.0], [86.3, 2345.0], [86.4, 2349.0], [86.5, 2353.0], [86.6, 2357.0], [86.7, 2362.0], [86.8, 2365.0], [86.9, 2371.0], [87.0, 2376.0], [87.1, 2381.0], [87.2, 2385.0], [87.3, 2389.0], [87.4, 2392.0], [87.5, 2397.0], [87.6, 2400.0], [87.7, 2405.0], [87.8, 2409.0], [87.9, 2414.0], [88.0, 2419.0], [88.1, 2425.0], [88.2, 2428.0], [88.3, 2433.0], [88.4, 2437.0], [88.5, 2443.0], [88.6, 2446.0], [88.7, 2450.0], [88.8, 2453.0], [88.9, 2458.0], [89.0, 2465.0], [89.1, 2470.0], [89.2, 2473.0], [89.3, 2480.0], [89.4, 2484.0], [89.5, 2487.0], [89.6, 2491.0], [89.7, 2497.0], [89.8, 2500.0], [89.9, 2502.0], [90.0, 2505.0], [90.1, 2512.0], [90.2, 2518.0], [90.3, 2524.0], [90.4, 2526.0], [90.5, 2534.0], [90.6, 2539.0], [90.7, 2545.0], [90.8, 2547.0], [90.9, 2553.0], [91.0, 2558.0], [91.1, 2565.0], [91.2, 2569.0], [91.3, 2574.0], [91.4, 2580.0], [91.5, 2589.0], [91.6, 2595.0], [91.7, 2601.0], [91.8, 2610.0], [91.9, 2617.0], [92.0, 2622.0], [92.1, 2629.0], [92.2, 2638.0], [92.3, 2644.0], [92.4, 2652.0], [92.5, 2659.0], [92.6, 2665.0], [92.7, 2671.0], [92.8, 2677.0], [92.9, 2685.0], [93.0, 2695.0], [93.1, 2702.0], [93.2, 2713.0], [93.3, 2721.0], [93.4, 2728.0], [93.5, 2740.0], [93.6, 2746.0], [93.7, 2756.0], [93.8, 2761.0], [93.9, 2781.0], [94.0, 2786.0], [94.1, 2798.0], [94.2, 2805.0], [94.3, 2816.0], [94.4, 2819.0], [94.5, 2834.0], [94.6, 2843.0], [94.7, 2855.0], [94.8, 2861.0], [94.9, 2873.0], [95.0, 2881.0], [95.1, 2894.0], [95.2, 2901.0], [95.3, 2911.0], [95.4, 2920.0], [95.5, 2930.0], [95.6, 2936.0], [95.7, 2955.0], [95.8, 2964.0], [95.9, 2973.0], [96.0, 2984.0], [96.1, 2993.0], [96.2, 3005.0], [96.3, 3014.0], [96.4, 3022.0], [96.5, 3042.0], [96.6, 3057.0], [96.7, 3073.0], [96.8, 3091.0], [96.9, 3107.0], [97.0, 3123.0], [97.1, 3139.0], [97.2, 3151.0], [97.3, 3162.0], [97.4, 3176.0], [97.5, 3210.0], [97.6, 3230.0], [97.7, 3253.0], [97.8, 3279.0], [97.9, 3308.0], [98.0, 3331.0], [98.1, 3364.0], [98.2, 3377.0], [98.3, 3411.0], [98.4, 3444.0], [98.5, 3468.0], [98.6, 3484.0], [98.7, 3520.0], [98.8, 3544.0], [98.9, 3581.0], [99.0, 3623.0], [99.1, 3722.0], [99.2, 3777.0], [99.3, 3851.0], [99.4, 3933.0], [99.5, 3997.0], [99.6, 4107.0], [99.7, 4245.0], [99.8, 4380.0], [99.9, 4739.0], [100.0, 5126.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 149.0], [0.1, 149.0], [0.2, 149.0], [0.3, 149.0], [0.4, 149.0], [0.5, 149.0], [0.6, 149.0], [0.7, 149.0], [0.8, 149.0], [0.9, 149.0], [1.0, 150.0], [1.1, 150.0], [1.2, 150.0], [1.3, 150.0], [1.4, 150.0], [1.5, 150.0], [1.6, 150.0], [1.7, 150.0], [1.8, 150.0], [1.9, 150.0], [2.0, 150.0], [2.1, 150.0], [2.2, 150.0], [2.3, 150.0], [2.4, 150.0], [2.5, 150.0], [2.6, 150.0], [2.7, 150.0], [2.8, 150.0], [2.9, 151.0], [3.0, 151.0], [3.1, 151.0], [3.2, 151.0], [3.3, 151.0], [3.4, 151.0], [3.5, 151.0], [3.6, 151.0], [3.7, 151.0], [3.8, 151.0], [3.9, 152.0], [4.0, 152.0], [4.1, 152.0], [4.2, 152.0], [4.3, 152.0], [4.4, 152.0], [4.5, 152.0], [4.6, 152.0], [4.7, 152.0], [4.8, 152.0], [4.9, 152.0], [5.0, 152.0], [5.1, 152.0], [5.2, 152.0], [5.3, 152.0], [5.4, 152.0], [5.5, 152.0], [5.6, 152.0], [5.7, 152.0], [5.8, 152.0], [5.9, 152.0], [6.0, 152.0], [6.1, 152.0], [6.2, 152.0], [6.3, 152.0], [6.4, 152.0], [6.5, 152.0], [6.6, 152.0], [6.7, 152.0], [6.8, 152.0], [6.9, 152.0], [7.0, 152.0], [7.1, 152.0], [7.2, 152.0], [7.3, 152.0], [7.4, 152.0], [7.5, 152.0], [7.6, 152.0], [7.7, 153.0], [7.8, 153.0], [7.9, 153.0], [8.0, 153.0], [8.1, 153.0], [8.2, 153.0], [8.3, 153.0], [8.4, 153.0], [8.5, 153.0], [8.6, 153.0], [8.7, 153.0], [8.8, 153.0], [8.9, 153.0], [9.0, 153.0], [9.1, 153.0], [9.2, 153.0], [9.3, 153.0], [9.4, 153.0], [9.5, 153.0], [9.6, 154.0], [9.7, 154.0], [9.8, 154.0], [9.9, 154.0], [10.0, 154.0], [10.1, 154.0], [10.2, 154.0], [10.3, 154.0], [10.4, 154.0], [10.5, 154.0], [10.6, 154.0], [10.7, 154.0], [10.8, 154.0], [10.9, 154.0], [11.0, 154.0], [11.1, 154.0], [11.2, 154.0], [11.3, 154.0], [11.4, 154.0], [11.5, 154.0], [11.6, 154.0], [11.7, 154.0], [11.8, 154.0], [11.9, 154.0], [12.0, 154.0], [12.1, 154.0], [12.2, 154.0], [12.3, 154.0], [12.4, 154.0], [12.5, 154.0], [12.6, 154.0], [12.7, 154.0], [12.8, 154.0], [12.9, 154.0], [13.0, 154.0], [13.1, 154.0], [13.2, 154.0], [13.3, 154.0], [13.4, 154.0], [13.5, 154.0], [13.6, 154.0], [13.7, 154.0], [13.8, 154.0], [13.9, 154.0], [14.0, 154.0], [14.1, 154.0], [14.2, 154.0], [14.3, 154.0], [14.4, 154.0], [14.5, 154.0], [14.6, 154.0], [14.7, 154.0], [14.8, 154.0], [14.9, 154.0], [15.0, 154.0], [15.1, 154.0], [15.2, 154.0], [15.3, 155.0], [15.4, 155.0], [15.5, 155.0], [15.6, 155.0], [15.7, 155.0], [15.8, 155.0], [15.9, 155.0], [16.0, 155.0], [16.1, 155.0], [16.2, 155.0], [16.3, 155.0], [16.4, 155.0], [16.5, 155.0], [16.6, 155.0], [16.7, 155.0], [16.8, 155.0], [16.9, 155.0], [17.0, 155.0], [17.1, 155.0], [17.2, 155.0], [17.3, 155.0], [17.4, 155.0], [17.5, 155.0], [17.6, 155.0], [17.7, 155.0], [17.8, 155.0], [17.9, 155.0], [18.0, 155.0], [18.1, 155.0], [18.2, 155.0], [18.3, 155.0], [18.4, 155.0], [18.5, 155.0], [18.6, 155.0], [18.7, 155.0], [18.8, 155.0], [18.9, 155.0], [19.0, 155.0], [19.1, 155.0], [19.2, 155.0], [19.3, 155.0], [19.4, 155.0], [19.5, 155.0], [19.6, 155.0], [19.7, 155.0], [19.8, 155.0], [19.9, 155.0], [20.0, 155.0], [20.1, 155.0], [20.2, 155.0], [20.3, 155.0], [20.4, 155.0], [20.5, 155.0], [20.6, 155.0], [20.7, 155.0], [20.8, 155.0], [20.9, 155.0], [21.0, 155.0], [21.1, 155.0], [21.2, 155.0], [21.3, 155.0], [21.4, 155.0], [21.5, 155.0], [21.6, 155.0], [21.7, 155.0], [21.8, 155.0], [21.9, 155.0], [22.0, 156.0], [22.1, 156.0], [22.2, 156.0], [22.3, 156.0], [22.4, 156.0], [22.5, 156.0], [22.6, 156.0], [22.7, 156.0], [22.8, 156.0], [22.9, 156.0], [23.0, 156.0], [23.1, 156.0], [23.2, 156.0], [23.3, 156.0], [23.4, 156.0], [23.5, 156.0], [23.6, 156.0], [23.7, 156.0], [23.8, 156.0], [23.9, 156.0], [24.0, 156.0], [24.1, 156.0], [24.2, 156.0], [24.3, 156.0], [24.4, 156.0], [24.5, 156.0], [24.6, 156.0], [24.7, 156.0], [24.8, 156.0], [24.9, 156.0], [25.0, 156.0], [25.1, 156.0], [25.2, 156.0], [25.3, 156.0], [25.4, 156.0], [25.5, 156.0], [25.6, 156.0], [25.7, 156.0], [25.8, 156.0], [25.9, 156.0], [26.0, 156.0], [26.1, 156.0], [26.2, 156.0], [26.3, 156.0], [26.4, 156.0], [26.5, 156.0], [26.6, 156.0], [26.7, 156.0], [26.8, 156.0], [26.9, 156.0], [27.0, 156.0], [27.1, 156.0], [27.2, 156.0], [27.3, 156.0], [27.4, 156.0], [27.5, 156.0], [27.6, 156.0], [27.7, 156.0], [27.8, 156.0], [27.9, 156.0], [28.0, 156.0], [28.1, 156.0], [28.2, 156.0], [28.3, 156.0], [28.4, 156.0], [28.5, 156.0], [28.6, 156.0], [28.7, 156.0], [28.8, 156.0], [28.9, 156.0], [29.0, 156.0], [29.1, 156.0], [29.2, 156.0], [29.3, 156.0], [29.4, 156.0], [29.5, 156.0], [29.6, 156.0], [29.7, 156.0], [29.8, 156.0], [29.9, 156.0], [30.0, 156.0], [30.1, 156.0], [30.2, 156.0], [30.3, 156.0], [30.4, 156.0], [30.5, 156.0], [30.6, 156.0], [30.7, 156.0], [30.8, 156.0], [30.9, 156.0], [31.0, 156.0], [31.1, 156.0], [31.2, 156.0], [31.3, 156.0], [31.4, 156.0], [31.5, 156.0], [31.6, 156.0], [31.7, 156.0], [31.8, 156.0], [31.9, 156.0], [32.0, 156.0], [32.1, 156.0], [32.2, 156.0], [32.3, 156.0], [32.4, 156.0], [32.5, 156.0], [32.6, 156.0], [32.7, 156.0], [32.8, 156.0], [32.9, 156.0], [33.0, 156.0], [33.1, 156.0], [33.2, 156.0], [33.3, 156.0], [33.4, 157.0], [33.5, 157.0], [33.6, 157.0], [33.7, 157.0], [33.8, 157.0], [33.9, 157.0], [34.0, 157.0], [34.1, 157.0], [34.2, 157.0], [34.3, 157.0], [34.4, 157.0], [34.5, 157.0], [34.6, 157.0], [34.7, 157.0], [34.8, 157.0], [34.9, 157.0], [35.0, 157.0], [35.1, 157.0], [35.2, 157.0], [35.3, 157.0], [35.4, 157.0], [35.5, 157.0], [35.6, 157.0], [35.7, 157.0], [35.8, 157.0], [35.9, 157.0], [36.0, 157.0], [36.1, 157.0], [36.2, 157.0], [36.3, 157.0], [36.4, 157.0], [36.5, 157.0], [36.6, 157.0], [36.7, 157.0], [36.8, 157.0], [36.9, 157.0], [37.0, 157.0], [37.1, 157.0], [37.2, 157.0], [37.3, 157.0], [37.4, 157.0], [37.5, 157.0], [37.6, 157.0], [37.7, 157.0], [37.8, 157.0], [37.9, 157.0], [38.0, 157.0], [38.1, 157.0], [38.2, 157.0], [38.3, 157.0], [38.4, 157.0], [38.5, 157.0], [38.6, 157.0], [38.7, 157.0], [38.8, 157.0], [38.9, 157.0], [39.0, 157.0], [39.1, 158.0], [39.2, 158.0], [39.3, 158.0], [39.4, 158.0], [39.5, 158.0], [39.6, 158.0], [39.7, 158.0], [39.8, 158.0], [39.9, 158.0], [40.0, 158.0], [40.1, 158.0], [40.2, 158.0], [40.3, 158.0], [40.4, 158.0], [40.5, 158.0], [40.6, 158.0], [40.7, 158.0], [40.8, 158.0], [40.9, 158.0], [41.0, 158.0], [41.1, 158.0], [41.2, 158.0], [41.3, 158.0], [41.4, 158.0], [41.5, 158.0], [41.6, 158.0], [41.7, 158.0], [41.8, 158.0], [41.9, 158.0], [42.0, 158.0], [42.1, 158.0], [42.2, 158.0], [42.3, 158.0], [42.4, 158.0], [42.5, 158.0], [42.6, 158.0], [42.7, 158.0], [42.8, 158.0], [42.9, 158.0], [43.0, 158.0], [43.1, 158.0], [43.2, 158.0], [43.3, 158.0], [43.4, 158.0], [43.5, 158.0], [43.6, 158.0], [43.7, 158.0], [43.8, 158.0], [43.9, 158.0], [44.0, 158.0], [44.1, 158.0], [44.2, 158.0], [44.3, 158.0], [44.4, 158.0], [44.5, 158.0], [44.6, 158.0], [44.7, 158.0], [44.8, 158.0], [44.9, 158.0], [45.0, 158.0], [45.1, 158.0], [45.2, 158.0], [45.3, 158.0], [45.4, 158.0], [45.5, 158.0], [45.6, 158.0], [45.7, 158.0], [45.8, 158.0], [45.9, 158.0], [46.0, 158.0], [46.1, 158.0], [46.2, 158.0], [46.3, 158.0], [46.4, 158.0], [46.5, 158.0], [46.6, 158.0], [46.7, 159.0], [46.8, 159.0], [46.9, 159.0], [47.0, 159.0], [47.1, 159.0], [47.2, 159.0], [47.3, 159.0], [47.4, 159.0], [47.5, 159.0], [47.6, 159.0], [47.7, 159.0], [47.8, 159.0], [47.9, 159.0], [48.0, 159.0], [48.1, 159.0], [48.2, 159.0], [48.3, 159.0], [48.4, 159.0], [48.5, 159.0], [48.6, 159.0], [48.7, 159.0], [48.8, 159.0], [48.9, 159.0], [49.0, 159.0], [49.1, 159.0], [49.2, 159.0], [49.3, 159.0], [49.4, 159.0], [49.5, 159.0], [49.6, 159.0], [49.7, 159.0], [49.8, 159.0], [49.9, 159.0], [50.0, 159.0], [50.1, 159.0], [50.2, 159.0], [50.3, 159.0], [50.4, 159.0], [50.5, 159.0], [50.6, 159.0], [50.7, 159.0], [50.8, 159.0], [50.9, 159.0], [51.0, 159.0], [51.1, 159.0], [51.2, 159.0], [51.3, 159.0], [51.4, 159.0], [51.5, 159.0], [51.6, 159.0], [51.7, 159.0], [51.8, 159.0], [51.9, 159.0], [52.0, 159.0], [52.1, 159.0], [52.2, 159.0], [52.3, 159.0], [52.4, 159.0], [52.5, 159.0], [52.6, 159.0], [52.7, 159.0], [52.8, 159.0], [52.9, 159.0], [53.0, 159.0], [53.1, 159.0], [53.2, 159.0], [53.3, 159.0], [53.4, 159.0], [53.5, 159.0], [53.6, 159.0], [53.7, 159.0], [53.8, 159.0], [53.9, 159.0], [54.0, 159.0], [54.1, 159.0], [54.2, 159.0], [54.3, 160.0], [54.4, 160.0], [54.5, 160.0], [54.6, 160.0], [54.7, 160.0], [54.8, 160.0], [54.9, 160.0], [55.0, 160.0], [55.1, 160.0], [55.2, 160.0], [55.3, 160.0], [55.4, 160.0], [55.5, 160.0], [55.6, 160.0], [55.7, 160.0], [55.8, 160.0], [55.9, 160.0], [56.0, 160.0], [56.1, 160.0], [56.2, 160.0], [56.3, 160.0], [56.4, 160.0], [56.5, 160.0], [56.6, 160.0], [56.7, 160.0], [56.8, 160.0], [56.9, 160.0], [57.0, 160.0], [57.1, 160.0], [57.2, 161.0], [57.3, 161.0], [57.4, 161.0], [57.5, 161.0], [57.6, 161.0], [57.7, 161.0], [57.8, 161.0], [57.9, 161.0], [58.0, 161.0], [58.1, 161.0], [58.2, 161.0], [58.3, 161.0], [58.4, 161.0], [58.5, 161.0], [58.6, 161.0], [58.7, 161.0], [58.8, 161.0], [58.9, 161.0], [59.0, 161.0], [59.1, 161.0], [59.2, 161.0], [59.3, 161.0], [59.4, 161.0], [59.5, 161.0], [59.6, 161.0], [59.7, 161.0], [59.8, 161.0], [59.9, 161.0], [60.0, 161.0], [60.1, 161.0], [60.2, 161.0], [60.3, 161.0], [60.4, 161.0], [60.5, 161.0], [60.6, 161.0], [60.7, 161.0], [60.8, 161.0], [60.9, 161.0], [61.0, 161.0], [61.1, 161.0], [61.2, 161.0], [61.3, 161.0], [61.4, 161.0], [61.5, 161.0], [61.6, 161.0], [61.7, 161.0], [61.8, 161.0], [61.9, 161.0], [62.0, 162.0], [62.1, 162.0], [62.2, 162.0], [62.3, 162.0], [62.4, 162.0], [62.5, 162.0], [62.6, 162.0], [62.7, 162.0], [62.8, 162.0], [62.9, 162.0], [63.0, 162.0], [63.1, 162.0], [63.2, 162.0], [63.3, 162.0], [63.4, 162.0], [63.5, 162.0], [63.6, 162.0], [63.7, 162.0], [63.8, 162.0], [63.9, 162.0], [64.0, 162.0], [64.1, 162.0], [64.2, 162.0], [64.3, 162.0], [64.4, 162.0], [64.5, 162.0], [64.6, 162.0], [64.7, 162.0], [64.8, 162.0], [64.9, 162.0], [65.0, 162.0], [65.1, 162.0], [65.2, 162.0], [65.3, 162.0], [65.4, 162.0], [65.5, 162.0], [65.6, 162.0], [65.7, 162.0], [65.8, 162.0], [65.9, 162.0], [66.0, 162.0], [66.1, 162.0], [66.2, 162.0], [66.3, 162.0], [66.4, 162.0], [66.5, 162.0], [66.6, 162.0], [66.7, 162.0], [66.8, 162.0], [66.9, 162.0], [67.0, 162.0], [67.1, 162.0], [67.2, 162.0], [67.3, 162.0], [67.4, 162.0], [67.5, 162.0], [67.6, 162.0], [67.7, 162.0], [67.8, 162.0], [67.9, 162.0], [68.0, 162.0], [68.1, 162.0], [68.2, 162.0], [68.3, 162.0], [68.4, 162.0], [68.5, 162.0], [68.6, 163.0], [68.7, 163.0], [68.8, 163.0], [68.9, 163.0], [69.0, 163.0], [69.1, 163.0], [69.2, 163.0], [69.3, 163.0], [69.4, 163.0], [69.5, 163.0], [69.6, 163.0], [69.7, 163.0], [69.8, 163.0], [69.9, 163.0], [70.0, 163.0], [70.1, 163.0], [70.2, 163.0], [70.3, 163.0], [70.4, 163.0], [70.5, 163.0], [70.6, 163.0], [70.7, 163.0], [70.8, 163.0], [70.9, 163.0], [71.0, 163.0], [71.1, 163.0], [71.2, 163.0], [71.3, 163.0], [71.4, 163.0], [71.5, 164.0], [71.6, 164.0], [71.7, 164.0], [71.8, 164.0], [71.9, 164.0], [72.0, 164.0], [72.1, 164.0], [72.2, 164.0], [72.3, 164.0], [72.4, 164.0], [72.5, 164.0], [72.6, 164.0], [72.7, 164.0], [72.8, 164.0], [72.9, 164.0], [73.0, 164.0], [73.1, 164.0], [73.2, 164.0], [73.3, 164.0], [73.4, 164.0], [73.5, 164.0], [73.6, 164.0], [73.7, 164.0], [73.8, 164.0], [73.9, 164.0], [74.0, 164.0], [74.1, 164.0], [74.2, 164.0], [74.3, 165.0], [74.4, 165.0], [74.5, 165.0], [74.6, 165.0], [74.7, 165.0], [74.8, 165.0], [74.9, 165.0], [75.0, 165.0], [75.1, 165.0], [75.2, 165.0], [75.3, 165.0], [75.4, 165.0], [75.5, 165.0], [75.6, 165.0], [75.7, 165.0], [75.8, 165.0], [75.9, 165.0], [76.0, 165.0], [76.1, 165.0], [76.2, 166.0], [76.3, 166.0], [76.4, 166.0], [76.5, 166.0], [76.6, 166.0], [76.7, 166.0], [76.8, 166.0], [76.9, 166.0], [77.0, 166.0], [77.1, 166.0], [77.2, 166.0], [77.3, 166.0], [77.4, 166.0], [77.5, 166.0], [77.6, 166.0], [77.7, 166.0], [77.8, 166.0], [77.9, 166.0], [78.0, 166.0], [78.1, 166.0], [78.2, 166.0], [78.3, 166.0], [78.4, 166.0], [78.5, 166.0], [78.6, 166.0], [78.7, 166.0], [78.8, 166.0], [78.9, 166.0], [79.0, 166.0], [79.1, 167.0], [79.2, 167.0], [79.3, 167.0], [79.4, 167.0], [79.5, 167.0], [79.6, 167.0], [79.7, 167.0], [79.8, 167.0], [79.9, 167.0], [80.0, 167.0], [80.1, 167.0], [80.2, 167.0], [80.3, 167.0], [80.4, 167.0], [80.5, 167.0], [80.6, 167.0], [80.7, 167.0], [80.8, 167.0], [80.9, 167.0], [81.0, 168.0], [81.1, 168.0], [81.2, 168.0], [81.3, 168.0], [81.4, 168.0], [81.5, 168.0], [81.6, 168.0], [81.7, 168.0], [81.8, 168.0], [81.9, 168.0], [82.0, 168.0], [82.1, 168.0], [82.2, 168.0], [82.3, 168.0], [82.4, 168.0], [82.5, 168.0], [82.6, 168.0], [82.7, 168.0], [82.8, 168.0], [82.9, 169.0], [83.0, 169.0], [83.1, 169.0], [83.2, 169.0], [83.3, 169.0], [83.4, 169.0], [83.5, 169.0], [83.6, 169.0], [83.7, 169.0], [83.8, 169.0], [83.9, 170.0], [84.0, 170.0], [84.1, 170.0], [84.2, 170.0], [84.3, 170.0], [84.4, 170.0], [84.5, 170.0], [84.6, 170.0], [84.7, 170.0], [84.8, 170.0], [84.9, 170.0], [85.0, 170.0], [85.1, 170.0], [85.2, 170.0], [85.3, 170.0], [85.4, 170.0], [85.5, 170.0], [85.6, 170.0], [85.7, 170.0], [85.8, 170.0], [85.9, 170.0], [86.0, 170.0], [86.1, 170.0], [86.2, 170.0], [86.3, 170.0], [86.4, 170.0], [86.5, 170.0], [86.6, 170.0], [86.7, 171.0], [86.8, 171.0], [86.9, 171.0], [87.0, 171.0], [87.1, 171.0], [87.2, 171.0], [87.3, 171.0], [87.4, 171.0], [87.5, 171.0], [87.6, 171.0], [87.7, 171.0], [87.8, 171.0], [87.9, 171.0], [88.0, 171.0], [88.1, 171.0], [88.2, 171.0], [88.3, 171.0], [88.4, 171.0], [88.5, 171.0], [88.6, 173.0], [88.7, 173.0], [88.8, 173.0], [88.9, 173.0], [89.0, 173.0], [89.1, 173.0], [89.2, 173.0], [89.3, 173.0], [89.4, 173.0], [89.5, 173.0], [89.6, 176.0], [89.7, 176.0], [89.8, 176.0], [89.9, 176.0], [90.0, 176.0], [90.1, 176.0], [90.2, 176.0], [90.3, 176.0], [90.4, 176.0], [90.5, 180.0], [90.6, 180.0], [90.7, 180.0], [90.8, 180.0], [90.9, 180.0], [91.0, 180.0], [91.1, 180.0], [91.2, 180.0], [91.3, 180.0], [91.4, 180.0], [91.5, 184.0], [91.6, 184.0], [91.7, 184.0], [91.8, 184.0], [91.9, 184.0], [92.0, 184.0], [92.1, 184.0], [92.2, 184.0], [92.3, 184.0], [92.4, 186.0], [92.5, 186.0], [92.6, 186.0], [92.7, 186.0], [92.8, 186.0], [92.9, 186.0], [93.0, 186.0], [93.1, 186.0], [93.2, 186.0], [93.3, 186.0], [93.4, 187.0], [93.5, 187.0], [93.6, 187.0], [93.7, 187.0], [93.8, 187.0], [93.9, 187.0], [94.0, 187.0], [94.1, 187.0], [94.2, 187.0], [94.3, 189.0], [94.4, 189.0], [94.5, 189.0], [94.6, 189.0], [94.7, 189.0], [94.8, 189.0], [94.9, 189.0], [95.0, 189.0], [95.1, 189.0], [95.2, 189.0], [95.3, 190.0], [95.4, 190.0], [95.5, 190.0], [95.6, 190.0], [95.7, 190.0], [95.8, 190.0], [95.9, 190.0], [96.0, 190.0], [96.1, 190.0], [96.2, 201.0], [96.3, 201.0], [96.4, 201.0], [96.5, 201.0], [96.6, 201.0], [96.7, 201.0], [96.8, 201.0], [96.9, 201.0], [97.0, 201.0], [97.1, 201.0], [97.2, 201.0], [97.3, 201.0], [97.4, 201.0], [97.5, 201.0], [97.6, 201.0], [97.7, 201.0], [97.8, 201.0], [97.9, 201.0], [98.0, 201.0], [98.1, 260.0], [98.2, 260.0], [98.3, 260.0], [98.4, 260.0], [98.5, 260.0], [98.6, 260.0], [98.7, 260.0], [98.8, 260.0], [98.9, 260.0], [99.0, 260.0], [99.1, 286.0], [99.2, 286.0], [99.3, 286.0], [99.4, 286.0], [99.5, 286.0], [99.6, 286.0], [99.7, 286.0], [99.8, 286.0], [99.9, 286.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 10.0], [0.1, 12.0], [0.2, 13.0], [0.3, 13.0], [0.4, 14.0], [0.5, 14.0], [0.6, 15.0], [0.7, 15.0], [0.8, 15.0], [0.9, 16.0], [1.0, 16.0], [1.1, 16.0], [1.2, 16.0], [1.3, 17.0], [1.4, 17.0], [1.5, 17.0], [1.6, 17.0], [1.7, 17.0], [1.8, 17.0], [1.9, 18.0], [2.0, 18.0], [2.1, 18.0], [2.2, 18.0], [2.3, 18.0], [2.4, 18.0], [2.5, 19.0], [2.6, 19.0], [2.7, 19.0], [2.8, 19.0], [2.9, 19.0], [3.0, 19.0], [3.1, 19.0], [3.2, 19.0], [3.3, 20.0], [3.4, 20.0], [3.5, 20.0], [3.6, 20.0], [3.7, 20.0], [3.8, 20.0], [3.9, 20.0], [4.0, 21.0], [4.1, 21.0], [4.2, 21.0], [4.3, 21.0], [4.4, 21.0], [4.5, 21.0], [4.6, 21.0], [4.7, 21.0], [4.8, 21.0], [4.9, 22.0], [5.0, 22.0], [5.1, 22.0], [5.2, 22.0], [5.3, 22.0], [5.4, 22.0], [5.5, 22.0], [5.6, 22.0], [5.7, 22.0], [5.8, 23.0], [5.9, 23.0], [6.0, 23.0], [6.1, 23.0], [6.2, 23.0], [6.3, 23.0], [6.4, 23.0], [6.5, 23.0], [6.6, 23.0], [6.7, 24.0], [6.8, 24.0], [6.9, 24.0], [7.0, 24.0], [7.1, 24.0], [7.2, 24.0], [7.3, 24.0], [7.4, 24.0], [7.5, 24.0], [7.6, 24.0], [7.7, 25.0], [7.8, 25.0], [7.9, 25.0], [8.0, 25.0], [8.1, 25.0], [8.2, 25.0], [8.3, 25.0], [8.4, 25.0], [8.5, 25.0], [8.6, 26.0], [8.7, 26.0], [8.8, 26.0], [8.9, 26.0], [9.0, 26.0], [9.1, 26.0], [9.2, 27.0], [9.3, 27.0], [9.4, 27.0], [9.5, 27.0], [9.6, 27.0], [9.7, 27.0], [9.8, 27.0], [9.9, 28.0], [10.0, 28.0], [10.1, 28.0], [10.2, 28.0], [10.3, 28.0], [10.4, 28.0], [10.5, 28.0], [10.6, 29.0], [10.7, 29.0], [10.8, 29.0], [10.9, 29.0], [11.0, 29.0], [11.1, 30.0], [11.2, 30.0], [11.3, 30.0], [11.4, 30.0], [11.5, 30.0], [11.6, 30.0], [11.7, 31.0], [11.8, 31.0], [11.9, 31.0], [12.0, 31.0], [12.1, 31.0], [12.2, 32.0], [12.3, 32.0], [12.4, 32.0], [12.5, 33.0], [12.6, 33.0], [12.7, 33.0], [12.8, 33.0], [12.9, 34.0], [13.0, 34.0], [13.1, 35.0], [13.2, 36.0], [13.3, 36.0], [13.4, 37.0], [13.5, 39.0], [13.6, 40.0], [13.7, 40.0], [13.8, 42.0], [13.9, 43.0], [14.0, 45.0], [14.1, 48.0], [14.2, 58.0], [14.3, 78.0], [14.4, 105.0], [14.5, 116.0], [14.6, 158.0], [14.7, 179.0], [14.8, 216.0], [14.9, 231.0], [15.0, 252.0], [15.1, 277.0], [15.2, 300.0], [15.3, 320.0], [15.4, 334.0], [15.5, 342.0], [15.6, 359.0], [15.7, 370.0], [15.8, 380.0], [15.9, 390.0], [16.0, 401.0], [16.1, 409.0], [16.2, 417.0], [16.3, 424.0], [16.4, 429.0], [16.5, 436.0], [16.6, 444.0], [16.7, 453.0], [16.8, 462.0], [16.9, 468.0], [17.0, 478.0], [17.1, 486.0], [17.2, 494.0], [17.3, 498.0], [17.4, 505.0], [17.5, 510.0], [17.6, 515.0], [17.7, 523.0], [17.8, 527.0], [17.9, 534.0], [18.0, 541.0], [18.1, 546.0], [18.2, 554.0], [18.3, 560.0], [18.4, 566.0], [18.5, 572.0], [18.6, 577.0], [18.7, 580.0], [18.8, 586.0], [18.9, 590.0], [19.0, 597.0], [19.1, 601.0], [19.2, 604.0], [19.3, 608.0], [19.4, 612.0], [19.5, 615.0], [19.6, 620.0], [19.7, 625.0], [19.8, 630.0], [19.9, 634.0], [20.0, 636.0], [20.1, 641.0], [20.2, 643.0], [20.3, 645.0], [20.4, 648.0], [20.5, 653.0], [20.6, 657.0], [20.7, 660.0], [20.8, 664.0], [20.9, 667.0], [21.0, 671.0], [21.1, 679.0], [21.2, 683.0], [21.3, 686.0], [21.4, 690.0], [21.5, 695.0], [21.6, 698.0], [21.7, 702.0], [21.8, 706.0], [21.9, 711.0], [22.0, 714.0], [22.1, 720.0], [22.2, 724.0], [22.3, 729.0], [22.4, 733.0], [22.5, 737.0], [22.6, 739.0], [22.7, 742.0], [22.8, 745.0], [22.9, 746.0], [23.0, 750.0], [23.1, 752.0], [23.2, 758.0], [23.3, 765.0], [23.4, 770.0], [23.5, 773.0], [23.6, 779.0], [23.7, 782.0], [23.8, 788.0], [23.9, 793.0], [24.0, 797.0], [24.1, 802.0], [24.2, 804.0], [24.3, 806.0], [24.4, 808.0], [24.5, 812.0], [24.6, 817.0], [24.7, 821.0], [24.8, 824.0], [24.9, 829.0], [25.0, 831.0], [25.1, 834.0], [25.2, 841.0], [25.3, 845.0], [25.4, 848.0], [25.5, 850.0], [25.6, 852.0], [25.7, 855.0], [25.8, 856.0], [25.9, 860.0], [26.0, 863.0], [26.1, 866.0], [26.2, 869.0], [26.3, 870.0], [26.4, 874.0], [26.5, 877.0], [26.6, 880.0], [26.7, 882.0], [26.8, 885.0], [26.9, 889.0], [27.0, 894.0], [27.1, 897.0], [27.2, 900.0], [27.3, 902.0], [27.4, 905.0], [27.5, 908.0], [27.6, 911.0], [27.7, 915.0], [27.8, 917.0], [27.9, 919.0], [28.0, 923.0], [28.1, 926.0], [28.2, 928.0], [28.3, 930.0], [28.4, 934.0], [28.5, 937.0], [28.6, 938.0], [28.7, 941.0], [28.8, 944.0], [28.9, 946.0], [29.0, 949.0], [29.1, 950.0], [29.2, 952.0], [29.3, 955.0], [29.4, 959.0], [29.5, 962.0], [29.6, 965.0], [29.7, 967.0], [29.8, 969.0], [29.9, 971.0], [30.0, 973.0], [30.1, 977.0], [30.2, 979.0], [30.3, 982.0], [30.4, 985.0], [30.5, 988.0], [30.6, 991.0], [30.7, 993.0], [30.8, 997.0], [30.9, 999.0], [31.0, 1001.0], [31.1, 1003.0], [31.2, 1006.0], [31.3, 1009.0], [31.4, 1012.0], [31.5, 1015.0], [31.6, 1019.0], [31.7, 1021.0], [31.8, 1024.0], [31.9, 1026.0], [32.0, 1028.0], [32.1, 1032.0], [32.2, 1034.0], [32.3, 1037.0], [32.4, 1041.0], [32.5, 1043.0], [32.6, 1045.0], [32.7, 1047.0], [32.8, 1050.0], [32.9, 1052.0], [33.0, 1054.0], [33.1, 1055.0], [33.2, 1058.0], [33.3, 1062.0], [33.4, 1065.0], [33.5, 1066.0], [33.6, 1069.0], [33.7, 1071.0], [33.8, 1074.0], [33.9, 1076.0], [34.0, 1078.0], [34.1, 1080.0], [34.2, 1083.0], [34.3, 1085.0], [34.4, 1086.0], [34.5, 1091.0], [34.6, 1092.0], [34.7, 1096.0], [34.8, 1097.0], [34.9, 1099.0], [35.0, 1102.0], [35.1, 1106.0], [35.2, 1109.0], [35.3, 1111.0], [35.4, 1113.0], [35.5, 1115.0], [35.6, 1118.0], [35.7, 1121.0], [35.8, 1122.0], [35.9, 1126.0], [36.0, 1128.0], [36.1, 1129.0], [36.2, 1130.0], [36.3, 1132.0], [36.4, 1135.0], [36.5, 1137.0], [36.6, 1140.0], [36.7, 1143.0], [36.8, 1144.0], [36.9, 1147.0], [37.0, 1149.0], [37.1, 1151.0], [37.2, 1153.0], [37.3, 1156.0], [37.4, 1158.0], [37.5, 1160.0], [37.6, 1162.0], [37.7, 1164.0], [37.8, 1165.0], [37.9, 1167.0], [38.0, 1168.0], [38.1, 1171.0], [38.2, 1174.0], [38.3, 1176.0], [38.4, 1178.0], [38.5, 1181.0], [38.6, 1184.0], [38.7, 1186.0], [38.8, 1189.0], [38.9, 1191.0], [39.0, 1193.0], [39.1, 1195.0], [39.2, 1197.0], [39.3, 1199.0], [39.4, 1201.0], [39.5, 1204.0], [39.6, 1206.0], [39.7, 1208.0], [39.8, 1210.0], [39.9, 1212.0], [40.0, 1214.0], [40.1, 1216.0], [40.2, 1218.0], [40.3, 1221.0], [40.4, 1223.0], [40.5, 1225.0], [40.6, 1227.0], [40.7, 1230.0], [40.8, 1231.0], [40.9, 1233.0], [41.0, 1234.0], [41.1, 1236.0], [41.2, 1237.0], [41.3, 1238.0], [41.4, 1240.0], [41.5, 1243.0], [41.6, 1245.0], [41.7, 1247.0], [41.8, 1250.0], [41.9, 1253.0], [42.0, 1255.0], [42.1, 1257.0], [42.2, 1260.0], [42.3, 1262.0], [42.4, 1263.0], [42.5, 1266.0], [42.6, 1269.0], [42.7, 1270.0], [42.8, 1274.0], [42.9, 1275.0], [43.0, 1277.0], [43.1, 1279.0], [43.2, 1280.0], [43.3, 1282.0], [43.4, 1285.0], [43.5, 1287.0], [43.6, 1290.0], [43.7, 1293.0], [43.8, 1295.0], [43.9, 1296.0], [44.0, 1298.0], [44.1, 1301.0], [44.2, 1304.0], [44.3, 1305.0], [44.4, 1307.0], [44.5, 1310.0], [44.6, 1313.0], [44.7, 1315.0], [44.8, 1318.0], [44.9, 1320.0], [45.0, 1322.0], [45.1, 1323.0], [45.2, 1325.0], [45.3, 1328.0], [45.4, 1330.0], [45.5, 1331.0], [45.6, 1333.0], [45.7, 1335.0], [45.8, 1337.0], [45.9, 1339.0], [46.0, 1342.0], [46.1, 1344.0], [46.2, 1347.0], [46.3, 1350.0], [46.4, 1352.0], [46.5, 1354.0], [46.6, 1355.0], [46.7, 1357.0], [46.8, 1359.0], [46.9, 1361.0], [47.0, 1363.0], [47.1, 1365.0], [47.2, 1367.0], [47.3, 1369.0], [47.4, 1371.0], [47.5, 1373.0], [47.6, 1376.0], [47.7, 1377.0], [47.8, 1380.0], [47.9, 1382.0], [48.0, 1383.0], [48.1, 1386.0], [48.2, 1388.0], [48.3, 1390.0], [48.4, 1392.0], [48.5, 1394.0], [48.6, 1397.0], [48.7, 1399.0], [48.8, 1402.0], [48.9, 1404.0], [49.0, 1407.0], [49.1, 1409.0], [49.2, 1411.0], [49.3, 1412.0], [49.4, 1414.0], [49.5, 1416.0], [49.6, 1418.0], [49.7, 1419.0], [49.8, 1421.0], [49.9, 1423.0], [50.0, 1425.0], [50.1, 1428.0], [50.2, 1429.0], [50.3, 1431.0], [50.4, 1432.0], [50.5, 1434.0], [50.6, 1437.0], [50.7, 1440.0], [50.8, 1442.0], [50.9, 1444.0], [51.0, 1447.0], [51.1, 1450.0], [51.2, 1453.0], [51.3, 1455.0], [51.4, 1458.0], [51.5, 1460.0], [51.6, 1464.0], [51.7, 1467.0], [51.8, 1469.0], [51.9, 1472.0], [52.0, 1474.0], [52.1, 1476.0], [52.2, 1478.0], [52.3, 1480.0], [52.4, 1483.0], [52.5, 1485.0], [52.6, 1487.0], [52.7, 1489.0], [52.8, 1490.0], [52.9, 1492.0], [53.0, 1494.0], [53.1, 1496.0], [53.2, 1499.0], [53.3, 1502.0], [53.4, 1504.0], [53.5, 1507.0], [53.6, 1508.0], [53.7, 1509.0], [53.8, 1513.0], [53.9, 1515.0], [54.0, 1517.0], [54.1, 1519.0], [54.2, 1520.0], [54.3, 1522.0], [54.4, 1524.0], [54.5, 1527.0], [54.6, 1528.0], [54.7, 1530.0], [54.8, 1532.0], [54.9, 1534.0], [55.0, 1536.0], [55.1, 1537.0], [55.2, 1539.0], [55.3, 1540.0], [55.4, 1543.0], [55.5, 1545.0], [55.6, 1547.0], [55.7, 1549.0], [55.8, 1552.0], [55.9, 1555.0], [56.0, 1556.0], [56.1, 1557.0], [56.2, 1558.0], [56.3, 1560.0], [56.4, 1562.0], [56.5, 1564.0], [56.6, 1567.0], [56.7, 1570.0], [56.8, 1572.0], [56.9, 1574.0], [57.0, 1575.0], [57.1, 1576.0], [57.2, 1580.0], [57.3, 1582.0], [57.4, 1584.0], [57.5, 1587.0], [57.6, 1589.0], [57.7, 1590.0], [57.8, 1593.0], [57.9, 1596.0], [58.0, 1599.0], [58.1, 1600.0], [58.2, 1602.0], [58.3, 1604.0], [58.4, 1606.0], [58.5, 1608.0], [58.6, 1610.0], [58.7, 1612.0], [58.8, 1614.0], [58.9, 1616.0], [59.0, 1618.0], [59.1, 1619.0], [59.2, 1621.0], [59.3, 1624.0], [59.4, 1626.0], [59.5, 1628.0], [59.6, 1630.0], [59.7, 1633.0], [59.8, 1636.0], [59.9, 1637.0], [60.0, 1640.0], [60.1, 1643.0], [60.2, 1645.0], [60.3, 1647.0], [60.4, 1650.0], [60.5, 1652.0], [60.6, 1655.0], [60.7, 1658.0], [60.8, 1660.0], [60.9, 1663.0], [61.0, 1665.0], [61.1, 1667.0], [61.2, 1670.0], [61.3, 1672.0], [61.4, 1675.0], [61.5, 1677.0], [61.6, 1680.0], [61.7, 1682.0], [61.8, 1684.0], [61.9, 1685.0], [62.0, 1687.0], [62.1, 1689.0], [62.2, 1692.0], [62.3, 1694.0], [62.4, 1696.0], [62.5, 1699.0], [62.6, 1701.0], [62.7, 1702.0], [62.8, 1704.0], [62.9, 1705.0], [63.0, 1707.0], [63.1, 1712.0], [63.2, 1714.0], [63.3, 1717.0], [63.4, 1719.0], [63.5, 1721.0], [63.6, 1723.0], [63.7, 1725.0], [63.8, 1726.0], [63.9, 1729.0], [64.0, 1731.0], [64.1, 1733.0], [64.2, 1735.0], [64.3, 1737.0], [64.4, 1741.0], [64.5, 1742.0], [64.6, 1744.0], [64.7, 1746.0], [64.8, 1749.0], [64.9, 1751.0], [65.0, 1753.0], [65.1, 1755.0], [65.2, 1757.0], [65.3, 1760.0], [65.4, 1762.0], [65.5, 1763.0], [65.6, 1766.0], [65.7, 1768.0], [65.8, 1771.0], [65.9, 1776.0], [66.0, 1779.0], [66.1, 1780.0], [66.2, 1782.0], [66.3, 1785.0], [66.4, 1787.0], [66.5, 1790.0], [66.6, 1792.0], [66.7, 1794.0], [66.8, 1796.0], [66.9, 1798.0], [67.0, 1801.0], [67.1, 1803.0], [67.2, 1805.0], [67.3, 1808.0], [67.4, 1811.0], [67.5, 1813.0], [67.6, 1815.0], [67.7, 1816.0], [67.8, 1819.0], [67.9, 1820.0], [68.0, 1823.0], [68.1, 1825.0], [68.2, 1827.0], [68.3, 1831.0], [68.4, 1833.0], [68.5, 1836.0], [68.6, 1838.0], [68.7, 1840.0], [68.8, 1841.0], [68.9, 1843.0], [69.0, 1845.0], [69.1, 1846.0], [69.2, 1848.0], [69.3, 1851.0], [69.4, 1855.0], [69.5, 1857.0], [69.6, 1860.0], [69.7, 1862.0], [69.8, 1865.0], [69.9, 1868.0], [70.0, 1870.0], [70.1, 1873.0], [70.2, 1874.0], [70.3, 1877.0], [70.4, 1880.0], [70.5, 1882.0], [70.6, 1884.0], [70.7, 1885.0], [70.8, 1887.0], [70.9, 1890.0], [71.0, 1893.0], [71.1, 1896.0], [71.2, 1897.0], [71.3, 1899.0], [71.4, 1901.0], [71.5, 1903.0], [71.6, 1907.0], [71.7, 1911.0], [71.8, 1914.0], [71.9, 1917.0], [72.0, 1919.0], [72.1, 1924.0], [72.2, 1927.0], [72.3, 1929.0], [72.4, 1931.0], [72.5, 1934.0], [72.6, 1937.0], [72.7, 1941.0], [72.8, 1943.0], [72.9, 1946.0], [73.0, 1949.0], [73.1, 1952.0], [73.2, 1954.0], [73.3, 1957.0], [73.4, 1960.0], [73.5, 1964.0], [73.6, 1968.0], [73.7, 1970.0], [73.8, 1974.0], [73.9, 1976.0], [74.0, 1979.0], [74.1, 1983.0], [74.2, 1986.0], [74.3, 1989.0], [74.4, 1992.0], [74.5, 1993.0], [74.6, 1995.0], [74.7, 1997.0], [74.8, 2000.0], [74.9, 2003.0], [75.0, 2005.0], [75.1, 2006.0], [75.2, 2008.0], [75.3, 2010.0], [75.4, 2014.0], [75.5, 2017.0], [75.6, 2020.0], [75.7, 2022.0], [75.8, 2025.0], [75.9, 2027.0], [76.0, 2029.0], [76.1, 2032.0], [76.2, 2035.0], [76.3, 2037.0], [76.4, 2039.0], [76.5, 2042.0], [76.6, 2045.0], [76.7, 2048.0], [76.8, 2050.0], [76.9, 2053.0], [77.0, 2057.0], [77.1, 2060.0], [77.2, 2061.0], [77.3, 2065.0], [77.4, 2067.0], [77.5, 2070.0], [77.6, 2073.0], [77.7, 2077.0], [77.8, 2080.0], [77.9, 2084.0], [78.0, 2086.0], [78.1, 2089.0], [78.2, 2091.0], [78.3, 2093.0], [78.4, 2097.0], [78.5, 2100.0], [78.6, 2102.0], [78.7, 2104.0], [78.8, 2106.0], [78.9, 2109.0], [79.0, 2112.0], [79.1, 2117.0], [79.2, 2119.0], [79.3, 2121.0], [79.4, 2124.0], [79.5, 2128.0], [79.6, 2131.0], [79.7, 2134.0], [79.8, 2136.0], [79.9, 2139.0], [80.0, 2143.0], [80.1, 2147.0], [80.2, 2149.0], [80.3, 2152.0], [80.4, 2154.0], [80.5, 2158.0], [80.6, 2159.0], [80.7, 2163.0], [80.8, 2165.0], [80.9, 2168.0], [81.0, 2170.0], [81.1, 2174.0], [81.2, 2177.0], [81.3, 2181.0], [81.4, 2184.0], [81.5, 2187.0], [81.6, 2191.0], [81.7, 2194.0], [81.8, 2198.0], [81.9, 2201.0], [82.0, 2206.0], [82.1, 2211.0], [82.2, 2214.0], [82.3, 2218.0], [82.4, 2220.0], [82.5, 2225.0], [82.6, 2227.0], [82.7, 2230.0], [82.8, 2234.0], [82.9, 2238.0], [83.0, 2241.0], [83.1, 2244.0], [83.2, 2245.0], [83.3, 2248.0], [83.4, 2251.0], [83.5, 2260.0], [83.6, 2263.0], [83.7, 2266.0], [83.8, 2268.0], [83.9, 2273.0], [84.0, 2278.0], [84.1, 2282.0], [84.2, 2286.0], [84.3, 2290.0], [84.4, 2292.0], [84.5, 2298.0], [84.6, 2302.0], [84.7, 2306.0], [84.8, 2310.0], [84.9, 2312.0], [85.0, 2317.0], [85.1, 2323.0], [85.2, 2329.0], [85.3, 2333.0], [85.4, 2338.0], [85.5, 2342.0], [85.6, 2345.0], [85.7, 2351.0], [85.8, 2356.0], [85.9, 2359.0], [86.0, 2364.0], [86.1, 2368.0], [86.2, 2374.0], [86.3, 2379.0], [86.4, 2386.0], [86.5, 2389.0], [86.6, 2394.0], [86.7, 2397.0], [86.8, 2401.0], [86.9, 2407.0], [87.0, 2411.0], [87.1, 2417.0], [87.2, 2422.0], [87.3, 2426.0], [87.4, 2429.0], [87.5, 2436.0], [87.6, 2440.0], [87.7, 2445.0], [87.8, 2447.0], [87.9, 2451.0], [88.0, 2455.0], [88.1, 2461.0], [88.2, 2466.0], [88.3, 2474.0], [88.4, 2478.0], [88.5, 2482.0], [88.6, 2487.0], [88.7, 2490.0], [88.8, 2494.0], [88.9, 2497.0], [89.0, 2501.0], [89.1, 2504.0], [89.2, 2508.0], [89.3, 2513.0], [89.4, 2518.0], [89.5, 2524.0], [89.6, 2529.0], [89.7, 2535.0], [89.8, 2537.0], [89.9, 2541.0], [90.0, 2545.0], [90.1, 2548.0], [90.2, 2553.0], [90.3, 2560.0], [90.4, 2564.0], [90.5, 2571.0], [90.6, 2579.0], [90.7, 2584.0], [90.8, 2588.0], [90.9, 2595.0], [91.0, 2603.0], [91.1, 2610.0], [91.2, 2616.0], [91.3, 2621.0], [91.4, 2625.0], [91.5, 2630.0], [91.6, 2636.0], [91.7, 2643.0], [91.8, 2647.0], [91.9, 2654.0], [92.0, 2662.0], [92.1, 2667.0], [92.2, 2671.0], [92.3, 2679.0], [92.4, 2690.0], [92.5, 2697.0], [92.6, 2706.0], [92.7, 2712.0], [92.8, 2717.0], [92.9, 2726.0], [93.0, 2736.0], [93.1, 2747.0], [93.2, 2754.0], [93.3, 2763.0], [93.4, 2771.0], [93.5, 2780.0], [93.6, 2788.0], [93.7, 2794.0], [93.8, 2802.0], [93.9, 2807.0], [94.0, 2815.0], [94.1, 2828.0], [94.2, 2833.0], [94.3, 2841.0], [94.4, 2852.0], [94.5, 2860.0], [94.6, 2865.0], [94.7, 2881.0], [94.8, 2889.0], [94.9, 2897.0], [95.0, 2903.0], [95.1, 2911.0], [95.2, 2920.0], [95.3, 2929.0], [95.4, 2943.0], [95.5, 2955.0], [95.6, 2970.0], [95.7, 2978.0], [95.8, 2988.0], [95.9, 3005.0], [96.0, 3015.0], [96.1, 3020.0], [96.2, 3034.0], [96.3, 3044.0], [96.4, 3062.0], [96.5, 3075.0], [96.6, 3089.0], [96.7, 3104.0], [96.8, 3120.0], [96.9, 3138.0], [97.0, 3149.0], [97.1, 3160.0], [97.2, 3170.0], [97.3, 3186.0], [97.4, 3205.0], [97.5, 3221.0], [97.6, 3235.0], [97.7, 3255.0], [97.8, 3280.0], [97.9, 3299.0], [98.0, 3325.0], [98.1, 3357.0], [98.2, 3382.0], [98.3, 3409.0], [98.4, 3424.0], [98.5, 3469.0], [98.6, 3500.0], [98.7, 3543.0], [98.8, 3571.0], [98.9, 3622.0], [99.0, 3649.0], [99.1, 3736.0], [99.2, 3786.0], [99.3, 3855.0], [99.4, 3894.0], [99.5, 3984.0], [99.6, 4056.0], [99.7, 4200.0], [99.8, 4454.0], [99.9, 4623.0], [100.0, 5726.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1515.0, "series": [{"data": [[0.0, 1515.0], [600.0, 261.0], [700.0, 289.0], [800.0, 333.0], [900.0, 401.0], [1000.0, 400.0], [1100.0, 444.0], [1200.0, 505.0], [1300.0, 534.0], [1400.0, 536.0], [1500.0, 480.0], [1600.0, 465.0], [1700.0, 444.0], [1800.0, 396.0], [1900.0, 369.0], [2000.0, 365.0], [2100.0, 351.0], [2300.0, 258.0], [2200.0, 290.0], [2400.0, 231.0], [2500.0, 198.0], [2600.0, 147.0], [2800.0, 113.0], [2700.0, 109.0], [2900.0, 97.0], [3000.0, 77.0], [3100.0, 62.0], [3200.0, 47.0], [3300.0, 39.0], [3400.0, 43.0], [3500.0, 29.0], [3700.0, 17.0], [3600.0, 13.0], [3800.0, 14.0], [3900.0, 15.0], [4000.0, 9.0], [4300.0, 7.0], [4200.0, 7.0], [4100.0, 8.0], [4400.0, 4.0], [4500.0, 6.0], [4800.0, 1.0], [4700.0, 5.0], [5100.0, 1.0], [4900.0, 3.0], [5000.0, 1.0], [100.0, 55.0], [200.0, 46.0], [300.0, 92.0], [400.0, 152.0], [500.0, 216.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[100.0, 101.0], [200.0, 4.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1510.0], [600.0, 270.0], [700.0, 252.0], [800.0, 330.0], [900.0, 393.0], [1000.0, 417.0], [1100.0, 465.0], [1200.0, 494.0], [1300.0, 493.0], [1400.0, 471.0], [1500.0, 508.0], [1600.0, 474.0], [1700.0, 460.0], [1800.0, 458.0], [1900.0, 362.0], [2000.0, 389.0], [2100.0, 352.0], [2200.0, 283.0], [2300.0, 231.0], [2400.0, 233.0], [2500.0, 212.0], [2600.0, 167.0], [2700.0, 130.0], [2800.0, 122.0], [2900.0, 99.0], [3000.0, 82.0], [3100.0, 74.0], [3200.0, 56.0], [3300.0, 37.0], [3400.0, 34.0], [3500.0, 29.0], [3600.0, 21.0], [3700.0, 17.0], [3800.0, 19.0], [3900.0, 12.0], [4000.0, 12.0], [4100.0, 7.0], [4200.0, 7.0], [4300.0, 3.0], [4500.0, 6.0], [4400.0, 2.0], [4600.0, 5.0], [4700.0, 4.0], [4900.0, 2.0], [5100.0, 1.0], [5600.0, 1.0], [5700.0, 1.0], [100.0, 41.0], [200.0, 44.0], [300.0, 81.0], [400.0, 143.0], [500.0, 184.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 12.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9609.0, "series": [{"data": [[0.0, 3784.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7700.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9609.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 12.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.125, "minX": 1.58767572E12, "maxY": 105.0, "series": [{"data": [[1.58767578E12, 103.65510597302493], [1.58767608E12, 105.0], [1.58767614E12, 105.0], [1.58767644E12, 7.125], [1.58767602E12, 105.0], [1.58767632E12, 104.40353881278537], [1.58767572E12, 59.79492915734518], [1.58767638E12, 69.71249999999993], [1.58767626E12, 105.0], [1.58767596E12, 105.0], [1.58767584E12, 105.0], [1.5876759E12, 105.0], [1.5876762E12, 105.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767644E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 20.0, "minX": 1.0, "maxY": 1641.604710228585, "series": [{"data": [[2.0, 30.0], [3.0, 37.0], [5.0, 23.75], [6.0, 26.333333333333332], [7.0, 27.666666666666668], [8.0, 27.2], [9.0, 28.875], [10.0, 32.0], [11.0, 26.666666666666668], [12.0, 25.874999999999996], [13.0, 31.333333333333332], [14.0, 25.0], [15.0, 28.75], [16.0, 25.5], [17.0, 25.0], [18.0, 22.5], [19.0, 32.0], [20.0, 33.625], [21.0, 21.6], [22.0, 28.25], [23.0, 27.0], [24.0, 28.666666666666668], [25.0, 25.5], [26.0, 28.5], [27.0, 23.0], [28.0, 29.4], [29.0, 110.8095238095238], [30.0, 29.666666666666668], [31.0, 24.624999999999996], [32.0, 23.625], [33.0, 28.0], [34.0, 25.428571428571427], [35.0, 25.428571428571427], [36.0, 21.666666666666668], [37.0, 26.4], [38.0, 23.657142857142855], [39.0, 98.14285714285714], [40.0, 28.333333333333336], [41.0, 24.25], [42.0, 23.833333333333336], [43.0, 22.333333333333332], [44.0, 27.363636363636363], [45.0, 23.538461538461537], [46.0, 23.571428571428573], [47.0, 27.375], [48.0, 1152.9591836734696], [49.0, 1230.3636363636365], [50.0, 23.0], [51.0, 26.814814814814817], [52.0, 24.6], [53.0, 25.090909090909093], [54.0, 24.727272727272727], [55.0, 23.928571428571427], [56.0, 1431.3999999999999], [57.0, 23.16666666666667], [58.0, 24.733333333333338], [59.0, 24.333333333333332], [60.0, 25.909090909090907], [61.0, 22.70588235294118], [62.0, 36.75], [63.0, 23.864406779661017], [64.0, 23.941176470588236], [65.0, 24.41666666666667], [66.0, 22.142857142857146], [67.0, 21.909090909090907], [68.0, 26.24], [69.0, 25.75], [70.0, 22.69230769230769], [71.0, 38.69230769230769], [72.0, 23.625], [73.0, 25.27586206896552], [74.0, 26.043478260869566], [75.0, 25.090909090909093], [76.0, 25.900000000000002], [77.0, 22.454545454545453], [78.0, 25.743589743589745], [79.0, 22.153846153846153], [80.0, 30.578947368421055], [81.0, 21.708333333333336], [82.0, 23.818181818181817], [83.0, 22.02631578947368], [84.0, 21.46153846153846], [85.0, 21.16666666666667], [86.0, 22.280000000000005], [87.0, 25.560000000000002], [88.0, 23.642857142857142], [89.0, 22.875], [90.0, 26.413793103448274], [91.0, 25.65], [92.0, 710.25], [93.0, 795.5490196078431], [94.0, 61.94117647058823], [95.0, 848.3124999999999], [96.0, 529.1111111111111], [97.0, 716.030303030303], [98.0, 1427.2173913043475], [99.0, 824.8965517241378], [100.0, 1229.1794871794875], [101.0, 390.88888888888886], [102.0, 521.4], [103.0, 1288.2000000000003], [104.0, 1231.379310344828], [105.0, 1613.5098152424919]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[99.3107619047619, 1397.2706666666697]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 170.0], [3.0, 159.0], [4.0, 168.0], [5.0, 186.0], [6.0, 170.0], [7.0, 157.0], [8.0, 156.0], [9.0, 153.0], [10.0, 161.0], [11.0, 157.0], [12.0, 159.0], [13.0, 156.0], [14.0, 165.0], [15.0, 201.0], [16.0, 169.0], [17.0, 156.0], [18.0, 159.0], [19.0, 158.0], [20.0, 162.0], [21.0, 161.0], [22.0, 159.0], [23.0, 163.0], [24.0, 154.0], [25.0, 161.0], [26.0, 157.0], [27.0, 159.0], [28.0, 155.0], [29.0, 158.0], [30.0, 173.0], [31.0, 176.0], [32.0, 161.0], [33.0, 164.0], [34.0, 155.0], [35.0, 167.0], [36.0, 157.0], [37.0, 158.0], [38.0, 159.0], [39.0, 149.0], [40.0, 159.0], [41.0, 167.0], [42.0, 150.0], [43.0, 156.0], [44.0, 171.0], [45.0, 162.0], [46.0, 157.0], [47.0, 201.0], [48.0, 156.0], [49.0, 154.0], [50.0, 156.0], [51.0, 187.0], [52.0, 162.0], [53.0, 160.0], [54.0, 166.0], [55.0, 154.0], [56.0, 156.0], [57.0, 163.0], [58.0, 159.0], [59.0, 160.0], [60.0, 160.0], [61.0, 170.0], [62.0, 155.0], [63.0, 154.0], [64.0, 157.0], [65.0, 158.0], [66.0, 184.0], [67.0, 161.0], [68.0, 155.0], [69.0, 162.0], [70.0, 155.0], [71.0, 156.0], [72.0, 150.0], [73.0, 156.0], [74.0, 168.0], [75.0, 158.0], [76.0, 158.0], [77.0, 152.0], [78.0, 162.0], [79.0, 152.0], [80.0, 155.0], [81.0, 166.0], [82.0, 164.0], [83.0, 152.0], [84.0, 154.0], [85.0, 156.0], [86.0, 154.0], [87.0, 163.0], [88.0, 152.0], [89.0, 156.0], [90.0, 156.0], [91.0, 151.0], [92.0, 166.0], [93.0, 162.0], [94.0, 190.0], [95.0, 171.0], [96.0, 158.0], [97.0, 164.0], [98.0, 158.0], [99.0, 260.0], [100.0, 286.0], [101.0, 162.0], [102.0, 180.0], [103.0, 165.0], [104.0, 153.0], [105.0, 155.0], [1.0, 189.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[53.0, 163.85714285714286]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[3.0, 34.0], [4.0, 32.0], [5.0, 20.0], [6.0, 23.25], [7.0, 24.333333333333332], [8.0, 34.0], [9.0, 31.7], [10.0, 22.0], [11.0, 27.0], [12.0, 28.4], [13.0, 24.2], [14.0, 29.6], [15.0, 34.0], [16.0, 25.0], [17.0, 25.666666666666668], [18.0, 29.25], [19.0, 36.22222222222222], [20.0, 37.25], [21.0, 37.14285714285714], [22.0, 31.099999999999994], [23.0, 25.25], [24.0, 28.0], [25.0, 24.0], [26.0, 24.0], [27.0, 27.333333333333332], [28.0, 30.8], [29.0, 66.25], [30.0, 26.0], [31.0, 22.857142857142858], [32.0, 23.733333333333334], [33.0, 23.25], [34.0, 23.5], [35.0, 23.5], [36.0, 25.571428571428573], [37.0, 25.571428571428573], [38.0, 25.941176470588236], [39.0, 140.24999999999997], [40.0, 36.0], [41.0, 20.0], [42.0, 23.571428571428573], [43.0, 23.666666666666668], [44.0, 25.0], [45.0, 24.40625], [46.0, 24.791666666666668], [47.0, 24.1], [48.0, 706.1304347826087], [49.0, 23.444444444444443], [50.0, 24.0], [51.0, 27.404255319148934], [52.0, 41.46153846153846], [53.0, 24.93333333333333], [54.0, 25.5], [55.0, 23.428571428571427], [56.0, 1141.8235294117646], [57.0, 21.666666666666668], [58.0, 23.874999999999996], [59.0, 23.1], [60.0, 23.333333333333332], [61.0, 23.923076923076923], [62.0, 41.5], [63.0, 24.43283582089553], [64.0, 25.666666666666668], [65.0, 24.51724137931034], [66.0, 24.5], [67.0, 24.333333333333332], [68.0, 25.782608695652176], [69.0, 26.24], [70.0, 34.04761904761906], [71.0, 28.0], [72.0, 27.590909090909093], [73.0, 25.874999999999996], [74.0, 26.5], [75.0, 26.0], [76.0, 26.0], [77.0, 21.625000000000004], [78.0, 25.47826086956522], [79.0, 25.800000000000004], [80.0, 24.36842105263158], [81.0, 24.181818181818183], [82.0, 23.3125], [83.0, 22.800000000000004], [84.0, 22.043478260869566], [85.0, 21.666666666666668], [86.0, 23.000000000000004], [87.0, 24.28571428571429], [88.0, 23.055555555555554], [89.0, 25.307692307692307], [90.0, 28.19148936170212], [91.0, 24.666666666666668], [92.0, 609.7333333333333], [93.0, 508.3666666666667], [94.0, 121.92857142857142], [95.0, 1122.875], [96.0, 652.2631578947369], [97.0, 619.3555555555555], [98.0, 1124.0], [99.0, 765.7142857142858], [100.0, 1502.9726027397262], [101.0, 306.7619047619047], [102.0, 404.5], [103.0, 1315.013513513514], [104.0, 1170.989247311828], [105.0, 1641.604710228585]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[99.32047619047616, 1419.551047619052]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 105.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 286.06666666666666, "minX": 1.58767572E12, "maxY": 239701.45, "series": [{"data": [[1.58767578E12, 239701.45], [1.58767608E12, 208693.73333333334], [1.58767614E12, 217693.51666666666], [1.58767644E12, 4640.166666666667], [1.58767602E12, 200280.58333333334], [1.58767632E12, 203425.06666666668], [1.58767572E12, 147130.5], [1.58767638E12, 185704.3], [1.58767626E12, 203750.13333333333], [1.58767596E12, 212350.18333333332], [1.58767584E12, 213287.91666666666], [1.5876759E12, 202386.1], [1.5876762E12, 200056.26666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58767578E12, 14796.466666666667], [1.58767608E12, 12934.3], [1.58767614E12, 13406.266666666666], [1.58767644E12, 286.06666666666666], [1.58767602E12, 12333.8], [1.58767632E12, 12526.6], [1.58767572E12, 9282.833333333334], [1.58767638E12, 11440.7], [1.58767626E12, 12548.6], [1.58767596E12, 13077.5], [1.58767584E12, 13134.433333333332], [1.5876759E12, 12462.133333333333], [1.5876762E12, 12319.3]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767644E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 24.183306055646472, "minX": 1.58767572E12, "maxY": 1794.4780600461897, "series": [{"data": [[1.58767578E12, 1137.704854368933], [1.58767608E12, 1589.8682170542606], [1.58767614E12, 1472.5223880597011], [1.58767644E12, 27.590909090909086], [1.58767602E12, 1714.3599537037023], [1.58767632E12, 1685.473563218392], [1.58767572E12, 24.183306055646472], [1.58767638E12, 457.9257003654084], [1.58767626E12, 1694.2488738738734], [1.58767596E12, 1628.3199129488564], [1.58767584E12, 1530.862295081967], [1.5876759E12, 1679.968677494198], [1.5876762E12, 1743.2077012835464]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58767578E12, 180.7142857142857], [1.58767572E12, 161.26373626373632]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58767578E12, 1106.323643410853], [1.58767608E12, 1612.949227373068], [1.58767614E12, 1537.2785485592317], [1.58767644E12, 28.611111111111107], [1.58767602E12, 1758.7003484320553], [1.58767632E12, 1689.7460317460318], [1.58767572E12, 24.629107981220635], [1.58767638E12, 431.569961489089], [1.58767626E12, 1772.080738177625], [1.58767596E12, 1587.1065934065932], [1.58767584E12, 1553.3373101952286], [1.5876759E12, 1745.6288308740054], [1.5876762E12, 1794.4780600461897]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767644E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 23.955810147299506, "minX": 1.58767572E12, "maxY": 1794.2898383371812, "series": [{"data": [[1.58767578E12, 1137.5310679611662], [1.58767608E12, 1589.7408637873755], [1.58767614E12, 1472.3134328358196], [1.58767644E12, 27.045454545454543], [1.58767602E12, 1714.2187499999973], [1.58767632E12, 1685.3057471264365], [1.58767572E12, 23.955810147299506], [1.58767638E12, 457.6772228989034], [1.58767626E12, 1694.0472972972955], [1.58767596E12, 1628.1501632208926], [1.58767584E12, 1530.7628415300533], [1.5876759E12, 1679.8248259860784], [1.5876762E12, 1743.010501750291]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58767578E12, 180.64285714285714], [1.58767572E12, 161.19780219780222]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58767578E12, 1106.1434108527135], [1.58767608E12, 1612.7682119205288], [1.58767614E12, 1536.961579509072], [1.58767644E12, 28.277777777777782], [1.58767602E12, 1758.4994192799063], [1.58767632E12, 1689.5249433106585], [1.58767572E12, 24.383411580594675], [1.58767638E12, 431.27214377406955], [1.58767626E12, 1771.8835063437139], [1.58767596E12, 1586.9285714285716], [1.58767584E12, 1553.1507592190892], [1.5876759E12, 1745.418842224745], [1.5876762E12, 1794.2898383371812]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767644E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58767572E12, "maxY": 1.098901098901099, "series": [{"data": [[1.58767578E12, 0.3398058252427188], [1.58767608E12, 0.3942414174972317], [1.58767614E12, 0.3656716417910447], [1.58767644E12, 0.0], [1.58767602E12, 0.3923611111111106], [1.58767632E12, 0.41034482758620666], [1.58767572E12, 0.11292962356792154], [1.58767638E12, 0.12302070645554206], [1.58767626E12, 0.38738738738738765], [1.58767596E12, 0.41675734494015226], [1.58767584E12, 0.4819672131147542], [1.5876759E12, 0.48723897911832925], [1.5876762E12, 0.40956826137689617]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58767578E12, 0.42857142857142855], [1.58767572E12, 1.098901098901099]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58767578E12, 0.5251937984496121], [1.58767608E12, 0.4348785871964677], [1.58767614E12, 0.4386339381003198], [1.58767644E12, 0.4444444444444444], [1.58767602E12, 0.43089430894308955], [1.58767632E12, 0.4251700680272105], [1.58767572E12, 0.6040688575899845], [1.58767638E12, 0.43774069319640574], [1.58767626E12, 0.454440599769319], [1.58767596E12, 0.4604395604395604], [1.58767584E12, 0.5086767895878529], [1.5876759E12, 0.5062429057888755], [1.5876762E12, 0.44226327944572735]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767644E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.58767572E12, "maxY": 5726.0, "series": [{"data": [[1.58767578E12, 5126.0], [1.58767608E12, 4707.0], [1.58767614E12, 5682.0], [1.58767644E12, 39.0], [1.58767602E12, 5726.0], [1.58767632E12, 4614.0], [1.58767572E12, 201.0], [1.58767638E12, 3459.0], [1.58767626E12, 4999.0], [1.58767596E12, 4561.0], [1.58767584E12, 4988.0], [1.5876759E12, 4780.0], [1.5876762E12, 4768.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58767578E12, 10.0], [1.58767608E12, 49.0], [1.58767614E12, 21.0], [1.58767644E12, 16.0], [1.58767602E12, 38.0], [1.58767632E12, 78.0], [1.58767572E12, 10.0], [1.58767638E12, 11.0], [1.58767626E12, 31.0], [1.58767596E12, 23.0], [1.58767584E12, 16.0], [1.5876759E12, 78.0], [1.5876762E12, 17.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58767578E12, 2300.0], [1.58767608E12, 2647.2], [1.58767614E12, 2523.4], [1.58767644E12, 35.8], [1.58767602E12, 2650.0000000000005], [1.58767632E12, 2608.4], [1.58767572E12, 39.0], [1.58767638E12, 1653.9], [1.58767626E12, 2725.4], [1.58767596E12, 2504.0], [1.58767584E12, 2564.2], [1.5876759E12, 2617.2000000000025], [1.5876762E12, 2832.6000000000004]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58767578E12, 3577.5200000000004], [1.58767608E12, 3933.5399999999995], [1.58767614E12, 3474.16], [1.58767644E12, 39.0], [1.58767602E12, 3921.5200000000004], [1.58767632E12, 3614.05], [1.58767572E12, 168.57999999999993], [1.58767638E12, 2568.99], [1.58767626E12, 3895.9600000000005], [1.58767596E12, 3419.1000000000004], [1.58767584E12, 3960.6399999999976], [1.5876759E12, 3751.4799999999996], [1.5876762E12, 3795.08]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58767578E12, 2702.749999999999], [1.58767608E12, 3060.2], [1.58767614E12, 2813.3999999999996], [1.58767644E12, 36.949999999999996], [1.58767602E12, 2964.999999999998], [1.58767632E12, 2931.199999999999], [1.58767572E12, 156.0], [1.58767638E12, 2051.8499999999995], [1.58767626E12, 3078.399999999998], [1.58767596E12, 2838.5], [1.58767584E12, 2975.1], [1.5876759E12, 2987.8], [1.5876762E12, 3151.8]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767644E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 22.0, "minX": 1.0, "maxY": 1797.5, "series": [{"data": [[2.0, 164.5], [3.0, 31.0], [4.0, 30.0], [5.0, 29.0], [6.0, 27.5], [7.0, 30.5], [8.0, 45.0], [9.0, 299.5], [10.0, 35.0], [11.0, 40.0], [12.0, 1302.5], [13.0, 191.0], [14.0, 1458.0], [15.0, 1643.0], [16.0, 1539.0], [17.0, 1308.0], [18.0, 1509.5], [19.0, 1520.0], [20.0, 1484.0], [21.0, 1458.5], [22.0, 1723.0], [23.0, 1465.5], [24.0, 1491.5], [25.0, 1516.0], [26.0, 1420.5], [27.0, 1535.0], [28.0, 1497.0], [29.0, 1629.0], [30.0, 1687.0], [31.0, 1389.0], [32.0, 1505.5], [33.0, 1477.0], [34.0, 1447.0], [35.0, 1506.5], [37.0, 1670.0], [36.0, 1444.0], [38.0, 1477.0], [39.0, 1547.0], [41.0, 1184.0], [40.0, 1279.0], [42.0, 1264.5], [43.0, 1229.0], [45.0, 1332.0], [44.0, 1407.0], [46.0, 822.0], [47.0, 1462.0], [48.0, 23.0], [49.0, 914.0], [50.0, 911.5], [53.0, 682.0], [52.0, 777.0], [54.0, 470.5], [55.0, 1797.5], [56.0, 28.0], [59.0, 24.0], [58.0, 22.0], [60.0, 22.5], [64.0, 1357.5], [1.0, 36.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[29.0, 926.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 64.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 22.0, "minX": 1.0, "maxY": 1797.5, "series": [{"data": [[2.0, 164.5], [3.0, 30.5], [4.0, 30.0], [5.0, 29.0], [6.0, 27.0], [7.0, 30.0], [8.0, 44.5], [9.0, 299.5], [10.0, 34.5], [11.0, 40.0], [12.0, 1302.5], [13.0, 191.0], [14.0, 1458.0], [15.0, 1643.0], [16.0, 1539.0], [17.0, 1308.0], [18.0, 1509.5], [19.0, 1520.0], [20.0, 1484.0], [21.0, 1458.5], [22.0, 1723.0], [23.0, 1465.5], [24.0, 1491.5], [25.0, 1516.0], [26.0, 1420.5], [27.0, 1535.0], [28.0, 1497.0], [29.0, 1629.0], [30.0, 1686.5], [31.0, 1389.0], [32.0, 1505.5], [33.0, 1477.0], [34.0, 1446.5], [35.0, 1506.5], [37.0, 1669.0], [36.0, 1441.0], [38.0, 1476.0], [39.0, 1547.0], [41.0, 1184.0], [40.0, 1278.5], [42.0, 1264.5], [43.0, 1229.0], [45.0, 1332.0], [44.0, 1407.0], [46.0, 822.0], [47.0, 1460.5], [48.0, 23.0], [49.0, 914.0], [50.0, 911.5], [53.0, 682.0], [52.0, 777.0], [54.0, 470.5], [55.0, 1797.5], [56.0, 28.0], [59.0, 24.0], [58.0, 22.0], [60.0, 22.0], [64.0, 1357.5], [1.0, 35.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[29.0, 926.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 64.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.58767572E12, "maxY": 35.266666666666666, "series": [{"data": [[1.58767578E12, 35.266666666666666], [1.58767608E12, 30.316666666666666], [1.58767614E12, 31.133333333333333], [1.58767644E12, 0.6666666666666666], [1.58767602E12, 29.0], [1.58767632E12, 29.433333333333334], [1.58767572E12, 22.4], [1.58767638E12, 25.75], [1.58767626E12, 29.016666666666666], [1.58767596E12, 30.116666666666667], [1.58767584E12, 30.75], [1.5876759E12, 29.183333333333334], [1.5876762E12, 28.716666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767644E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.58767572E12, "maxY": 34.6, "series": [{"data": [[1.58767578E12, 34.6], [1.58767608E12, 29.95], [1.58767614E12, 31.25], [1.58767644E12, 0.6666666666666666], [1.58767602E12, 28.75], [1.58767632E12, 29.2], [1.58767572E12, 22.35], [1.58767638E12, 26.666666666666668], [1.58767626E12, 29.25], [1.58767596E12, 30.483333333333334], [1.58767584E12, 30.616666666666667], [1.5876759E12, 29.05], [1.5876762E12, 28.716666666666665]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58767608E12, 0.016666666666666666]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.58767608E12, 0.18333333333333332]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767644E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.58767572E12, "maxY": 17.2, "series": [{"data": [[1.58767578E12, 0.23333333333333334], [1.58767572E12, 1.5166666666666666]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58767578E12, 17.166666666666668], [1.58767608E12, 14.95], [1.58767614E12, 15.633333333333333], [1.58767644E12, 0.36666666666666664], [1.58767602E12, 14.4], [1.58767632E12, 14.5], [1.58767572E12, 10.183333333333334], [1.58767638E12, 13.683333333333334], [1.58767626E12, 14.8], [1.58767596E12, 15.316666666666666], [1.58767584E12, 15.25], [1.5876759E12, 14.366666666666667], [1.5876762E12, 14.283333333333333]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58767608E12, 0.1]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.58767578E12, 17.2], [1.58767608E12, 15.0], [1.58767614E12, 15.616666666666667], [1.58767644E12, 0.3], [1.58767602E12, 14.35], [1.58767632E12, 14.7], [1.58767572E12, 10.65], [1.58767638E12, 12.983333333333333], [1.58767626E12, 14.45], [1.58767596E12, 15.166666666666666], [1.58767584E12, 15.366666666666667], [1.5876759E12, 14.683333333333334], [1.5876762E12, 14.433333333333334]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58767608E12, 0.1]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767644E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.58767572E12, "maxY": 34.6, "series": [{"data": [[1.58767578E12, 34.6], [1.58767608E12, 29.95], [1.58767614E12, 31.25], [1.58767644E12, 0.6666666666666666], [1.58767602E12, 28.75], [1.58767632E12, 29.2], [1.58767572E12, 22.35], [1.58767638E12, 26.666666666666668], [1.58767626E12, 29.25], [1.58767596E12, 30.483333333333334], [1.58767584E12, 30.616666666666667], [1.5876759E12, 29.05], [1.5876762E12, 28.716666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58767608E12, 0.2]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767644E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

