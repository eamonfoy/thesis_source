/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 8758.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 3.0], [14.5, 3.0], [14.6, 3.0], [14.7, 3.0], [14.8, 3.0], [14.9, 3.0], [15.0, 3.0], [15.1, 4.0], [15.2, 4.0], [15.3, 5.0], [15.4, 6.0], [15.5, 11.0], [15.6, 16.0], [15.7, 16.0], [15.8, 18.0], [15.9, 18.0], [16.0, 18.0], [16.1, 19.0], [16.2, 19.0], [16.3, 20.0], [16.4, 20.0], [16.5, 20.0], [16.6, 20.0], [16.7, 21.0], [16.8, 21.0], [16.9, 21.0], [17.0, 22.0], [17.1, 22.0], [17.2, 22.0], [17.3, 23.0], [17.4, 23.0], [17.5, 23.0], [17.6, 24.0], [17.7, 24.0], [17.8, 24.0], [17.9, 25.0], [18.0, 25.0], [18.1, 25.0], [18.2, 25.0], [18.3, 26.0], [18.4, 26.0], [18.5, 26.0], [18.6, 27.0], [18.7, 27.0], [18.8, 27.0], [18.9, 27.0], [19.0, 28.0], [19.1, 28.0], [19.2, 28.0], [19.3, 29.0], [19.4, 29.0], [19.5, 29.0], [19.6, 29.0], [19.7, 30.0], [19.8, 30.0], [19.9, 31.0], [20.0, 31.0], [20.1, 31.0], [20.2, 31.0], [20.3, 32.0], [20.4, 32.0], [20.5, 33.0], [20.6, 33.0], [20.7, 34.0], [20.8, 34.0], [20.9, 35.0], [21.0, 36.0], [21.1, 36.0], [21.2, 37.0], [21.3, 38.0], [21.4, 40.0], [21.5, 41.0], [21.6, 42.0], [21.7, 43.0], [21.8, 45.0], [21.9, 47.0], [22.0, 49.0], [22.1, 51.0], [22.2, 54.0], [22.3, 56.0], [22.4, 59.0], [22.5, 66.0], [22.6, 69.0], [22.7, 71.0], [22.8, 76.0], [22.9, 81.0], [23.0, 86.0], [23.1, 92.0], [23.2, 97.0], [23.3, 103.0], [23.4, 112.0], [23.5, 117.0], [23.6, 133.0], [23.7, 143.0], [23.8, 151.0], [23.9, 166.0], [24.0, 173.0], [24.1, 187.0], [24.2, 200.0], [24.3, 213.0], [24.4, 229.0], [24.5, 237.0], [24.6, 247.0], [24.7, 256.0], [24.8, 265.0], [24.9, 277.0], [25.0, 287.0], [25.1, 292.0], [25.2, 300.0], [25.3, 309.0], [25.4, 321.0], [25.5, 333.0], [25.6, 342.0], [25.7, 351.0], [25.8, 361.0], [25.9, 373.0], [26.0, 380.0], [26.1, 387.0], [26.2, 394.0], [26.3, 399.0], [26.4, 407.0], [26.5, 417.0], [26.6, 424.0], [26.7, 430.0], [26.8, 438.0], [26.9, 442.0], [27.0, 447.0], [27.1, 452.0], [27.2, 460.0], [27.3, 465.0], [27.4, 473.0], [27.5, 479.0], [27.6, 488.0], [27.7, 491.0], [27.8, 496.0], [27.9, 501.0], [28.0, 506.0], [28.1, 511.0], [28.2, 517.0], [28.3, 521.0], [28.4, 525.0], [28.5, 530.0], [28.6, 535.0], [28.7, 540.0], [28.8, 545.0], [28.9, 551.0], [29.0, 556.0], [29.1, 560.0], [29.2, 567.0], [29.3, 573.0], [29.4, 577.0], [29.5, 582.0], [29.6, 586.0], [29.7, 590.0], [29.8, 594.0], [29.9, 600.0], [30.0, 607.0], [30.1, 613.0], [30.2, 616.0], [30.3, 621.0], [30.4, 626.0], [30.5, 632.0], [30.6, 637.0], [30.7, 643.0], [30.8, 646.0], [30.9, 649.0], [31.0, 653.0], [31.1, 659.0], [31.2, 663.0], [31.3, 666.0], [31.4, 672.0], [31.5, 678.0], [31.6, 684.0], [31.7, 692.0], [31.8, 696.0], [31.9, 702.0], [32.0, 708.0], [32.1, 713.0], [32.2, 718.0], [32.3, 722.0], [32.4, 726.0], [32.5, 730.0], [32.6, 734.0], [32.7, 740.0], [32.8, 744.0], [32.9, 747.0], [33.0, 751.0], [33.1, 758.0], [33.2, 762.0], [33.3, 766.0], [33.4, 770.0], [33.5, 774.0], [33.6, 777.0], [33.7, 782.0], [33.8, 786.0], [33.9, 790.0], [34.0, 795.0], [34.1, 799.0], [34.2, 806.0], [34.3, 809.0], [34.4, 812.0], [34.5, 821.0], [34.6, 825.0], [34.7, 829.0], [34.8, 836.0], [34.9, 839.0], [35.0, 845.0], [35.1, 847.0], [35.2, 854.0], [35.3, 860.0], [35.4, 863.0], [35.5, 868.0], [35.6, 872.0], [35.7, 876.0], [35.8, 880.0], [35.9, 884.0], [36.0, 888.0], [36.1, 893.0], [36.2, 897.0], [36.3, 904.0], [36.4, 907.0], [36.5, 912.0], [36.6, 919.0], [36.7, 924.0], [36.8, 929.0], [36.9, 932.0], [37.0, 936.0], [37.1, 940.0], [37.2, 943.0], [37.3, 947.0], [37.4, 953.0], [37.5, 957.0], [37.6, 963.0], [37.7, 967.0], [37.8, 971.0], [37.9, 976.0], [38.0, 979.0], [38.1, 982.0], [38.2, 986.0], [38.3, 989.0], [38.4, 994.0], [38.5, 996.0], [38.6, 1002.0], [38.7, 1006.0], [38.8, 1009.0], [38.9, 1011.0], [39.0, 1015.0], [39.1, 1019.0], [39.2, 1022.0], [39.3, 1024.0], [39.4, 1028.0], [39.5, 1032.0], [39.6, 1035.0], [39.7, 1037.0], [39.8, 1041.0], [39.9, 1045.0], [40.0, 1049.0], [40.1, 1054.0], [40.2, 1057.0], [40.3, 1059.0], [40.4, 1062.0], [40.5, 1066.0], [40.6, 1070.0], [40.7, 1072.0], [40.8, 1075.0], [40.9, 1078.0], [41.0, 1082.0], [41.1, 1086.0], [41.2, 1089.0], [41.3, 1092.0], [41.4, 1095.0], [41.5, 1098.0], [41.6, 1100.0], [41.7, 1101.0], [41.8, 1104.0], [41.9, 1107.0], [42.0, 1110.0], [42.1, 1114.0], [42.2, 1116.0], [42.3, 1118.0], [42.4, 1121.0], [42.5, 1124.0], [42.6, 1127.0], [42.7, 1130.0], [42.8, 1135.0], [42.9, 1137.0], [43.0, 1141.0], [43.1, 1144.0], [43.2, 1146.0], [43.3, 1150.0], [43.4, 1153.0], [43.5, 1155.0], [43.6, 1158.0], [43.7, 1161.0], [43.8, 1164.0], [43.9, 1167.0], [44.0, 1170.0], [44.1, 1173.0], [44.2, 1176.0], [44.3, 1180.0], [44.4, 1185.0], [44.5, 1187.0], [44.6, 1190.0], [44.7, 1193.0], [44.8, 1199.0], [44.9, 1202.0], [45.0, 1206.0], [45.1, 1209.0], [45.2, 1211.0], [45.3, 1214.0], [45.4, 1219.0], [45.5, 1221.0], [45.6, 1224.0], [45.7, 1228.0], [45.8, 1230.0], [45.9, 1235.0], [46.0, 1238.0], [46.1, 1241.0], [46.2, 1244.0], [46.3, 1247.0], [46.4, 1249.0], [46.5, 1253.0], [46.6, 1257.0], [46.7, 1259.0], [46.8, 1261.0], [46.9, 1264.0], [47.0, 1265.0], [47.1, 1266.0], [47.2, 1269.0], [47.3, 1271.0], [47.4, 1274.0], [47.5, 1277.0], [47.6, 1280.0], [47.7, 1282.0], [47.8, 1285.0], [47.9, 1287.0], [48.0, 1290.0], [48.1, 1294.0], [48.2, 1297.0], [48.3, 1301.0], [48.4, 1303.0], [48.5, 1307.0], [48.6, 1310.0], [48.7, 1313.0], [48.8, 1316.0], [48.9, 1318.0], [49.0, 1320.0], [49.1, 1323.0], [49.2, 1325.0], [49.3, 1329.0], [49.4, 1332.0], [49.5, 1336.0], [49.6, 1339.0], [49.7, 1343.0], [49.8, 1346.0], [49.9, 1349.0], [50.0, 1351.0], [50.1, 1355.0], [50.2, 1359.0], [50.3, 1362.0], [50.4, 1365.0], [50.5, 1370.0], [50.6, 1372.0], [50.7, 1374.0], [50.8, 1377.0], [50.9, 1379.0], [51.0, 1383.0], [51.1, 1386.0], [51.2, 1388.0], [51.3, 1390.0], [51.4, 1392.0], [51.5, 1395.0], [51.6, 1397.0], [51.7, 1400.0], [51.8, 1403.0], [51.9, 1407.0], [52.0, 1411.0], [52.1, 1414.0], [52.2, 1417.0], [52.3, 1420.0], [52.4, 1423.0], [52.5, 1426.0], [52.6, 1429.0], [52.7, 1433.0], [52.8, 1437.0], [52.9, 1439.0], [53.0, 1443.0], [53.1, 1444.0], [53.2, 1448.0], [53.3, 1451.0], [53.4, 1454.0], [53.5, 1457.0], [53.6, 1460.0], [53.7, 1464.0], [53.8, 1467.0], [53.9, 1469.0], [54.0, 1473.0], [54.1, 1476.0], [54.2, 1478.0], [54.3, 1482.0], [54.4, 1484.0], [54.5, 1488.0], [54.6, 1490.0], [54.7, 1493.0], [54.8, 1495.0], [54.9, 1498.0], [55.0, 1501.0], [55.1, 1503.0], [55.2, 1508.0], [55.3, 1510.0], [55.4, 1513.0], [55.5, 1517.0], [55.6, 1521.0], [55.7, 1523.0], [55.8, 1525.0], [55.9, 1528.0], [56.0, 1530.0], [56.1, 1533.0], [56.2, 1535.0], [56.3, 1538.0], [56.4, 1541.0], [56.5, 1544.0], [56.6, 1547.0], [56.7, 1550.0], [56.8, 1555.0], [56.9, 1557.0], [57.0, 1560.0], [57.1, 1563.0], [57.2, 1567.0], [57.3, 1570.0], [57.4, 1573.0], [57.5, 1576.0], [57.6, 1578.0], [57.7, 1582.0], [57.8, 1584.0], [57.9, 1587.0], [58.0, 1590.0], [58.1, 1592.0], [58.2, 1594.0], [58.3, 1600.0], [58.4, 1602.0], [58.5, 1607.0], [58.6, 1611.0], [58.7, 1615.0], [58.8, 1618.0], [58.9, 1620.0], [59.0, 1624.0], [59.1, 1628.0], [59.2, 1631.0], [59.3, 1633.0], [59.4, 1637.0], [59.5, 1640.0], [59.6, 1643.0], [59.7, 1645.0], [59.8, 1649.0], [59.9, 1653.0], [60.0, 1657.0], [60.1, 1662.0], [60.2, 1665.0], [60.3, 1669.0], [60.4, 1672.0], [60.5, 1675.0], [60.6, 1679.0], [60.7, 1683.0], [60.8, 1687.0], [60.9, 1690.0], [61.0, 1692.0], [61.1, 1695.0], [61.2, 1698.0], [61.3, 1702.0], [61.4, 1707.0], [61.5, 1711.0], [61.6, 1716.0], [61.7, 1719.0], [61.8, 1721.0], [61.9, 1724.0], [62.0, 1727.0], [62.1, 1730.0], [62.2, 1735.0], [62.3, 1738.0], [62.4, 1740.0], [62.5, 1743.0], [62.6, 1747.0], [62.7, 1751.0], [62.8, 1756.0], [62.9, 1759.0], [63.0, 1762.0], [63.1, 1768.0], [63.2, 1770.0], [63.3, 1774.0], [63.4, 1777.0], [63.5, 1780.0], [63.6, 1784.0], [63.7, 1786.0], [63.8, 1789.0], [63.9, 1792.0], [64.0, 1798.0], [64.1, 1802.0], [64.2, 1805.0], [64.3, 1811.0], [64.4, 1816.0], [64.5, 1820.0], [64.6, 1822.0], [64.7, 1824.0], [64.8, 1827.0], [64.9, 1832.0], [65.0, 1835.0], [65.1, 1839.0], [65.2, 1842.0], [65.3, 1846.0], [65.4, 1851.0], [65.5, 1854.0], [65.6, 1858.0], [65.7, 1863.0], [65.8, 1868.0], [65.9, 1871.0], [66.0, 1875.0], [66.1, 1877.0], [66.2, 1881.0], [66.3, 1886.0], [66.4, 1889.0], [66.5, 1895.0], [66.6, 1900.0], [66.7, 1905.0], [66.8, 1908.0], [66.9, 1913.0], [67.0, 1916.0], [67.1, 1921.0], [67.2, 1924.0], [67.3, 1928.0], [67.4, 1932.0], [67.5, 1937.0], [67.6, 1943.0], [67.7, 1946.0], [67.8, 1951.0], [67.9, 1955.0], [68.0, 1959.0], [68.1, 1964.0], [68.2, 1968.0], [68.3, 1972.0], [68.4, 1975.0], [68.5, 1979.0], [68.6, 1983.0], [68.7, 1988.0], [68.8, 1992.0], [68.9, 1997.0], [69.0, 1999.0], [69.1, 2002.0], [69.2, 2007.0], [69.3, 2013.0], [69.4, 2016.0], [69.5, 2021.0], [69.6, 2025.0], [69.7, 2029.0], [69.8, 2033.0], [69.9, 2036.0], [70.0, 2042.0], [70.1, 2049.0], [70.2, 2053.0], [70.3, 2056.0], [70.4, 2061.0], [70.5, 2066.0], [70.6, 2070.0], [70.7, 2074.0], [70.8, 2078.0], [70.9, 2082.0], [71.0, 2086.0], [71.1, 2089.0], [71.2, 2093.0], [71.3, 2098.0], [71.4, 2101.0], [71.5, 2104.0], [71.6, 2110.0], [71.7, 2113.0], [71.8, 2116.0], [71.9, 2120.0], [72.0, 2123.0], [72.1, 2130.0], [72.2, 2133.0], [72.3, 2136.0], [72.4, 2140.0], [72.5, 2145.0], [72.6, 2150.0], [72.7, 2154.0], [72.8, 2158.0], [72.9, 2162.0], [73.0, 2166.0], [73.1, 2170.0], [73.2, 2175.0], [73.3, 2180.0], [73.4, 2184.0], [73.5, 2187.0], [73.6, 2190.0], [73.7, 2196.0], [73.8, 2202.0], [73.9, 2205.0], [74.0, 2210.0], [74.1, 2214.0], [74.2, 2221.0], [74.3, 2228.0], [74.4, 2232.0], [74.5, 2236.0], [74.6, 2240.0], [74.7, 2244.0], [74.8, 2248.0], [74.9, 2251.0], [75.0, 2255.0], [75.1, 2259.0], [75.2, 2262.0], [75.3, 2268.0], [75.4, 2273.0], [75.5, 2278.0], [75.6, 2282.0], [75.7, 2286.0], [75.8, 2289.0], [75.9, 2294.0], [76.0, 2299.0], [76.1, 2304.0], [76.2, 2307.0], [76.3, 2311.0], [76.4, 2315.0], [76.5, 2319.0], [76.6, 2324.0], [76.7, 2331.0], [76.8, 2336.0], [76.9, 2340.0], [77.0, 2342.0], [77.1, 2346.0], [77.2, 2351.0], [77.3, 2354.0], [77.4, 2359.0], [77.5, 2363.0], [77.6, 2367.0], [77.7, 2370.0], [77.8, 2374.0], [77.9, 2378.0], [78.0, 2383.0], [78.1, 2386.0], [78.2, 2391.0], [78.3, 2397.0], [78.4, 2401.0], [78.5, 2408.0], [78.6, 2412.0], [78.7, 2418.0], [78.8, 2423.0], [78.9, 2426.0], [79.0, 2432.0], [79.1, 2437.0], [79.2, 2443.0], [79.3, 2450.0], [79.4, 2456.0], [79.5, 2459.0], [79.6, 2467.0], [79.7, 2471.0], [79.8, 2475.0], [79.9, 2480.0], [80.0, 2485.0], [80.1, 2489.0], [80.2, 2494.0], [80.3, 2500.0], [80.4, 2504.0], [80.5, 2506.0], [80.6, 2511.0], [80.7, 2514.0], [80.8, 2522.0], [80.9, 2528.0], [81.0, 2533.0], [81.1, 2536.0], [81.2, 2540.0], [81.3, 2544.0], [81.4, 2548.0], [81.5, 2552.0], [81.6, 2558.0], [81.7, 2563.0], [81.8, 2568.0], [81.9, 2571.0], [82.0, 2577.0], [82.1, 2584.0], [82.2, 2588.0], [82.3, 2592.0], [82.4, 2599.0], [82.5, 2606.0], [82.6, 2612.0], [82.7, 2615.0], [82.8, 2619.0], [82.9, 2623.0], [83.0, 2628.0], [83.1, 2634.0], [83.2, 2639.0], [83.3, 2645.0], [83.4, 2650.0], [83.5, 2654.0], [83.6, 2658.0], [83.7, 2663.0], [83.8, 2668.0], [83.9, 2674.0], [84.0, 2677.0], [84.1, 2683.0], [84.2, 2690.0], [84.3, 2695.0], [84.4, 2698.0], [84.5, 2703.0], [84.6, 2709.0], [84.7, 2715.0], [84.8, 2720.0], [84.9, 2729.0], [85.0, 2734.0], [85.1, 2742.0], [85.2, 2746.0], [85.3, 2755.0], [85.4, 2762.0], [85.5, 2771.0], [85.6, 2775.0], [85.7, 2784.0], [85.8, 2790.0], [85.9, 2798.0], [86.0, 2804.0], [86.1, 2810.0], [86.2, 2817.0], [86.3, 2824.0], [86.4, 2829.0], [86.5, 2834.0], [86.6, 2841.0], [86.7, 2848.0], [86.8, 2852.0], [86.9, 2860.0], [87.0, 2865.0], [87.1, 2870.0], [87.2, 2877.0], [87.3, 2881.0], [87.4, 2886.0], [87.5, 2892.0], [87.6, 2898.0], [87.7, 2905.0], [87.8, 2912.0], [87.9, 2917.0], [88.0, 2924.0], [88.1, 2930.0], [88.2, 2938.0], [88.3, 2945.0], [88.4, 2951.0], [88.5, 2958.0], [88.6, 2964.0], [88.7, 2970.0], [88.8, 2978.0], [88.9, 2985.0], [89.0, 2990.0], [89.1, 2995.0], [89.2, 3001.0], [89.3, 3007.0], [89.4, 3013.0], [89.5, 3020.0], [89.6, 3026.0], [89.7, 3032.0], [89.8, 3037.0], [89.9, 3043.0], [90.0, 3049.0], [90.1, 3057.0], [90.2, 3061.0], [90.3, 3067.0], [90.4, 3079.0], [90.5, 3086.0], [90.6, 3093.0], [90.7, 3100.0], [90.8, 3111.0], [90.9, 3118.0], [91.0, 3126.0], [91.1, 3137.0], [91.2, 3144.0], [91.3, 3151.0], [91.4, 3156.0], [91.5, 3163.0], [91.6, 3171.0], [91.7, 3178.0], [91.8, 3186.0], [91.9, 3191.0], [92.0, 3197.0], [92.1, 3208.0], [92.2, 3215.0], [92.3, 3220.0], [92.4, 3226.0], [92.5, 3231.0], [92.6, 3238.0], [92.7, 3250.0], [92.8, 3259.0], [92.9, 3264.0], [93.0, 3270.0], [93.1, 3277.0], [93.2, 3287.0], [93.3, 3295.0], [93.4, 3300.0], [93.5, 3310.0], [93.6, 3319.0], [93.7, 3327.0], [93.8, 3342.0], [93.9, 3350.0], [94.0, 3361.0], [94.1, 3369.0], [94.2, 3380.0], [94.3, 3387.0], [94.4, 3402.0], [94.5, 3417.0], [94.6, 3421.0], [94.7, 3443.0], [94.8, 3458.0], [94.9, 3473.0], [95.0, 3497.0], [95.1, 3511.0], [95.2, 3528.0], [95.3, 3543.0], [95.4, 3559.0], [95.5, 3575.0], [95.6, 3591.0], [95.7, 3607.0], [95.8, 3632.0], [95.9, 3656.0], [96.0, 3675.0], [96.1, 3689.0], [96.2, 3703.0], [96.3, 3733.0], [96.4, 3749.0], [96.5, 3772.0], [96.6, 3785.0], [96.7, 3799.0], [96.8, 3819.0], [96.9, 3833.0], [97.0, 3849.0], [97.1, 3874.0], [97.2, 3891.0], [97.3, 3920.0], [97.4, 3955.0], [97.5, 3973.0], [97.6, 4006.0], [97.7, 4030.0], [97.8, 4059.0], [97.9, 4103.0], [98.0, 4123.0], [98.1, 4155.0], [98.2, 4208.0], [98.3, 4246.0], [98.4, 4322.0], [98.5, 4352.0], [98.6, 4400.0], [98.7, 4440.0], [98.8, 4531.0], [98.9, 4581.0], [99.0, 4664.0], [99.1, 4732.0], [99.2, 4847.0], [99.3, 4999.0], [99.4, 5152.0], [99.5, 5257.0], [99.6, 5409.0], [99.7, 5711.0], [99.8, 6074.0], [99.9, 6681.0], [100.0, 8758.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 145.0], [0.1, 145.0], [0.2, 145.0], [0.3, 145.0], [0.4, 145.0], [0.5, 145.0], [0.6, 145.0], [0.7, 145.0], [0.8, 145.0], [0.9, 145.0], [1.0, 145.0], [1.1, 145.0], [1.2, 145.0], [1.3, 145.0], [1.4, 145.0], [1.5, 145.0], [1.6, 145.0], [1.7, 145.0], [1.8, 145.0], [1.9, 145.0], [2.0, 145.0], [2.1, 145.0], [2.2, 145.0], [2.3, 145.0], [2.4, 145.0], [2.5, 145.0], [2.6, 145.0], [2.7, 145.0], [2.8, 145.0], [2.9, 146.0], [3.0, 146.0], [3.1, 146.0], [3.2, 146.0], [3.3, 146.0], [3.4, 146.0], [3.5, 146.0], [3.6, 146.0], [3.7, 146.0], [3.8, 146.0], [3.9, 146.0], [4.0, 146.0], [4.1, 146.0], [4.2, 146.0], [4.3, 147.0], [4.4, 147.0], [4.5, 147.0], [4.6, 147.0], [4.7, 147.0], [4.8, 147.0], [4.9, 147.0], [5.0, 147.0], [5.1, 147.0], [5.2, 147.0], [5.3, 147.0], [5.4, 147.0], [5.5, 147.0], [5.6, 147.0], [5.7, 147.0], [5.8, 147.0], [5.9, 147.0], [6.0, 147.0], [6.1, 147.0], [6.2, 147.0], [6.3, 147.0], [6.4, 147.0], [6.5, 148.0], [6.6, 148.0], [6.7, 148.0], [6.8, 148.0], [6.9, 148.0], [7.0, 148.0], [7.1, 148.0], [7.2, 148.0], [7.3, 148.0], [7.4, 148.0], [7.5, 148.0], [7.6, 148.0], [7.7, 148.0], [7.8, 148.0], [7.9, 148.0], [8.0, 148.0], [8.1, 148.0], [8.2, 148.0], [8.3, 148.0], [8.4, 148.0], [8.5, 148.0], [8.6, 148.0], [8.7, 148.0], [8.8, 148.0], [8.9, 148.0], [9.0, 148.0], [9.1, 148.0], [9.2, 148.0], [9.3, 148.0], [9.4, 148.0], [9.5, 148.0], [9.6, 148.0], [9.7, 148.0], [9.8, 148.0], [9.9, 148.0], [10.0, 148.0], [10.1, 148.0], [10.2, 148.0], [10.3, 148.0], [10.4, 148.0], [10.5, 148.0], [10.6, 148.0], [10.7, 148.0], [10.8, 148.0], [10.9, 148.0], [11.0, 148.0], [11.1, 148.0], [11.2, 148.0], [11.3, 148.0], [11.4, 148.0], [11.5, 149.0], [11.6, 149.0], [11.7, 149.0], [11.8, 149.0], [11.9, 149.0], [12.0, 149.0], [12.1, 149.0], [12.2, 149.0], [12.3, 149.0], [12.4, 149.0], [12.5, 149.0], [12.6, 149.0], [12.7, 149.0], [12.8, 149.0], [12.9, 149.0], [13.0, 149.0], [13.1, 149.0], [13.2, 149.0], [13.3, 149.0], [13.4, 149.0], [13.5, 149.0], [13.6, 149.0], [13.7, 149.0], [13.8, 149.0], [13.9, 149.0], [14.0, 149.0], [14.1, 149.0], [14.2, 149.0], [14.3, 150.0], [14.4, 150.0], [14.5, 150.0], [14.6, 150.0], [14.7, 150.0], [14.8, 150.0], [14.9, 150.0], [15.0, 150.0], [15.1, 150.0], [15.2, 150.0], [15.3, 150.0], [15.4, 150.0], [15.5, 150.0], [15.6, 150.0], [15.7, 150.0], [15.8, 150.0], [15.9, 150.0], [16.0, 150.0], [16.1, 150.0], [16.2, 150.0], [16.3, 150.0], [16.4, 150.0], [16.5, 150.0], [16.6, 150.0], [16.7, 150.0], [16.8, 150.0], [16.9, 150.0], [17.0, 150.0], [17.1, 150.0], [17.2, 150.0], [17.3, 150.0], [17.4, 150.0], [17.5, 150.0], [17.6, 150.0], [17.7, 150.0], [17.8, 150.0], [17.9, 150.0], [18.0, 150.0], [18.1, 150.0], [18.2, 150.0], [18.3, 150.0], [18.4, 150.0], [18.5, 150.0], [18.6, 150.0], [18.7, 150.0], [18.8, 150.0], [18.9, 150.0], [19.0, 150.0], [19.1, 150.0], [19.2, 150.0], [19.3, 150.0], [19.4, 150.0], [19.5, 150.0], [19.6, 150.0], [19.7, 150.0], [19.8, 150.0], [19.9, 150.0], [20.0, 151.0], [20.1, 151.0], [20.2, 151.0], [20.3, 151.0], [20.4, 151.0], [20.5, 151.0], [20.6, 151.0], [20.7, 151.0], [20.8, 151.0], [20.9, 151.0], [21.0, 151.0], [21.1, 151.0], [21.2, 151.0], [21.3, 151.0], [21.4, 151.0], [21.5, 151.0], [21.6, 151.0], [21.7, 151.0], [21.8, 151.0], [21.9, 151.0], [22.0, 151.0], [22.1, 151.0], [22.2, 151.0], [22.3, 151.0], [22.4, 151.0], [22.5, 151.0], [22.6, 151.0], [22.7, 151.0], [22.8, 151.0], [22.9, 151.0], [23.0, 151.0], [23.1, 151.0], [23.2, 151.0], [23.3, 151.0], [23.4, 151.0], [23.5, 151.0], [23.6, 151.0], [23.7, 151.0], [23.8, 151.0], [23.9, 151.0], [24.0, 151.0], [24.1, 151.0], [24.2, 151.0], [24.3, 151.0], [24.4, 151.0], [24.5, 151.0], [24.6, 151.0], [24.7, 151.0], [24.8, 151.0], [24.9, 151.0], [25.0, 152.0], [25.1, 152.0], [25.2, 152.0], [25.3, 152.0], [25.4, 152.0], [25.5, 152.0], [25.6, 152.0], [25.7, 152.0], [25.8, 152.0], [25.9, 152.0], [26.0, 152.0], [26.1, 152.0], [26.2, 152.0], [26.3, 152.0], [26.4, 152.0], [26.5, 152.0], [26.6, 152.0], [26.7, 152.0], [26.8, 152.0], [26.9, 152.0], [27.0, 152.0], [27.1, 152.0], [27.2, 152.0], [27.3, 152.0], [27.4, 152.0], [27.5, 152.0], [27.6, 152.0], [27.7, 152.0], [27.8, 152.0], [27.9, 152.0], [28.0, 152.0], [28.1, 152.0], [28.2, 152.0], [28.3, 152.0], [28.4, 152.0], [28.5, 152.0], [28.6, 152.0], [28.7, 152.0], [28.8, 152.0], [28.9, 152.0], [29.0, 152.0], [29.1, 152.0], [29.2, 152.0], [29.3, 152.0], [29.4, 152.0], [29.5, 152.0], [29.6, 152.0], [29.7, 152.0], [29.8, 152.0], [29.9, 152.0], [30.0, 152.0], [30.1, 152.0], [30.2, 152.0], [30.3, 152.0], [30.4, 152.0], [30.5, 152.0], [30.6, 152.0], [30.7, 152.0], [30.8, 152.0], [30.9, 152.0], [31.0, 152.0], [31.1, 152.0], [31.2, 152.0], [31.3, 152.0], [31.4, 152.0], [31.5, 152.0], [31.6, 152.0], [31.7, 152.0], [31.8, 152.0], [31.9, 152.0], [32.0, 152.0], [32.1, 152.0], [32.2, 152.0], [32.3, 152.0], [32.4, 152.0], [32.5, 152.0], [32.6, 152.0], [32.7, 152.0], [32.8, 152.0], [32.9, 153.0], [33.0, 153.0], [33.1, 153.0], [33.2, 153.0], [33.3, 153.0], [33.4, 153.0], [33.5, 153.0], [33.6, 153.0], [33.7, 153.0], [33.8, 153.0], [33.9, 153.0], [34.0, 153.0], [34.1, 153.0], [34.2, 153.0], [34.3, 153.0], [34.4, 153.0], [34.5, 153.0], [34.6, 153.0], [34.7, 153.0], [34.8, 153.0], [34.9, 153.0], [35.0, 153.0], [35.1, 153.0], [35.2, 153.0], [35.3, 153.0], [35.4, 153.0], [35.5, 153.0], [35.6, 153.0], [35.7, 153.0], [35.8, 153.0], [35.9, 153.0], [36.0, 153.0], [36.1, 153.0], [36.2, 153.0], [36.3, 153.0], [36.4, 153.0], [36.5, 153.0], [36.6, 153.0], [36.7, 153.0], [36.8, 153.0], [36.9, 153.0], [37.0, 153.0], [37.1, 153.0], [37.2, 153.0], [37.3, 153.0], [37.4, 153.0], [37.5, 153.0], [37.6, 153.0], [37.7, 153.0], [37.8, 153.0], [37.9, 154.0], [38.0, 154.0], [38.1, 154.0], [38.2, 154.0], [38.3, 154.0], [38.4, 154.0], [38.5, 154.0], [38.6, 154.0], [38.7, 154.0], [38.8, 154.0], [38.9, 154.0], [39.0, 154.0], [39.1, 154.0], [39.2, 154.0], [39.3, 154.0], [39.4, 154.0], [39.5, 154.0], [39.6, 154.0], [39.7, 154.0], [39.8, 154.0], [39.9, 154.0], [40.0, 154.0], [40.1, 154.0], [40.2, 154.0], [40.3, 154.0], [40.4, 154.0], [40.5, 154.0], [40.6, 154.0], [40.7, 154.0], [40.8, 154.0], [40.9, 154.0], [41.0, 154.0], [41.1, 154.0], [41.2, 154.0], [41.3, 154.0], [41.4, 154.0], [41.5, 154.0], [41.6, 154.0], [41.7, 154.0], [41.8, 154.0], [41.9, 154.0], [42.0, 154.0], [42.1, 154.0], [42.2, 154.0], [42.3, 154.0], [42.4, 154.0], [42.5, 154.0], [42.6, 154.0], [42.7, 154.0], [42.8, 154.0], [42.9, 154.0], [43.0, 154.0], [43.1, 154.0], [43.2, 154.0], [43.3, 154.0], [43.4, 154.0], [43.5, 154.0], [43.6, 154.0], [43.7, 154.0], [43.8, 154.0], [43.9, 154.0], [44.0, 154.0], [44.1, 154.0], [44.2, 154.0], [44.3, 155.0], [44.4, 155.0], [44.5, 155.0], [44.6, 155.0], [44.7, 155.0], [44.8, 155.0], [44.9, 155.0], [45.0, 155.0], [45.1, 155.0], [45.2, 155.0], [45.3, 155.0], [45.4, 155.0], [45.5, 155.0], [45.6, 155.0], [45.7, 155.0], [45.8, 155.0], [45.9, 155.0], [46.0, 155.0], [46.1, 155.0], [46.2, 155.0], [46.3, 155.0], [46.4, 155.0], [46.5, 155.0], [46.6, 155.0], [46.7, 155.0], [46.8, 155.0], [46.9, 155.0], [47.0, 155.0], [47.1, 155.0], [47.2, 155.0], [47.3, 155.0], [47.4, 155.0], [47.5, 155.0], [47.6, 155.0], [47.7, 155.0], [47.8, 155.0], [47.9, 155.0], [48.0, 155.0], [48.1, 155.0], [48.2, 155.0], [48.3, 155.0], [48.4, 155.0], [48.5, 155.0], [48.6, 155.0], [48.7, 155.0], [48.8, 155.0], [48.9, 155.0], [49.0, 155.0], [49.1, 155.0], [49.2, 155.0], [49.3, 155.0], [49.4, 155.0], [49.5, 155.0], [49.6, 155.0], [49.7, 155.0], [49.8, 155.0], [49.9, 155.0], [50.0, 155.0], [50.1, 155.0], [50.2, 155.0], [50.3, 155.0], [50.4, 155.0], [50.5, 155.0], [50.6, 155.0], [50.7, 155.0], [50.8, 155.0], [50.9, 155.0], [51.0, 155.0], [51.1, 155.0], [51.2, 155.0], [51.3, 155.0], [51.4, 155.0], [51.5, 155.0], [51.6, 155.0], [51.7, 155.0], [51.8, 155.0], [51.9, 155.0], [52.0, 155.0], [52.1, 155.0], [52.2, 156.0], [52.3, 156.0], [52.4, 156.0], [52.5, 156.0], [52.6, 156.0], [52.7, 156.0], [52.8, 156.0], [52.9, 156.0], [53.0, 156.0], [53.1, 156.0], [53.2, 156.0], [53.3, 156.0], [53.4, 156.0], [53.5, 156.0], [53.6, 156.0], [53.7, 156.0], [53.8, 156.0], [53.9, 156.0], [54.0, 156.0], [54.1, 156.0], [54.2, 156.0], [54.3, 156.0], [54.4, 156.0], [54.5, 156.0], [54.6, 156.0], [54.7, 156.0], [54.8, 156.0], [54.9, 156.0], [55.0, 156.0], [55.1, 156.0], [55.2, 156.0], [55.3, 156.0], [55.4, 156.0], [55.5, 156.0], [55.6, 156.0], [55.7, 156.0], [55.8, 156.0], [55.9, 156.0], [56.0, 156.0], [56.1, 156.0], [56.2, 156.0], [56.3, 156.0], [56.4, 156.0], [56.5, 156.0], [56.6, 156.0], [56.7, 156.0], [56.8, 156.0], [56.9, 156.0], [57.0, 156.0], [57.1, 156.0], [57.2, 157.0], [57.3, 157.0], [57.4, 157.0], [57.5, 157.0], [57.6, 157.0], [57.7, 157.0], [57.8, 157.0], [57.9, 157.0], [58.0, 157.0], [58.1, 157.0], [58.2, 157.0], [58.3, 157.0], [58.4, 157.0], [58.5, 157.0], [58.6, 157.0], [58.7, 157.0], [58.8, 157.0], [58.9, 157.0], [59.0, 157.0], [59.1, 157.0], [59.2, 157.0], [59.3, 157.0], [59.4, 157.0], [59.5, 157.0], [59.6, 157.0], [59.7, 157.0], [59.8, 157.0], [59.9, 157.0], [60.0, 157.0], [60.1, 157.0], [60.2, 157.0], [60.3, 157.0], [60.4, 157.0], [60.5, 157.0], [60.6, 157.0], [60.7, 157.0], [60.8, 157.0], [60.9, 157.0], [61.0, 157.0], [61.1, 157.0], [61.2, 157.0], [61.3, 157.0], [61.4, 157.0], [61.5, 157.0], [61.6, 157.0], [61.7, 157.0], [61.8, 157.0], [61.9, 157.0], [62.0, 157.0], [62.1, 157.0], [62.2, 157.0], [62.3, 157.0], [62.4, 157.0], [62.5, 157.0], [62.6, 157.0], [62.7, 157.0], [62.8, 157.0], [62.9, 157.0], [63.0, 157.0], [63.1, 157.0], [63.2, 157.0], [63.3, 157.0], [63.4, 157.0], [63.5, 157.0], [63.6, 157.0], [63.7, 157.0], [63.8, 157.0], [63.9, 157.0], [64.0, 157.0], [64.1, 157.0], [64.2, 157.0], [64.3, 158.0], [64.4, 158.0], [64.5, 158.0], [64.6, 158.0], [64.7, 158.0], [64.8, 158.0], [64.9, 158.0], [65.0, 158.0], [65.1, 158.0], [65.2, 158.0], [65.3, 158.0], [65.4, 158.0], [65.5, 158.0], [65.6, 158.0], [65.7, 158.0], [65.8, 158.0], [65.9, 158.0], [66.0, 158.0], [66.1, 158.0], [66.2, 158.0], [66.3, 158.0], [66.4, 158.0], [66.5, 158.0], [66.6, 158.0], [66.7, 158.0], [66.8, 158.0], [66.9, 158.0], [67.0, 158.0], [67.1, 158.0], [67.2, 158.0], [67.3, 158.0], [67.4, 158.0], [67.5, 158.0], [67.6, 158.0], [67.7, 158.0], [67.8, 158.0], [67.9, 158.0], [68.0, 158.0], [68.1, 158.0], [68.2, 158.0], [68.3, 158.0], [68.4, 158.0], [68.5, 158.0], [68.6, 158.0], [68.7, 158.0], [68.8, 158.0], [68.9, 158.0], [69.0, 158.0], [69.1, 158.0], [69.2, 158.0], [69.3, 158.0], [69.4, 158.0], [69.5, 158.0], [69.6, 158.0], [69.7, 158.0], [69.8, 158.0], [69.9, 158.0], [70.0, 159.0], [70.1, 159.0], [70.2, 159.0], [70.3, 159.0], [70.4, 159.0], [70.5, 159.0], [70.6, 159.0], [70.7, 159.0], [70.8, 159.0], [70.9, 159.0], [71.0, 159.0], [71.1, 159.0], [71.2, 159.0], [71.3, 159.0], [71.4, 159.0], [71.5, 159.0], [71.6, 159.0], [71.7, 159.0], [71.8, 159.0], [71.9, 159.0], [72.0, 159.0], [72.1, 159.0], [72.2, 159.0], [72.3, 159.0], [72.4, 159.0], [72.5, 159.0], [72.6, 159.0], [72.7, 159.0], [72.8, 159.0], [72.9, 159.0], [73.0, 159.0], [73.1, 159.0], [73.2, 159.0], [73.3, 159.0], [73.4, 159.0], [73.5, 159.0], [73.6, 160.0], [73.7, 160.0], [73.8, 160.0], [73.9, 160.0], [74.0, 160.0], [74.1, 160.0], [74.2, 160.0], [74.3, 160.0], [74.4, 160.0], [74.5, 160.0], [74.6, 160.0], [74.7, 160.0], [74.8, 160.0], [74.9, 160.0], [75.0, 160.0], [75.1, 160.0], [75.2, 160.0], [75.3, 160.0], [75.4, 160.0], [75.5, 160.0], [75.6, 160.0], [75.7, 160.0], [75.8, 160.0], [75.9, 160.0], [76.0, 160.0], [76.1, 160.0], [76.2, 160.0], [76.3, 160.0], [76.4, 160.0], [76.5, 160.0], [76.6, 160.0], [76.7, 160.0], [76.8, 160.0], [76.9, 160.0], [77.0, 160.0], [77.1, 160.0], [77.2, 161.0], [77.3, 161.0], [77.4, 161.0], [77.5, 161.0], [77.6, 161.0], [77.7, 161.0], [77.8, 161.0], [77.9, 161.0], [78.0, 161.0], [78.1, 161.0], [78.2, 161.0], [78.3, 161.0], [78.4, 161.0], [78.5, 161.0], [78.6, 161.0], [78.7, 161.0], [78.8, 161.0], [78.9, 161.0], [79.0, 161.0], [79.1, 161.0], [79.2, 161.0], [79.3, 161.0], [79.4, 161.0], [79.5, 161.0], [79.6, 161.0], [79.7, 161.0], [79.8, 161.0], [79.9, 161.0], [80.0, 161.0], [80.1, 161.0], [80.2, 161.0], [80.3, 161.0], [80.4, 161.0], [80.5, 161.0], [80.6, 161.0], [80.7, 161.0], [80.8, 162.0], [80.9, 162.0], [81.0, 162.0], [81.1, 162.0], [81.2, 162.0], [81.3, 162.0], [81.4, 162.0], [81.5, 162.0], [81.6, 162.0], [81.7, 162.0], [81.8, 162.0], [81.9, 162.0], [82.0, 162.0], [82.1, 162.0], [82.2, 163.0], [82.3, 163.0], [82.4, 163.0], [82.5, 163.0], [82.6, 163.0], [82.7, 163.0], [82.8, 163.0], [82.9, 163.0], [83.0, 163.0], [83.1, 163.0], [83.2, 163.0], [83.3, 163.0], [83.4, 163.0], [83.5, 163.0], [83.6, 163.0], [83.7, 163.0], [83.8, 163.0], [83.9, 163.0], [84.0, 163.0], [84.1, 163.0], [84.2, 163.0], [84.3, 163.0], [84.4, 163.0], [84.5, 163.0], [84.6, 163.0], [84.7, 163.0], [84.8, 163.0], [84.9, 163.0], [85.0, 163.0], [85.1, 163.0], [85.2, 163.0], [85.3, 163.0], [85.4, 163.0], [85.5, 163.0], [85.6, 163.0], [85.7, 163.0], [85.8, 164.0], [85.9, 164.0], [86.0, 164.0], [86.1, 164.0], [86.2, 164.0], [86.3, 164.0], [86.4, 164.0], [86.5, 164.0], [86.6, 164.0], [86.7, 164.0], [86.8, 164.0], [86.9, 164.0], [87.0, 164.0], [87.1, 164.0], [87.2, 164.0], [87.3, 164.0], [87.4, 164.0], [87.5, 164.0], [87.6, 164.0], [87.7, 164.0], [87.8, 164.0], [87.9, 164.0], [88.0, 164.0], [88.1, 164.0], [88.2, 164.0], [88.3, 164.0], [88.4, 164.0], [88.5, 164.0], [88.6, 164.0], [88.7, 164.0], [88.8, 164.0], [88.9, 164.0], [89.0, 164.0], [89.1, 164.0], [89.2, 164.0], [89.3, 166.0], [89.4, 166.0], [89.5, 166.0], [89.6, 166.0], [89.7, 166.0], [89.8, 166.0], [89.9, 166.0], [90.0, 167.0], [90.1, 167.0], [90.2, 167.0], [90.3, 167.0], [90.4, 167.0], [90.5, 167.0], [90.6, 167.0], [90.7, 167.0], [90.8, 168.0], [90.9, 168.0], [91.0, 168.0], [91.1, 168.0], [91.2, 168.0], [91.3, 168.0], [91.4, 168.0], [91.5, 168.0], [91.6, 168.0], [91.7, 168.0], [91.8, 168.0], [91.9, 168.0], [92.0, 168.0], [92.1, 168.0], [92.2, 169.0], [92.3, 169.0], [92.4, 169.0], [92.5, 169.0], [92.6, 169.0], [92.7, 169.0], [92.8, 169.0], [92.9, 170.0], [93.0, 170.0], [93.1, 170.0], [93.2, 170.0], [93.3, 170.0], [93.4, 170.0], [93.5, 170.0], [93.6, 170.0], [93.7, 170.0], [93.8, 170.0], [93.9, 170.0], [94.0, 170.0], [94.1, 170.0], [94.2, 170.0], [94.3, 170.0], [94.4, 170.0], [94.5, 170.0], [94.6, 170.0], [94.7, 170.0], [94.8, 170.0], [94.9, 170.0], [95.0, 170.0], [95.1, 170.0], [95.2, 170.0], [95.3, 170.0], [95.4, 170.0], [95.5, 170.0], [95.6, 170.0], [95.7, 170.0], [95.8, 172.0], [95.9, 172.0], [96.0, 172.0], [96.1, 172.0], [96.2, 172.0], [96.3, 172.0], [96.4, 172.0], [96.5, 186.0], [96.6, 186.0], [96.7, 186.0], [96.8, 186.0], [96.9, 186.0], [97.0, 186.0], [97.1, 186.0], [97.2, 189.0], [97.3, 189.0], [97.4, 189.0], [97.5, 189.0], [97.6, 189.0], [97.7, 189.0], [97.8, 189.0], [97.9, 242.0], [98.0, 242.0], [98.1, 242.0], [98.2, 242.0], [98.3, 242.0], [98.4, 242.0], [98.5, 242.0], [98.6, 245.0], [98.7, 245.0], [98.8, 245.0], [98.9, 245.0], [99.0, 245.0], [99.1, 245.0], [99.2, 245.0], [99.3, 245.0], [99.4, 245.0], [99.5, 245.0], [99.6, 245.0], [99.7, 245.0], [99.8, 245.0], [99.9, 245.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 2.0], [4.9, 2.0], [5.0, 2.0], [5.1, 2.0], [5.2, 2.0], [5.3, 2.0], [5.4, 2.0], [5.5, 2.0], [5.6, 2.0], [5.7, 2.0], [5.8, 2.0], [5.9, 2.0], [6.0, 2.0], [6.1, 2.0], [6.2, 2.0], [6.3, 2.0], [6.4, 2.0], [6.5, 2.0], [6.6, 2.0], [6.7, 2.0], [6.8, 2.0], [6.9, 2.0], [7.0, 2.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 3.0], [12.4, 3.0], [12.5, 3.0], [12.6, 3.0], [12.7, 3.0], [12.8, 3.0], [12.9, 3.0], [13.0, 3.0], [13.1, 3.0], [13.2, 3.0], [13.3, 3.0], [13.4, 3.0], [13.5, 3.0], [13.6, 3.0], [13.7, 3.0], [13.8, 3.0], [13.9, 3.0], [14.0, 3.0], [14.1, 3.0], [14.2, 3.0], [14.3, 3.0], [14.4, 3.0], [14.5, 3.0], [14.6, 3.0], [14.7, 3.0], [14.8, 4.0], [14.9, 4.0], [15.0, 4.0], [15.1, 4.0], [15.2, 5.0], [15.3, 7.0], [15.4, 14.0], [15.5, 17.0], [15.6, 18.0], [15.7, 19.0], [15.8, 20.0], [15.9, 20.0], [16.0, 21.0], [16.1, 21.0], [16.2, 21.0], [16.3, 22.0], [16.4, 22.0], [16.5, 22.0], [16.6, 23.0], [16.7, 23.0], [16.8, 23.0], [16.9, 24.0], [17.0, 24.0], [17.1, 24.0], [17.2, 25.0], [17.3, 25.0], [17.4, 25.0], [17.5, 26.0], [17.6, 26.0], [17.7, 26.0], [17.8, 26.0], [17.9, 27.0], [18.0, 27.0], [18.1, 27.0], [18.2, 28.0], [18.3, 28.0], [18.4, 28.0], [18.5, 29.0], [18.6, 29.0], [18.7, 29.0], [18.8, 30.0], [18.9, 30.0], [19.0, 31.0], [19.1, 31.0], [19.2, 31.0], [19.3, 32.0], [19.4, 33.0], [19.5, 33.0], [19.6, 34.0], [19.7, 34.0], [19.8, 35.0], [19.9, 35.0], [20.0, 36.0], [20.1, 37.0], [20.2, 38.0], [20.3, 39.0], [20.4, 40.0], [20.5, 41.0], [20.6, 42.0], [20.7, 43.0], [20.8, 45.0], [20.9, 46.0], [21.0, 48.0], [21.1, 49.0], [21.2, 52.0], [21.3, 54.0], [21.4, 55.0], [21.5, 59.0], [21.6, 62.0], [21.7, 65.0], [21.8, 70.0], [21.9, 74.0], [22.0, 81.0], [22.1, 88.0], [22.2, 97.0], [22.3, 103.0], [22.4, 110.0], [22.5, 115.0], [22.6, 121.0], [22.7, 133.0], [22.8, 139.0], [22.9, 147.0], [23.0, 156.0], [23.1, 174.0], [23.2, 188.0], [23.3, 204.0], [23.4, 215.0], [23.5, 225.0], [23.6, 233.0], [23.7, 242.0], [23.8, 252.0], [23.9, 268.0], [24.0, 277.0], [24.1, 283.0], [24.2, 294.0], [24.3, 303.0], [24.4, 312.0], [24.5, 319.0], [24.6, 325.0], [24.7, 333.0], [24.8, 339.0], [24.9, 346.0], [25.0, 354.0], [25.1, 361.0], [25.2, 369.0], [25.3, 376.0], [25.4, 382.0], [25.5, 388.0], [25.6, 394.0], [25.7, 399.0], [25.8, 407.0], [25.9, 415.0], [26.0, 419.0], [26.1, 422.0], [26.2, 427.0], [26.3, 433.0], [26.4, 441.0], [26.5, 445.0], [26.6, 449.0], [26.7, 453.0], [26.8, 457.0], [26.9, 463.0], [27.0, 470.0], [27.1, 477.0], [27.2, 480.0], [27.3, 487.0], [27.4, 490.0], [27.5, 497.0], [27.6, 503.0], [27.7, 509.0], [27.8, 512.0], [27.9, 515.0], [28.0, 519.0], [28.1, 524.0], [28.2, 528.0], [28.3, 532.0], [28.4, 538.0], [28.5, 544.0], [28.6, 549.0], [28.7, 556.0], [28.8, 561.0], [28.9, 566.0], [29.0, 571.0], [29.1, 575.0], [29.2, 580.0], [29.3, 585.0], [29.4, 590.0], [29.5, 598.0], [29.6, 604.0], [29.7, 609.0], [29.8, 615.0], [29.9, 619.0], [30.0, 626.0], [30.1, 632.0], [30.2, 634.0], [30.3, 637.0], [30.4, 641.0], [30.5, 647.0], [30.6, 651.0], [30.7, 655.0], [30.8, 658.0], [30.9, 661.0], [31.0, 666.0], [31.1, 669.0], [31.2, 673.0], [31.3, 676.0], [31.4, 681.0], [31.5, 686.0], [31.6, 691.0], [31.7, 694.0], [31.8, 698.0], [31.9, 701.0], [32.0, 708.0], [32.1, 714.0], [32.2, 718.0], [32.3, 724.0], [32.4, 729.0], [32.5, 732.0], [32.6, 738.0], [32.7, 743.0], [32.8, 747.0], [32.9, 754.0], [33.0, 758.0], [33.1, 763.0], [33.2, 767.0], [33.3, 771.0], [33.4, 776.0], [33.5, 784.0], [33.6, 791.0], [33.7, 795.0], [33.8, 799.0], [33.9, 804.0], [34.0, 810.0], [34.1, 814.0], [34.2, 817.0], [34.3, 823.0], [34.4, 826.0], [34.5, 830.0], [34.6, 833.0], [34.7, 837.0], [34.8, 842.0], [34.9, 847.0], [35.0, 851.0], [35.1, 856.0], [35.2, 860.0], [35.3, 864.0], [35.4, 867.0], [35.5, 874.0], [35.6, 878.0], [35.7, 881.0], [35.8, 886.0], [35.9, 889.0], [36.0, 892.0], [36.1, 895.0], [36.2, 899.0], [36.3, 904.0], [36.4, 907.0], [36.5, 912.0], [36.6, 918.0], [36.7, 921.0], [36.8, 923.0], [36.9, 927.0], [37.0, 931.0], [37.1, 935.0], [37.2, 939.0], [37.3, 944.0], [37.4, 949.0], [37.5, 955.0], [37.6, 958.0], [37.7, 964.0], [37.8, 968.0], [37.9, 974.0], [38.0, 977.0], [38.1, 980.0], [38.2, 983.0], [38.3, 987.0], [38.4, 993.0], [38.5, 998.0], [38.6, 1002.0], [38.7, 1005.0], [38.8, 1008.0], [38.9, 1012.0], [39.0, 1015.0], [39.1, 1018.0], [39.2, 1021.0], [39.3, 1024.0], [39.4, 1027.0], [39.5, 1030.0], [39.6, 1033.0], [39.7, 1037.0], [39.8, 1039.0], [39.9, 1043.0], [40.0, 1045.0], [40.1, 1050.0], [40.2, 1052.0], [40.3, 1055.0], [40.4, 1057.0], [40.5, 1060.0], [40.6, 1062.0], [40.7, 1067.0], [40.8, 1069.0], [40.9, 1071.0], [41.0, 1073.0], [41.1, 1075.0], [41.2, 1078.0], [41.3, 1081.0], [41.4, 1085.0], [41.5, 1089.0], [41.6, 1092.0], [41.7, 1095.0], [41.8, 1100.0], [41.9, 1102.0], [42.0, 1107.0], [42.1, 1111.0], [42.2, 1114.0], [42.3, 1117.0], [42.4, 1121.0], [42.5, 1123.0], [42.6, 1127.0], [42.7, 1131.0], [42.8, 1135.0], [42.9, 1139.0], [43.0, 1144.0], [43.1, 1147.0], [43.2, 1149.0], [43.3, 1153.0], [43.4, 1158.0], [43.5, 1161.0], [43.6, 1163.0], [43.7, 1166.0], [43.8, 1169.0], [43.9, 1172.0], [44.0, 1174.0], [44.1, 1178.0], [44.2, 1180.0], [44.3, 1183.0], [44.4, 1185.0], [44.5, 1187.0], [44.6, 1191.0], [44.7, 1192.0], [44.8, 1196.0], [44.9, 1198.0], [45.0, 1201.0], [45.1, 1204.0], [45.2, 1207.0], [45.3, 1210.0], [45.4, 1213.0], [45.5, 1216.0], [45.6, 1219.0], [45.7, 1221.0], [45.8, 1222.0], [45.9, 1225.0], [46.0, 1227.0], [46.1, 1230.0], [46.2, 1233.0], [46.3, 1236.0], [46.4, 1240.0], [46.5, 1243.0], [46.6, 1246.0], [46.7, 1249.0], [46.8, 1252.0], [46.9, 1254.0], [47.0, 1256.0], [47.1, 1258.0], [47.2, 1260.0], [47.3, 1263.0], [47.4, 1266.0], [47.5, 1270.0], [47.6, 1272.0], [47.7, 1276.0], [47.8, 1279.0], [47.9, 1282.0], [48.0, 1285.0], [48.1, 1288.0], [48.2, 1290.0], [48.3, 1293.0], [48.4, 1298.0], [48.5, 1300.0], [48.6, 1302.0], [48.7, 1305.0], [48.8, 1309.0], [48.9, 1311.0], [49.0, 1314.0], [49.1, 1318.0], [49.2, 1320.0], [49.3, 1324.0], [49.4, 1326.0], [49.5, 1328.0], [49.6, 1332.0], [49.7, 1336.0], [49.8, 1339.0], [49.9, 1341.0], [50.0, 1344.0], [50.1, 1348.0], [50.2, 1350.0], [50.3, 1353.0], [50.4, 1358.0], [50.5, 1362.0], [50.6, 1366.0], [50.7, 1369.0], [50.8, 1371.0], [50.9, 1374.0], [51.0, 1377.0], [51.1, 1379.0], [51.2, 1380.0], [51.3, 1382.0], [51.4, 1385.0], [51.5, 1387.0], [51.6, 1389.0], [51.7, 1392.0], [51.8, 1396.0], [51.9, 1398.0], [52.0, 1400.0], [52.1, 1403.0], [52.2, 1406.0], [52.3, 1409.0], [52.4, 1412.0], [52.5, 1415.0], [52.6, 1418.0], [52.7, 1423.0], [52.8, 1426.0], [52.9, 1428.0], [53.0, 1430.0], [53.1, 1433.0], [53.2, 1436.0], [53.3, 1439.0], [53.4, 1444.0], [53.5, 1447.0], [53.6, 1450.0], [53.7, 1452.0], [53.8, 1455.0], [53.9, 1459.0], [54.0, 1462.0], [54.1, 1465.0], [54.2, 1468.0], [54.3, 1470.0], [54.4, 1473.0], [54.5, 1475.0], [54.6, 1477.0], [54.7, 1479.0], [54.8, 1481.0], [54.9, 1486.0], [55.0, 1489.0], [55.1, 1492.0], [55.2, 1495.0], [55.3, 1497.0], [55.4, 1500.0], [55.5, 1501.0], [55.6, 1504.0], [55.7, 1510.0], [55.8, 1513.0], [55.9, 1517.0], [56.0, 1521.0], [56.1, 1523.0], [56.2, 1524.0], [56.3, 1529.0], [56.4, 1531.0], [56.5, 1534.0], [56.6, 1536.0], [56.7, 1539.0], [56.8, 1541.0], [56.9, 1544.0], [57.0, 1547.0], [57.1, 1550.0], [57.2, 1554.0], [57.3, 1557.0], [57.4, 1561.0], [57.5, 1563.0], [57.6, 1568.0], [57.7, 1570.0], [57.8, 1574.0], [57.9, 1576.0], [58.0, 1579.0], [58.1, 1582.0], [58.2, 1585.0], [58.3, 1588.0], [58.4, 1593.0], [58.5, 1597.0], [58.6, 1602.0], [58.7, 1604.0], [58.8, 1607.0], [58.9, 1611.0], [59.0, 1615.0], [59.1, 1618.0], [59.2, 1621.0], [59.3, 1627.0], [59.4, 1631.0], [59.5, 1632.0], [59.6, 1635.0], [59.7, 1639.0], [59.8, 1643.0], [59.9, 1647.0], [60.0, 1652.0], [60.1, 1656.0], [60.2, 1659.0], [60.3, 1662.0], [60.4, 1664.0], [60.5, 1668.0], [60.6, 1671.0], [60.7, 1675.0], [60.8, 1679.0], [60.9, 1682.0], [61.0, 1684.0], [61.1, 1690.0], [61.2, 1695.0], [61.3, 1698.0], [61.4, 1703.0], [61.5, 1707.0], [61.6, 1712.0], [61.7, 1716.0], [61.8, 1719.0], [61.9, 1723.0], [62.0, 1726.0], [62.1, 1731.0], [62.2, 1734.0], [62.3, 1736.0], [62.4, 1740.0], [62.5, 1742.0], [62.6, 1744.0], [62.7, 1749.0], [62.8, 1752.0], [62.9, 1756.0], [63.0, 1758.0], [63.1, 1762.0], [63.2, 1765.0], [63.3, 1768.0], [63.4, 1772.0], [63.5, 1775.0], [63.6, 1780.0], [63.7, 1784.0], [63.8, 1787.0], [63.9, 1790.0], [64.0, 1796.0], [64.1, 1802.0], [64.2, 1805.0], [64.3, 1807.0], [64.4, 1812.0], [64.5, 1813.0], [64.6, 1819.0], [64.7, 1823.0], [64.8, 1827.0], [64.9, 1831.0], [65.0, 1834.0], [65.1, 1839.0], [65.2, 1842.0], [65.3, 1848.0], [65.4, 1850.0], [65.5, 1855.0], [65.6, 1859.0], [65.7, 1864.0], [65.8, 1869.0], [65.9, 1873.0], [66.0, 1880.0], [66.1, 1883.0], [66.2, 1886.0], [66.3, 1890.0], [66.4, 1894.0], [66.5, 1898.0], [66.6, 1902.0], [66.7, 1906.0], [66.8, 1909.0], [66.9, 1914.0], [67.0, 1919.0], [67.1, 1925.0], [67.2, 1929.0], [67.3, 1931.0], [67.4, 1936.0], [67.5, 1939.0], [67.6, 1942.0], [67.7, 1946.0], [67.8, 1951.0], [67.9, 1954.0], [68.0, 1959.0], [68.1, 1963.0], [68.2, 1966.0], [68.3, 1972.0], [68.4, 1977.0], [68.5, 1980.0], [68.6, 1986.0], [68.7, 1990.0], [68.8, 1996.0], [68.9, 1999.0], [69.0, 2003.0], [69.1, 2006.0], [69.2, 2013.0], [69.3, 2015.0], [69.4, 2021.0], [69.5, 2025.0], [69.6, 2030.0], [69.7, 2035.0], [69.8, 2040.0], [69.9, 2045.0], [70.0, 2048.0], [70.1, 2052.0], [70.2, 2058.0], [70.3, 2062.0], [70.4, 2066.0], [70.5, 2069.0], [70.6, 2076.0], [70.7, 2080.0], [70.8, 2085.0], [70.9, 2090.0], [71.0, 2094.0], [71.1, 2099.0], [71.2, 2103.0], [71.3, 2108.0], [71.4, 2112.0], [71.5, 2115.0], [71.6, 2121.0], [71.7, 2124.0], [71.8, 2128.0], [71.9, 2133.0], [72.0, 2136.0], [72.1, 2141.0], [72.2, 2148.0], [72.3, 2152.0], [72.4, 2156.0], [72.5, 2161.0], [72.6, 2169.0], [72.7, 2175.0], [72.8, 2181.0], [72.9, 2184.0], [73.0, 2188.0], [73.1, 2193.0], [73.2, 2198.0], [73.3, 2201.0], [73.4, 2204.0], [73.5, 2207.0], [73.6, 2211.0], [73.7, 2214.0], [73.8, 2218.0], [73.9, 2222.0], [74.0, 2229.0], [74.1, 2234.0], [74.2, 2237.0], [74.3, 2241.0], [74.4, 2244.0], [74.5, 2248.0], [74.6, 2254.0], [74.7, 2257.0], [74.8, 2264.0], [74.9, 2267.0], [75.0, 2270.0], [75.1, 2277.0], [75.2, 2280.0], [75.3, 2284.0], [75.4, 2287.0], [75.5, 2289.0], [75.6, 2295.0], [75.7, 2299.0], [75.8, 2304.0], [75.9, 2311.0], [76.0, 2314.0], [76.1, 2318.0], [76.2, 2321.0], [76.3, 2325.0], [76.4, 2330.0], [76.5, 2334.0], [76.6, 2339.0], [76.7, 2342.0], [76.8, 2347.0], [76.9, 2353.0], [77.0, 2357.0], [77.1, 2362.0], [77.2, 2365.0], [77.3, 2369.0], [77.4, 2373.0], [77.5, 2378.0], [77.6, 2382.0], [77.7, 2386.0], [77.8, 2390.0], [77.9, 2393.0], [78.0, 2396.0], [78.1, 2400.0], [78.2, 2405.0], [78.3, 2410.0], [78.4, 2415.0], [78.5, 2420.0], [78.6, 2424.0], [78.7, 2429.0], [78.8, 2434.0], [78.9, 2438.0], [79.0, 2443.0], [79.1, 2448.0], [79.2, 2452.0], [79.3, 2456.0], [79.4, 2460.0], [79.5, 2462.0], [79.6, 2467.0], [79.7, 2471.0], [79.8, 2475.0], [79.9, 2482.0], [80.0, 2488.0], [80.1, 2493.0], [80.2, 2497.0], [80.3, 2506.0], [80.4, 2511.0], [80.5, 2515.0], [80.6, 2520.0], [80.7, 2525.0], [80.8, 2530.0], [80.9, 2535.0], [81.0, 2541.0], [81.1, 2546.0], [81.2, 2549.0], [81.3, 2554.0], [81.4, 2559.0], [81.5, 2563.0], [81.6, 2568.0], [81.7, 2572.0], [81.8, 2577.0], [81.9, 2588.0], [82.0, 2595.0], [82.1, 2599.0], [82.2, 2602.0], [82.3, 2606.0], [82.4, 2610.0], [82.5, 2616.0], [82.6, 2621.0], [82.7, 2624.0], [82.8, 2628.0], [82.9, 2632.0], [83.0, 2637.0], [83.1, 2645.0], [83.2, 2652.0], [83.3, 2657.0], [83.4, 2663.0], [83.5, 2671.0], [83.6, 2676.0], [83.7, 2682.0], [83.8, 2686.0], [83.9, 2690.0], [84.0, 2694.0], [84.1, 2702.0], [84.2, 2707.0], [84.3, 2712.0], [84.4, 2719.0], [84.5, 2723.0], [84.6, 2728.0], [84.7, 2733.0], [84.8, 2742.0], [84.9, 2746.0], [85.0, 2753.0], [85.1, 2757.0], [85.2, 2765.0], [85.3, 2769.0], [85.4, 2776.0], [85.5, 2780.0], [85.6, 2785.0], [85.7, 2790.0], [85.8, 2796.0], [85.9, 2801.0], [86.0, 2810.0], [86.1, 2814.0], [86.2, 2822.0], [86.3, 2830.0], [86.4, 2836.0], [86.5, 2843.0], [86.6, 2848.0], [86.7, 2856.0], [86.8, 2862.0], [86.9, 2868.0], [87.0, 2876.0], [87.1, 2881.0], [87.2, 2887.0], [87.3, 2893.0], [87.4, 2897.0], [87.5, 2901.0], [87.6, 2905.0], [87.7, 2915.0], [87.8, 2919.0], [87.9, 2924.0], [88.0, 2930.0], [88.1, 2935.0], [88.2, 2940.0], [88.3, 2945.0], [88.4, 2953.0], [88.5, 2957.0], [88.6, 2961.0], [88.7, 2969.0], [88.8, 2979.0], [88.9, 2985.0], [89.0, 2993.0], [89.1, 3004.0], [89.2, 3011.0], [89.3, 3018.0], [89.4, 3024.0], [89.5, 3031.0], [89.6, 3040.0], [89.7, 3046.0], [89.8, 3053.0], [89.9, 3059.0], [90.0, 3064.0], [90.1, 3071.0], [90.2, 3076.0], [90.3, 3092.0], [90.4, 3102.0], [90.5, 3108.0], [90.6, 3116.0], [90.7, 3121.0], [90.8, 3132.0], [90.9, 3138.0], [91.0, 3145.0], [91.1, 3151.0], [91.2, 3158.0], [91.3, 3166.0], [91.4, 3176.0], [91.5, 3182.0], [91.6, 3189.0], [91.7, 3198.0], [91.8, 3206.0], [91.9, 3213.0], [92.0, 3220.0], [92.1, 3227.0], [92.2, 3237.0], [92.3, 3250.0], [92.4, 3259.0], [92.5, 3268.0], [92.6, 3276.0], [92.7, 3287.0], [92.8, 3294.0], [92.9, 3299.0], [93.0, 3309.0], [93.1, 3316.0], [93.2, 3322.0], [93.3, 3335.0], [93.4, 3345.0], [93.5, 3356.0], [93.6, 3363.0], [93.7, 3371.0], [93.8, 3386.0], [93.9, 3399.0], [94.0, 3408.0], [94.1, 3419.0], [94.2, 3429.0], [94.3, 3442.0], [94.4, 3461.0], [94.5, 3471.0], [94.6, 3481.0], [94.7, 3495.0], [94.8, 3508.0], [94.9, 3519.0], [95.0, 3528.0], [95.1, 3540.0], [95.2, 3557.0], [95.3, 3566.0], [95.4, 3586.0], [95.5, 3601.0], [95.6, 3616.0], [95.7, 3631.0], [95.8, 3651.0], [95.9, 3666.0], [96.0, 3687.0], [96.1, 3702.0], [96.2, 3738.0], [96.3, 3760.0], [96.4, 3791.0], [96.5, 3815.0], [96.6, 3838.0], [96.7, 3859.0], [96.8, 3876.0], [96.9, 3892.0], [97.0, 3912.0], [97.1, 3931.0], [97.2, 3953.0], [97.3, 3977.0], [97.4, 4002.0], [97.5, 4032.0], [97.6, 4080.0], [97.7, 4103.0], [97.8, 4129.0], [97.9, 4157.0], [98.0, 4194.0], [98.1, 4242.0], [98.2, 4298.0], [98.3, 4352.0], [98.4, 4422.0], [98.5, 4475.0], [98.6, 4530.0], [98.7, 4616.0], [98.8, 4668.0], [98.9, 4790.0], [99.0, 4863.0], [99.1, 4909.0], [99.2, 4974.0], [99.3, 5079.0], [99.4, 5165.0], [99.5, 5265.0], [99.6, 5523.0], [99.7, 5825.0], [99.8, 6130.0], [99.9, 6542.0], [100.0, 7781.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3254.0, "series": [{"data": [[0.0, 3254.0], [600.0, 274.0], [700.0, 316.0], [800.0, 298.0], [900.0, 329.0], [1000.0, 422.0], [1100.0, 449.0], [1200.0, 480.0], [1300.0, 481.0], [1400.0, 459.0], [1500.0, 468.0], [1600.0, 410.0], [1700.0, 399.0], [1800.0, 353.0], [1900.0, 342.0], [2000.0, 325.0], [2100.0, 336.0], [2300.0, 328.0], [2200.0, 318.0], [2400.0, 269.0], [2500.0, 299.0], [2600.0, 281.0], [2800.0, 237.0], [2700.0, 210.0], [2900.0, 216.0], [3000.0, 213.0], [3100.0, 185.0], [3300.0, 139.0], [3200.0, 192.0], [3400.0, 91.0], [3500.0, 83.0], [3600.0, 76.0], [3700.0, 78.0], [3800.0, 74.0], [3900.0, 47.0], [4000.0, 44.0], [4300.0, 32.0], [4200.0, 28.0], [4100.0, 38.0], [4600.0, 19.0], [4500.0, 22.0], [4400.0, 24.0], [4700.0, 15.0], [4800.0, 10.0], [5100.0, 16.0], [5000.0, 4.0], [4900.0, 9.0], [5200.0, 9.0], [5300.0, 10.0], [5500.0, 5.0], [5600.0, 2.0], [5400.0, 9.0], [5700.0, 3.0], [5800.0, 4.0], [5900.0, 5.0], [6000.0, 3.0], [6100.0, 2.0], [6200.0, 3.0], [6300.0, 1.0], [6500.0, 1.0], [6400.0, 4.0], [6600.0, 3.0], [6700.0, 2.0], [6900.0, 1.0], [6800.0, 1.0], [7100.0, 2.0], [7400.0, 2.0], [7700.0, 3.0], [8700.0, 2.0], [8600.0, 1.0], [100.0, 133.0], [200.0, 135.0], [300.0, 162.0], [400.0, 218.0], [500.0, 282.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[100.0, 137.0], [200.0, 3.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 3113.0], [600.0, 327.0], [700.0, 273.0], [800.0, 339.0], [900.0, 329.0], [1000.0, 451.0], [1100.0, 444.0], [1200.0, 490.0], [1300.0, 490.0], [1400.0, 480.0], [1500.0, 444.0], [1600.0, 388.0], [1700.0, 381.0], [1800.0, 342.0], [1900.0, 338.0], [2000.0, 306.0], [2100.0, 302.0], [2300.0, 333.0], [2200.0, 343.0], [2400.0, 299.0], [2500.0, 265.0], [2600.0, 274.0], [2800.0, 223.0], [2700.0, 250.0], [2900.0, 224.0], [3000.0, 184.0], [3100.0, 187.0], [3200.0, 169.0], [3300.0, 142.0], [3400.0, 111.0], [3500.0, 107.0], [3600.0, 82.0], [3700.0, 54.0], [3800.0, 67.0], [3900.0, 63.0], [4000.0, 41.0], [4300.0, 24.0], [4100.0, 47.0], [4200.0, 27.0], [4500.0, 16.0], [4600.0, 24.0], [4400.0, 26.0], [4700.0, 11.0], [4800.0, 21.0], [5000.0, 13.0], [4900.0, 20.0], [5100.0, 17.0], [5200.0, 12.0], [5300.0, 4.0], [5500.0, 8.0], [5400.0, 6.0], [5600.0, 2.0], [5800.0, 4.0], [5700.0, 5.0], [6100.0, 5.0], [6000.0, 3.0], [5900.0, 6.0], [6300.0, 2.0], [6200.0, 2.0], [6500.0, 3.0], [6400.0, 5.0], [6600.0, 2.0], [6700.0, 2.0], [6800.0, 2.0], [7000.0, 1.0], [7300.0, 2.0], [7400.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [7700.0, 1.0], [100.0, 144.0], [200.0, 141.0], [300.0, 200.0], [400.0, 261.0], [500.0, 273.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3520.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 12339.0, "series": [{"data": [[0.0, 3520.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7616.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 12339.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4665.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.58768082E12, "maxY": 140.0, "series": [{"data": [[1.587681E12, 140.0], [1.5876816E12, 2.0], [1.5876813E12, 140.0], [1.58768142E12, 140.0], [1.58768136E12, 140.0], [1.58768106E12, 140.0], [1.58768148E12, 139.1949280847843], [1.58768118E12, 140.0], [1.58768112E12, 140.0], [1.58768082E12, 5.625], [1.58768124E12, 140.0], [1.58768094E12, 140.0], [1.58768088E12, 88.65529010238907], [1.58768154E12, 94.02671370967752]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876816E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 23.5, "minX": 1.0, "maxY": 1774.0, "series": [{"data": [[2.0, 38.0], [3.0, 32.0], [4.0, 34.5], [5.0, 28.0], [8.0, 39.5], [9.0, 30.857142857142858], [10.0, 35.5], [12.0, 31.0], [13.0, 35.0], [15.0, 33.0], [17.0, 38.8], [18.0, 37.0], [19.0, 43.0], [20.0, 27.0], [21.0, 31.142857142857146], [22.0, 31.5], [23.0, 33.75], [24.0, 30.8], [25.0, 28.0], [26.0, 36.14285714285714], [27.0, 49.333333333333336], [28.0, 30.888888888888893], [29.0, 32.75], [30.0, 32.0], [31.0, 33.5], [32.0, 30.0], [33.0, 36.25], [34.0, 32.3076923076923], [35.0, 36.4], [36.0, 41.82352941176471], [37.0, 35.44444444444444], [38.0, 35.75], [39.0, 30.0], [40.0, 28.307692307692307], [41.0, 30.0], [42.0, 34.8], [43.0, 23.5], [44.0, 47.0], [45.0, 48.0], [46.0, 1193.3076923076922], [47.0, 210.79999999999998], [48.0, 559.6666666666666], [49.0, 42.7], [50.0, 131.44444444444443], [51.0, 168.4], [52.0, 58.055555555555564], [53.0, 34.99999999999999], [55.0, 44.285714285714285], [54.0, 35.5], [56.0, 49.0], [57.0, 56.25], [58.0, 211.24999999999997], [59.0, 568.2857142857143], [60.0, 371.6666666666667], [61.0, 72.66666666666667], [62.0, 49.07692307692308], [63.0, 244.99999999999997], [64.0, 42.125], [65.0, 454.9], [66.0, 609.4444444444445], [67.0, 131.28571428571428], [68.0, 60.5], [69.0, 104.71428571428572], [70.0, 147.76923076923077], [71.0, 58.85714285714286], [72.0, 46.42857142857143], [73.0, 234.8928571428571], [74.0, 175.0], [75.0, 73.5], [76.0, 99.95833333333331], [77.0, 55.81818181818182], [78.0, 222.68965517241384], [79.0, 343.73529411764713], [80.0, 520.9999999999999], [81.0, 826.9047619047619], [82.0, 634.5], [83.0, 265.625], [84.0, 503.0], [85.0, 387.33333333333337], [86.0, 573.5], [87.0, 36.0], [88.0, 308.05000000000007], [89.0, 989.5], [90.0, 278.87499999999994], [91.0, 404.37500000000006], [92.0, 797.6111111111111], [93.0, 479.99999999999994], [94.0, 781.3076923076924], [95.0, 718.7222222222223], [96.0, 550.0434782608696], [97.0, 440.14285714285717], [98.0, 189.00000000000006], [99.0, 429.94285714285706], [100.0, 519.7777777777777], [101.0, 584.7083333333334], [103.0, 204.55172413793107], [102.0, 562.0666666666666], [104.0, 515.75], [105.0, 903.3000000000001], [106.0, 349.04000000000013], [107.0, 213.96491228070175], [108.0, 1364.5714285714287], [109.0, 1197.9166666666665], [110.0, 1213.6153846153845], [111.0, 1087.2499999999998], [112.0, 1467.2727272727273], [113.0, 1105.0769230769233], [114.0, 1092.6190476190477], [115.0, 657.0], [116.0, 844.4444444444445], [117.0, 336.98113207547163], [118.0, 1061.0666666666668], [119.0, 1371.0], [120.0, 788.7142857142858], [121.0, 127.15999999999998], [122.0, 528.2000000000002], [123.0, 1169.4615384615383], [124.0, 625.4666666666667], [125.0, 1161.6111111111113], [126.0, 1292.1739130434785], [127.0, 1605.6818181818185], [128.0, 1359.8666666666666], [129.0, 1438.6153846153845], [130.0, 1125.5434782608697], [131.0, 1373.5454545454547], [132.0, 1141.4166666666667], [133.0, 290.4565217391303], [134.0, 641.1428571428571], [135.0, 979.1875], [136.0, 1118.203703703704], [137.0, 1329.5], [138.0, 1298.2000000000003], [139.0, 409.33333333333337], [140.0, 1588.9284937693412]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[133.700571428571, 1443.4722142857088]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 164.0], [3.0, 150.0], [4.0, 161.0], [5.0, 154.0], [6.0, 155.0], [7.0, 159.0], [8.0, 147.0], [9.0, 154.0], [10.0, 151.0], [11.0, 154.0], [12.0, 159.0], [13.0, 155.0], [14.0, 158.0], [15.0, 164.0], [16.0, 160.0], [17.0, 170.0], [18.0, 147.0], [19.0, 160.0], [20.0, 164.0], [21.0, 150.0], [22.0, 155.0], [23.0, 152.0], [24.0, 147.0], [25.0, 154.0], [26.0, 148.0], [27.0, 158.0], [28.0, 156.0], [29.0, 152.0], [30.0, 158.0], [31.0, 154.0], [32.0, 148.0], [33.0, 158.0], [34.0, 169.0], [35.0, 158.0], [36.0, 157.0], [37.0, 149.0], [38.0, 156.0], [39.0, 167.0], [40.0, 155.0], [41.0, 150.0], [42.0, 158.0], [43.0, 156.0], [44.0, 163.0], [45.0, 155.0], [46.0, 166.0], [47.0, 152.0], [48.0, 157.0], [49.0, 151.0], [50.0, 157.0], [51.0, 168.0], [52.0, 148.0], [53.0, 154.0], [54.0, 148.0], [55.0, 156.0], [56.0, 157.0], [57.0, 153.0], [58.0, 151.0], [59.0, 152.0], [60.0, 150.0], [61.0, 245.0], [62.0, 149.0], [63.0, 172.0], [64.0, 161.0], [65.0, 155.0], [66.0, 157.0], [67.0, 157.0], [68.0, 146.0], [69.0, 152.0], [70.0, 155.0], [71.0, 151.0], [72.0, 158.0], [73.0, 148.0], [74.0, 186.0], [75.0, 155.0], [76.0, 153.0], [77.0, 152.0], [78.0, 164.0], [79.0, 149.0], [80.0, 157.0], [81.0, 152.0], [82.0, 161.0], [83.0, 152.0], [84.0, 154.0], [85.0, 161.0], [86.0, 151.0], [87.0, 162.0], [88.0, 162.0], [89.0, 163.0], [90.0, 145.0], [91.0, 245.0], [92.0, 242.0], [93.0, 151.0], [94.0, 159.0], [95.0, 158.0], [96.0, 160.0], [97.0, 145.0], [98.0, 146.0], [99.0, 163.0], [100.0, 149.0], [101.0, 164.0], [102.0, 145.0], [103.0, 157.0], [104.0, 153.0], [105.0, 154.0], [106.0, 154.0], [107.0, 161.0], [108.0, 152.0], [109.0, 152.0], [110.0, 152.0], [111.0, 153.0], [112.0, 170.0], [113.0, 156.0], [114.0, 153.0], [115.0, 150.0], [116.0, 148.0], [117.0, 160.0], [118.0, 148.0], [119.0, 159.0], [120.0, 156.0], [121.0, 150.0], [122.0, 155.0], [123.0, 157.0], [124.0, 157.0], [125.0, 159.0], [126.0, 155.0], [127.0, 153.0], [128.0, 168.0], [129.0, 150.0], [130.0, 155.0], [131.0, 163.0], [132.0, 145.0], [133.0, 160.0], [134.0, 153.0], [135.0, 170.0], [136.0, 151.0], [137.0, 163.0], [138.0, 150.0], [139.0, 170.0], [140.0, 156.0], [1.0, 189.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[70.5, 157.9857142857143]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[2.0, 36.5], [4.0, 38.0], [5.0, 34.833333333333336], [7.0, 34.0], [8.0, 26.0], [9.0, 34.0], [10.0, 41.75], [11.0, 32.0], [12.0, 27.0], [13.0, 34.666666666666664], [14.0, 41.333333333333336], [15.0, 35.0], [16.0, 40.666666666666664], [17.0, 40.0], [18.0, 31.4], [19.0, 34.0], [20.0, 30.5], [21.0, 36.0], [22.0, 32.0], [23.0, 40.5], [24.0, 35.5], [25.0, 38.00000000000001], [26.0, 32.57142857142857], [27.0, 36.333333333333336], [28.0, 33.00000000000001], [29.0, 34.14285714285714], [30.0, 35.333333333333336], [31.0, 31.25], [32.0, 35.166666666666664], [33.0, 27.0], [34.0, 38.099999999999994], [35.0, 35.2], [36.0, 41.69230769230769], [37.0, 38.714285714285715], [38.0, 39.333333333333336], [39.0, 35.0], [40.0, 32.64285714285714], [41.0, 40.0], [43.0, 29.166666666666668], [42.0, 40.0], [44.0, 39.0], [45.0, 30.5], [46.0, 1304.153846153846], [47.0, 619.0000000000001], [48.0, 731.5454545454545], [49.0, 43.36363636363636], [50.0, 264.6666666666667], [51.0, 63.5], [52.0, 57.65384615384615], [53.0, 67.44444444444444], [54.0, 31.875], [55.0, 71.25], [56.0, 53.714285714285715], [57.0, 136.5], [58.0, 324.47368421052636], [59.0, 948.375], [60.0, 952.7777777777778], [61.0, 115.24999999999997], [62.0, 53.5], [63.0, 363.1153846153846], [64.0, 44.666666666666664], [65.0, 130.1], [66.0, 135.73333333333335], [67.0, 131.57142857142856], [68.0, 92.25], [69.0, 132.42857142857144], [70.0, 96.42857142857144], [71.0, 59.22222222222222], [72.0, 29.8], [73.0, 292.75757575757575], [74.0, 71.81818181818183], [75.0, 55.06666666666666], [76.0, 100.67647058823529], [77.0, 59.07692307692307], [78.0, 288.9090909090909], [79.0, 296.17857142857144], [80.0, 1319.0487804878053], [81.0, 1183.2105263157896], [82.0, 723.0], [83.0, 251.27272727272728], [84.0, 365.16666666666663], [85.0, 313.0], [86.0, 404.3333333333333], [87.0, 1395.5], [88.0, 601.7647058823529], [89.0, 1014.7777777777779], [90.0, 817.1], [91.0, 328.7272727272727], [92.0, 712.3636363636365], [93.0, 275.5], [94.0, 549.4666666666667], [95.0, 933.0000000000001], [96.0, 310.40000000000003], [97.0, 484.00000000000006], [98.0, 157.31250000000003], [99.0, 390.38888888888897], [100.0, 643.6666666666666], [101.0, 586.9545454545455], [102.0, 546.7272727272727], [103.0, 178.34374999999997], [104.0, 311.14285714285717], [105.0, 881.3571428571428], [106.0, 338.0833333333333], [107.0, 423.2592592592593], [108.0, 1262.0], [109.0, 1318.8333333333335], [110.0, 946.9], [111.0, 1227.9999999999995], [112.0, 1397.066666666667], [113.0, 1290.3333333333335], [114.0, 1051.121212121212], [115.0, 934.8749999999999], [116.0, 835.25], [117.0, 344.51020408163265], [118.0, 1026.235294117647], [119.0, 664.8750000000001], [120.0, 603.1666666666667], [121.0, 469.70454545454527], [122.0, 844.9375000000001], [123.0, 1774.0], [124.0, 743.75], [125.0, 962.3333333333334], [126.0, 1266.3846153846155], [127.0, 1470.2], [128.0, 1455.6176470588236], [129.0, 1497.04347826087], [130.0, 1092.264705882353], [131.0, 1186.0], [132.0, 1162.3], [133.0, 456.00000000000006], [134.0, 630.3], [135.0, 835.9999999999998], [136.0, 1010.0505050505049], [137.0, 1303.0], [138.0, 1180.4285714285713], [139.0, 574.7428571428572], [140.0, 1594.0601623295133]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[133.6870000000012, 1453.2292142857136]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 140.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 28.6, "minX": 1.58768082E12, "maxY": 306728.88333333336, "series": [{"data": [[1.587681E12, 116371.61666666667], [1.5876816E12, 464.3], [1.5876813E12, 217384.01666666666], [1.58768142E12, 299758.4], [1.58768136E12, 299904.11666666664], [1.58768106E12, 130838.93333333333], [1.58768148E12, 306728.88333333336], [1.58768118E12, 251017.81666666668], [1.58768112E12, 212857.03333333333], [1.58768082E12, 1107.35], [1.58768124E12, 240801.33333333334], [1.58768094E12, 226897.21666666667], [1.58768088E12, 191733.21666666667], [1.58768154E12, 230288.45]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.587681E12, 24739.166666666668], [1.5876816E12, 28.6], [1.5876813E12, 13770.666666666666], [1.58768142E12, 18618.633333333335], [1.58768136E12, 18697.466666666667], [1.58768106E12, 21063.566666666666], [1.58768148E12, 18890.666666666668], [1.58768118E12, 15801.233333333334], [1.58768112E12, 13699.7], [1.58768082E12, 87.56666666666666], [1.58768124E12, 14829.166666666666], [1.58768094E12, 14192.833333333334], [1.58768088E12, 12126.566666666668], [1.58768154E12, 14186.166666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876816E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 36.4, "minX": 1.58768082E12, "maxY": 2518.867631851085, "series": [{"data": [[1.587681E12, 588.5913544668598], [1.5876816E12, 38.0], [1.5876813E12, 2504.8043933054396], [1.58768142E12, 1378.0752110514202], [1.58768136E12, 1374.2549467275492], [1.58768106E12, 877.0396445659605], [1.58768148E12, 1320.108858858858], [1.58768118E12, 1923.7101185050162], [1.58768112E12, 2518.867631851085], [1.58768082E12, 38.666666666666664], [1.58768124E12, 2161.312800769973], [1.58768094E12, 2337.2301507537736], [1.58768088E12, 849.6840764331217], [1.58768154E12, 362.2576808721506]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768082E12, 159.87499999999997], [1.58768088E12, 157.87121212121215]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.587681E12, 606.2313043478252], [1.5876816E12, 36.5], [1.5876813E12, 2480.320618556697], [1.58768142E12, 1363.8009223674103], [1.58768136E12, 1324.1913912375114], [1.58768106E12, 946.2292650033717], [1.58768148E12, 1332.648854961834], [1.58768118E12, 1913.2246181491457], [1.58768112E12, 2505.3414120126477], [1.58768082E12, 36.4], [1.58768124E12, 2173.4154589371988], [1.58768094E12, 2375.4575757575753], [1.58768088E12, 876.5802615933403], [1.58768154E12, 412.1107692307693]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876816E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 36.2, "minX": 1.58768082E12, "maxY": 2518.5667011375435, "series": [{"data": [[1.587681E12, 588.5487031700292], [1.5876816E12, 37.5], [1.5876813E12, 2504.4089958159007], [1.58768142E12, 1377.475057559478], [1.58768136E12, 1373.987823439877], [1.58768106E12, 876.3410799726583], [1.58768148E12, 1319.4849849849857], [1.58768118E12, 1923.3473108477626], [1.58768112E12, 2518.5667011375435], [1.58768082E12, 38.333333333333336], [1.58768124E12, 2160.9181905678547], [1.58768094E12, 2337.018090452261], [1.58768088E12, 848.9439490445861], [1.58768154E12, 361.8939544103076]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768082E12, 159.5], [1.58768088E12, 157.82575757575756]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.587681E12, 606.1750724637689], [1.5876816E12, 36.5], [1.5876813E12, 2479.949484536081], [1.58768142E12, 1363.1883166794748], [1.58768136E12, 1323.9023827824744], [1.58768106E12, 945.409979770735], [1.58768148E12, 1332.257251908396], [1.58768118E12, 1912.7735849056612], [1.58768112E12, 2505.050579557426], [1.58768082E12, 36.2], [1.58768124E12, 2172.701449275363], [1.58768094E12, 2375.1959595959615], [1.58768088E12, 876.1617122473243], [1.58768154E12, 411.34666666666664]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876816E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58768082E12, "maxY": 3.7499999999999996, "series": [{"data": [[1.587681E12, 0.15043227665706077], [1.5876816E12, 0.0], [1.5876813E12, 0.43933054393305404], [1.58768142E12, 0.34305448963929414], [1.58768136E12, 0.3264840182648405], [1.58768106E12, 0.1455912508544088], [1.58768148E12, 0.36636636636636605], [1.58768118E12, 0.33272561531449407], [1.58768112E12, 0.4312306101344358], [1.58768082E12, 1.0], [1.58768124E12, 0.38883541867180005], [1.58768094E12, 0.5125628140703519], [1.58768088E12, 0.34394904458598724], [1.58768154E12, 0.09613478691774024]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768082E12, 3.7499999999999996], [1.58768088E12, 0.7348484848484849]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.587681E12, 0.48985507246376914], [1.5876816E12, 1.0], [1.5876813E12, 0.4051546391752578], [1.58768142E12, 0.4235203689469639], [1.58768136E12, 0.4027671022290541], [1.58768106E12, 0.4281861092380311], [1.58768148E12, 0.4351145038167941], [1.58768118E12, 0.4393530997304585], [1.58768112E12, 0.460484720758693], [1.58768082E12, 0.0], [1.58768124E12, 0.402898550724638], [1.58768094E12, 0.5393939393939401], [1.58768088E12, 0.5243757431629007], [1.58768154E12, 0.45128205128205096]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876816E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.58768082E12, "maxY": 8758.0, "series": [{"data": [[1.587681E12, 4341.0], [1.5876816E12, 40.0], [1.5876813E12, 7661.0], [1.58768142E12, 4419.0], [1.58768136E12, 4714.0], [1.58768106E12, 5633.0], [1.58768148E12, 3032.0], [1.58768118E12, 4552.0], [1.58768112E12, 8758.0], [1.58768082E12, 189.0], [1.58768124E12, 4466.0], [1.58768094E12, 5573.0], [1.58768088E12, 3704.0], [1.58768154E12, 2620.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.587681E12, 253.0], [1.5876816E12, 35.0], [1.5876813E12, 280.0], [1.58768142E12, 16.0], [1.58768136E12, 16.0], [1.58768106E12, 30.0], [1.58768148E12, 16.0], [1.58768118E12, 14.0], [1.58768112E12, 152.0], [1.58768082E12, 26.0], [1.58768124E12, 16.0], [1.58768094E12, 273.0], [1.58768088E12, 18.0], [1.58768154E12, 13.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.587681E12, 3037.5], [1.5876816E12, 40.0], [1.5876813E12, 3672.0], [1.58768142E12, 2215.8], [1.58768136E12, 2374.0000000000005], [1.58768106E12, 4088.0], [1.58768148E12, 2098.0], [1.58768118E12, 3494.0], [1.58768112E12, 4529.6], [1.58768082E12, 171.50000000000003], [1.58768124E12, 3223.0], [1.58768094E12, 3547.4000000000015], [1.58768088E12, 2007.800000000001], [1.58768154E12, 1150.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.587681E12, 3906.5499999999993], [1.5876816E12, 40.0], [1.5876813E12, 5542.759999999998], [1.58768142E12, 3620.7199999999993], [1.58768136E12, 3692.119999999997], [1.58768106E12, 5220.0], [1.58768148E12, 2687.850000000001], [1.58768118E12, 4137.389999999999], [1.58768112E12, 6874.800000000001], [1.58768082E12, 189.0], [1.58768124E12, 3881.75], [1.58768094E12, 4626.52], [1.58768088E12, 2961.05], [1.58768154E12, 2397.15]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.587681E12, 3324.25], [1.5876816E12, 40.0], [1.5876813E12, 4346.499999999998], [1.58768142E12, 2421.9], [1.58768136E12, 2895.399999999997], [1.58768106E12, 4696.25], [1.58768148E12, 2279.7], [1.58768118E12, 3798.95], [1.58768112E12, 5355.049999999998], [1.58768082E12, 189.0], [1.58768124E12, 3416.25], [1.58768094E12, 3904.5], [1.58768088E12, 2316.0], [1.58768154E12, 1365.75]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876816E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.5, "minX": 1.0, "maxY": 3586.0, "series": [{"data": [[2.0, 94.0], [3.0, 33.5], [5.0, 37.0], [6.0, 32.5], [7.0, 35.0], [8.0, 42.5], [10.0, 36.5], [11.0, 32.5], [12.0, 33.0], [14.0, 37.5], [15.0, 39.0], [16.0, 2307.5], [17.0, 29.0], [18.0, 593.0], [19.0, 1263.0], [20.0, 31.0], [21.0, 36.5], [22.0, 2318.5], [23.0, 2086.0], [24.0, 2131.0], [25.0, 2335.0], [26.0, 1805.0], [27.0, 2003.5], [28.0, 1970.5], [29.0, 2123.0], [30.0, 1934.5], [31.0, 2037.0], [33.0, 2049.5], [32.0, 2234.5], [35.0, 2197.0], [34.0, 1886.0], [36.0, 1535.5], [37.0, 1825.0], [39.0, 1400.0], [38.0, 1797.0], [40.0, 1620.5], [41.0, 1666.5], [43.0, 1544.0], [42.0, 1596.0], [45.0, 1550.0], [44.0, 1453.0], [46.0, 1378.0], [47.0, 1306.0], [49.0, 1531.0], [48.0, 1289.0], [50.0, 1227.5], [51.0, 457.0], [52.0, 770.0], [53.0, 1165.5], [55.0, 1142.5], [54.0, 1377.0], [57.0, 851.0], [56.0, 322.5], [58.0, 1743.5], [59.0, 736.0], [60.0, 1783.0], [61.0, 1247.0], [62.0, 343.0], [63.0, 998.0], [65.0, 78.5], [64.0, 1268.0], [66.0, 653.5], [67.0, 33.0], [70.0, 52.5], [68.0, 899.5], [69.0, 27.0], [71.0, 28.0], [72.0, 1528.0], [73.0, 198.0], [77.0, 1189.0], [78.0, 1267.0], [79.0, 103.0], [76.0, 111.0], [83.0, 937.0], [82.0, 702.0], [85.0, 1525.0], [87.0, 2575.0], [84.0, 2004.0], [97.0, 454.0], [1.0, 36.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 2.5], [35.0, 2.0], [37.0, 2.0], [38.0, 2.0], [46.0, 3071.0], [49.0, 3586.0], [48.0, 167.0], [52.0, 2812.0], [55.0, 2.0], [58.0, 2.0], [61.0, 2.0], [60.0, 1902.0], [62.0, 2.0], [65.0, 2.0], [64.0, 2.0], [66.0, 2.0], [71.0, 2.0], [69.0, 2.0], [70.0, 2.0], [72.0, 2.0], [73.0, 2.0], [75.0, 2.0], [74.0, 2.0], [78.0, 2.0], [76.0, 2.0], [79.0, 2.0], [77.0, 2.0], [83.0, 2.0], [82.0, 2.0], [80.0, 2.0], [85.0, 2.0], [87.0, 2.0], [86.0, 2.0], [84.0, 2.0], [90.0, 2.0], [91.0, 2.0], [89.0, 2.0], [16.0, 131.0], [29.0, 1.5], [31.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 97.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1.5, "minX": 1.0, "maxY": 3586.0, "series": [{"data": [[2.0, 94.0], [3.0, 32.5], [5.0, 36.5], [6.0, 32.0], [7.0, 34.5], [8.0, 41.0], [10.0, 36.0], [11.0, 32.5], [12.0, 33.0], [14.0, 37.5], [15.0, 39.0], [16.0, 2307.5], [17.0, 29.0], [18.0, 590.5], [19.0, 1263.0], [20.0, 30.5], [21.0, 36.0], [22.0, 2318.0], [23.0, 2086.0], [24.0, 2130.5], [25.0, 2335.0], [26.0, 1805.0], [27.0, 2003.5], [28.0, 1970.5], [29.0, 2123.0], [30.0, 1934.0], [31.0, 2037.0], [33.0, 2048.0], [32.0, 2234.0], [35.0, 2197.0], [34.0, 1884.5], [36.0, 1535.5], [37.0, 1825.0], [39.0, 1400.0], [38.0, 1797.0], [40.0, 1620.5], [41.0, 1665.5], [43.0, 1544.0], [42.0, 1595.5], [45.0, 1550.0], [44.0, 1452.5], [46.0, 1377.0], [47.0, 1306.0], [49.0, 1531.0], [48.0, 1289.0], [50.0, 1225.0], [51.0, 456.5], [52.0, 770.0], [53.0, 1165.5], [55.0, 1142.0], [54.0, 1377.0], [57.0, 851.0], [56.0, 322.5], [58.0, 1743.5], [59.0, 736.0], [60.0, 1783.0], [61.0, 1247.0], [62.0, 343.0], [63.0, 998.0], [65.0, 78.5], [64.0, 1268.0], [66.0, 653.0], [67.0, 33.0], [70.0, 48.5], [68.0, 899.5], [69.0, 26.0], [71.0, 27.0], [72.0, 1528.0], [73.0, 198.0], [77.0, 1189.0], [78.0, 1267.0], [79.0, 103.0], [76.0, 111.0], [83.0, 937.0], [82.0, 701.0], [85.0, 1525.0], [87.0, 2575.0], [84.0, 2001.5], [97.0, 454.0], [1.0, 36.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 2.5], [35.0, 2.0], [37.0, 2.0], [38.0, 2.0], [46.0, 3071.0], [49.0, 3586.0], [48.0, 167.0], [52.0, 2812.0], [55.0, 2.0], [58.0, 2.0], [61.0, 2.0], [60.0, 1902.0], [62.0, 2.0], [65.0, 2.0], [64.0, 2.0], [66.0, 2.0], [71.0, 2.0], [69.0, 2.0], [70.0, 2.0], [72.0, 2.0], [73.0, 2.0], [75.0, 2.0], [74.0, 2.0], [78.0, 2.0], [76.0, 2.0], [79.0, 2.0], [77.0, 2.0], [83.0, 2.0], [82.0, 2.0], [80.0, 2.0], [85.0, 2.0], [87.0, 2.0], [86.0, 2.0], [84.0, 2.0], [90.0, 2.0], [91.0, 2.0], [89.0, 2.0], [16.0, 130.5], [29.0, 1.5], [31.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 97.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.58768082E12, "maxY": 56.36666666666667, "series": [{"data": [[1.587681E12, 56.36666666666667], [1.5876816E12, 0.06666666666666667], [1.5876813E12, 32.03333333333333], [1.58768142E12, 43.15], [1.58768136E12, 43.53333333333333], [1.58768106E12, 50.38333333333333], [1.58768148E12, 43.25], [1.58768118E12, 36.78333333333333], [1.58768112E12, 31.883333333333333], [1.58768082E12, 0.2833333333333333], [1.58768124E12, 34.71666666666667], [1.58768094E12, 33.016666666666666], [1.58768088E12, 30.65], [1.58768154E12, 32.88333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876816E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.58768082E12, "maxY": 44.03333333333333, "series": [{"data": [[1.587681E12, 15.733333333333333], [1.5876816E12, 0.06666666666666667], [1.5876813E12, 31.166666666666668], [1.58768142E12, 43.016666666666666], [1.58768136E12, 42.916666666666664], [1.58768106E12, 18.066666666666666], [1.58768148E12, 44.03333333333333], [1.58768118E12, 36.0], [1.58768112E12, 30.5], [1.58768082E12, 0.26666666666666666], [1.58768124E12, 34.56666666666667], [1.58768094E12, 32.55], [1.58768088E12, 29.3], [1.58768154E12, 33.06666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58768136E12, 0.6666666666666666]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.587681E12, 41.93333333333333], [1.58768118E12, 0.8333333333333334], [1.58768112E12, 1.4333333333333333], [1.5876813E12, 0.9333333333333333], [1.58768094E12, 0.5333333333333333], [1.58768142E12, 0.38333333333333336], [1.58768106E12, 31.033333333333335]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876816E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.58768082E12, "maxY": 22.2, "series": [{"data": [[1.58768082E12, 0.13333333333333333], [1.58768088E12, 2.2]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.587681E12, 7.816666666666666], [1.5876816E12, 0.03333333333333333], [1.5876813E12, 15.483333333333333], [1.58768142E12, 21.566666666666666], [1.58768136E12, 21.55], [1.58768106E12, 8.9], [1.58768148E12, 22.2], [1.58768118E12, 17.866666666666667], [1.58768112E12, 15.35], [1.58768082E12, 0.05], [1.58768124E12, 17.316666666666666], [1.58768094E12, 16.333333333333332], [1.58768088E12, 13.083333333333334], [1.58768154E12, 16.816666666666666]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.587681E12, 21.1], [1.58768118E12, 0.4166666666666667], [1.58768112E12, 0.7666666666666667], [1.5876813E12, 0.45], [1.58768094E12, 0.25], [1.58768142E12, 0.15], [1.58768136E12, 0.35], [1.58768106E12, 15.483333333333333]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.587681E12, 7.916666666666667], [1.5876816E12, 0.03333333333333333], [1.5876813E12, 15.683333333333334], [1.58768142E12, 21.45], [1.58768136E12, 21.366666666666667], [1.58768106E12, 9.166666666666666], [1.58768148E12, 21.833333333333332], [1.58768118E12, 18.133333333333333], [1.58768112E12, 15.15], [1.58768082E12, 0.08333333333333333], [1.58768124E12, 17.25], [1.58768094E12, 16.216666666666665], [1.58768088E12, 14.016666666666667], [1.58768154E12, 16.25]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.587681E12, 20.833333333333332], [1.58768118E12, 0.4166666666666667], [1.58768112E12, 0.6666666666666666], [1.5876813E12, 0.48333333333333334], [1.58768094E12, 0.2833333333333333], [1.58768142E12, 0.23333333333333334], [1.58768136E12, 0.31666666666666665], [1.58768106E12, 15.55]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876816E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.58768082E12, "maxY": 44.03333333333333, "series": [{"data": [[1.587681E12, 15.733333333333333], [1.5876816E12, 0.06666666666666667], [1.5876813E12, 31.166666666666668], [1.58768142E12, 43.016666666666666], [1.58768136E12, 42.916666666666664], [1.58768106E12, 18.066666666666666], [1.58768148E12, 44.03333333333333], [1.58768118E12, 36.0], [1.58768112E12, 30.5], [1.58768082E12, 0.26666666666666666], [1.58768124E12, 34.56666666666667], [1.58768094E12, 32.55], [1.58768088E12, 29.3], [1.58768154E12, 33.06666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.587681E12, 41.93333333333333], [1.58768118E12, 0.8333333333333334], [1.58768112E12, 1.4333333333333333], [1.5876813E12, 0.9333333333333333], [1.58768094E12, 0.5333333333333333], [1.58768142E12, 0.38333333333333336], [1.58768136E12, 0.6666666666666666], [1.58768106E12, 31.033333333333335]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876816E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

