/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 9837.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 2.0], [14.5, 2.0], [14.6, 2.0], [14.7, 2.0], [14.8, 2.0], [14.9, 2.0], [15.0, 2.0], [15.1, 2.0], [15.2, 2.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 3.0], [17.7, 3.0], [17.8, 3.0], [17.9, 3.0], [18.0, 3.0], [18.1, 3.0], [18.2, 3.0], [18.3, 3.0], [18.4, 3.0], [18.5, 3.0], [18.6, 3.0], [18.7, 3.0], [18.8, 3.0], [18.9, 3.0], [19.0, 3.0], [19.1, 4.0], [19.2, 4.0], [19.3, 7.0], [19.4, 15.0], [19.5, 16.0], [19.6, 17.0], [19.7, 18.0], [19.8, 19.0], [19.9, 19.0], [20.0, 20.0], [20.1, 20.0], [20.2, 21.0], [20.3, 21.0], [20.4, 21.0], [20.5, 22.0], [20.6, 22.0], [20.7, 22.0], [20.8, 23.0], [20.9, 23.0], [21.0, 23.0], [21.1, 24.0], [21.2, 24.0], [21.3, 24.0], [21.4, 25.0], [21.5, 25.0], [21.6, 25.0], [21.7, 26.0], [21.8, 26.0], [21.9, 26.0], [22.0, 27.0], [22.1, 27.0], [22.2, 27.0], [22.3, 28.0], [22.4, 28.0], [22.5, 28.0], [22.6, 29.0], [22.7, 29.0], [22.8, 29.0], [22.9, 30.0], [23.0, 30.0], [23.1, 31.0], [23.2, 31.0], [23.3, 32.0], [23.4, 32.0], [23.5, 33.0], [23.6, 34.0], [23.7, 35.0], [23.8, 36.0], [23.9, 37.0], [24.0, 37.0], [24.1, 39.0], [24.2, 40.0], [24.3, 41.0], [24.4, 44.0], [24.5, 47.0], [24.6, 51.0], [24.7, 55.0], [24.8, 60.0], [24.9, 66.0], [25.0, 79.0], [25.1, 89.0], [25.2, 107.0], [25.3, 132.0], [25.4, 152.0], [25.5, 166.0], [25.6, 182.0], [25.7, 198.0], [25.8, 216.0], [25.9, 230.0], [26.0, 241.0], [26.1, 258.0], [26.2, 271.0], [26.3, 281.0], [26.4, 292.0], [26.5, 304.0], [26.6, 316.0], [26.7, 329.0], [26.8, 337.0], [26.9, 347.0], [27.0, 359.0], [27.1, 368.0], [27.2, 377.0], [27.3, 386.0], [27.4, 393.0], [27.5, 402.0], [27.6, 414.0], [27.7, 421.0], [27.8, 428.0], [27.9, 432.0], [28.0, 436.0], [28.1, 441.0], [28.2, 446.0], [28.3, 452.0], [28.4, 460.0], [28.5, 467.0], [28.6, 476.0], [28.7, 483.0], [28.8, 489.0], [28.9, 496.0], [29.0, 504.0], [29.1, 511.0], [29.2, 516.0], [29.3, 529.0], [29.4, 536.0], [29.5, 542.0], [29.6, 549.0], [29.7, 556.0], [29.8, 562.0], [29.9, 569.0], [30.0, 574.0], [30.1, 579.0], [30.2, 584.0], [30.3, 591.0], [30.4, 598.0], [30.5, 605.0], [30.6, 613.0], [30.7, 618.0], [30.8, 624.0], [30.9, 631.0], [31.0, 635.0], [31.1, 641.0], [31.2, 647.0], [31.3, 652.0], [31.4, 658.0], [31.5, 665.0], [31.6, 673.0], [31.7, 677.0], [31.8, 682.0], [31.9, 689.0], [32.0, 692.0], [32.1, 697.0], [32.2, 701.0], [32.3, 707.0], [32.4, 714.0], [32.5, 720.0], [32.6, 725.0], [32.7, 732.0], [32.8, 738.0], [32.9, 743.0], [33.0, 748.0], [33.1, 753.0], [33.2, 756.0], [33.3, 761.0], [33.4, 767.0], [33.5, 774.0], [33.6, 778.0], [33.7, 786.0], [33.8, 791.0], [33.9, 796.0], [34.0, 803.0], [34.1, 809.0], [34.2, 815.0], [34.3, 818.0], [34.4, 824.0], [34.5, 830.0], [34.6, 833.0], [34.7, 838.0], [34.8, 842.0], [34.9, 846.0], [35.0, 850.0], [35.1, 854.0], [35.2, 859.0], [35.3, 864.0], [35.4, 869.0], [35.5, 875.0], [35.6, 880.0], [35.7, 884.0], [35.8, 887.0], [35.9, 889.0], [36.0, 894.0], [36.1, 897.0], [36.2, 902.0], [36.3, 908.0], [36.4, 914.0], [36.5, 917.0], [36.6, 922.0], [36.7, 926.0], [36.8, 931.0], [36.9, 936.0], [37.0, 940.0], [37.1, 944.0], [37.2, 947.0], [37.3, 954.0], [37.4, 959.0], [37.5, 964.0], [37.6, 969.0], [37.7, 973.0], [37.8, 976.0], [37.9, 979.0], [38.0, 981.0], [38.1, 986.0], [38.2, 988.0], [38.3, 994.0], [38.4, 1000.0], [38.5, 1006.0], [38.6, 1009.0], [38.7, 1017.0], [38.8, 1020.0], [38.9, 1025.0], [39.0, 1029.0], [39.1, 1034.0], [39.2, 1038.0], [39.3, 1044.0], [39.4, 1049.0], [39.5, 1053.0], [39.6, 1058.0], [39.7, 1061.0], [39.8, 1065.0], [39.9, 1068.0], [40.0, 1072.0], [40.1, 1078.0], [40.2, 1082.0], [40.3, 1086.0], [40.4, 1090.0], [40.5, 1094.0], [40.6, 1097.0], [40.7, 1100.0], [40.8, 1104.0], [40.9, 1108.0], [41.0, 1114.0], [41.1, 1118.0], [41.2, 1122.0], [41.3, 1125.0], [41.4, 1128.0], [41.5, 1134.0], [41.6, 1140.0], [41.7, 1145.0], [41.8, 1149.0], [41.9, 1154.0], [42.0, 1159.0], [42.1, 1163.0], [42.2, 1166.0], [42.3, 1169.0], [42.4, 1172.0], [42.5, 1174.0], [42.6, 1177.0], [42.7, 1181.0], [42.8, 1185.0], [42.9, 1188.0], [43.0, 1192.0], [43.1, 1195.0], [43.2, 1199.0], [43.3, 1201.0], [43.4, 1205.0], [43.5, 1208.0], [43.6, 1211.0], [43.7, 1217.0], [43.8, 1220.0], [43.9, 1222.0], [44.0, 1226.0], [44.1, 1230.0], [44.2, 1232.0], [44.3, 1236.0], [44.4, 1240.0], [44.5, 1244.0], [44.6, 1248.0], [44.7, 1253.0], [44.8, 1256.0], [44.9, 1263.0], [45.0, 1266.0], [45.1, 1271.0], [45.2, 1274.0], [45.3, 1279.0], [45.4, 1284.0], [45.5, 1288.0], [45.6, 1292.0], [45.7, 1296.0], [45.8, 1300.0], [45.9, 1305.0], [46.0, 1310.0], [46.1, 1314.0], [46.2, 1317.0], [46.3, 1321.0], [46.4, 1324.0], [46.5, 1328.0], [46.6, 1333.0], [46.7, 1337.0], [46.8, 1340.0], [46.9, 1343.0], [47.0, 1347.0], [47.1, 1349.0], [47.2, 1353.0], [47.3, 1357.0], [47.4, 1362.0], [47.5, 1368.0], [47.6, 1371.0], [47.7, 1374.0], [47.8, 1378.0], [47.9, 1382.0], [48.0, 1388.0], [48.1, 1391.0], [48.2, 1393.0], [48.3, 1397.0], [48.4, 1402.0], [48.5, 1405.0], [48.6, 1410.0], [48.7, 1415.0], [48.8, 1419.0], [48.9, 1424.0], [49.0, 1427.0], [49.1, 1432.0], [49.2, 1435.0], [49.3, 1439.0], [49.4, 1444.0], [49.5, 1446.0], [49.6, 1449.0], [49.7, 1453.0], [49.8, 1457.0], [49.9, 1462.0], [50.0, 1465.0], [50.1, 1469.0], [50.2, 1472.0], [50.3, 1475.0], [50.4, 1478.0], [50.5, 1481.0], [50.6, 1484.0], [50.7, 1487.0], [50.8, 1490.0], [50.9, 1494.0], [51.0, 1498.0], [51.1, 1501.0], [51.2, 1504.0], [51.3, 1508.0], [51.4, 1513.0], [51.5, 1516.0], [51.6, 1519.0], [51.7, 1523.0], [51.8, 1527.0], [51.9, 1530.0], [52.0, 1533.0], [52.1, 1537.0], [52.2, 1540.0], [52.3, 1543.0], [52.4, 1546.0], [52.5, 1551.0], [52.6, 1554.0], [52.7, 1559.0], [52.8, 1561.0], [52.9, 1564.0], [53.0, 1567.0], [53.1, 1570.0], [53.2, 1575.0], [53.3, 1579.0], [53.4, 1582.0], [53.5, 1585.0], [53.6, 1589.0], [53.7, 1593.0], [53.8, 1597.0], [53.9, 1600.0], [54.0, 1603.0], [54.1, 1606.0], [54.2, 1609.0], [54.3, 1613.0], [54.4, 1615.0], [54.5, 1620.0], [54.6, 1623.0], [54.7, 1627.0], [54.8, 1631.0], [54.9, 1634.0], [55.0, 1636.0], [55.1, 1639.0], [55.2, 1642.0], [55.3, 1645.0], [55.4, 1648.0], [55.5, 1652.0], [55.6, 1655.0], [55.7, 1658.0], [55.8, 1663.0], [55.9, 1666.0], [56.0, 1670.0], [56.1, 1675.0], [56.2, 1679.0], [56.3, 1683.0], [56.4, 1688.0], [56.5, 1694.0], [56.6, 1699.0], [56.7, 1702.0], [56.8, 1707.0], [56.9, 1710.0], [57.0, 1714.0], [57.1, 1718.0], [57.2, 1722.0], [57.3, 1726.0], [57.4, 1729.0], [57.5, 1734.0], [57.6, 1737.0], [57.7, 1741.0], [57.8, 1745.0], [57.9, 1748.0], [58.0, 1752.0], [58.1, 1754.0], [58.2, 1760.0], [58.3, 1764.0], [58.4, 1766.0], [58.5, 1769.0], [58.6, 1772.0], [58.7, 1776.0], [58.8, 1779.0], [58.9, 1782.0], [59.0, 1786.0], [59.1, 1789.0], [59.2, 1793.0], [59.3, 1796.0], [59.4, 1799.0], [59.5, 1802.0], [59.6, 1809.0], [59.7, 1813.0], [59.8, 1816.0], [59.9, 1819.0], [60.0, 1824.0], [60.1, 1828.0], [60.2, 1831.0], [60.3, 1835.0], [60.4, 1839.0], [60.5, 1844.0], [60.6, 1848.0], [60.7, 1852.0], [60.8, 1856.0], [60.9, 1862.0], [61.0, 1866.0], [61.1, 1871.0], [61.2, 1875.0], [61.3, 1878.0], [61.4, 1883.0], [61.5, 1885.0], [61.6, 1888.0], [61.7, 1891.0], [61.8, 1895.0], [61.9, 1900.0], [62.0, 1903.0], [62.1, 1907.0], [62.2, 1910.0], [62.3, 1913.0], [62.4, 1917.0], [62.5, 1922.0], [62.6, 1925.0], [62.7, 1930.0], [62.8, 1934.0], [62.9, 1939.0], [63.0, 1944.0], [63.1, 1948.0], [63.2, 1953.0], [63.3, 1958.0], [63.4, 1961.0], [63.5, 1965.0], [63.6, 1969.0], [63.7, 1975.0], [63.8, 1982.0], [63.9, 1986.0], [64.0, 1992.0], [64.1, 1995.0], [64.2, 1998.0], [64.3, 2002.0], [64.4, 2006.0], [64.5, 2013.0], [64.6, 2016.0], [64.7, 2022.0], [64.8, 2026.0], [64.9, 2031.0], [65.0, 2035.0], [65.1, 2041.0], [65.2, 2043.0], [65.3, 2047.0], [65.4, 2050.0], [65.5, 2055.0], [65.6, 2060.0], [65.7, 2064.0], [65.8, 2068.0], [65.9, 2071.0], [66.0, 2074.0], [66.1, 2079.0], [66.2, 2081.0], [66.3, 2085.0], [66.4, 2089.0], [66.5, 2095.0], [66.6, 2101.0], [66.7, 2104.0], [66.8, 2109.0], [66.9, 2115.0], [67.0, 2118.0], [67.1, 2123.0], [67.2, 2127.0], [67.3, 2131.0], [67.4, 2136.0], [67.5, 2141.0], [67.6, 2146.0], [67.7, 2148.0], [67.8, 2151.0], [67.9, 2153.0], [68.0, 2157.0], [68.1, 2161.0], [68.2, 2168.0], [68.3, 2173.0], [68.4, 2177.0], [68.5, 2180.0], [68.6, 2184.0], [68.7, 2189.0], [68.8, 2192.0], [68.9, 2196.0], [69.0, 2200.0], [69.1, 2203.0], [69.2, 2207.0], [69.3, 2212.0], [69.4, 2217.0], [69.5, 2222.0], [69.6, 2225.0], [69.7, 2229.0], [69.8, 2235.0], [69.9, 2237.0], [70.0, 2241.0], [70.1, 2248.0], [70.2, 2254.0], [70.3, 2260.0], [70.4, 2263.0], [70.5, 2269.0], [70.6, 2274.0], [70.7, 2280.0], [70.8, 2285.0], [70.9, 2290.0], [71.0, 2292.0], [71.1, 2295.0], [71.2, 2299.0], [71.3, 2304.0], [71.4, 2313.0], [71.5, 2318.0], [71.6, 2323.0], [71.7, 2327.0], [71.8, 2332.0], [71.9, 2336.0], [72.0, 2339.0], [72.1, 2343.0], [72.2, 2349.0], [72.3, 2354.0], [72.4, 2358.0], [72.5, 2363.0], [72.6, 2369.0], [72.7, 2373.0], [72.8, 2378.0], [72.9, 2386.0], [73.0, 2390.0], [73.1, 2395.0], [73.2, 2399.0], [73.3, 2405.0], [73.4, 2410.0], [73.5, 2416.0], [73.6, 2419.0], [73.7, 2425.0], [73.8, 2430.0], [73.9, 2434.0], [74.0, 2440.0], [74.1, 2445.0], [74.2, 2453.0], [74.3, 2459.0], [74.4, 2466.0], [74.5, 2469.0], [74.6, 2474.0], [74.7, 2479.0], [74.8, 2486.0], [74.9, 2493.0], [75.0, 2498.0], [75.1, 2505.0], [75.2, 2512.0], [75.3, 2516.0], [75.4, 2521.0], [75.5, 2525.0], [75.6, 2528.0], [75.7, 2532.0], [75.8, 2536.0], [75.9, 2543.0], [76.0, 2548.0], [76.1, 2554.0], [76.2, 2558.0], [76.3, 2565.0], [76.4, 2570.0], [76.5, 2578.0], [76.6, 2584.0], [76.7, 2589.0], [76.8, 2595.0], [76.9, 2600.0], [77.0, 2605.0], [77.1, 2610.0], [77.2, 2615.0], [77.3, 2621.0], [77.4, 2629.0], [77.5, 2635.0], [77.6, 2640.0], [77.7, 2646.0], [77.8, 2650.0], [77.9, 2655.0], [78.0, 2660.0], [78.1, 2664.0], [78.2, 2672.0], [78.3, 2678.0], [78.4, 2684.0], [78.5, 2688.0], [78.6, 2694.0], [78.7, 2700.0], [78.8, 2705.0], [78.9, 2709.0], [79.0, 2713.0], [79.1, 2719.0], [79.2, 2725.0], [79.3, 2731.0], [79.4, 2736.0], [79.5, 2741.0], [79.6, 2744.0], [79.7, 2749.0], [79.8, 2753.0], [79.9, 2758.0], [80.0, 2763.0], [80.1, 2769.0], [80.2, 2774.0], [80.3, 2781.0], [80.4, 2789.0], [80.5, 2797.0], [80.6, 2801.0], [80.7, 2809.0], [80.8, 2817.0], [80.9, 2824.0], [81.0, 2828.0], [81.1, 2832.0], [81.2, 2840.0], [81.3, 2846.0], [81.4, 2852.0], [81.5, 2858.0], [81.6, 2864.0], [81.7, 2868.0], [81.8, 2878.0], [81.9, 2884.0], [82.0, 2892.0], [82.1, 2899.0], [82.2, 2905.0], [82.3, 2912.0], [82.4, 2919.0], [82.5, 2927.0], [82.6, 2935.0], [82.7, 2941.0], [82.8, 2949.0], [82.9, 2954.0], [83.0, 2963.0], [83.1, 2970.0], [83.2, 2977.0], [83.3, 2985.0], [83.4, 2994.0], [83.5, 3005.0], [83.6, 3011.0], [83.7, 3020.0], [83.8, 3030.0], [83.9, 3038.0], [84.0, 3051.0], [84.1, 3060.0], [84.2, 3065.0], [84.3, 3076.0], [84.4, 3083.0], [84.5, 3091.0], [84.6, 3100.0], [84.7, 3108.0], [84.8, 3117.0], [84.9, 3130.0], [85.0, 3137.0], [85.1, 3146.0], [85.2, 3157.0], [85.3, 3163.0], [85.4, 3174.0], [85.5, 3184.0], [85.6, 3194.0], [85.7, 3204.0], [85.8, 3211.0], [85.9, 3222.0], [86.0, 3235.0], [86.1, 3246.0], [86.2, 3257.0], [86.3, 3267.0], [86.4, 3278.0], [86.5, 3288.0], [86.6, 3299.0], [86.7, 3311.0], [86.8, 3324.0], [86.9, 3337.0], [87.0, 3347.0], [87.1, 3358.0], [87.2, 3367.0], [87.3, 3383.0], [87.4, 3392.0], [87.5, 3402.0], [87.6, 3414.0], [87.7, 3426.0], [87.8, 3437.0], [87.9, 3449.0], [88.0, 3457.0], [88.1, 3462.0], [88.2, 3478.0], [88.3, 3489.0], [88.4, 3497.0], [88.5, 3508.0], [88.6, 3528.0], [88.7, 3537.0], [88.8, 3549.0], [88.9, 3564.0], [89.0, 3572.0], [89.1, 3583.0], [89.2, 3595.0], [89.3, 3608.0], [89.4, 3618.0], [89.5, 3628.0], [89.6, 3636.0], [89.7, 3654.0], [89.8, 3665.0], [89.9, 3676.0], [90.0, 3690.0], [90.1, 3704.0], [90.2, 3724.0], [90.3, 3739.0], [90.4, 3751.0], [90.5, 3768.0], [90.6, 3776.0], [90.7, 3789.0], [90.8, 3802.0], [90.9, 3811.0], [91.0, 3821.0], [91.1, 3833.0], [91.2, 3845.0], [91.3, 3863.0], [91.4, 3879.0], [91.5, 3889.0], [91.6, 3910.0], [91.7, 3919.0], [91.8, 3936.0], [91.9, 3949.0], [92.0, 3959.0], [92.1, 3973.0], [92.2, 3989.0], [92.3, 4004.0], [92.4, 4015.0], [92.5, 4030.0], [92.6, 4045.0], [92.7, 4060.0], [92.8, 4069.0], [92.9, 4081.0], [93.0, 4098.0], [93.1, 4107.0], [93.2, 4125.0], [93.3, 4139.0], [93.4, 4155.0], [93.5, 4169.0], [93.6, 4190.0], [93.7, 4208.0], [93.8, 4218.0], [93.9, 4237.0], [94.0, 4248.0], [94.1, 4259.0], [94.2, 4272.0], [94.3, 4293.0], [94.4, 4306.0], [94.5, 4321.0], [94.6, 4343.0], [94.7, 4355.0], [94.8, 4369.0], [94.9, 4390.0], [95.0, 4407.0], [95.1, 4427.0], [95.2, 4452.0], [95.3, 4470.0], [95.4, 4489.0], [95.5, 4507.0], [95.6, 4539.0], [95.7, 4564.0], [95.8, 4583.0], [95.9, 4597.0], [96.0, 4625.0], [96.1, 4652.0], [96.2, 4679.0], [96.3, 4709.0], [96.4, 4737.0], [96.5, 4757.0], [96.6, 4781.0], [96.7, 4813.0], [96.8, 4843.0], [96.9, 4888.0], [97.0, 4914.0], [97.1, 4967.0], [97.2, 4999.0], [97.3, 5038.0], [97.4, 5081.0], [97.5, 5102.0], [97.6, 5133.0], [97.7, 5178.0], [97.8, 5218.0], [97.9, 5271.0], [98.0, 5303.0], [98.1, 5354.0], [98.2, 5410.0], [98.3, 5453.0], [98.4, 5516.0], [98.5, 5568.0], [98.6, 5627.0], [98.7, 5718.0], [98.8, 5794.0], [98.9, 5864.0], [99.0, 5940.0], [99.1, 6027.0], [99.2, 6120.0], [99.3, 6236.0], [99.4, 6410.0], [99.5, 6570.0], [99.6, 6884.0], [99.7, 7148.0], [99.8, 7625.0], [99.9, 8141.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 143.0], [0.1, 143.0], [0.2, 143.0], [0.3, 143.0], [0.4, 143.0], [0.5, 143.0], [0.6, 143.0], [0.7, 144.0], [0.8, 144.0], [0.9, 144.0], [1.0, 144.0], [1.1, 144.0], [1.2, 144.0], [1.3, 144.0], [1.4, 144.0], [1.5, 144.0], [1.6, 144.0], [1.7, 144.0], [1.8, 144.0], [1.9, 144.0], [2.0, 144.0], [2.1, 144.0], [2.2, 144.0], [2.3, 144.0], [2.4, 144.0], [2.5, 144.0], [2.6, 144.0], [2.7, 145.0], [2.8, 145.0], [2.9, 145.0], [3.0, 145.0], [3.1, 145.0], [3.2, 145.0], [3.3, 145.0], [3.4, 145.0], [3.5, 145.0], [3.6, 145.0], [3.7, 145.0], [3.8, 145.0], [3.9, 145.0], [4.0, 145.0], [4.1, 145.0], [4.2, 145.0], [4.3, 145.0], [4.4, 145.0], [4.5, 145.0], [4.6, 145.0], [4.7, 145.0], [4.8, 145.0], [4.9, 145.0], [5.0, 145.0], [5.1, 145.0], [5.2, 145.0], [5.3, 145.0], [5.4, 145.0], [5.5, 145.0], [5.6, 145.0], [5.7, 145.0], [5.8, 145.0], [5.9, 145.0], [6.0, 145.0], [6.1, 145.0], [6.2, 145.0], [6.3, 145.0], [6.4, 145.0], [6.5, 145.0], [6.6, 145.0], [6.7, 146.0], [6.8, 146.0], [6.9, 146.0], [7.0, 146.0], [7.1, 146.0], [7.2, 146.0], [7.3, 146.0], [7.4, 146.0], [7.5, 146.0], [7.6, 146.0], [7.7, 146.0], [7.8, 146.0], [7.9, 146.0], [8.0, 146.0], [8.1, 146.0], [8.2, 146.0], [8.3, 146.0], [8.4, 146.0], [8.5, 146.0], [8.6, 146.0], [8.7, 146.0], [8.8, 146.0], [8.9, 146.0], [9.0, 146.0], [9.1, 146.0], [9.2, 146.0], [9.3, 146.0], [9.4, 146.0], [9.5, 146.0], [9.6, 146.0], [9.7, 146.0], [9.8, 146.0], [9.9, 146.0], [10.0, 146.0], [10.1, 146.0], [10.2, 146.0], [10.3, 146.0], [10.4, 146.0], [10.5, 146.0], [10.6, 146.0], [10.7, 146.0], [10.8, 146.0], [10.9, 146.0], [11.0, 146.0], [11.1, 146.0], [11.2, 146.0], [11.3, 146.0], [11.4, 147.0], [11.5, 147.0], [11.6, 147.0], [11.7, 147.0], [11.8, 147.0], [11.9, 147.0], [12.0, 147.0], [12.1, 147.0], [12.2, 147.0], [12.3, 147.0], [12.4, 147.0], [12.5, 147.0], [12.6, 147.0], [12.7, 147.0], [12.8, 147.0], [12.9, 147.0], [13.0, 147.0], [13.1, 147.0], [13.2, 147.0], [13.3, 147.0], [13.4, 147.0], [13.5, 147.0], [13.6, 147.0], [13.7, 147.0], [13.8, 147.0], [13.9, 147.0], [14.0, 147.0], [14.1, 147.0], [14.2, 147.0], [14.3, 147.0], [14.4, 147.0], [14.5, 147.0], [14.6, 147.0], [14.7, 148.0], [14.8, 148.0], [14.9, 148.0], [15.0, 148.0], [15.1, 148.0], [15.2, 148.0], [15.3, 148.0], [15.4, 148.0], [15.5, 148.0], [15.6, 148.0], [15.7, 148.0], [15.8, 148.0], [15.9, 148.0], [16.0, 148.0], [16.1, 148.0], [16.2, 148.0], [16.3, 148.0], [16.4, 148.0], [16.5, 148.0], [16.6, 148.0], [16.7, 148.0], [16.8, 148.0], [16.9, 148.0], [17.0, 148.0], [17.1, 148.0], [17.2, 148.0], [17.3, 148.0], [17.4, 148.0], [17.5, 148.0], [17.6, 148.0], [17.7, 148.0], [17.8, 148.0], [17.9, 148.0], [18.0, 148.0], [18.1, 148.0], [18.2, 148.0], [18.3, 148.0], [18.4, 148.0], [18.5, 148.0], [18.6, 148.0], [18.7, 148.0], [18.8, 148.0], [18.9, 148.0], [19.0, 148.0], [19.1, 148.0], [19.2, 148.0], [19.3, 148.0], [19.4, 148.0], [19.5, 148.0], [19.6, 148.0], [19.7, 148.0], [19.8, 148.0], [19.9, 148.0], [20.0, 148.0], [20.1, 148.0], [20.2, 148.0], [20.3, 148.0], [20.4, 148.0], [20.5, 148.0], [20.6, 148.0], [20.7, 148.0], [20.8, 148.0], [20.9, 148.0], [21.0, 148.0], [21.1, 148.0], [21.2, 148.0], [21.3, 148.0], [21.4, 148.0], [21.5, 148.0], [21.6, 148.0], [21.7, 148.0], [21.8, 148.0], [21.9, 148.0], [22.0, 148.0], [22.1, 148.0], [22.2, 148.0], [22.3, 148.0], [22.4, 148.0], [22.5, 148.0], [22.6, 148.0], [22.7, 148.0], [22.8, 148.0], [22.9, 148.0], [23.0, 148.0], [23.1, 148.0], [23.2, 148.0], [23.3, 148.0], [23.4, 149.0], [23.5, 149.0], [23.6, 149.0], [23.7, 149.0], [23.8, 149.0], [23.9, 149.0], [24.0, 149.0], [24.1, 149.0], [24.2, 149.0], [24.3, 149.0], [24.4, 149.0], [24.5, 149.0], [24.6, 149.0], [24.7, 149.0], [24.8, 149.0], [24.9, 149.0], [25.0, 149.0], [25.1, 149.0], [25.2, 149.0], [25.3, 149.0], [25.4, 149.0], [25.5, 149.0], [25.6, 149.0], [25.7, 149.0], [25.8, 149.0], [25.9, 149.0], [26.0, 149.0], [26.1, 149.0], [26.2, 149.0], [26.3, 149.0], [26.4, 149.0], [26.5, 149.0], [26.6, 149.0], [26.7, 149.0], [26.8, 149.0], [26.9, 149.0], [27.0, 149.0], [27.1, 149.0], [27.2, 149.0], [27.3, 149.0], [27.4, 149.0], [27.5, 149.0], [27.6, 149.0], [27.7, 149.0], [27.8, 149.0], [27.9, 149.0], [28.0, 149.0], [28.1, 149.0], [28.2, 149.0], [28.3, 149.0], [28.4, 149.0], [28.5, 149.0], [28.6, 149.0], [28.7, 149.0], [28.8, 149.0], [28.9, 149.0], [29.0, 149.0], [29.1, 149.0], [29.2, 149.0], [29.3, 149.0], [29.4, 149.0], [29.5, 149.0], [29.6, 149.0], [29.7, 149.0], [29.8, 149.0], [29.9, 149.0], [30.0, 149.0], [30.1, 149.0], [30.2, 149.0], [30.3, 149.0], [30.4, 149.0], [30.5, 149.0], [30.6, 149.0], [30.7, 149.0], [30.8, 149.0], [30.9, 149.0], [31.0, 149.0], [31.1, 149.0], [31.2, 149.0], [31.3, 149.0], [31.4, 149.0], [31.5, 149.0], [31.6, 149.0], [31.7, 149.0], [31.8, 149.0], [31.9, 149.0], [32.0, 150.0], [32.1, 150.0], [32.2, 150.0], [32.3, 150.0], [32.4, 150.0], [32.5, 150.0], [32.6, 150.0], [32.7, 150.0], [32.8, 150.0], [32.9, 150.0], [33.0, 150.0], [33.1, 150.0], [33.2, 150.0], [33.3, 150.0], [33.4, 150.0], [33.5, 150.0], [33.6, 150.0], [33.7, 150.0], [33.8, 150.0], [33.9, 150.0], [34.0, 150.0], [34.1, 150.0], [34.2, 150.0], [34.3, 150.0], [34.4, 150.0], [34.5, 150.0], [34.6, 150.0], [34.7, 150.0], [34.8, 150.0], [34.9, 150.0], [35.0, 150.0], [35.1, 150.0], [35.2, 150.0], [35.3, 150.0], [35.4, 150.0], [35.5, 150.0], [35.6, 150.0], [35.7, 150.0], [35.8, 150.0], [35.9, 150.0], [36.0, 150.0], [36.1, 150.0], [36.2, 150.0], [36.3, 150.0], [36.4, 150.0], [36.5, 150.0], [36.6, 150.0], [36.7, 150.0], [36.8, 150.0], [36.9, 150.0], [37.0, 150.0], [37.1, 150.0], [37.2, 150.0], [37.3, 150.0], [37.4, 150.0], [37.5, 150.0], [37.6, 150.0], [37.7, 150.0], [37.8, 150.0], [37.9, 150.0], [38.0, 150.0], [38.1, 150.0], [38.2, 150.0], [38.3, 150.0], [38.4, 150.0], [38.5, 150.0], [38.6, 150.0], [38.7, 150.0], [38.8, 150.0], [38.9, 150.0], [39.0, 150.0], [39.1, 150.0], [39.2, 150.0], [39.3, 150.0], [39.4, 150.0], [39.5, 150.0], [39.6, 150.0], [39.7, 150.0], [39.8, 150.0], [39.9, 150.0], [40.0, 150.0], [40.1, 150.0], [40.2, 150.0], [40.3, 150.0], [40.4, 150.0], [40.5, 150.0], [40.6, 150.0], [40.7, 150.0], [40.8, 150.0], [40.9, 150.0], [41.0, 150.0], [41.1, 150.0], [41.2, 150.0], [41.3, 150.0], [41.4, 150.0], [41.5, 150.0], [41.6, 150.0], [41.7, 150.0], [41.8, 150.0], [41.9, 150.0], [42.0, 150.0], [42.1, 150.0], [42.2, 150.0], [42.3, 150.0], [42.4, 150.0], [42.5, 150.0], [42.6, 150.0], [42.7, 150.0], [42.8, 150.0], [42.9, 150.0], [43.0, 150.0], [43.1, 150.0], [43.2, 150.0], [43.3, 150.0], [43.4, 151.0], [43.5, 151.0], [43.6, 151.0], [43.7, 151.0], [43.8, 151.0], [43.9, 151.0], [44.0, 151.0], [44.1, 151.0], [44.2, 151.0], [44.3, 151.0], [44.4, 151.0], [44.5, 151.0], [44.6, 151.0], [44.7, 151.0], [44.8, 151.0], [44.9, 151.0], [45.0, 151.0], [45.1, 151.0], [45.2, 151.0], [45.3, 151.0], [45.4, 151.0], [45.5, 151.0], [45.6, 151.0], [45.7, 151.0], [45.8, 151.0], [45.9, 151.0], [46.0, 151.0], [46.1, 151.0], [46.2, 151.0], [46.3, 151.0], [46.4, 151.0], [46.5, 151.0], [46.6, 151.0], [46.7, 151.0], [46.8, 151.0], [46.9, 151.0], [47.0, 151.0], [47.1, 151.0], [47.2, 151.0], [47.3, 151.0], [47.4, 151.0], [47.5, 151.0], [47.6, 151.0], [47.7, 151.0], [47.8, 151.0], [47.9, 151.0], [48.0, 151.0], [48.1, 151.0], [48.2, 151.0], [48.3, 151.0], [48.4, 151.0], [48.5, 151.0], [48.6, 151.0], [48.7, 151.0], [48.8, 151.0], [48.9, 151.0], [49.0, 151.0], [49.1, 151.0], [49.2, 151.0], [49.3, 151.0], [49.4, 151.0], [49.5, 151.0], [49.6, 151.0], [49.7, 151.0], [49.8, 151.0], [49.9, 151.0], [50.0, 152.0], [50.1, 152.0], [50.2, 152.0], [50.3, 152.0], [50.4, 152.0], [50.5, 152.0], [50.6, 152.0], [50.7, 152.0], [50.8, 152.0], [50.9, 152.0], [51.0, 152.0], [51.1, 152.0], [51.2, 152.0], [51.3, 152.0], [51.4, 152.0], [51.5, 152.0], [51.6, 152.0], [51.7, 152.0], [51.8, 152.0], [51.9, 152.0], [52.0, 152.0], [52.1, 152.0], [52.2, 152.0], [52.3, 152.0], [52.4, 152.0], [52.5, 152.0], [52.6, 152.0], [52.7, 152.0], [52.8, 152.0], [52.9, 152.0], [53.0, 152.0], [53.1, 152.0], [53.2, 152.0], [53.3, 152.0], [53.4, 152.0], [53.5, 152.0], [53.6, 152.0], [53.7, 152.0], [53.8, 152.0], [53.9, 152.0], [54.0, 152.0], [54.1, 152.0], [54.2, 152.0], [54.3, 152.0], [54.4, 152.0], [54.5, 152.0], [54.6, 152.0], [54.7, 152.0], [54.8, 152.0], [54.9, 152.0], [55.0, 152.0], [55.1, 152.0], [55.2, 152.0], [55.3, 152.0], [55.4, 152.0], [55.5, 152.0], [55.6, 152.0], [55.7, 152.0], [55.8, 152.0], [55.9, 152.0], [56.0, 152.0], [56.1, 152.0], [56.2, 152.0], [56.3, 152.0], [56.4, 152.0], [56.5, 152.0], [56.6, 152.0], [56.7, 153.0], [56.8, 153.0], [56.9, 153.0], [57.0, 153.0], [57.1, 153.0], [57.2, 153.0], [57.3, 153.0], [57.4, 153.0], [57.5, 153.0], [57.6, 153.0], [57.7, 153.0], [57.8, 153.0], [57.9, 153.0], [58.0, 153.0], [58.1, 153.0], [58.2, 153.0], [58.3, 153.0], [58.4, 153.0], [58.5, 153.0], [58.6, 153.0], [58.7, 153.0], [58.8, 153.0], [58.9, 153.0], [59.0, 153.0], [59.1, 153.0], [59.2, 153.0], [59.3, 153.0], [59.4, 153.0], [59.5, 153.0], [59.6, 153.0], [59.7, 153.0], [59.8, 153.0], [59.9, 153.0], [60.0, 153.0], [60.1, 153.0], [60.2, 153.0], [60.3, 153.0], [60.4, 153.0], [60.5, 153.0], [60.6, 153.0], [60.7, 153.0], [60.8, 153.0], [60.9, 153.0], [61.0, 153.0], [61.1, 153.0], [61.2, 153.0], [61.3, 153.0], [61.4, 153.0], [61.5, 153.0], [61.6, 153.0], [61.7, 153.0], [61.8, 153.0], [61.9, 153.0], [62.0, 153.0], [62.1, 153.0], [62.2, 153.0], [62.3, 153.0], [62.4, 153.0], [62.5, 153.0], [62.6, 153.0], [62.7, 153.0], [62.8, 153.0], [62.9, 153.0], [63.0, 153.0], [63.1, 153.0], [63.2, 153.0], [63.3, 153.0], [63.4, 154.0], [63.5, 154.0], [63.6, 154.0], [63.7, 154.0], [63.8, 154.0], [63.9, 154.0], [64.0, 154.0], [64.1, 154.0], [64.2, 154.0], [64.3, 154.0], [64.4, 154.0], [64.5, 154.0], [64.6, 154.0], [64.7, 154.0], [64.8, 154.0], [64.9, 154.0], [65.0, 154.0], [65.1, 154.0], [65.2, 154.0], [65.3, 154.0], [65.4, 154.0], [65.5, 154.0], [65.6, 154.0], [65.7, 154.0], [65.8, 154.0], [65.9, 154.0], [66.0, 154.0], [66.1, 154.0], [66.2, 154.0], [66.3, 154.0], [66.4, 154.0], [66.5, 154.0], [66.6, 154.0], [66.7, 154.0], [66.8, 154.0], [66.9, 154.0], [67.0, 154.0], [67.1, 154.0], [67.2, 154.0], [67.3, 154.0], [67.4, 154.0], [67.5, 154.0], [67.6, 154.0], [67.7, 154.0], [67.8, 154.0], [67.9, 154.0], [68.0, 155.0], [68.1, 155.0], [68.2, 155.0], [68.3, 155.0], [68.4, 155.0], [68.5, 155.0], [68.6, 155.0], [68.7, 155.0], [68.8, 155.0], [68.9, 155.0], [69.0, 155.0], [69.1, 155.0], [69.2, 155.0], [69.3, 155.0], [69.4, 155.0], [69.5, 155.0], [69.6, 155.0], [69.7, 155.0], [69.8, 155.0], [69.9, 155.0], [70.0, 155.0], [70.1, 155.0], [70.2, 155.0], [70.3, 155.0], [70.4, 155.0], [70.5, 155.0], [70.6, 155.0], [70.7, 155.0], [70.8, 155.0], [70.9, 155.0], [71.0, 155.0], [71.1, 155.0], [71.2, 155.0], [71.3, 155.0], [71.4, 155.0], [71.5, 155.0], [71.6, 155.0], [71.7, 155.0], [71.8, 155.0], [71.9, 155.0], [72.0, 155.0], [72.1, 155.0], [72.2, 155.0], [72.3, 155.0], [72.4, 155.0], [72.5, 155.0], [72.6, 155.0], [72.7, 155.0], [72.8, 155.0], [72.9, 155.0], [73.0, 155.0], [73.1, 155.0], [73.2, 155.0], [73.3, 155.0], [73.4, 155.0], [73.5, 155.0], [73.6, 155.0], [73.7, 155.0], [73.8, 155.0], [73.9, 155.0], [74.0, 156.0], [74.1, 156.0], [74.2, 156.0], [74.3, 156.0], [74.4, 156.0], [74.5, 156.0], [74.6, 156.0], [74.7, 156.0], [74.8, 156.0], [74.9, 156.0], [75.0, 156.0], [75.1, 156.0], [75.2, 156.0], [75.3, 156.0], [75.4, 156.0], [75.5, 156.0], [75.6, 156.0], [75.7, 156.0], [75.8, 156.0], [75.9, 156.0], [76.0, 156.0], [76.1, 156.0], [76.2, 156.0], [76.3, 156.0], [76.4, 156.0], [76.5, 156.0], [76.6, 156.0], [76.7, 157.0], [76.8, 157.0], [76.9, 157.0], [77.0, 157.0], [77.1, 157.0], [77.2, 157.0], [77.3, 157.0], [77.4, 157.0], [77.5, 157.0], [77.6, 157.0], [77.7, 157.0], [77.8, 157.0], [77.9, 157.0], [78.0, 157.0], [78.1, 157.0], [78.2, 157.0], [78.3, 157.0], [78.4, 157.0], [78.5, 157.0], [78.6, 157.0], [78.7, 157.0], [78.8, 157.0], [78.9, 157.0], [79.0, 157.0], [79.1, 157.0], [79.2, 157.0], [79.3, 157.0], [79.4, 158.0], [79.5, 158.0], [79.6, 158.0], [79.7, 158.0], [79.8, 158.0], [79.9, 158.0], [80.0, 158.0], [80.1, 158.0], [80.2, 158.0], [80.3, 158.0], [80.4, 158.0], [80.5, 158.0], [80.6, 158.0], [80.7, 158.0], [80.8, 158.0], [80.9, 158.0], [81.0, 158.0], [81.1, 158.0], [81.2, 158.0], [81.3, 158.0], [81.4, 158.0], [81.5, 158.0], [81.6, 158.0], [81.7, 158.0], [81.8, 158.0], [81.9, 158.0], [82.0, 158.0], [82.1, 158.0], [82.2, 158.0], [82.3, 158.0], [82.4, 158.0], [82.5, 158.0], [82.6, 158.0], [82.7, 158.0], [82.8, 158.0], [82.9, 158.0], [83.0, 158.0], [83.1, 158.0], [83.2, 158.0], [83.3, 158.0], [83.4, 159.0], [83.5, 159.0], [83.6, 159.0], [83.7, 159.0], [83.8, 159.0], [83.9, 159.0], [84.0, 159.0], [84.1, 159.0], [84.2, 159.0], [84.3, 159.0], [84.4, 159.0], [84.5, 159.0], [84.6, 159.0], [84.7, 159.0], [84.8, 159.0], [84.9, 159.0], [85.0, 159.0], [85.1, 159.0], [85.2, 159.0], [85.3, 159.0], [85.4, 159.0], [85.5, 159.0], [85.6, 159.0], [85.7, 159.0], [85.8, 159.0], [85.9, 159.0], [86.0, 159.0], [86.1, 160.0], [86.2, 160.0], [86.3, 160.0], [86.4, 160.0], [86.5, 160.0], [86.6, 160.0], [86.7, 160.0], [86.8, 160.0], [86.9, 160.0], [87.0, 160.0], [87.1, 160.0], [87.2, 160.0], [87.3, 160.0], [87.4, 161.0], [87.5, 161.0], [87.6, 161.0], [87.7, 161.0], [87.8, 161.0], [87.9, 161.0], [88.0, 161.0], [88.1, 161.0], [88.2, 161.0], [88.3, 161.0], [88.4, 161.0], [88.5, 161.0], [88.6, 161.0], [88.7, 161.0], [88.8, 161.0], [88.9, 161.0], [89.0, 161.0], [89.1, 161.0], [89.2, 161.0], [89.3, 161.0], [89.4, 162.0], [89.5, 162.0], [89.6, 162.0], [89.7, 162.0], [89.8, 162.0], [89.9, 162.0], [90.0, 162.0], [90.1, 162.0], [90.2, 162.0], [90.3, 162.0], [90.4, 162.0], [90.5, 162.0], [90.6, 162.0], [90.7, 163.0], [90.8, 163.0], [90.9, 163.0], [91.0, 163.0], [91.1, 163.0], [91.2, 163.0], [91.3, 163.0], [91.4, 163.0], [91.5, 163.0], [91.6, 163.0], [91.7, 163.0], [91.8, 163.0], [91.9, 163.0], [92.0, 163.0], [92.1, 163.0], [92.2, 163.0], [92.3, 163.0], [92.4, 163.0], [92.5, 163.0], [92.6, 163.0], [92.7, 166.0], [92.8, 166.0], [92.9, 166.0], [93.0, 166.0], [93.1, 166.0], [93.2, 166.0], [93.3, 166.0], [93.4, 170.0], [93.5, 170.0], [93.6, 170.0], [93.7, 170.0], [93.8, 170.0], [93.9, 170.0], [94.0, 170.0], [94.1, 174.0], [94.2, 174.0], [94.3, 174.0], [94.4, 174.0], [94.5, 174.0], [94.6, 174.0], [94.7, 175.0], [94.8, 175.0], [94.9, 175.0], [95.0, 175.0], [95.1, 175.0], [95.2, 175.0], [95.3, 175.0], [95.4, 177.0], [95.5, 177.0], [95.6, 177.0], [95.7, 177.0], [95.8, 177.0], [95.9, 177.0], [96.0, 177.0], [96.1, 187.0], [96.2, 187.0], [96.3, 187.0], [96.4, 187.0], [96.5, 187.0], [96.6, 187.0], [96.7, 196.0], [96.8, 196.0], [96.9, 196.0], [97.0, 196.0], [97.1, 196.0], [97.2, 196.0], [97.3, 196.0], [97.4, 197.0], [97.5, 197.0], [97.6, 197.0], [97.7, 197.0], [97.8, 197.0], [97.9, 197.0], [98.0, 197.0], [98.1, 228.0], [98.2, 228.0], [98.3, 228.0], [98.4, 228.0], [98.5, 228.0], [98.6, 228.0], [98.7, 251.0], [98.8, 251.0], [98.9, 251.0], [99.0, 251.0], [99.1, 251.0], [99.2, 251.0], [99.3, 251.0], [99.4, 607.0], [99.5, 607.0], [99.6, 607.0], [99.7, 607.0], [99.8, 607.0], [99.9, 607.0], [100.0, 607.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 2.0], [4.9, 2.0], [5.0, 2.0], [5.1, 2.0], [5.2, 2.0], [5.3, 2.0], [5.4, 2.0], [5.5, 2.0], [5.6, 2.0], [5.7, 2.0], [5.8, 2.0], [5.9, 2.0], [6.0, 2.0], [6.1, 2.0], [6.2, 2.0], [6.3, 2.0], [6.4, 2.0], [6.5, 2.0], [6.6, 2.0], [6.7, 2.0], [6.8, 2.0], [6.9, 2.0], [7.0, 2.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 3.0], [13.9, 3.0], [14.0, 3.0], [14.1, 3.0], [14.2, 3.0], [14.3, 3.0], [14.4, 3.0], [14.5, 3.0], [14.6, 3.0], [14.7, 3.0], [14.8, 3.0], [14.9, 3.0], [15.0, 3.0], [15.1, 3.0], [15.2, 3.0], [15.3, 3.0], [15.4, 3.0], [15.5, 3.0], [15.6, 3.0], [15.7, 3.0], [15.8, 3.0], [15.9, 3.0], [16.0, 3.0], [16.1, 3.0], [16.2, 3.0], [16.3, 3.0], [16.4, 3.0], [16.5, 3.0], [16.6, 3.0], [16.7, 3.0], [16.8, 3.0], [16.9, 3.0], [17.0, 3.0], [17.1, 3.0], [17.2, 3.0], [17.3, 3.0], [17.4, 3.0], [17.5, 3.0], [17.6, 3.0], [17.7, 3.0], [17.8, 3.0], [17.9, 3.0], [18.0, 3.0], [18.1, 3.0], [18.2, 3.0], [18.3, 3.0], [18.4, 3.0], [18.5, 3.0], [18.6, 4.0], [18.7, 4.0], [18.8, 4.0], [18.9, 5.0], [19.0, 7.0], [19.1, 15.0], [19.2, 16.0], [19.3, 17.0], [19.4, 18.0], [19.5, 19.0], [19.6, 20.0], [19.7, 20.0], [19.8, 21.0], [19.9, 21.0], [20.0, 21.0], [20.1, 22.0], [20.2, 22.0], [20.3, 22.0], [20.4, 23.0], [20.5, 23.0], [20.6, 23.0], [20.7, 24.0], [20.8, 24.0], [20.9, 24.0], [21.0, 25.0], [21.1, 25.0], [21.2, 25.0], [21.3, 25.0], [21.4, 26.0], [21.5, 26.0], [21.6, 27.0], [21.7, 27.0], [21.8, 27.0], [21.9, 27.0], [22.0, 28.0], [22.1, 28.0], [22.2, 29.0], [22.3, 29.0], [22.4, 29.0], [22.5, 30.0], [22.6, 30.0], [22.7, 31.0], [22.8, 31.0], [22.9, 32.0], [23.0, 32.0], [23.1, 33.0], [23.2, 33.0], [23.3, 34.0], [23.4, 35.0], [23.5, 36.0], [23.6, 37.0], [23.7, 37.0], [23.8, 39.0], [23.9, 40.0], [24.0, 41.0], [24.1, 43.0], [24.2, 45.0], [24.3, 47.0], [24.4, 49.0], [24.5, 53.0], [24.6, 59.0], [24.7, 67.0], [24.8, 83.0], [24.9, 99.0], [25.0, 119.0], [25.1, 139.0], [25.2, 176.0], [25.3, 197.0], [25.4, 215.0], [25.5, 236.0], [25.6, 252.0], [25.7, 268.0], [25.8, 285.0], [25.9, 296.0], [26.0, 317.0], [26.1, 330.0], [26.2, 343.0], [26.3, 350.0], [26.4, 357.0], [26.5, 366.0], [26.6, 378.0], [26.7, 392.0], [26.8, 408.0], [26.9, 415.0], [27.0, 424.0], [27.1, 430.0], [27.2, 437.0], [27.3, 450.0], [27.4, 460.0], [27.5, 468.0], [27.6, 481.0], [27.7, 487.0], [27.8, 497.0], [27.9, 506.0], [28.0, 511.0], [28.1, 516.0], [28.2, 524.0], [28.3, 528.0], [28.4, 534.0], [28.5, 540.0], [28.6, 547.0], [28.7, 555.0], [28.8, 563.0], [28.9, 569.0], [29.0, 576.0], [29.1, 582.0], [29.2, 591.0], [29.3, 596.0], [29.4, 605.0], [29.5, 611.0], [29.6, 620.0], [29.7, 629.0], [29.8, 638.0], [29.9, 650.0], [30.0, 655.0], [30.1, 661.0], [30.2, 667.0], [30.3, 673.0], [30.4, 676.0], [30.5, 680.0], [30.6, 685.0], [30.7, 691.0], [30.8, 697.0], [30.9, 705.0], [31.0, 711.0], [31.1, 717.0], [31.2, 720.0], [31.3, 725.0], [31.4, 730.0], [31.5, 737.0], [31.6, 742.0], [31.7, 747.0], [31.8, 753.0], [31.9, 759.0], [32.0, 766.0], [32.1, 773.0], [32.2, 778.0], [32.3, 784.0], [32.4, 787.0], [32.5, 790.0], [32.6, 793.0], [32.7, 797.0], [32.8, 801.0], [32.9, 806.0], [33.0, 811.0], [33.1, 814.0], [33.2, 819.0], [33.3, 823.0], [33.4, 827.0], [33.5, 831.0], [33.6, 836.0], [33.7, 840.0], [33.8, 843.0], [33.9, 849.0], [34.0, 855.0], [34.1, 860.0], [34.2, 864.0], [34.3, 868.0], [34.4, 873.0], [34.5, 879.0], [34.6, 885.0], [34.7, 888.0], [34.8, 893.0], [34.9, 899.0], [35.0, 905.0], [35.1, 911.0], [35.2, 914.0], [35.3, 918.0], [35.4, 924.0], [35.5, 926.0], [35.6, 932.0], [35.7, 936.0], [35.8, 940.0], [35.9, 945.0], [36.0, 950.0], [36.1, 952.0], [36.2, 957.0], [36.3, 961.0], [36.4, 964.0], [36.5, 967.0], [36.6, 970.0], [36.7, 974.0], [36.8, 977.0], [36.9, 981.0], [37.0, 986.0], [37.1, 989.0], [37.2, 993.0], [37.3, 996.0], [37.4, 999.0], [37.5, 1002.0], [37.6, 1006.0], [37.7, 1009.0], [37.8, 1014.0], [37.9, 1017.0], [38.0, 1021.0], [38.1, 1026.0], [38.2, 1031.0], [38.3, 1035.0], [38.4, 1039.0], [38.5, 1043.0], [38.6, 1047.0], [38.7, 1053.0], [38.8, 1056.0], [38.9, 1060.0], [39.0, 1064.0], [39.1, 1068.0], [39.2, 1074.0], [39.3, 1078.0], [39.4, 1082.0], [39.5, 1086.0], [39.6, 1091.0], [39.7, 1096.0], [39.8, 1100.0], [39.9, 1105.0], [40.0, 1108.0], [40.1, 1113.0], [40.2, 1117.0], [40.3, 1121.0], [40.4, 1124.0], [40.5, 1126.0], [40.6, 1130.0], [40.7, 1134.0], [40.8, 1139.0], [40.9, 1143.0], [41.0, 1148.0], [41.1, 1152.0], [41.2, 1156.0], [41.3, 1161.0], [41.4, 1164.0], [41.5, 1168.0], [41.6, 1172.0], [41.7, 1176.0], [41.8, 1180.0], [41.9, 1186.0], [42.0, 1191.0], [42.1, 1195.0], [42.2, 1199.0], [42.3, 1203.0], [42.4, 1206.0], [42.5, 1211.0], [42.6, 1215.0], [42.7, 1218.0], [42.8, 1222.0], [42.9, 1224.0], [43.0, 1230.0], [43.1, 1234.0], [43.2, 1236.0], [43.3, 1239.0], [43.4, 1243.0], [43.5, 1246.0], [43.6, 1249.0], [43.7, 1254.0], [43.8, 1258.0], [43.9, 1263.0], [44.0, 1267.0], [44.1, 1272.0], [44.2, 1275.0], [44.3, 1277.0], [44.4, 1280.0], [44.5, 1285.0], [44.6, 1290.0], [44.7, 1294.0], [44.8, 1298.0], [44.9, 1299.0], [45.0, 1302.0], [45.1, 1306.0], [45.2, 1310.0], [45.3, 1315.0], [45.4, 1318.0], [45.5, 1321.0], [45.6, 1324.0], [45.7, 1327.0], [45.8, 1331.0], [45.9, 1336.0], [46.0, 1339.0], [46.1, 1344.0], [46.2, 1349.0], [46.3, 1352.0], [46.4, 1357.0], [46.5, 1361.0], [46.6, 1364.0], [46.7, 1367.0], [46.8, 1369.0], [46.9, 1375.0], [47.0, 1378.0], [47.1, 1381.0], [47.2, 1384.0], [47.3, 1387.0], [47.4, 1391.0], [47.5, 1395.0], [47.6, 1399.0], [47.7, 1404.0], [47.8, 1407.0], [47.9, 1410.0], [48.0, 1415.0], [48.1, 1418.0], [48.2, 1420.0], [48.3, 1424.0], [48.4, 1427.0], [48.5, 1431.0], [48.6, 1436.0], [48.7, 1441.0], [48.8, 1445.0], [48.9, 1450.0], [49.0, 1453.0], [49.1, 1455.0], [49.2, 1459.0], [49.3, 1463.0], [49.4, 1469.0], [49.5, 1471.0], [49.6, 1476.0], [49.7, 1479.0], [49.8, 1482.0], [49.9, 1484.0], [50.0, 1486.0], [50.1, 1489.0], [50.2, 1491.0], [50.3, 1493.0], [50.4, 1498.0], [50.5, 1502.0], [50.6, 1506.0], [50.7, 1509.0], [50.8, 1512.0], [50.9, 1517.0], [51.0, 1519.0], [51.1, 1522.0], [51.2, 1526.0], [51.3, 1529.0], [51.4, 1532.0], [51.5, 1537.0], [51.6, 1538.0], [51.7, 1541.0], [51.8, 1545.0], [51.9, 1548.0], [52.0, 1552.0], [52.1, 1555.0], [52.2, 1558.0], [52.3, 1561.0], [52.4, 1562.0], [52.5, 1565.0], [52.6, 1570.0], [52.7, 1573.0], [52.8, 1578.0], [52.9, 1580.0], [53.0, 1582.0], [53.1, 1587.0], [53.2, 1590.0], [53.3, 1593.0], [53.4, 1597.0], [53.5, 1599.0], [53.6, 1603.0], [53.7, 1606.0], [53.8, 1610.0], [53.9, 1613.0], [54.0, 1619.0], [54.1, 1622.0], [54.2, 1625.0], [54.3, 1628.0], [54.4, 1633.0], [54.5, 1636.0], [54.6, 1641.0], [54.7, 1644.0], [54.8, 1649.0], [54.9, 1652.0], [55.0, 1656.0], [55.1, 1660.0], [55.2, 1663.0], [55.3, 1665.0], [55.4, 1668.0], [55.5, 1671.0], [55.6, 1675.0], [55.7, 1678.0], [55.8, 1683.0], [55.9, 1687.0], [56.0, 1690.0], [56.1, 1694.0], [56.2, 1699.0], [56.3, 1702.0], [56.4, 1705.0], [56.5, 1709.0], [56.6, 1712.0], [56.7, 1715.0], [56.8, 1719.0], [56.9, 1722.0], [57.0, 1726.0], [57.1, 1731.0], [57.2, 1733.0], [57.3, 1737.0], [57.4, 1740.0], [57.5, 1744.0], [57.6, 1748.0], [57.7, 1750.0], [57.8, 1753.0], [57.9, 1756.0], [58.0, 1758.0], [58.1, 1763.0], [58.2, 1766.0], [58.3, 1769.0], [58.4, 1772.0], [58.5, 1777.0], [58.6, 1779.0], [58.7, 1782.0], [58.8, 1785.0], [58.9, 1790.0], [59.0, 1794.0], [59.1, 1797.0], [59.2, 1801.0], [59.3, 1803.0], [59.4, 1807.0], [59.5, 1809.0], [59.6, 1815.0], [59.7, 1820.0], [59.8, 1824.0], [59.9, 1828.0], [60.0, 1832.0], [60.1, 1835.0], [60.2, 1839.0], [60.3, 1843.0], [60.4, 1847.0], [60.5, 1850.0], [60.6, 1854.0], [60.7, 1859.0], [60.8, 1862.0], [60.9, 1865.0], [61.0, 1870.0], [61.1, 1873.0], [61.2, 1876.0], [61.3, 1879.0], [61.4, 1882.0], [61.5, 1884.0], [61.6, 1888.0], [61.7, 1891.0], [61.8, 1897.0], [61.9, 1901.0], [62.0, 1905.0], [62.1, 1907.0], [62.2, 1910.0], [62.3, 1913.0], [62.4, 1915.0], [62.5, 1920.0], [62.6, 1924.0], [62.7, 1928.0], [62.8, 1932.0], [62.9, 1934.0], [63.0, 1939.0], [63.1, 1942.0], [63.2, 1945.0], [63.3, 1949.0], [63.4, 1952.0], [63.5, 1956.0], [63.6, 1960.0], [63.7, 1965.0], [63.8, 1970.0], [63.9, 1974.0], [64.0, 1979.0], [64.1, 1984.0], [64.2, 1987.0], [64.3, 1989.0], [64.4, 1994.0], [64.5, 1998.0], [64.6, 2002.0], [64.7, 2006.0], [64.8, 2010.0], [64.9, 2014.0], [65.0, 2020.0], [65.1, 2023.0], [65.2, 2028.0], [65.3, 2032.0], [65.4, 2037.0], [65.5, 2040.0], [65.6, 2043.0], [65.7, 2046.0], [65.8, 2049.0], [65.9, 2053.0], [66.0, 2059.0], [66.1, 2062.0], [66.2, 2065.0], [66.3, 2069.0], [66.4, 2073.0], [66.5, 2078.0], [66.6, 2082.0], [66.7, 2087.0], [66.8, 2092.0], [66.9, 2096.0], [67.0, 2102.0], [67.1, 2106.0], [67.2, 2111.0], [67.3, 2115.0], [67.4, 2120.0], [67.5, 2124.0], [67.6, 2129.0], [67.7, 2131.0], [67.8, 2138.0], [67.9, 2142.0], [68.0, 2145.0], [68.1, 2148.0], [68.2, 2151.0], [68.3, 2156.0], [68.4, 2160.0], [68.5, 2164.0], [68.6, 2167.0], [68.7, 2171.0], [68.8, 2176.0], [68.9, 2181.0], [69.0, 2186.0], [69.1, 2191.0], [69.2, 2194.0], [69.3, 2197.0], [69.4, 2201.0], [69.5, 2208.0], [69.6, 2212.0], [69.7, 2216.0], [69.8, 2221.0], [69.9, 2225.0], [70.0, 2229.0], [70.1, 2232.0], [70.2, 2238.0], [70.3, 2241.0], [70.4, 2246.0], [70.5, 2249.0], [70.6, 2253.0], [70.7, 2258.0], [70.8, 2265.0], [70.9, 2274.0], [71.0, 2276.0], [71.1, 2283.0], [71.2, 2286.0], [71.3, 2290.0], [71.4, 2293.0], [71.5, 2298.0], [71.6, 2303.0], [71.7, 2311.0], [71.8, 2315.0], [71.9, 2322.0], [72.0, 2327.0], [72.1, 2333.0], [72.2, 2338.0], [72.3, 2344.0], [72.4, 2348.0], [72.5, 2353.0], [72.6, 2359.0], [72.7, 2364.0], [72.8, 2371.0], [72.9, 2374.0], [73.0, 2379.0], [73.1, 2381.0], [73.2, 2386.0], [73.3, 2392.0], [73.4, 2395.0], [73.5, 2399.0], [73.6, 2406.0], [73.7, 2411.0], [73.8, 2415.0], [73.9, 2421.0], [74.0, 2425.0], [74.1, 2432.0], [74.2, 2438.0], [74.3, 2444.0], [74.4, 2448.0], [74.5, 2452.0], [74.6, 2457.0], [74.7, 2466.0], [74.8, 2473.0], [74.9, 2477.0], [75.0, 2481.0], [75.1, 2485.0], [75.2, 2490.0], [75.3, 2495.0], [75.4, 2500.0], [75.5, 2506.0], [75.6, 2509.0], [75.7, 2515.0], [75.8, 2520.0], [75.9, 2527.0], [76.0, 2532.0], [76.1, 2540.0], [76.2, 2545.0], [76.3, 2550.0], [76.4, 2554.0], [76.5, 2562.0], [76.6, 2570.0], [76.7, 2576.0], [76.8, 2580.0], [76.9, 2587.0], [77.0, 2593.0], [77.1, 2596.0], [77.2, 2600.0], [77.3, 2609.0], [77.4, 2615.0], [77.5, 2621.0], [77.6, 2627.0], [77.7, 2632.0], [77.8, 2637.0], [77.9, 2644.0], [78.0, 2648.0], [78.1, 2652.0], [78.2, 2659.0], [78.3, 2666.0], [78.4, 2669.0], [78.5, 2675.0], [78.6, 2680.0], [78.7, 2688.0], [78.8, 2696.0], [78.9, 2701.0], [79.0, 2708.0], [79.1, 2712.0], [79.2, 2720.0], [79.3, 2727.0], [79.4, 2731.0], [79.5, 2737.0], [79.6, 2744.0], [79.7, 2750.0], [79.8, 2757.0], [79.9, 2765.0], [80.0, 2770.0], [80.1, 2777.0], [80.2, 2782.0], [80.3, 2790.0], [80.4, 2796.0], [80.5, 2802.0], [80.6, 2809.0], [80.7, 2818.0], [80.8, 2827.0], [80.9, 2834.0], [81.0, 2840.0], [81.1, 2845.0], [81.2, 2851.0], [81.3, 2858.0], [81.4, 2867.0], [81.5, 2872.0], [81.6, 2878.0], [81.7, 2886.0], [81.8, 2898.0], [81.9, 2904.0], [82.0, 2908.0], [82.1, 2914.0], [82.2, 2919.0], [82.3, 2928.0], [82.4, 2934.0], [82.5, 2941.0], [82.6, 2950.0], [82.7, 2958.0], [82.8, 2965.0], [82.9, 2973.0], [83.0, 2984.0], [83.1, 2990.0], [83.2, 2998.0], [83.3, 3007.0], [83.4, 3020.0], [83.5, 3030.0], [83.6, 3041.0], [83.7, 3051.0], [83.8, 3059.0], [83.9, 3068.0], [84.0, 3079.0], [84.1, 3093.0], [84.2, 3100.0], [84.3, 3111.0], [84.4, 3118.0], [84.5, 3123.0], [84.6, 3133.0], [84.7, 3146.0], [84.8, 3153.0], [84.9, 3164.0], [85.0, 3172.0], [85.1, 3178.0], [85.2, 3186.0], [85.3, 3196.0], [85.4, 3205.0], [85.5, 3218.0], [85.6, 3225.0], [85.7, 3236.0], [85.8, 3249.0], [85.9, 3259.0], [86.0, 3269.0], [86.1, 3282.0], [86.2, 3306.0], [86.3, 3318.0], [86.4, 3324.0], [86.5, 3332.0], [86.6, 3342.0], [86.7, 3355.0], [86.8, 3365.0], [86.9, 3385.0], [87.0, 3393.0], [87.1, 3404.0], [87.2, 3413.0], [87.3, 3424.0], [87.4, 3436.0], [87.5, 3448.0], [87.6, 3457.0], [87.7, 3466.0], [87.8, 3479.0], [87.9, 3492.0], [88.0, 3503.0], [88.1, 3515.0], [88.2, 3530.0], [88.3, 3543.0], [88.4, 3557.0], [88.5, 3577.0], [88.6, 3591.0], [88.7, 3602.0], [88.8, 3613.0], [88.9, 3624.0], [89.0, 3643.0], [89.1, 3655.0], [89.2, 3665.0], [89.3, 3676.0], [89.4, 3687.0], [89.5, 3699.0], [89.6, 3711.0], [89.7, 3728.0], [89.8, 3742.0], [89.9, 3748.0], [90.0, 3767.0], [90.1, 3784.0], [90.2, 3791.0], [90.3, 3804.0], [90.4, 3821.0], [90.5, 3835.0], [90.6, 3852.0], [90.7, 3867.0], [90.8, 3885.0], [90.9, 3898.0], [91.0, 3908.0], [91.1, 3926.0], [91.2, 3931.0], [91.3, 3942.0], [91.4, 3964.0], [91.5, 3973.0], [91.6, 3989.0], [91.7, 4003.0], [91.8, 4017.0], [91.9, 4033.0], [92.0, 4044.0], [92.1, 4055.0], [92.2, 4062.0], [92.3, 4084.0], [92.4, 4096.0], [92.5, 4107.0], [92.6, 4121.0], [92.7, 4130.0], [92.8, 4148.0], [92.9, 4165.0], [93.0, 4189.0], [93.1, 4208.0], [93.2, 4224.0], [93.3, 4238.0], [93.4, 4250.0], [93.5, 4279.0], [93.6, 4299.0], [93.7, 4315.0], [93.8, 4331.0], [93.9, 4363.0], [94.0, 4381.0], [94.1, 4400.0], [94.2, 4419.0], [94.3, 4440.0], [94.4, 4467.0], [94.5, 4491.0], [94.6, 4512.0], [94.7, 4527.0], [94.8, 4547.0], [94.9, 4567.0], [95.0, 4587.0], [95.1, 4607.0], [95.2, 4624.0], [95.3, 4660.0], [95.4, 4680.0], [95.5, 4717.0], [95.6, 4753.0], [95.7, 4779.0], [95.8, 4805.0], [95.9, 4823.0], [96.0, 4851.0], [96.1, 4872.0], [96.2, 4897.0], [96.3, 4914.0], [96.4, 4929.0], [96.5, 4959.0], [96.6, 4995.0], [96.7, 5014.0], [96.8, 5042.0], [96.9, 5077.0], [97.0, 5103.0], [97.1, 5129.0], [97.2, 5173.0], [97.3, 5217.0], [97.4, 5256.0], [97.5, 5291.0], [97.6, 5345.0], [97.7, 5381.0], [97.8, 5430.0], [97.9, 5486.0], [98.0, 5525.0], [98.1, 5586.0], [98.2, 5630.0], [98.3, 5689.0], [98.4, 5750.0], [98.5, 5841.0], [98.6, 5901.0], [98.7, 5958.0], [98.8, 6006.0], [98.9, 6059.0], [99.0, 6133.0], [99.1, 6212.0], [99.2, 6279.0], [99.3, 6352.0], [99.4, 6481.0], [99.5, 6614.0], [99.6, 6832.0], [99.7, 7091.0], [99.8, 7394.0], [99.9, 7709.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3778.0, "series": [{"data": [[0.0, 3778.0], [600.0, 262.0], [700.0, 268.0], [800.0, 330.0], [900.0, 336.0], [1000.0, 337.0], [1100.0, 386.0], [1200.0, 386.0], [1300.0, 386.0], [1400.0, 400.0], [1500.0, 430.0], [1600.0, 409.0], [1700.0, 420.0], [1800.0, 371.0], [1900.0, 348.0], [2000.0, 352.0], [2100.0, 360.0], [2300.0, 301.0], [2200.0, 336.0], [2400.0, 272.0], [2500.0, 280.0], [2600.0, 272.0], [2700.0, 277.0], [2800.0, 235.0], [2900.0, 201.0], [3000.0, 172.0], [3100.0, 160.0], [3200.0, 142.0], [3300.0, 129.0], [3400.0, 142.0], [3500.0, 125.0], [3700.0, 108.0], [3600.0, 122.0], [3800.0, 116.0], [3900.0, 106.0], [4000.0, 114.0], [4100.0, 94.0], [4300.0, 87.0], [4200.0, 107.0], [4400.0, 77.0], [4500.0, 68.0], [4600.0, 53.0], [4800.0, 46.0], [4700.0, 57.0], [4900.0, 38.0], [5000.0, 44.0], [5100.0, 38.0], [5300.0, 31.0], [5200.0, 34.0], [5400.0, 27.0], [5600.0, 17.0], [5500.0, 29.0], [5700.0, 21.0], [5800.0, 19.0], [6000.0, 19.0], [5900.0, 19.0], [6100.0, 11.0], [6200.0, 11.0], [6300.0, 9.0], [6400.0, 11.0], [6500.0, 5.0], [6600.0, 7.0], [6800.0, 5.0], [6900.0, 5.0], [6700.0, 4.0], [7000.0, 6.0], [7100.0, 4.0], [7300.0, 7.0], [7400.0, 2.0], [7200.0, 2.0], [7600.0, 8.0], [7500.0, 1.0], [7800.0, 3.0], [7700.0, 3.0], [8100.0, 4.0], [8000.0, 1.0], [8300.0, 1.0], [8500.0, 2.0], [8200.0, 2.0], [9100.0, 1.0], [8800.0, 1.0], [9000.0, 2.0], [9600.0, 1.0], [9300.0, 1.0], [9800.0, 1.0], [100.0, 78.0], [200.0, 114.0], [300.0, 149.0], [400.0, 224.0], [500.0, 220.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[600.0, 1.0], [100.0, 147.0], [200.0, 2.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 3736.0], [600.0, 223.0], [700.0, 290.0], [800.0, 323.0], [900.0, 377.0], [1000.0, 352.0], [1100.0, 371.0], [1200.0, 399.0], [1300.0, 405.0], [1400.0, 424.0], [1500.0, 464.0], [1600.0, 404.0], [1700.0, 441.0], [1800.0, 408.0], [1900.0, 398.0], [2000.0, 365.0], [2100.0, 361.0], [2300.0, 298.0], [2200.0, 323.0], [2400.0, 284.0], [2500.0, 267.0], [2600.0, 253.0], [2700.0, 237.0], [2800.0, 208.0], [2900.0, 210.0], [3000.0, 145.0], [3100.0, 171.0], [3300.0, 133.0], [3200.0, 125.0], [3400.0, 132.0], [3500.0, 112.0], [3700.0, 113.0], [3600.0, 124.0], [3800.0, 97.0], [3900.0, 116.0], [4000.0, 112.0], [4100.0, 96.0], [4300.0, 73.0], [4200.0, 80.0], [4400.0, 67.0], [4500.0, 79.0], [4600.0, 56.0], [4700.0, 53.0], [4800.0, 63.0], [4900.0, 61.0], [5000.0, 53.0], [5100.0, 46.0], [5200.0, 34.0], [5300.0, 39.0], [5600.0, 28.0], [5500.0, 32.0], [5400.0, 25.0], [5800.0, 20.0], [5700.0, 19.0], [6000.0, 28.0], [5900.0, 29.0], [6100.0, 17.0], [6200.0, 22.0], [6300.0, 15.0], [6400.0, 12.0], [6600.0, 7.0], [6500.0, 13.0], [6700.0, 6.0], [6800.0, 10.0], [6900.0, 5.0], [7000.0, 3.0], [7100.0, 8.0], [7200.0, 4.0], [7400.0, 7.0], [7300.0, 3.0], [7600.0, 5.0], [7500.0, 2.0], [7700.0, 3.0], [7800.0, 4.0], [7900.0, 1.0], [8000.0, 1.0], [8400.0, 1.0], [8300.0, 2.0], [8500.0, 1.0], [8800.0, 1.0], [9200.0, 1.0], [100.0, 59.0], [200.0, 91.0], [300.0, 125.0], [400.0, 163.0], [500.0, 226.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2767.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 14424.0, "series": [{"data": [[0.0, 2767.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6563.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 14424.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 6396.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 26.91338582677165, "minX": 1.58768232E12, "maxY": 150.0, "series": [{"data": [[1.58768256E12, 150.0], [1.58768262E12, 150.0], [1.58768292E12, 150.0], [1.58768298E12, 149.99032062915907], [1.58768238E12, 129.25874769797423], [1.58768232E12, 46.14000000000002], [1.58768268E12, 150.0], [1.58768244E12, 150.0], [1.58768274E12, 150.0], [1.58768304E12, 117.11401869158871], [1.5876831E12, 26.91338582677165], [1.5876825E12, 150.0], [1.5876828E12, 150.0], [1.58768286E12, 150.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876831E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 21.0, "minX": 1.0, "maxY": 2876.0, "series": [{"data": [[2.0, 41.0], [4.0, 38.0], [8.0, 30.0], [9.0, 32.0], [10.0, 33.0], [11.0, 41.0], [12.0, 33.0], [13.0, 30.5], [14.0, 28.666666666666668], [15.0, 39.5], [16.0, 30.0], [17.0, 35.0], [18.0, 34.75], [19.0, 29.0], [20.0, 32.333333333333336], [21.0, 56.0], [22.0, 31.333333333333332], [23.0, 27.0], [24.0, 25.0], [25.0, 29.0], [26.0, 26.428571428571427], [27.0, 31.285714285714285], [28.0, 28.5], [29.0, 32.4], [30.0, 26.9], [31.0, 25.5], [32.0, 36.0], [33.0, 30.375], [34.0, 30.5], [35.0, 25.4], [36.0, 27.333333333333332], [37.0, 27.5], [38.0, 33.5], [39.0, 26.09090909090909], [40.0, 24.4], [41.0, 27.749999999999996], [42.0, 36.2], [43.0, 25.5], [44.0, 33.666666666666664], [45.0, 35.6], [46.0, 29.071428571428566], [47.0, 30.5], [48.0, 63.44444444444444], [49.0, 24.714285714285715], [50.0, 34.0], [51.0, 34.4], [52.0, 28.300000000000004], [53.0, 35.25], [54.0, 35.666666666666664], [55.0, 31.375], [56.0, 93.66666666666666], [57.0, 221.33333333333334], [58.0, 29.75], [59.0, 42.333333333333336], [60.0, 32.285714285714285], [61.0, 29.71428571428571], [62.0, 28.0], [63.0, 41.5], [64.0, 40.5], [65.0, 27.999999999999996], [66.0, 33.375], [67.0, 28.842105263157894], [68.0, 25.249999999999996], [69.0, 32.4], [70.0, 36.77777777777778], [71.0, 52.1], [72.0, 26.666666666666668], [73.0, 31.85714285714285], [74.0, 28.48148148148148], [75.0, 28.0], [76.0, 30.83333333333334], [77.0, 148.03448275862073], [78.0, 159.49999999999997], [79.0, 325.4117647058823], [80.0, 73.16666666666666], [81.0, 125.58333333333334], [82.0, 84.74999999999999], [83.0, 29.333333333333332], [84.0, 474.3333333333333], [85.0, 53.44444444444445], [86.0, 293.09090909090907], [87.0, 42.90909090909091], [88.0, 61.166666666666664], [89.0, 1005.4999999999999], [90.0, 806.8333333333333], [91.0, 535.0000000000001], [92.0, 515.0714285714287], [93.0, 364.2857142857143], [94.0, 285.25000000000006], [95.0, 220.25806451612897], [96.0, 492.6666666666667], [97.0, 535.7857142857142], [98.0, 831.8750000000001], [99.0, 309.84615384615387], [100.0, 247.741935483871], [101.0, 457.2857142857142], [102.0, 743.4583333333333], [103.0, 1257.121951219512], [104.0, 1463.3214285714287], [105.0, 1217.0909090909092], [106.0, 1060.2727272727273], [107.0, 1819.0], [108.0, 1167.1666666666667], [109.0, 1193.4705882352941], [110.0, 758.8000000000001], [111.0, 1507.75], [112.0, 1181.3], [113.0, 971.3333333333334], [114.0, 1193.6], [115.0, 622.1249999999999], [116.0, 896.7692307692311], [117.0, 772.3617021276596], [118.0, 994.0], [119.0, 1098.4516129032263], [120.0, 1056.5000000000002], [121.0, 1718.25], [122.0, 858.523076923077], [123.0, 1474.0], [124.0, 1711.857142857143], [126.0, 1908.1935483870966], [127.0, 2034.0], [125.0, 1636.8400000000001], [128.0, 1462.1923076923076], [129.0, 2106.2222222222226], [130.0, 1634.1], [131.0, 1205.4038461538457], [132.0, 1332.9062499999998], [133.0, 1856.142857142857], [134.0, 1420.9166666666667], [135.0, 1708.0], [136.0, 885.2307692307692], [137.0, 1831.6923076923076], [138.0, 123.61904761904759], [139.0, 1262.6875000000002], [140.0, 515.8593750000002], [141.0, 1446.5238095238094], [142.0, 1325.0], [143.0, 2467.5], [144.0, 1048.3137254901958], [145.0, 2017.888888888889], [146.0, 777.58], [147.0, 1047.4833333333336], [148.0, 1758.083333333333], [149.0, 1228.3174603174598], [150.0, 1795.0037520519056]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[143.34713333333275, 1636.0465333333348]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 150.0], [3.0, 177.0], [4.0, 148.0], [5.0, 147.0], [6.0, 153.0], [7.0, 153.0], [8.0, 157.0], [9.0, 159.0], [10.0, 161.0], [11.0, 158.0], [12.0, 154.0], [13.0, 161.0], [14.0, 157.0], [15.0, 150.0], [16.0, 150.0], [17.0, 155.0], [18.0, 155.0], [19.0, 158.0], [20.0, 166.0], [21.0, 145.0], [22.0, 154.0], [23.0, 151.0], [24.0, 152.0], [25.0, 152.0], [26.0, 160.0], [27.0, 152.0], [28.0, 159.0], [29.0, 150.0], [30.0, 187.0], [31.0, 154.0], [32.0, 155.0], [33.0, 152.0], [34.0, 156.0], [35.0, 155.0], [36.0, 152.0], [37.0, 148.0], [38.0, 150.0], [39.0, 154.0], [40.0, 161.0], [41.0, 153.0], [42.0, 148.0], [43.0, 150.0], [44.0, 251.0], [45.0, 148.0], [46.0, 170.0], [47.0, 151.0], [48.0, 155.0], [49.0, 154.0], [50.0, 146.0], [51.0, 153.0], [52.0, 149.0], [53.0, 146.0], [54.0, 150.0], [55.0, 151.0], [56.0, 150.0], [57.0, 151.0], [58.0, 146.0], [59.0, 160.0], [60.0, 153.0], [61.0, 162.0], [62.0, 175.0], [63.0, 158.0], [64.0, 153.0], [65.0, 155.0], [66.0, 148.0], [67.0, 156.0], [68.0, 162.0], [69.0, 149.0], [70.0, 148.0], [71.0, 145.0], [72.0, 152.0], [73.0, 155.0], [74.0, 145.0], [75.0, 147.0], [76.0, 150.0], [77.0, 154.0], [78.0, 152.0], [79.0, 148.0], [80.0, 154.0], [81.0, 174.0], [82.0, 157.0], [83.0, 158.0], [84.0, 145.0], [85.0, 150.0], [86.0, 157.0], [87.0, 158.0], [88.0, 150.0], [89.0, 149.0], [90.0, 196.0], [91.0, 149.0], [92.0, 156.0], [93.0, 151.0], [94.0, 148.0], [95.0, 145.0], [96.0, 153.0], [97.0, 151.0], [98.0, 149.0], [99.0, 148.0], [100.0, 163.0], [101.0, 152.0], [102.0, 148.0], [104.0, 417.5], [105.0, 146.0], [106.0, 149.0], [107.0, 144.0], [108.0, 148.0], [109.0, 150.0], [110.0, 151.0], [111.0, 146.0], [112.0, 149.0], [113.0, 145.0], [114.0, 153.0], [115.0, 149.0], [116.0, 150.0], [117.0, 148.0], [118.0, 147.0], [119.0, 143.0], [120.0, 144.0], [121.0, 159.0], [122.0, 151.0], [123.0, 151.0], [124.0, 156.0], [125.0, 144.0], [126.0, 147.0], [127.0, 155.0], [128.0, 153.0], [129.0, 149.0], [130.0, 150.0], [131.0, 149.0], [132.0, 150.0], [133.0, 152.0], [134.0, 149.0], [135.0, 148.0], [136.0, 158.0], [137.0, 153.0], [138.0, 149.0], [139.0, 146.0], [140.0, 150.0], [141.0, 150.0], [142.0, 146.0], [143.0, 151.0], [144.0, 163.0], [145.0, 155.0], [146.0, 147.0], [147.0, 149.0], [148.0, 159.0], [149.0, 152.0], [150.0, 163.0], [1.0, 197.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[75.50666666666669, 157.50666666666663]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[4.0, 25.0], [5.0, 43.5], [6.0, 25.0], [7.0, 55.0], [8.0, 35.5], [9.0, 44.0], [10.0, 37.0], [11.0, 21.0], [12.0, 41.0], [13.0, 35.0], [14.0, 36.0], [15.0, 28.0], [16.0, 38.0], [17.0, 34.75], [18.0, 31.5], [19.0, 32.666666666666664], [20.0, 28.875], [21.0, 27.8], [22.0, 24.5], [23.0, 31.0], [24.0, 33.0], [25.0, 33.0], [26.0, 29.11111111111111], [27.0, 33.5], [28.0, 36.666666666666664], [29.0, 29.8], [30.0, 34.1], [31.0, 51.0], [32.0, 57.0], [33.0, 27.363636363636363], [34.0, 29.75], [35.0, 32.285714285714285], [36.0, 36.46153846153847], [37.0, 24.0], [38.0, 33.2], [39.0, 29.833333333333332], [40.0, 35.0], [41.0, 30.25], [42.0, 30.0], [43.0, 33.5], [44.0, 36.6], [45.0, 34.285714285714285], [46.0, 32.72727272727273], [47.0, 28.8], [48.0, 47.900000000000006], [49.0, 28.4], [50.0, 50.8], [51.0, 34.5], [52.0, 25.75], [53.0, 45.0], [54.0, 31.375000000000004], [55.0, 26.88888888888889], [56.0, 29.6], [57.0, 297.5], [58.0, 30.2], [59.0, 38.444444444444436], [60.0, 30.0], [61.0, 30.099999999999998], [62.0, 31.25], [63.0, 29.25], [64.0, 27.7], [65.0, 32.83333333333333], [66.0, 33.57142857142858], [67.0, 26.937500000000004], [68.0, 29.842105263157887], [69.0, 30.750000000000004], [70.0, 37.74999999999999], [71.0, 42.0], [72.0, 29.18181818181818], [73.0, 32.88461538461538], [74.0, 30.285714285714285], [75.0, 28.2], [76.0, 27.916666666666664], [77.0, 90.04545454545455], [78.0, 118.8125], [79.0, 330.85], [80.0, 84.0], [81.0, 153.9090909090909], [82.0, 54.2], [83.0, 26.6], [84.0, 212.75], [85.0, 114.23809523809523], [86.0, 277.72727272727275], [87.0, 28.624999999999996], [88.0, 29.666666666666668], [89.0, 900.3333333333334], [90.0, 1120.0], [91.0, 496.19999999999993], [92.0, 747.4074074074074], [93.0, 983.0], [94.0, 673.3], [95.0, 250.27777777777783], [96.0, 452.0], [97.0, 477.8500000000001], [98.0, 435.82352941176475], [99.0, 379.30769230769226], [100.0, 312.99999999999994], [101.0, 882.7500000000001], [102.0, 658.1363636363635], [103.0, 1121.7812500000002], [104.0, 1483.9743589743584], [105.0, 1214.5769230769233], [106.0, 1013.4166666666667], [107.0, 1099.0], [108.0, 1191.0], [109.0, 962.5714285714284], [110.0, 1409.0], [111.0, 1003.4166666666667], [112.0, 746.1666666666667], [113.0, 1064.5172413793102], [114.0, 1511.875], [115.0, 778.9166666666666], [116.0, 884.6999999999999], [117.0, 752.0000000000001], [118.0, 1653.142857142857], [119.0, 1222.590909090909], [120.0, 983.1666666666667], [121.0, 1048.7142857142858], [122.0, 1097.9361702127658], [123.0, 1824.4285714285713], [124.0, 1728.111111111111], [125.0, 1295.6153846153845], [126.0, 2152.4666666666667], [127.0, 1062.75], [128.0, 2117.4615384615386], [129.0, 2876.0], [130.0, 1907.5555555555557], [131.0, 1603.1599999999999], [132.0, 1251.873417721519], [133.0, 1267.4], [134.0, 1547.8095238095236], [135.0, 1480.5714285714284], [136.0, 812.1538461538461], [137.0, 1476.111111111111], [138.0, 712.1000000000003], [139.0, 1165.3749999999998], [140.0, 495.7758620689655], [141.0, 1446.2222222222224], [142.0, 1623.9999999999998], [143.0, 1584.9999999999998], [144.0, 1066.672131147541], [145.0, 1947.857142857143], [146.0, 810.8260869565219], [147.0, 1116.6515151515148], [148.0, 1509.0], [149.0, 1148.28270042194], [150.0, 1822.9962470680034]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[143.3311333333325, 1664.1911333333333]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 150.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 908.2666666666667, "minX": 1.58768232E12, "maxY": 310517.2, "series": [{"data": [[1.58768256E12, 220197.5], [1.58768262E12, 244240.28333333333], [1.58768292E12, 226578.71666666667], [1.58768298E12, 146289.06666666668], [1.58768238E12, 240546.83333333334], [1.58768232E12, 62994.15], [1.58768268E12, 251715.83333333334], [1.58768244E12, 223930.01666666666], [1.58768274E12, 210003.28333333333], [1.58768304E12, 310517.2], [1.5876831E12, 14732.316666666668], [1.5876825E12, 233047.15], [1.5876828E12, 160169.2], [1.58768286E12, 216844.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58768256E12, 14207.2], [1.58768262E12, 15486.866666666667], [1.58768292E12, 21586.333333333332], [1.58768298E12, 23637.3], [1.58768238E12, 15264.433333333332], [1.58768232E12, 4051.766666666667], [1.58768268E12, 15501.166666666666], [1.58768244E12, 16187.633333333333], [1.58768274E12, 13377.666666666666], [1.58768304E12, 19126.966666666667], [1.5876831E12, 908.2666666666667], [1.5876825E12, 14400.1], [1.5876828E12, 21643.0], [1.58768286E12, 19691.3]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876831E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 29.485714285714288, "minX": 1.58768232E12, "maxY": 2995.142094017095, "series": [{"data": [[1.58768256E12, 2629.9919839679355], [1.58768262E12, 2322.11552680222], [1.58768292E12, 1116.7959317585296], [1.58768298E12, 795.5902140672777], [1.58768238E12, 1728.6985365853648], [1.58768232E12, 44.881422924901194], [1.58768268E12, 2216.013850415513], [1.58768244E12, 2090.9867608120053], [1.58768274E12, 2995.142094017095], [1.58768304E12, 688.4554819720382], [1.5876831E12, 29.485714285714288], [1.5876825E12, 2496.847070506454], [1.5876828E12, 1155.5839947089962], [1.58768286E12, 1334.527838033262]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768238E12, 158.41772151898735], [1.58768232E12, 156.49295774647885]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768256E12, 2763.233569261881], [1.58768262E12, 2287.032287822877], [1.58768292E12, 1160.6742474916398], [1.58768298E12, 835.0670257330946], [1.58768238E12, 1726.773408239702], [1.58768232E12, 42.71014492753622], [1.58768268E12, 2317.2322580645223], [1.58768244E12, 2097.005305039784], [1.58768274E12, 2884.177540106957], [1.58768304E12, 716.1671732522792], [1.5876831E12, 29.824561403508763], [1.5876825E12, 2535.1638530287946], [1.5876828E12, 1173.189438943896], [1.58768286E12, 1391.11232676878]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876831E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 29.099999999999998, "minX": 1.58768232E12, "maxY": 2994.8621794871783, "series": [{"data": [[1.58768256E12, 2629.4088176352698], [1.58768262E12, 2321.569316081327], [1.58768292E12, 1116.5905511810984], [1.58768298E12, 795.17370030581], [1.58768238E12, 1728.3619512195105], [1.58768232E12, 44.667984189723356], [1.58768268E12, 2215.625115420132], [1.58768244E12, 2090.366284201236], [1.58768274E12, 2994.8621794871783], [1.58768304E12, 688.1729212656377], [1.5876831E12, 29.099999999999998], [1.5876825E12, 2496.3982125124135], [1.5876828E12, 1155.4722222222213], [1.58768286E12, 1333.670281995659]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768238E12, 158.39240506329116], [1.58768232E12, 156.4366197183099]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768256E12, 2762.9433771486333], [1.58768262E12, 2286.6291512915177], [1.58768292E12, 1160.4983277591975], [1.58768298E12, 834.4039497307017], [1.58768238E12, 1726.4204119850178], [1.58768232E12, 42.398550724637694], [1.58768268E12, 2316.8138248847886], [1.58768244E12, 2096.3616268788664], [1.58768274E12, 2883.8556149732613], [1.58768304E12, 715.8487841945288], [1.5876831E12, 29.403508771929822], [1.5876825E12, 2534.44488579941], [1.5876828E12, 1173.0983498349842], [1.58768286E12, 1390.30051057622]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876831E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58768232E12, "maxY": 1.1267605633802815, "series": [{"data": [[1.58768256E12, 0.3617234468937879], [1.58768262E12, 0.39463955637707954], [1.58768292E12, 0.3156167979002626], [1.58768298E12, 0.14006116207951066], [1.58768238E12, 0.4341463414634148], [1.58768232E12, 0.22134387351778656], [1.58768268E12, 0.37488457987072915], [1.58768244E12, 0.4483671668137676], [1.58768274E12, 0.44017094017093983], [1.58768304E12, 0.216335540838852], [1.5876831E12, 0.0], [1.5876825E12, 0.43396226415094363], [1.5876828E12, 0.21428571428571444], [1.58768286E12, 0.2530730296456976]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768238E12, 0.632911392405063], [1.58768232E12, 1.1267605633802815]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768256E12, 0.4175935288169866], [1.58768262E12, 0.4206642066420665], [1.58768292E12, 0.43010033444816004], [1.58768298E12, 0.4260921603830044], [1.58768238E12, 0.5168539325842703], [1.58768232E12, 0.5833333333333338], [1.58768268E12, 0.4230414746543777], [1.58768244E12, 0.5172413793103448], [1.58768274E12, 0.44278074866310174], [1.58768304E12, 0.4278115501519763], [1.5876831E12, 0.456140350877193], [1.5876825E12, 0.48659384309831205], [1.5876828E12, 0.4468646864686464], [1.58768286E12, 0.43836615609044466]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876831E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 12.0, "minX": 1.58768232E12, "maxY": 9837.0, "series": [{"data": [[1.58768256E12, 8811.0], [1.58768262E12, 6095.0], [1.58768292E12, 3255.0], [1.58768298E12, 5486.0], [1.58768238E12, 6027.0], [1.58768232E12, 510.0], [1.58768268E12, 7149.0], [1.58768244E12, 6352.0], [1.58768274E12, 9837.0], [1.58768304E12, 2494.0], [1.5876831E12, 49.0], [1.5876825E12, 7720.0], [1.5876828E12, 5079.0], [1.58768286E12, 6481.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58768256E12, 106.0], [1.58768262E12, 21.0], [1.58768292E12, 588.0], [1.58768298E12, 502.0], [1.58768238E12, 12.0], [1.58768232E12, 13.0], [1.58768268E12, 48.0], [1.58768244E12, 14.0], [1.58768274E12, 156.0], [1.58768304E12, 14.0], [1.5876831E12, 19.0], [1.5876825E12, 16.0], [1.5876828E12, 13.0], [1.58768286E12, 726.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58768256E12, 5091.200000000001], [1.58768262E12, 4293.0], [1.58768292E12, 2400.4], [1.58768298E12, 3586.600000000001], [1.58768238E12, 3374.0], [1.58768232E12, 151.89999999999998], [1.58768268E12, 4173.1], [1.58768244E12, 3629.8], [1.58768274E12, 4651.3], [1.58768304E12, 1378.2000000000003], [1.5876831E12, 36.2], [1.5876825E12, 5071.6], [1.5876828E12, 3255.0], [1.58768286E12, 3059.2000000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58768256E12, 7220.499999999998], [1.58768262E12, 5126.0], [1.58768292E12, 2830.96], [1.58768298E12, 5099.87], [1.58768238E12, 4118.3], [1.58768232E12, 345.99], [1.58768268E12, 6114.0], [1.58768244E12, 6022.79], [1.58768274E12, 8133.650000000007], [1.58768304E12, 1965.0], [1.5876831E12, 48.44], [1.5876825E12, 6225.76], [1.5876828E12, 4066.9999999999973], [1.58768286E12, 6181.639999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58768256E12, 5864.099999999999], [1.58768262E12, 4584.7], [1.58768292E12, 2554.0], [1.58768298E12, 4574.899999999995], [1.58768238E12, 3655.5], [1.58768232E12, 159.0], [1.58768268E12, 4941.749999999998], [1.58768244E12, 4393.299999999997], [1.58768274E12, 6060.299999999999], [1.58768304E12, 1599.3999999999996], [1.5876831E12, 41.0], [1.5876825E12, 5488.5999999999985], [1.5876828E12, 3622.0], [1.58768286E12, 4865.999999999998]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876831E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.5, "minX": 1.0, "maxY": 3968.5, "series": [{"data": [[2.0, 163.5], [3.0, 31.5], [4.0, 33.0], [6.0, 38.5], [7.0, 56.5], [8.0, 42.5], [9.0, 31.0], [10.0, 2450.0], [11.0, 32.0], [12.0, 26.5], [13.0, 1556.0], [14.0, 37.0], [15.0, 30.0], [16.0, 2506.0], [17.0, 36.0], [18.0, 474.5], [19.0, 3458.0], [20.0, 754.0], [21.0, 2394.0], [22.0, 2448.5], [23.0, 2901.0], [24.0, 2510.5], [25.0, 2022.0], [26.0, 2141.5], [27.0, 1716.0], [28.0, 2264.0], [29.0, 2386.0], [30.0, 2198.0], [31.0, 1948.0], [33.0, 2321.0], [32.0, 2167.0], [34.0, 2025.0], [35.0, 2038.0], [37.0, 2123.5], [36.0, 2057.5], [39.0, 1932.0], [38.0, 2039.0], [41.0, 1632.0], [40.0, 1758.0], [42.0, 2039.0], [43.0, 1360.5], [44.0, 1396.5], [45.0, 1558.0], [47.0, 1501.0], [46.0, 1692.0], [48.0, 1424.5], [49.0, 2188.0], [50.0, 1252.0], [51.0, 1651.0], [52.0, 1882.0], [53.0, 1551.5], [54.0, 1237.0], [55.0, 1499.0], [56.0, 1631.0], [57.0, 896.0], [59.0, 1240.0], [58.0, 951.5], [61.0, 571.0], [63.0, 1930.0], [62.0, 765.5], [65.0, 2178.5], [67.0, 207.0], [64.0, 885.0], [69.0, 834.0], [68.0, 1562.0], [72.0, 1844.0], [77.0, 2605.5], [81.0, 2585.0], [82.0, 2308.5], [80.0, 1928.5], [85.0, 544.0], [94.0, 2268.0], [125.0, 3968.5], [128.0, 2314.0], [1.0, 44.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[9.0, 2.0], [28.0, 2.0], [29.0, 1.5], [31.0, 3.0], [39.0, 2.0], [41.0, 2.0], [43.0, 2.0], [49.0, 2.0], [50.0, 2.0], [52.0, 1516.0], [53.0, 2.0], [55.0, 2.0], [56.0, 2.0], [58.0, 2.0], [61.0, 2.0], [63.0, 2.0], [65.0, 2.0], [67.0, 2.0], [66.0, 2.0], [64.0, 2.0], [69.0, 2.0], [71.0, 2.0], [70.0, 2.0], [68.0, 2.0], [74.0, 2.0], [73.0, 2.0], [72.0, 2.0], [77.0, 2.0], [76.0, 2.0], [79.0, 2.0], [78.0, 2.0], [81.0, 2.0], [82.0, 2.0], [80.0, 2.0], [83.0, 2.0], [85.0, 2.0], [87.0, 2.0], [89.0, 2.0], [94.0, 2.0], [92.0, 2.0], [95.0, 2.0], [93.0, 2.0], [96.0, 2.0], [97.0, 2.0], [99.0, 2.0], [98.0, 2.0], [100.0, 2.0], [101.0, 2.0], [106.0, 2.0], [119.0, 2.0], [123.0, 52.0], [121.0, 2.0], [125.0, 1849.0], [128.0, 1347.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 128.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1.5, "minX": 1.0, "maxY": 3968.5, "series": [{"data": [[2.0, 163.5], [3.0, 31.0], [4.0, 32.5], [6.0, 38.0], [7.0, 56.5], [8.0, 42.5], [9.0, 30.0], [10.0, 2431.0], [11.0, 31.0], [12.0, 26.0], [13.0, 1556.0], [14.0, 37.0], [15.0, 30.0], [16.0, 2506.0], [17.0, 35.0], [18.0, 474.5], [19.0, 3458.0], [20.0, 754.0], [21.0, 2394.0], [22.0, 2448.5], [23.0, 2901.0], [24.0, 2510.5], [25.0, 2022.0], [26.0, 2141.5], [27.0, 1716.0], [28.0, 2263.5], [29.0, 2386.0], [30.0, 2198.0], [31.0, 1947.0], [33.0, 2321.0], [32.0, 2166.5], [34.0, 2023.5], [35.0, 2038.0], [37.0, 2123.5], [36.0, 2057.5], [39.0, 1932.0], [38.0, 2037.0], [41.0, 1632.0], [40.0, 1758.0], [42.0, 2039.0], [43.0, 1360.0], [44.0, 1396.0], [45.0, 1558.0], [47.0, 1501.0], [46.0, 1690.0], [48.0, 1424.5], [49.0, 2188.0], [50.0, 1252.0], [51.0, 1651.0], [52.0, 1882.0], [53.0, 1551.5], [54.0, 1236.0], [55.0, 1498.5], [56.0, 1630.0], [57.0, 896.0], [59.0, 1240.0], [58.0, 951.5], [61.0, 571.0], [63.0, 1929.5], [62.0, 765.5], [65.0, 2178.5], [67.0, 204.0], [64.0, 885.0], [69.0, 830.5], [68.0, 1562.0], [72.0, 1844.0], [77.0, 2605.5], [81.0, 2585.0], [82.0, 2308.5], [80.0, 1928.5], [85.0, 540.0], [94.0, 2268.0], [125.0, 3968.5], [128.0, 2314.0], [1.0, 43.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[9.0, 2.0], [28.0, 2.0], [29.0, 1.5], [31.0, 3.0], [39.0, 2.0], [41.0, 2.0], [43.0, 2.0], [49.0, 2.0], [50.0, 2.0], [52.0, 1516.0], [53.0, 2.0], [55.0, 2.0], [56.0, 2.0], [58.0, 2.0], [61.0, 2.0], [63.0, 2.0], [65.0, 2.0], [67.0, 2.0], [66.0, 2.0], [64.0, 2.0], [69.0, 2.0], [71.0, 2.0], [70.0, 2.0], [68.0, 2.0], [74.0, 2.0], [73.0, 2.0], [72.0, 2.0], [77.0, 2.0], [76.0, 2.0], [79.0, 2.0], [78.0, 2.0], [81.0, 2.0], [82.0, 2.0], [80.0, 2.0], [83.0, 2.0], [85.0, 2.0], [87.0, 2.0], [89.0, 2.0], [94.0, 2.0], [92.0, 2.0], [95.0, 2.0], [93.0, 2.0], [96.0, 2.0], [97.0, 2.0], [99.0, 2.0], [98.0, 2.0], [100.0, 2.0], [101.0, 2.0], [106.0, 2.0], [119.0, 2.0], [123.0, 52.0], [121.0, 2.0], [125.0, 1849.0], [128.0, 1347.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 128.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.1166666666666667, "minX": 1.58768232E12, "maxY": 56.3, "series": [{"data": [[1.58768256E12, 32.96666666666667], [1.58768262E12, 35.95], [1.58768292E12, 49.333333333333336], [1.58768298E12, 56.3], [1.58768238E12, 37.516666666666666], [1.58768232E12, 10.016666666666667], [1.58768268E12, 36.18333333333333], [1.58768244E12, 37.766666666666666], [1.58768274E12, 31.15], [1.58768304E12, 43.38333333333333], [1.5876831E12, 2.1166666666666667], [1.5876825E12, 33.916666666666664], [1.5876828E12, 49.016666666666666], [1.58768286E12, 46.88333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876831E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.58768232E12, "maxY": 44.583333333333336, "series": [{"data": [[1.58768256E12, 31.55], [1.58768262E12, 35.016666666666666], [1.58768292E12, 32.083333333333336], [1.58768298E12, 20.2], [1.58768238E12, 35.56666666666667], [1.58768232E12, 10.0], [1.58768268E12, 36.13333333333333], [1.58768244E12, 32.0], [1.58768274E12, 30.1], [1.58768304E12, 44.583333333333336], [1.5876831E12, 2.1166666666666667], [1.5876825E12, 33.45], [1.5876828E12, 22.316666666666666], [1.58768286E12, 30.783333333333335]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.5876828E12, 0.03333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.58768244E12, 5.733333333333333], [1.58768274E12, 1.0833333333333333], [1.58768256E12, 1.5666666666666667], [1.58768262E12, 1.0833333333333333], [1.58768292E12, 18.233333333333334], [1.5876825E12, 0.11666666666666667], [1.58768298E12, 34.9], [1.58768238E12, 0.6333333333333333], [1.5876828E12, 28.1], [1.58768286E12, 15.116666666666667]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876831E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.58768232E12, "maxY": 22.65, "series": [{"data": [[1.58768238E12, 1.3166666666666667], [1.58768232E12, 1.1833333333333333]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58768256E12, 15.983333333333333], [1.58768262E12, 17.4], [1.58768292E12, 15.733333333333333], [1.58768298E12, 9.883333333333333], [1.58768238E12, 16.7], [1.58768232E12, 4.216666666666667], [1.58768268E12, 18.05], [1.58768244E12, 15.883333333333333], [1.58768274E12, 14.833333333333334], [1.58768304E12, 22.65], [1.5876831E12, 1.1666666666666667], [1.5876825E12, 16.766666666666666], [1.5876828E12, 10.966666666666667], [1.58768286E12, 15.516666666666667]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58768244E12, 3.0], [1.58768274E12, 0.7666666666666667], [1.58768256E12, 0.65], [1.58768262E12, 0.6333333333333333], [1.58768292E12, 9.666666666666666], [1.5876825E12, 0.016666666666666666], [1.58768298E12, 17.366666666666667], [1.58768238E12, 0.38333333333333336], [1.5876828E12, 14.233333333333333], [1.58768286E12, 7.533333333333333]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.58768256E12, 15.566666666666666], [1.58768262E12, 17.616666666666667], [1.58768292E12, 16.35], [1.58768298E12, 10.316666666666666], [1.58768238E12, 17.55], [1.58768232E12, 4.6], [1.58768268E12, 18.083333333333332], [1.58768244E12, 16.116666666666667], [1.58768274E12, 15.266666666666667], [1.58768304E12, 21.933333333333334], [1.5876831E12, 0.95], [1.5876825E12, 16.683333333333334], [1.5876828E12, 11.35], [1.58768286E12, 15.266666666666667]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58768244E12, 2.7333333333333334], [1.58768274E12, 0.31666666666666665], [1.58768256E12, 0.9166666666666666], [1.58768262E12, 0.45], [1.58768292E12, 8.566666666666666], [1.5876825E12, 0.1], [1.58768298E12, 17.533333333333335], [1.58768238E12, 0.25], [1.5876828E12, 13.9], [1.58768286E12, 7.583333333333333]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876831E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.58768232E12, "maxY": 44.583333333333336, "series": [{"data": [[1.58768256E12, 31.55], [1.58768262E12, 35.016666666666666], [1.58768292E12, 32.083333333333336], [1.58768298E12, 20.2], [1.58768238E12, 35.56666666666667], [1.58768232E12, 10.0], [1.58768268E12, 36.13333333333333], [1.58768244E12, 32.0], [1.58768274E12, 30.1], [1.58768304E12, 44.583333333333336], [1.5876831E12, 2.1166666666666667], [1.5876825E12, 33.45], [1.5876828E12, 22.316666666666666], [1.58768286E12, 30.783333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58768244E12, 5.733333333333333], [1.58768274E12, 1.0833333333333333], [1.58768256E12, 1.5666666666666667], [1.58768262E12, 1.0833333333333333], [1.58768292E12, 18.233333333333334], [1.5876825E12, 0.11666666666666667], [1.58768298E12, 34.9], [1.58768238E12, 0.6333333333333333], [1.5876828E12, 28.133333333333333], [1.58768286E12, 15.116666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876831E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

