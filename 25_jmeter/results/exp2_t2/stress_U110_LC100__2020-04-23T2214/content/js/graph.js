/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "maxY": 5935.0, "series": [{"data": [[0.0, 10.0], [0.1, 12.0], [0.2, 13.0], [0.3, 13.0], [0.4, 14.0], [0.5, 14.0], [0.6, 15.0], [0.7, 15.0], [0.8, 16.0], [0.9, 16.0], [1.0, 16.0], [1.1, 16.0], [1.2, 17.0], [1.3, 17.0], [1.4, 17.0], [1.5, 18.0], [1.6, 18.0], [1.7, 18.0], [1.8, 18.0], [1.9, 18.0], [2.0, 18.0], [2.1, 19.0], [2.2, 19.0], [2.3, 19.0], [2.4, 19.0], [2.5, 19.0], [2.6, 19.0], [2.7, 19.0], [2.8, 20.0], [2.9, 20.0], [3.0, 20.0], [3.1, 20.0], [3.2, 20.0], [3.3, 20.0], [3.4, 20.0], [3.5, 21.0], [3.6, 21.0], [3.7, 21.0], [3.8, 21.0], [3.9, 21.0], [4.0, 21.0], [4.1, 21.0], [4.2, 21.0], [4.3, 22.0], [4.4, 22.0], [4.5, 22.0], [4.6, 22.0], [4.7, 22.0], [4.8, 22.0], [4.9, 22.0], [5.0, 22.0], [5.1, 23.0], [5.2, 23.0], [5.3, 23.0], [5.4, 23.0], [5.5, 23.0], [5.6, 23.0], [5.7, 23.0], [5.8, 23.0], [5.9, 24.0], [6.0, 24.0], [6.1, 24.0], [6.2, 24.0], [6.3, 24.0], [6.4, 24.0], [6.5, 24.0], [6.6, 24.0], [6.7, 25.0], [6.8, 25.0], [6.9, 25.0], [7.0, 25.0], [7.1, 25.0], [7.2, 25.0], [7.3, 26.0], [7.4, 26.0], [7.5, 26.0], [7.6, 26.0], [7.7, 26.0], [7.8, 26.0], [7.9, 26.0], [8.0, 27.0], [8.1, 27.0], [8.2, 27.0], [8.3, 27.0], [8.4, 27.0], [8.5, 27.0], [8.6, 27.0], [8.7, 28.0], [8.8, 28.0], [8.9, 28.0], [9.0, 28.0], [9.1, 28.0], [9.2, 28.0], [9.3, 29.0], [9.4, 29.0], [9.5, 29.0], [9.6, 29.0], [9.7, 29.0], [9.8, 29.0], [9.9, 30.0], [10.0, 30.0], [10.1, 30.0], [10.2, 30.0], [10.3, 30.0], [10.4, 31.0], [10.5, 31.0], [10.6, 31.0], [10.7, 31.0], [10.8, 32.0], [10.9, 32.0], [11.0, 32.0], [11.1, 32.0], [11.2, 32.0], [11.3, 33.0], [11.4, 33.0], [11.5, 34.0], [11.6, 34.0], [11.7, 34.0], [11.8, 35.0], [11.9, 35.0], [12.0, 35.0], [12.1, 36.0], [12.2, 36.0], [12.3, 37.0], [12.4, 38.0], [12.5, 39.0], [12.6, 39.0], [12.7, 40.0], [12.8, 41.0], [12.9, 44.0], [13.0, 47.0], [13.1, 55.0], [13.2, 90.0], [13.3, 128.0], [13.4, 173.0], [13.5, 216.0], [13.6, 236.0], [13.7, 246.0], [13.8, 275.0], [13.9, 291.0], [14.0, 306.0], [14.1, 324.0], [14.2, 343.0], [14.3, 366.0], [14.4, 384.0], [14.5, 396.0], [14.6, 409.0], [14.7, 416.0], [14.8, 427.0], [14.9, 438.0], [15.0, 451.0], [15.1, 456.0], [15.2, 465.0], [15.3, 473.0], [15.4, 478.0], [15.5, 486.0], [15.6, 492.0], [15.7, 500.0], [15.8, 506.0], [15.9, 515.0], [16.0, 528.0], [16.1, 534.0], [16.2, 539.0], [16.3, 542.0], [16.4, 546.0], [16.5, 551.0], [16.6, 556.0], [16.7, 563.0], [16.8, 567.0], [16.9, 571.0], [17.0, 575.0], [17.1, 579.0], [17.2, 582.0], [17.3, 588.0], [17.4, 592.0], [17.5, 599.0], [17.6, 603.0], [17.7, 609.0], [17.8, 615.0], [17.9, 617.0], [18.0, 621.0], [18.1, 623.0], [18.2, 626.0], [18.3, 629.0], [18.4, 634.0], [18.5, 637.0], [18.6, 641.0], [18.7, 644.0], [18.8, 648.0], [18.9, 652.0], [19.0, 658.0], [19.1, 663.0], [19.2, 667.0], [19.3, 670.0], [19.4, 675.0], [19.5, 682.0], [19.6, 687.0], [19.7, 689.0], [19.8, 695.0], [19.9, 697.0], [20.0, 702.0], [20.1, 706.0], [20.2, 710.0], [20.3, 714.0], [20.4, 718.0], [20.5, 723.0], [20.6, 727.0], [20.7, 729.0], [20.8, 733.0], [20.9, 736.0], [21.0, 740.0], [21.1, 741.0], [21.2, 745.0], [21.3, 750.0], [21.4, 753.0], [21.5, 756.0], [21.6, 758.0], [21.7, 763.0], [21.8, 766.0], [21.9, 769.0], [22.0, 774.0], [22.1, 778.0], [22.2, 783.0], [22.3, 785.0], [22.4, 788.0], [22.5, 791.0], [22.6, 796.0], [22.7, 800.0], [22.8, 803.0], [22.9, 807.0], [23.0, 809.0], [23.1, 811.0], [23.2, 815.0], [23.3, 818.0], [23.4, 822.0], [23.5, 826.0], [23.6, 829.0], [23.7, 834.0], [23.8, 837.0], [23.9, 840.0], [24.0, 843.0], [24.1, 847.0], [24.2, 851.0], [24.3, 854.0], [24.4, 856.0], [24.5, 860.0], [24.6, 862.0], [24.7, 864.0], [24.8, 867.0], [24.9, 870.0], [25.0, 873.0], [25.1, 878.0], [25.2, 881.0], [25.3, 884.0], [25.4, 886.0], [25.5, 889.0], [25.6, 892.0], [25.7, 895.0], [25.8, 898.0], [25.9, 901.0], [26.0, 903.0], [26.1, 905.0], [26.2, 909.0], [26.3, 911.0], [26.4, 914.0], [26.5, 917.0], [26.6, 920.0], [26.7, 923.0], [26.8, 926.0], [26.9, 928.0], [27.0, 931.0], [27.1, 934.0], [27.2, 936.0], [27.3, 937.0], [27.4, 942.0], [27.5, 945.0], [27.6, 950.0], [27.7, 952.0], [27.8, 957.0], [27.9, 959.0], [28.0, 961.0], [28.1, 963.0], [28.2, 966.0], [28.3, 969.0], [28.4, 972.0], [28.5, 975.0], [28.6, 977.0], [28.7, 980.0], [28.8, 983.0], [28.9, 987.0], [29.0, 991.0], [29.1, 993.0], [29.2, 995.0], [29.3, 998.0], [29.4, 1001.0], [29.5, 1004.0], [29.6, 1006.0], [29.7, 1008.0], [29.8, 1011.0], [29.9, 1014.0], [30.0, 1016.0], [30.1, 1021.0], [30.2, 1023.0], [30.3, 1025.0], [30.4, 1027.0], [30.5, 1029.0], [30.6, 1031.0], [30.7, 1035.0], [30.8, 1038.0], [30.9, 1039.0], [31.0, 1042.0], [31.1, 1045.0], [31.2, 1048.0], [31.3, 1051.0], [31.4, 1053.0], [31.5, 1057.0], [31.6, 1058.0], [31.7, 1061.0], [31.8, 1064.0], [31.9, 1066.0], [32.0, 1070.0], [32.1, 1073.0], [32.2, 1078.0], [32.3, 1080.0], [32.4, 1083.0], [32.5, 1085.0], [32.6, 1087.0], [32.7, 1089.0], [32.8, 1091.0], [32.9, 1095.0], [33.0, 1099.0], [33.1, 1101.0], [33.2, 1103.0], [33.3, 1105.0], [33.4, 1106.0], [33.5, 1108.0], [33.6, 1110.0], [33.7, 1113.0], [33.8, 1115.0], [33.9, 1118.0], [34.0, 1122.0], [34.1, 1125.0], [34.2, 1126.0], [34.3, 1128.0], [34.4, 1131.0], [34.5, 1133.0], [34.6, 1134.0], [34.7, 1137.0], [34.8, 1139.0], [34.9, 1141.0], [35.0, 1143.0], [35.1, 1145.0], [35.2, 1146.0], [35.3, 1148.0], [35.4, 1150.0], [35.5, 1153.0], [35.6, 1155.0], [35.7, 1157.0], [35.8, 1160.0], [35.9, 1162.0], [36.0, 1164.0], [36.1, 1165.0], [36.2, 1167.0], [36.3, 1169.0], [36.4, 1171.0], [36.5, 1174.0], [36.6, 1176.0], [36.7, 1179.0], [36.8, 1182.0], [36.9, 1184.0], [37.0, 1187.0], [37.1, 1189.0], [37.2, 1191.0], [37.3, 1194.0], [37.4, 1197.0], [37.5, 1198.0], [37.6, 1201.0], [37.7, 1203.0], [37.8, 1206.0], [37.9, 1208.0], [38.0, 1210.0], [38.1, 1212.0], [38.2, 1215.0], [38.3, 1219.0], [38.4, 1222.0], [38.5, 1224.0], [38.6, 1226.0], [38.7, 1227.0], [38.8, 1228.0], [38.9, 1230.0], [39.0, 1233.0], [39.1, 1234.0], [39.2, 1235.0], [39.3, 1238.0], [39.4, 1241.0], [39.5, 1243.0], [39.6, 1244.0], [39.7, 1247.0], [39.8, 1250.0], [39.9, 1253.0], [40.0, 1254.0], [40.1, 1256.0], [40.2, 1259.0], [40.3, 1261.0], [40.4, 1263.0], [40.5, 1266.0], [40.6, 1268.0], [40.7, 1272.0], [40.8, 1274.0], [40.9, 1278.0], [41.0, 1280.0], [41.1, 1282.0], [41.2, 1284.0], [41.3, 1286.0], [41.4, 1288.0], [41.5, 1291.0], [41.6, 1292.0], [41.7, 1294.0], [41.8, 1296.0], [41.9, 1299.0], [42.0, 1303.0], [42.1, 1304.0], [42.2, 1308.0], [42.3, 1310.0], [42.4, 1312.0], [42.5, 1316.0], [42.6, 1318.0], [42.7, 1320.0], [42.8, 1321.0], [42.9, 1323.0], [43.0, 1326.0], [43.1, 1328.0], [43.2, 1332.0], [43.3, 1334.0], [43.4, 1336.0], [43.5, 1339.0], [43.6, 1341.0], [43.7, 1343.0], [43.8, 1346.0], [43.9, 1348.0], [44.0, 1350.0], [44.1, 1353.0], [44.2, 1356.0], [44.3, 1359.0], [44.4, 1361.0], [44.5, 1363.0], [44.6, 1366.0], [44.7, 1369.0], [44.8, 1371.0], [44.9, 1373.0], [45.0, 1375.0], [45.1, 1377.0], [45.2, 1379.0], [45.3, 1381.0], [45.4, 1383.0], [45.5, 1385.0], [45.6, 1388.0], [45.7, 1390.0], [45.8, 1392.0], [45.9, 1395.0], [46.0, 1397.0], [46.1, 1399.0], [46.2, 1402.0], [46.3, 1404.0], [46.4, 1405.0], [46.5, 1407.0], [46.6, 1410.0], [46.7, 1412.0], [46.8, 1413.0], [46.9, 1415.0], [47.0, 1417.0], [47.1, 1419.0], [47.2, 1420.0], [47.3, 1422.0], [47.4, 1423.0], [47.5, 1426.0], [47.6, 1428.0], [47.7, 1429.0], [47.8, 1431.0], [47.9, 1432.0], [48.0, 1434.0], [48.1, 1435.0], [48.2, 1437.0], [48.3, 1438.0], [48.4, 1440.0], [48.5, 1442.0], [48.6, 1444.0], [48.7, 1445.0], [48.8, 1447.0], [48.9, 1449.0], [49.0, 1451.0], [49.1, 1453.0], [49.2, 1456.0], [49.3, 1458.0], [49.4, 1459.0], [49.5, 1461.0], [49.6, 1463.0], [49.7, 1466.0], [49.8, 1468.0], [49.9, 1470.0], [50.0, 1472.0], [50.1, 1475.0], [50.2, 1477.0], [50.3, 1479.0], [50.4, 1482.0], [50.5, 1483.0], [50.6, 1486.0], [50.7, 1488.0], [50.8, 1490.0], [50.9, 1491.0], [51.0, 1494.0], [51.1, 1496.0], [51.2, 1498.0], [51.3, 1501.0], [51.4, 1504.0], [51.5, 1505.0], [51.6, 1507.0], [51.7, 1509.0], [51.8, 1511.0], [51.9, 1512.0], [52.0, 1515.0], [52.1, 1518.0], [52.2, 1519.0], [52.3, 1522.0], [52.4, 1523.0], [52.5, 1525.0], [52.6, 1527.0], [52.7, 1530.0], [52.8, 1532.0], [52.9, 1535.0], [53.0, 1537.0], [53.1, 1540.0], [53.2, 1542.0], [53.3, 1544.0], [53.4, 1546.0], [53.5, 1549.0], [53.6, 1550.0], [53.7, 1552.0], [53.8, 1553.0], [53.9, 1555.0], [54.0, 1557.0], [54.1, 1558.0], [54.2, 1560.0], [54.3, 1563.0], [54.4, 1565.0], [54.5, 1568.0], [54.6, 1571.0], [54.7, 1573.0], [54.8, 1575.0], [54.9, 1577.0], [55.0, 1580.0], [55.1, 1583.0], [55.2, 1585.0], [55.3, 1588.0], [55.4, 1591.0], [55.5, 1594.0], [55.6, 1595.0], [55.7, 1597.0], [55.8, 1598.0], [55.9, 1600.0], [56.0, 1602.0], [56.1, 1604.0], [56.2, 1605.0], [56.3, 1607.0], [56.4, 1608.0], [56.5, 1610.0], [56.6, 1613.0], [56.7, 1615.0], [56.8, 1616.0], [56.9, 1619.0], [57.0, 1622.0], [57.1, 1624.0], [57.2, 1627.0], [57.3, 1629.0], [57.4, 1632.0], [57.5, 1634.0], [57.6, 1636.0], [57.7, 1639.0], [57.8, 1641.0], [57.9, 1642.0], [58.0, 1644.0], [58.1, 1646.0], [58.2, 1649.0], [58.3, 1651.0], [58.4, 1652.0], [58.5, 1655.0], [58.6, 1656.0], [58.7, 1659.0], [58.8, 1660.0], [58.9, 1663.0], [59.0, 1666.0], [59.1, 1669.0], [59.2, 1672.0], [59.3, 1674.0], [59.4, 1675.0], [59.5, 1679.0], [59.6, 1681.0], [59.7, 1682.0], [59.8, 1684.0], [59.9, 1686.0], [60.0, 1688.0], [60.1, 1690.0], [60.2, 1692.0], [60.3, 1693.0], [60.4, 1696.0], [60.5, 1698.0], [60.6, 1700.0], [60.7, 1703.0], [60.8, 1705.0], [60.9, 1709.0], [61.0, 1711.0], [61.1, 1713.0], [61.2, 1716.0], [61.3, 1718.0], [61.4, 1720.0], [61.5, 1722.0], [61.6, 1724.0], [61.7, 1726.0], [61.8, 1728.0], [61.9, 1731.0], [62.0, 1733.0], [62.1, 1737.0], [62.2, 1739.0], [62.3, 1741.0], [62.4, 1744.0], [62.5, 1745.0], [62.6, 1747.0], [62.7, 1750.0], [62.8, 1752.0], [62.9, 1754.0], [63.0, 1756.0], [63.1, 1759.0], [63.2, 1761.0], [63.3, 1763.0], [63.4, 1765.0], [63.5, 1768.0], [63.6, 1770.0], [63.7, 1771.0], [63.8, 1773.0], [63.9, 1776.0], [64.0, 1778.0], [64.1, 1782.0], [64.2, 1784.0], [64.3, 1786.0], [64.4, 1788.0], [64.5, 1790.0], [64.6, 1792.0], [64.7, 1794.0], [64.8, 1798.0], [64.9, 1801.0], [65.0, 1804.0], [65.1, 1807.0], [65.2, 1809.0], [65.3, 1811.0], [65.4, 1814.0], [65.5, 1816.0], [65.6, 1819.0], [65.7, 1821.0], [65.8, 1824.0], [65.9, 1826.0], [66.0, 1829.0], [66.1, 1831.0], [66.2, 1833.0], [66.3, 1835.0], [66.4, 1839.0], [66.5, 1840.0], [66.6, 1844.0], [66.7, 1845.0], [66.8, 1847.0], [66.9, 1849.0], [67.0, 1852.0], [67.1, 1855.0], [67.2, 1858.0], [67.3, 1859.0], [67.4, 1861.0], [67.5, 1863.0], [67.6, 1866.0], [67.7, 1868.0], [67.8, 1872.0], [67.9, 1875.0], [68.0, 1877.0], [68.1, 1881.0], [68.2, 1883.0], [68.3, 1885.0], [68.4, 1888.0], [68.5, 1890.0], [68.6, 1892.0], [68.7, 1895.0], [68.8, 1897.0], [68.9, 1899.0], [69.0, 1901.0], [69.1, 1903.0], [69.2, 1905.0], [69.3, 1910.0], [69.4, 1911.0], [69.5, 1914.0], [69.6, 1917.0], [69.7, 1921.0], [69.8, 1924.0], [69.9, 1926.0], [70.0, 1929.0], [70.1, 1932.0], [70.2, 1935.0], [70.3, 1938.0], [70.4, 1940.0], [70.5, 1942.0], [70.6, 1945.0], [70.7, 1948.0], [70.8, 1952.0], [70.9, 1956.0], [71.0, 1962.0], [71.1, 1964.0], [71.2, 1967.0], [71.3, 1971.0], [71.4, 1975.0], [71.5, 1977.0], [71.6, 1981.0], [71.7, 1983.0], [71.8, 1986.0], [71.9, 1988.0], [72.0, 1990.0], [72.1, 1993.0], [72.2, 1996.0], [72.3, 1999.0], [72.4, 2001.0], [72.5, 2004.0], [72.6, 2006.0], [72.7, 2009.0], [72.8, 2012.0], [72.9, 2016.0], [73.0, 2019.0], [73.1, 2022.0], [73.2, 2024.0], [73.3, 2027.0], [73.4, 2029.0], [73.5, 2031.0], [73.6, 2034.0], [73.7, 2036.0], [73.8, 2039.0], [73.9, 2044.0], [74.0, 2047.0], [74.1, 2052.0], [74.2, 2055.0], [74.3, 2057.0], [74.4, 2060.0], [74.5, 2063.0], [74.6, 2065.0], [74.7, 2069.0], [74.8, 2072.0], [74.9, 2074.0], [75.0, 2076.0], [75.1, 2079.0], [75.2, 2083.0], [75.3, 2085.0], [75.4, 2088.0], [75.5, 2091.0], [75.6, 2095.0], [75.7, 2097.0], [75.8, 2099.0], [75.9, 2101.0], [76.0, 2106.0], [76.1, 2112.0], [76.2, 2115.0], [76.3, 2117.0], [76.4, 2120.0], [76.5, 2123.0], [76.6, 2128.0], [76.7, 2130.0], [76.8, 2133.0], [76.9, 2135.0], [77.0, 2139.0], [77.1, 2140.0], [77.2, 2143.0], [77.3, 2149.0], [77.4, 2153.0], [77.5, 2155.0], [77.6, 2158.0], [77.7, 2160.0], [77.8, 2163.0], [77.9, 2164.0], [78.0, 2167.0], [78.1, 2171.0], [78.2, 2176.0], [78.3, 2178.0], [78.4, 2182.0], [78.5, 2184.0], [78.6, 2186.0], [78.7, 2189.0], [78.8, 2192.0], [78.9, 2194.0], [79.0, 2198.0], [79.1, 2200.0], [79.2, 2202.0], [79.3, 2204.0], [79.4, 2207.0], [79.5, 2210.0], [79.6, 2214.0], [79.7, 2217.0], [79.8, 2220.0], [79.9, 2224.0], [80.0, 2228.0], [80.1, 2233.0], [80.2, 2236.0], [80.3, 2241.0], [80.4, 2248.0], [80.5, 2253.0], [80.6, 2256.0], [80.7, 2259.0], [80.8, 2262.0], [80.9, 2266.0], [81.0, 2270.0], [81.1, 2274.0], [81.2, 2277.0], [81.3, 2280.0], [81.4, 2284.0], [81.5, 2288.0], [81.6, 2293.0], [81.7, 2295.0], [81.8, 2300.0], [81.9, 2305.0], [82.0, 2309.0], [82.1, 2311.0], [82.2, 2313.0], [82.3, 2320.0], [82.4, 2323.0], [82.5, 2326.0], [82.6, 2331.0], [82.7, 2334.0], [82.8, 2336.0], [82.9, 2340.0], [83.0, 2344.0], [83.1, 2348.0], [83.2, 2352.0], [83.3, 2358.0], [83.4, 2363.0], [83.5, 2366.0], [83.6, 2368.0], [83.7, 2372.0], [83.8, 2378.0], [83.9, 2384.0], [84.0, 2388.0], [84.1, 2392.0], [84.2, 2398.0], [84.3, 2404.0], [84.4, 2407.0], [84.5, 2410.0], [84.6, 2415.0], [84.7, 2420.0], [84.8, 2425.0], [84.9, 2430.0], [85.0, 2435.0], [85.1, 2439.0], [85.2, 2442.0], [85.3, 2447.0], [85.4, 2451.0], [85.5, 2455.0], [85.6, 2458.0], [85.7, 2461.0], [85.8, 2468.0], [85.9, 2471.0], [86.0, 2477.0], [86.1, 2482.0], [86.2, 2486.0], [86.3, 2492.0], [86.4, 2495.0], [86.5, 2499.0], [86.6, 2503.0], [86.7, 2511.0], [86.8, 2518.0], [86.9, 2522.0], [87.0, 2526.0], [87.1, 2531.0], [87.2, 2536.0], [87.3, 2541.0], [87.4, 2546.0], [87.5, 2552.0], [87.6, 2556.0], [87.7, 2561.0], [87.8, 2564.0], [87.9, 2567.0], [88.0, 2573.0], [88.1, 2582.0], [88.2, 2590.0], [88.3, 2594.0], [88.4, 2601.0], [88.5, 2606.0], [88.6, 2612.0], [88.7, 2618.0], [88.8, 2625.0], [88.9, 2630.0], [89.0, 2635.0], [89.1, 2640.0], [89.2, 2645.0], [89.3, 2650.0], [89.4, 2654.0], [89.5, 2658.0], [89.6, 2663.0], [89.7, 2668.0], [89.8, 2673.0], [89.9, 2676.0], [90.0, 2681.0], [90.1, 2686.0], [90.2, 2691.0], [90.3, 2699.0], [90.4, 2705.0], [90.5, 2712.0], [90.6, 2717.0], [90.7, 2725.0], [90.8, 2731.0], [90.9, 2739.0], [91.0, 2746.0], [91.1, 2751.0], [91.2, 2758.0], [91.3, 2765.0], [91.4, 2776.0], [91.5, 2780.0], [91.6, 2786.0], [91.7, 2791.0], [91.8, 2798.0], [91.9, 2802.0], [92.0, 2809.0], [92.1, 2815.0], [92.2, 2821.0], [92.3, 2828.0], [92.4, 2835.0], [92.5, 2843.0], [92.6, 2849.0], [92.7, 2860.0], [92.8, 2867.0], [92.9, 2879.0], [93.0, 2885.0], [93.1, 2898.0], [93.2, 2911.0], [93.3, 2922.0], [93.4, 2930.0], [93.5, 2938.0], [93.6, 2948.0], [93.7, 2955.0], [93.8, 2963.0], [93.9, 2974.0], [94.0, 2981.0], [94.1, 2994.0], [94.2, 3002.0], [94.3, 3009.0], [94.4, 3017.0], [94.5, 3027.0], [94.6, 3034.0], [94.7, 3044.0], [94.8, 3061.0], [94.9, 3069.0], [95.0, 3079.0], [95.1, 3089.0], [95.2, 3096.0], [95.3, 3105.0], [95.4, 3112.0], [95.5, 3118.0], [95.6, 3127.0], [95.7, 3137.0], [95.8, 3148.0], [95.9, 3156.0], [96.0, 3169.0], [96.1, 3175.0], [96.2, 3188.0], [96.3, 3198.0], [96.4, 3212.0], [96.5, 3231.0], [96.6, 3248.0], [96.7, 3265.0], [96.8, 3284.0], [96.9, 3297.0], [97.0, 3305.0], [97.1, 3325.0], [97.2, 3337.0], [97.3, 3368.0], [97.4, 3386.0], [97.5, 3401.0], [97.6, 3412.0], [97.7, 3431.0], [97.8, 3451.0], [97.9, 3471.0], [98.0, 3498.0], [98.1, 3516.0], [98.2, 3529.0], [98.3, 3544.0], [98.4, 3580.0], [98.5, 3595.0], [98.6, 3618.0], [98.7, 3655.0], [98.8, 3672.0], [98.9, 3730.0], [99.0, 3763.0], [99.1, 3799.0], [99.2, 3855.0], [99.3, 3900.0], [99.4, 3969.0], [99.5, 4009.0], [99.6, 4088.0], [99.7, 4211.0], [99.8, 4389.0], [99.9, 4695.0], [100.0, 5935.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 148.0], [0.1, 148.0], [0.2, 148.0], [0.3, 148.0], [0.4, 148.0], [0.5, 148.0], [0.6, 148.0], [0.7, 148.0], [0.8, 148.0], [0.9, 148.0], [1.0, 149.0], [1.1, 149.0], [1.2, 149.0], [1.3, 149.0], [1.4, 149.0], [1.5, 149.0], [1.6, 149.0], [1.7, 149.0], [1.8, 149.0], [1.9, 149.0], [2.0, 149.0], [2.1, 149.0], [2.2, 149.0], [2.3, 149.0], [2.4, 149.0], [2.5, 149.0], [2.6, 149.0], [2.7, 149.0], [2.8, 150.0], [2.9, 150.0], [3.0, 150.0], [3.1, 150.0], [3.2, 150.0], [3.3, 150.0], [3.4, 150.0], [3.5, 150.0], [3.6, 150.0], [3.7, 150.0], [3.8, 150.0], [3.9, 150.0], [4.0, 150.0], [4.1, 150.0], [4.2, 150.0], [4.3, 150.0], [4.4, 150.0], [4.5, 150.0], [4.6, 151.0], [4.7, 151.0], [4.8, 151.0], [4.9, 151.0], [5.0, 151.0], [5.1, 151.0], [5.2, 151.0], [5.3, 151.0], [5.4, 151.0], [5.5, 151.0], [5.6, 151.0], [5.7, 151.0], [5.8, 151.0], [5.9, 151.0], [6.0, 151.0], [6.1, 151.0], [6.2, 151.0], [6.3, 151.0], [6.4, 152.0], [6.5, 152.0], [6.6, 152.0], [6.7, 152.0], [6.8, 152.0], [6.9, 152.0], [7.0, 152.0], [7.1, 152.0], [7.2, 152.0], [7.3, 152.0], [7.4, 152.0], [7.5, 152.0], [7.6, 152.0], [7.7, 152.0], [7.8, 152.0], [7.9, 152.0], [8.0, 152.0], [8.1, 152.0], [8.2, 152.0], [8.3, 152.0], [8.4, 152.0], [8.5, 152.0], [8.6, 152.0], [8.7, 152.0], [8.8, 152.0], [8.9, 152.0], [9.0, 152.0], [9.1, 152.0], [9.2, 152.0], [9.3, 152.0], [9.4, 152.0], [9.5, 152.0], [9.6, 152.0], [9.7, 152.0], [9.8, 152.0], [9.9, 152.0], [10.0, 152.0], [10.1, 152.0], [10.2, 152.0], [10.3, 152.0], [10.4, 152.0], [10.5, 152.0], [10.6, 152.0], [10.7, 152.0], [10.8, 152.0], [10.9, 152.0], [11.0, 152.0], [11.1, 152.0], [11.2, 152.0], [11.3, 152.0], [11.4, 152.0], [11.5, 152.0], [11.6, 152.0], [11.7, 152.0], [11.8, 152.0], [11.9, 153.0], [12.0, 153.0], [12.1, 153.0], [12.2, 153.0], [12.3, 153.0], [12.4, 153.0], [12.5, 153.0], [12.6, 153.0], [12.7, 153.0], [12.8, 153.0], [12.9, 153.0], [13.0, 153.0], [13.1, 153.0], [13.2, 153.0], [13.3, 153.0], [13.4, 153.0], [13.5, 153.0], [13.6, 153.0], [13.7, 153.0], [13.8, 153.0], [13.9, 153.0], [14.0, 153.0], [14.1, 153.0], [14.2, 153.0], [14.3, 153.0], [14.4, 153.0], [14.5, 153.0], [14.6, 153.0], [14.7, 153.0], [14.8, 153.0], [14.9, 153.0], [15.0, 153.0], [15.1, 153.0], [15.2, 153.0], [15.3, 153.0], [15.4, 153.0], [15.5, 153.0], [15.6, 153.0], [15.7, 153.0], [15.8, 153.0], [15.9, 153.0], [16.0, 153.0], [16.1, 153.0], [16.2, 153.0], [16.3, 153.0], [16.4, 153.0], [16.5, 153.0], [16.6, 153.0], [16.7, 153.0], [16.8, 153.0], [16.9, 153.0], [17.0, 153.0], [17.1, 153.0], [17.2, 153.0], [17.3, 153.0], [17.4, 153.0], [17.5, 153.0], [17.6, 153.0], [17.7, 153.0], [17.8, 153.0], [17.9, 153.0], [18.0, 153.0], [18.1, 153.0], [18.2, 153.0], [18.3, 153.0], [18.4, 153.0], [18.5, 153.0], [18.6, 153.0], [18.7, 153.0], [18.8, 153.0], [18.9, 153.0], [19.0, 153.0], [19.1, 153.0], [19.2, 153.0], [19.3, 153.0], [19.4, 153.0], [19.5, 153.0], [19.6, 153.0], [19.7, 153.0], [19.8, 153.0], [19.9, 153.0], [20.0, 154.0], [20.1, 154.0], [20.2, 154.0], [20.3, 154.0], [20.4, 154.0], [20.5, 154.0], [20.6, 154.0], [20.7, 154.0], [20.8, 154.0], [20.9, 154.0], [21.0, 154.0], [21.1, 154.0], [21.2, 154.0], [21.3, 154.0], [21.4, 154.0], [21.5, 154.0], [21.6, 154.0], [21.7, 154.0], [21.8, 154.0], [21.9, 154.0], [22.0, 154.0], [22.1, 154.0], [22.2, 154.0], [22.3, 154.0], [22.4, 154.0], [22.5, 154.0], [22.6, 154.0], [22.7, 154.0], [22.8, 154.0], [22.9, 154.0], [23.0, 154.0], [23.1, 154.0], [23.2, 154.0], [23.3, 154.0], [23.4, 154.0], [23.5, 154.0], [23.6, 154.0], [23.7, 154.0], [23.8, 154.0], [23.9, 154.0], [24.0, 154.0], [24.1, 154.0], [24.2, 154.0], [24.3, 154.0], [24.4, 154.0], [24.5, 154.0], [24.6, 155.0], [24.7, 155.0], [24.8, 155.0], [24.9, 155.0], [25.0, 155.0], [25.1, 155.0], [25.2, 155.0], [25.3, 155.0], [25.4, 155.0], [25.5, 155.0], [25.6, 155.0], [25.7, 155.0], [25.8, 155.0], [25.9, 155.0], [26.0, 155.0], [26.1, 155.0], [26.2, 155.0], [26.3, 155.0], [26.4, 155.0], [26.5, 155.0], [26.6, 155.0], [26.7, 155.0], [26.8, 155.0], [26.9, 155.0], [27.0, 155.0], [27.1, 155.0], [27.2, 155.0], [27.3, 156.0], [27.4, 156.0], [27.5, 156.0], [27.6, 156.0], [27.7, 156.0], [27.8, 156.0], [27.9, 156.0], [28.0, 156.0], [28.1, 156.0], [28.2, 156.0], [28.3, 156.0], [28.4, 156.0], [28.5, 156.0], [28.6, 156.0], [28.7, 156.0], [28.8, 156.0], [28.9, 156.0], [29.0, 156.0], [29.1, 156.0], [29.2, 156.0], [29.3, 156.0], [29.4, 156.0], [29.5, 156.0], [29.6, 156.0], [29.7, 156.0], [29.8, 156.0], [29.9, 156.0], [30.0, 156.0], [30.1, 156.0], [30.2, 156.0], [30.3, 156.0], [30.4, 156.0], [30.5, 156.0], [30.6, 156.0], [30.7, 156.0], [30.8, 156.0], [30.9, 156.0], [31.0, 156.0], [31.1, 156.0], [31.2, 156.0], [31.3, 156.0], [31.4, 156.0], [31.5, 156.0], [31.6, 156.0], [31.7, 156.0], [31.8, 156.0], [31.9, 156.0], [32.0, 156.0], [32.1, 156.0], [32.2, 156.0], [32.3, 156.0], [32.4, 156.0], [32.5, 156.0], [32.6, 156.0], [32.7, 156.0], [32.8, 156.0], [32.9, 156.0], [33.0, 156.0], [33.1, 156.0], [33.2, 156.0], [33.3, 156.0], [33.4, 156.0], [33.5, 156.0], [33.6, 156.0], [33.7, 156.0], [33.8, 156.0], [33.9, 156.0], [34.0, 156.0], [34.1, 156.0], [34.2, 156.0], [34.3, 156.0], [34.4, 156.0], [34.5, 156.0], [34.6, 156.0], [34.7, 156.0], [34.8, 156.0], [34.9, 156.0], [35.0, 156.0], [35.1, 156.0], [35.2, 156.0], [35.3, 156.0], [35.4, 156.0], [35.5, 156.0], [35.6, 156.0], [35.7, 156.0], [35.8, 156.0], [35.9, 156.0], [36.0, 156.0], [36.1, 156.0], [36.2, 156.0], [36.3, 156.0], [36.4, 156.0], [36.5, 156.0], [36.6, 156.0], [36.7, 156.0], [36.8, 156.0], [36.9, 156.0], [37.0, 156.0], [37.1, 156.0], [37.2, 156.0], [37.3, 156.0], [37.4, 156.0], [37.5, 156.0], [37.6, 156.0], [37.7, 156.0], [37.8, 156.0], [37.9, 156.0], [38.0, 156.0], [38.1, 156.0], [38.2, 157.0], [38.3, 157.0], [38.4, 157.0], [38.5, 157.0], [38.6, 157.0], [38.7, 157.0], [38.8, 157.0], [38.9, 157.0], [39.0, 157.0], [39.1, 157.0], [39.2, 157.0], [39.3, 157.0], [39.4, 157.0], [39.5, 157.0], [39.6, 157.0], [39.7, 157.0], [39.8, 157.0], [39.9, 157.0], [40.0, 157.0], [40.1, 157.0], [40.2, 157.0], [40.3, 157.0], [40.4, 157.0], [40.5, 157.0], [40.6, 157.0], [40.7, 157.0], [40.8, 157.0], [40.9, 157.0], [41.0, 157.0], [41.1, 157.0], [41.2, 157.0], [41.3, 157.0], [41.4, 157.0], [41.5, 157.0], [41.6, 157.0], [41.7, 157.0], [41.8, 157.0], [41.9, 157.0], [42.0, 157.0], [42.1, 157.0], [42.2, 157.0], [42.3, 157.0], [42.4, 157.0], [42.5, 157.0], [42.6, 157.0], [42.7, 157.0], [42.8, 157.0], [42.9, 157.0], [43.0, 157.0], [43.1, 157.0], [43.2, 157.0], [43.3, 157.0], [43.4, 157.0], [43.5, 157.0], [43.6, 157.0], [43.7, 157.0], [43.8, 157.0], [43.9, 157.0], [44.0, 157.0], [44.1, 157.0], [44.2, 157.0], [44.3, 157.0], [44.4, 157.0], [44.5, 157.0], [44.6, 158.0], [44.7, 158.0], [44.8, 158.0], [44.9, 158.0], [45.0, 158.0], [45.1, 158.0], [45.2, 158.0], [45.3, 158.0], [45.4, 158.0], [45.5, 158.0], [45.6, 158.0], [45.7, 158.0], [45.8, 158.0], [45.9, 158.0], [46.0, 158.0], [46.1, 158.0], [46.2, 158.0], [46.3, 158.0], [46.4, 158.0], [46.5, 158.0], [46.6, 158.0], [46.7, 158.0], [46.8, 158.0], [46.9, 158.0], [47.0, 158.0], [47.1, 158.0], [47.2, 158.0], [47.3, 158.0], [47.4, 158.0], [47.5, 158.0], [47.6, 158.0], [47.7, 158.0], [47.8, 158.0], [47.9, 158.0], [48.0, 158.0], [48.1, 158.0], [48.2, 158.0], [48.3, 158.0], [48.4, 158.0], [48.5, 158.0], [48.6, 158.0], [48.7, 158.0], [48.8, 158.0], [48.9, 158.0], [49.0, 158.0], [49.1, 158.0], [49.2, 158.0], [49.3, 158.0], [49.4, 158.0], [49.5, 158.0], [49.6, 158.0], [49.7, 158.0], [49.8, 158.0], [49.9, 158.0], [50.0, 158.0], [50.1, 158.0], [50.2, 158.0], [50.3, 158.0], [50.4, 158.0], [50.5, 158.0], [50.6, 158.0], [50.7, 158.0], [50.8, 158.0], [50.9, 158.0], [51.0, 158.0], [51.1, 158.0], [51.2, 158.0], [51.3, 158.0], [51.4, 158.0], [51.5, 158.0], [51.6, 158.0], [51.7, 158.0], [51.8, 158.0], [51.9, 159.0], [52.0, 159.0], [52.1, 159.0], [52.2, 159.0], [52.3, 159.0], [52.4, 159.0], [52.5, 159.0], [52.6, 159.0], [52.7, 159.0], [52.8, 159.0], [52.9, 159.0], [53.0, 159.0], [53.1, 159.0], [53.2, 159.0], [53.3, 159.0], [53.4, 159.0], [53.5, 159.0], [53.6, 159.0], [53.7, 159.0], [53.8, 159.0], [53.9, 159.0], [54.0, 159.0], [54.1, 159.0], [54.2, 159.0], [54.3, 159.0], [54.4, 159.0], [54.5, 159.0], [54.6, 159.0], [54.7, 159.0], [54.8, 159.0], [54.9, 159.0], [55.0, 159.0], [55.1, 159.0], [55.2, 159.0], [55.3, 159.0], [55.4, 159.0], [55.5, 159.0], [55.6, 159.0], [55.7, 159.0], [55.8, 159.0], [55.9, 159.0], [56.0, 159.0], [56.1, 159.0], [56.2, 159.0], [56.3, 159.0], [56.4, 159.0], [56.5, 159.0], [56.6, 159.0], [56.7, 159.0], [56.8, 159.0], [56.9, 159.0], [57.0, 159.0], [57.1, 159.0], [57.2, 159.0], [57.3, 159.0], [57.4, 159.0], [57.5, 159.0], [57.6, 159.0], [57.7, 159.0], [57.8, 159.0], [57.9, 159.0], [58.0, 159.0], [58.1, 159.0], [58.2, 160.0], [58.3, 160.0], [58.4, 160.0], [58.5, 160.0], [58.6, 160.0], [58.7, 160.0], [58.8, 160.0], [58.9, 160.0], [59.0, 160.0], [59.1, 160.0], [59.2, 160.0], [59.3, 160.0], [59.4, 160.0], [59.5, 160.0], [59.6, 160.0], [59.7, 160.0], [59.8, 160.0], [59.9, 160.0], [60.0, 160.0], [60.1, 160.0], [60.2, 160.0], [60.3, 160.0], [60.4, 160.0], [60.5, 160.0], [60.6, 160.0], [60.7, 160.0], [60.8, 160.0], [60.9, 160.0], [61.0, 160.0], [61.1, 160.0], [61.2, 160.0], [61.3, 160.0], [61.4, 160.0], [61.5, 160.0], [61.6, 160.0], [61.7, 160.0], [61.8, 160.0], [61.9, 160.0], [62.0, 160.0], [62.1, 160.0], [62.2, 160.0], [62.3, 160.0], [62.4, 160.0], [62.5, 160.0], [62.6, 160.0], [62.7, 160.0], [62.8, 160.0], [62.9, 160.0], [63.0, 160.0], [63.1, 160.0], [63.2, 160.0], [63.3, 160.0], [63.4, 160.0], [63.5, 160.0], [63.6, 160.0], [63.7, 160.0], [63.8, 160.0], [63.9, 160.0], [64.0, 160.0], [64.1, 160.0], [64.2, 160.0], [64.3, 160.0], [64.4, 160.0], [64.5, 160.0], [64.6, 160.0], [64.7, 160.0], [64.8, 160.0], [64.9, 160.0], [65.0, 160.0], [65.1, 160.0], [65.2, 160.0], [65.3, 160.0], [65.4, 160.0], [65.5, 160.0], [65.6, 160.0], [65.7, 160.0], [65.8, 160.0], [65.9, 160.0], [66.0, 160.0], [66.1, 160.0], [66.2, 160.0], [66.3, 160.0], [66.4, 160.0], [66.5, 160.0], [66.6, 160.0], [66.7, 160.0], [66.8, 160.0], [66.9, 160.0], [67.0, 160.0], [67.1, 160.0], [67.2, 160.0], [67.3, 161.0], [67.4, 161.0], [67.5, 161.0], [67.6, 161.0], [67.7, 161.0], [67.8, 161.0], [67.9, 161.0], [68.0, 161.0], [68.1, 161.0], [68.2, 161.0], [68.3, 161.0], [68.4, 161.0], [68.5, 161.0], [68.6, 161.0], [68.7, 161.0], [68.8, 161.0], [68.9, 161.0], [69.0, 161.0], [69.1, 161.0], [69.2, 161.0], [69.3, 161.0], [69.4, 161.0], [69.5, 161.0], [69.6, 161.0], [69.7, 161.0], [69.8, 161.0], [69.9, 161.0], [70.0, 161.0], [70.1, 161.0], [70.2, 161.0], [70.3, 161.0], [70.4, 161.0], [70.5, 161.0], [70.6, 161.0], [70.7, 161.0], [70.8, 161.0], [70.9, 161.0], [71.0, 161.0], [71.1, 161.0], [71.2, 161.0], [71.3, 161.0], [71.4, 161.0], [71.5, 161.0], [71.6, 161.0], [71.7, 161.0], [71.8, 161.0], [71.9, 161.0], [72.0, 161.0], [72.1, 161.0], [72.2, 161.0], [72.3, 161.0], [72.4, 161.0], [72.5, 161.0], [72.6, 161.0], [72.7, 161.0], [72.8, 161.0], [72.9, 161.0], [73.0, 161.0], [73.1, 161.0], [73.2, 161.0], [73.3, 161.0], [73.4, 161.0], [73.5, 161.0], [73.6, 161.0], [73.7, 161.0], [73.8, 161.0], [73.9, 161.0], [74.0, 161.0], [74.1, 161.0], [74.2, 161.0], [74.3, 161.0], [74.4, 161.0], [74.5, 161.0], [74.6, 161.0], [74.7, 161.0], [74.8, 161.0], [74.9, 161.0], [75.0, 161.0], [75.1, 161.0], [75.2, 161.0], [75.3, 161.0], [75.4, 161.0], [75.5, 162.0], [75.6, 162.0], [75.7, 162.0], [75.8, 162.0], [75.9, 162.0], [76.0, 162.0], [76.1, 162.0], [76.2, 162.0], [76.3, 162.0], [76.4, 162.0], [76.5, 162.0], [76.6, 162.0], [76.7, 162.0], [76.8, 162.0], [76.9, 162.0], [77.0, 162.0], [77.1, 162.0], [77.2, 162.0], [77.3, 163.0], [77.4, 163.0], [77.5, 163.0], [77.6, 163.0], [77.7, 163.0], [77.8, 163.0], [77.9, 163.0], [78.0, 163.0], [78.1, 163.0], [78.2, 163.0], [78.3, 163.0], [78.4, 163.0], [78.5, 163.0], [78.6, 163.0], [78.7, 163.0], [78.8, 163.0], [78.9, 163.0], [79.0, 163.0], [79.1, 163.0], [79.2, 163.0], [79.3, 163.0], [79.4, 163.0], [79.5, 163.0], [79.6, 163.0], [79.7, 163.0], [79.8, 163.0], [79.9, 163.0], [80.0, 163.0], [80.1, 163.0], [80.2, 163.0], [80.3, 163.0], [80.4, 163.0], [80.5, 163.0], [80.6, 163.0], [80.7, 163.0], [80.8, 163.0], [80.9, 163.0], [81.0, 163.0], [81.1, 163.0], [81.2, 163.0], [81.3, 163.0], [81.4, 163.0], [81.5, 163.0], [81.6, 163.0], [81.7, 163.0], [81.8, 163.0], [81.9, 164.0], [82.0, 164.0], [82.1, 164.0], [82.2, 164.0], [82.3, 164.0], [82.4, 164.0], [82.5, 164.0], [82.6, 164.0], [82.7, 164.0], [82.8, 164.0], [82.9, 164.0], [83.0, 164.0], [83.1, 164.0], [83.2, 164.0], [83.3, 164.0], [83.4, 164.0], [83.5, 164.0], [83.6, 164.0], [83.7, 165.0], [83.8, 165.0], [83.9, 165.0], [84.0, 165.0], [84.1, 165.0], [84.2, 165.0], [84.3, 165.0], [84.4, 165.0], [84.5, 165.0], [84.6, 166.0], [84.7, 166.0], [84.8, 166.0], [84.9, 166.0], [85.0, 166.0], [85.1, 166.0], [85.2, 166.0], [85.3, 166.0], [85.4, 166.0], [85.5, 166.0], [85.6, 166.0], [85.7, 166.0], [85.8, 166.0], [85.9, 166.0], [86.0, 166.0], [86.1, 166.0], [86.2, 166.0], [86.3, 166.0], [86.4, 167.0], [86.5, 167.0], [86.6, 167.0], [86.7, 167.0], [86.8, 167.0], [86.9, 167.0], [87.0, 167.0], [87.1, 167.0], [87.2, 167.0], [87.3, 168.0], [87.4, 168.0], [87.5, 168.0], [87.6, 168.0], [87.7, 168.0], [87.8, 168.0], [87.9, 168.0], [88.0, 168.0], [88.1, 168.0], [88.2, 169.0], [88.3, 169.0], [88.4, 169.0], [88.5, 169.0], [88.6, 169.0], [88.7, 169.0], [88.8, 169.0], [88.9, 169.0], [89.0, 169.0], [89.1, 170.0], [89.2, 170.0], [89.3, 170.0], [89.4, 170.0], [89.5, 170.0], [89.6, 170.0], [89.7, 170.0], [89.8, 170.0], [89.9, 170.0], [90.0, 170.0], [90.1, 170.0], [90.2, 170.0], [90.3, 170.0], [90.4, 170.0], [90.5, 170.0], [90.6, 170.0], [90.7, 170.0], [90.8, 170.0], [90.9, 170.0], [91.0, 171.0], [91.1, 171.0], [91.2, 171.0], [91.3, 171.0], [91.4, 171.0], [91.5, 171.0], [91.6, 171.0], [91.7, 171.0], [91.8, 171.0], [91.9, 173.0], [92.0, 173.0], [92.1, 173.0], [92.2, 173.0], [92.3, 173.0], [92.4, 173.0], [92.5, 173.0], [92.6, 173.0], [92.7, 173.0], [92.8, 173.0], [92.9, 173.0], [93.0, 173.0], [93.1, 173.0], [93.2, 173.0], [93.3, 173.0], [93.4, 173.0], [93.5, 173.0], [93.6, 173.0], [93.7, 173.0], [93.8, 173.0], [93.9, 173.0], [94.0, 173.0], [94.1, 173.0], [94.2, 173.0], [94.3, 173.0], [94.4, 173.0], [94.5, 173.0], [94.6, 175.0], [94.7, 175.0], [94.8, 175.0], [94.9, 175.0], [95.0, 175.0], [95.1, 175.0], [95.2, 175.0], [95.3, 175.0], [95.4, 175.0], [95.5, 176.0], [95.6, 176.0], [95.7, 176.0], [95.8, 176.0], [95.9, 176.0], [96.0, 176.0], [96.1, 176.0], [96.2, 176.0], [96.3, 176.0], [96.4, 178.0], [96.5, 178.0], [96.6, 178.0], [96.7, 178.0], [96.8, 178.0], [96.9, 178.0], [97.0, 178.0], [97.1, 178.0], [97.2, 178.0], [97.3, 182.0], [97.4, 182.0], [97.5, 182.0], [97.6, 182.0], [97.7, 182.0], [97.8, 182.0], [97.9, 182.0], [98.0, 182.0], [98.1, 182.0], [98.2, 189.0], [98.3, 189.0], [98.4, 189.0], [98.5, 189.0], [98.6, 189.0], [98.7, 189.0], [98.8, 189.0], [98.9, 189.0], [99.0, 189.0], [99.1, 189.0], [99.2, 189.0], [99.3, 189.0], [99.4, 189.0], [99.5, 189.0], [99.6, 189.0], [99.7, 189.0], [99.8, 189.0], [99.9, 189.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 11.0], [0.1, 13.0], [0.2, 14.0], [0.3, 14.0], [0.4, 15.0], [0.5, 15.0], [0.6, 16.0], [0.7, 16.0], [0.8, 16.0], [0.9, 17.0], [1.0, 17.0], [1.1, 17.0], [1.2, 17.0], [1.3, 18.0], [1.4, 18.0], [1.5, 18.0], [1.6, 18.0], [1.7, 18.0], [1.8, 18.0], [1.9, 19.0], [2.0, 19.0], [2.1, 19.0], [2.2, 19.0], [2.3, 19.0], [2.4, 19.0], [2.5, 20.0], [2.6, 20.0], [2.7, 20.0], [2.8, 20.0], [2.9, 20.0], [3.0, 20.0], [3.1, 20.0], [3.2, 21.0], [3.3, 21.0], [3.4, 21.0], [3.5, 21.0], [3.6, 21.0], [3.7, 21.0], [3.8, 21.0], [3.9, 22.0], [4.0, 22.0], [4.1, 22.0], [4.2, 22.0], [4.3, 22.0], [4.4, 22.0], [4.5, 22.0], [4.6, 22.0], [4.7, 22.0], [4.8, 23.0], [4.9, 23.0], [5.0, 23.0], [5.1, 23.0], [5.2, 23.0], [5.3, 23.0], [5.4, 23.0], [5.5, 23.0], [5.6, 24.0], [5.7, 24.0], [5.8, 24.0], [5.9, 24.0], [6.0, 24.0], [6.1, 24.0], [6.2, 24.0], [6.3, 24.0], [6.4, 25.0], [6.5, 25.0], [6.6, 25.0], [6.7, 25.0], [6.8, 25.0], [6.9, 25.0], [7.0, 25.0], [7.1, 25.0], [7.2, 26.0], [7.3, 26.0], [7.4, 26.0], [7.5, 26.0], [7.6, 26.0], [7.7, 26.0], [7.8, 27.0], [7.9, 27.0], [8.0, 27.0], [8.1, 27.0], [8.2, 27.0], [8.3, 27.0], [8.4, 27.0], [8.5, 27.0], [8.6, 28.0], [8.7, 28.0], [8.8, 28.0], [8.9, 28.0], [9.0, 28.0], [9.1, 28.0], [9.2, 29.0], [9.3, 29.0], [9.4, 29.0], [9.5, 29.0], [9.6, 29.0], [9.7, 30.0], [9.8, 30.0], [9.9, 30.0], [10.0, 30.0], [10.1, 30.0], [10.2, 30.0], [10.3, 31.0], [10.4, 31.0], [10.5, 31.0], [10.6, 31.0], [10.7, 31.0], [10.8, 32.0], [10.9, 32.0], [11.0, 32.0], [11.1, 32.0], [11.2, 33.0], [11.3, 33.0], [11.4, 33.0], [11.5, 34.0], [11.6, 34.0], [11.7, 34.0], [11.8, 35.0], [11.9, 35.0], [12.0, 35.0], [12.1, 36.0], [12.2, 36.0], [12.3, 37.0], [12.4, 37.0], [12.5, 37.0], [12.6, 38.0], [12.7, 39.0], [12.8, 40.0], [12.9, 42.0], [13.0, 43.0], [13.1, 45.0], [13.2, 51.0], [13.3, 72.0], [13.4, 120.0], [13.5, 169.0], [13.6, 202.0], [13.7, 243.0], [13.8, 257.0], [13.9, 269.0], [14.0, 290.0], [14.1, 309.0], [14.2, 325.0], [14.3, 343.0], [14.4, 354.0], [14.5, 363.0], [14.6, 371.0], [14.7, 388.0], [14.8, 404.0], [14.9, 417.0], [15.0, 425.0], [15.1, 431.0], [15.2, 437.0], [15.3, 445.0], [15.4, 456.0], [15.5, 463.0], [15.6, 471.0], [15.7, 483.0], [15.8, 494.0], [15.9, 497.0], [16.0, 502.0], [16.1, 506.0], [16.2, 509.0], [16.3, 517.0], [16.4, 524.0], [16.5, 528.0], [16.6, 534.0], [16.7, 545.0], [16.8, 551.0], [16.9, 554.0], [17.0, 562.0], [17.1, 566.0], [17.2, 568.0], [17.3, 575.0], [17.4, 579.0], [17.5, 586.0], [17.6, 593.0], [17.7, 598.0], [17.8, 604.0], [17.9, 610.0], [18.0, 614.0], [18.1, 617.0], [18.2, 622.0], [18.3, 626.0], [18.4, 630.0], [18.5, 634.0], [18.6, 638.0], [18.7, 643.0], [18.8, 647.0], [18.9, 652.0], [19.0, 657.0], [19.1, 660.0], [19.2, 664.0], [19.3, 666.0], [19.4, 670.0], [19.5, 674.0], [19.6, 677.0], [19.7, 681.0], [19.8, 685.0], [19.9, 689.0], [20.0, 692.0], [20.1, 696.0], [20.2, 701.0], [20.3, 705.0], [20.4, 707.0], [20.5, 710.0], [20.6, 715.0], [20.7, 716.0], [20.8, 721.0], [20.9, 724.0], [21.0, 727.0], [21.1, 729.0], [21.2, 733.0], [21.3, 737.0], [21.4, 740.0], [21.5, 744.0], [21.6, 748.0], [21.7, 751.0], [21.8, 754.0], [21.9, 758.0], [22.0, 761.0], [22.1, 764.0], [22.2, 768.0], [22.3, 771.0], [22.4, 775.0], [22.5, 778.0], [22.6, 782.0], [22.7, 790.0], [22.8, 794.0], [22.9, 801.0], [23.0, 806.0], [23.1, 808.0], [23.2, 811.0], [23.3, 814.0], [23.4, 818.0], [23.5, 821.0], [23.6, 825.0], [23.7, 827.0], [23.8, 831.0], [23.9, 834.0], [24.0, 838.0], [24.1, 840.0], [24.2, 842.0], [24.3, 845.0], [24.4, 848.0], [24.5, 856.0], [24.6, 859.0], [24.7, 863.0], [24.8, 866.0], [24.9, 870.0], [25.0, 873.0], [25.1, 876.0], [25.2, 878.0], [25.3, 882.0], [25.4, 884.0], [25.5, 887.0], [25.6, 891.0], [25.7, 893.0], [25.8, 896.0], [25.9, 898.0], [26.0, 901.0], [26.1, 906.0], [26.2, 909.0], [26.3, 912.0], [26.4, 916.0], [26.5, 918.0], [26.6, 920.0], [26.7, 924.0], [26.8, 925.0], [26.9, 929.0], [27.0, 932.0], [27.1, 935.0], [27.2, 937.0], [27.3, 940.0], [27.4, 942.0], [27.5, 946.0], [27.6, 948.0], [27.7, 950.0], [27.8, 954.0], [27.9, 956.0], [28.0, 961.0], [28.1, 964.0], [28.2, 967.0], [28.3, 970.0], [28.4, 973.0], [28.5, 975.0], [28.6, 978.0], [28.7, 981.0], [28.8, 984.0], [28.9, 986.0], [29.0, 988.0], [29.1, 991.0], [29.2, 994.0], [29.3, 996.0], [29.4, 998.0], [29.5, 1001.0], [29.6, 1004.0], [29.7, 1007.0], [29.8, 1010.0], [29.9, 1013.0], [30.0, 1014.0], [30.1, 1016.0], [30.2, 1019.0], [30.3, 1021.0], [30.4, 1023.0], [30.5, 1025.0], [30.6, 1027.0], [30.7, 1029.0], [30.8, 1032.0], [30.9, 1034.0], [31.0, 1036.0], [31.1, 1038.0], [31.2, 1040.0], [31.3, 1043.0], [31.4, 1045.0], [31.5, 1047.0], [31.6, 1050.0], [31.7, 1053.0], [31.8, 1056.0], [31.9, 1058.0], [32.0, 1060.0], [32.1, 1062.0], [32.2, 1064.0], [32.3, 1067.0], [32.4, 1068.0], [32.5, 1071.0], [32.6, 1075.0], [32.7, 1077.0], [32.8, 1079.0], [32.9, 1080.0], [33.0, 1082.0], [33.1, 1084.0], [33.2, 1087.0], [33.3, 1088.0], [33.4, 1091.0], [33.5, 1093.0], [33.6, 1096.0], [33.7, 1099.0], [33.8, 1101.0], [33.9, 1104.0], [34.0, 1106.0], [34.1, 1108.0], [34.2, 1111.0], [34.3, 1113.0], [34.4, 1116.0], [34.5, 1118.0], [34.6, 1121.0], [34.7, 1122.0], [34.8, 1123.0], [34.9, 1126.0], [35.0, 1128.0], [35.1, 1130.0], [35.2, 1132.0], [35.3, 1134.0], [35.4, 1137.0], [35.5, 1140.0], [35.6, 1142.0], [35.7, 1144.0], [35.8, 1145.0], [35.9, 1148.0], [36.0, 1150.0], [36.1, 1153.0], [36.2, 1154.0], [36.3, 1156.0], [36.4, 1158.0], [36.5, 1160.0], [36.6, 1162.0], [36.7, 1165.0], [36.8, 1168.0], [36.9, 1169.0], [37.0, 1171.0], [37.1, 1174.0], [37.2, 1176.0], [37.3, 1181.0], [37.4, 1183.0], [37.5, 1186.0], [37.6, 1188.0], [37.7, 1191.0], [37.8, 1193.0], [37.9, 1196.0], [38.0, 1197.0], [38.1, 1199.0], [38.2, 1201.0], [38.3, 1204.0], [38.4, 1207.0], [38.5, 1210.0], [38.6, 1211.0], [38.7, 1214.0], [38.8, 1217.0], [38.9, 1219.0], [39.0, 1221.0], [39.1, 1223.0], [39.2, 1225.0], [39.3, 1228.0], [39.4, 1231.0], [39.5, 1233.0], [39.6, 1236.0], [39.7, 1238.0], [39.8, 1242.0], [39.9, 1243.0], [40.0, 1246.0], [40.1, 1247.0], [40.2, 1250.0], [40.3, 1254.0], [40.4, 1257.0], [40.5, 1259.0], [40.6, 1261.0], [40.7, 1263.0], [40.8, 1264.0], [40.9, 1267.0], [41.0, 1269.0], [41.1, 1271.0], [41.2, 1274.0], [41.3, 1276.0], [41.4, 1277.0], [41.5, 1278.0], [41.6, 1282.0], [41.7, 1284.0], [41.8, 1285.0], [41.9, 1287.0], [42.0, 1289.0], [42.1, 1291.0], [42.2, 1295.0], [42.3, 1297.0], [42.4, 1299.0], [42.5, 1301.0], [42.6, 1303.0], [42.7, 1303.0], [42.8, 1305.0], [42.9, 1309.0], [43.0, 1310.0], [43.1, 1313.0], [43.2, 1315.0], [43.3, 1316.0], [43.4, 1319.0], [43.5, 1320.0], [43.6, 1323.0], [43.7, 1323.0], [43.8, 1325.0], [43.9, 1329.0], [44.0, 1331.0], [44.1, 1333.0], [44.2, 1335.0], [44.3, 1338.0], [44.4, 1339.0], [44.5, 1342.0], [44.6, 1346.0], [44.7, 1347.0], [44.8, 1349.0], [44.9, 1352.0], [45.0, 1353.0], [45.1, 1357.0], [45.2, 1358.0], [45.3, 1360.0], [45.4, 1363.0], [45.5, 1365.0], [45.6, 1367.0], [45.7, 1369.0], [45.8, 1372.0], [45.9, 1373.0], [46.0, 1375.0], [46.1, 1377.0], [46.2, 1379.0], [46.3, 1381.0], [46.4, 1383.0], [46.5, 1385.0], [46.6, 1387.0], [46.7, 1389.0], [46.8, 1391.0], [46.9, 1393.0], [47.0, 1395.0], [47.1, 1398.0], [47.2, 1400.0], [47.3, 1402.0], [47.4, 1404.0], [47.5, 1406.0], [47.6, 1408.0], [47.7, 1410.0], [47.8, 1412.0], [47.9, 1413.0], [48.0, 1416.0], [48.1, 1418.0], [48.2, 1420.0], [48.3, 1422.0], [48.4, 1424.0], [48.5, 1426.0], [48.6, 1429.0], [48.7, 1433.0], [48.8, 1435.0], [48.9, 1436.0], [49.0, 1438.0], [49.1, 1441.0], [49.2, 1443.0], [49.3, 1445.0], [49.4, 1448.0], [49.5, 1451.0], [49.6, 1453.0], [49.7, 1455.0], [49.8, 1457.0], [49.9, 1460.0], [50.0, 1462.0], [50.1, 1463.0], [50.2, 1465.0], [50.3, 1467.0], [50.4, 1468.0], [50.5, 1471.0], [50.6, 1473.0], [50.7, 1475.0], [50.8, 1476.0], [50.9, 1478.0], [51.0, 1480.0], [51.1, 1483.0], [51.2, 1485.0], [51.3, 1487.0], [51.4, 1489.0], [51.5, 1491.0], [51.6, 1493.0], [51.7, 1496.0], [51.8, 1498.0], [51.9, 1501.0], [52.0, 1503.0], [52.1, 1505.0], [52.2, 1508.0], [52.3, 1509.0], [52.4, 1511.0], [52.5, 1515.0], [52.6, 1517.0], [52.7, 1519.0], [52.8, 1522.0], [52.9, 1523.0], [53.0, 1525.0], [53.1, 1528.0], [53.2, 1529.0], [53.3, 1533.0], [53.4, 1535.0], [53.5, 1537.0], [53.6, 1541.0], [53.7, 1544.0], [53.8, 1546.0], [53.9, 1548.0], [54.0, 1550.0], [54.1, 1552.0], [54.2, 1555.0], [54.3, 1557.0], [54.4, 1559.0], [54.5, 1561.0], [54.6, 1564.0], [54.7, 1565.0], [54.8, 1568.0], [54.9, 1569.0], [55.0, 1572.0], [55.1, 1575.0], [55.2, 1577.0], [55.3, 1579.0], [55.4, 1582.0], [55.5, 1585.0], [55.6, 1586.0], [55.7, 1589.0], [55.8, 1593.0], [55.9, 1595.0], [56.0, 1596.0], [56.1, 1597.0], [56.2, 1599.0], [56.3, 1602.0], [56.4, 1604.0], [56.5, 1605.0], [56.6, 1607.0], [56.7, 1609.0], [56.8, 1611.0], [56.9, 1614.0], [57.0, 1617.0], [57.1, 1619.0], [57.2, 1621.0], [57.3, 1623.0], [57.4, 1626.0], [57.5, 1628.0], [57.6, 1630.0], [57.7, 1632.0], [57.8, 1634.0], [57.9, 1636.0], [58.0, 1638.0], [58.1, 1641.0], [58.2, 1644.0], [58.3, 1645.0], [58.4, 1648.0], [58.5, 1650.0], [58.6, 1652.0], [58.7, 1655.0], [58.8, 1657.0], [58.9, 1659.0], [59.0, 1661.0], [59.1, 1663.0], [59.2, 1666.0], [59.3, 1669.0], [59.4, 1672.0], [59.5, 1674.0], [59.6, 1676.0], [59.7, 1679.0], [59.8, 1681.0], [59.9, 1683.0], [60.0, 1686.0], [60.1, 1688.0], [60.2, 1691.0], [60.3, 1693.0], [60.4, 1695.0], [60.5, 1699.0], [60.6, 1702.0], [60.7, 1706.0], [60.8, 1709.0], [60.9, 1711.0], [61.0, 1714.0], [61.1, 1717.0], [61.2, 1718.0], [61.3, 1721.0], [61.4, 1723.0], [61.5, 1725.0], [61.6, 1727.0], [61.7, 1729.0], [61.8, 1731.0], [61.9, 1733.0], [62.0, 1736.0], [62.1, 1738.0], [62.2, 1741.0], [62.3, 1744.0], [62.4, 1747.0], [62.5, 1748.0], [62.6, 1750.0], [62.7, 1752.0], [62.8, 1754.0], [62.9, 1758.0], [63.0, 1761.0], [63.1, 1763.0], [63.2, 1766.0], [63.3, 1769.0], [63.4, 1772.0], [63.5, 1774.0], [63.6, 1776.0], [63.7, 1779.0], [63.8, 1782.0], [63.9, 1785.0], [64.0, 1787.0], [64.1, 1789.0], [64.2, 1791.0], [64.3, 1793.0], [64.4, 1796.0], [64.5, 1798.0], [64.6, 1800.0], [64.7, 1803.0], [64.8, 1805.0], [64.9, 1808.0], [65.0, 1811.0], [65.1, 1813.0], [65.2, 1815.0], [65.3, 1817.0], [65.4, 1819.0], [65.5, 1821.0], [65.6, 1824.0], [65.7, 1827.0], [65.8, 1828.0], [65.9, 1831.0], [66.0, 1833.0], [66.1, 1837.0], [66.2, 1839.0], [66.3, 1840.0], [66.4, 1844.0], [66.5, 1845.0], [66.6, 1849.0], [66.7, 1853.0], [66.8, 1856.0], [66.9, 1858.0], [67.0, 1860.0], [67.1, 1863.0], [67.2, 1865.0], [67.3, 1868.0], [67.4, 1871.0], [67.5, 1875.0], [67.6, 1877.0], [67.7, 1879.0], [67.8, 1881.0], [67.9, 1883.0], [68.0, 1886.0], [68.1, 1889.0], [68.2, 1891.0], [68.3, 1894.0], [68.4, 1896.0], [68.5, 1897.0], [68.6, 1901.0], [68.7, 1904.0], [68.8, 1906.0], [68.9, 1908.0], [69.0, 1911.0], [69.1, 1912.0], [69.2, 1915.0], [69.3, 1919.0], [69.4, 1920.0], [69.5, 1922.0], [69.6, 1924.0], [69.7, 1926.0], [69.8, 1929.0], [69.9, 1932.0], [70.0, 1935.0], [70.1, 1937.0], [70.2, 1941.0], [70.3, 1944.0], [70.4, 1945.0], [70.5, 1948.0], [70.6, 1951.0], [70.7, 1952.0], [70.8, 1955.0], [70.9, 1958.0], [71.0, 1959.0], [71.1, 1965.0], [71.2, 1968.0], [71.3, 1972.0], [71.4, 1974.0], [71.5, 1976.0], [71.6, 1979.0], [71.7, 1982.0], [71.8, 1985.0], [71.9, 1987.0], [72.0, 1990.0], [72.1, 1991.0], [72.2, 1993.0], [72.3, 1998.0], [72.4, 2000.0], [72.5, 2001.0], [72.6, 2005.0], [72.7, 2007.0], [72.8, 2010.0], [72.9, 2013.0], [73.0, 2018.0], [73.1, 2020.0], [73.2, 2023.0], [73.3, 2025.0], [73.4, 2027.0], [73.5, 2030.0], [73.6, 2033.0], [73.7, 2036.0], [73.8, 2038.0], [73.9, 2040.0], [74.0, 2044.0], [74.1, 2046.0], [74.2, 2049.0], [74.3, 2052.0], [74.4, 2055.0], [74.5, 2059.0], [74.6, 2062.0], [74.7, 2065.0], [74.8, 2067.0], [74.9, 2071.0], [75.0, 2074.0], [75.1, 2077.0], [75.2, 2079.0], [75.3, 2080.0], [75.4, 2083.0], [75.5, 2087.0], [75.6, 2089.0], [75.7, 2092.0], [75.8, 2094.0], [75.9, 2098.0], [76.0, 2101.0], [76.1, 2103.0], [76.2, 2105.0], [76.3, 2108.0], [76.4, 2110.0], [76.5, 2114.0], [76.6, 2117.0], [76.7, 2121.0], [76.8, 2124.0], [76.9, 2127.0], [77.0, 2130.0], [77.1, 2135.0], [77.2, 2139.0], [77.3, 2141.0], [77.4, 2146.0], [77.5, 2149.0], [77.6, 2152.0], [77.7, 2157.0], [77.8, 2160.0], [77.9, 2163.0], [78.0, 2166.0], [78.1, 2170.0], [78.2, 2172.0], [78.3, 2175.0], [78.4, 2177.0], [78.5, 2180.0], [78.6, 2183.0], [78.7, 2184.0], [78.8, 2189.0], [78.9, 2193.0], [79.0, 2196.0], [79.1, 2198.0], [79.2, 2203.0], [79.3, 2205.0], [79.4, 2209.0], [79.5, 2213.0], [79.6, 2218.0], [79.7, 2222.0], [79.8, 2229.0], [79.9, 2232.0], [80.0, 2235.0], [80.1, 2238.0], [80.2, 2243.0], [80.3, 2245.0], [80.4, 2247.0], [80.5, 2251.0], [80.6, 2255.0], [80.7, 2259.0], [80.8, 2262.0], [80.9, 2265.0], [81.0, 2270.0], [81.1, 2275.0], [81.2, 2280.0], [81.3, 2282.0], [81.4, 2285.0], [81.5, 2288.0], [81.6, 2292.0], [81.7, 2294.0], [81.8, 2297.0], [81.9, 2300.0], [82.0, 2305.0], [82.1, 2309.0], [82.2, 2314.0], [82.3, 2318.0], [82.4, 2322.0], [82.5, 2325.0], [82.6, 2330.0], [82.7, 2333.0], [82.8, 2340.0], [82.9, 2345.0], [83.0, 2351.0], [83.1, 2356.0], [83.2, 2361.0], [83.3, 2365.0], [83.4, 2368.0], [83.5, 2370.0], [83.6, 2375.0], [83.7, 2378.0], [83.8, 2383.0], [83.9, 2386.0], [84.0, 2392.0], [84.1, 2395.0], [84.2, 2399.0], [84.3, 2404.0], [84.4, 2409.0], [84.5, 2413.0], [84.6, 2416.0], [84.7, 2419.0], [84.8, 2424.0], [84.9, 2431.0], [85.0, 2437.0], [85.1, 2442.0], [85.2, 2444.0], [85.3, 2449.0], [85.4, 2455.0], [85.5, 2459.0], [85.6, 2462.0], [85.7, 2469.0], [85.8, 2472.0], [85.9, 2475.0], [86.0, 2481.0], [86.1, 2488.0], [86.2, 2494.0], [86.3, 2499.0], [86.4, 2503.0], [86.5, 2509.0], [86.6, 2513.0], [86.7, 2516.0], [86.8, 2518.0], [86.9, 2526.0], [87.0, 2530.0], [87.1, 2532.0], [87.2, 2538.0], [87.3, 2544.0], [87.4, 2550.0], [87.5, 2554.0], [87.6, 2559.0], [87.7, 2566.0], [87.8, 2572.0], [87.9, 2575.0], [88.0, 2582.0], [88.1, 2587.0], [88.2, 2591.0], [88.3, 2596.0], [88.4, 2602.0], [88.5, 2611.0], [88.6, 2616.0], [88.7, 2622.0], [88.8, 2629.0], [88.9, 2635.0], [89.0, 2642.0], [89.1, 2644.0], [89.2, 2650.0], [89.3, 2656.0], [89.4, 2662.0], [89.5, 2668.0], [89.6, 2674.0], [89.7, 2680.0], [89.8, 2685.0], [89.9, 2689.0], [90.0, 2699.0], [90.1, 2705.0], [90.2, 2709.0], [90.3, 2714.0], [90.4, 2719.0], [90.5, 2723.0], [90.6, 2728.0], [90.7, 2735.0], [90.8, 2742.0], [90.9, 2748.0], [91.0, 2755.0], [91.1, 2762.0], [91.2, 2767.0], [91.3, 2771.0], [91.4, 2779.0], [91.5, 2783.0], [91.6, 2787.0], [91.7, 2790.0], [91.8, 2797.0], [91.9, 2806.0], [92.0, 2813.0], [92.1, 2819.0], [92.2, 2826.0], [92.3, 2834.0], [92.4, 2844.0], [92.5, 2854.0], [92.6, 2859.0], [92.7, 2868.0], [92.8, 2874.0], [92.9, 2882.0], [93.0, 2891.0], [93.1, 2897.0], [93.2, 2909.0], [93.3, 2916.0], [93.4, 2929.0], [93.5, 2936.0], [93.6, 2950.0], [93.7, 2956.0], [93.8, 2963.0], [93.9, 2970.0], [94.0, 2979.0], [94.1, 2988.0], [94.2, 2995.0], [94.3, 3007.0], [94.4, 3023.0], [94.5, 3031.0], [94.6, 3037.0], [94.7, 3046.0], [94.8, 3054.0], [94.9, 3060.0], [95.0, 3070.0], [95.1, 3082.0], [95.2, 3091.0], [95.3, 3107.0], [95.4, 3111.0], [95.5, 3127.0], [95.6, 3138.0], [95.7, 3146.0], [95.8, 3158.0], [95.9, 3171.0], [96.0, 3177.0], [96.1, 3187.0], [96.2, 3201.0], [96.3, 3213.0], [96.4, 3227.0], [96.5, 3248.0], [96.6, 3266.0], [96.7, 3277.0], [96.8, 3288.0], [96.9, 3305.0], [97.0, 3322.0], [97.1, 3346.0], [97.2, 3370.0], [97.3, 3403.0], [97.4, 3423.0], [97.5, 3440.0], [97.6, 3460.0], [97.7, 3487.0], [97.8, 3507.0], [97.9, 3519.0], [98.0, 3547.0], [98.1, 3568.0], [98.2, 3591.0], [98.3, 3612.0], [98.4, 3637.0], [98.5, 3661.0], [98.6, 3701.0], [98.7, 3722.0], [98.8, 3752.0], [98.9, 3792.0], [99.0, 3839.0], [99.1, 3903.0], [99.2, 3934.0], [99.3, 3991.0], [99.4, 4041.0], [99.5, 4096.0], [99.6, 4171.0], [99.7, 4253.0], [99.8, 4395.0], [99.9, 4658.0], [100.0, 5196.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1470.0, "series": [{"data": [[0.0, 1455.0], [600.0, 266.0], [700.0, 301.0], [800.0, 348.0], [900.0, 389.0], [1000.0, 400.0], [1100.0, 498.0], [1200.0, 483.0], [1300.0, 464.0], [1400.0, 562.0], [1500.0, 510.0], [1600.0, 516.0], [1700.0, 468.0], [1800.0, 450.0], [1900.0, 373.0], [2000.0, 386.0], [2100.0, 360.0], [2200.0, 296.0], [2300.0, 269.0], [2400.0, 253.0], [2500.0, 205.0], [2600.0, 211.0], [2700.0, 166.0], [2800.0, 140.0], [2900.0, 115.0], [3000.0, 120.0], [3100.0, 118.0], [3200.0, 65.0], [3300.0, 63.0], [3400.0, 60.0], [3500.0, 54.0], [3600.0, 37.0], [3700.0, 28.0], [3800.0, 21.0], [3900.0, 18.0], [4000.0, 19.0], [4300.0, 4.0], [4200.0, 8.0], [4100.0, 7.0], [4600.0, 3.0], [4500.0, 4.0], [4400.0, 4.0], [4900.0, 3.0], [5100.0, 1.0], [5200.0, 2.0], [5300.0, 1.0], [5500.0, 1.0], [5700.0, 1.0], [5900.0, 2.0], [100.0, 24.0], [200.0, 54.0], [300.0, 65.0], [400.0, 127.0], [500.0, 202.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[100.0, 110.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1470.0], [600.0, 271.0], [700.0, 296.0], [800.0, 337.0], [900.0, 389.0], [1000.0, 467.0], [1100.0, 484.0], [1200.0, 475.0], [1300.0, 522.0], [1400.0, 514.0], [1500.0, 482.0], [1600.0, 473.0], [1700.0, 445.0], [1800.0, 440.0], [1900.0, 421.0], [2000.0, 391.0], [2100.0, 350.0], [2300.0, 259.0], [2200.0, 301.0], [2400.0, 230.0], [2500.0, 225.0], [2600.0, 181.0], [2700.0, 200.0], [2800.0, 143.0], [2900.0, 124.0], [3000.0, 110.0], [3100.0, 103.0], [3200.0, 76.0], [3300.0, 42.0], [3400.0, 53.0], [3500.0, 55.0], [3700.0, 38.0], [3600.0, 38.0], [3800.0, 17.0], [3900.0, 25.0], [4000.0, 21.0], [4200.0, 8.0], [4100.0, 17.0], [4300.0, 7.0], [4500.0, 4.0], [4400.0, 3.0], [4600.0, 5.0], [4700.0, 3.0], [4800.0, 3.0], [5000.0, 1.0], [5100.0, 2.0], [4900.0, 1.0], [100.0, 25.0], [200.0, 49.0], [300.0, 78.0], [400.0, 131.0], [500.0, 195.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 59.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 10630.0, "series": [{"data": [[0.0, 3581.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7840.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 10630.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 59.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 40.634655532359076, "minX": 1.58767644E12, "maxY": 110.0, "series": [{"data": [[1.58767704E12, 110.0], [1.58767674E12, 110.0], [1.58767644E12, 50.944033790918695], [1.5876771E12, 93.56074270557029], [1.58767698E12, 110.0], [1.58767668E12, 110.0], [1.58767656E12, 110.0], [1.58767692E12, 110.0], [1.58767662E12, 110.0], [1.5876768E12, 110.0], [1.5876765E12, 103.98712827341326], [1.58767716E12, 40.634655532359076], [1.58767686E12, 110.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767716E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.0, "maxY": 1693.633571036746, "series": [{"data": [[2.0, 15.0], [4.0, 23.666666666666668], [5.0, 33.0], [6.0, 32.25], [7.0, 32.4], [8.0, 28.0], [9.0, 30.0], [10.0, 29.25], [11.0, 30.333333333333332], [12.0, 30.0], [13.0, 28.4], [14.0, 29.0], [15.0, 19.0], [16.0, 24.8], [17.0, 25.857142857142858], [18.0, 29.666666666666668], [19.0, 26.5], [20.0, 27.6], [21.0, 26.153846153846153], [22.0, 26.4], [23.0, 23.5], [24.0, 28.6], [25.0, 28.6], [26.0, 27.142857142857142], [27.0, 23.625], [28.0, 26.7], [29.0, 31.5], [30.0, 21.0], [31.0, 122.58333333333334], [32.0, 26.833333333333332], [33.0, 26.714285714285715], [34.0, 16.0], [35.0, 220.83333333333334], [36.0, 25.444444444444446], [37.0, 32.18181818181819], [38.0, 24.09090909090909], [39.0, 21.0], [40.0, 30.071428571428573], [41.0, 26.2], [42.0, 21.75], [43.0, 22.5], [44.0, 23.0], [45.0, 24.400000000000002], [46.0, 26.454545454545453], [47.0, 22.714285714285715], [48.0, 26.4], [49.0, 28.625], [50.0, 26.571428571428573], [51.0, 26.733333333333334], [52.0, 25.583333333333332], [53.0, 28.636363636363637], [54.0, 22.071428571428573], [55.0, 26.285714285714292], [56.0, 25.82608695652174], [57.0, 23.69230769230769], [58.0, 28.555555555555554], [59.0, 26.3], [60.0, 25.65], [61.0, 25.073170731707314], [62.0, 27.3125], [63.0, 23.0], [64.0, 27.439999999999998], [65.0, 24.48], [66.0, 28.076923076923073], [67.0, 22.75], [68.0, 26.920000000000005], [69.0, 24.0], [70.0, 25.33333333333333], [71.0, 30.041666666666664], [72.0, 22.333333333333332], [73.0, 24.9375], [74.0, 22.560000000000002], [75.0, 25.333333333333332], [76.0, 24.91666666666667], [77.0, 25.70967741935484], [78.0, 24.35294117647059], [79.0, 24.851851851851855], [80.0, 24.882352941176467], [81.0, 27.294117647058822], [82.0, 300.3548387096775], [83.0, 245.91666666666669], [84.0, 310.18750000000006], [85.0, 978.7999999999998], [86.0, 307.73333333333335], [87.0, 126.64285714285714], [88.0, 25.466666666666665], [89.0, 887.658536585366], [90.0, 834.3846153846152], [91.0, 1436.9264705882351], [92.0, 958.4878048780487], [93.0, 177.1], [94.0, 22.733333333333334], [95.0, 942.0243902439025], [96.0, 174.52941176470588], [97.0, 697.1724137931035], [98.0, 221.95238095238096], [99.0, 1015.9473684210524], [100.0, 1015.8108108108108], [101.0, 36.733333333333334], [102.0, 100.88235294117646], [103.0, 1509.9811320754711], [104.0, 1237.4615384615383], [105.0, 1212.0000000000002], [106.0, 633.2068965517242], [107.0, 1487.3097345132744], [108.0, 452.7916666666667], [109.0, 1164.8115942028985], [110.0, 1693.633571036746], [1.0, 23.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[104.18763636363656, 1485.2352727272698]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 161.0], [3.0, 156.0], [4.0, 150.0], [5.0, 154.0], [6.0, 149.0], [7.0, 173.0], [8.0, 151.0], [9.0, 157.0], [10.0, 161.0], [11.0, 154.0], [12.0, 160.0], [13.0, 155.0], [14.0, 170.0], [15.0, 178.0], [16.0, 156.0], [17.0, 158.0], [18.0, 156.0], [19.0, 156.0], [20.0, 157.0], [21.0, 156.0], [22.0, 152.0], [23.0, 156.0], [24.0, 158.0], [25.0, 152.0], [26.0, 154.0], [27.0, 156.0], [28.0, 176.0], [29.0, 152.0], [30.0, 151.0], [31.0, 153.0], [32.0, 160.0], [33.0, 156.0], [34.0, 152.0], [35.0, 155.0], [36.0, 156.0], [37.0, 157.0], [38.0, 158.0], [39.0, 164.0], [40.0, 159.0], [41.0, 157.0], [42.0, 157.0], [43.0, 165.0], [44.0, 153.0], [45.0, 160.0], [46.0, 153.0], [47.0, 175.0], [48.0, 148.0], [49.0, 156.0], [50.0, 166.0], [51.0, 182.0], [52.0, 153.0], [53.0, 161.0], [54.0, 153.0], [55.0, 160.0], [56.0, 155.0], [57.0, 163.0], [58.0, 167.0], [59.0, 163.0], [60.0, 157.0], [61.0, 168.0], [62.0, 161.0], [63.0, 153.0], [64.0, 162.0], [65.0, 158.0], [66.0, 159.0], [67.0, 154.0], [68.0, 158.0], [69.0, 160.0], [70.0, 164.0], [71.0, 152.0], [72.0, 153.0], [73.0, 166.0], [74.0, 170.0], [75.0, 159.0], [76.0, 160.0], [77.0, 160.0], [78.0, 156.0], [79.0, 189.0], [80.0, 159.0], [81.0, 154.0], [82.0, 161.0], [83.0, 159.0], [84.0, 161.0], [85.0, 153.0], [86.0, 162.0], [87.0, 173.0], [88.0, 160.0], [89.0, 159.0], [90.0, 163.0], [91.0, 158.0], [92.0, 149.0], [93.0, 163.0], [94.0, 152.0], [95.0, 156.0], [96.0, 158.0], [97.0, 160.0], [98.0, 161.0], [99.0, 161.0], [100.0, 157.0], [101.0, 173.0], [102.0, 158.0], [103.0, 161.0], [104.0, 171.0], [105.0, 163.0], [106.0, 159.0], [107.0, 153.0], [108.0, 160.0], [109.0, 169.0], [110.0, 150.0], [1.0, 189.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[55.5, 159.60000000000002]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[2.0, 44.0], [3.0, 37.0], [4.0, 29.0], [5.0, 40.0], [6.0, 32.25], [7.0, 30.0], [8.0, 31.0], [9.0, 24.25], [10.0, 25.5], [11.0, 28.22222222222222], [12.0, 42.0], [13.0, 33.666666666666664], [14.0, 25.5], [15.0, 22.0], [16.0, 27.666666666666668], [17.0, 29.0], [18.0, 26.75], [19.0, 30.0], [20.0, 25.666666666666668], [21.0, 29.076923076923073], [22.0, 29.333333333333332], [23.0, 21.333333333333332], [24.0, 22.166666666666664], [25.0, 25.666666666666668], [26.0, 24.833333333333332], [27.0, 25.6], [28.0, 30.125], [29.0, 26.375], [30.0, 27.0], [31.0, 229.53846153846152], [32.0, 56.81818181818181], [33.0, 31.375], [34.0, 25.0], [35.0, 283.6923076923077], [36.0, 25.000000000000004], [37.0, 29.874999999999996], [38.0, 26.4], [39.0, 27.428571428571427], [40.0, 26.0], [41.0, 28.78571428571428], [42.0, 27.333333333333332], [43.0, 25.22222222222222], [44.0, 21.142857142857142], [45.0, 29.22222222222222], [46.0, 31.166666666666668], [47.0, 28.833333333333336], [48.0, 25.818181818181817], [49.0, 27.0], [50.0, 24.214285714285715], [51.0, 24.11764705882353], [52.0, 27.5], [53.0, 27.0], [54.0, 25.846153846153847], [55.0, 27.04761904761905], [56.0, 25.037037037037045], [57.0, 23.94117647058824], [58.0, 25.545454545454543], [59.0, 22.888888888888886], [60.0, 25.846153846153847], [61.0, 25.609756097560975], [62.0, 26.0], [63.0, 28.71428571428571], [64.0, 23.95454545454546], [65.0, 23.136363636363633], [66.0, 26.961538461538463], [67.0, 22.625000000000004], [68.0, 25.85185185185185], [69.0, 23.76470588235294], [70.0, 26.352941176470583], [71.0, 28.33333333333334], [72.0, 24.625], [73.0, 26.181818181818183], [74.0, 24.473684210526315], [75.0, 23.5], [76.0, 24.4074074074074], [77.0, 25.731707317073166], [78.0, 24.55], [79.0, 23.0], [80.0, 22.333333333333336], [81.0, 29.46666666666667], [82.0, 346.87500000000006], [83.0, 387.95000000000005], [84.0, 83.66666666666666], [85.0, 945.829268292683], [86.0, 624.3333333333333], [87.0, 98.83333333333333], [88.0, 28.642857142857142], [89.0, 863.0810810810809], [90.0, 708.9183673469388], [91.0, 1398.2903225806451], [92.0, 1183.2682926829266], [93.0, 503.72727272727275], [94.0, 27.3], [95.0, 489.62068965517244], [96.0, 111.13333333333333], [97.0, 430.9117647058824], [98.0, 290.95000000000005], [99.0, 1084.4516129032259], [100.0, 853.945945945946], [101.0, 23.615384615384613], [102.0, 213.71428571428572], [103.0, 1191.0], [104.0, 101.9375], [105.0, 1358.4897959183672], [106.0, 1105.5365853658536], [107.0, 1434.8712871287137], [108.0, 560.0588235294118], [109.0, 1244.9387755102043], [110.0, 1692.3561029009334]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[104.2039999999999, 1482.2936363636393]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 110.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3425.2, "minX": 1.58767644E12, "maxY": 258557.53333333333, "series": [{"data": [[1.58767704E12, 199245.6], [1.58767674E12, 213742.75], [1.58767644E12, 102618.81666666667], [1.5876771E12, 218821.91666666666], [1.58767698E12, 223962.6], [1.58767668E12, 213564.68333333332], [1.58767656E12, 208132.58333333334], [1.58767692E12, 229903.41666666666], [1.58767662E12, 214673.78333333333], [1.5876768E12, 205747.15], [1.5876765E12, 258557.53333333333], [1.58767716E12, 55585.21666666667], [1.58767686E12, 205511.85]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58767704E12, 12269.233333333334], [1.58767674E12, 13163.333333333334], [1.58767644E12, 6509.266666666666], [1.5876771E12, 13478.266666666666], [1.58767698E12, 13792.366666666667], [1.58767668E12, 13220.233333333334], [1.58767656E12, 12919.966666666667], [1.58767692E12, 14393.166666666666], [1.58767662E12, 13220.466666666667], [1.5876768E12, 12669.633333333333], [1.5876765E12, 16001.466666666667], [1.58767716E12, 3425.2], [1.58767686E12, 12655.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767716E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 26.914285714285697, "minX": 1.58767644E12, "maxY": 2010.8944900351703, "series": [{"data": [[1.58767704E12, 2010.8944900351703], [1.58767674E12, 1723.6889848812111], [1.58767644E12, 26.914285714285697], [1.5876771E12, 1193.4979123173248], [1.58767698E12, 1521.509844559586], [1.58767668E12, 1667.7372421281202], [1.58767656E12, 1729.6204217536053], [1.58767692E12, 1466.3139190523218], [1.58767662E12, 1671.2241379310333], [1.5876768E12, 1806.0828603859227], [1.5876765E12, 931.3965517241377], [1.58767716E12, 32.15999999999999], [1.58767686E12, 1867.3276643990932]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58767644E12, 159.11538461538464], [1.5876765E12, 160.78124999999997]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58767704E12, 1947.2178447276965], [1.58767674E12, 1707.8885245901633], [1.58767644E12, 32.83964365256124], [1.5876771E12, 1177.7723840345207], [1.58767698E12, 1496.0923236514523], [1.58767668E12, 1754.6336206896574], [1.58767656E12, 1762.2880794701985], [1.58767692E12, 1421.9099999999992], [1.58767662E12, 1702.7709011943534], [1.5876768E12, 1792.2188552188545], [1.5876765E12, 935.133154602323], [1.58767716E12, 40.506550218340614], [1.58767686E12, 1853.1959459459476]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767716E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 26.745238095238093, "minX": 1.58767644E12, "maxY": 2010.6365767878076, "series": [{"data": [[1.58767704E12, 2010.6365767878076], [1.58767674E12, 1723.4999999999989], [1.58767644E12, 26.745238095238093], [1.5876771E12, 1193.265135699374], [1.58767698E12, 1521.2124352331598], [1.58767668E12, 1667.5439739413669], [1.58767656E12, 1729.5149833518303], [1.58767692E12, 1466.1352418558713], [1.58767662E12, 1670.9784482758635], [1.5876768E12, 1805.858115777525], [1.5876765E12, 931.1905626134305], [1.58767716E12, 31.867999999999977], [1.58767686E12, 1867.09977324263]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58767644E12, 159.0384615384615], [1.5876765E12, 160.78124999999997]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58767704E12, 1946.9212050984925], [1.58767674E12, 1707.6644808743167], [1.58767644E12, 32.63697104677058], [1.5876771E12, 1177.4940668824158], [1.58767698E12, 1495.675311203319], [1.58767668E12, 1754.4342672413811], [1.58767656E12, 1762.1081677704183], [1.58767692E12, 1421.717], [1.58767662E12, 1702.5352877307253], [1.5876768E12, 1792.0022446689095], [1.5876765E12, 934.8900804289543], [1.58767716E12, 40.13973799126637], [1.58767686E12, 1852.968468468469]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767716E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58767644E12, "maxY": 1.1282051282051282, "series": [{"data": [[1.58767704E12, 0.47010550996482986], [1.58767674E12, 0.4265658747300218], [1.58767644E12, 0.1452380952380952], [1.5876771E12, 0.3141962421711899], [1.58767698E12, 0.34093264248704624], [1.58767668E12, 0.44625407166123787], [1.58767656E12, 0.4517203107658154], [1.58767692E12, 0.40572556762092815], [1.58767662E12, 0.45258620689655216], [1.5876768E12, 0.4483541430192964], [1.5876765E12, 0.25317604355716866], [1.58767716E12, 0.0], [1.58767686E12, 0.4195011337868479]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58767644E12, 1.1282051282051282], [1.5876765E12, 0.65625]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58767704E12, 0.46002317497103135], [1.58767674E12, 0.45901639344262235], [1.58767644E12, 0.6258351893095769], [1.5876771E12, 0.43797195253505894], [1.58767698E12, 0.4419087136929455], [1.58767668E12, 0.46767241379310337], [1.58767656E12, 0.5408388520971309], [1.58767692E12, 0.45399999999999974], [1.58767662E12, 0.5114006514657983], [1.5876768E12, 0.4377104377104372], [1.5876765E12, 0.48972296693476286], [1.58767716E12, 0.48471615720524014], [1.58767686E12, 0.43355855855855857]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767716E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.58767644E12, "maxY": 5935.0, "series": [{"data": [[1.58767704E12, 5935.0], [1.58767674E12, 5136.0], [1.58767644E12, 760.0], [1.5876771E12, 4594.0], [1.58767698E12, 4391.0], [1.58767668E12, 5265.0], [1.58767656E12, 4957.0], [1.58767692E12, 5197.0], [1.58767662E12, 4498.0], [1.5876768E12, 4938.0], [1.5876765E12, 5567.0], [1.58767716E12, 820.0], [1.58767686E12, 5901.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58767704E12, 46.0], [1.58767674E12, 97.0], [1.58767644E12, 10.0], [1.5876771E12, 11.0], [1.58767698E12, 35.0], [1.58767668E12, 18.0], [1.58767656E12, 21.0], [1.58767692E12, 62.0], [1.58767662E12, 130.0], [1.5876768E12, 218.0], [1.5876765E12, 10.0], [1.58767716E12, 10.0], [1.58767686E12, 153.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58767704E12, 3091.6], [1.58767674E12, 2661.0], [1.58767644E12, 50.200000000000045], [1.5876771E12, 2347.2000000000007], [1.58767698E12, 2557.0], [1.58767668E12, 2786.0], [1.58767656E12, 2859.7], [1.58767692E12, 2266.0], [1.58767662E12, 2717.0], [1.5876768E12, 2787.4], [1.5876765E12, 2526.6000000000004], [1.58767716E12, 39.0], [1.58767686E12, 2935.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58767704E12, 4183.729999999998], [1.58767674E12, 3875.7999999999993], [1.58767644E12, 257.0399999999995], [1.5876771E12, 3324.7999999999975], [1.58767698E12, 3570.2000000000016], [1.58767668E12, 3979.7999999999984], [1.58767656E12, 3897.8399999999992], [1.58767692E12, 3595.2000000000007], [1.58767662E12, 3860.5], [1.5876768E12, 3950.3199999999997], [1.5876765E12, 3702.600000000002], [1.58767716E12, 342.99999999999847], [1.58767686E12, 3905.29]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58767704E12, 3439.1499999999996], [1.58767674E12, 3079.5999999999995], [1.58767644E12, 158.0], [1.5876771E12, 2695.3999999999996], [1.58767698E12, 2943.0], [1.58767668E12, 3163.0], [1.58767656E12, 3224.3999999999996], [1.58767692E12, 2814.0], [1.58767662E12, 3110.5], [1.5876768E12, 3127.35], [1.5876765E12, 2953.199999999999], [1.58767716E12, 46.0], [1.58767686E12, 3335.499999999998]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767716E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 22.0, "minX": 1.0, "maxY": 1866.0, "series": [{"data": [[2.0, 34.5], [3.0, 34.5], [4.0, 29.5], [5.0, 28.0], [6.0, 40.0], [7.0, 33.0], [8.0, 33.5], [10.0, 25.5], [11.0, 256.5], [12.0, 368.5], [13.0, 187.0], [14.0, 1187.0], [15.0, 391.5], [16.0, 1364.0], [17.0, 1660.0], [18.0, 1866.0], [19.0, 1490.5], [20.0, 1754.5], [21.0, 1718.5], [22.0, 1698.0], [23.0, 1660.0], [24.0, 1516.5], [25.0, 1709.0], [26.0, 1719.0], [27.0, 1654.0], [28.0, 1406.5], [29.0, 1622.5], [30.0, 1613.0], [31.0, 1430.0], [33.0, 1523.5], [32.0, 1536.0], [35.0, 1373.5], [34.0, 1350.0], [36.0, 1407.0], [37.0, 1613.5], [38.0, 1316.5], [39.0, 1521.0], [40.0, 1413.5], [41.0, 1567.5], [42.0, 1620.5], [43.0, 1536.0], [44.0, 1862.0], [45.0, 1498.0], [46.0, 921.5], [47.0, 244.0], [48.0, 786.5], [49.0, 1157.0], [50.0, 1826.5], [52.0, 1130.0], [53.0, 212.0], [55.0, 276.0], [54.0, 25.0], [56.0, 22.0], [57.0, 156.0], [58.0, 24.0], [60.0, 23.0], [62.0, 23.5], [66.0, 1251.0], [1.0, 23.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[36.0, 1463.0], [39.0, 1477.5], [45.0, 1399.0], [52.0, 1072.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 66.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 21.5, "minX": 1.0, "maxY": 1866.0, "series": [{"data": [[2.0, 34.5], [3.0, 34.0], [4.0, 29.5], [5.0, 28.0], [6.0, 39.5], [7.0, 32.0], [8.0, 33.5], [10.0, 25.5], [11.0, 256.0], [12.0, 367.0], [13.0, 187.0], [14.0, 1187.0], [15.0, 391.5], [16.0, 1364.0], [17.0, 1658.0], [18.0, 1866.0], [19.0, 1490.5], [20.0, 1754.5], [21.0, 1717.5], [22.0, 1698.0], [23.0, 1660.0], [24.0, 1516.5], [25.0, 1709.0], [26.0, 1719.0], [27.0, 1654.0], [28.0, 1406.5], [29.0, 1622.5], [30.0, 1613.0], [31.0, 1430.0], [33.0, 1523.5], [32.0, 1536.0], [35.0, 1373.0], [34.0, 1350.0], [36.0, 1407.0], [37.0, 1613.5], [38.0, 1316.5], [39.0, 1519.0], [40.0, 1413.0], [41.0, 1567.5], [42.0, 1620.5], [43.0, 1535.0], [44.0, 1862.0], [45.0, 1493.0], [46.0, 920.5], [47.0, 244.0], [48.0, 786.5], [49.0, 1157.0], [50.0, 1826.5], [52.0, 1130.0], [53.0, 212.0], [55.0, 275.0], [54.0, 25.0], [56.0, 21.5], [57.0, 156.0], [58.0, 23.5], [60.0, 23.0], [62.0, 23.5], [66.0, 1251.0], [1.0, 23.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[36.0, 1462.0], [39.0, 1477.5], [45.0, 1399.0], [52.0, 1072.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 66.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 7.966666666666667, "minX": 1.58767644E12, "maxY": 38.21666666666667, "series": [{"data": [[1.58767704E12, 28.55], [1.58767674E12, 30.616666666666667], [1.58767644E12, 15.8], [1.5876771E12, 30.5], [1.58767698E12, 32.53333333333333], [1.58767668E12, 30.616666666666667], [1.58767656E12, 30.4], [1.58767692E12, 32.96666666666667], [1.58767662E12, 30.9], [1.5876768E12, 29.933333333333334], [1.5876765E12, 38.21666666666667], [1.58767716E12, 7.966666666666667], [1.58767686E12, 29.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767716E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.58767644E12, "maxY": 37.55, "series": [{"data": [[1.58767704E12, 28.6], [1.58767674E12, 30.683333333333334], [1.58767644E12, 15.783333333333333], [1.5876771E12, 31.416666666666668], [1.58767698E12, 32.15], [1.58767668E12, 30.65], [1.58767656E12, 29.866666666666667], [1.58767692E12, 32.983333333333334], [1.58767662E12, 30.816666666666666], [1.5876768E12, 29.533333333333335], [1.5876765E12, 37.55], [1.58767716E12, 7.983333333333333], [1.58767686E12, 29.5]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58767656E12, 0.25], [1.58767692E12, 0.5666666666666667], [1.58767668E12, 0.16666666666666666]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767716E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.58767644E12, "maxY": 18.65, "series": [{"data": [[1.58767644E12, 1.3], [1.5876765E12, 0.5333333333333333]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58767704E12, 14.216666666666667], [1.58767674E12, 15.433333333333334], [1.58767644E12, 7.0], [1.5876771E12, 15.966666666666667], [1.58767698E12, 16.083333333333332], [1.58767668E12, 15.3], [1.58767656E12, 14.883333333333333], [1.58767692E12, 16.733333333333334], [1.58767662E12, 15.466666666666667], [1.5876768E12, 14.683333333333334], [1.5876765E12, 18.366666666666667], [1.58767716E12, 4.166666666666667], [1.58767686E12, 14.7]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58767656E12, 0.13333333333333333], [1.58767692E12, 0.15], [1.58767668E12, 0.05]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.58767704E12, 14.383333333333333], [1.58767674E12, 15.25], [1.58767644E12, 7.483333333333333], [1.5876771E12, 15.45], [1.58767698E12, 16.066666666666666], [1.58767668E12, 15.35], [1.58767656E12, 14.983333333333333], [1.58767692E12, 16.25], [1.58767662E12, 15.35], [1.5876768E12, 14.85], [1.5876765E12, 18.65], [1.58767716E12, 3.816666666666667], [1.58767686E12, 14.8]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58767656E12, 0.11666666666666667], [1.58767692E12, 0.4166666666666667], [1.58767668E12, 0.11666666666666667]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767716E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.58767644E12, "maxY": 37.55, "series": [{"data": [[1.58767704E12, 28.6], [1.58767674E12, 30.683333333333334], [1.58767644E12, 15.783333333333333], [1.5876771E12, 31.416666666666668], [1.58767698E12, 32.15], [1.58767668E12, 30.65], [1.58767656E12, 29.866666666666667], [1.58767692E12, 32.983333333333334], [1.58767662E12, 30.816666666666666], [1.5876768E12, 29.533333333333335], [1.5876765E12, 37.55], [1.58767716E12, 7.983333333333333], [1.58767686E12, 29.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58767656E12, 0.25], [1.58767692E12, 0.5666666666666667], [1.58767668E12, 0.16666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767716E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

