/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 8705.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 2.0], [20.0, 2.0], [20.1, 2.0], [20.2, 2.0], [20.3, 2.0], [20.4, 2.0], [20.5, 2.0], [20.6, 2.0], [20.7, 2.0], [20.8, 2.0], [20.9, 2.0], [21.0, 2.0], [21.1, 2.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 2.0], [21.6, 2.0], [21.7, 2.0], [21.8, 2.0], [21.9, 2.0], [22.0, 2.0], [22.1, 2.0], [22.2, 2.0], [22.3, 2.0], [22.4, 2.0], [22.5, 2.0], [22.6, 2.0], [22.7, 2.0], [22.8, 2.0], [22.9, 2.0], [23.0, 2.0], [23.1, 2.0], [23.2, 2.0], [23.3, 2.0], [23.4, 2.0], [23.5, 2.0], [23.6, 2.0], [23.7, 2.0], [23.8, 2.0], [23.9, 2.0], [24.0, 2.0], [24.1, 2.0], [24.2, 2.0], [24.3, 2.0], [24.4, 2.0], [24.5, 2.0], [24.6, 2.0], [24.7, 2.0], [24.8, 2.0], [24.9, 2.0], [25.0, 2.0], [25.1, 2.0], [25.2, 2.0], [25.3, 2.0], [25.4, 2.0], [25.5, 2.0], [25.6, 2.0], [25.7, 2.0], [25.8, 2.0], [25.9, 2.0], [26.0, 2.0], [26.1, 2.0], [26.2, 2.0], [26.3, 2.0], [26.4, 2.0], [26.5, 2.0], [26.6, 2.0], [26.7, 2.0], [26.8, 2.0], [26.9, 2.0], [27.0, 2.0], [27.1, 2.0], [27.2, 2.0], [27.3, 2.0], [27.4, 2.0], [27.5, 2.0], [27.6, 2.0], [27.7, 2.0], [27.8, 2.0], [27.9, 2.0], [28.0, 2.0], [28.1, 2.0], [28.2, 2.0], [28.3, 2.0], [28.4, 2.0], [28.5, 2.0], [28.6, 2.0], [28.7, 2.0], [28.8, 2.0], [28.9, 2.0], [29.0, 2.0], [29.1, 2.0], [29.2, 2.0], [29.3, 2.0], [29.4, 2.0], [29.5, 2.0], [29.6, 2.0], [29.7, 2.0], [29.8, 2.0], [29.9, 2.0], [30.0, 2.0], [30.1, 2.0], [30.2, 2.0], [30.3, 2.0], [30.4, 2.0], [30.5, 2.0], [30.6, 2.0], [30.7, 2.0], [30.8, 2.0], [30.9, 2.0], [31.0, 2.0], [31.1, 2.0], [31.2, 2.0], [31.3, 2.0], [31.4, 2.0], [31.5, 2.0], [31.6, 2.0], [31.7, 2.0], [31.8, 2.0], [31.9, 2.0], [32.0, 2.0], [32.1, 2.0], [32.2, 2.0], [32.3, 2.0], [32.4, 2.0], [32.5, 2.0], [32.6, 2.0], [32.7, 2.0], [32.8, 2.0], [32.9, 2.0], [33.0, 2.0], [33.1, 2.0], [33.2, 2.0], [33.3, 2.0], [33.4, 2.0], [33.5, 2.0], [33.6, 2.0], [33.7, 2.0], [33.8, 2.0], [33.9, 2.0], [34.0, 2.0], [34.1, 2.0], [34.2, 2.0], [34.3, 2.0], [34.4, 2.0], [34.5, 2.0], [34.6, 2.0], [34.7, 2.0], [34.8, 2.0], [34.9, 2.0], [35.0, 2.0], [35.1, 2.0], [35.2, 2.0], [35.3, 2.0], [35.4, 2.0], [35.5, 2.0], [35.6, 2.0], [35.7, 2.0], [35.8, 2.0], [35.9, 2.0], [36.0, 2.0], [36.1, 2.0], [36.2, 2.0], [36.3, 2.0], [36.4, 2.0], [36.5, 2.0], [36.6, 2.0], [36.7, 2.0], [36.8, 2.0], [36.9, 2.0], [37.0, 2.0], [37.1, 2.0], [37.2, 2.0], [37.3, 2.0], [37.4, 2.0], [37.5, 2.0], [37.6, 2.0], [37.7, 2.0], [37.8, 2.0], [37.9, 2.0], [38.0, 2.0], [38.1, 2.0], [38.2, 2.0], [38.3, 2.0], [38.4, 2.0], [38.5, 2.0], [38.6, 2.0], [38.7, 2.0], [38.8, 2.0], [38.9, 2.0], [39.0, 2.0], [39.1, 2.0], [39.2, 2.0], [39.3, 2.0], [39.4, 2.0], [39.5, 2.0], [39.6, 2.0], [39.7, 2.0], [39.8, 2.0], [39.9, 2.0], [40.0, 2.0], [40.1, 2.0], [40.2, 2.0], [40.3, 2.0], [40.4, 2.0], [40.5, 2.0], [40.6, 2.0], [40.7, 2.0], [40.8, 2.0], [40.9, 2.0], [41.0, 2.0], [41.1, 2.0], [41.2, 2.0], [41.3, 2.0], [41.4, 2.0], [41.5, 2.0], [41.6, 2.0], [41.7, 2.0], [41.8, 2.0], [41.9, 2.0], [42.0, 2.0], [42.1, 2.0], [42.2, 2.0], [42.3, 2.0], [42.4, 2.0], [42.5, 2.0], [42.6, 2.0], [42.7, 2.0], [42.8, 2.0], [42.9, 2.0], [43.0, 2.0], [43.1, 2.0], [43.2, 2.0], [43.3, 2.0], [43.4, 2.0], [43.5, 2.0], [43.6, 2.0], [43.7, 2.0], [43.8, 2.0], [43.9, 2.0], [44.0, 2.0], [44.1, 2.0], [44.2, 2.0], [44.3, 2.0], [44.4, 2.0], [44.5, 2.0], [44.6, 2.0], [44.7, 2.0], [44.8, 2.0], [44.9, 2.0], [45.0, 2.0], [45.1, 2.0], [45.2, 2.0], [45.3, 2.0], [45.4, 2.0], [45.5, 2.0], [45.6, 2.0], [45.7, 2.0], [45.8, 2.0], [45.9, 2.0], [46.0, 3.0], [46.1, 3.0], [46.2, 3.0], [46.3, 3.0], [46.4, 3.0], [46.5, 3.0], [46.6, 3.0], [46.7, 3.0], [46.8, 3.0], [46.9, 3.0], [47.0, 3.0], [47.1, 3.0], [47.2, 3.0], [47.3, 3.0], [47.4, 3.0], [47.5, 3.0], [47.6, 3.0], [47.7, 3.0], [47.8, 3.0], [47.9, 3.0], [48.0, 3.0], [48.1, 3.0], [48.2, 3.0], [48.3, 3.0], [48.4, 3.0], [48.5, 3.0], [48.6, 3.0], [48.7, 3.0], [48.8, 3.0], [48.9, 3.0], [49.0, 3.0], [49.1, 3.0], [49.2, 3.0], [49.3, 3.0], [49.4, 3.0], [49.5, 3.0], [49.6, 3.0], [49.7, 3.0], [49.8, 3.0], [49.9, 3.0], [50.0, 3.0], [50.1, 3.0], [50.2, 3.0], [50.3, 4.0], [50.4, 4.0], [50.5, 4.0], [50.6, 4.0], [50.7, 4.0], [50.8, 4.0], [50.9, 4.0], [51.0, 5.0], [51.1, 5.0], [51.2, 5.0], [51.3, 6.0], [51.4, 6.0], [51.5, 8.0], [51.6, 11.0], [51.7, 14.0], [51.8, 16.0], [51.9, 17.0], [52.0, 18.0], [52.1, 19.0], [52.2, 20.0], [52.3, 21.0], [52.4, 21.0], [52.5, 22.0], [52.6, 23.0], [52.7, 24.0], [52.8, 24.0], [52.9, 24.0], [53.0, 25.0], [53.1, 26.0], [53.2, 26.0], [53.3, 27.0], [53.4, 27.0], [53.5, 28.0], [53.6, 28.0], [53.7, 28.0], [53.8, 29.0], [53.9, 30.0], [54.0, 30.0], [54.1, 31.0], [54.2, 31.0], [54.3, 32.0], [54.4, 33.0], [54.5, 33.0], [54.6, 34.0], [54.7, 35.0], [54.8, 36.0], [54.9, 37.0], [55.0, 39.0], [55.1, 40.0], [55.2, 42.0], [55.3, 44.0], [55.4, 47.0], [55.5, 51.0], [55.6, 55.0], [55.7, 62.0], [55.8, 66.0], [55.9, 78.0], [56.0, 89.0], [56.1, 108.0], [56.2, 137.0], [56.3, 173.0], [56.4, 238.0], [56.5, 279.0], [56.6, 311.0], [56.7, 344.0], [56.8, 367.0], [56.9, 409.0], [57.0, 431.0], [57.1, 454.0], [57.2, 471.0], [57.3, 490.0], [57.4, 522.0], [57.5, 553.0], [57.6, 579.0], [57.7, 610.0], [57.8, 640.0], [57.9, 662.0], [58.0, 678.0], [58.1, 706.0], [58.2, 722.0], [58.3, 745.0], [58.4, 768.0], [58.5, 789.0], [58.6, 809.0], [58.7, 837.0], [58.8, 852.0], [58.9, 867.0], [59.0, 881.0], [59.1, 899.0], [59.2, 909.0], [59.3, 921.0], [59.4, 934.0], [59.5, 946.0], [59.6, 960.0], [59.7, 982.0], [59.8, 1000.0], [59.9, 1014.0], [60.0, 1036.0], [60.1, 1051.0], [60.2, 1060.0], [60.3, 1076.0], [60.4, 1093.0], [60.5, 1109.0], [60.6, 1126.0], [60.7, 1143.0], [60.8, 1163.0], [60.9, 1181.0], [61.0, 1205.0], [61.1, 1226.0], [61.2, 1243.0], [61.3, 1260.0], [61.4, 1278.0], [61.5, 1305.0], [61.6, 1322.0], [61.7, 1350.0], [61.8, 1369.0], [61.9, 1385.0], [62.0, 1401.0], [62.1, 1414.0], [62.2, 1433.0], [62.3, 1455.0], [62.4, 1466.0], [62.5, 1484.0], [62.6, 1495.0], [62.7, 1507.0], [62.8, 1527.0], [62.9, 1541.0], [63.0, 1559.0], [63.1, 1569.0], [63.2, 1588.0], [63.3, 1605.0], [63.4, 1620.0], [63.5, 1634.0], [63.6, 1646.0], [63.7, 1662.0], [63.8, 1678.0], [63.9, 1693.0], [64.0, 1710.0], [64.1, 1730.0], [64.2, 1747.0], [64.3, 1756.0], [64.4, 1772.0], [64.5, 1785.0], [64.6, 1802.0], [64.7, 1813.0], [64.8, 1825.0], [64.9, 1839.0], [65.0, 1848.0], [65.1, 1854.0], [65.2, 1861.0], [65.3, 1870.0], [65.4, 1881.0], [65.5, 1893.0], [65.6, 1904.0], [65.7, 1912.0], [65.8, 1921.0], [65.9, 1929.0], [66.0, 1940.0], [66.1, 1953.0], [66.2, 1960.0], [66.3, 1967.0], [66.4, 1977.0], [66.5, 1983.0], [66.6, 1997.0], [66.7, 2004.0], [66.8, 2013.0], [66.9, 2024.0], [67.0, 2032.0], [67.1, 2040.0], [67.2, 2050.0], [67.3, 2057.0], [67.4, 2068.0], [67.5, 2075.0], [67.6, 2083.0], [67.7, 2087.0], [67.8, 2094.0], [67.9, 2101.0], [68.0, 2110.0], [68.1, 2118.0], [68.2, 2124.0], [68.3, 2132.0], [68.4, 2139.0], [68.5, 2147.0], [68.6, 2157.0], [68.7, 2164.0], [68.8, 2171.0], [68.9, 2177.0], [69.0, 2188.0], [69.1, 2195.0], [69.2, 2204.0], [69.3, 2213.0], [69.4, 2220.0], [69.5, 2227.0], [69.6, 2239.0], [69.7, 2249.0], [69.8, 2256.0], [69.9, 2262.0], [70.0, 2273.0], [70.1, 2281.0], [70.2, 2289.0], [70.3, 2301.0], [70.4, 2311.0], [70.5, 2317.0], [70.6, 2331.0], [70.7, 2335.0], [70.8, 2348.0], [70.9, 2359.0], [71.0, 2372.0], [71.1, 2379.0], [71.2, 2391.0], [71.3, 2398.0], [71.4, 2406.0], [71.5, 2415.0], [71.6, 2425.0], [71.7, 2432.0], [71.8, 2443.0], [71.9, 2454.0], [72.0, 2465.0], [72.1, 2472.0], [72.2, 2479.0], [72.3, 2484.0], [72.4, 2492.0], [72.5, 2502.0], [72.6, 2510.0], [72.7, 2518.0], [72.8, 2526.0], [72.9, 2536.0], [73.0, 2542.0], [73.1, 2548.0], [73.2, 2556.0], [73.3, 2563.0], [73.4, 2572.0], [73.5, 2579.0], [73.6, 2588.0], [73.7, 2595.0], [73.8, 2600.0], [73.9, 2608.0], [74.0, 2618.0], [74.1, 2623.0], [74.2, 2630.0], [74.3, 2636.0], [74.4, 2642.0], [74.5, 2649.0], [74.6, 2656.0], [74.7, 2661.0], [74.8, 2667.0], [74.9, 2676.0], [75.0, 2683.0], [75.1, 2690.0], [75.2, 2698.0], [75.3, 2704.0], [75.4, 2708.0], [75.5, 2716.0], [75.6, 2724.0], [75.7, 2729.0], [75.8, 2735.0], [75.9, 2742.0], [76.0, 2749.0], [76.1, 2758.0], [76.2, 2763.0], [76.3, 2768.0], [76.4, 2777.0], [76.5, 2784.0], [76.6, 2795.0], [76.7, 2801.0], [76.8, 2806.0], [76.9, 2815.0], [77.0, 2821.0], [77.1, 2829.0], [77.2, 2839.0], [77.3, 2847.0], [77.4, 2855.0], [77.5, 2860.0], [77.6, 2866.0], [77.7, 2872.0], [77.8, 2882.0], [77.9, 2892.0], [78.0, 2901.0], [78.1, 2909.0], [78.2, 2917.0], [78.3, 2926.0], [78.4, 2931.0], [78.5, 2940.0], [78.6, 2949.0], [78.7, 2956.0], [78.8, 2966.0], [78.9, 2978.0], [79.0, 2984.0], [79.1, 2992.0], [79.2, 2998.0], [79.3, 3004.0], [79.4, 3014.0], [79.5, 3019.0], [79.6, 3026.0], [79.7, 3031.0], [79.8, 3037.0], [79.9, 3046.0], [80.0, 3054.0], [80.1, 3060.0], [80.2, 3068.0], [80.3, 3077.0], [80.4, 3086.0], [80.5, 3093.0], [80.6, 3101.0], [80.7, 3114.0], [80.8, 3127.0], [80.9, 3135.0], [81.0, 3142.0], [81.1, 3152.0], [81.2, 3159.0], [81.3, 3168.0], [81.4, 3174.0], [81.5, 3181.0], [81.6, 3192.0], [81.7, 3199.0], [81.8, 3205.0], [81.9, 3213.0], [82.0, 3221.0], [82.1, 3227.0], [82.2, 3235.0], [82.3, 3243.0], [82.4, 3249.0], [82.5, 3257.0], [82.6, 3261.0], [82.7, 3270.0], [82.8, 3276.0], [82.9, 3282.0], [83.0, 3287.0], [83.1, 3293.0], [83.2, 3300.0], [83.3, 3304.0], [83.4, 3312.0], [83.5, 3316.0], [83.6, 3321.0], [83.7, 3328.0], [83.8, 3336.0], [83.9, 3345.0], [84.0, 3357.0], [84.1, 3365.0], [84.2, 3372.0], [84.3, 3377.0], [84.4, 3383.0], [84.5, 3390.0], [84.6, 3395.0], [84.7, 3402.0], [84.8, 3408.0], [84.9, 3417.0], [85.0, 3424.0], [85.1, 3431.0], [85.2, 3435.0], [85.3, 3442.0], [85.4, 3447.0], [85.5, 3452.0], [85.6, 3460.0], [85.7, 3464.0], [85.8, 3472.0], [85.9, 3478.0], [86.0, 3485.0], [86.1, 3490.0], [86.2, 3496.0], [86.3, 3506.0], [86.4, 3513.0], [86.5, 3521.0], [86.6, 3530.0], [86.7, 3537.0], [86.8, 3543.0], [86.9, 3547.0], [87.0, 3554.0], [87.1, 3560.0], [87.2, 3570.0], [87.3, 3577.0], [87.4, 3584.0], [87.5, 3590.0], [87.6, 3597.0], [87.7, 3606.0], [87.8, 3612.0], [87.9, 3618.0], [88.0, 3628.0], [88.1, 3634.0], [88.2, 3643.0], [88.3, 3651.0], [88.4, 3661.0], [88.5, 3670.0], [88.6, 3678.0], [88.7, 3685.0], [88.8, 3691.0], [88.9, 3700.0], [89.0, 3707.0], [89.1, 3715.0], [89.2, 3725.0], [89.3, 3733.0], [89.4, 3739.0], [89.5, 3750.0], [89.6, 3755.0], [89.7, 3762.0], [89.8, 3773.0], [89.9, 3777.0], [90.0, 3785.0], [90.1, 3793.0], [90.2, 3801.0], [90.3, 3808.0], [90.4, 3817.0], [90.5, 3826.0], [90.6, 3831.0], [90.7, 3840.0], [90.8, 3849.0], [90.9, 3860.0], [91.0, 3867.0], [91.1, 3875.0], [91.2, 3881.0], [91.3, 3889.0], [91.4, 3899.0], [91.5, 3909.0], [91.6, 3918.0], [91.7, 3931.0], [91.8, 3937.0], [91.9, 3942.0], [92.0, 3948.0], [92.1, 3957.0], [92.2, 3966.0], [92.3, 3976.0], [92.4, 3984.0], [92.5, 3993.0], [92.6, 4004.0], [92.7, 4014.0], [92.8, 4020.0], [92.9, 4035.0], [93.0, 4045.0], [93.1, 4055.0], [93.2, 4067.0], [93.3, 4081.0], [93.4, 4090.0], [93.5, 4104.0], [93.6, 4111.0], [93.7, 4125.0], [93.8, 4136.0], [93.9, 4147.0], [94.0, 4165.0], [94.1, 4170.0], [94.2, 4186.0], [94.3, 4200.0], [94.4, 4209.0], [94.5, 4220.0], [94.6, 4233.0], [94.7, 4247.0], [94.8, 4261.0], [94.9, 4275.0], [95.0, 4286.0], [95.1, 4303.0], [95.2, 4314.0], [95.3, 4334.0], [95.4, 4348.0], [95.5, 4363.0], [95.6, 4391.0], [95.7, 4403.0], [95.8, 4424.0], [95.9, 4438.0], [96.0, 4455.0], [96.1, 4476.0], [96.2, 4494.0], [96.3, 4509.0], [96.4, 4536.0], [96.5, 4567.0], [96.6, 4583.0], [96.7, 4609.0], [96.8, 4620.0], [96.9, 4649.0], [97.0, 4675.0], [97.1, 4706.0], [97.2, 4737.0], [97.3, 4768.0], [97.4, 4798.0], [97.5, 4816.0], [97.6, 4853.0], [97.7, 4875.0], [97.8, 4894.0], [97.9, 4929.0], [98.0, 4955.0], [98.1, 4985.0], [98.2, 5009.0], [98.3, 5037.0], [98.4, 5082.0], [98.5, 5112.0], [98.6, 5166.0], [98.7, 5215.0], [98.8, 5296.0], [98.9, 5348.0], [99.0, 5413.0], [99.1, 5482.0], [99.2, 5582.0], [99.3, 5659.0], [99.4, 5754.0], [99.5, 5907.0], [99.6, 6073.0], [99.7, 6286.0], [99.8, 6462.0], [99.9, 6831.0], [100.0, 7764.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 143.0], [0.1, 143.0], [0.2, 143.0], [0.3, 143.0], [0.4, 143.0], [0.5, 143.0], [0.6, 145.0], [0.7, 145.0], [0.8, 145.0], [0.9, 145.0], [1.0, 145.0], [1.1, 145.0], [1.2, 145.0], [1.3, 145.0], [1.4, 145.0], [1.5, 145.0], [1.6, 145.0], [1.7, 145.0], [1.8, 145.0], [1.9, 145.0], [2.0, 145.0], [2.1, 145.0], [2.2, 145.0], [2.3, 146.0], [2.4, 146.0], [2.5, 146.0], [2.6, 146.0], [2.7, 146.0], [2.8, 146.0], [2.9, 146.0], [3.0, 146.0], [3.1, 146.0], [3.2, 146.0], [3.3, 146.0], [3.4, 146.0], [3.5, 146.0], [3.6, 146.0], [3.7, 146.0], [3.8, 146.0], [3.9, 146.0], [4.0, 147.0], [4.1, 147.0], [4.2, 147.0], [4.3, 147.0], [4.4, 147.0], [4.5, 147.0], [4.6, 147.0], [4.7, 147.0], [4.8, 147.0], [4.9, 147.0], [5.0, 147.0], [5.1, 147.0], [5.2, 147.0], [5.3, 147.0], [5.4, 147.0], [5.5, 147.0], [5.6, 147.0], [5.7, 147.0], [5.8, 148.0], [5.9, 148.0], [6.0, 148.0], [6.1, 148.0], [6.2, 148.0], [6.3, 148.0], [6.4, 148.0], [6.5, 148.0], [6.6, 148.0], [6.7, 148.0], [6.8, 148.0], [6.9, 148.0], [7.0, 148.0], [7.1, 148.0], [7.2, 148.0], [7.3, 148.0], [7.4, 148.0], [7.5, 148.0], [7.6, 148.0], [7.7, 148.0], [7.8, 148.0], [7.9, 148.0], [8.0, 148.0], [8.1, 148.0], [8.2, 148.0], [8.3, 148.0], [8.4, 148.0], [8.5, 148.0], [8.6, 149.0], [8.7, 149.0], [8.8, 149.0], [8.9, 149.0], [9.0, 149.0], [9.1, 149.0], [9.2, 149.0], [9.3, 149.0], [9.4, 149.0], [9.5, 149.0], [9.6, 149.0], [9.7, 149.0], [9.8, 149.0], [9.9, 149.0], [10.0, 149.0], [10.1, 149.0], [10.2, 149.0], [10.3, 149.0], [10.4, 149.0], [10.5, 149.0], [10.6, 149.0], [10.7, 149.0], [10.8, 149.0], [10.9, 149.0], [11.0, 149.0], [11.1, 149.0], [11.2, 149.0], [11.3, 149.0], [11.4, 149.0], [11.5, 149.0], [11.6, 149.0], [11.7, 149.0], [11.8, 149.0], [11.9, 149.0], [12.0, 149.0], [12.1, 149.0], [12.2, 149.0], [12.3, 149.0], [12.4, 149.0], [12.5, 149.0], [12.6, 149.0], [12.7, 149.0], [12.8, 149.0], [12.9, 149.0], [13.0, 149.0], [13.1, 149.0], [13.2, 150.0], [13.3, 150.0], [13.4, 150.0], [13.5, 150.0], [13.6, 150.0], [13.7, 150.0], [13.8, 150.0], [13.9, 150.0], [14.0, 150.0], [14.1, 150.0], [14.2, 150.0], [14.3, 150.0], [14.4, 150.0], [14.5, 150.0], [14.6, 150.0], [14.7, 150.0], [14.8, 150.0], [14.9, 150.0], [15.0, 150.0], [15.1, 150.0], [15.2, 150.0], [15.3, 150.0], [15.4, 150.0], [15.5, 150.0], [15.6, 150.0], [15.7, 150.0], [15.8, 150.0], [15.9, 150.0], [16.0, 150.0], [16.1, 150.0], [16.2, 150.0], [16.3, 150.0], [16.4, 150.0], [16.5, 150.0], [16.6, 150.0], [16.7, 150.0], [16.8, 150.0], [16.9, 150.0], [17.0, 150.0], [17.1, 150.0], [17.2, 150.0], [17.3, 150.0], [17.4, 150.0], [17.5, 150.0], [17.6, 150.0], [17.7, 150.0], [17.8, 150.0], [17.9, 150.0], [18.0, 150.0], [18.1, 150.0], [18.2, 150.0], [18.3, 150.0], [18.4, 150.0], [18.5, 150.0], [18.6, 150.0], [18.7, 150.0], [18.8, 150.0], [18.9, 150.0], [19.0, 150.0], [19.1, 150.0], [19.2, 150.0], [19.3, 150.0], [19.4, 150.0], [19.5, 150.0], [19.6, 150.0], [19.7, 150.0], [19.8, 150.0], [19.9, 150.0], [20.0, 150.0], [20.1, 150.0], [20.2, 150.0], [20.3, 150.0], [20.4, 150.0], [20.5, 150.0], [20.6, 151.0], [20.7, 151.0], [20.8, 151.0], [20.9, 151.0], [21.0, 151.0], [21.1, 151.0], [21.2, 151.0], [21.3, 151.0], [21.4, 151.0], [21.5, 151.0], [21.6, 151.0], [21.7, 151.0], [21.8, 151.0], [21.9, 151.0], [22.0, 151.0], [22.1, 151.0], [22.2, 151.0], [22.3, 151.0], [22.4, 151.0], [22.5, 151.0], [22.6, 151.0], [22.7, 151.0], [22.8, 151.0], [22.9, 151.0], [23.0, 151.0], [23.1, 151.0], [23.2, 151.0], [23.3, 151.0], [23.4, 151.0], [23.5, 151.0], [23.6, 151.0], [23.7, 151.0], [23.8, 151.0], [23.9, 151.0], [24.0, 151.0], [24.1, 151.0], [24.2, 151.0], [24.3, 151.0], [24.4, 151.0], [24.5, 151.0], [24.6, 151.0], [24.7, 151.0], [24.8, 151.0], [24.9, 151.0], [25.0, 151.0], [25.1, 151.0], [25.2, 151.0], [25.3, 151.0], [25.4, 151.0], [25.5, 151.0], [25.6, 151.0], [25.7, 151.0], [25.8, 151.0], [25.9, 151.0], [26.0, 151.0], [26.1, 151.0], [26.2, 151.0], [26.3, 151.0], [26.4, 151.0], [26.5, 151.0], [26.6, 151.0], [26.7, 151.0], [26.8, 151.0], [26.9, 151.0], [27.0, 151.0], [27.1, 151.0], [27.2, 151.0], [27.3, 151.0], [27.4, 151.0], [27.5, 151.0], [27.6, 151.0], [27.7, 151.0], [27.8, 151.0], [27.9, 151.0], [28.0, 152.0], [28.1, 152.0], [28.2, 152.0], [28.3, 152.0], [28.4, 152.0], [28.5, 152.0], [28.6, 152.0], [28.7, 152.0], [28.8, 152.0], [28.9, 152.0], [29.0, 152.0], [29.1, 152.0], [29.2, 152.0], [29.3, 152.0], [29.4, 152.0], [29.5, 152.0], [29.6, 152.0], [29.7, 152.0], [29.8, 152.0], [29.9, 152.0], [30.0, 152.0], [30.1, 152.0], [30.2, 152.0], [30.3, 152.0], [30.4, 152.0], [30.5, 152.0], [30.6, 152.0], [30.7, 152.0], [30.8, 152.0], [30.9, 152.0], [31.0, 152.0], [31.1, 152.0], [31.2, 152.0], [31.3, 152.0], [31.4, 152.0], [31.5, 152.0], [31.6, 152.0], [31.7, 152.0], [31.8, 152.0], [31.9, 152.0], [32.0, 152.0], [32.1, 152.0], [32.2, 152.0], [32.3, 152.0], [32.4, 152.0], [32.5, 152.0], [32.6, 152.0], [32.7, 152.0], [32.8, 152.0], [32.9, 152.0], [33.0, 152.0], [33.1, 152.0], [33.2, 152.0], [33.3, 152.0], [33.4, 152.0], [33.5, 152.0], [33.6, 152.0], [33.7, 152.0], [33.8, 152.0], [33.9, 152.0], [34.0, 152.0], [34.1, 152.0], [34.2, 152.0], [34.3, 152.0], [34.4, 152.0], [34.5, 152.0], [34.6, 152.0], [34.7, 152.0], [34.8, 152.0], [34.9, 152.0], [35.0, 152.0], [35.1, 152.0], [35.2, 152.0], [35.3, 152.0], [35.4, 152.0], [35.5, 152.0], [35.6, 152.0], [35.7, 152.0], [35.8, 152.0], [35.9, 152.0], [36.0, 152.0], [36.1, 152.0], [36.2, 152.0], [36.3, 152.0], [36.4, 152.0], [36.5, 152.0], [36.6, 152.0], [36.7, 152.0], [36.8, 152.0], [36.9, 152.0], [37.0, 152.0], [37.1, 152.0], [37.2, 152.0], [37.3, 152.0], [37.4, 152.0], [37.5, 152.0], [37.6, 152.0], [37.7, 152.0], [37.8, 152.0], [37.9, 152.0], [38.0, 152.0], [38.1, 152.0], [38.2, 152.0], [38.3, 153.0], [38.4, 153.0], [38.5, 153.0], [38.6, 153.0], [38.7, 153.0], [38.8, 153.0], [38.9, 153.0], [39.0, 153.0], [39.1, 153.0], [39.2, 153.0], [39.3, 153.0], [39.4, 153.0], [39.5, 153.0], [39.6, 153.0], [39.7, 153.0], [39.8, 153.0], [39.9, 153.0], [40.0, 153.0], [40.1, 153.0], [40.2, 153.0], [40.3, 153.0], [40.4, 153.0], [40.5, 153.0], [40.6, 153.0], [40.7, 153.0], [40.8, 153.0], [40.9, 153.0], [41.0, 153.0], [41.1, 153.0], [41.2, 153.0], [41.3, 153.0], [41.4, 153.0], [41.5, 153.0], [41.6, 153.0], [41.7, 153.0], [41.8, 154.0], [41.9, 154.0], [42.0, 154.0], [42.1, 154.0], [42.2, 154.0], [42.3, 154.0], [42.4, 154.0], [42.5, 154.0], [42.6, 154.0], [42.7, 154.0], [42.8, 154.0], [42.9, 154.0], [43.0, 154.0], [43.1, 154.0], [43.2, 154.0], [43.3, 154.0], [43.4, 154.0], [43.5, 154.0], [43.6, 154.0], [43.7, 154.0], [43.8, 154.0], [43.9, 154.0], [44.0, 154.0], [44.1, 154.0], [44.2, 154.0], [44.3, 154.0], [44.4, 154.0], [44.5, 154.0], [44.6, 154.0], [44.7, 154.0], [44.8, 154.0], [44.9, 154.0], [45.0, 154.0], [45.1, 154.0], [45.2, 154.0], [45.3, 154.0], [45.4, 154.0], [45.5, 154.0], [45.6, 154.0], [45.7, 154.0], [45.8, 154.0], [45.9, 154.0], [46.0, 154.0], [46.1, 154.0], [46.2, 154.0], [46.3, 154.0], [46.4, 154.0], [46.5, 154.0], [46.6, 154.0], [46.7, 154.0], [46.8, 154.0], [46.9, 155.0], [47.0, 155.0], [47.1, 155.0], [47.2, 155.0], [47.3, 155.0], [47.4, 155.0], [47.5, 155.0], [47.6, 155.0], [47.7, 155.0], [47.8, 155.0], [47.9, 155.0], [48.0, 155.0], [48.1, 155.0], [48.2, 155.0], [48.3, 155.0], [48.4, 155.0], [48.5, 155.0], [48.6, 155.0], [48.7, 155.0], [48.8, 155.0], [48.9, 155.0], [49.0, 155.0], [49.1, 155.0], [49.2, 155.0], [49.3, 155.0], [49.4, 155.0], [49.5, 155.0], [49.6, 155.0], [49.7, 155.0], [49.8, 155.0], [49.9, 155.0], [50.0, 155.0], [50.1, 155.0], [50.2, 155.0], [50.3, 156.0], [50.4, 156.0], [50.5, 156.0], [50.6, 156.0], [50.7, 156.0], [50.8, 156.0], [50.9, 156.0], [51.0, 156.0], [51.1, 156.0], [51.2, 156.0], [51.3, 156.0], [51.4, 156.0], [51.5, 156.0], [51.6, 156.0], [51.7, 156.0], [51.8, 156.0], [51.9, 156.0], [52.0, 156.0], [52.1, 156.0], [52.2, 156.0], [52.3, 156.0], [52.4, 156.0], [52.5, 156.0], [52.6, 156.0], [52.7, 156.0], [52.8, 156.0], [52.9, 156.0], [53.0, 156.0], [53.1, 156.0], [53.2, 156.0], [53.3, 156.0], [53.4, 156.0], [53.5, 156.0], [53.6, 156.0], [53.7, 156.0], [53.8, 156.0], [53.9, 156.0], [54.0, 156.0], [54.1, 156.0], [54.2, 156.0], [54.3, 156.0], [54.4, 156.0], [54.5, 156.0], [54.6, 156.0], [54.7, 156.0], [54.8, 156.0], [54.9, 156.0], [55.0, 156.0], [55.1, 156.0], [55.2, 156.0], [55.3, 156.0], [55.4, 156.0], [55.5, 156.0], [55.6, 156.0], [55.7, 156.0], [55.8, 156.0], [55.9, 156.0], [56.0, 156.0], [56.1, 156.0], [56.2, 156.0], [56.3, 156.0], [56.4, 156.0], [56.5, 156.0], [56.6, 156.0], [56.7, 156.0], [56.8, 156.0], [56.9, 156.0], [57.0, 156.0], [57.1, 156.0], [57.2, 157.0], [57.3, 157.0], [57.4, 157.0], [57.5, 157.0], [57.6, 157.0], [57.7, 157.0], [57.8, 157.0], [57.9, 157.0], [58.0, 157.0], [58.1, 157.0], [58.2, 157.0], [58.3, 157.0], [58.4, 157.0], [58.5, 157.0], [58.6, 157.0], [58.7, 157.0], [58.8, 157.0], [58.9, 157.0], [59.0, 157.0], [59.1, 157.0], [59.2, 157.0], [59.3, 157.0], [59.4, 157.0], [59.5, 157.0], [59.6, 157.0], [59.7, 157.0], [59.8, 157.0], [59.9, 157.0], [60.0, 157.0], [60.1, 157.0], [60.2, 157.0], [60.3, 157.0], [60.4, 157.0], [60.5, 157.0], [60.6, 157.0], [60.7, 157.0], [60.8, 157.0], [60.9, 157.0], [61.0, 157.0], [61.1, 157.0], [61.2, 157.0], [61.3, 157.0], [61.4, 157.0], [61.5, 157.0], [61.6, 157.0], [61.7, 157.0], [61.8, 157.0], [61.9, 157.0], [62.0, 157.0], [62.1, 157.0], [62.2, 157.0], [62.3, 157.0], [62.4, 157.0], [62.5, 157.0], [62.6, 157.0], [62.7, 157.0], [62.8, 157.0], [62.9, 158.0], [63.0, 158.0], [63.1, 158.0], [63.2, 158.0], [63.3, 158.0], [63.4, 158.0], [63.5, 158.0], [63.6, 158.0], [63.7, 158.0], [63.8, 158.0], [63.9, 158.0], [64.0, 158.0], [64.1, 158.0], [64.2, 158.0], [64.3, 158.0], [64.4, 158.0], [64.5, 158.0], [64.6, 158.0], [64.7, 158.0], [64.8, 158.0], [64.9, 158.0], [65.0, 158.0], [65.1, 158.0], [65.2, 158.0], [65.3, 158.0], [65.4, 158.0], [65.5, 158.0], [65.6, 158.0], [65.7, 158.0], [65.8, 158.0], [65.9, 158.0], [66.0, 158.0], [66.1, 158.0], [66.2, 158.0], [66.3, 158.0], [66.4, 158.0], [66.5, 158.0], [66.6, 158.0], [66.7, 158.0], [66.8, 158.0], [66.9, 158.0], [67.0, 158.0], [67.1, 158.0], [67.2, 158.0], [67.3, 158.0], [67.4, 158.0], [67.5, 159.0], [67.6, 159.0], [67.7, 159.0], [67.8, 159.0], [67.9, 159.0], [68.0, 159.0], [68.1, 159.0], [68.2, 159.0], [68.3, 159.0], [68.4, 159.0], [68.5, 159.0], [68.6, 159.0], [68.7, 159.0], [68.8, 159.0], [68.9, 159.0], [69.0, 159.0], [69.1, 159.0], [69.2, 159.0], [69.3, 159.0], [69.4, 159.0], [69.5, 159.0], [69.6, 159.0], [69.7, 159.0], [69.8, 159.0], [69.9, 159.0], [70.0, 159.0], [70.1, 159.0], [70.2, 159.0], [70.3, 159.0], [70.4, 159.0], [70.5, 159.0], [70.6, 159.0], [70.7, 159.0], [70.8, 159.0], [70.9, 159.0], [71.0, 159.0], [71.1, 159.0], [71.2, 159.0], [71.3, 159.0], [71.4, 159.0], [71.5, 159.0], [71.6, 159.0], [71.7, 159.0], [71.8, 159.0], [71.9, 159.0], [72.0, 159.0], [72.1, 159.0], [72.2, 159.0], [72.3, 159.0], [72.4, 159.0], [72.5, 159.0], [72.6, 159.0], [72.7, 159.0], [72.8, 159.0], [72.9, 159.0], [73.0, 159.0], [73.1, 159.0], [73.2, 159.0], [73.3, 159.0], [73.4, 159.0], [73.5, 159.0], [73.6, 159.0], [73.7, 159.0], [73.8, 160.0], [73.9, 160.0], [74.0, 160.0], [74.1, 160.0], [74.2, 160.0], [74.3, 160.0], [74.4, 160.0], [74.5, 160.0], [74.6, 160.0], [74.7, 160.0], [74.8, 160.0], [74.9, 160.0], [75.0, 160.0], [75.1, 160.0], [75.2, 160.0], [75.3, 160.0], [75.4, 160.0], [75.5, 160.0], [75.6, 160.0], [75.7, 160.0], [75.8, 160.0], [75.9, 160.0], [76.0, 160.0], [76.1, 161.0], [76.2, 161.0], [76.3, 161.0], [76.4, 161.0], [76.5, 161.0], [76.6, 161.0], [76.7, 161.0], [76.8, 161.0], [76.9, 161.0], [77.0, 161.0], [77.1, 161.0], [77.2, 161.0], [77.3, 161.0], [77.4, 161.0], [77.5, 161.0], [77.6, 161.0], [77.7, 161.0], [77.8, 161.0], [77.9, 161.0], [78.0, 161.0], [78.1, 161.0], [78.2, 161.0], [78.3, 161.0], [78.4, 161.0], [78.5, 161.0], [78.6, 161.0], [78.7, 161.0], [78.8, 161.0], [78.9, 162.0], [79.0, 162.0], [79.1, 162.0], [79.2, 162.0], [79.3, 162.0], [79.4, 162.0], [79.5, 162.0], [79.6, 162.0], [79.7, 162.0], [79.8, 162.0], [79.9, 162.0], [80.0, 162.0], [80.1, 162.0], [80.2, 162.0], [80.3, 162.0], [80.4, 162.0], [80.5, 162.0], [80.6, 163.0], [80.7, 163.0], [80.8, 163.0], [80.9, 163.0], [81.0, 163.0], [81.1, 163.0], [81.2, 163.0], [81.3, 163.0], [81.4, 163.0], [81.5, 163.0], [81.6, 163.0], [81.7, 163.0], [81.8, 163.0], [81.9, 163.0], [82.0, 163.0], [82.1, 163.0], [82.2, 163.0], [82.3, 163.0], [82.4, 163.0], [82.5, 163.0], [82.6, 163.0], [82.7, 163.0], [82.8, 163.0], [82.9, 164.0], [83.0, 164.0], [83.1, 164.0], [83.2, 164.0], [83.3, 164.0], [83.4, 164.0], [83.5, 164.0], [83.6, 164.0], [83.7, 164.0], [83.8, 164.0], [83.9, 164.0], [84.0, 164.0], [84.1, 165.0], [84.2, 165.0], [84.3, 165.0], [84.4, 165.0], [84.5, 165.0], [84.6, 166.0], [84.7, 166.0], [84.8, 166.0], [84.9, 166.0], [85.0, 166.0], [85.1, 166.0], [85.2, 166.0], [85.3, 166.0], [85.4, 166.0], [85.5, 166.0], [85.6, 166.0], [85.7, 166.0], [85.8, 166.0], [85.9, 166.0], [86.0, 166.0], [86.1, 166.0], [86.2, 166.0], [86.3, 167.0], [86.4, 167.0], [86.5, 167.0], [86.6, 167.0], [86.7, 167.0], [86.8, 167.0], [86.9, 167.0], [87.0, 167.0], [87.1, 167.0], [87.2, 167.0], [87.3, 167.0], [87.4, 167.0], [87.5, 167.0], [87.6, 167.0], [87.7, 167.0], [87.8, 167.0], [87.9, 167.0], [88.0, 168.0], [88.1, 168.0], [88.2, 168.0], [88.3, 168.0], [88.4, 168.0], [88.5, 168.0], [88.6, 169.0], [88.7, 169.0], [88.8, 169.0], [88.9, 169.0], [89.0, 169.0], [89.1, 169.0], [89.2, 169.0], [89.3, 169.0], [89.4, 169.0], [89.5, 169.0], [89.6, 169.0], [89.7, 169.0], [89.8, 171.0], [89.9, 171.0], [90.0, 171.0], [90.1, 171.0], [90.2, 171.0], [90.3, 171.0], [90.4, 171.0], [90.5, 171.0], [90.6, 171.0], [90.7, 171.0], [90.8, 171.0], [90.9, 174.0], [91.0, 174.0], [91.1, 174.0], [91.2, 174.0], [91.3, 174.0], [91.4, 174.0], [91.5, 176.0], [91.6, 176.0], [91.7, 176.0], [91.8, 176.0], [91.9, 176.0], [92.0, 177.0], [92.1, 177.0], [92.2, 177.0], [92.3, 177.0], [92.4, 177.0], [92.5, 177.0], [92.6, 177.0], [92.7, 177.0], [92.8, 177.0], [92.9, 177.0], [93.0, 177.0], [93.1, 177.0], [93.2, 182.0], [93.3, 182.0], [93.4, 182.0], [93.5, 182.0], [93.6, 182.0], [93.7, 182.0], [93.8, 185.0], [93.9, 185.0], [94.0, 185.0], [94.1, 185.0], [94.2, 185.0], [94.3, 191.0], [94.4, 191.0], [94.5, 191.0], [94.6, 191.0], [94.7, 191.0], [94.8, 191.0], [94.9, 198.0], [95.0, 198.0], [95.1, 198.0], [95.2, 198.0], [95.3, 198.0], [95.4, 198.0], [95.5, 212.0], [95.6, 212.0], [95.7, 212.0], [95.8, 212.0], [95.9, 212.0], [96.0, 247.0], [96.1, 247.0], [96.2, 247.0], [96.3, 247.0], [96.4, 247.0], [96.5, 247.0], [96.6, 254.0], [96.7, 254.0], [96.8, 254.0], [96.9, 254.0], [97.0, 254.0], [97.1, 254.0], [97.2, 268.0], [97.3, 268.0], [97.4, 268.0], [97.5, 268.0], [97.6, 268.0], [97.7, 268.0], [97.8, 273.0], [97.9, 273.0], [98.0, 273.0], [98.1, 273.0], [98.2, 273.0], [98.3, 309.0], [98.4, 309.0], [98.5, 309.0], [98.6, 309.0], [98.7, 309.0], [98.8, 309.0], [98.9, 482.0], [99.0, 482.0], [99.1, 482.0], [99.2, 482.0], [99.3, 482.0], [99.4, 482.0], [99.5, 653.0], [99.6, 653.0], [99.7, 653.0], [99.8, 653.0], [99.9, 653.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 2.0], [4.9, 2.0], [5.0, 2.0], [5.1, 2.0], [5.2, 2.0], [5.3, 2.0], [5.4, 2.0], [5.5, 2.0], [5.6, 2.0], [5.7, 2.0], [5.8, 2.0], [5.9, 2.0], [6.0, 2.0], [6.1, 2.0], [6.2, 2.0], [6.3, 2.0], [6.4, 2.0], [6.5, 2.0], [6.6, 2.0], [6.7, 2.0], [6.8, 2.0], [6.9, 2.0], [7.0, 2.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 2.0], [14.5, 2.0], [14.6, 2.0], [14.7, 2.0], [14.8, 2.0], [14.9, 2.0], [15.0, 2.0], [15.1, 2.0], [15.2, 2.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 2.0], [17.7, 2.0], [17.8, 2.0], [17.9, 2.0], [18.0, 2.0], [18.1, 2.0], [18.2, 2.0], [18.3, 2.0], [18.4, 2.0], [18.5, 2.0], [18.6, 2.0], [18.7, 2.0], [18.8, 2.0], [18.9, 2.0], [19.0, 2.0], [19.1, 2.0], [19.2, 2.0], [19.3, 2.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 2.0], [20.0, 2.0], [20.1, 2.0], [20.2, 2.0], [20.3, 2.0], [20.4, 2.0], [20.5, 2.0], [20.6, 2.0], [20.7, 2.0], [20.8, 2.0], [20.9, 2.0], [21.0, 2.0], [21.1, 2.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 2.0], [21.6, 2.0], [21.7, 2.0], [21.8, 2.0], [21.9, 2.0], [22.0, 2.0], [22.1, 2.0], [22.2, 2.0], [22.3, 2.0], [22.4, 2.0], [22.5, 2.0], [22.6, 2.0], [22.7, 2.0], [22.8, 2.0], [22.9, 2.0], [23.0, 2.0], [23.1, 2.0], [23.2, 2.0], [23.3, 2.0], [23.4, 2.0], [23.5, 2.0], [23.6, 2.0], [23.7, 2.0], [23.8, 2.0], [23.9, 2.0], [24.0, 2.0], [24.1, 2.0], [24.2, 2.0], [24.3, 2.0], [24.4, 2.0], [24.5, 2.0], [24.6, 2.0], [24.7, 2.0], [24.8, 2.0], [24.9, 2.0], [25.0, 2.0], [25.1, 2.0], [25.2, 2.0], [25.3, 2.0], [25.4, 2.0], [25.5, 2.0], [25.6, 2.0], [25.7, 2.0], [25.8, 2.0], [25.9, 2.0], [26.0, 2.0], [26.1, 2.0], [26.2, 2.0], [26.3, 2.0], [26.4, 2.0], [26.5, 2.0], [26.6, 2.0], [26.7, 2.0], [26.8, 2.0], [26.9, 2.0], [27.0, 2.0], [27.1, 2.0], [27.2, 2.0], [27.3, 2.0], [27.4, 2.0], [27.5, 2.0], [27.6, 2.0], [27.7, 2.0], [27.8, 2.0], [27.9, 2.0], [28.0, 2.0], [28.1, 2.0], [28.2, 2.0], [28.3, 2.0], [28.4, 2.0], [28.5, 2.0], [28.6, 2.0], [28.7, 2.0], [28.8, 2.0], [28.9, 2.0], [29.0, 2.0], [29.1, 2.0], [29.2, 2.0], [29.3, 2.0], [29.4, 2.0], [29.5, 2.0], [29.6, 2.0], [29.7, 2.0], [29.8, 2.0], [29.9, 2.0], [30.0, 2.0], [30.1, 2.0], [30.2, 2.0], [30.3, 2.0], [30.4, 2.0], [30.5, 2.0], [30.6, 2.0], [30.7, 2.0], [30.8, 2.0], [30.9, 2.0], [31.0, 2.0], [31.1, 2.0], [31.2, 2.0], [31.3, 2.0], [31.4, 2.0], [31.5, 2.0], [31.6, 2.0], [31.7, 2.0], [31.8, 2.0], [31.9, 2.0], [32.0, 2.0], [32.1, 2.0], [32.2, 2.0], [32.3, 2.0], [32.4, 2.0], [32.5, 2.0], [32.6, 2.0], [32.7, 2.0], [32.8, 2.0], [32.9, 2.0], [33.0, 2.0], [33.1, 2.0], [33.2, 2.0], [33.3, 2.0], [33.4, 2.0], [33.5, 2.0], [33.6, 2.0], [33.7, 2.0], [33.8, 2.0], [33.9, 2.0], [34.0, 2.0], [34.1, 2.0], [34.2, 2.0], [34.3, 3.0], [34.4, 3.0], [34.5, 3.0], [34.6, 3.0], [34.7, 3.0], [34.8, 3.0], [34.9, 3.0], [35.0, 3.0], [35.1, 3.0], [35.2, 3.0], [35.3, 3.0], [35.4, 3.0], [35.5, 3.0], [35.6, 3.0], [35.7, 3.0], [35.8, 3.0], [35.9, 3.0], [36.0, 3.0], [36.1, 3.0], [36.2, 3.0], [36.3, 3.0], [36.4, 3.0], [36.5, 3.0], [36.6, 3.0], [36.7, 3.0], [36.8, 3.0], [36.9, 3.0], [37.0, 3.0], [37.1, 3.0], [37.2, 3.0], [37.3, 3.0], [37.4, 3.0], [37.5, 3.0], [37.6, 3.0], [37.7, 3.0], [37.8, 3.0], [37.9, 3.0], [38.0, 3.0], [38.1, 3.0], [38.2, 3.0], [38.3, 3.0], [38.4, 3.0], [38.5, 3.0], [38.6, 3.0], [38.7, 3.0], [38.8, 3.0], [38.9, 3.0], [39.0, 3.0], [39.1, 3.0], [39.2, 3.0], [39.3, 3.0], [39.4, 3.0], [39.5, 3.0], [39.6, 3.0], [39.7, 3.0], [39.8, 3.0], [39.9, 3.0], [40.0, 3.0], [40.1, 3.0], [40.2, 3.0], [40.3, 3.0], [40.4, 3.0], [40.5, 3.0], [40.6, 3.0], [40.7, 3.0], [40.8, 3.0], [40.9, 3.0], [41.0, 3.0], [41.1, 3.0], [41.2, 3.0], [41.3, 3.0], [41.4, 3.0], [41.5, 3.0], [41.6, 3.0], [41.7, 3.0], [41.8, 3.0], [41.9, 3.0], [42.0, 3.0], [42.1, 3.0], [42.2, 3.0], [42.3, 3.0], [42.4, 3.0], [42.5, 3.0], [42.6, 3.0], [42.7, 3.0], [42.8, 3.0], [42.9, 3.0], [43.0, 3.0], [43.1, 3.0], [43.2, 3.0], [43.3, 3.0], [43.4, 3.0], [43.5, 3.0], [43.6, 3.0], [43.7, 3.0], [43.8, 3.0], [43.9, 3.0], [44.0, 3.0], [44.1, 3.0], [44.2, 3.0], [44.3, 3.0], [44.4, 3.0], [44.5, 3.0], [44.6, 3.0], [44.7, 3.0], [44.8, 3.0], [44.9, 3.0], [45.0, 3.0], [45.1, 3.0], [45.2, 3.0], [45.3, 3.0], [45.4, 3.0], [45.5, 3.0], [45.6, 3.0], [45.7, 3.0], [45.8, 3.0], [45.9, 3.0], [46.0, 3.0], [46.1, 3.0], [46.2, 3.0], [46.3, 3.0], [46.4, 3.0], [46.5, 3.0], [46.6, 3.0], [46.7, 3.0], [46.8, 3.0], [46.9, 3.0], [47.0, 3.0], [47.1, 3.0], [47.2, 3.0], [47.3, 3.0], [47.4, 3.0], [47.5, 3.0], [47.6, 3.0], [47.7, 3.0], [47.8, 3.0], [47.9, 3.0], [48.0, 3.0], [48.1, 3.0], [48.2, 3.0], [48.3, 3.0], [48.4, 3.0], [48.5, 3.0], [48.6, 4.0], [48.7, 4.0], [48.8, 4.0], [48.9, 4.0], [49.0, 4.0], [49.1, 4.0], [49.2, 4.0], [49.3, 4.0], [49.4, 4.0], [49.5, 4.0], [49.6, 4.0], [49.7, 4.0], [49.8, 4.0], [49.9, 4.0], [50.0, 5.0], [50.1, 5.0], [50.2, 5.0], [50.3, 5.0], [50.4, 6.0], [50.5, 6.0], [50.6, 6.0], [50.7, 7.0], [50.8, 8.0], [50.9, 11.0], [51.0, 16.0], [51.1, 17.0], [51.2, 19.0], [51.3, 20.0], [51.4, 21.0], [51.5, 21.0], [51.6, 22.0], [51.7, 23.0], [51.8, 23.0], [51.9, 23.0], [52.0, 24.0], [52.1, 24.0], [52.2, 25.0], [52.3, 26.0], [52.4, 27.0], [52.5, 27.0], [52.6, 27.0], [52.7, 28.0], [52.8, 28.0], [52.9, 29.0], [53.0, 29.0], [53.1, 30.0], [53.2, 30.0], [53.3, 31.0], [53.4, 32.0], [53.5, 32.0], [53.6, 33.0], [53.7, 34.0], [53.8, 35.0], [53.9, 35.0], [54.0, 36.0], [54.1, 37.0], [54.2, 38.0], [54.3, 39.0], [54.4, 41.0], [54.5, 42.0], [54.6, 44.0], [54.7, 46.0], [54.8, 49.0], [54.9, 52.0], [55.0, 57.0], [55.1, 66.0], [55.2, 76.0], [55.3, 85.0], [55.4, 100.0], [55.5, 140.0], [55.6, 196.0], [55.7, 249.0], [55.8, 299.0], [55.9, 329.0], [56.0, 356.0], [56.1, 390.0], [56.2, 425.0], [56.3, 455.0], [56.4, 482.0], [56.5, 511.0], [56.6, 550.0], [56.7, 568.0], [56.8, 603.0], [56.9, 622.0], [57.0, 654.0], [57.1, 686.0], [57.2, 707.0], [57.3, 726.0], [57.4, 753.0], [57.5, 775.0], [57.6, 796.0], [57.7, 815.0], [57.8, 839.0], [57.9, 852.0], [58.0, 872.0], [58.1, 890.0], [58.2, 900.0], [58.3, 912.0], [58.4, 927.0], [58.5, 941.0], [58.6, 952.0], [58.7, 965.0], [58.8, 987.0], [58.9, 1001.0], [59.0, 1015.0], [59.1, 1035.0], [59.2, 1052.0], [59.3, 1067.0], [59.4, 1083.0], [59.5, 1099.0], [59.6, 1118.0], [59.7, 1139.0], [59.8, 1149.0], [59.9, 1161.0], [60.0, 1174.0], [60.1, 1184.0], [60.2, 1197.0], [60.3, 1214.0], [60.4, 1228.0], [60.5, 1238.0], [60.6, 1251.0], [60.7, 1261.0], [60.8, 1282.0], [60.9, 1299.0], [61.0, 1312.0], [61.1, 1327.0], [61.2, 1349.0], [61.3, 1359.0], [61.4, 1371.0], [61.5, 1384.0], [61.6, 1397.0], [61.7, 1415.0], [61.8, 1439.0], [61.9, 1449.0], [62.0, 1459.0], [62.1, 1478.0], [62.2, 1493.0], [62.3, 1501.0], [62.4, 1512.0], [62.5, 1530.0], [62.6, 1544.0], [62.7, 1557.0], [62.8, 1571.0], [62.9, 1588.0], [63.0, 1609.0], [63.1, 1618.0], [63.2, 1632.0], [63.3, 1647.0], [63.4, 1664.0], [63.5, 1682.0], [63.6, 1693.0], [63.7, 1708.0], [63.8, 1718.0], [63.9, 1731.0], [64.0, 1743.0], [64.1, 1754.0], [64.2, 1766.0], [64.3, 1780.0], [64.4, 1789.0], [64.5, 1798.0], [64.6, 1809.0], [64.7, 1822.0], [64.8, 1834.0], [64.9, 1847.0], [65.0, 1855.0], [65.1, 1865.0], [65.2, 1876.0], [65.3, 1884.0], [65.4, 1895.0], [65.5, 1905.0], [65.6, 1915.0], [65.7, 1922.0], [65.8, 1929.0], [65.9, 1940.0], [66.0, 1950.0], [66.1, 1966.0], [66.2, 1981.0], [66.3, 1988.0], [66.4, 1997.0], [66.5, 2008.0], [66.6, 2018.0], [66.7, 2024.0], [66.8, 2034.0], [66.9, 2041.0], [67.0, 2048.0], [67.1, 2059.0], [67.2, 2068.0], [67.3, 2074.0], [67.4, 2081.0], [67.5, 2090.0], [67.6, 2095.0], [67.7, 2102.0], [67.8, 2110.0], [67.9, 2119.0], [68.0, 2128.0], [68.1, 2136.0], [68.2, 2142.0], [68.3, 2147.0], [68.4, 2159.0], [68.5, 2167.0], [68.6, 2175.0], [68.7, 2184.0], [68.8, 2192.0], [68.9, 2202.0], [69.0, 2209.0], [69.1, 2221.0], [69.2, 2233.0], [69.3, 2239.0], [69.4, 2252.0], [69.5, 2262.0], [69.6, 2272.0], [69.7, 2278.0], [69.8, 2284.0], [69.9, 2291.0], [70.0, 2298.0], [70.1, 2308.0], [70.2, 2320.0], [70.3, 2329.0], [70.4, 2340.0], [70.5, 2352.0], [70.6, 2361.0], [70.7, 2371.0], [70.8, 2380.0], [70.9, 2385.0], [71.0, 2395.0], [71.1, 2406.0], [71.2, 2414.0], [71.3, 2424.0], [71.4, 2433.0], [71.5, 2441.0], [71.6, 2449.0], [71.7, 2456.0], [71.8, 2466.0], [71.9, 2475.0], [72.0, 2481.0], [72.1, 2488.0], [72.2, 2498.0], [72.3, 2506.0], [72.4, 2512.0], [72.5, 2516.0], [72.6, 2523.0], [72.7, 2534.0], [72.8, 2545.0], [72.9, 2553.0], [73.0, 2564.0], [73.1, 2570.0], [73.2, 2577.0], [73.3, 2583.0], [73.4, 2589.0], [73.5, 2599.0], [73.6, 2608.0], [73.7, 2614.0], [73.8, 2623.0], [73.9, 2628.0], [74.0, 2636.0], [74.1, 2643.0], [74.2, 2655.0], [74.3, 2663.0], [74.4, 2669.0], [74.5, 2684.0], [74.6, 2688.0], [74.7, 2693.0], [74.8, 2698.0], [74.9, 2704.0], [75.0, 2713.0], [75.1, 2722.0], [75.2, 2729.0], [75.3, 2741.0], [75.4, 2751.0], [75.5, 2767.0], [75.6, 2772.0], [75.7, 2783.0], [75.8, 2789.0], [75.9, 2798.0], [76.0, 2805.0], [76.1, 2811.0], [76.2, 2819.0], [76.3, 2827.0], [76.4, 2835.0], [76.5, 2842.0], [76.6, 2848.0], [76.7, 2855.0], [76.8, 2862.0], [76.9, 2870.0], [77.0, 2881.0], [77.1, 2891.0], [77.2, 2901.0], [77.3, 2909.0], [77.4, 2915.0], [77.5, 2922.0], [77.6, 2932.0], [77.7, 2938.0], [77.8, 2945.0], [77.9, 2955.0], [78.0, 2965.0], [78.1, 2973.0], [78.2, 2979.0], [78.3, 2989.0], [78.4, 3001.0], [78.5, 3008.0], [78.6, 3015.0], [78.7, 3024.0], [78.8, 3031.0], [78.9, 3039.0], [79.0, 3044.0], [79.1, 3050.0], [79.2, 3060.0], [79.3, 3065.0], [79.4, 3073.0], [79.5, 3079.0], [79.6, 3086.0], [79.7, 3094.0], [79.8, 3104.0], [79.9, 3110.0], [80.0, 3116.0], [80.1, 3123.0], [80.2, 3129.0], [80.3, 3135.0], [80.4, 3143.0], [80.5, 3149.0], [80.6, 3153.0], [80.7, 3164.0], [80.8, 3171.0], [80.9, 3178.0], [81.0, 3184.0], [81.1, 3192.0], [81.2, 3198.0], [81.3, 3204.0], [81.4, 3211.0], [81.5, 3217.0], [81.6, 3227.0], [81.7, 3233.0], [81.8, 3240.0], [81.9, 3247.0], [82.0, 3253.0], [82.1, 3259.0], [82.2, 3266.0], [82.3, 3271.0], [82.4, 3277.0], [82.5, 3284.0], [82.6, 3291.0], [82.7, 3298.0], [82.8, 3305.0], [82.9, 3309.0], [83.0, 3318.0], [83.1, 3324.0], [83.2, 3331.0], [83.3, 3339.0], [83.4, 3345.0], [83.5, 3349.0], [83.6, 3355.0], [83.7, 3360.0], [83.8, 3369.0], [83.9, 3379.0], [84.0, 3385.0], [84.1, 3392.0], [84.2, 3399.0], [84.3, 3408.0], [84.4, 3415.0], [84.5, 3421.0], [84.6, 3428.0], [84.7, 3434.0], [84.8, 3443.0], [84.9, 3452.0], [85.0, 3457.0], [85.1, 3463.0], [85.2, 3469.0], [85.3, 3477.0], [85.4, 3484.0], [85.5, 3493.0], [85.6, 3502.0], [85.7, 3506.0], [85.8, 3511.0], [85.9, 3518.0], [86.0, 3525.0], [86.1, 3530.0], [86.2, 3536.0], [86.3, 3542.0], [86.4, 3551.0], [86.5, 3560.0], [86.6, 3566.0], [86.7, 3577.0], [86.8, 3583.0], [86.9, 3588.0], [87.0, 3593.0], [87.1, 3600.0], [87.2, 3607.0], [87.3, 3616.0], [87.4, 3620.0], [87.5, 3626.0], [87.6, 3633.0], [87.7, 3640.0], [87.8, 3647.0], [87.9, 3654.0], [88.0, 3662.0], [88.1, 3671.0], [88.2, 3678.0], [88.3, 3684.0], [88.4, 3692.0], [88.5, 3701.0], [88.6, 3711.0], [88.7, 3721.0], [88.8, 3732.0], [88.9, 3740.0], [89.0, 3751.0], [89.1, 3757.0], [89.2, 3766.0], [89.3, 3778.0], [89.4, 3785.0], [89.5, 3794.0], [89.6, 3799.0], [89.7, 3806.0], [89.8, 3814.0], [89.9, 3826.0], [90.0, 3831.0], [90.1, 3839.0], [90.2, 3846.0], [90.3, 3855.0], [90.4, 3863.0], [90.5, 3874.0], [90.6, 3887.0], [90.7, 3895.0], [90.8, 3903.0], [90.9, 3909.0], [91.0, 3916.0], [91.1, 3927.0], [91.2, 3937.0], [91.3, 3943.0], [91.4, 3950.0], [91.5, 3957.0], [91.6, 3963.0], [91.7, 3973.0], [91.8, 3984.0], [91.9, 3992.0], [92.0, 3999.0], [92.1, 4008.0], [92.2, 4017.0], [92.3, 4026.0], [92.4, 4034.0], [92.5, 4048.0], [92.6, 4058.0], [92.7, 4067.0], [92.8, 4076.0], [92.9, 4088.0], [93.0, 4096.0], [93.1, 4104.0], [93.2, 4113.0], [93.3, 4122.0], [93.4, 4135.0], [93.5, 4152.0], [93.6, 4165.0], [93.7, 4180.0], [93.8, 4197.0], [93.9, 4208.0], [94.0, 4219.0], [94.1, 4234.0], [94.2, 4244.0], [94.3, 4265.0], [94.4, 4284.0], [94.5, 4298.0], [94.6, 4320.0], [94.7, 4341.0], [94.8, 4358.0], [94.9, 4374.0], [95.0, 4392.0], [95.1, 4413.0], [95.2, 4432.0], [95.3, 4453.0], [95.4, 4489.0], [95.5, 4512.0], [95.6, 4540.0], [95.7, 4569.0], [95.8, 4584.0], [95.9, 4608.0], [96.0, 4641.0], [96.1, 4667.0], [96.2, 4693.0], [96.3, 4726.0], [96.4, 4751.0], [96.5, 4793.0], [96.6, 4825.0], [96.7, 4859.0], [96.8, 4896.0], [96.9, 4927.0], [97.0, 4990.0], [97.1, 5027.0], [97.2, 5067.0], [97.3, 5110.0], [97.4, 5140.0], [97.5, 5186.0], [97.6, 5228.0], [97.7, 5292.0], [97.8, 5334.0], [97.9, 5370.0], [98.0, 5405.0], [98.1, 5453.0], [98.2, 5501.0], [98.3, 5546.0], [98.4, 5615.0], [98.5, 5671.0], [98.6, 5721.0], [98.7, 5816.0], [98.8, 5881.0], [98.9, 5944.0], [99.0, 6022.0], [99.1, 6082.0], [99.2, 6141.0], [99.3, 6229.0], [99.4, 6414.0], [99.5, 6521.0], [99.6, 6640.0], [99.7, 6767.0], [99.8, 6873.0], [99.9, 7149.0], [100.0, 8705.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 9812.0, "series": [{"data": [[0.0, 9812.0], [600.0, 66.0], [700.0, 87.0], [800.0, 98.0], [900.0, 121.0], [1000.0, 114.0], [1100.0, 92.0], [1200.0, 89.0], [1300.0, 90.0], [1400.0, 110.0], [1500.0, 110.0], [1600.0, 118.0], [1700.0, 116.0], [1800.0, 170.0], [1900.0, 186.0], [2000.0, 217.0], [2100.0, 228.0], [2300.0, 181.0], [2200.0, 195.0], [2400.0, 203.0], [2500.0, 230.0], [2600.0, 251.0], [2700.0, 254.0], [2800.0, 226.0], [2900.0, 218.0], [3000.0, 240.0], [3100.0, 195.0], [3300.0, 254.0], [3200.0, 261.0], [3400.0, 278.0], [3500.0, 243.0], [3700.0, 225.0], [3600.0, 222.0], [3800.0, 214.0], [3900.0, 202.0], [4000.0, 160.0], [4100.0, 145.0], [4300.0, 109.0], [4200.0, 133.0], [4500.0, 74.0], [4600.0, 71.0], [4400.0, 96.0], [4800.0, 74.0], [4700.0, 62.0], [5000.0, 57.0], [5100.0, 37.0], [4900.0, 53.0], [5300.0, 32.0], [5200.0, 22.0], [5400.0, 24.0], [5600.0, 19.0], [5500.0, 20.0], [5800.0, 12.0], [5700.0, 14.0], [6000.0, 5.0], [6100.0, 8.0], [5900.0, 14.0], [6200.0, 10.0], [6300.0, 12.0], [6400.0, 6.0], [6500.0, 4.0], [6600.0, 4.0], [6800.0, 5.0], [6900.0, 6.0], [6700.0, 6.0], [7000.0, 1.0], [7100.0, 3.0], [7200.0, 1.0], [7400.0, 2.0], [7500.0, 1.0], [7700.0, 1.0], [100.0, 48.0], [200.0, 42.0], [300.0, 51.0], [400.0, 82.0], [500.0, 58.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[300.0, 1.0], [600.0, 1.0], [100.0, 167.0], [200.0, 5.0], [400.0, 1.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 9694.0], [600.0, 64.0], [700.0, 81.0], [800.0, 101.0], [900.0, 120.0], [1000.0, 108.0], [1100.0, 126.0], [1200.0, 121.0], [1300.0, 122.0], [1400.0, 118.0], [1500.0, 115.0], [1600.0, 121.0], [1700.0, 153.0], [1800.0, 164.0], [1900.0, 173.0], [2000.0, 213.0], [2100.0, 215.0], [2300.0, 182.0], [2200.0, 198.0], [2400.0, 207.0], [2500.0, 222.0], [2600.0, 230.0], [2800.0, 220.0], [2700.0, 194.0], [2900.0, 211.0], [3000.0, 237.0], [3100.0, 259.0], [3300.0, 257.0], [3200.0, 265.0], [3400.0, 240.0], [3500.0, 264.0], [3700.0, 194.0], [3600.0, 246.0], [3800.0, 197.0], [3900.0, 224.0], [4000.0, 181.0], [4100.0, 139.0], [4200.0, 120.0], [4300.0, 90.0], [4400.0, 70.0], [4500.0, 80.0], [4600.0, 59.0], [4700.0, 55.0], [4800.0, 47.0], [5100.0, 48.0], [5000.0, 40.0], [4900.0, 39.0], [5200.0, 32.0], [5300.0, 47.0], [5500.0, 35.0], [5400.0, 34.0], [5600.0, 32.0], [5700.0, 20.0], [5800.0, 23.0], [6000.0, 30.0], [6100.0, 21.0], [5900.0, 29.0], [6200.0, 14.0], [6300.0, 7.0], [6500.0, 15.0], [6600.0, 14.0], [6400.0, 16.0], [6800.0, 13.0], [6700.0, 15.0], [6900.0, 9.0], [7000.0, 5.0], [7100.0, 3.0], [7300.0, 3.0], [7200.0, 3.0], [7400.0, 2.0], [7500.0, 2.0], [7600.0, 2.0], [7800.0, 2.0], [7900.0, 1.0], [7700.0, 1.0], [8700.0, 1.0], [100.0, 39.0], [200.0, 33.0], [300.0, 58.0], [400.0, 57.0], [500.0, 58.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1783.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 18644.0, "series": [{"data": [[0.0, 2019.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1783.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 12729.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 18644.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.13157894736842, "minX": 1.5876861E12, "maxY": 175.0, "series": [{"data": [[1.5876864E12, 175.0], [1.5876861E12, 10.13157894736842], [1.58768682E12, 67.31840000000001], [1.58768646E12, 175.0], [1.58768616E12, 105.98927477017371], [1.58768676E12, 154.43212803793725], [1.58768652E12, 175.0], [1.58768622E12, 175.0], [1.5876867E12, 175.0], [1.58768658E12, 175.0], [1.58768628E12, 175.0], [1.58768664E12, 175.0], [1.58768634E12, 175.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768682E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.2500000000000002, "minX": 1.0, "maxY": 4705.285714285714, "series": [{"data": [[3.0, 40.0], [5.0, 39.0], [7.0, 23.0], [8.0, 35.0], [9.0, 31.0], [10.0, 53.0], [11.0, 26.0], [12.0, 36.0], [13.0, 37.0], [14.0, 32.0], [16.0, 44.333333333333336], [17.0, 19.0], [18.0, 22.333333333333332], [19.0, 29.666666666666668], [20.0, 40.333333333333336], [21.0, 54.666666666666664], [22.0, 38.5], [23.0, 29.666666666666668], [24.0, 39.0], [25.0, 22.666666666666668], [26.0, 29.5], [27.0, 31.5], [28.0, 40.125], [29.0, 27.166666666666664], [30.0, 29.666666666666668], [31.0, 26.0], [32.0, 26.4], [33.0, 30.999999999999996], [34.0, 35.5], [35.0, 28.666666666666668], [36.0, 38.25], [37.0, 31.75], [39.0, 32.18181818181819], [38.0, 27.0], [40.0, 28.25], [41.0, 25.714285714285715], [42.0, 31.666666666666668], [43.0, 25.0], [44.0, 28.777777777777782], [45.0, 32.15384615384616], [46.0, 37.57142857142857], [47.0, 29.384615384615387], [48.0, 32.0], [49.0, 29.5], [50.0, 27.5], [51.0, 29.2], [52.0, 32.3], [53.0, 26.666666666666668], [54.0, 33.55555555555556], [55.0, 32.75], [56.0, 33.1], [57.0, 32.42857142857142], [58.0, 33.21428571428571], [59.0, 72.28571428571429], [60.0, 26.333333333333336], [61.0, 38.44444444444444], [62.0, 36.625], [63.0, 23.5], [64.0, 31.22222222222222], [65.0, 28.5], [66.0, 54.875], [67.0, 31.000000000000004], [68.0, 33.23529411764706], [69.0, 33.95454545454545], [70.0, 26.25], [71.0, 36.75], [72.0, 39.392857142857146], [73.0, 30.4], [74.0, 41.81818181818182], [75.0, 29.0], [76.0, 35.75], [77.0, 21.5], [78.0, 34.230769230769226], [79.0, 37.333333333333336], [80.0, 44.117647058823536], [81.0, 31.42857142857143], [82.0, 29.599999999999998], [83.0, 30.8], [84.0, 393.9032258064517], [85.0, 359.4], [86.0, 714.7272727272727], [87.0, 544.1500000000001], [88.0, 33.75], [89.0, 28.285714285714285], [90.0, 71.4], [91.0, 201.15384615384616], [92.0, 418.81249999999994], [93.0, 64.0], [94.0, 373.92307692307696], [95.0, 21.8], [96.0, 1212.3333333333333], [97.0, 435.57692307692315], [98.0, 388.5], [99.0, 1543.3461538461536], [102.0, 1048.8], [103.0, 1291.5], [101.0, 637.6666666666666], [100.0, 880.4], [104.0, 984.7499999999999], [105.0, 1779.0], [106.0, 2070.0], [107.0, 1300.5454545454545], [108.0, 1266.2666666666664], [109.0, 1326.2439024390246], [110.0, 1044.5], [111.0, 1457.1249999999995], [112.0, 1241.1666666666667], [113.0, 1462.5], [114.0, 1503.5555555555554], [115.0, 917.125], [116.0, 1138.375], [117.0, 1154.8888888888887], [118.0, 1265.2399999999998], [119.0, 985.0], [120.0, 978.6060606060606], [121.0, 713.375], [122.0, 822.8], [123.0, 783.2857142857143], [124.0, 1259.75], [125.0, 1265.4285714285716], [126.0, 745.6666666666667], [127.0, 1860.0], [128.0, 981.1562500000005], [129.0, 1044.6666666666667], [130.0, 927.5102040816327], [131.0, 1824.5], [132.0, 1462.45], [133.0, 1774.25], [134.0, 1908.1052631578943], [135.0, 1821.928571428571], [136.0, 1719.6111111111115], [137.0, 2150.6363636363635], [138.0, 2250.1842105263163], [139.0, 2792.6153846153848], [140.0, 3504.6101694915264], [141.0, 2255.3333333333335], [142.0, 2002.0], [143.0, 4705.285714285714], [144.0, 4249.470588235295], [145.0, 4098.37037037037], [146.0, 2929.793103448276], [147.0, 1078.0], [148.0, 2191.428571428571], [149.0, 2313.9], [150.0, 2142.5], [151.0, 197.74074074074076], [152.0, 400.8478260869565], [153.0, 1334.5], [154.0, 2060.5384615384614], [156.0, 701.3333333333333], [157.0, 379.9206349206348], [158.0, 425.3333333333334], [159.0, 832.5999999999999], [155.0, 1.5517241379310343], [160.0, 2752.0], [161.0, 2965.8], [162.0, 468.76190476190476], [163.0, 858.6190476190475], [164.0, 2226.5], [165.0, 292.95833333333337], [166.0, 1368.2631578947369], [167.0, 170.83999999999995], [169.0, 1884.375], [170.0, 631.1538461538463], [171.0, 2497.1666666666665], [172.0, 192.68253968253975], [173.0, 129.42982456140354], [174.0, 84.1363636363636], [175.0, 1330.3446137607962], [168.0, 1.2500000000000002]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[167.49868571428533, 1264.372857142869]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 151.0], [3.0, 149.0], [4.0, 156.0], [5.0, 159.0], [6.0, 161.0], [7.0, 150.0], [8.0, 156.0], [9.0, 152.0], [10.0, 165.0], [11.0, 163.0], [12.0, 152.0], [13.0, 156.0], [14.0, 158.0], [15.0, 161.0], [16.0, 157.0], [17.0, 159.0], [18.0, 151.0], [19.0, 150.0], [20.0, 166.0], [21.0, 247.0], [22.0, 156.0], [23.0, 156.0], [24.0, 174.0], [25.0, 154.0], [26.0, 154.0], [27.0, 158.0], [28.0, 171.0], [29.0, 146.0], [30.0, 167.0], [31.0, 167.0], [32.0, 161.0], [33.0, 154.0], [34.0, 151.0], [35.0, 157.0], [36.0, 157.0], [37.0, 152.0], [38.0, 161.0], [39.0, 163.0], [40.0, 159.0], [41.0, 149.0], [42.0, 150.0], [43.0, 148.0], [44.0, 185.0], [45.0, 158.0], [46.0, 177.0], [47.0, 150.0], [48.0, 158.0], [49.0, 151.0], [50.0, 169.0], [51.0, 309.0], [52.0, 273.0], [53.0, 268.0], [54.0, 254.0], [55.0, 148.0], [56.0, 169.0], [57.0, 149.0], [58.0, 198.0], [59.0, 157.0], [60.0, 156.0], [61.0, 145.0], [62.0, 159.0], [63.0, 152.0], [64.0, 162.0], [65.0, 156.0], [66.0, 155.0], [67.0, 166.0], [68.0, 150.0], [69.0, 150.0], [70.0, 153.0], [71.0, 159.0], [72.0, 152.0], [73.0, 159.0], [74.0, 153.0], [75.0, 159.0], [76.0, 153.0], [77.0, 151.0], [78.0, 152.0], [79.0, 150.0], [80.0, 145.0], [81.0, 154.0], [82.0, 151.0], [83.0, 157.0], [84.0, 148.0], [85.0, 149.0], [86.0, 156.0], [87.0, 148.0], [88.0, 154.0], [89.0, 151.0], [90.0, 166.0], [91.0, 159.0], [92.0, 154.0], [93.0, 156.0], [94.0, 160.0], [95.0, 155.0], [96.0, 152.0], [97.0, 171.0], [99.0, 653.0], [100.0, 347.0], [101.0, 164.0], [102.0, 164.0], [103.0, 167.0], [104.0, 182.0], [105.0, 155.0], [106.0, 150.0], [107.0, 155.0], [108.0, 150.0], [109.0, 158.0], [110.0, 152.0], [111.0, 145.0], [112.0, 163.0], [113.0, 151.0], [114.0, 168.0], [115.0, 146.0], [116.0, 150.0], [117.0, 158.0], [118.0, 149.0], [119.0, 152.0], [120.0, 151.0], [121.0, 146.0], [122.0, 160.0], [123.0, 151.0], [124.0, 152.0], [125.0, 151.0], [126.0, 150.0], [127.0, 176.0], [128.0, 160.0], [129.0, 152.0], [130.0, 148.0], [131.0, 147.0], [132.0, 156.0], [133.0, 161.0], [134.0, 152.0], [135.0, 162.0], [136.0, 157.0], [137.0, 155.0], [138.0, 149.0], [139.0, 156.0], [140.0, 152.0], [141.0, 151.0], [142.0, 159.0], [143.0, 156.0], [144.0, 154.0], [145.0, 150.0], [146.0, 149.0], [147.0, 158.0], [148.0, 154.0], [149.0, 177.0], [150.0, 160.0], [151.0, 155.0], [152.0, 153.0], [153.0, 157.0], [154.0, 153.0], [155.0, 157.0], [156.0, 159.0], [157.0, 147.0], [158.0, 152.0], [159.0, 157.0], [160.0, 143.0], [161.0, 157.0], [162.0, 159.0], [163.0, 158.0], [164.0, 151.0], [165.0, 162.0], [166.0, 153.0], [167.0, 152.0], [168.0, 163.0], [169.0, 150.0], [170.0, 152.0], [171.0, 154.0], [172.0, 152.0], [173.0, 152.0], [174.0, 149.0], [175.0, 147.0], [1.0, 191.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[88.01142857142855, 164.61714285714282]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[5.0, 46.0], [6.0, 41.5], [8.0, 27.0], [9.0, 29.0], [10.0, 34.0], [11.0, 24.5], [12.0, 35.0], [13.0, 30.0], [14.0, 31.666666666666668], [15.0, 31.0], [16.0, 28.5], [17.0, 35.25], [18.0, 36.25], [19.0, 19.0], [20.0, 19.0], [21.0, 58.333333333333336], [22.0, 26.666666666666668], [23.0, 25.5], [24.0, 33.0], [25.0, 26.75], [26.0, 31.6], [27.0, 33.5], [28.0, 29.833333333333336], [29.0, 33.714285714285715], [30.0, 38.5], [31.0, 31.333333333333332], [32.0, 28.8], [33.0, 28.285714285714285], [34.0, 33.0], [35.0, 27.666666666666668], [36.0, 44.25], [37.0, 29.166666666666664], [38.0, 28.75], [39.0, 32.5], [40.0, 33.81818181818181], [41.0, 23.0], [42.0, 29.8], [43.0, 25.75], [44.0, 26.9], [45.0, 34.4], [46.0, 41.333333333333336], [47.0, 34.666666666666664], [48.0, 36.0], [49.0, 28.0], [50.0, 25.8], [51.0, 29.375], [52.0, 46.4], [53.0, 32.75], [54.0, 44.91666666666667], [55.0, 32.166666666666664], [56.0, 30.53846153846154], [57.0, 27.166666666666668], [58.0, 31.444444444444443], [59.0, 77.72727272727272], [60.0, 36.2], [61.0, 46.6], [62.0, 51.0], [63.0, 33.666666666666664], [64.0, 31.166666666666668], [65.0, 51.666666666666664], [66.0, 47.27272727272727], [67.0, 27.0], [68.0, 48.07692307692308], [69.0, 33.77777777777778], [70.0, 30.099999999999994], [71.0, 35.13333333333333], [72.0, 36.23333333333335], [73.0, 29.0], [74.0, 42.58333333333333], [75.0, 35.0], [76.0, 38.666666666666664], [77.0, 30.384615384615387], [78.0, 27.5], [79.0, 44.42857142857142], [80.0, 44.285714285714285], [81.0, 37.46666666666667], [82.0, 27.75], [83.0, 28.09090909090909], [84.0, 593.8148148148147], [85.0, 121.14285714285714], [86.0, 591.95], [87.0, 350.1428571428571], [88.0, 32.63636363636364], [89.0, 38.2], [90.0, 122.0], [91.0, 631.9166666666667], [92.0, 598.8571428571428], [93.0, 30.545454545454543], [94.0, 438.61111111111114], [95.0, 29.416666666666668], [96.0, 613.3571428571429], [97.0, 899.76], [98.0, 23.333333333333332], [99.0, 1638.0000000000002], [102.0, 1128.4736842105265], [103.0, 1058.7222222222224], [100.0, 1545.1666666666665], [104.0, 1180.65], [105.0, 1190.1666666666667], [106.0, 1047.5], [107.0, 1426.0833333333333], [108.0, 1460.7222222222226], [109.0, 1660.2894736842104], [110.0, 1866.4285714285713], [111.0, 1117.125], [112.0, 791.0000000000001], [113.0, 1336.0], [114.0, 855.5714285714284], [115.0, 859.6500000000001], [116.0, 1628.0], [117.0, 1131.192307692308], [118.0, 1179.3333333333335], [119.0, 1182.2], [120.0, 997.0740740740741], [121.0, 1120.1], [122.0, 948.125], [123.0, 894.9999999999999], [124.0, 1300.3333333333333], [125.0, 823.8235294117648], [126.0, 471.6], [127.0, 1417.5], [128.0, 836.6851851851854], [129.0, 1612.2307692307693], [130.0, 990.9599999999998], [131.0, 2262.6666666666665], [132.0, 1218.40625], [133.0, 1306.1666666666665], [134.0, 1621.9583333333333], [135.0, 1731.6], [136.0, 1957.0000000000002], [137.0, 2184.0], [138.0, 2607.4615384615386], [139.0, 2664.4], [140.0, 3557.9333333333334], [141.0, 4620.0], [142.0, 4514.48275862069], [143.0, 3830.4761904761904], [144.0, 2848.818181818182], [145.0, 3381.9230769230767], [146.0, 2839.3846153846152], [147.0, 1987.8749999999998], [148.0, 2075.714285714286], [149.0, 2555.0], [150.0, 2514.4], [151.0, 270.8], [152.0, 273.90410958904135], [154.0, 1745.0], [155.0, 69.35555555555553], [156.0, 1383.6923076923078], [157.0, 196.7400000000001], [158.0, 493.56756756756744], [159.0, 531.6000000000001], [153.0, 2.5], [160.0, 1587.3636363636365], [161.0, 453.5000000000001], [162.0, 302.99999999999994], [163.0, 1098.0526315789473], [164.0, 2206.0], [166.0, 2260.875000000001], [167.0, 561.5344827586204], [165.0, 1.8333333333333335], [168.0, 251.15624999999994], [169.0, 4026.8], [170.0, 188.58823529411754], [171.0, 1284.0], [172.0, 1309.9130434782608], [173.0, 113.4265734265735], [174.0, 50.45945945945945], [175.0, 1376.5150554675101]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[167.4806285714277, 1307.002171428576]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 175.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 218.03333333333333, "minX": 1.5876861E12, "maxY": 266353.63333333336, "series": [{"data": [[1.5876864E12, 248541.68333333332], [1.5876861E12, 2911.15], [1.58768682E12, 72524.95], [1.58768646E12, 220285.75], [1.58768616E12, 212307.9], [1.58768676E12, 147565.25], [1.58768652E12, 163508.25], [1.58768622E12, 266353.63333333336], [1.5876867E12, 96526.56666666667], [1.58768658E12, 14805.55], [1.58768628E12, 253240.31666666668], [1.58768664E12, 32953.416666666664], [1.58768634E12, 222110.58333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5876864E12, 16487.933333333334], [1.5876861E12, 218.03333333333333], [1.58768682E12, 4469.366666666667], [1.58768646E12, 13770.8], [1.58768616E12, 13465.966666666667], [1.58768676E12, 24124.433333333334], [1.58768652E12, 22908.733333333334], [1.58768622E12, 17245.633333333335], [1.5876867E12, 30552.166666666668], [1.58768658E12, 39947.36666666667], [1.58768628E12, 17453.366666666665], [1.58768664E12, 36429.066666666666], [1.58768634E12, 13842.133333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768682E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2.3559626436781653, "minX": 1.5876861E12, "maxY": 3579.481250000001, "series": [{"data": [[1.5876864E12, 2689.5866551126524], [1.5876861E12, 50.333333333333336], [1.58768682E12, 319.2326283987916], [1.58768646E12, 3579.481250000001], [1.58768616E12, 1290.1718569780842], [1.58768676E12, 743.1302298173248], [1.58768652E12, 1515.173100871729], [1.58768622E12, 2535.3039134054957], [1.5876867E12, 518.7386840877274], [1.58768658E12, 2.8958259008205474], [1.58768628E12, 2359.8891605541985], [1.58768664E12, 101.24272226593276], [1.58768634E12, 3489.2343749999995]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.5876861E12, 158.5625], [1.58768616E12, 165.22641509433956]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.5876864E12, 2726.3307291666674], [1.5876861E12, 34.69230769230769], [1.58768682E12, 328.5578231292516], [1.58768646E12, 3530.0983436853016], [1.58768616E12, 1248.062231759656], [1.58768676E12, 811.7036374478231], [1.58768652E12, 1490.2465581977453], [1.58768622E12, 2546.479768786129], [1.5876867E12, 510.5521126760565], [1.58768658E12, 2.3559626436781653], [1.58768628E12, 2489.063426688633], [1.58768664E12, 272.209557383471], [1.58768634E12, 3508.5573770491787]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768682E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2.3502155172413857, "minX": 1.5876861E12, "maxY": 3579.3104166666662, "series": [{"data": [[1.5876864E12, 2688.5597920277282], [1.5876861E12, 49.333333333333336], [1.58768682E12, 318.54984894259786], [1.58768646E12, 3579.3104166666662], [1.58768616E12, 1289.7981545559403], [1.58768676E12, 742.1697112551575], [1.58768652E12, 1515.0983810709859], [1.58768622E12, 2534.688592839292], [1.5876867E12, 518.6406906206253], [1.58768658E12, 2.8897609703888745], [1.58768628E12, 2358.6650366748213], [1.58768664E12, 101.07081038552333], [1.58768634E12, 3488.893750000003]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.5876861E12, 158.3125], [1.58768616E12, 165.16352201257862]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.5876864E12, 2725.38888888889], [1.5876861E12, 34.23076923076924], [1.58768682E12, 327.9761904761901], [1.58768646E12, 3529.895445134572], [1.58768616E12, 1247.696351931331], [1.58768676E12, 811.0441264162191], [1.58768652E12, 1490.1864831038795], [1.58768622E12, 2545.826589595377], [1.5876867E12, 510.42816901408435], [1.58768658E12, 2.3502155172413857], [1.58768628E12, 2487.7355848434954], [1.58768664E12, 272.0842146494318], [1.58768634E12, 3508.187499999993]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768682E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.5876861E12, "maxY": 2.4375, "series": [{"data": [[1.5876864E12, 0.42374350086655077], [1.5876861E12, 1.0], [1.58768682E12, 0.07854984894259825], [1.58768646E12, 0.44687499999999997], [1.58768616E12, 0.32641291810841977], [1.58768676E12, 0.1490866234531529], [1.58768652E12, 0.20672478206724776], [1.58768622E12, 0.5412156536219821], [1.5876867E12, 0.06672888474101725], [1.58768658E12, 0.0], [1.58768628E12, 0.4343928280358589], [1.58768664E12, 0.01888276947285602], [1.58768634E12, 0.4437500000000003]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.5876861E12, 2.4375], [1.58768616E12, 0.654088050314465]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.5876864E12, 0.423611111111111], [1.5876861E12, 0.0], [1.58768682E12, 0.4149659863945579], [1.58768646E12, 0.43892339544513476], [1.58768616E12, 0.5289699570815444], [1.58768676E12, 0.4293381037567085], [1.58768652E12, 0.4480600750938674], [1.58768622E12, 0.5383980181668041], [1.5876867E12, 0.452582159624413], [1.58768658E12, 0.433189655172413], [1.58768628E12, 0.4785831960461285], [1.58768664E12, 0.5812769291030158], [1.58768634E12, 0.44877049180327866]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768682E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 12.0, "minX": 1.5876861E12, "maxY": 8705.0, "series": [{"data": [[1.5876864E12, 7717.0], [1.5876867E12, 4066.0], [1.5876861E12, 191.0], [1.58768628E12, 6628.0], [1.58768682E12, 3337.0], [1.58768646E12, 5721.0], [1.58768616E12, 7055.0], [1.58768664E12, 7205.0], [1.58768634E12, 8705.0], [1.58768676E12, 6324.0], [1.58768652E12, 5154.0], [1.58768622E12, 7886.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5876864E12, 565.0], [1.5876867E12, 47.0], [1.5876861E12, 18.0], [1.58768628E12, 19.0], [1.58768682E12, 18.0], [1.58768646E12, 1445.0], [1.58768616E12, 13.0], [1.58768664E12, 3141.0], [1.58768634E12, 139.0], [1.58768676E12, 22.0], [1.58768652E12, 12.0], [1.58768622E12, 541.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5876864E12, 3794.5], [1.5876867E12, 3521.8], [1.5876861E12, 161.2], [1.58768628E12, 3749.7], [1.58768682E12, 1186.4], [1.58768646E12, 4436.6], [1.58768616E12, 3188.800000000001], [1.58768664E12, 6856.0], [1.58768634E12, 5427.4], [1.58768676E12, 3929.3999999999996], [1.58768652E12, 4374.8], [1.58768622E12, 3672.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5876864E12, 5950.85], [1.5876867E12, 3786.84], [1.5876861E12, 191.0], [1.58768628E12, 6165.86], [1.58768682E12, 2381.260000000001], [1.58768646E12, 5259.03], [1.58768616E12, 5813.1], [1.58768664E12, 7120.04], [1.58768634E12, 6752.48], [1.58768676E12, 5988.12], [1.58768652E12, 4853.0], [1.58768622E12, 6841.499999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5876864E12, 4053.25], [1.5876867E12, 3640.0], [1.5876861E12, 166.29999999999993], [1.58768628E12, 4798.35], [1.58768682E12, 1597.5999999999995], [1.58768646E12, 4741.299999999999], [1.58768616E12, 3943.6999999999994], [1.58768664E12, 6954.6], [1.58768634E12, 5868.0], [1.58768676E12, 5196.5999999999985], [1.58768652E12, 4572.4], [1.58768622E12, 4004.5]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768682E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 6966.0, "series": [{"data": [[2.0, 150.0], [4.0, 2530.0], [5.0, 34.0], [6.0, 27.0], [7.0, 33.0], [9.0, 46.0], [10.0, 4014.0], [11.0, 50.0], [12.0, 2532.5], [13.0, 1106.5], [14.0, 539.0], [15.0, 31.0], [16.0, 3007.5], [17.0, 68.0], [18.0, 2935.0], [19.0, 3797.0], [20.0, 2356.5], [21.0, 3559.0], [22.0, 2850.5], [23.0, 3822.0], [24.0, 3322.0], [25.0, 1168.0], [26.0, 3380.0], [27.0, 3530.0], [28.0, 3065.0], [29.0, 3666.0], [30.0, 3183.0], [31.0, 3061.5], [33.0, 3276.0], [32.0, 3152.0], [34.0, 3120.5], [35.0, 3347.5], [36.0, 2952.5], [37.0, 2784.0], [39.0, 2408.0], [38.0, 2017.5], [41.0, 2277.0], [40.0, 2437.0], [42.0, 2029.5], [43.0, 3164.0], [45.0, 2507.0], [44.0, 2500.0], [46.0, 1785.5], [47.0, 1783.0], [49.0, 2641.5], [48.0, 2140.0], [51.0, 1965.0], [50.0, 2596.5], [52.0, 2068.0], [53.0, 2098.0], [54.0, 1822.0], [55.0, 906.0], [57.0, 29.0], [56.0, 2577.0], [58.0, 2713.0], [59.0, 5568.5], [65.0, 1905.0], [66.0, 4544.5], [67.0, 4223.5], [75.0, 366.5], [73.0, 496.0], [74.0, 1566.0], [76.0, 1793.0], [78.0, 3828.0], [77.0, 47.0], [80.0, 2572.0], [81.0, 1278.0], [88.0, 3164.0], [89.0, 4097.0], [93.0, 20.0], [104.0, 3996.0], [105.0, 6966.0], [109.0, 6765.0], [129.0, 2604.0], [144.0, 3316.0], [1.0, 40.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 171.0], [13.0, 2.0], [23.0, 2.0], [24.0, 346.0], [29.0, 2.0], [31.0, 3.0], [32.0, 2.0], [33.0, 2.0], [35.0, 3.0], [36.0, 1410.5], [37.0, 3.0], [38.0, 6.5], [43.0, 2.0], [44.0, 2.0], [45.0, 2.0], [47.0, 2.0], [49.0, 2.0], [50.0, 2.0], [52.0, 2.0], [59.0, 2.0], [63.0, 2.0], [66.0, 1344.0], [67.0, 2.0], [68.0, 2.0], [71.0, 2.0], [75.0, 2.0], [73.0, 2.0], [74.0, 2.0], [72.0, 2.0], [76.0, 2.0], [78.0, 2.0], [77.0, 2.0], [79.0, 2.0], [80.0, 2.0], [81.0, 2.0], [83.0, 2.0], [82.0, 2.0], [85.0, 2.0], [84.0, 2.0], [87.0, 2.0], [86.0, 2.0], [88.0, 3.0], [89.0, 2.0], [91.0, 2.0], [90.0, 2.0], [93.0, 2.0], [95.0, 2.0], [94.0, 2.0], [92.0, 2.0], [99.0, 2.0], [98.0, 2.0], [96.0, 2.0], [97.0, 2.0], [103.0, 2.0], [102.0, 2.0], [100.0, 2.0], [101.0, 2.0], [104.0, 2.0], [105.0, 2.0], [107.0, 2.0], [106.0, 2.0], [109.0, 2.0], [108.0, 2.0], [110.0, 2.0], [111.0, 2.0], [112.0, 2.0], [113.0, 2.0], [114.0, 2.0], [117.0, 2.0], [122.0, 2.0], [129.0, 1899.0], [133.0, 2.0], [130.0, 1.0], [140.0, 2.0], [144.0, 1881.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 144.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 6966.0, "series": [{"data": [[2.0, 150.0], [4.0, 2530.0], [5.0, 32.0], [6.0, 26.5], [7.0, 33.0], [9.0, 45.0], [10.0, 4011.5], [11.0, 49.0], [12.0, 2503.0], [13.0, 1105.0], [14.0, 538.5], [15.0, 31.0], [16.0, 3003.5], [17.0, 68.0], [18.0, 2935.0], [19.0, 3797.0], [20.0, 2356.5], [21.0, 3559.0], [22.0, 2850.5], [23.0, 3822.0], [24.0, 3322.0], [25.0, 1168.0], [26.0, 3377.5], [27.0, 3530.0], [28.0, 3065.0], [29.0, 3666.0], [30.0, 3178.5], [31.0, 3061.5], [33.0, 3276.0], [32.0, 3152.0], [34.0, 3119.5], [35.0, 3347.5], [36.0, 2950.5], [37.0, 2784.0], [39.0, 2408.0], [38.0, 2017.5], [41.0, 2276.0], [40.0, 2437.0], [42.0, 2026.5], [43.0, 3160.5], [45.0, 2506.5], [44.0, 2500.0], [46.0, 1785.5], [47.0, 1783.0], [49.0, 2640.0], [48.0, 2139.5], [51.0, 1964.0], [50.0, 2596.5], [52.0, 2068.0], [53.0, 2097.0], [54.0, 1822.0], [55.0, 906.0], [57.0, 29.0], [56.0, 2577.0], [58.0, 2698.5], [59.0, 5568.0], [65.0, 1905.0], [66.0, 4544.5], [67.0, 4223.0], [75.0, 366.5], [73.0, 494.0], [74.0, 1566.0], [76.0, 1792.0], [78.0, 3828.0], [77.0, 45.0], [80.0, 2572.0], [81.0, 1277.5], [88.0, 3164.0], [89.0, 4097.0], [93.0, 20.0], [104.0, 3996.0], [105.0, 6966.0], [109.0, 6764.0], [129.0, 2604.0], [144.0, 3316.0], [1.0, 39.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 171.0], [13.0, 2.0], [23.0, 2.0], [24.0, 346.0], [29.0, 2.0], [31.0, 3.0], [32.0, 2.0], [33.0, 2.0], [35.0, 3.0], [36.0, 1410.5], [37.0, 3.0], [38.0, 6.5], [43.0, 2.0], [44.0, 2.0], [45.0, 2.0], [47.0, 2.0], [49.0, 2.0], [50.0, 2.0], [52.0, 2.0], [59.0, 2.0], [63.0, 2.0], [66.0, 1344.0], [67.0, 2.0], [68.0, 2.0], [71.0, 2.0], [75.0, 2.0], [73.0, 2.0], [74.0, 2.0], [72.0, 2.0], [76.0, 2.0], [78.0, 2.0], [77.0, 2.0], [79.0, 2.0], [80.0, 2.0], [81.0, 2.0], [83.0, 2.0], [82.0, 2.0], [85.0, 2.0], [84.0, 2.0], [87.0, 2.0], [86.0, 2.0], [88.0, 3.0], [89.0, 2.0], [91.0, 2.0], [90.0, 2.0], [93.0, 2.0], [95.0, 2.0], [94.0, 2.0], [92.0, 2.0], [99.0, 2.0], [98.0, 2.0], [96.0, 2.0], [97.0, 2.0], [103.0, 2.0], [102.0, 2.0], [100.0, 2.0], [101.0, 2.0], [104.0, 2.0], [105.0, 2.0], [107.0, 2.0], [106.0, 2.0], [109.0, 2.0], [108.0, 2.0], [110.0, 2.0], [111.0, 2.0], [112.0, 2.0], [113.0, 2.0], [114.0, 2.0], [117.0, 2.0], [122.0, 2.0], [129.0, 1899.0], [133.0, 2.0], [130.0, 1.0], [140.0, 2.0], [144.0, 1881.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 144.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.5876861E12, "maxY": 93.11666666666666, "series": [{"data": [[1.5876864E12, 38.36666666666667], [1.5876861E12, 0.6333333333333333], [1.58768682E12, 9.85], [1.58768646E12, 32.31666666666667], [1.58768616E12, 34.75], [1.58768676E12, 55.016666666666666], [1.58768652E12, 51.36666666666667], [1.58768622E12, 40.016666666666666], [1.5876867E12, 73.0], [1.58768658E12, 93.11666666666666], [1.58768628E12, 40.233333333333334], [1.58768664E12, 84.91666666666667], [1.58768634E12, 32.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768682E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5876861E12, "maxY": 93.11666666666666, "series": [{"data": [[1.5876864E12, 35.56666666666667], [1.5876867E12, 12.516666666666667], [1.5876861E12, 0.6333333333333333], [1.58768628E12, 36.2], [1.58768682E12, 10.416666666666666], [1.58768646E12, 31.6], [1.58768616E12, 32.61666666666667], [1.58768664E12, 2.85], [1.58768634E12, 31.866666666666667], [1.58768676E12, 20.35], [1.58768652E12, 22.75], [1.58768622E12, 38.15]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58768676E12, 0.3]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.5876864E12, 2.8666666666666667], [1.5876867E12, 58.7], [1.58768658E12, 93.11666666666666], [1.58768628E12, 4.483333333333333], [1.58768646E12, 0.5], [1.58768616E12, 0.016666666666666666], [1.58768664E12, 82.06666666666666], [1.58768634E12, 0.4], [1.58768676E12, 35.583333333333336], [1.58768652E12, 30.65], [1.58768622E12, 2.05]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768682E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5876861E12, "maxY": 46.71666666666667, "series": [{"data": [[1.5876861E12, 0.26666666666666666], [1.58768616E12, 2.65]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.5876864E12, 17.833333333333332], [1.5876867E12, 6.35], [1.5876861E12, 0.15], [1.58768628E12, 17.9], [1.58768682E12, 5.516666666666667], [1.58768646E12, 15.7], [1.58768616E12, 14.433333333333334], [1.58768664E12, 0.8333333333333334], [1.58768634E12, 15.75], [1.58768676E12, 10.283333333333333], [1.58768652E12, 11.366666666666667], [1.58768622E12, 18.783333333333335]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.5876864E12, 1.4], [1.5876867E12, 29.366666666666667], [1.58768658E12, 46.71666666666667], [1.58768628E12, 2.55], [1.58768646E12, 0.3], [1.58768616E12, 0.016666666666666666], [1.58768664E12, 41.53333333333333], [1.58768634E12, 0.25], [1.58768676E12, 18.0], [1.58768652E12, 15.4], [1.58768622E12, 1.2333333333333334]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.5876864E12, 17.733333333333334], [1.5876867E12, 6.166666666666667], [1.5876861E12, 0.21666666666666667], [1.58768628E12, 18.3], [1.58768682E12, 4.9], [1.58768646E12, 15.9], [1.58768616E12, 15.533333333333333], [1.58768664E12, 2.0166666666666666], [1.58768634E12, 16.116666666666667], [1.58768676E12, 10.066666666666666], [1.58768652E12, 11.383333333333333], [1.58768622E12, 19.366666666666667]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.5876864E12, 1.4666666666666666], [1.5876867E12, 29.333333333333332], [1.58768658E12, 46.4], [1.58768628E12, 1.9333333333333333], [1.58768646E12, 0.2], [1.58768664E12, 40.53333333333333], [1.58768634E12, 0.15], [1.58768676E12, 17.883333333333333], [1.58768652E12, 15.25], [1.58768622E12, 0.8166666666666667]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768682E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5876861E12, "maxY": 93.11666666666666, "series": [{"data": [[1.5876864E12, 35.56666666666667], [1.5876867E12, 12.516666666666667], [1.5876861E12, 0.6333333333333333], [1.58768628E12, 36.2], [1.58768682E12, 10.416666666666666], [1.58768646E12, 31.6], [1.58768616E12, 32.61666666666667], [1.58768664E12, 2.85], [1.58768634E12, 31.866666666666667], [1.58768676E12, 20.35], [1.58768652E12, 22.75], [1.58768622E12, 38.15]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.5876864E12, 2.8666666666666667], [1.5876867E12, 58.7], [1.58768658E12, 93.11666666666666], [1.58768628E12, 4.483333333333333], [1.58768646E12, 0.5], [1.58768616E12, 0.016666666666666666], [1.58768664E12, 82.06666666666666], [1.58768634E12, 0.4], [1.58768676E12, 35.88333333333333], [1.58768652E12, 30.65], [1.58768622E12, 2.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768682E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

