/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 16263.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 2.0], [26.8, 2.0], [26.9, 2.0], [27.0, 2.0], [27.1, 2.0], [27.2, 2.0], [27.3, 2.0], [27.4, 2.0], [27.5, 2.0], [27.6, 2.0], [27.7, 2.0], [27.8, 2.0], [27.9, 2.0], [28.0, 2.0], [28.1, 2.0], [28.2, 2.0], [28.3, 2.0], [28.4, 2.0], [28.5, 2.0], [28.6, 2.0], [28.7, 2.0], [28.8, 2.0], [28.9, 2.0], [29.0, 2.0], [29.1, 2.0], [29.2, 2.0], [29.3, 2.0], [29.4, 2.0], [29.5, 2.0], [29.6, 2.0], [29.7, 2.0], [29.8, 2.0], [29.9, 2.0], [30.0, 2.0], [30.1, 2.0], [30.2, 2.0], [30.3, 2.0], [30.4, 2.0], [30.5, 2.0], [30.6, 2.0], [30.7, 2.0], [30.8, 2.0], [30.9, 2.0], [31.0, 2.0], [31.1, 2.0], [31.2, 2.0], [31.3, 2.0], [31.4, 2.0], [31.5, 2.0], [31.6, 2.0], [31.7, 2.0], [31.8, 2.0], [31.9, 2.0], [32.0, 2.0], [32.1, 2.0], [32.2, 2.0], [32.3, 2.0], [32.4, 2.0], [32.5, 2.0], [32.6, 2.0], [32.7, 2.0], [32.8, 2.0], [32.9, 2.0], [33.0, 2.0], [33.1, 2.0], [33.2, 2.0], [33.3, 2.0], [33.4, 2.0], [33.5, 2.0], [33.6, 2.0], [33.7, 2.0], [33.8, 2.0], [33.9, 2.0], [34.0, 2.0], [34.1, 2.0], [34.2, 2.0], [34.3, 2.0], [34.4, 2.0], [34.5, 2.0], [34.6, 2.0], [34.7, 2.0], [34.8, 2.0], [34.9, 2.0], [35.0, 2.0], [35.1, 2.0], [35.2, 2.0], [35.3, 2.0], [35.4, 2.0], [35.5, 2.0], [35.6, 2.0], [35.7, 2.0], [35.8, 2.0], [35.9, 2.0], [36.0, 2.0], [36.1, 2.0], [36.2, 2.0], [36.3, 2.0], [36.4, 2.0], [36.5, 2.0], [36.6, 2.0], [36.7, 2.0], [36.8, 2.0], [36.9, 2.0], [37.0, 2.0], [37.1, 2.0], [37.2, 2.0], [37.3, 2.0], [37.4, 2.0], [37.5, 2.0], [37.6, 2.0], [37.7, 2.0], [37.8, 2.0], [37.9, 2.0], [38.0, 2.0], [38.1, 2.0], [38.2, 2.0], [38.3, 2.0], [38.4, 2.0], [38.5, 2.0], [38.6, 2.0], [38.7, 2.0], [38.8, 2.0], [38.9, 2.0], [39.0, 2.0], [39.1, 2.0], [39.2, 2.0], [39.3, 2.0], [39.4, 2.0], [39.5, 2.0], [39.6, 2.0], [39.7, 2.0], [39.8, 2.0], [39.9, 2.0], [40.0, 2.0], [40.1, 2.0], [40.2, 2.0], [40.3, 2.0], [40.4, 2.0], [40.5, 2.0], [40.6, 2.0], [40.7, 2.0], [40.8, 2.0], [40.9, 2.0], [41.0, 2.0], [41.1, 2.0], [41.2, 2.0], [41.3, 2.0], [41.4, 2.0], [41.5, 2.0], [41.6, 2.0], [41.7, 2.0], [41.8, 2.0], [41.9, 2.0], [42.0, 2.0], [42.1, 2.0], [42.2, 2.0], [42.3, 2.0], [42.4, 2.0], [42.5, 2.0], [42.6, 2.0], [42.7, 2.0], [42.8, 2.0], [42.9, 2.0], [43.0, 2.0], [43.1, 2.0], [43.2, 2.0], [43.3, 2.0], [43.4, 2.0], [43.5, 2.0], [43.6, 2.0], [43.7, 2.0], [43.8, 2.0], [43.9, 2.0], [44.0, 2.0], [44.1, 2.0], [44.2, 2.0], [44.3, 2.0], [44.4, 2.0], [44.5, 2.0], [44.6, 2.0], [44.7, 2.0], [44.8, 2.0], [44.9, 2.0], [45.0, 2.0], [45.1, 2.0], [45.2, 2.0], [45.3, 2.0], [45.4, 2.0], [45.5, 2.0], [45.6, 2.0], [45.7, 2.0], [45.8, 2.0], [45.9, 2.0], [46.0, 2.0], [46.1, 2.0], [46.2, 2.0], [46.3, 2.0], [46.4, 2.0], [46.5, 2.0], [46.6, 2.0], [46.7, 2.0], [46.8, 2.0], [46.9, 2.0], [47.0, 2.0], [47.1, 2.0], [47.2, 2.0], [47.3, 2.0], [47.4, 2.0], [47.5, 2.0], [47.6, 2.0], [47.7, 2.0], [47.8, 2.0], [47.9, 2.0], [48.0, 2.0], [48.1, 2.0], [48.2, 2.0], [48.3, 2.0], [48.4, 2.0], [48.5, 2.0], [48.6, 2.0], [48.7, 2.0], [48.8, 2.0], [48.9, 2.0], [49.0, 2.0], [49.1, 2.0], [49.2, 2.0], [49.3, 2.0], [49.4, 2.0], [49.5, 2.0], [49.6, 2.0], [49.7, 2.0], [49.8, 2.0], [49.9, 2.0], [50.0, 2.0], [50.1, 2.0], [50.2, 2.0], [50.3, 2.0], [50.4, 2.0], [50.5, 2.0], [50.6, 2.0], [50.7, 2.0], [50.8, 2.0], [50.9, 2.0], [51.0, 2.0], [51.1, 2.0], [51.2, 2.0], [51.3, 2.0], [51.4, 2.0], [51.5, 2.0], [51.6, 2.0], [51.7, 2.0], [51.8, 2.0], [51.9, 2.0], [52.0, 2.0], [52.1, 2.0], [52.2, 2.0], [52.3, 2.0], [52.4, 2.0], [52.5, 2.0], [52.6, 2.0], [52.7, 2.0], [52.8, 2.0], [52.9, 2.0], [53.0, 2.0], [53.1, 2.0], [53.2, 2.0], [53.3, 2.0], [53.4, 2.0], [53.5, 2.0], [53.6, 2.0], [53.7, 2.0], [53.8, 2.0], [53.9, 2.0], [54.0, 2.0], [54.1, 2.0], [54.2, 2.0], [54.3, 2.0], [54.4, 2.0], [54.5, 2.0], [54.6, 2.0], [54.7, 2.0], [54.8, 2.0], [54.9, 2.0], [55.0, 2.0], [55.1, 2.0], [55.2, 2.0], [55.3, 2.0], [55.4, 2.0], [55.5, 2.0], [55.6, 2.0], [55.7, 2.0], [55.8, 2.0], [55.9, 3.0], [56.0, 3.0], [56.1, 3.0], [56.2, 3.0], [56.3, 3.0], [56.4, 3.0], [56.5, 3.0], [56.6, 3.0], [56.7, 3.0], [56.8, 3.0], [56.9, 3.0], [57.0, 3.0], [57.1, 3.0], [57.2, 3.0], [57.3, 3.0], [57.4, 3.0], [57.5, 3.0], [57.6, 3.0], [57.7, 3.0], [57.8, 3.0], [57.9, 3.0], [58.0, 3.0], [58.1, 3.0], [58.2, 3.0], [58.3, 3.0], [58.4, 3.0], [58.5, 3.0], [58.6, 3.0], [58.7, 3.0], [58.8, 3.0], [58.9, 3.0], [59.0, 3.0], [59.1, 3.0], [59.2, 3.0], [59.3, 3.0], [59.4, 3.0], [59.5, 3.0], [59.6, 3.0], [59.7, 3.0], [59.8, 3.0], [59.9, 4.0], [60.0, 4.0], [60.1, 4.0], [60.2, 4.0], [60.3, 4.0], [60.4, 4.0], [60.5, 4.0], [60.6, 4.0], [60.7, 4.0], [60.8, 5.0], [60.9, 5.0], [61.0, 5.0], [61.1, 5.0], [61.2, 5.0], [61.3, 5.0], [61.4, 6.0], [61.5, 6.0], [61.6, 6.0], [61.7, 7.0], [61.8, 8.0], [61.9, 9.0], [62.0, 11.0], [62.1, 20.0], [62.2, 23.0], [62.3, 24.0], [62.4, 25.0], [62.5, 26.0], [62.6, 27.0], [62.7, 27.0], [62.8, 28.0], [62.9, 30.0], [63.0, 31.0], [63.1, 32.0], [63.2, 34.0], [63.3, 35.0], [63.4, 36.0], [63.5, 38.0], [63.6, 40.0], [63.7, 42.0], [63.8, 45.0], [63.9, 48.0], [64.0, 51.0], [64.1, 54.0], [64.2, 58.0], [64.3, 60.0], [64.4, 66.0], [64.5, 71.0], [64.6, 76.0], [64.7, 86.0], [64.8, 98.0], [64.9, 113.0], [65.0, 126.0], [65.1, 144.0], [65.2, 165.0], [65.3, 194.0], [65.4, 222.0], [65.5, 260.0], [65.6, 286.0], [65.7, 306.0], [65.8, 327.0], [65.9, 346.0], [66.0, 368.0], [66.1, 387.0], [66.2, 400.0], [66.3, 424.0], [66.4, 439.0], [66.5, 452.0], [66.6, 468.0], [66.7, 482.0], [66.8, 503.0], [66.9, 520.0], [67.0, 537.0], [67.1, 566.0], [67.2, 583.0], [67.3, 594.0], [67.4, 614.0], [67.5, 627.0], [67.6, 644.0], [67.7, 671.0], [67.8, 692.0], [67.9, 712.0], [68.0, 728.0], [68.1, 749.0], [68.2, 775.0], [68.3, 790.0], [68.4, 815.0], [68.5, 831.0], [68.6, 848.0], [68.7, 869.0], [68.8, 891.0], [68.9, 906.0], [69.0, 925.0], [69.1, 944.0], [69.2, 961.0], [69.3, 982.0], [69.4, 1004.0], [69.5, 1021.0], [69.6, 1048.0], [69.7, 1062.0], [69.8, 1080.0], [69.9, 1102.0], [70.0, 1120.0], [70.1, 1137.0], [70.2, 1159.0], [70.3, 1183.0], [70.4, 1208.0], [70.5, 1226.0], [70.6, 1249.0], [70.7, 1265.0], [70.8, 1288.0], [70.9, 1308.0], [71.0, 1333.0], [71.1, 1357.0], [71.2, 1374.0], [71.3, 1405.0], [71.4, 1433.0], [71.5, 1453.0], [71.6, 1471.0], [71.7, 1488.0], [71.8, 1501.0], [71.9, 1516.0], [72.0, 1538.0], [72.1, 1560.0], [72.2, 1576.0], [72.3, 1588.0], [72.4, 1601.0], [72.5, 1625.0], [72.6, 1641.0], [72.7, 1659.0], [72.8, 1674.0], [72.9, 1696.0], [73.0, 1716.0], [73.1, 1741.0], [73.2, 1766.0], [73.3, 1790.0], [73.4, 1807.0], [73.5, 1836.0], [73.6, 1863.0], [73.7, 1897.0], [73.8, 1915.0], [73.9, 1936.0], [74.0, 1953.0], [74.1, 1979.0], [74.2, 2008.0], [74.3, 2027.0], [74.4, 2058.0], [74.5, 2081.0], [74.6, 2098.0], [74.7, 2129.0], [74.8, 2157.0], [74.9, 2182.0], [75.0, 2211.0], [75.1, 2235.0], [75.2, 2273.0], [75.3, 2302.0], [75.4, 2334.0], [75.5, 2367.0], [75.6, 2387.0], [75.7, 2408.0], [75.8, 2431.0], [75.9, 2450.0], [76.0, 2469.0], [76.1, 2493.0], [76.2, 2517.0], [76.3, 2537.0], [76.4, 2561.0], [76.5, 2585.0], [76.6, 2619.0], [76.7, 2651.0], [76.8, 2690.0], [76.9, 2723.0], [77.0, 2755.0], [77.1, 2782.0], [77.2, 2814.0], [77.3, 2831.0], [77.4, 2855.0], [77.5, 2881.0], [77.6, 2906.0], [77.7, 2926.0], [77.8, 2942.0], [77.9, 2957.0], [78.0, 2978.0], [78.1, 2995.0], [78.2, 3016.0], [78.3, 3034.0], [78.4, 3051.0], [78.5, 3073.0], [78.6, 3094.0], [78.7, 3113.0], [78.8, 3132.0], [78.9, 3147.0], [79.0, 3161.0], [79.1, 3172.0], [79.2, 3181.0], [79.3, 3194.0], [79.4, 3205.0], [79.5, 3220.0], [79.6, 3228.0], [79.7, 3242.0], [79.8, 3252.0], [79.9, 3267.0], [80.0, 3281.0], [80.1, 3296.0], [80.2, 3306.0], [80.3, 3317.0], [80.4, 3325.0], [80.5, 3333.0], [80.6, 3342.0], [80.7, 3354.0], [80.8, 3361.0], [80.9, 3367.0], [81.0, 3375.0], [81.1, 3384.0], [81.2, 3391.0], [81.3, 3397.0], [81.4, 3410.0], [81.5, 3421.0], [81.6, 3430.0], [81.7, 3439.0], [81.8, 3447.0], [81.9, 3455.0], [82.0, 3464.0], [82.1, 3470.0], [82.2, 3478.0], [82.3, 3486.0], [82.4, 3496.0], [82.5, 3505.0], [82.6, 3510.0], [82.7, 3522.0], [82.8, 3532.0], [82.9, 3543.0], [83.0, 3551.0], [83.1, 3557.0], [83.2, 3564.0], [83.3, 3568.0], [83.4, 3572.0], [83.5, 3581.0], [83.6, 3588.0], [83.7, 3595.0], [83.8, 3602.0], [83.9, 3611.0], [84.0, 3618.0], [84.1, 3626.0], [84.2, 3634.0], [84.3, 3641.0], [84.4, 3648.0], [84.5, 3655.0], [84.6, 3662.0], [84.7, 3671.0], [84.8, 3681.0], [84.9, 3689.0], [85.0, 3697.0], [85.1, 3707.0], [85.2, 3711.0], [85.3, 3723.0], [85.4, 3733.0], [85.5, 3743.0], [85.6, 3751.0], [85.7, 3759.0], [85.8, 3766.0], [85.9, 3773.0], [86.0, 3780.0], [86.1, 3790.0], [86.2, 3798.0], [86.3, 3808.0], [86.4, 3817.0], [86.5, 3824.0], [86.6, 3833.0], [86.7, 3841.0], [86.8, 3849.0], [86.9, 3853.0], [87.0, 3861.0], [87.1, 3867.0], [87.2, 3873.0], [87.3, 3879.0], [87.4, 3889.0], [87.5, 3897.0], [87.6, 3907.0], [87.7, 3915.0], [87.8, 3921.0], [87.9, 3931.0], [88.0, 3936.0], [88.1, 3948.0], [88.2, 3959.0], [88.3, 3964.0], [88.4, 3974.0], [88.5, 3981.0], [88.6, 3991.0], [88.7, 3998.0], [88.8, 4006.0], [88.9, 4015.0], [89.0, 4025.0], [89.1, 4032.0], [89.2, 4038.0], [89.3, 4044.0], [89.4, 4055.0], [89.5, 4068.0], [89.6, 4078.0], [89.7, 4088.0], [89.8, 4099.0], [89.9, 4110.0], [90.0, 4118.0], [90.1, 4133.0], [90.2, 4140.0], [90.3, 4152.0], [90.4, 4163.0], [90.5, 4177.0], [90.6, 4189.0], [90.7, 4198.0], [90.8, 4213.0], [90.9, 4225.0], [91.0, 4236.0], [91.1, 4246.0], [91.2, 4259.0], [91.3, 4265.0], [91.4, 4274.0], [91.5, 4284.0], [91.6, 4295.0], [91.7, 4306.0], [91.8, 4323.0], [91.9, 4334.0], [92.0, 4343.0], [92.1, 4358.0], [92.2, 4370.0], [92.3, 4390.0], [92.4, 4417.0], [92.5, 4427.0], [92.6, 4444.0], [92.7, 4465.0], [92.8, 4488.0], [92.9, 4502.0], [93.0, 4525.0], [93.1, 4543.0], [93.2, 4566.0], [93.3, 4594.0], [93.4, 4608.0], [93.5, 4622.0], [93.6, 4647.0], [93.7, 4667.0], [93.8, 4690.0], [93.9, 4719.0], [94.0, 4747.0], [94.1, 4769.0], [94.2, 4787.0], [94.3, 4813.0], [94.4, 4854.0], [94.5, 4880.0], [94.6, 4896.0], [94.7, 4933.0], [94.8, 4957.0], [94.9, 4995.0], [95.0, 5024.0], [95.1, 5077.0], [95.2, 5111.0], [95.3, 5170.0], [95.4, 5196.0], [95.5, 5245.0], [95.6, 5300.0], [95.7, 5340.0], [95.8, 5376.0], [95.9, 5421.0], [96.0, 5443.0], [96.1, 5465.0], [96.2, 5504.0], [96.3, 5543.0], [96.4, 5575.0], [96.5, 5602.0], [96.6, 5649.0], [96.7, 5674.0], [96.8, 5703.0], [96.9, 5745.0], [97.0, 5788.0], [97.1, 5819.0], [97.2, 5857.0], [97.3, 5919.0], [97.4, 5954.0], [97.5, 6008.0], [97.6, 6050.0], [97.7, 6115.0], [97.8, 6154.0], [97.9, 6190.0], [98.0, 6223.0], [98.1, 6321.0], [98.2, 6376.0], [98.3, 6431.0], [98.4, 6482.0], [98.5, 6546.0], [98.6, 6618.0], [98.7, 6687.0], [98.8, 6785.0], [98.9, 6921.0], [99.0, 7042.0], [99.1, 7165.0], [99.2, 7448.0], [99.3, 7794.0], [99.4, 8249.0], [99.5, 9068.0], [99.6, 9938.0], [99.7, 10622.0], [99.8, 11357.0], [99.9, 12251.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 138.0], [0.1, 138.0], [0.2, 138.0], [0.3, 138.0], [0.4, 138.0], [0.5, 138.0], [0.6, 139.0], [0.7, 139.0], [0.8, 139.0], [0.9, 139.0], [1.0, 139.0], [1.1, 144.0], [1.2, 144.0], [1.3, 144.0], [1.4, 144.0], [1.5, 144.0], [1.6, 144.0], [1.7, 144.0], [1.8, 144.0], [1.9, 144.0], [2.0, 144.0], [2.1, 144.0], [2.2, 144.0], [2.3, 144.0], [2.4, 144.0], [2.5, 144.0], [2.6, 144.0], [2.7, 145.0], [2.8, 145.0], [2.9, 145.0], [3.0, 145.0], [3.1, 145.0], [3.2, 145.0], [3.3, 145.0], [3.4, 145.0], [3.5, 145.0], [3.6, 145.0], [3.7, 145.0], [3.8, 145.0], [3.9, 145.0], [4.0, 145.0], [4.1, 145.0], [4.2, 145.0], [4.3, 145.0], [4.4, 145.0], [4.5, 145.0], [4.6, 145.0], [4.7, 145.0], [4.8, 145.0], [4.9, 145.0], [5.0, 145.0], [5.1, 145.0], [5.2, 145.0], [5.3, 145.0], [5.4, 145.0], [5.5, 145.0], [5.6, 145.0], [5.7, 145.0], [5.8, 145.0], [5.9, 145.0], [6.0, 145.0], [6.1, 145.0], [6.2, 145.0], [6.3, 145.0], [6.4, 146.0], [6.5, 146.0], [6.6, 146.0], [6.7, 146.0], [6.8, 146.0], [6.9, 146.0], [7.0, 146.0], [7.1, 146.0], [7.2, 146.0], [7.3, 146.0], [7.4, 146.0], [7.5, 146.0], [7.6, 146.0], [7.7, 146.0], [7.8, 146.0], [7.9, 146.0], [8.0, 146.0], [8.1, 146.0], [8.2, 146.0], [8.3, 146.0], [8.4, 146.0], [8.5, 146.0], [8.6, 146.0], [8.7, 146.0], [8.8, 146.0], [8.9, 146.0], [9.0, 146.0], [9.1, 146.0], [9.2, 146.0], [9.3, 146.0], [9.4, 146.0], [9.5, 146.0], [9.6, 146.0], [9.7, 146.0], [9.8, 146.0], [9.9, 146.0], [10.0, 146.0], [10.1, 146.0], [10.2, 146.0], [10.3, 146.0], [10.4, 146.0], [10.5, 146.0], [10.6, 146.0], [10.7, 146.0], [10.8, 146.0], [10.9, 146.0], [11.0, 146.0], [11.1, 147.0], [11.2, 147.0], [11.3, 147.0], [11.4, 147.0], [11.5, 147.0], [11.6, 147.0], [11.7, 147.0], [11.8, 147.0], [11.9, 147.0], [12.0, 147.0], [12.1, 147.0], [12.2, 147.0], [12.3, 147.0], [12.4, 147.0], [12.5, 147.0], [12.6, 147.0], [12.7, 147.0], [12.8, 147.0], [12.9, 147.0], [13.0, 147.0], [13.1, 147.0], [13.2, 147.0], [13.3, 147.0], [13.4, 147.0], [13.5, 147.0], [13.6, 147.0], [13.7, 147.0], [13.8, 147.0], [13.9, 147.0], [14.0, 147.0], [14.1, 147.0], [14.2, 147.0], [14.3, 147.0], [14.4, 147.0], [14.5, 147.0], [14.6, 147.0], [14.7, 147.0], [14.8, 147.0], [14.9, 147.0], [15.0, 147.0], [15.1, 147.0], [15.2, 147.0], [15.3, 147.0], [15.4, 147.0], [15.5, 147.0], [15.6, 147.0], [15.7, 147.0], [15.8, 147.0], [15.9, 147.0], [16.0, 147.0], [16.1, 147.0], [16.2, 147.0], [16.3, 147.0], [16.4, 147.0], [16.5, 147.0], [16.6, 147.0], [16.7, 147.0], [16.8, 147.0], [16.9, 147.0], [17.0, 147.0], [17.1, 147.0], [17.2, 147.0], [17.3, 147.0], [17.4, 148.0], [17.5, 148.0], [17.6, 148.0], [17.7, 148.0], [17.8, 148.0], [17.9, 148.0], [18.0, 148.0], [18.1, 148.0], [18.2, 148.0], [18.3, 148.0], [18.4, 148.0], [18.5, 148.0], [18.6, 148.0], [18.7, 148.0], [18.8, 148.0], [18.9, 148.0], [19.0, 148.0], [19.1, 148.0], [19.2, 148.0], [19.3, 148.0], [19.4, 148.0], [19.5, 148.0], [19.6, 148.0], [19.7, 148.0], [19.8, 148.0], [19.9, 148.0], [20.0, 148.0], [20.1, 148.0], [20.2, 148.0], [20.3, 148.0], [20.4, 148.0], [20.5, 148.0], [20.6, 148.0], [20.7, 148.0], [20.8, 148.0], [20.9, 148.0], [21.0, 148.0], [21.1, 148.0], [21.2, 148.0], [21.3, 148.0], [21.4, 148.0], [21.5, 148.0], [21.6, 148.0], [21.7, 148.0], [21.8, 148.0], [21.9, 148.0], [22.0, 148.0], [22.1, 148.0], [22.2, 148.0], [22.3, 148.0], [22.4, 148.0], [22.5, 148.0], [22.6, 148.0], [22.7, 148.0], [22.8, 148.0], [22.9, 148.0], [23.0, 148.0], [23.1, 148.0], [23.2, 149.0], [23.3, 149.0], [23.4, 149.0], [23.5, 149.0], [23.6, 149.0], [23.7, 149.0], [23.8, 149.0], [23.9, 149.0], [24.0, 149.0], [24.1, 149.0], [24.2, 149.0], [24.3, 149.0], [24.4, 149.0], [24.5, 149.0], [24.6, 149.0], [24.7, 149.0], [24.8, 149.0], [24.9, 149.0], [25.0, 149.0], [25.1, 149.0], [25.2, 149.0], [25.3, 149.0], [25.4, 149.0], [25.5, 149.0], [25.6, 149.0], [25.7, 149.0], [25.8, 149.0], [25.9, 149.0], [26.0, 149.0], [26.1, 149.0], [26.2, 149.0], [26.3, 149.0], [26.4, 149.0], [26.5, 149.0], [26.6, 149.0], [26.7, 149.0], [26.8, 149.0], [26.9, 150.0], [27.0, 150.0], [27.1, 150.0], [27.2, 150.0], [27.3, 150.0], [27.4, 150.0], [27.5, 150.0], [27.6, 150.0], [27.7, 150.0], [27.8, 150.0], [27.9, 150.0], [28.0, 150.0], [28.1, 150.0], [28.2, 150.0], [28.3, 150.0], [28.4, 150.0], [28.5, 150.0], [28.6, 150.0], [28.7, 150.0], [28.8, 150.0], [28.9, 150.0], [29.0, 150.0], [29.1, 150.0], [29.2, 150.0], [29.3, 150.0], [29.4, 150.0], [29.5, 150.0], [29.6, 150.0], [29.7, 150.0], [29.8, 150.0], [29.9, 150.0], [30.0, 150.0], [30.1, 150.0], [30.2, 150.0], [30.3, 150.0], [30.4, 150.0], [30.5, 150.0], [30.6, 150.0], [30.7, 150.0], [30.8, 150.0], [30.9, 150.0], [31.0, 150.0], [31.1, 151.0], [31.2, 151.0], [31.3, 151.0], [31.4, 151.0], [31.5, 151.0], [31.6, 151.0], [31.7, 151.0], [31.8, 151.0], [31.9, 151.0], [32.0, 151.0], [32.1, 151.0], [32.2, 151.0], [32.3, 151.0], [32.4, 151.0], [32.5, 151.0], [32.6, 151.0], [32.7, 151.0], [32.8, 151.0], [32.9, 151.0], [33.0, 151.0], [33.1, 151.0], [33.2, 151.0], [33.3, 151.0], [33.4, 151.0], [33.5, 151.0], [33.6, 151.0], [33.7, 151.0], [33.8, 151.0], [33.9, 151.0], [34.0, 151.0], [34.1, 151.0], [34.2, 151.0], [34.3, 151.0], [34.4, 151.0], [34.5, 151.0], [34.6, 151.0], [34.7, 151.0], [34.8, 151.0], [34.9, 151.0], [35.0, 151.0], [35.1, 151.0], [35.2, 151.0], [35.3, 151.0], [35.4, 151.0], [35.5, 151.0], [35.6, 151.0], [35.7, 151.0], [35.8, 151.0], [35.9, 151.0], [36.0, 151.0], [36.1, 151.0], [36.2, 151.0], [36.3, 151.0], [36.4, 151.0], [36.5, 151.0], [36.6, 151.0], [36.7, 151.0], [36.8, 151.0], [36.9, 151.0], [37.0, 151.0], [37.1, 151.0], [37.2, 151.0], [37.3, 151.0], [37.4, 151.0], [37.5, 151.0], [37.6, 151.0], [37.7, 151.0], [37.8, 151.0], [37.9, 151.0], [38.0, 151.0], [38.1, 151.0], [38.2, 151.0], [38.3, 151.0], [38.4, 151.0], [38.5, 151.0], [38.6, 151.0], [38.7, 151.0], [38.8, 151.0], [38.9, 151.0], [39.0, 152.0], [39.1, 152.0], [39.2, 152.0], [39.3, 152.0], [39.4, 152.0], [39.5, 152.0], [39.6, 152.0], [39.7, 152.0], [39.8, 152.0], [39.9, 152.0], [40.0, 152.0], [40.1, 152.0], [40.2, 152.0], [40.3, 152.0], [40.4, 152.0], [40.5, 152.0], [40.6, 152.0], [40.7, 152.0], [40.8, 152.0], [40.9, 152.0], [41.0, 152.0], [41.1, 152.0], [41.2, 152.0], [41.3, 152.0], [41.4, 152.0], [41.5, 152.0], [41.6, 152.0], [41.7, 152.0], [41.8, 152.0], [41.9, 152.0], [42.0, 152.0], [42.1, 152.0], [42.2, 152.0], [42.3, 152.0], [42.4, 152.0], [42.5, 152.0], [42.6, 152.0], [42.7, 152.0], [42.8, 152.0], [42.9, 152.0], [43.0, 152.0], [43.1, 152.0], [43.2, 152.0], [43.3, 152.0], [43.4, 152.0], [43.5, 152.0], [43.6, 152.0], [43.7, 152.0], [43.8, 152.0], [43.9, 152.0], [44.0, 152.0], [44.1, 152.0], [44.2, 152.0], [44.3, 152.0], [44.4, 152.0], [44.5, 152.0], [44.6, 152.0], [44.7, 152.0], [44.8, 152.0], [44.9, 152.0], [45.0, 152.0], [45.1, 152.0], [45.2, 152.0], [45.3, 152.0], [45.4, 152.0], [45.5, 152.0], [45.6, 152.0], [45.7, 152.0], [45.8, 152.0], [45.9, 152.0], [46.0, 152.0], [46.1, 152.0], [46.2, 152.0], [46.3, 152.0], [46.4, 152.0], [46.5, 152.0], [46.6, 152.0], [46.7, 152.0], [46.8, 152.0], [46.9, 152.0], [47.0, 152.0], [47.1, 152.0], [47.2, 152.0], [47.3, 152.0], [47.4, 152.0], [47.5, 152.0], [47.6, 152.0], [47.7, 152.0], [47.8, 152.0], [47.9, 152.0], [48.0, 152.0], [48.1, 152.0], [48.2, 152.0], [48.3, 152.0], [48.4, 152.0], [48.5, 152.0], [48.6, 152.0], [48.7, 152.0], [48.8, 152.0], [48.9, 152.0], [49.0, 152.0], [49.1, 152.0], [49.2, 152.0], [49.3, 152.0], [49.4, 152.0], [49.5, 153.0], [49.6, 153.0], [49.7, 153.0], [49.8, 153.0], [49.9, 153.0], [50.0, 153.0], [50.1, 153.0], [50.2, 153.0], [50.3, 153.0], [50.4, 153.0], [50.5, 153.0], [50.6, 153.0], [50.7, 153.0], [50.8, 153.0], [50.9, 153.0], [51.0, 153.0], [51.1, 153.0], [51.2, 153.0], [51.3, 153.0], [51.4, 153.0], [51.5, 153.0], [51.6, 153.0], [51.7, 153.0], [51.8, 153.0], [51.9, 153.0], [52.0, 153.0], [52.1, 153.0], [52.2, 153.0], [52.3, 153.0], [52.4, 153.0], [52.5, 153.0], [52.6, 153.0], [52.7, 153.0], [52.8, 153.0], [52.9, 153.0], [53.0, 153.0], [53.1, 153.0], [53.2, 153.0], [53.3, 153.0], [53.4, 153.0], [53.5, 153.0], [53.6, 153.0], [53.7, 153.0], [53.8, 153.0], [53.9, 153.0], [54.0, 153.0], [54.1, 153.0], [54.2, 153.0], [54.3, 154.0], [54.4, 154.0], [54.5, 154.0], [54.6, 154.0], [54.7, 154.0], [54.8, 154.0], [54.9, 154.0], [55.0, 154.0], [55.1, 154.0], [55.2, 154.0], [55.3, 154.0], [55.4, 154.0], [55.5, 154.0], [55.6, 154.0], [55.7, 154.0], [55.8, 154.0], [55.9, 154.0], [56.0, 154.0], [56.1, 154.0], [56.2, 154.0], [56.3, 154.0], [56.4, 154.0], [56.5, 154.0], [56.6, 154.0], [56.7, 154.0], [56.8, 154.0], [56.9, 154.0], [57.0, 154.0], [57.1, 154.0], [57.2, 154.0], [57.3, 154.0], [57.4, 154.0], [57.5, 154.0], [57.6, 154.0], [57.7, 154.0], [57.8, 154.0], [57.9, 154.0], [58.0, 154.0], [58.1, 154.0], [58.2, 154.0], [58.3, 154.0], [58.4, 154.0], [58.5, 154.0], [58.6, 154.0], [58.7, 154.0], [58.8, 154.0], [58.9, 154.0], [59.0, 154.0], [59.1, 154.0], [59.2, 154.0], [59.3, 154.0], [59.4, 154.0], [59.5, 154.0], [59.6, 154.0], [59.7, 154.0], [59.8, 154.0], [59.9, 154.0], [60.0, 154.0], [60.1, 154.0], [60.2, 154.0], [60.3, 154.0], [60.4, 154.0], [60.5, 154.0], [60.6, 154.0], [60.7, 154.0], [60.8, 154.0], [60.9, 154.0], [61.0, 154.0], [61.1, 154.0], [61.2, 154.0], [61.3, 154.0], [61.4, 154.0], [61.5, 154.0], [61.6, 155.0], [61.7, 155.0], [61.8, 155.0], [61.9, 155.0], [62.0, 155.0], [62.1, 155.0], [62.2, 155.0], [62.3, 155.0], [62.4, 155.0], [62.5, 155.0], [62.6, 155.0], [62.7, 155.0], [62.8, 155.0], [62.9, 155.0], [63.0, 155.0], [63.1, 155.0], [63.2, 155.0], [63.3, 155.0], [63.4, 155.0], [63.5, 155.0], [63.6, 155.0], [63.7, 155.0], [63.8, 155.0], [63.9, 155.0], [64.0, 155.0], [64.1, 155.0], [64.2, 155.0], [64.3, 155.0], [64.4, 155.0], [64.5, 155.0], [64.6, 155.0], [64.7, 155.0], [64.8, 156.0], [64.9, 156.0], [65.0, 156.0], [65.1, 156.0], [65.2, 156.0], [65.3, 156.0], [65.4, 156.0], [65.5, 156.0], [65.6, 156.0], [65.7, 156.0], [65.8, 156.0], [65.9, 156.0], [66.0, 156.0], [66.1, 156.0], [66.2, 156.0], [66.3, 156.0], [66.4, 156.0], [66.5, 156.0], [66.6, 156.0], [66.7, 156.0], [66.8, 156.0], [66.9, 156.0], [67.0, 156.0], [67.1, 156.0], [67.2, 156.0], [67.3, 156.0], [67.4, 156.0], [67.5, 156.0], [67.6, 156.0], [67.7, 156.0], [67.8, 156.0], [67.9, 157.0], [68.0, 157.0], [68.1, 157.0], [68.2, 157.0], [68.3, 157.0], [68.4, 157.0], [68.5, 157.0], [68.6, 157.0], [68.7, 157.0], [68.8, 157.0], [68.9, 157.0], [69.0, 157.0], [69.1, 157.0], [69.2, 157.0], [69.3, 157.0], [69.4, 157.0], [69.5, 157.0], [69.6, 157.0], [69.7, 157.0], [69.8, 157.0], [69.9, 157.0], [70.0, 157.0], [70.1, 157.0], [70.2, 157.0], [70.3, 157.0], [70.4, 157.0], [70.5, 157.0], [70.6, 158.0], [70.7, 158.0], [70.8, 158.0], [70.9, 158.0], [71.0, 158.0], [71.1, 158.0], [71.2, 158.0], [71.3, 158.0], [71.4, 158.0], [71.5, 158.0], [71.6, 158.0], [71.7, 158.0], [71.8, 158.0], [71.9, 158.0], [72.0, 158.0], [72.1, 158.0], [72.2, 158.0], [72.3, 158.0], [72.4, 158.0], [72.5, 158.0], [72.6, 158.0], [72.7, 158.0], [72.8, 158.0], [72.9, 158.0], [73.0, 158.0], [73.1, 158.0], [73.2, 159.0], [73.3, 159.0], [73.4, 159.0], [73.5, 159.0], [73.6, 159.0], [73.7, 159.0], [73.8, 159.0], [73.9, 159.0], [74.0, 159.0], [74.1, 159.0], [74.2, 159.0], [74.3, 159.0], [74.4, 159.0], [74.5, 159.0], [74.6, 159.0], [74.7, 159.0], [74.8, 159.0], [74.9, 159.0], [75.0, 159.0], [75.1, 159.0], [75.2, 159.0], [75.3, 159.0], [75.4, 159.0], [75.5, 159.0], [75.6, 159.0], [75.7, 159.0], [75.8, 159.0], [75.9, 159.0], [76.0, 159.0], [76.1, 159.0], [76.2, 159.0], [76.3, 159.0], [76.4, 159.0], [76.5, 159.0], [76.6, 159.0], [76.7, 159.0], [76.8, 159.0], [76.9, 159.0], [77.0, 159.0], [77.1, 159.0], [77.2, 159.0], [77.3, 159.0], [77.4, 160.0], [77.5, 160.0], [77.6, 160.0], [77.7, 160.0], [77.8, 160.0], [77.9, 160.0], [78.0, 160.0], [78.1, 160.0], [78.2, 160.0], [78.3, 160.0], [78.4, 160.0], [78.5, 160.0], [78.6, 160.0], [78.7, 160.0], [78.8, 160.0], [78.9, 160.0], [79.0, 161.0], [79.1, 161.0], [79.2, 161.0], [79.3, 161.0], [79.4, 161.0], [79.5, 161.0], [79.6, 161.0], [79.7, 161.0], [79.8, 161.0], [79.9, 161.0], [80.0, 161.0], [80.1, 161.0], [80.2, 161.0], [80.3, 161.0], [80.4, 161.0], [80.5, 161.0], [80.6, 162.0], [80.7, 162.0], [80.8, 162.0], [80.9, 162.0], [81.0, 162.0], [81.1, 162.0], [81.2, 162.0], [81.3, 162.0], [81.4, 162.0], [81.5, 162.0], [81.6, 162.0], [81.7, 162.0], [81.8, 162.0], [81.9, 162.0], [82.0, 162.0], [82.1, 162.0], [82.2, 162.0], [82.3, 162.0], [82.4, 162.0], [82.5, 162.0], [82.6, 162.0], [82.7, 162.0], [82.8, 162.0], [82.9, 162.0], [83.0, 162.0], [83.1, 162.0], [83.2, 163.0], [83.3, 163.0], [83.4, 163.0], [83.5, 163.0], [83.6, 163.0], [83.7, 163.0], [83.8, 163.0], [83.9, 163.0], [84.0, 163.0], [84.1, 163.0], [84.2, 163.0], [84.3, 163.0], [84.4, 163.0], [84.5, 163.0], [84.6, 163.0], [84.7, 163.0], [84.8, 164.0], [84.9, 164.0], [85.0, 164.0], [85.1, 164.0], [85.2, 164.0], [85.3, 164.0], [85.4, 164.0], [85.5, 164.0], [85.6, 164.0], [85.7, 164.0], [85.8, 164.0], [85.9, 164.0], [86.0, 164.0], [86.1, 164.0], [86.2, 164.0], [86.3, 164.0], [86.4, 164.0], [86.5, 164.0], [86.6, 164.0], [86.7, 164.0], [86.8, 164.0], [86.9, 165.0], [87.0, 165.0], [87.1, 165.0], [87.2, 165.0], [87.3, 165.0], [87.4, 165.0], [87.5, 165.0], [87.6, 165.0], [87.7, 165.0], [87.8, 165.0], [87.9, 165.0], [88.0, 165.0], [88.1, 165.0], [88.2, 165.0], [88.3, 165.0], [88.4, 165.0], [88.5, 165.0], [88.6, 165.0], [88.7, 165.0], [88.8, 165.0], [88.9, 165.0], [89.0, 166.0], [89.1, 166.0], [89.2, 166.0], [89.3, 166.0], [89.4, 166.0], [89.5, 166.0], [89.6, 166.0], [89.7, 166.0], [89.8, 166.0], [89.9, 166.0], [90.0, 166.0], [90.1, 167.0], [90.2, 167.0], [90.3, 167.0], [90.4, 167.0], [90.5, 167.0], [90.6, 167.0], [90.7, 167.0], [90.8, 167.0], [90.9, 167.0], [91.0, 167.0], [91.1, 167.0], [91.2, 167.0], [91.3, 167.0], [91.4, 167.0], [91.5, 167.0], [91.6, 167.0], [91.7, 167.0], [91.8, 167.0], [91.9, 167.0], [92.0, 167.0], [92.1, 167.0], [92.2, 168.0], [92.3, 168.0], [92.4, 168.0], [92.5, 168.0], [92.6, 168.0], [92.7, 168.0], [92.8, 168.0], [92.9, 168.0], [93.0, 168.0], [93.1, 168.0], [93.2, 169.0], [93.3, 169.0], [93.4, 169.0], [93.5, 169.0], [93.6, 169.0], [93.7, 169.0], [93.8, 169.0], [93.9, 169.0], [94.0, 169.0], [94.1, 169.0], [94.2, 169.0], [94.3, 169.0], [94.4, 169.0], [94.5, 169.0], [94.6, 169.0], [94.7, 169.0], [94.8, 169.0], [94.9, 169.0], [95.0, 169.0], [95.1, 169.0], [95.2, 169.0], [95.3, 170.0], [95.4, 170.0], [95.5, 170.0], [95.6, 170.0], [95.7, 170.0], [95.8, 179.0], [95.9, 179.0], [96.0, 179.0], [96.1, 179.0], [96.2, 179.0], [96.3, 179.0], [96.4, 182.0], [96.5, 182.0], [96.6, 182.0], [96.7, 182.0], [96.8, 182.0], [96.9, 184.0], [97.0, 184.0], [97.1, 184.0], [97.2, 184.0], [97.3, 184.0], [97.4, 185.0], [97.5, 185.0], [97.6, 185.0], [97.7, 185.0], [97.8, 185.0], [97.9, 194.0], [98.0, 194.0], [98.1, 194.0], [98.2, 194.0], [98.3, 194.0], [98.4, 194.0], [98.5, 235.0], [98.6, 235.0], [98.7, 235.0], [98.8, 235.0], [98.9, 235.0], [99.0, 246.0], [99.1, 246.0], [99.2, 246.0], [99.3, 246.0], [99.4, 246.0], [99.5, 396.0], [99.6, 396.0], [99.7, 396.0], [99.8, 396.0], [99.9, 396.0], [100.0, 396.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 2.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 2.0], [14.5, 2.0], [14.6, 2.0], [14.7, 2.0], [14.8, 2.0], [14.9, 2.0], [15.0, 2.0], [15.1, 2.0], [15.2, 2.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 2.0], [17.7, 2.0], [17.8, 2.0], [17.9, 2.0], [18.0, 2.0], [18.1, 2.0], [18.2, 2.0], [18.3, 2.0], [18.4, 2.0], [18.5, 2.0], [18.6, 2.0], [18.7, 2.0], [18.8, 2.0], [18.9, 2.0], [19.0, 2.0], [19.1, 2.0], [19.2, 2.0], [19.3, 2.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 2.0], [20.0, 2.0], [20.1, 2.0], [20.2, 2.0], [20.3, 2.0], [20.4, 2.0], [20.5, 2.0], [20.6, 2.0], [20.7, 2.0], [20.8, 2.0], [20.9, 2.0], [21.0, 2.0], [21.1, 2.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 2.0], [21.6, 2.0], [21.7, 2.0], [21.8, 2.0], [21.9, 2.0], [22.0, 2.0], [22.1, 2.0], [22.2, 2.0], [22.3, 2.0], [22.4, 2.0], [22.5, 2.0], [22.6, 2.0], [22.7, 2.0], [22.8, 2.0], [22.9, 2.0], [23.0, 2.0], [23.1, 2.0], [23.2, 2.0], [23.3, 2.0], [23.4, 2.0], [23.5, 2.0], [23.6, 2.0], [23.7, 2.0], [23.8, 2.0], [23.9, 2.0], [24.0, 2.0], [24.1, 2.0], [24.2, 2.0], [24.3, 2.0], [24.4, 2.0], [24.5, 2.0], [24.6, 2.0], [24.7, 2.0], [24.8, 2.0], [24.9, 2.0], [25.0, 2.0], [25.1, 2.0], [25.2, 2.0], [25.3, 2.0], [25.4, 2.0], [25.5, 2.0], [25.6, 2.0], [25.7, 2.0], [25.8, 2.0], [25.9, 2.0], [26.0, 2.0], [26.1, 2.0], [26.2, 2.0], [26.3, 2.0], [26.4, 2.0], [26.5, 2.0], [26.6, 2.0], [26.7, 2.0], [26.8, 2.0], [26.9, 2.0], [27.0, 2.0], [27.1, 2.0], [27.2, 2.0], [27.3, 2.0], [27.4, 2.0], [27.5, 2.0], [27.6, 2.0], [27.7, 2.0], [27.8, 2.0], [27.9, 2.0], [28.0, 2.0], [28.1, 2.0], [28.2, 2.0], [28.3, 2.0], [28.4, 2.0], [28.5, 2.0], [28.6, 2.0], [28.7, 2.0], [28.8, 2.0], [28.9, 2.0], [29.0, 2.0], [29.1, 2.0], [29.2, 2.0], [29.3, 2.0], [29.4, 2.0], [29.5, 2.0], [29.6, 2.0], [29.7, 2.0], [29.8, 2.0], [29.9, 2.0], [30.0, 2.0], [30.1, 2.0], [30.2, 2.0], [30.3, 2.0], [30.4, 2.0], [30.5, 2.0], [30.6, 2.0], [30.7, 2.0], [30.8, 2.0], [30.9, 2.0], [31.0, 2.0], [31.1, 2.0], [31.2, 2.0], [31.3, 2.0], [31.4, 2.0], [31.5, 2.0], [31.6, 2.0], [31.7, 2.0], [31.8, 2.0], [31.9, 2.0], [32.0, 2.0], [32.1, 2.0], [32.2, 2.0], [32.3, 2.0], [32.4, 2.0], [32.5, 2.0], [32.6, 2.0], [32.7, 2.0], [32.8, 2.0], [32.9, 2.0], [33.0, 2.0], [33.1, 2.0], [33.2, 2.0], [33.3, 2.0], [33.4, 2.0], [33.5, 2.0], [33.6, 2.0], [33.7, 2.0], [33.8, 2.0], [33.9, 2.0], [34.0, 2.0], [34.1, 2.0], [34.2, 2.0], [34.3, 2.0], [34.4, 2.0], [34.5, 2.0], [34.6, 2.0], [34.7, 2.0], [34.8, 2.0], [34.9, 2.0], [35.0, 2.0], [35.1, 2.0], [35.2, 2.0], [35.3, 2.0], [35.4, 2.0], [35.5, 2.0], [35.6, 2.0], [35.7, 2.0], [35.8, 2.0], [35.9, 2.0], [36.0, 2.0], [36.1, 2.0], [36.2, 2.0], [36.3, 2.0], [36.4, 2.0], [36.5, 2.0], [36.6, 2.0], [36.7, 2.0], [36.8, 2.0], [36.9, 2.0], [37.0, 2.0], [37.1, 2.0], [37.2, 2.0], [37.3, 2.0], [37.4, 2.0], [37.5, 2.0], [37.6, 2.0], [37.7, 2.0], [37.8, 2.0], [37.9, 2.0], [38.0, 2.0], [38.1, 2.0], [38.2, 2.0], [38.3, 2.0], [38.4, 2.0], [38.5, 2.0], [38.6, 2.0], [38.7, 2.0], [38.8, 2.0], [38.9, 2.0], [39.0, 2.0], [39.1, 2.0], [39.2, 2.0], [39.3, 2.0], [39.4, 2.0], [39.5, 2.0], [39.6, 2.0], [39.7, 2.0], [39.8, 2.0], [39.9, 2.0], [40.0, 2.0], [40.1, 2.0], [40.2, 2.0], [40.3, 2.0], [40.4, 2.0], [40.5, 2.0], [40.6, 2.0], [40.7, 2.0], [40.8, 2.0], [40.9, 2.0], [41.0, 2.0], [41.1, 2.0], [41.2, 2.0], [41.3, 2.0], [41.4, 2.0], [41.5, 2.0], [41.6, 2.0], [41.7, 2.0], [41.8, 2.0], [41.9, 2.0], [42.0, 2.0], [42.1, 2.0], [42.2, 2.0], [42.3, 2.0], [42.4, 2.0], [42.5, 2.0], [42.6, 2.0], [42.7, 2.0], [42.8, 2.0], [42.9, 2.0], [43.0, 2.0], [43.1, 2.0], [43.2, 2.0], [43.3, 2.0], [43.4, 2.0], [43.5, 2.0], [43.6, 2.0], [43.7, 2.0], [43.8, 2.0], [43.9, 2.0], [44.0, 2.0], [44.1, 2.0], [44.2, 2.0], [44.3, 2.0], [44.4, 2.0], [44.5, 2.0], [44.6, 2.0], [44.7, 2.0], [44.8, 2.0], [44.9, 2.0], [45.0, 2.0], [45.1, 2.0], [45.2, 2.0], [45.3, 2.0], [45.4, 2.0], [45.5, 2.0], [45.6, 2.0], [45.7, 2.0], [45.8, 2.0], [45.9, 2.0], [46.0, 2.0], [46.1, 2.0], [46.2, 3.0], [46.3, 3.0], [46.4, 3.0], [46.5, 3.0], [46.6, 3.0], [46.7, 3.0], [46.8, 3.0], [46.9, 3.0], [47.0, 3.0], [47.1, 3.0], [47.2, 3.0], [47.3, 3.0], [47.4, 3.0], [47.5, 3.0], [47.6, 3.0], [47.7, 3.0], [47.8, 3.0], [47.9, 3.0], [48.0, 3.0], [48.1, 3.0], [48.2, 3.0], [48.3, 3.0], [48.4, 3.0], [48.5, 3.0], [48.6, 3.0], [48.7, 3.0], [48.8, 3.0], [48.9, 3.0], [49.0, 3.0], [49.1, 3.0], [49.2, 3.0], [49.3, 3.0], [49.4, 3.0], [49.5, 3.0], [49.6, 3.0], [49.7, 3.0], [49.8, 3.0], [49.9, 3.0], [50.0, 3.0], [50.1, 3.0], [50.2, 3.0], [50.3, 3.0], [50.4, 3.0], [50.5, 3.0], [50.6, 3.0], [50.7, 3.0], [50.8, 3.0], [50.9, 3.0], [51.0, 3.0], [51.1, 3.0], [51.2, 3.0], [51.3, 3.0], [51.4, 3.0], [51.5, 3.0], [51.6, 3.0], [51.7, 3.0], [51.8, 3.0], [51.9, 3.0], [52.0, 3.0], [52.1, 3.0], [52.2, 3.0], [52.3, 3.0], [52.4, 3.0], [52.5, 3.0], [52.6, 3.0], [52.7, 3.0], [52.8, 3.0], [52.9, 3.0], [53.0, 3.0], [53.1, 3.0], [53.2, 3.0], [53.3, 3.0], [53.4, 3.0], [53.5, 3.0], [53.6, 3.0], [53.7, 3.0], [53.8, 3.0], [53.9, 3.0], [54.0, 3.0], [54.1, 3.0], [54.2, 3.0], [54.3, 3.0], [54.4, 3.0], [54.5, 3.0], [54.6, 3.0], [54.7, 3.0], [54.8, 3.0], [54.9, 3.0], [55.0, 3.0], [55.1, 3.0], [55.2, 3.0], [55.3, 3.0], [55.4, 3.0], [55.5, 3.0], [55.6, 3.0], [55.7, 3.0], [55.8, 3.0], [55.9, 3.0], [56.0, 3.0], [56.1, 3.0], [56.2, 3.0], [56.3, 3.0], [56.4, 3.0], [56.5, 3.0], [56.6, 3.0], [56.7, 3.0], [56.8, 3.0], [56.9, 3.0], [57.0, 3.0], [57.1, 3.0], [57.2, 3.0], [57.3, 3.0], [57.4, 3.0], [57.5, 3.0], [57.6, 3.0], [57.7, 3.0], [57.8, 3.0], [57.9, 3.0], [58.0, 3.0], [58.1, 3.0], [58.2, 3.0], [58.3, 3.0], [58.4, 3.0], [58.5, 3.0], [58.6, 3.0], [58.7, 3.0], [58.8, 4.0], [58.9, 4.0], [59.0, 4.0], [59.1, 4.0], [59.2, 4.0], [59.3, 4.0], [59.4, 4.0], [59.5, 4.0], [59.6, 4.0], [59.7, 4.0], [59.8, 4.0], [59.9, 4.0], [60.0, 4.0], [60.1, 4.0], [60.2, 5.0], [60.3, 5.0], [60.4, 5.0], [60.5, 5.0], [60.6, 5.0], [60.7, 6.0], [60.8, 6.0], [60.9, 6.0], [61.0, 6.0], [61.1, 7.0], [61.2, 8.0], [61.3, 10.0], [61.4, 19.0], [61.5, 23.0], [61.6, 24.0], [61.7, 26.0], [61.8, 27.0], [61.9, 28.0], [62.0, 28.0], [62.1, 30.0], [62.2, 31.0], [62.3, 33.0], [62.4, 35.0], [62.5, 36.0], [62.6, 38.0], [62.7, 40.0], [62.8, 41.0], [62.9, 43.0], [63.0, 45.0], [63.1, 47.0], [63.2, 49.0], [63.3, 54.0], [63.4, 58.0], [63.5, 63.0], [63.6, 68.0], [63.7, 71.0], [63.8, 77.0], [63.9, 85.0], [64.0, 97.0], [64.1, 106.0], [64.2, 125.0], [64.3, 145.0], [64.4, 164.0], [64.5, 190.0], [64.6, 228.0], [64.7, 273.0], [64.8, 300.0], [64.9, 316.0], [65.0, 334.0], [65.1, 355.0], [65.2, 376.0], [65.3, 391.0], [65.4, 419.0], [65.5, 433.0], [65.6, 443.0], [65.7, 465.0], [65.8, 478.0], [65.9, 494.0], [66.0, 505.0], [66.1, 524.0], [66.2, 543.0], [66.3, 561.0], [66.4, 579.0], [66.5, 593.0], [66.6, 609.0], [66.7, 620.0], [66.8, 632.0], [66.9, 646.0], [67.0, 663.0], [67.1, 675.0], [67.2, 691.0], [67.3, 711.0], [67.4, 723.0], [67.5, 745.0], [67.6, 761.0], [67.7, 781.0], [67.8, 798.0], [67.9, 814.0], [68.0, 833.0], [68.1, 845.0], [68.2, 866.0], [68.3, 884.0], [68.4, 901.0], [68.5, 915.0], [68.6, 933.0], [68.7, 955.0], [68.8, 972.0], [68.9, 994.0], [69.0, 1011.0], [69.1, 1033.0], [69.2, 1050.0], [69.3, 1064.0], [69.4, 1082.0], [69.5, 1099.0], [69.6, 1126.0], [69.7, 1141.0], [69.8, 1161.0], [69.9, 1181.0], [70.0, 1197.0], [70.1, 1234.0], [70.2, 1261.0], [70.3, 1283.0], [70.4, 1314.0], [70.5, 1334.0], [70.6, 1366.0], [70.7, 1385.0], [70.8, 1415.0], [70.9, 1442.0], [71.0, 1465.0], [71.1, 1487.0], [71.2, 1507.0], [71.3, 1536.0], [71.4, 1557.0], [71.5, 1584.0], [71.6, 1599.0], [71.7, 1625.0], [71.8, 1650.0], [71.9, 1667.0], [72.0, 1684.0], [72.1, 1715.0], [72.2, 1747.0], [72.3, 1766.0], [72.4, 1796.0], [72.5, 1814.0], [72.6, 1842.0], [72.7, 1859.0], [72.8, 1878.0], [72.9, 1904.0], [73.0, 1922.0], [73.1, 1950.0], [73.2, 1977.0], [73.3, 1998.0], [73.4, 2031.0], [73.5, 2056.0], [73.6, 2083.0], [73.7, 2108.0], [73.8, 2134.0], [73.9, 2156.0], [74.0, 2177.0], [74.1, 2193.0], [74.2, 2223.0], [74.3, 2244.0], [74.4, 2263.0], [74.5, 2284.0], [74.6, 2303.0], [74.7, 2331.0], [74.8, 2366.0], [74.9, 2400.0], [75.0, 2416.0], [75.1, 2435.0], [75.2, 2463.0], [75.3, 2493.0], [75.4, 2530.0], [75.5, 2559.0], [75.6, 2575.0], [75.7, 2607.0], [75.8, 2627.0], [75.9, 2656.0], [76.0, 2679.0], [76.1, 2703.0], [76.2, 2724.0], [76.3, 2749.0], [76.4, 2766.0], [76.5, 2790.0], [76.6, 2823.0], [76.7, 2840.0], [76.8, 2867.0], [76.9, 2882.0], [77.0, 2902.0], [77.1, 2919.0], [77.2, 2944.0], [77.3, 2967.0], [77.4, 2977.0], [77.5, 2994.0], [77.6, 3008.0], [77.7, 3026.0], [77.8, 3040.0], [77.9, 3054.0], [78.0, 3066.0], [78.1, 3076.0], [78.2, 3087.0], [78.3, 3102.0], [78.4, 3115.0], [78.5, 3125.0], [78.6, 3139.0], [78.7, 3149.0], [78.8, 3158.0], [78.9, 3167.0], [79.0, 3181.0], [79.1, 3198.0], [79.2, 3209.0], [79.3, 3217.0], [79.4, 3226.0], [79.5, 3232.0], [79.6, 3243.0], [79.7, 3251.0], [79.8, 3262.0], [79.9, 3273.0], [80.0, 3282.0], [80.1, 3289.0], [80.2, 3299.0], [80.3, 3308.0], [80.4, 3318.0], [80.5, 3328.0], [80.6, 3336.0], [80.7, 3343.0], [80.8, 3353.0], [80.9, 3361.0], [81.0, 3369.0], [81.1, 3380.0], [81.2, 3389.0], [81.3, 3394.0], [81.4, 3398.0], [81.5, 3406.0], [81.6, 3411.0], [81.7, 3419.0], [81.8, 3429.0], [81.9, 3436.0], [82.0, 3442.0], [82.1, 3449.0], [82.2, 3457.0], [82.3, 3463.0], [82.4, 3468.0], [82.5, 3474.0], [82.6, 3482.0], [82.7, 3488.0], [82.8, 3497.0], [82.9, 3505.0], [83.0, 3509.0], [83.1, 3517.0], [83.2, 3523.0], [83.3, 3531.0], [83.4, 3535.0], [83.5, 3541.0], [83.6, 3548.0], [83.7, 3554.0], [83.8, 3559.0], [83.9, 3564.0], [84.0, 3572.0], [84.1, 3580.0], [84.2, 3588.0], [84.3, 3594.0], [84.4, 3601.0], [84.5, 3609.0], [84.6, 3615.0], [84.7, 3623.0], [84.8, 3630.0], [84.9, 3637.0], [85.0, 3645.0], [85.1, 3652.0], [85.2, 3660.0], [85.3, 3667.0], [85.4, 3676.0], [85.5, 3685.0], [85.6, 3692.0], [85.7, 3698.0], [85.8, 3705.0], [85.9, 3711.0], [86.0, 3718.0], [86.1, 3730.0], [86.2, 3736.0], [86.3, 3745.0], [86.4, 3751.0], [86.5, 3758.0], [86.6, 3765.0], [86.7, 3774.0], [86.8, 3782.0], [86.9, 3788.0], [87.0, 3794.0], [87.1, 3805.0], [87.2, 3810.0], [87.3, 3817.0], [87.4, 3825.0], [87.5, 3835.0], [87.6, 3845.0], [87.7, 3853.0], [87.8, 3859.0], [87.9, 3870.0], [88.0, 3876.0], [88.1, 3885.0], [88.2, 3894.0], [88.3, 3904.0], [88.4, 3912.0], [88.5, 3921.0], [88.6, 3931.0], [88.7, 3940.0], [88.8, 3947.0], [88.9, 3954.0], [89.0, 3962.0], [89.1, 3971.0], [89.2, 3980.0], [89.3, 3987.0], [89.4, 3994.0], [89.5, 4006.0], [89.6, 4020.0], [89.7, 4027.0], [89.8, 4040.0], [89.9, 4054.0], [90.0, 4064.0], [90.1, 4074.0], [90.2, 4084.0], [90.3, 4090.0], [90.4, 4100.0], [90.5, 4108.0], [90.6, 4120.0], [90.7, 4132.0], [90.8, 4147.0], [90.9, 4158.0], [91.0, 4170.0], [91.1, 4179.0], [91.2, 4193.0], [91.3, 4204.0], [91.4, 4220.0], [91.5, 4236.0], [91.6, 4249.0], [91.7, 4260.0], [91.8, 4273.0], [91.9, 4287.0], [92.0, 4299.0], [92.1, 4322.0], [92.2, 4336.0], [92.3, 4351.0], [92.4, 4373.0], [92.5, 4389.0], [92.6, 4404.0], [92.7, 4422.0], [92.8, 4443.0], [92.9, 4458.0], [93.0, 4479.0], [93.1, 4502.0], [93.2, 4519.0], [93.3, 4554.0], [93.4, 4587.0], [93.5, 4615.0], [93.6, 4638.0], [93.7, 4657.0], [93.8, 4680.0], [93.9, 4700.0], [94.0, 4729.0], [94.1, 4746.0], [94.2, 4775.0], [94.3, 4818.0], [94.4, 4857.0], [94.5, 4889.0], [94.6, 4915.0], [94.7, 4960.0], [94.8, 4997.0], [94.9, 5037.0], [95.0, 5081.0], [95.1, 5147.0], [95.2, 5184.0], [95.3, 5212.0], [95.4, 5264.0], [95.5, 5321.0], [95.6, 5360.0], [95.7, 5399.0], [95.8, 5434.0], [95.9, 5481.0], [96.0, 5524.0], [96.1, 5561.0], [96.2, 5615.0], [96.3, 5669.0], [96.4, 5693.0], [96.5, 5734.0], [96.6, 5799.0], [96.7, 5841.0], [96.8, 5917.0], [96.9, 5969.0], [97.0, 6024.0], [97.1, 6073.0], [97.2, 6125.0], [97.3, 6172.0], [97.4, 6231.0], [97.5, 6282.0], [97.6, 6359.0], [97.7, 6435.0], [97.8, 6486.0], [97.9, 6559.0], [98.0, 6653.0], [98.1, 6728.0], [98.2, 6807.0], [98.3, 6885.0], [98.4, 6960.0], [98.5, 7048.0], [98.6, 7123.0], [98.7, 7192.0], [98.8, 7275.0], [98.9, 7357.0], [99.0, 7495.0], [99.1, 7791.0], [99.2, 8065.0], [99.3, 8320.0], [99.4, 8554.0], [99.5, 9327.0], [99.6, 10034.0], [99.7, 10947.0], [99.8, 11663.0], [99.9, 12983.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 12314.0, "series": [{"data": [[0.0, 12314.0], [100.0, 96.0], [200.0, 67.0], [300.0, 101.0], [400.0, 112.0], [500.0, 103.0], [600.0, 95.0], [700.0, 97.0], [800.0, 99.0], [900.0, 97.0], [1000.0, 100.0], [1100.0, 89.0], [1200.0, 93.0], [1300.0, 81.0], [1400.0, 94.0], [1500.0, 118.0], [1600.0, 98.0], [1700.0, 86.0], [1800.0, 65.0], [1900.0, 89.0], [2000.0, 82.0], [2100.0, 71.0], [2300.0, 72.0], [2200.0, 60.0], [2400.0, 88.0], [2500.0, 81.0], [2600.0, 50.0], [2700.0, 61.0], [2800.0, 81.0], [2900.0, 104.0], [3000.0, 95.0], [3100.0, 135.0], [3200.0, 153.0], [3300.0, 226.0], [3400.0, 209.0], [3500.0, 252.0], [3600.0, 242.0], [3700.0, 225.0], [3800.0, 247.0], [3900.0, 231.0], [4000.0, 206.0], [4100.0, 172.0], [4200.0, 179.0], [4300.0, 130.0], [4500.0, 87.0], [4600.0, 95.0], [4400.0, 102.0], [4700.0, 78.0], [4800.0, 72.0], [5000.0, 43.0], [5100.0, 47.0], [4900.0, 58.0], [5200.0, 35.0], [5300.0, 49.0], [5400.0, 64.0], [5500.0, 58.0], [5600.0, 55.0], [5700.0, 50.0], [5800.0, 41.0], [6000.0, 36.0], [5900.0, 44.0], [6100.0, 50.0], [6300.0, 30.0], [6200.0, 26.0], [6400.0, 39.0], [6600.0, 25.0], [6500.0, 26.0], [6800.0, 13.0], [6900.0, 15.0], [6700.0, 19.0], [7100.0, 13.0], [7000.0, 17.0], [7400.0, 9.0], [7300.0, 4.0], [7200.0, 6.0], [7600.0, 6.0], [7500.0, 3.0], [7700.0, 7.0], [7800.0, 6.0], [8100.0, 3.0], [8000.0, 4.0], [8400.0, 4.0], [8600.0, 2.0], [8500.0, 3.0], [8300.0, 2.0], [8200.0, 7.0], [9000.0, 3.0], [8800.0, 2.0], [8900.0, 2.0], [9200.0, 4.0], [9100.0, 1.0], [9500.0, 1.0], [9300.0, 1.0], [9700.0, 6.0], [9400.0, 3.0], [9600.0, 2.0], [10000.0, 4.0], [10100.0, 5.0], [9900.0, 2.0], [10200.0, 1.0], [10500.0, 3.0], [10300.0, 2.0], [10600.0, 4.0], [11100.0, 3.0], [10800.0, 2.0], [11200.0, 4.0], [11000.0, 5.0], [10900.0, 1.0], [11400.0, 4.0], [11300.0, 5.0], [11600.0, 1.0], [11700.0, 3.0], [11500.0, 1.0], [12100.0, 3.0], [12200.0, 3.0], [11800.0, 1.0], [11900.0, 2.0], [12700.0, 2.0], [12400.0, 1.0], [12500.0, 1.0], [13000.0, 2.0], [12800.0, 1.0], [13200.0, 1.0], [13300.0, 1.0], [13500.0, 2.0], [13400.0, 3.0], [13900.0, 1.0], [14500.0, 1.0], [16200.0, 1.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[300.0, 1.0], [100.0, 187.0], [200.0, 2.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 12165.0], [100.0, 98.0], [200.0, 49.0], [300.0, 98.0], [400.0, 117.0], [500.0, 116.0], [600.0, 132.0], [700.0, 109.0], [800.0, 112.0], [900.0, 104.0], [1000.0, 106.0], [1100.0, 95.0], [1200.0, 69.0], [1300.0, 72.0], [1400.0, 79.0], [1500.0, 85.0], [1600.0, 83.0], [1700.0, 72.0], [1800.0, 90.0], [1900.0, 77.0], [2000.0, 67.0], [2100.0, 88.0], [2200.0, 84.0], [2300.0, 64.0], [2400.0, 83.0], [2500.0, 65.0], [2600.0, 80.0], [2800.0, 87.0], [2700.0, 81.0], [2900.0, 104.0], [3000.0, 140.0], [3100.0, 160.0], [3200.0, 208.0], [3300.0, 233.0], [3400.0, 265.0], [3500.0, 296.0], [3600.0, 256.0], [3700.0, 251.0], [3800.0, 232.0], [3900.0, 221.0], [4000.0, 181.0], [4300.0, 110.0], [4100.0, 166.0], [4200.0, 141.0], [4600.0, 86.0], [4500.0, 66.0], [4400.0, 97.0], [4700.0, 69.0], [4800.0, 54.0], [5000.0, 44.0], [5100.0, 41.0], [4900.0, 51.0], [5200.0, 36.0], [5300.0, 49.0], [5400.0, 44.0], [5600.0, 45.0], [5500.0, 44.0], [5800.0, 31.0], [5700.0, 38.0], [6100.0, 37.0], [6000.0, 38.0], [5900.0, 37.0], [6200.0, 34.0], [6300.0, 22.0], [6600.0, 22.0], [6500.0, 23.0], [6400.0, 33.0], [6900.0, 22.0], [6700.0, 25.0], [6800.0, 23.0], [7100.0, 27.0], [7000.0, 26.0], [7400.0, 11.0], [7200.0, 22.0], [7300.0, 23.0], [7600.0, 8.0], [7500.0, 7.0], [7900.0, 8.0], [7800.0, 6.0], [7700.0, 4.0], [8000.0, 10.0], [8100.0, 5.0], [8300.0, 12.0], [8200.0, 5.0], [8500.0, 8.0], [8400.0, 7.0], [8600.0, 2.0], [9100.0, 1.0], [9200.0, 4.0], [9000.0, 2.0], [8900.0, 3.0], [8800.0, 2.0], [9600.0, 4.0], [9300.0, 2.0], [9400.0, 4.0], [9700.0, 1.0], [9500.0, 3.0], [9800.0, 3.0], [10000.0, 3.0], [10200.0, 5.0], [10100.0, 1.0], [9900.0, 1.0], [10600.0, 2.0], [10400.0, 1.0], [10700.0, 2.0], [10500.0, 3.0], [10300.0, 1.0], [11200.0, 2.0], [11000.0, 3.0], [10800.0, 2.0], [10900.0, 3.0], [11100.0, 1.0], [11600.0, 2.0], [11500.0, 5.0], [11400.0, 2.0], [11300.0, 3.0], [12100.0, 2.0], [11900.0, 3.0], [12000.0, 1.0], [12300.0, 2.0], [12500.0, 2.0], [13000.0, 1.0], [12800.0, 6.0], [12900.0, 3.0], [13300.0, 1.0], [13700.0, 2.0], [13400.0, 1.0], [13800.0, 1.0], [13500.0, 2.0], [13600.0, 2.0], [13900.0, 3.0], [14300.0, 1.0], [14100.0, 1.0], [14400.0, 1.0], [14900.0, 1.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 16200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1773.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 24237.0, "series": [{"data": [[0.0, 1824.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1773.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 10356.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 24237.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 41.49872122762147, "minX": 1.58768814E12, "maxY": 190.0, "series": [{"data": [[1.58768814E12, 41.49872122762147], [1.58768862E12, 190.0], [1.58768844E12, 190.0], [1.58768826E12, 190.0], [1.58768874E12, 188.29872071772675], [1.58768856E12, 190.0], [1.58768838E12, 190.0], [1.5876882E12, 141.47719470328607], [1.58768868E12, 190.0], [1.5876885E12, 190.0], [1.5876888E12, 115.34127789046639], [1.58768832E12, 190.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876888E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.2499999999999998, "minX": 1.0, "maxY": 3251.7142857142862, "series": [{"data": [[5.0, 46.66666666666667], [6.0, 77.0], [7.0, 860.0], [10.0, 63.0], [11.0, 72.5], [12.0, 53.5], [13.0, 50.6], [14.0, 43.5], [15.0, 54.5], [16.0, 35.0], [17.0, 37.75], [18.0, 108.0], [19.0, 27.25], [20.0, 42.0], [21.0, 45.75], [22.0, 64.5], [23.0, 60.5], [25.0, 45.0], [26.0, 60.666666666666664], [27.0, 42.0], [28.0, 33.333333333333336], [29.0, 90.0], [30.0, 81.0], [31.0, 265.25], [32.0, 102.75], [33.0, 52.42857142857143], [34.0, 488.41666666666674], [35.0, 38.0], [36.0, 26.0], [37.0, 1136.857142857143], [38.0, 204.7142857142857], [41.0, 44.9090909090909], [40.0, 42.5], [42.0, 160.75000000000003], [43.0, 55.83333333333334], [44.0, 52.888888888888886], [45.0, 38.0], [46.0, 74.33333333333333], [47.0, 55.0], [48.0, 31.333333333333332], [49.0, 110.88888888888887], [50.0, 50.6], [51.0, 46.0], [52.0, 60.5], [53.0, 35.00000000000001], [54.0, 36.833333333333336], [55.0, 49.42857142857143], [56.0, 68.0], [57.0, 32.857142857142854], [58.0, 35.714285714285715], [59.0, 55.90909090909091], [60.0, 132.83333333333334], [61.0, 934.4285714285716], [62.0, 38.666666666666664], [63.0, 25.0], [64.0, 32.0], [65.0, 27.625], [66.0, 55.0], [67.0, 62.8], [68.0, 37.16666666666667], [69.0, 38.63636363636365], [70.0, 27.833333333333332], [71.0, 44.36363636363637], [72.0, 85.88888888888889], [73.0, 46.666666666666664], [74.0, 27.75], [75.0, 29.0], [76.0, 65.42857142857143], [77.0, 96.60000000000001], [78.0, 31.857142857142858], [79.0, 31.166666666666664], [80.0, 36.6], [81.0, 86.16666666666666], [82.0, 77.33333333333334], [83.0, 101.4375], [84.0, 210.0], [85.0, 306.85714285714283], [86.0, 258.3076923076923], [87.0, 158.28571428571428], [88.0, 89.54545454545455], [89.0, 105.5], [90.0, 319.35714285714283], [91.0, 203.4], [92.0, 416.07692307692304], [93.0, 181.71428571428572], [94.0, 475.44444444444446], [95.0, 617.1666666666666], [96.0, 485.1249999999999], [97.0, 695.4444444444445], [98.0, 1282.5], [99.0, 739.3636363636365], [100.0, 766.75], [101.0, 497.73529411764696], [102.0, 649.5294117647059], [103.0, 869.8947368421052], [104.0, 1012.3333333333331], [105.0, 811.625], [106.0, 608.5217391304349], [107.0, 475.1666666666667], [108.0, 1198.4444444444446], [109.0, 555.5], [110.0, 894.7777777777778], [111.0, 549.6153846153846], [112.0, 1010.68], [113.0, 1326.9285714285713], [114.0, 1571.9259259259259], [115.0, 1306.4444444444443], [116.0, 683.6666666666666], [117.0, 2706.5217391304345], [118.0, 1997.35], [119.0, 3251.7142857142862], [120.0, 2852.2], [121.0, 2091.3636363636365], [122.0, 1122.857142857143], [123.0, 1278.0], [124.0, 1176.8], [125.0, 1620.1111111111113], [126.0, 952.6428571428573], [127.0, 430.42857142857144], [128.0, 466.8888888888889], [129.0, 1021.0000000000001], [130.0, 1064.6153846153845], [131.0, 1359.1428571428573], [133.0, 687.9], [134.0, 1054.0], [135.0, 2202.5], [132.0, 1.2499999999999998], [136.0, 3048.0], [137.0, 965.8571428571427], [138.0, 80.18749999999999], [139.0, 389.6399999999999], [140.0, 874.7894736842104], [141.0, 812.0], [142.0, 415.1200000000001], [143.0, 790.5925925925926], [144.0, 849.375], [145.0, 2099.5], [146.0, 967.2666666666667], [148.0, 887.8333333333329], [150.0, 1632.25], [151.0, 128.58333333333334], [147.0, 1.6666666666666667], [152.0, 227.44444444444434], [153.0, 2938.8888888888887], [154.0, 2726.5], [155.0, 3211.2], [156.0, 1486.2857142857144], [157.0, 790.9473684210526], [158.0, 1515.8999999999999], [159.0, 516.3157894736843], [160.0, 1888.153846153846], [161.0, 2450.625], [162.0, 483.1489361702128], [163.0, 127.41666666666666], [164.0, 90.35483870967737], [165.0, 1090.1875], [166.0, 1632.6111111111113], [167.0, 1359.0], [168.0, 554.3636363636363], [170.0, 469.735294117647], [171.0, 1484.842105263158], [172.0, 863.3333333333333], [173.0, 575.875], [174.0, 486.2105263157893], [175.0, 909.5999999999998], [169.0, 1.7000000000000002], [176.0, 589.7692307692308], [178.0, 553.140350877193], [179.0, 190.6], [182.0, 69.71559633027525], [183.0, 1.4230769230769231], [181.0, 1.6666666666666667], [180.0, 1.5714285714285714], [177.0, 1.526315789473684], [185.0, 2444.8], [186.0, 141.99122807017537], [187.0, 135.14851485148506], [188.0, 443.3846153846155], [189.0, 667.6393442622953], [190.0, 1270.7126019945583], [184.0, 1.3125000000000002], [1.0, 45.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[182.21857894736834, 1180.4563157894672]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 152.0], [3.0, 150.0], [4.0, 162.0], [5.0, 151.0], [6.0, 154.0], [7.0, 152.0], [8.0, 235.0], [9.0, 152.0], [10.0, 156.0], [11.0, 155.0], [12.0, 145.0], [13.0, 149.0], [14.0, 148.0], [15.0, 153.0], [16.0, 164.0], [17.0, 147.0], [18.0, 166.0], [19.0, 151.0], [20.0, 170.0], [21.0, 154.0], [22.0, 163.0], [23.0, 152.0], [24.0, 162.0], [25.0, 147.0], [26.0, 151.0], [27.0, 153.0], [28.0, 152.0], [29.0, 145.0], [30.0, 148.0], [31.0, 157.0], [32.0, 145.0], [33.0, 146.0], [34.0, 148.0], [35.0, 147.0], [36.0, 164.0], [37.0, 149.0], [38.0, 159.0], [39.0, 146.0], [40.0, 150.0], [41.0, 154.0], [42.0, 151.0], [43.0, 151.0], [44.0, 152.0], [45.0, 154.0], [46.0, 162.0], [47.0, 169.0], [48.0, 194.0], [49.0, 179.0], [50.0, 152.0], [51.0, 152.0], [52.0, 144.0], [53.0, 165.0], [54.0, 147.0], [55.0, 159.0], [56.0, 155.0], [57.0, 154.0], [58.0, 157.0], [59.0, 156.0], [60.0, 152.0], [61.0, 149.0], [62.0, 149.0], [63.0, 152.0], [64.0, 157.0], [65.0, 148.0], [66.0, 146.0], [67.0, 152.0], [68.0, 153.0], [69.0, 139.0], [70.0, 148.0], [71.0, 144.0], [72.0, 156.0], [73.0, 138.0], [74.0, 145.0], [75.0, 146.0], [76.0, 162.0], [77.0, 166.0], [78.0, 155.0], [79.0, 154.0], [80.0, 165.0], [81.0, 147.0], [82.0, 185.0], [83.0, 146.0], [84.0, 151.0], [85.0, 161.0], [86.0, 156.0], [87.0, 163.0], [88.0, 152.0], [89.0, 158.0], [90.0, 164.0], [91.0, 147.0], [92.0, 153.0], [93.0, 151.0], [94.0, 154.0], [95.0, 147.0], [96.0, 146.0], [97.0, 153.0], [98.0, 155.0], [99.0, 153.0], [100.0, 167.0], [101.0, 148.0], [102.0, 155.0], [103.0, 169.0], [104.0, 148.0], [105.0, 146.0], [106.0, 165.0], [107.0, 160.0], [108.0, 152.0], [109.0, 152.0], [110.0, 152.0], [111.0, 169.0], [112.0, 153.0], [113.0, 152.0], [114.0, 150.0], [115.0, 158.0], [116.0, 157.0], [117.0, 167.0], [118.0, 144.0], [119.0, 145.0], [120.0, 150.0], [121.0, 148.0], [122.0, 146.0], [123.0, 147.0], [124.0, 154.0], [125.0, 151.0], [126.0, 145.0], [127.0, 146.0], [128.0, 150.0], [129.0, 152.0], [130.0, 147.0], [131.0, 147.0], [132.0, 153.0], [133.0, 156.0], [134.0, 168.0], [135.0, 152.0], [136.0, 154.0], [137.0, 150.0], [138.0, 147.0], [139.0, 158.0], [140.0, 159.0], [141.0, 154.0], [142.0, 148.0], [143.0, 159.0], [144.0, 147.0], [145.0, 151.0], [146.0, 155.0], [147.0, 154.0], [148.0, 159.0], [149.0, 149.0], [150.0, 157.0], [151.0, 162.0], [152.0, 163.0], [153.0, 160.0], [154.0, 164.0], [155.0, 153.0], [156.0, 184.0], [157.0, 148.0], [158.0, 158.0], [159.0, 161.0], [160.0, 169.0], [161.0, 159.0], [162.0, 151.0], [163.0, 150.0], [164.0, 149.0], [165.0, 159.0], [166.0, 160.0], [167.0, 161.0], [168.0, 151.0], [169.0, 152.0], [170.0, 151.0], [171.0, 154.0], [172.0, 149.0], [173.0, 151.0], [174.0, 167.0], [175.0, 156.0], [176.0, 168.0], [177.0, 148.0], [178.0, 159.0], [179.0, 167.0], [180.0, 154.0], [181.0, 151.0], [183.0, 321.0], [184.0, 151.0], [185.0, 158.0], [186.0, 154.0], [187.0, 145.0], [188.0, 150.0], [189.0, 165.0], [190.0, 152.0], [1.0, 182.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[95.50526315789475, 156.763157894737]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[5.0, 44.0], [7.0, 192.8], [8.0, 63.0], [9.0, 46.5], [10.0, 51.0], [11.0, 72.0], [12.0, 35.0], [13.0, 75.0], [14.0, 112.5], [15.0, 44.0], [16.0, 69.0], [17.0, 50.0], [18.0, 93.6], [19.0, 73.71428571428571], [20.0, 83.0], [21.0, 36.666666666666664], [22.0, 38.5], [23.0, 88.66666666666667], [24.0, 28.0], [25.0, 82.0], [26.0, 72.0], [27.0, 72.0], [28.0, 68.66666666666667], [29.0, 81.83333333333333], [30.0, 37.5], [31.0, 49.0], [32.0, 73.0], [33.0, 58.1], [34.0, 744.7500000000001], [35.0, 30.8], [37.0, 721.5714285714287], [38.0, 443.2222222222222], [39.0, 179.0], [40.0, 42.2], [41.0, 73.25], [42.0, 176.88888888888889], [43.0, 44.142857142857146], [44.0, 42.0], [45.0, 61.4], [46.0, 61.9], [47.0, 96.8], [48.0, 46.0], [49.0, 83.8], [50.0, 48.0], [51.0, 50.85714285714285], [52.0, 42.5], [53.0, 51.8], [54.0, 68.6], [55.0, 33.5], [56.0, 60.0], [57.0, 37.5], [58.0, 36.0], [59.0, 69.5], [60.0, 532.2727272727273], [61.0, 744.6874999999999], [62.0, 47.25], [63.0, 42.83333333333333], [64.0, 33.16666666666667], [65.0, 34.5], [66.0, 47.54545454545454], [67.0, 83.81818181818183], [68.0, 35.5], [69.0, 45.900000000000006], [70.0, 35.714285714285715], [71.0, 52.5], [72.0, 62.92857142857143], [73.0, 54.25], [74.0, 29.5], [75.0, 32.666666666666664], [76.0, 78.57142857142858], [77.0, 63.8888888888889], [78.0, 39.75000000000001], [79.0, 36.85714285714286], [80.0, 50.4], [81.0, 71.8], [82.0, 169.79999999999998], [83.0, 116.72727272727272], [84.0, 142.5333333333333], [85.0, 259.88], [86.0, 193.37500000000003], [87.0, 247.20000000000002], [88.0, 237.89999999999998], [89.0, 94.42857142857143], [90.0, 329.56250000000006], [91.0, 227.83333333333331], [92.0, 390.15384615384613], [93.0, 200.49999999999997], [94.0, 384.07692307692304], [95.0, 815.5714285714286], [96.0, 484.0], [97.0, 643.125], [98.0, 1046.2727272727273], [99.0, 728.3571428571429], [100.0, 985.3125], [101.0, 514.2222222222223], [102.0, 624.1111111111111], [103.0, 897.9629629629626], [104.0, 956.6249999999999], [105.0, 688.5555555555557], [106.0, 631.75], [107.0, 650.5714285714286], [108.0, 1011.375], [109.0, 439.8888888888889], [110.0, 656.7142857142857], [111.0, 724.5999999999999], [112.0, 707.4736842105264], [113.0, 899.5], [114.0, 1450.2499999999998], [115.0, 821.5], [116.0, 439.875], [117.0, 3003.4999999999995], [118.0, 3127.703703703704], [119.0, 2870.272727272727], [120.0, 2286.8], [121.0, 2407.7500000000005], [122.0, 839.0], [123.0, 1263.0], [124.0, 1276.0], [125.0, 1614.0], [126.0, 417.6842105263158], [127.0, 810.8461538461537], [129.0, 322.25], [130.0, 1532.8125], [131.0, 1832.3000000000002], [133.0, 1272.0], [134.0, 2030.5], [135.0, 2985.5], [132.0, 1.8571428571428572], [128.0, 2.0], [136.0, 2010.428571428571], [137.0, 1114.5882352941178], [138.0, 1079.8571428571427], [139.0, 1033.5], [140.0, 1069.076923076923], [141.0, 2391.0], [142.0, 215.64285714285725], [143.0, 259.8], [144.0, 2850.833333333333], [145.0, 1981.0], [146.0, 1313.666666666667], [147.0, 97.27272727272727], [148.0, 680.9090909090908], [149.0, 629.6666666666667], [150.0, 553.9999999999999], [151.0, 1045.7142857142858], [152.0, 316.5882352941176], [153.0, 1254.2857142857142], [154.0, 1155.6666666666663], [155.0, 1233.3636363636363], [156.0, 1554.3636363636363], [157.0, 827.333333333333], [158.0, 1721.384615384615], [159.0, 901.0], [160.0, 1695.9999999999995], [161.0, 1063.6666666666667], [162.0, 529.9210526315787], [164.0, 117.69090909090909], [165.0, 297.62500000000006], [166.0, 1008.7368421052632], [167.0, 1122.3333333333335], [163.0, 2.3000000000000003], [168.0, 294.6], [169.0, 856.2631578947369], [170.0, 847.2173913043479], [171.0, 3114.3529411764707], [172.0, 1837.0], [173.0, 2179.5], [174.0, 452.5555555555556], [175.0, 127.3478260869565], [176.0, 1394.4999999999995], [178.0, 593.6290322580645], [179.0, 141.84615384615378], [180.0, 339.8181818181818], [183.0, 1.7826086956521738], [182.0, 1.857142857142857], [181.0, 1.7142857142857144], [177.0, 2.0], [185.0, 651.3999999999999], [186.0, 381.5913978494625], [188.0, 298.48387096774195], [189.0, 1515.238095238095], [190.0, 1295.9878520488242], [187.0, 1.9268292682926824], [184.0, 2.060606060606061], [1.0, 38.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[182.17536842105164, 1210.55057894737]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 190.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2580.8333333333335, "minX": 1.58768814E12, "maxY": 224151.8, "series": [{"data": [[1.58768814E12, 39393.78333333333], [1.58768862E12, 201325.01666666666], [1.58768844E12, 205774.8], [1.58768826E12, 222025.0], [1.58768874E12, 15950.35], [1.58768856E12, 168198.5], [1.58768838E12, 224022.38333333333], [1.5876882E12, 224151.8], [1.58768868E12, 95209.8], [1.5876885E12, 16077.55], [1.5876888E12, 125333.51666666666], [1.58768832E12, 131426.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58768814E12, 2580.8333333333335], [1.58768862E12, 20971.533333333333], [1.58768844E12, 16931.366666666665], [1.58768826E12, 17867.833333333332], [1.58768874E12, 43036.26666666667], [1.58768856E12, 20219.566666666666], [1.58768838E12, 18668.433333333334], [1.5876882E12, 14155.733333333334], [1.58768868E12, 32625.366666666665], [1.5876885E12, 43379.3], [1.5876888E12, 14100.6], [1.58768832E12, 27885.166666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876888E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2.2445472571050895, "minX": 1.58768814E12, "maxY": 3256.047098402017, "series": [{"data": [[1.58768814E12, 116.49668874172181], [1.58768862E12, 2132.0977088948757], [1.58768844E12, 3256.047098402017], [1.58768826E12, 2871.5356285028056], [1.58768874E12, 3.296161482461938], [1.58768856E12, 1910.9906810035836], [1.58768838E12, 2285.4311008468044], [1.5876882E12, 2428.4190064794793], [1.58768868E12, 652.9201404124616], [1.5876885E12, 3.126931930286087], [1.5876888E12, 502.1356435643566], [1.58768832E12, 967.3161125319692]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768814E12, 156.21875], [1.5876882E12, 157.0396825396826]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768814E12, 111.76704545454547], [1.58768862E12, 2110.77777777778], [1.58768844E12, 3023.1399491094153], [1.58768826E12, 2954.910399999999], [1.58768874E12, 5.212879546212871], [1.58768856E12, 2066.8625261688785], [1.58768838E12, 2468.426067073169], [1.5876882E12, 2531.6565349544076], [1.58768868E12, 640.9899299474602], [1.5876885E12, 2.2445472571050895], [1.5876888E12, 562.3336798336804], [1.58768832E12, 996.3074550128538]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876888E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2.238268341044282, "minX": 1.58768814E12, "maxY": 3255.859545836836, "series": [{"data": [[1.58768814E12, 115.90728476821194], [1.58768862E12, 2131.988544474394], [1.58768844E12, 3255.859545836836], [1.58768826E12, 2871.2586068855117], [1.58768874E12, 3.292521508934487], [1.58768856E12, 1910.4265232974928], [1.58768838E12, 2285.083140877602], [1.5876882E12, 2427.8056155507584], [1.58768868E12, 652.8973233874517], [1.5876885E12, 3.1213416639263336], [1.5876888E12, 500.8891089108926], [1.58768832E12, 966.981585677749]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768814E12, 156.17187500000003], [1.5876882E12, 157.01587301587304]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768814E12, 111.34090909090911], [1.58768862E12, 2110.6625258799213], [1.58768844E12, 3022.897370653092], [1.58768826E12, 2954.667199999999], [1.58768874E12, 5.208208208208219], [1.58768856E12, 2066.5003489183528], [1.58768838E12, 2468.1410060975604], [1.5876882E12, 2530.947315096247], [1.58768868E12, 640.9702276707537], [1.5876885E12, 2.238268341044282], [1.5876888E12, 561.1205821205818], [1.58768832E12, 996.0740359897156]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876888E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58768814E12, "maxY": 1.09375, "series": [{"data": [[1.58768814E12, 0.3112582781456953], [1.58768862E12, 0.2601078167115898], [1.58768844E12, 0.35407905803196], [1.58768826E12, 0.4275420336269015], [1.58768874E12, 0.0], [1.58768856E12, 0.1892473118279571], [1.58768838E12, 0.2432640492686681], [1.5876882E12, 0.3650107991360692], [1.58768868E12, 0.0719613865730582], [1.5876885E12, 0.0], [1.5876888E12, 0.07722772277227719], [1.58768832E12, 0.09207161125319688]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768814E12, 1.09375], [1.5876882E12, 0.6349206349206349]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768814E12, 0.3977272727272728], [1.58768862E12, 0.3719806763285023], [1.58768844E12, 0.41306191687871097], [1.58768826E12, 0.45680000000000065], [1.58768874E12, 0.39606272939606296], [1.58768856E12, 0.42498255408234525], [1.58768838E12, 0.40548780487804914], [1.5876882E12, 0.47922998986828785], [1.58768868E12, 0.37740805604203215], [1.5876885E12, 0.4127561136814275], [1.5876888E12, 0.37837837837837895], [1.58768832E12, 0.47095115681233984]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876888E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.58768814E12, "maxY": 16263.0, "series": [{"data": [[1.58768814E12, 1983.0], [1.58768862E12, 5962.0], [1.58768844E12, 16263.0], [1.58768826E12, 10053.0], [1.58768856E12, 7495.0], [1.58768838E12, 14910.0], [1.5876882E12, 9687.0], [1.58768868E12, 5195.0], [1.5876888E12, 4785.0], [1.58768832E12, 8573.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58768814E12, 19.0], [1.58768862E12, 17.0], [1.58768844E12, 59.0], [1.58768826E12, 176.0], [1.58768856E12, 2579.0], [1.58768838E12, 35.0], [1.5876882E12, 15.0], [1.58768868E12, 815.0], [1.5876888E12, 19.0], [1.58768832E12, 37.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58768814E12, 165.8], [1.58768862E12, 4287.0], [1.58768844E12, 5856.5], [1.58768826E12, 5816.200000000001], [1.58768856E12, 5069.099999999999], [1.58768838E12, 7636.0], [1.5876882E12, 5644.0], [1.58768868E12, 4394.6], [1.5876888E12, 3142.0], [1.58768832E12, 6566.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58768814E12, 1296.199999999995], [1.58768862E12, 4789.740000000002], [1.58768844E12, 8656.700000000024], [1.58768826E12, 7327.0], [1.58768856E12, 7228.98], [1.58768838E12, 13468.550000000001], [1.5876882E12, 8449.35], [1.58768868E12, 4865.439999999997], [1.5876888E12, 4494.600000000001], [1.58768832E12, 8308.72]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58768814E12, 336.3999999999993], [1.58768862E12, 4498.0], [1.58768844E12, 6441.0], [1.58768826E12, 6487.2], [1.58768856E12, 6512.749999999996], [1.58768838E12, 11022.5], [1.5876882E12, 6514.35], [1.58768868E12, 4531.8], [1.5876888E12, 3957.0], [1.58768832E12, 7094.099999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876888E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.5, "minX": 1.0, "maxY": 7505.0, "series": [{"data": [[2.0, 167.0], [3.0, 29.0], [4.0, 151.0], [5.0, 96.0], [7.0, 43.5], [8.0, 1640.5], [9.0, 7505.0], [10.0, 1291.5], [11.0, 1488.0], [12.0, 60.5], [13.0, 961.0], [14.0, 1084.5], [15.0, 1070.0], [16.0, 68.5], [17.0, 5657.0], [19.0, 2644.0], [20.0, 2828.5], [21.0, 2972.5], [22.0, 4051.5], [23.0, 2149.0], [24.0, 3923.5], [25.0, 3817.0], [26.0, 3642.5], [27.0, 3919.0], [28.0, 3201.5], [29.0, 3718.0], [30.0, 3268.0], [31.0, 3652.0], [33.0, 3510.0], [32.0, 3850.0], [35.0, 3155.0], [34.0, 3650.0], [37.0, 1754.0], [36.0, 3378.0], [38.0, 3390.0], [39.0, 3022.0], [40.0, 3481.5], [41.0, 3506.0], [42.0, 3431.5], [43.0, 3353.0], [44.0, 2766.0], [45.0, 2815.0], [46.0, 2979.0], [47.0, 986.0], [48.0, 151.0], [49.0, 1664.5], [50.0, 419.0], [51.0, 3152.0], [53.0, 4648.0], [52.0, 4022.0], [54.0, 3819.0], [57.0, 1945.0], [56.0, 1952.0], [58.0, 3544.0], [59.0, 2845.0], [61.0, 2897.0], [60.0, 2289.0], [62.0, 2393.5], [63.0, 1977.0], [64.0, 575.0], [66.0, 2674.5], [65.0, 1927.0], [68.0, 2497.0], [74.0, 210.0], [72.0, 3969.0], [83.0, 4130.0], [92.0, 3844.0], [103.0, 1554.0], [100.0, 3899.0], [110.0, 3823.0], [157.0, 4918.5], [1.0, 41.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[9.0, 1.5], [20.0, 3.0], [21.0, 2.0], [24.0, 2.5], [25.0, 2.0], [26.0, 2.0], [29.0, 2.0], [30.0, 2.5], [31.0, 2.0], [33.0, 2.0], [32.0, 2.0], [35.0, 2.5], [37.0, 2.0], [36.0, 2.0], [39.0, 2.0], [38.0, 2.0], [41.0, 2.0], [40.0, 2.5], [42.0, 2.0], [43.0, 2.0], [44.0, 5.0], [45.0, 2.0], [47.0, 2.0], [46.0, 2.0], [49.0, 2.0], [51.0, 2.0], [50.0, 2.0], [53.0, 6.0], [52.0, 2.0], [54.0, 2.0], [57.0, 2.0], [56.0, 2.0], [58.0, 2.0], [59.0, 3.0], [61.0, 2.0], [60.0, 2.0], [62.0, 2.0], [63.0, 2.0], [66.0, 1301.5], [64.0, 2.0], [65.0, 2.0], [67.0, 2.0], [68.0, 2.0], [69.0, 2.0], [71.0, 2.0], [75.0, 2.0], [74.0, 2.0], [72.0, 2.0], [73.0, 2.0], [77.0, 2.0], [79.0, 2.0], [78.0, 2.0], [80.0, 2.0], [81.0, 2.0], [83.0, 2.0], [82.0, 2.0], [87.0, 2.0], [86.0, 2.0], [84.0, 2.0], [85.0, 2.0], [91.0, 2.0], [88.0, 2.0], [89.0, 2.0], [90.0, 2.0], [94.0, 2.0], [92.0, 2.0], [95.0, 2.0], [93.0, 2.0], [98.0, 2.0], [99.0, 2.0], [96.0, 2.0], [97.0, 2.0], [103.0, 2.0], [100.0, 2.0], [102.0, 2.0], [101.0, 2.0], [104.0, 2.0], [107.0, 2.0], [105.0, 2.0], [106.0, 2.0], [111.0, 2.0], [109.0, 2.0], [108.0, 2.0], [110.0, 2.0], [115.0, 2.0], [114.0, 2.0], [112.0, 2.0], [113.0, 2.0], [117.0, 2.0], [118.0, 2.0], [119.0, 2.0], [116.0, 2.0], [121.0, 2.0], [122.0, 2.0], [123.0, 2.0], [124.0, 2.0], [125.0, 2.0], [128.0, 2.0], [130.0, 2.0], [138.0, 2.0], [141.0, 2.0], [150.0, 2.0], [157.0, 2772.0], [162.0, 1916.0], [165.0, 1288.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 165.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1.5, "minX": 1.0, "maxY": 7505.0, "series": [{"data": [[2.0, 166.0], [3.0, 29.0], [4.0, 151.0], [5.0, 65.0], [7.0, 43.0], [8.0, 1608.5], [9.0, 7505.0], [10.0, 1262.0], [11.0, 1473.5], [12.0, 60.0], [13.0, 960.0], [14.0, 1081.5], [15.0, 1070.0], [16.0, 68.5], [17.0, 5657.0], [19.0, 2644.0], [20.0, 2828.5], [21.0, 2972.5], [22.0, 4051.5], [23.0, 2149.0], [24.0, 3923.5], [25.0, 3817.0], [26.0, 3642.5], [27.0, 3919.0], [28.0, 3201.5], [29.0, 3718.0], [30.0, 3268.0], [31.0, 3652.0], [33.0, 3508.5], [32.0, 3850.0], [35.0, 3155.0], [34.0, 3650.0], [37.0, 1753.0], [36.0, 3378.0], [38.0, 3390.0], [39.0, 3022.0], [40.0, 3481.5], [41.0, 3506.0], [42.0, 3431.5], [43.0, 3347.0], [44.0, 2765.5], [45.0, 2815.0], [46.0, 2979.0], [47.0, 985.0], [48.0, 151.0], [49.0, 1658.0], [50.0, 418.0], [51.0, 3152.0], [53.0, 4647.0], [52.0, 4022.0], [54.0, 3819.0], [57.0, 1945.0], [56.0, 1952.0], [58.0, 3544.0], [59.0, 2845.0], [61.0, 2897.0], [60.0, 2288.5], [62.0, 2393.5], [63.0, 1974.0], [64.0, 575.0], [66.0, 2674.5], [65.0, 1927.0], [68.0, 2496.0], [74.0, 210.0], [72.0, 3969.0], [83.0, 4130.0], [92.0, 3844.0], [103.0, 1553.0], [100.0, 3899.0], [110.0, 3823.0], [157.0, 4917.5], [1.0, 41.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[9.0, 1.5], [20.0, 3.0], [21.0, 2.0], [24.0, 2.5], [25.0, 2.0], [26.0, 2.0], [29.0, 2.0], [30.0, 2.5], [31.0, 2.0], [33.0, 2.0], [32.0, 2.0], [35.0, 2.5], [37.0, 2.0], [36.0, 2.0], [39.0, 2.0], [38.0, 2.0], [41.0, 2.0], [40.0, 2.5], [42.0, 2.0], [43.0, 2.0], [44.0, 5.0], [45.0, 2.0], [47.0, 2.0], [46.0, 2.0], [49.0, 2.0], [51.0, 2.0], [50.0, 2.0], [53.0, 6.0], [52.0, 2.0], [54.0, 2.0], [57.0, 2.0], [56.0, 2.0], [58.0, 2.0], [59.0, 3.0], [61.0, 2.0], [60.0, 2.0], [62.0, 2.0], [63.0, 2.0], [66.0, 1301.5], [64.0, 2.0], [65.0, 2.0], [67.0, 2.0], [68.0, 2.0], [69.0, 2.0], [71.0, 2.0], [75.0, 2.0], [74.0, 2.0], [72.0, 2.0], [73.0, 2.0], [77.0, 2.0], [79.0, 2.0], [78.0, 2.0], [80.0, 2.0], [81.0, 2.0], [83.0, 2.0], [82.0, 2.0], [87.0, 2.0], [86.0, 2.0], [84.0, 2.0], [85.0, 2.0], [91.0, 2.0], [88.0, 2.0], [89.0, 2.0], [90.0, 2.0], [94.0, 2.0], [92.0, 2.0], [95.0, 2.0], [93.0, 2.0], [98.0, 2.0], [99.0, 2.0], [96.0, 2.0], [97.0, 2.0], [103.0, 2.0], [100.0, 2.0], [102.0, 2.0], [101.0, 2.0], [104.0, 2.0], [107.0, 2.0], [105.0, 2.0], [106.0, 2.0], [111.0, 2.0], [109.0, 2.0], [108.0, 2.0], [110.0, 2.0], [115.0, 2.0], [114.0, 2.0], [112.0, 2.0], [113.0, 2.0], [117.0, 2.0], [118.0, 2.0], [119.0, 2.0], [116.0, 2.0], [121.0, 2.0], [122.0, 2.0], [123.0, 2.0], [124.0, 2.0], [125.0, 2.0], [128.0, 2.0], [130.0, 2.0], [138.0, 2.0], [141.0, 2.0], [150.0, 2.0], [157.0, 2772.0], [162.0, 1916.0], [165.0, 1288.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 165.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6.533333333333333, "minX": 1.58768814E12, "maxY": 101.11666666666666, "series": [{"data": [[1.58768814E12, 6.533333333333333], [1.58768862E12, 47.85], [1.58768844E12, 37.53333333333333], [1.58768826E12, 39.3], [1.58768874E12, 100.31666666666666], [1.58768856E12, 49.5], [1.58768838E12, 44.0], [1.5876882E12, 36.31666666666667], [1.58768868E12, 74.71666666666667], [1.5876885E12, 101.11666666666666], [1.5876888E12, 32.86666666666667], [1.58768832E12, 66.45]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876888E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.58768814E12, "maxY": 101.11666666666666, "series": [{"data": [[1.58768814E12, 6.516666666666667], [1.58768862E12, 28.433333333333334], [1.58768844E12, 29.233333333333334], [1.58768826E12, 31.583333333333332], [1.58768856E12, 23.6], [1.58768838E12, 31.733333333333334], [1.5876882E12, 33.86666666666667], [1.58768868E12, 12.183333333333334], [1.5876888E12, 17.65], [1.58768832E12, 17.75]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58768826E12, 0.23333333333333334]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.58768862E12, 20.45], [1.58768844E12, 10.233333333333333], [1.58768826E12, 9.833333333333334], [1.58768874E12, 100.31666666666666], [1.58768856E12, 23.533333333333335], [1.58768838E12, 11.783333333333333], [1.5876882E12, 0.11666666666666667], [1.58768868E12, 63.86666666666667], [1.5876885E12, 101.11666666666666], [1.5876888E12, 15.216666666666667], [1.58768832E12, 47.25]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5876888E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.58768814E12, "maxY": 50.68333333333333, "series": [{"data": [[1.58768814E12, 1.0666666666666667], [1.5876882E12, 2.1]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58768814E12, 2.5166666666666666], [1.58768862E12, 14.283333333333333], [1.58768844E12, 14.55], [1.58768826E12, 15.65], [1.58768856E12, 11.433333333333334], [1.58768838E12, 15.333333333333334], [1.5876882E12, 15.35], [1.58768868E12, 6.033333333333333], [1.5876888E12, 9.15], [1.58768832E12, 8.966666666666667]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58768862E12, 10.45], [1.58768844E12, 5.266666666666667], [1.58768826E12, 5.166666666666667], [1.58768874E12, 50.36666666666667], [1.58768856E12, 11.816666666666666], [1.58768838E12, 6.316666666666666], [1.5876882E12, 0.08333333333333333], [1.58768868E12, 31.95], [1.5876885E12, 50.68333333333333], [1.5876888E12, 7.683333333333334], [1.58768832E12, 23.616666666666667]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.58768814E12, 2.933333333333333], [1.58768862E12, 14.15], [1.58768844E12, 14.683333333333334], [1.58768826E12, 15.933333333333334], [1.58768856E12, 12.166666666666666], [1.58768838E12, 16.4], [1.5876882E12, 16.416666666666668], [1.58768868E12, 6.15], [1.5876888E12, 8.5], [1.58768832E12, 8.783333333333333]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58768862E12, 10.0], [1.58768844E12, 4.966666666666667], [1.58768826E12, 4.9], [1.58768874E12, 49.95], [1.58768856E12, 11.716666666666667], [1.58768838E12, 5.466666666666667], [1.5876882E12, 0.03333333333333333], [1.58768868E12, 31.916666666666668], [1.5876885E12, 50.43333333333333], [1.5876888E12, 7.533333333333333], [1.58768832E12, 23.633333333333333]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876888E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.58768814E12, "maxY": 101.11666666666666, "series": [{"data": [[1.58768814E12, 6.516666666666667], [1.58768862E12, 28.433333333333334], [1.58768844E12, 29.233333333333334], [1.58768826E12, 31.583333333333332], [1.58768856E12, 23.6], [1.58768838E12, 31.733333333333334], [1.5876882E12, 33.86666666666667], [1.58768868E12, 12.183333333333334], [1.5876888E12, 17.65], [1.58768832E12, 17.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58768862E12, 20.45], [1.58768844E12, 10.233333333333333], [1.58768826E12, 10.066666666666666], [1.58768874E12, 100.31666666666666], [1.58768856E12, 23.533333333333335], [1.58768838E12, 11.783333333333333], [1.5876882E12, 0.11666666666666667], [1.58768868E12, 63.86666666666667], [1.5876885E12, 101.11666666666666], [1.5876888E12, 15.216666666666667], [1.58768832E12, 47.25]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5876888E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

