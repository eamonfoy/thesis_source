/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 10086.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 2.0], [14.6, 2.0], [14.7, 2.0], [14.8, 2.0], [14.9, 2.0], [15.0, 2.0], [15.1, 2.0], [15.2, 2.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 2.0], [17.7, 2.0], [17.8, 2.0], [17.9, 2.0], [18.0, 2.0], [18.1, 2.0], [18.2, 2.0], [18.3, 2.0], [18.4, 2.0], [18.5, 2.0], [18.6, 2.0], [18.7, 2.0], [18.8, 2.0], [18.9, 2.0], [19.0, 2.0], [19.1, 2.0], [19.2, 2.0], [19.3, 2.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 2.0], [20.0, 2.0], [20.1, 2.0], [20.2, 2.0], [20.3, 2.0], [20.4, 2.0], [20.5, 2.0], [20.6, 2.0], [20.7, 2.0], [20.8, 2.0], [20.9, 2.0], [21.0, 2.0], [21.1, 2.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 2.0], [21.6, 2.0], [21.7, 2.0], [21.8, 2.0], [21.9, 2.0], [22.0, 2.0], [22.1, 2.0], [22.2, 2.0], [22.3, 2.0], [22.4, 2.0], [22.5, 2.0], [22.6, 2.0], [22.7, 2.0], [22.8, 2.0], [22.9, 2.0], [23.0, 2.0], [23.1, 2.0], [23.2, 2.0], [23.3, 2.0], [23.4, 2.0], [23.5, 2.0], [23.6, 2.0], [23.7, 2.0], [23.8, 2.0], [23.9, 2.0], [24.0, 2.0], [24.1, 2.0], [24.2, 2.0], [24.3, 2.0], [24.4, 2.0], [24.5, 2.0], [24.6, 2.0], [24.7, 2.0], [24.8, 2.0], [24.9, 2.0], [25.0, 2.0], [25.1, 2.0], [25.2, 2.0], [25.3, 2.0], [25.4, 2.0], [25.5, 2.0], [25.6, 2.0], [25.7, 2.0], [25.8, 2.0], [25.9, 2.0], [26.0, 2.0], [26.1, 2.0], [26.2, 2.0], [26.3, 2.0], [26.4, 2.0], [26.5, 2.0], [26.6, 2.0], [26.7, 2.0], [26.8, 2.0], [26.9, 2.0], [27.0, 2.0], [27.1, 2.0], [27.2, 2.0], [27.3, 2.0], [27.4, 2.0], [27.5, 2.0], [27.6, 2.0], [27.7, 2.0], [27.8, 2.0], [27.9, 2.0], [28.0, 2.0], [28.1, 2.0], [28.2, 2.0], [28.3, 2.0], [28.4, 2.0], [28.5, 2.0], [28.6, 2.0], [28.7, 2.0], [28.8, 2.0], [28.9, 2.0], [29.0, 2.0], [29.1, 2.0], [29.2, 2.0], [29.3, 2.0], [29.4, 2.0], [29.5, 2.0], [29.6, 2.0], [29.7, 2.0], [29.8, 2.0], [29.9, 2.0], [30.0, 2.0], [30.1, 2.0], [30.2, 2.0], [30.3, 2.0], [30.4, 2.0], [30.5, 2.0], [30.6, 2.0], [30.7, 2.0], [30.8, 2.0], [30.9, 2.0], [31.0, 2.0], [31.1, 2.0], [31.2, 2.0], [31.3, 2.0], [31.4, 2.0], [31.5, 2.0], [31.6, 2.0], [31.7, 2.0], [31.8, 2.0], [31.9, 2.0], [32.0, 2.0], [32.1, 2.0], [32.2, 2.0], [32.3, 2.0], [32.4, 2.0], [32.5, 2.0], [32.6, 2.0], [32.7, 2.0], [32.8, 2.0], [32.9, 2.0], [33.0, 2.0], [33.1, 2.0], [33.2, 2.0], [33.3, 2.0], [33.4, 2.0], [33.5, 2.0], [33.6, 2.0], [33.7, 2.0], [33.8, 2.0], [33.9, 2.0], [34.0, 2.0], [34.1, 2.0], [34.2, 2.0], [34.3, 2.0], [34.4, 2.0], [34.5, 2.0], [34.6, 2.0], [34.7, 2.0], [34.8, 2.0], [34.9, 2.0], [35.0, 2.0], [35.1, 2.0], [35.2, 2.0], [35.3, 2.0], [35.4, 2.0], [35.5, 2.0], [35.6, 2.0], [35.7, 2.0], [35.8, 2.0], [35.9, 2.0], [36.0, 2.0], [36.1, 2.0], [36.2, 2.0], [36.3, 2.0], [36.4, 2.0], [36.5, 2.0], [36.6, 2.0], [36.7, 2.0], [36.8, 2.0], [36.9, 2.0], [37.0, 2.0], [37.1, 2.0], [37.2, 2.0], [37.3, 2.0], [37.4, 2.0], [37.5, 2.0], [37.6, 2.0], [37.7, 2.0], [37.8, 2.0], [37.9, 2.0], [38.0, 2.0], [38.1, 2.0], [38.2, 2.0], [38.3, 2.0], [38.4, 2.0], [38.5, 2.0], [38.6, 2.0], [38.7, 2.0], [38.8, 2.0], [38.9, 2.0], [39.0, 2.0], [39.1, 3.0], [39.2, 3.0], [39.3, 3.0], [39.4, 3.0], [39.5, 3.0], [39.6, 3.0], [39.7, 3.0], [39.8, 3.0], [39.9, 3.0], [40.0, 3.0], [40.1, 3.0], [40.2, 3.0], [40.3, 3.0], [40.4, 3.0], [40.5, 3.0], [40.6, 3.0], [40.7, 3.0], [40.8, 3.0], [40.9, 3.0], [41.0, 3.0], [41.1, 3.0], [41.2, 3.0], [41.3, 3.0], [41.4, 3.0], [41.5, 3.0], [41.6, 3.0], [41.7, 3.0], [41.8, 3.0], [41.9, 3.0], [42.0, 3.0], [42.1, 3.0], [42.2, 3.0], [42.3, 3.0], [42.4, 3.0], [42.5, 3.0], [42.6, 4.0], [42.7, 4.0], [42.8, 4.0], [42.9, 4.0], [43.0, 5.0], [43.1, 6.0], [43.2, 8.0], [43.3, 16.0], [43.4, 20.0], [43.5, 21.0], [43.6, 22.0], [43.7, 24.0], [43.8, 25.0], [43.9, 26.0], [44.0, 27.0], [44.1, 28.0], [44.2, 30.0], [44.3, 31.0], [44.4, 32.0], [44.5, 35.0], [44.6, 37.0], [44.7, 40.0], [44.8, 45.0], [44.9, 54.0], [45.0, 85.0], [45.1, 133.0], [45.2, 173.0], [45.3, 211.0], [45.4, 233.0], [45.5, 258.0], [45.6, 284.0], [45.7, 296.0], [45.8, 317.0], [45.9, 329.0], [46.0, 346.0], [46.1, 363.0], [46.2, 379.0], [46.3, 390.0], [46.4, 408.0], [46.5, 419.0], [46.6, 430.0], [46.7, 439.0], [46.8, 451.0], [46.9, 461.0], [47.0, 468.0], [47.1, 480.0], [47.2, 486.0], [47.3, 502.0], [47.4, 510.0], [47.5, 524.0], [47.6, 534.0], [47.7, 542.0], [47.8, 550.0], [47.9, 561.0], [48.0, 567.0], [48.1, 577.0], [48.2, 587.0], [48.3, 599.0], [48.4, 610.0], [48.5, 622.0], [48.6, 633.0], [48.7, 645.0], [48.8, 653.0], [48.9, 662.0], [49.0, 672.0], [49.1, 685.0], [49.2, 694.0], [49.3, 705.0], [49.4, 713.0], [49.5, 718.0], [49.6, 728.0], [49.7, 740.0], [49.8, 748.0], [49.9, 755.0], [50.0, 764.0], [50.1, 776.0], [50.2, 789.0], [50.3, 800.0], [50.4, 812.0], [50.5, 827.0], [50.6, 837.0], [50.7, 846.0], [50.8, 856.0], [50.9, 861.0], [51.0, 868.0], [51.1, 878.0], [51.2, 884.0], [51.3, 893.0], [51.4, 900.0], [51.5, 909.0], [51.6, 921.0], [51.7, 931.0], [51.8, 938.0], [51.9, 946.0], [52.0, 954.0], [52.1, 964.0], [52.2, 975.0], [52.3, 984.0], [52.4, 994.0], [52.5, 1002.0], [52.6, 1012.0], [52.7, 1019.0], [52.8, 1026.0], [52.9, 1034.0], [53.0, 1040.0], [53.1, 1054.0], [53.2, 1060.0], [53.3, 1069.0], [53.4, 1079.0], [53.5, 1086.0], [53.6, 1093.0], [53.7, 1098.0], [53.8, 1104.0], [53.9, 1114.0], [54.0, 1124.0], [54.1, 1133.0], [54.2, 1140.0], [54.3, 1148.0], [54.4, 1154.0], [54.5, 1159.0], [54.6, 1164.0], [54.7, 1169.0], [54.8, 1179.0], [54.9, 1189.0], [55.0, 1197.0], [55.1, 1205.0], [55.2, 1208.0], [55.3, 1214.0], [55.4, 1221.0], [55.5, 1231.0], [55.6, 1236.0], [55.7, 1245.0], [55.8, 1252.0], [55.9, 1258.0], [56.0, 1264.0], [56.1, 1272.0], [56.2, 1277.0], [56.3, 1283.0], [56.4, 1288.0], [56.5, 1293.0], [56.6, 1300.0], [56.7, 1305.0], [56.8, 1311.0], [56.9, 1316.0], [57.0, 1323.0], [57.1, 1332.0], [57.2, 1339.0], [57.3, 1344.0], [57.4, 1350.0], [57.5, 1356.0], [57.6, 1361.0], [57.7, 1368.0], [57.8, 1372.0], [57.9, 1380.0], [58.0, 1384.0], [58.1, 1391.0], [58.2, 1397.0], [58.3, 1403.0], [58.4, 1409.0], [58.5, 1415.0], [58.6, 1425.0], [58.7, 1430.0], [58.8, 1438.0], [58.9, 1444.0], [59.0, 1449.0], [59.1, 1457.0], [59.2, 1463.0], [59.3, 1469.0], [59.4, 1477.0], [59.5, 1481.0], [59.6, 1486.0], [59.7, 1491.0], [59.8, 1494.0], [59.9, 1500.0], [60.0, 1505.0], [60.1, 1512.0], [60.2, 1517.0], [60.3, 1521.0], [60.4, 1526.0], [60.5, 1533.0], [60.6, 1538.0], [60.7, 1546.0], [60.8, 1550.0], [60.9, 1555.0], [61.0, 1561.0], [61.1, 1565.0], [61.2, 1570.0], [61.3, 1576.0], [61.4, 1585.0], [61.5, 1590.0], [61.6, 1594.0], [61.7, 1602.0], [61.8, 1608.0], [61.9, 1615.0], [62.0, 1621.0], [62.1, 1626.0], [62.2, 1632.0], [62.3, 1637.0], [62.4, 1643.0], [62.5, 1648.0], [62.6, 1653.0], [62.7, 1658.0], [62.8, 1663.0], [62.9, 1669.0], [63.0, 1675.0], [63.1, 1683.0], [63.2, 1688.0], [63.3, 1697.0], [63.4, 1701.0], [63.5, 1707.0], [63.6, 1716.0], [63.7, 1722.0], [63.8, 1727.0], [63.9, 1734.0], [64.0, 1742.0], [64.1, 1746.0], [64.2, 1752.0], [64.3, 1757.0], [64.4, 1763.0], [64.5, 1771.0], [64.6, 1778.0], [64.7, 1783.0], [64.8, 1788.0], [64.9, 1794.0], [65.0, 1800.0], [65.1, 1809.0], [65.2, 1814.0], [65.3, 1818.0], [65.4, 1826.0], [65.5, 1834.0], [65.6, 1838.0], [65.7, 1848.0], [65.8, 1858.0], [65.9, 1867.0], [66.0, 1873.0], [66.1, 1878.0], [66.2, 1882.0], [66.3, 1889.0], [66.4, 1898.0], [66.5, 1904.0], [66.6, 1915.0], [66.7, 1921.0], [66.8, 1927.0], [66.9, 1933.0], [67.0, 1940.0], [67.1, 1947.0], [67.2, 1954.0], [67.3, 1960.0], [67.4, 1966.0], [67.5, 1969.0], [67.6, 1974.0], [67.7, 1978.0], [67.8, 1983.0], [67.9, 1992.0], [68.0, 1998.0], [68.1, 2002.0], [68.2, 2007.0], [68.3, 2011.0], [68.4, 2016.0], [68.5, 2023.0], [68.6, 2028.0], [68.7, 2034.0], [68.8, 2040.0], [68.9, 2045.0], [69.0, 2048.0], [69.1, 2054.0], [69.2, 2057.0], [69.3, 2063.0], [69.4, 2073.0], [69.5, 2079.0], [69.6, 2084.0], [69.7, 2095.0], [69.8, 2102.0], [69.9, 2109.0], [70.0, 2114.0], [70.1, 2122.0], [70.2, 2129.0], [70.3, 2136.0], [70.4, 2143.0], [70.5, 2149.0], [70.6, 2155.0], [70.7, 2159.0], [70.8, 2170.0], [70.9, 2176.0], [71.0, 2185.0], [71.1, 2190.0], [71.2, 2198.0], [71.3, 2207.0], [71.4, 2215.0], [71.5, 2221.0], [71.6, 2228.0], [71.7, 2234.0], [71.8, 2241.0], [71.9, 2245.0], [72.0, 2253.0], [72.1, 2259.0], [72.2, 2266.0], [72.3, 2273.0], [72.4, 2281.0], [72.5, 2286.0], [72.6, 2290.0], [72.7, 2294.0], [72.8, 2300.0], [72.9, 2306.0], [73.0, 2313.0], [73.1, 2317.0], [73.2, 2323.0], [73.3, 2328.0], [73.4, 2334.0], [73.5, 2339.0], [73.6, 2346.0], [73.7, 2353.0], [73.8, 2361.0], [73.9, 2366.0], [74.0, 2374.0], [74.1, 2381.0], [74.2, 2387.0], [74.3, 2394.0], [74.4, 2401.0], [74.5, 2406.0], [74.6, 2416.0], [74.7, 2422.0], [74.8, 2429.0], [74.9, 2438.0], [75.0, 2443.0], [75.1, 2450.0], [75.2, 2458.0], [75.3, 2462.0], [75.4, 2472.0], [75.5, 2477.0], [75.6, 2482.0], [75.7, 2490.0], [75.8, 2495.0], [75.9, 2500.0], [76.0, 2505.0], [76.1, 2509.0], [76.2, 2516.0], [76.3, 2525.0], [76.4, 2530.0], [76.5, 2536.0], [76.6, 2545.0], [76.7, 2554.0], [76.8, 2563.0], [76.9, 2570.0], [77.0, 2577.0], [77.1, 2583.0], [77.2, 2588.0], [77.3, 2595.0], [77.4, 2604.0], [77.5, 2610.0], [77.6, 2617.0], [77.7, 2622.0], [77.8, 2630.0], [77.9, 2638.0], [78.0, 2646.0], [78.1, 2653.0], [78.2, 2660.0], [78.3, 2666.0], [78.4, 2675.0], [78.5, 2683.0], [78.6, 2693.0], [78.7, 2700.0], [78.8, 2709.0], [78.9, 2720.0], [79.0, 2733.0], [79.1, 2738.0], [79.2, 2749.0], [79.3, 2755.0], [79.4, 2764.0], [79.5, 2775.0], [79.6, 2784.0], [79.7, 2791.0], [79.8, 2802.0], [79.9, 2808.0], [80.0, 2816.0], [80.1, 2825.0], [80.2, 2837.0], [80.3, 2844.0], [80.4, 2853.0], [80.5, 2863.0], [80.6, 2869.0], [80.7, 2878.0], [80.8, 2890.0], [80.9, 2903.0], [81.0, 2910.0], [81.1, 2919.0], [81.2, 2929.0], [81.3, 2934.0], [81.4, 2941.0], [81.5, 2952.0], [81.6, 2961.0], [81.7, 2972.0], [81.8, 2978.0], [81.9, 2986.0], [82.0, 2991.0], [82.1, 2997.0], [82.2, 3006.0], [82.3, 3012.0], [82.4, 3021.0], [82.5, 3030.0], [82.6, 3038.0], [82.7, 3048.0], [82.8, 3058.0], [82.9, 3067.0], [83.0, 3076.0], [83.1, 3083.0], [83.2, 3093.0], [83.3, 3099.0], [83.4, 3104.0], [83.5, 3112.0], [83.6, 3122.0], [83.7, 3135.0], [83.8, 3142.0], [83.9, 3154.0], [84.0, 3164.0], [84.1, 3173.0], [84.2, 3181.0], [84.3, 3188.0], [84.4, 3198.0], [84.5, 3207.0], [84.6, 3215.0], [84.7, 3224.0], [84.8, 3235.0], [84.9, 3245.0], [85.0, 3256.0], [85.1, 3265.0], [85.2, 3273.0], [85.3, 3277.0], [85.4, 3287.0], [85.5, 3294.0], [85.6, 3304.0], [85.7, 3314.0], [85.8, 3321.0], [85.9, 3332.0], [86.0, 3341.0], [86.1, 3354.0], [86.2, 3367.0], [86.3, 3375.0], [86.4, 3385.0], [86.5, 3393.0], [86.6, 3402.0], [86.7, 3413.0], [86.8, 3419.0], [86.9, 3426.0], [87.0, 3441.0], [87.1, 3453.0], [87.2, 3461.0], [87.3, 3475.0], [87.4, 3491.0], [87.5, 3504.0], [87.6, 3519.0], [87.7, 3528.0], [87.8, 3537.0], [87.9, 3548.0], [88.0, 3560.0], [88.1, 3571.0], [88.2, 3582.0], [88.3, 3598.0], [88.4, 3613.0], [88.5, 3623.0], [88.6, 3633.0], [88.7, 3644.0], [88.8, 3655.0], [88.9, 3667.0], [89.0, 3678.0], [89.1, 3690.0], [89.2, 3704.0], [89.3, 3711.0], [89.4, 3726.0], [89.5, 3739.0], [89.6, 3752.0], [89.7, 3764.0], [89.8, 3776.0], [89.9, 3784.0], [90.0, 3798.0], [90.1, 3814.0], [90.2, 3824.0], [90.3, 3836.0], [90.4, 3854.0], [90.5, 3871.0], [90.6, 3880.0], [90.7, 3896.0], [90.8, 3911.0], [90.9, 3929.0], [91.0, 3945.0], [91.1, 3964.0], [91.2, 3976.0], [91.3, 3991.0], [91.4, 4007.0], [91.5, 4019.0], [91.6, 4037.0], [91.7, 4054.0], [91.8, 4070.0], [91.9, 4090.0], [92.0, 4110.0], [92.1, 4129.0], [92.2, 4147.0], [92.3, 4164.0], [92.4, 4187.0], [92.5, 4213.0], [92.6, 4231.0], [92.7, 4245.0], [92.8, 4267.0], [92.9, 4284.0], [93.0, 4305.0], [93.1, 4322.0], [93.2, 4340.0], [93.3, 4357.0], [93.4, 4385.0], [93.5, 4400.0], [93.6, 4418.0], [93.7, 4440.0], [93.8, 4458.0], [93.9, 4476.0], [94.0, 4499.0], [94.1, 4521.0], [94.2, 4548.0], [94.3, 4562.0], [94.4, 4586.0], [94.5, 4607.0], [94.6, 4627.0], [94.7, 4642.0], [94.8, 4675.0], [94.9, 4694.0], [95.0, 4710.0], [95.1, 4734.0], [95.2, 4749.0], [95.3, 4769.0], [95.4, 4780.0], [95.5, 4794.0], [95.6, 4820.0], [95.7, 4840.0], [95.8, 4859.0], [95.9, 4881.0], [96.0, 4891.0], [96.1, 4907.0], [96.2, 4943.0], [96.3, 4966.0], [96.4, 4982.0], [96.5, 5011.0], [96.6, 5038.0], [96.7, 5060.0], [96.8, 5088.0], [96.9, 5121.0], [97.0, 5160.0], [97.1, 5196.0], [97.2, 5236.0], [97.3, 5269.0], [97.4, 5319.0], [97.5, 5358.0], [97.6, 5383.0], [97.7, 5418.0], [97.8, 5460.0], [97.9, 5502.0], [98.0, 5548.0], [98.1, 5588.0], [98.2, 5619.0], [98.3, 5673.0], [98.4, 5709.0], [98.5, 5769.0], [98.6, 5826.0], [98.7, 5881.0], [98.8, 5927.0], [98.9, 5989.0], [99.0, 6058.0], [99.1, 6222.0], [99.2, 6294.0], [99.3, 6455.0], [99.4, 6635.0], [99.5, 6820.0], [99.6, 7171.0], [99.7, 7466.0], [99.8, 7776.0], [99.9, 8354.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 143.0], [0.1, 143.0], [0.2, 143.0], [0.3, 143.0], [0.4, 143.0], [0.5, 143.0], [0.6, 143.0], [0.7, 144.0], [0.8, 144.0], [0.9, 144.0], [1.0, 144.0], [1.1, 144.0], [1.2, 144.0], [1.3, 145.0], [1.4, 145.0], [1.5, 145.0], [1.6, 145.0], [1.7, 145.0], [1.8, 145.0], [1.9, 145.0], [2.0, 145.0], [2.1, 145.0], [2.2, 145.0], [2.3, 145.0], [2.4, 145.0], [2.5, 145.0], [2.6, 145.0], [2.7, 145.0], [2.8, 145.0], [2.9, 145.0], [3.0, 145.0], [3.1, 145.0], [3.2, 145.0], [3.3, 146.0], [3.4, 146.0], [3.5, 146.0], [3.6, 146.0], [3.7, 146.0], [3.8, 146.0], [3.9, 146.0], [4.0, 146.0], [4.1, 146.0], [4.2, 146.0], [4.3, 146.0], [4.4, 146.0], [4.5, 146.0], [4.6, 146.0], [4.7, 146.0], [4.8, 146.0], [4.9, 146.0], [5.0, 146.0], [5.1, 146.0], [5.2, 146.0], [5.3, 146.0], [5.4, 146.0], [5.5, 146.0], [5.6, 146.0], [5.7, 146.0], [5.8, 146.0], [5.9, 146.0], [6.0, 146.0], [6.1, 146.0], [6.2, 146.0], [6.3, 146.0], [6.4, 146.0], [6.5, 146.0], [6.6, 146.0], [6.7, 146.0], [6.8, 146.0], [6.9, 146.0], [7.0, 146.0], [7.1, 146.0], [7.2, 146.0], [7.3, 146.0], [7.4, 146.0], [7.5, 146.0], [7.6, 146.0], [7.7, 146.0], [7.8, 146.0], [7.9, 146.0], [8.0, 146.0], [8.1, 146.0], [8.2, 146.0], [8.3, 146.0], [8.4, 147.0], [8.5, 147.0], [8.6, 147.0], [8.7, 147.0], [8.8, 147.0], [8.9, 147.0], [9.0, 147.0], [9.1, 147.0], [9.2, 147.0], [9.3, 147.0], [9.4, 147.0], [9.5, 147.0], [9.6, 147.0], [9.7, 147.0], [9.8, 147.0], [9.9, 147.0], [10.0, 147.0], [10.1, 147.0], [10.2, 147.0], [10.3, 147.0], [10.4, 147.0], [10.5, 147.0], [10.6, 147.0], [10.7, 147.0], [10.8, 147.0], [10.9, 147.0], [11.0, 147.0], [11.1, 147.0], [11.2, 147.0], [11.3, 147.0], [11.4, 147.0], [11.5, 147.0], [11.6, 147.0], [11.7, 147.0], [11.8, 147.0], [11.9, 147.0], [12.0, 147.0], [12.1, 147.0], [12.2, 147.0], [12.3, 147.0], [12.4, 147.0], [12.5, 147.0], [12.6, 147.0], [12.7, 147.0], [12.8, 147.0], [12.9, 147.0], [13.0, 147.0], [13.1, 147.0], [13.2, 147.0], [13.3, 147.0], [13.4, 147.0], [13.5, 147.0], [13.6, 147.0], [13.7, 147.0], [13.8, 147.0], [13.9, 147.0], [14.0, 147.0], [14.1, 147.0], [14.2, 148.0], [14.3, 148.0], [14.4, 148.0], [14.5, 148.0], [14.6, 148.0], [14.7, 148.0], [14.8, 148.0], [14.9, 148.0], [15.0, 148.0], [15.1, 148.0], [15.2, 148.0], [15.3, 148.0], [15.4, 148.0], [15.5, 148.0], [15.6, 148.0], [15.7, 148.0], [15.8, 148.0], [15.9, 148.0], [16.0, 148.0], [16.1, 148.0], [16.2, 148.0], [16.3, 148.0], [16.4, 148.0], [16.5, 148.0], [16.6, 148.0], [16.7, 148.0], [16.8, 148.0], [16.9, 148.0], [17.0, 148.0], [17.1, 148.0], [17.2, 148.0], [17.3, 148.0], [17.4, 148.0], [17.5, 148.0], [17.6, 148.0], [17.7, 148.0], [17.8, 148.0], [17.9, 148.0], [18.0, 148.0], [18.1, 148.0], [18.2, 148.0], [18.3, 148.0], [18.4, 148.0], [18.5, 148.0], [18.6, 148.0], [18.7, 148.0], [18.8, 148.0], [18.9, 148.0], [19.0, 148.0], [19.1, 148.0], [19.2, 148.0], [19.3, 148.0], [19.4, 148.0], [19.5, 148.0], [19.6, 148.0], [19.7, 148.0], [19.8, 148.0], [19.9, 148.0], [20.0, 148.0], [20.1, 148.0], [20.2, 148.0], [20.3, 148.0], [20.4, 148.0], [20.5, 148.0], [20.6, 148.0], [20.7, 148.0], [20.8, 148.0], [20.9, 148.0], [21.0, 148.0], [21.1, 148.0], [21.2, 148.0], [21.3, 149.0], [21.4, 149.0], [21.5, 149.0], [21.6, 149.0], [21.7, 149.0], [21.8, 149.0], [21.9, 149.0], [22.0, 149.0], [22.1, 149.0], [22.2, 149.0], [22.3, 149.0], [22.4, 149.0], [22.5, 149.0], [22.6, 149.0], [22.7, 149.0], [22.8, 149.0], [22.9, 149.0], [23.0, 149.0], [23.1, 149.0], [23.2, 149.0], [23.3, 149.0], [23.4, 149.0], [23.5, 149.0], [23.6, 149.0], [23.7, 149.0], [23.8, 149.0], [23.9, 149.0], [24.0, 149.0], [24.1, 149.0], [24.2, 149.0], [24.3, 149.0], [24.4, 149.0], [24.5, 149.0], [24.6, 149.0], [24.7, 149.0], [24.8, 149.0], [24.9, 149.0], [25.0, 149.0], [25.1, 149.0], [25.2, 149.0], [25.3, 149.0], [25.4, 149.0], [25.5, 149.0], [25.6, 149.0], [25.7, 149.0], [25.8, 149.0], [25.9, 149.0], [26.0, 149.0], [26.1, 149.0], [26.2, 149.0], [26.3, 149.0], [26.4, 149.0], [26.5, 149.0], [26.6, 149.0], [26.7, 149.0], [26.8, 149.0], [26.9, 149.0], [27.0, 149.0], [27.1, 149.0], [27.2, 149.0], [27.3, 149.0], [27.4, 149.0], [27.5, 149.0], [27.6, 149.0], [27.7, 149.0], [27.8, 149.0], [27.9, 149.0], [28.0, 149.0], [28.1, 149.0], [28.2, 149.0], [28.3, 149.0], [28.4, 150.0], [28.5, 150.0], [28.6, 150.0], [28.7, 150.0], [28.8, 150.0], [28.9, 150.0], [29.0, 150.0], [29.1, 150.0], [29.2, 150.0], [29.3, 150.0], [29.4, 150.0], [29.5, 150.0], [29.6, 150.0], [29.7, 150.0], [29.8, 150.0], [29.9, 150.0], [30.0, 150.0], [30.1, 150.0], [30.2, 150.0], [30.3, 150.0], [30.4, 150.0], [30.5, 150.0], [30.6, 150.0], [30.7, 150.0], [30.8, 150.0], [30.9, 150.0], [31.0, 150.0], [31.1, 150.0], [31.2, 150.0], [31.3, 150.0], [31.4, 150.0], [31.5, 150.0], [31.6, 150.0], [31.7, 150.0], [31.8, 150.0], [31.9, 150.0], [32.0, 150.0], [32.1, 150.0], [32.2, 150.0], [32.3, 150.0], [32.4, 150.0], [32.5, 150.0], [32.6, 150.0], [32.7, 150.0], [32.8, 150.0], [32.9, 150.0], [33.0, 151.0], [33.1, 151.0], [33.2, 151.0], [33.3, 151.0], [33.4, 151.0], [33.5, 151.0], [33.6, 151.0], [33.7, 151.0], [33.8, 151.0], [33.9, 151.0], [34.0, 151.0], [34.1, 151.0], [34.2, 151.0], [34.3, 151.0], [34.4, 151.0], [34.5, 151.0], [34.6, 151.0], [34.7, 151.0], [34.8, 151.0], [34.9, 151.0], [35.0, 151.0], [35.1, 151.0], [35.2, 151.0], [35.3, 151.0], [35.4, 151.0], [35.5, 151.0], [35.6, 151.0], [35.7, 151.0], [35.8, 151.0], [35.9, 151.0], [36.0, 151.0], [36.1, 151.0], [36.2, 151.0], [36.3, 151.0], [36.4, 151.0], [36.5, 151.0], [36.6, 151.0], [36.7, 151.0], [36.8, 151.0], [36.9, 151.0], [37.0, 151.0], [37.1, 151.0], [37.2, 151.0], [37.3, 151.0], [37.4, 151.0], [37.5, 151.0], [37.6, 151.0], [37.7, 151.0], [37.8, 151.0], [37.9, 151.0], [38.0, 151.0], [38.1, 151.0], [38.2, 151.0], [38.3, 151.0], [38.4, 151.0], [38.5, 151.0], [38.6, 151.0], [38.7, 151.0], [38.8, 151.0], [38.9, 151.0], [39.0, 151.0], [39.1, 151.0], [39.2, 151.0], [39.3, 151.0], [39.4, 151.0], [39.5, 151.0], [39.6, 151.0], [39.7, 151.0], [39.8, 151.0], [39.9, 151.0], [40.0, 151.0], [40.1, 151.0], [40.2, 151.0], [40.3, 151.0], [40.4, 151.0], [40.5, 151.0], [40.6, 151.0], [40.7, 151.0], [40.8, 151.0], [40.9, 151.0], [41.0, 151.0], [41.1, 151.0], [41.2, 151.0], [41.3, 152.0], [41.4, 152.0], [41.5, 152.0], [41.6, 152.0], [41.7, 152.0], [41.8, 152.0], [41.9, 152.0], [42.0, 152.0], [42.1, 152.0], [42.2, 152.0], [42.3, 152.0], [42.4, 152.0], [42.5, 152.0], [42.6, 152.0], [42.7, 152.0], [42.8, 152.0], [42.9, 152.0], [43.0, 152.0], [43.1, 152.0], [43.2, 152.0], [43.3, 152.0], [43.4, 152.0], [43.5, 152.0], [43.6, 152.0], [43.7, 152.0], [43.8, 152.0], [43.9, 152.0], [44.0, 152.0], [44.1, 152.0], [44.2, 152.0], [44.3, 152.0], [44.4, 152.0], [44.5, 152.0], [44.6, 152.0], [44.7, 152.0], [44.8, 152.0], [44.9, 152.0], [45.0, 152.0], [45.1, 152.0], [45.2, 152.0], [45.3, 152.0], [45.4, 152.0], [45.5, 152.0], [45.6, 152.0], [45.7, 152.0], [45.8, 152.0], [45.9, 152.0], [46.0, 152.0], [46.1, 152.0], [46.2, 152.0], [46.3, 152.0], [46.4, 152.0], [46.5, 152.0], [46.6, 152.0], [46.7, 152.0], [46.8, 152.0], [46.9, 152.0], [47.0, 152.0], [47.1, 152.0], [47.2, 152.0], [47.3, 152.0], [47.4, 152.0], [47.5, 152.0], [47.6, 152.0], [47.7, 152.0], [47.8, 152.0], [47.9, 152.0], [48.0, 152.0], [48.1, 152.0], [48.2, 152.0], [48.3, 152.0], [48.4, 153.0], [48.5, 153.0], [48.6, 153.0], [48.7, 153.0], [48.8, 153.0], [48.9, 153.0], [49.0, 153.0], [49.1, 153.0], [49.2, 153.0], [49.3, 153.0], [49.4, 153.0], [49.5, 153.0], [49.6, 153.0], [49.7, 153.0], [49.8, 153.0], [49.9, 153.0], [50.0, 153.0], [50.1, 153.0], [50.2, 153.0], [50.3, 153.0], [50.4, 153.0], [50.5, 153.0], [50.6, 153.0], [50.7, 153.0], [50.8, 153.0], [50.9, 153.0], [51.0, 153.0], [51.1, 153.0], [51.2, 153.0], [51.3, 153.0], [51.4, 153.0], [51.5, 153.0], [51.6, 153.0], [51.7, 153.0], [51.8, 153.0], [51.9, 153.0], [52.0, 153.0], [52.1, 153.0], [52.2, 153.0], [52.3, 153.0], [52.4, 153.0], [52.5, 153.0], [52.6, 153.0], [52.7, 153.0], [52.8, 153.0], [52.9, 153.0], [53.0, 153.0], [53.1, 153.0], [53.2, 153.0], [53.3, 153.0], [53.4, 153.0], [53.5, 153.0], [53.6, 153.0], [53.7, 153.0], [53.8, 153.0], [53.9, 153.0], [54.0, 153.0], [54.1, 153.0], [54.2, 153.0], [54.3, 153.0], [54.4, 153.0], [54.5, 153.0], [54.6, 153.0], [54.7, 153.0], [54.8, 153.0], [54.9, 153.0], [55.0, 153.0], [55.1, 153.0], [55.2, 153.0], [55.3, 153.0], [55.4, 153.0], [55.5, 153.0], [55.6, 153.0], [55.7, 153.0], [55.8, 153.0], [55.9, 153.0], [56.0, 153.0], [56.1, 153.0], [56.2, 153.0], [56.3, 153.0], [56.4, 153.0], [56.5, 153.0], [56.6, 153.0], [56.7, 153.0], [56.8, 154.0], [56.9, 154.0], [57.0, 154.0], [57.1, 154.0], [57.2, 154.0], [57.3, 154.0], [57.4, 154.0], [57.5, 154.0], [57.6, 154.0], [57.7, 154.0], [57.8, 154.0], [57.9, 154.0], [58.0, 154.0], [58.1, 154.0], [58.2, 154.0], [58.3, 154.0], [58.4, 154.0], [58.5, 154.0], [58.6, 154.0], [58.7, 154.0], [58.8, 154.0], [58.9, 154.0], [59.0, 154.0], [59.1, 154.0], [59.2, 154.0], [59.3, 154.0], [59.4, 154.0], [59.5, 154.0], [59.6, 154.0], [59.7, 154.0], [59.8, 154.0], [59.9, 154.0], [60.0, 154.0], [60.1, 154.0], [60.2, 154.0], [60.3, 154.0], [60.4, 154.0], [60.5, 154.0], [60.6, 154.0], [60.7, 154.0], [60.8, 154.0], [60.9, 154.0], [61.0, 154.0], [61.1, 154.0], [61.2, 154.0], [61.3, 154.0], [61.4, 154.0], [61.5, 154.0], [61.6, 154.0], [61.7, 154.0], [61.8, 154.0], [61.9, 154.0], [62.0, 154.0], [62.1, 154.0], [62.2, 154.0], [62.3, 154.0], [62.4, 154.0], [62.5, 154.0], [62.6, 154.0], [62.7, 154.0], [62.8, 154.0], [62.9, 154.0], [63.0, 154.0], [63.1, 154.0], [63.2, 154.0], [63.3, 155.0], [63.4, 155.0], [63.5, 155.0], [63.6, 155.0], [63.7, 155.0], [63.8, 155.0], [63.9, 155.0], [64.0, 155.0], [64.1, 155.0], [64.2, 155.0], [64.3, 155.0], [64.4, 155.0], [64.5, 155.0], [64.6, 155.0], [64.7, 155.0], [64.8, 155.0], [64.9, 155.0], [65.0, 155.0], [65.1, 155.0], [65.2, 155.0], [65.3, 155.0], [65.4, 155.0], [65.5, 155.0], [65.6, 155.0], [65.7, 155.0], [65.8, 155.0], [65.9, 155.0], [66.0, 155.0], [66.1, 155.0], [66.2, 155.0], [66.3, 155.0], [66.4, 155.0], [66.5, 155.0], [66.6, 155.0], [66.7, 155.0], [66.8, 155.0], [66.9, 155.0], [67.0, 155.0], [67.1, 156.0], [67.2, 156.0], [67.3, 156.0], [67.4, 156.0], [67.5, 156.0], [67.6, 156.0], [67.7, 156.0], [67.8, 156.0], [67.9, 156.0], [68.0, 156.0], [68.1, 156.0], [68.2, 156.0], [68.3, 156.0], [68.4, 156.0], [68.5, 156.0], [68.6, 156.0], [68.7, 156.0], [68.8, 156.0], [68.9, 156.0], [69.0, 156.0], [69.1, 156.0], [69.2, 156.0], [69.3, 156.0], [69.4, 156.0], [69.5, 156.0], [69.6, 156.0], [69.7, 156.0], [69.8, 156.0], [69.9, 156.0], [70.0, 156.0], [70.1, 156.0], [70.2, 156.0], [70.3, 156.0], [70.4, 156.0], [70.5, 156.0], [70.6, 156.0], [70.7, 156.0], [70.8, 156.0], [70.9, 156.0], [71.0, 157.0], [71.1, 157.0], [71.2, 157.0], [71.3, 157.0], [71.4, 157.0], [71.5, 157.0], [71.6, 157.0], [71.7, 157.0], [71.8, 157.0], [71.9, 157.0], [72.0, 157.0], [72.1, 157.0], [72.2, 157.0], [72.3, 157.0], [72.4, 157.0], [72.5, 157.0], [72.6, 157.0], [72.7, 157.0], [72.8, 157.0], [72.9, 157.0], [73.0, 157.0], [73.1, 157.0], [73.2, 157.0], [73.3, 157.0], [73.4, 157.0], [73.5, 157.0], [73.6, 157.0], [73.7, 157.0], [73.8, 157.0], [73.9, 157.0], [74.0, 157.0], [74.1, 157.0], [74.2, 157.0], [74.3, 157.0], [74.4, 157.0], [74.5, 157.0], [74.6, 157.0], [74.7, 157.0], [74.8, 157.0], [74.9, 157.0], [75.0, 157.0], [75.1, 157.0], [75.2, 157.0], [75.3, 157.0], [75.4, 157.0], [75.5, 157.0], [75.6, 157.0], [75.7, 157.0], [75.8, 157.0], [75.9, 157.0], [76.0, 157.0], [76.1, 157.0], [76.2, 158.0], [76.3, 158.0], [76.4, 158.0], [76.5, 158.0], [76.6, 158.0], [76.7, 158.0], [76.8, 158.0], [76.9, 158.0], [77.0, 158.0], [77.1, 158.0], [77.2, 158.0], [77.3, 158.0], [77.4, 158.0], [77.5, 158.0], [77.6, 158.0], [77.7, 158.0], [77.8, 158.0], [77.9, 158.0], [78.0, 158.0], [78.1, 158.0], [78.2, 158.0], [78.3, 158.0], [78.4, 158.0], [78.5, 158.0], [78.6, 158.0], [78.7, 158.0], [78.8, 158.0], [78.9, 158.0], [79.0, 158.0], [79.1, 158.0], [79.2, 158.0], [79.3, 158.0], [79.4, 158.0], [79.5, 158.0], [79.6, 158.0], [79.7, 158.0], [79.8, 158.0], [79.9, 158.0], [80.0, 158.0], [80.1, 159.0], [80.2, 159.0], [80.3, 159.0], [80.4, 159.0], [80.5, 159.0], [80.6, 159.0], [80.7, 159.0], [80.8, 159.0], [80.9, 159.0], [81.0, 159.0], [81.1, 159.0], [81.2, 159.0], [81.3, 159.0], [81.4, 159.0], [81.5, 159.0], [81.6, 159.0], [81.7, 159.0], [81.8, 159.0], [81.9, 159.0], [82.0, 159.0], [82.1, 159.0], [82.2, 159.0], [82.3, 159.0], [82.4, 159.0], [82.5, 159.0], [82.6, 159.0], [82.7, 159.0], [82.8, 159.0], [82.9, 159.0], [83.0, 159.0], [83.1, 159.0], [83.2, 159.0], [83.3, 159.0], [83.4, 159.0], [83.5, 159.0], [83.6, 159.0], [83.7, 159.0], [83.8, 159.0], [83.9, 159.0], [84.0, 159.0], [84.1, 159.0], [84.2, 159.0], [84.3, 159.0], [84.4, 159.0], [84.5, 159.0], [84.6, 159.0], [84.7, 159.0], [84.8, 159.0], [84.9, 159.0], [85.0, 159.0], [85.1, 159.0], [85.2, 160.0], [85.3, 160.0], [85.4, 160.0], [85.5, 160.0], [85.6, 160.0], [85.7, 160.0], [85.8, 160.0], [85.9, 160.0], [86.0, 160.0], [86.1, 160.0], [86.2, 160.0], [86.3, 160.0], [86.4, 160.0], [86.5, 160.0], [86.6, 160.0], [86.7, 160.0], [86.8, 160.0], [86.9, 160.0], [87.0, 160.0], [87.1, 160.0], [87.2, 160.0], [87.3, 160.0], [87.4, 160.0], [87.5, 160.0], [87.6, 160.0], [87.7, 160.0], [87.8, 160.0], [87.9, 160.0], [88.0, 160.0], [88.1, 160.0], [88.2, 160.0], [88.3, 160.0], [88.4, 160.0], [88.5, 160.0], [88.6, 160.0], [88.7, 160.0], [88.8, 160.0], [88.9, 160.0], [89.0, 160.0], [89.1, 161.0], [89.2, 161.0], [89.3, 161.0], [89.4, 161.0], [89.5, 161.0], [89.6, 161.0], [89.7, 161.0], [89.8, 161.0], [89.9, 161.0], [90.0, 161.0], [90.1, 161.0], [90.2, 161.0], [90.3, 161.0], [90.4, 161.0], [90.5, 161.0], [90.6, 161.0], [90.7, 161.0], [90.8, 161.0], [90.9, 161.0], [91.0, 162.0], [91.1, 162.0], [91.2, 162.0], [91.3, 162.0], [91.4, 162.0], [91.5, 162.0], [91.6, 162.0], [91.7, 162.0], [91.8, 162.0], [91.9, 162.0], [92.0, 162.0], [92.1, 162.0], [92.2, 162.0], [92.3, 162.0], [92.4, 162.0], [92.5, 162.0], [92.6, 162.0], [92.7, 162.0], [92.8, 162.0], [92.9, 162.0], [93.0, 162.0], [93.1, 162.0], [93.2, 162.0], [93.3, 162.0], [93.4, 162.0], [93.5, 162.0], [93.6, 163.0], [93.7, 163.0], [93.8, 163.0], [93.9, 163.0], [94.0, 163.0], [94.1, 163.0], [94.2, 163.0], [94.3, 163.0], [94.4, 163.0], [94.5, 163.0], [94.6, 163.0], [94.7, 163.0], [94.8, 163.0], [94.9, 166.0], [95.0, 166.0], [95.1, 166.0], [95.2, 166.0], [95.3, 166.0], [95.4, 166.0], [95.5, 167.0], [95.6, 167.0], [95.7, 167.0], [95.8, 167.0], [95.9, 167.0], [96.0, 167.0], [96.1, 167.0], [96.2, 170.0], [96.3, 170.0], [96.4, 170.0], [96.5, 170.0], [96.6, 170.0], [96.7, 170.0], [96.8, 174.0], [96.9, 174.0], [97.0, 174.0], [97.1, 174.0], [97.2, 174.0], [97.3, 174.0], [97.4, 174.0], [97.5, 179.0], [97.6, 179.0], [97.7, 179.0], [97.8, 179.0], [97.9, 179.0], [98.0, 179.0], [98.1, 180.0], [98.2, 180.0], [98.3, 180.0], [98.4, 180.0], [98.5, 180.0], [98.6, 180.0], [98.7, 180.0], [98.8, 183.0], [98.9, 183.0], [99.0, 183.0], [99.1, 183.0], [99.2, 183.0], [99.3, 183.0], [99.4, 191.0], [99.5, 191.0], [99.6, 191.0], [99.7, 191.0], [99.8, 191.0], [99.9, 191.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 2.0], [4.9, 2.0], [5.0, 2.0], [5.1, 2.0], [5.2, 2.0], [5.3, 2.0], [5.4, 2.0], [5.5, 2.0], [5.6, 2.0], [5.7, 2.0], [5.8, 2.0], [5.9, 2.0], [6.0, 2.0], [6.1, 2.0], [6.2, 2.0], [6.3, 2.0], [6.4, 2.0], [6.5, 2.0], [6.6, 2.0], [6.7, 2.0], [6.8, 2.0], [6.9, 2.0], [7.0, 2.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 2.0], [14.5, 2.0], [14.6, 2.0], [14.7, 2.0], [14.8, 2.0], [14.9, 2.0], [15.0, 2.0], [15.1, 2.0], [15.2, 2.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 2.0], [17.7, 2.0], [17.8, 2.0], [17.9, 2.0], [18.0, 2.0], [18.1, 2.0], [18.2, 2.0], [18.3, 2.0], [18.4, 2.0], [18.5, 2.0], [18.6, 2.0], [18.7, 2.0], [18.8, 2.0], [18.9, 2.0], [19.0, 2.0], [19.1, 2.0], [19.2, 2.0], [19.3, 2.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 2.0], [20.0, 2.0], [20.1, 2.0], [20.2, 2.0], [20.3, 2.0], [20.4, 2.0], [20.5, 2.0], [20.6, 2.0], [20.7, 2.0], [20.8, 2.0], [20.9, 2.0], [21.0, 2.0], [21.1, 2.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 2.0], [21.6, 2.0], [21.7, 2.0], [21.8, 2.0], [21.9, 2.0], [22.0, 2.0], [22.1, 2.0], [22.2, 2.0], [22.3, 2.0], [22.4, 2.0], [22.5, 2.0], [22.6, 2.0], [22.7, 2.0], [22.8, 2.0], [22.9, 2.0], [23.0, 2.0], [23.1, 2.0], [23.2, 2.0], [23.3, 2.0], [23.4, 2.0], [23.5, 2.0], [23.6, 2.0], [23.7, 2.0], [23.8, 2.0], [23.9, 2.0], [24.0, 2.0], [24.1, 2.0], [24.2, 2.0], [24.3, 2.0], [24.4, 2.0], [24.5, 2.0], [24.6, 2.0], [24.7, 2.0], [24.8, 2.0], [24.9, 2.0], [25.0, 2.0], [25.1, 2.0], [25.2, 2.0], [25.3, 2.0], [25.4, 2.0], [25.5, 2.0], [25.6, 2.0], [25.7, 2.0], [25.8, 2.0], [25.9, 2.0], [26.0, 2.0], [26.1, 2.0], [26.2, 2.0], [26.3, 2.0], [26.4, 2.0], [26.5, 2.0], [26.6, 3.0], [26.7, 3.0], [26.8, 3.0], [26.9, 3.0], [27.0, 3.0], [27.1, 3.0], [27.2, 3.0], [27.3, 3.0], [27.4, 3.0], [27.5, 3.0], [27.6, 3.0], [27.7, 3.0], [27.8, 3.0], [27.9, 3.0], [28.0, 3.0], [28.1, 3.0], [28.2, 3.0], [28.3, 3.0], [28.4, 3.0], [28.5, 3.0], [28.6, 3.0], [28.7, 3.0], [28.8, 3.0], [28.9, 3.0], [29.0, 3.0], [29.1, 3.0], [29.2, 3.0], [29.3, 3.0], [29.4, 3.0], [29.5, 3.0], [29.6, 3.0], [29.7, 3.0], [29.8, 3.0], [29.9, 3.0], [30.0, 3.0], [30.1, 3.0], [30.2, 3.0], [30.3, 3.0], [30.4, 3.0], [30.5, 3.0], [30.6, 3.0], [30.7, 3.0], [30.8, 3.0], [30.9, 3.0], [31.0, 3.0], [31.1, 3.0], [31.2, 3.0], [31.3, 3.0], [31.4, 3.0], [31.5, 3.0], [31.6, 3.0], [31.7, 3.0], [31.8, 3.0], [31.9, 3.0], [32.0, 3.0], [32.1, 3.0], [32.2, 3.0], [32.3, 3.0], [32.4, 3.0], [32.5, 3.0], [32.6, 3.0], [32.7, 3.0], [32.8, 3.0], [32.9, 3.0], [33.0, 3.0], [33.1, 3.0], [33.2, 3.0], [33.3, 3.0], [33.4, 3.0], [33.5, 3.0], [33.6, 3.0], [33.7, 3.0], [33.8, 3.0], [33.9, 3.0], [34.0, 3.0], [34.1, 3.0], [34.2, 3.0], [34.3, 3.0], [34.4, 3.0], [34.5, 3.0], [34.6, 3.0], [34.7, 3.0], [34.8, 3.0], [34.9, 3.0], [35.0, 3.0], [35.1, 3.0], [35.2, 3.0], [35.3, 3.0], [35.4, 3.0], [35.5, 3.0], [35.6, 3.0], [35.7, 3.0], [35.8, 3.0], [35.9, 3.0], [36.0, 3.0], [36.1, 3.0], [36.2, 3.0], [36.3, 3.0], [36.4, 3.0], [36.5, 3.0], [36.6, 3.0], [36.7, 3.0], [36.8, 3.0], [36.9, 3.0], [37.0, 3.0], [37.1, 3.0], [37.2, 3.0], [37.3, 3.0], [37.4, 3.0], [37.5, 3.0], [37.6, 3.0], [37.7, 3.0], [37.8, 3.0], [37.9, 3.0], [38.0, 3.0], [38.1, 3.0], [38.2, 3.0], [38.3, 3.0], [38.4, 3.0], [38.5, 3.0], [38.6, 3.0], [38.7, 3.0], [38.8, 3.0], [38.9, 3.0], [39.0, 3.0], [39.1, 3.0], [39.2, 3.0], [39.3, 3.0], [39.4, 3.0], [39.5, 3.0], [39.6, 3.0], [39.7, 3.0], [39.8, 3.0], [39.9, 3.0], [40.0, 3.0], [40.1, 3.0], [40.2, 3.0], [40.3, 3.0], [40.4, 3.0], [40.5, 3.0], [40.6, 3.0], [40.7, 3.0], [40.8, 3.0], [40.9, 3.0], [41.0, 3.0], [41.1, 3.0], [41.2, 3.0], [41.3, 3.0], [41.4, 3.0], [41.5, 3.0], [41.6, 4.0], [41.7, 4.0], [41.8, 4.0], [41.9, 4.0], [42.0, 4.0], [42.1, 4.0], [42.2, 4.0], [42.3, 4.0], [42.4, 5.0], [42.5, 5.0], [42.6, 5.0], [42.7, 6.0], [42.8, 6.0], [42.9, 7.0], [43.0, 9.0], [43.1, 18.0], [43.2, 20.0], [43.3, 21.0], [43.4, 22.0], [43.5, 23.0], [43.6, 24.0], [43.7, 25.0], [43.8, 25.0], [43.9, 27.0], [44.0, 28.0], [44.1, 29.0], [44.2, 31.0], [44.3, 33.0], [44.4, 34.0], [44.5, 36.0], [44.6, 38.0], [44.7, 43.0], [44.8, 48.0], [44.9, 60.0], [45.0, 83.0], [45.1, 150.0], [45.2, 187.0], [45.3, 212.0], [45.4, 238.0], [45.5, 260.0], [45.6, 278.0], [45.7, 293.0], [45.8, 318.0], [45.9, 332.0], [46.0, 348.0], [46.1, 361.0], [46.2, 375.0], [46.3, 392.0], [46.4, 404.0], [46.5, 430.0], [46.6, 446.0], [46.7, 460.0], [46.8, 471.0], [46.9, 479.0], [47.0, 489.0], [47.1, 503.0], [47.2, 512.0], [47.3, 526.0], [47.4, 532.0], [47.5, 545.0], [47.6, 558.0], [47.7, 569.0], [47.8, 582.0], [47.9, 594.0], [48.0, 610.0], [48.1, 621.0], [48.2, 636.0], [48.3, 644.0], [48.4, 655.0], [48.5, 663.0], [48.6, 676.0], [48.7, 686.0], [48.8, 693.0], [48.9, 703.0], [49.0, 710.0], [49.1, 723.0], [49.2, 736.0], [49.3, 746.0], [49.4, 755.0], [49.5, 761.0], [49.6, 770.0], [49.7, 782.0], [49.8, 787.0], [49.9, 795.0], [50.0, 802.0], [50.1, 805.0], [50.2, 816.0], [50.3, 829.0], [50.4, 840.0], [50.5, 850.0], [50.6, 857.0], [50.7, 861.0], [50.8, 874.0], [50.9, 882.0], [51.0, 891.0], [51.1, 899.0], [51.2, 911.0], [51.3, 919.0], [51.4, 926.0], [51.5, 937.0], [51.6, 943.0], [51.7, 953.0], [51.8, 961.0], [51.9, 969.0], [52.0, 974.0], [52.1, 982.0], [52.2, 987.0], [52.3, 997.0], [52.4, 1007.0], [52.5, 1020.0], [52.6, 1028.0], [52.7, 1036.0], [52.8, 1041.0], [52.9, 1046.0], [53.0, 1052.0], [53.1, 1061.0], [53.2, 1067.0], [53.3, 1076.0], [53.4, 1084.0], [53.5, 1096.0], [53.6, 1103.0], [53.7, 1109.0], [53.8, 1116.0], [53.9, 1124.0], [54.0, 1130.0], [54.1, 1138.0], [54.2, 1146.0], [54.3, 1153.0], [54.4, 1159.0], [54.5, 1168.0], [54.6, 1175.0], [54.7, 1182.0], [54.8, 1188.0], [54.9, 1196.0], [55.0, 1200.0], [55.1, 1208.0], [55.2, 1213.0], [55.3, 1221.0], [55.4, 1225.0], [55.5, 1232.0], [55.6, 1239.0], [55.7, 1247.0], [55.8, 1254.0], [55.9, 1260.0], [56.0, 1263.0], [56.1, 1270.0], [56.2, 1277.0], [56.3, 1282.0], [56.4, 1289.0], [56.5, 1295.0], [56.6, 1301.0], [56.7, 1307.0], [56.8, 1314.0], [56.9, 1321.0], [57.0, 1325.0], [57.1, 1332.0], [57.2, 1337.0], [57.3, 1344.0], [57.4, 1349.0], [57.5, 1358.0], [57.6, 1364.0], [57.7, 1369.0], [57.8, 1377.0], [57.9, 1383.0], [58.0, 1387.0], [58.1, 1395.0], [58.2, 1402.0], [58.3, 1408.0], [58.4, 1412.0], [58.5, 1418.0], [58.6, 1424.0], [58.7, 1428.0], [58.8, 1433.0], [58.9, 1438.0], [59.0, 1443.0], [59.1, 1449.0], [59.2, 1454.0], [59.3, 1459.0], [59.4, 1467.0], [59.5, 1474.0], [59.6, 1480.0], [59.7, 1485.0], [59.8, 1490.0], [59.9, 1497.0], [60.0, 1504.0], [60.1, 1508.0], [60.2, 1513.0], [60.3, 1518.0], [60.4, 1524.0], [60.5, 1532.0], [60.6, 1540.0], [60.7, 1543.0], [60.8, 1548.0], [60.9, 1552.0], [61.0, 1559.0], [61.1, 1565.0], [61.2, 1572.0], [61.3, 1577.0], [61.4, 1582.0], [61.5, 1591.0], [61.6, 1594.0], [61.7, 1599.0], [61.8, 1604.0], [61.9, 1611.0], [62.0, 1616.0], [62.1, 1621.0], [62.2, 1627.0], [62.3, 1632.0], [62.4, 1638.0], [62.5, 1645.0], [62.6, 1650.0], [62.7, 1657.0], [62.8, 1661.0], [62.9, 1667.0], [63.0, 1672.0], [63.1, 1677.0], [63.2, 1682.0], [63.3, 1688.0], [63.4, 1691.0], [63.5, 1696.0], [63.6, 1702.0], [63.7, 1709.0], [63.8, 1714.0], [63.9, 1718.0], [64.0, 1723.0], [64.1, 1731.0], [64.2, 1736.0], [64.3, 1740.0], [64.4, 1744.0], [64.5, 1752.0], [64.6, 1756.0], [64.7, 1764.0], [64.8, 1770.0], [64.9, 1774.0], [65.0, 1779.0], [65.1, 1785.0], [65.2, 1790.0], [65.3, 1796.0], [65.4, 1801.0], [65.5, 1807.0], [65.6, 1814.0], [65.7, 1820.0], [65.8, 1825.0], [65.9, 1830.0], [66.0, 1837.0], [66.1, 1845.0], [66.2, 1850.0], [66.3, 1853.0], [66.4, 1857.0], [66.5, 1864.0], [66.6, 1871.0], [66.7, 1877.0], [66.8, 1881.0], [66.9, 1887.0], [67.0, 1894.0], [67.1, 1900.0], [67.2, 1907.0], [67.3, 1917.0], [67.4, 1926.0], [67.5, 1933.0], [67.6, 1936.0], [67.7, 1945.0], [67.8, 1951.0], [67.9, 1959.0], [68.0, 1964.0], [68.1, 1974.0], [68.2, 1979.0], [68.3, 1982.0], [68.4, 1994.0], [68.5, 1999.0], [68.6, 2006.0], [68.7, 2015.0], [68.8, 2022.0], [68.9, 2027.0], [69.0, 2034.0], [69.1, 2039.0], [69.2, 2044.0], [69.3, 2050.0], [69.4, 2057.0], [69.5, 2063.0], [69.6, 2070.0], [69.7, 2075.0], [69.8, 2081.0], [69.9, 2087.0], [70.0, 2091.0], [70.1, 2100.0], [70.2, 2108.0], [70.3, 2118.0], [70.4, 2122.0], [70.5, 2128.0], [70.6, 2134.0], [70.7, 2142.0], [70.8, 2149.0], [70.9, 2155.0], [71.0, 2163.0], [71.1, 2168.0], [71.2, 2177.0], [71.3, 2183.0], [71.4, 2189.0], [71.5, 2196.0], [71.6, 2205.0], [71.7, 2214.0], [71.8, 2222.0], [71.9, 2226.0], [72.0, 2232.0], [72.1, 2237.0], [72.2, 2244.0], [72.3, 2253.0], [72.4, 2260.0], [72.5, 2268.0], [72.6, 2272.0], [72.7, 2278.0], [72.8, 2288.0], [72.9, 2292.0], [73.0, 2296.0], [73.1, 2301.0], [73.2, 2307.0], [73.3, 2313.0], [73.4, 2317.0], [73.5, 2321.0], [73.6, 2328.0], [73.7, 2332.0], [73.8, 2337.0], [73.9, 2342.0], [74.0, 2350.0], [74.1, 2357.0], [74.2, 2364.0], [74.3, 2369.0], [74.4, 2375.0], [74.5, 2385.0], [74.6, 2393.0], [74.7, 2400.0], [74.8, 2405.0], [74.9, 2410.0], [75.0, 2417.0], [75.1, 2421.0], [75.2, 2426.0], [75.3, 2431.0], [75.4, 2439.0], [75.5, 2447.0], [75.6, 2453.0], [75.7, 2460.0], [75.8, 2467.0], [75.9, 2477.0], [76.0, 2483.0], [76.1, 2489.0], [76.2, 2494.0], [76.3, 2501.0], [76.4, 2507.0], [76.5, 2515.0], [76.6, 2524.0], [76.7, 2530.0], [76.8, 2534.0], [76.9, 2542.0], [77.0, 2546.0], [77.1, 2554.0], [77.2, 2562.0], [77.3, 2570.0], [77.4, 2576.0], [77.5, 2581.0], [77.6, 2589.0], [77.7, 2599.0], [77.8, 2605.0], [77.9, 2612.0], [78.0, 2619.0], [78.1, 2627.0], [78.2, 2633.0], [78.3, 2638.0], [78.4, 2647.0], [78.5, 2658.0], [78.6, 2668.0], [78.7, 2672.0], [78.8, 2683.0], [78.9, 2692.0], [79.0, 2700.0], [79.1, 2707.0], [79.2, 2718.0], [79.3, 2725.0], [79.4, 2734.0], [79.5, 2742.0], [79.6, 2747.0], [79.7, 2755.0], [79.8, 2762.0], [79.9, 2769.0], [80.0, 2778.0], [80.1, 2783.0], [80.2, 2788.0], [80.3, 2796.0], [80.4, 2801.0], [80.5, 2810.0], [80.6, 2818.0], [80.7, 2825.0], [80.8, 2834.0], [80.9, 2842.0], [81.0, 2850.0], [81.1, 2858.0], [81.2, 2867.0], [81.3, 2872.0], [81.4, 2878.0], [81.5, 2886.0], [81.6, 2891.0], [81.7, 2899.0], [81.8, 2905.0], [81.9, 2913.0], [82.0, 2924.0], [82.1, 2932.0], [82.2, 2942.0], [82.3, 2951.0], [82.4, 2958.0], [82.5, 2966.0], [82.6, 2970.0], [82.7, 2976.0], [82.8, 2983.0], [82.9, 2992.0], [83.0, 3001.0], [83.1, 3010.0], [83.2, 3022.0], [83.3, 3027.0], [83.4, 3038.0], [83.5, 3048.0], [83.6, 3060.0], [83.7, 3065.0], [83.8, 3071.0], [83.9, 3081.0], [84.0, 3088.0], [84.1, 3096.0], [84.2, 3106.0], [84.3, 3113.0], [84.4, 3123.0], [84.5, 3129.0], [84.6, 3139.0], [84.7, 3149.0], [84.8, 3152.0], [84.9, 3162.0], [85.0, 3169.0], [85.1, 3175.0], [85.2, 3184.0], [85.3, 3191.0], [85.4, 3202.0], [85.5, 3212.0], [85.6, 3221.0], [85.7, 3230.0], [85.8, 3237.0], [85.9, 3244.0], [86.0, 3255.0], [86.1, 3264.0], [86.2, 3273.0], [86.3, 3284.0], [86.4, 3299.0], [86.5, 3307.0], [86.6, 3321.0], [86.7, 3332.0], [86.8, 3340.0], [86.9, 3351.0], [87.0, 3360.0], [87.1, 3368.0], [87.2, 3381.0], [87.3, 3390.0], [87.4, 3396.0], [87.5, 3403.0], [87.6, 3414.0], [87.7, 3422.0], [87.8, 3432.0], [87.9, 3442.0], [88.0, 3450.0], [88.1, 3461.0], [88.2, 3471.0], [88.3, 3480.0], [88.4, 3493.0], [88.5, 3507.0], [88.6, 3514.0], [88.7, 3519.0], [88.8, 3535.0], [88.9, 3550.0], [89.0, 3564.0], [89.1, 3573.0], [89.2, 3589.0], [89.3, 3598.0], [89.4, 3615.0], [89.5, 3627.0], [89.6, 3649.0], [89.7, 3659.0], [89.8, 3666.0], [89.9, 3674.0], [90.0, 3688.0], [90.1, 3704.0], [90.2, 3718.0], [90.3, 3731.0], [90.4, 3745.0], [90.5, 3758.0], [90.6, 3779.0], [90.7, 3797.0], [90.8, 3808.0], [90.9, 3826.0], [91.0, 3840.0], [91.1, 3858.0], [91.2, 3876.0], [91.3, 3894.0], [91.4, 3919.0], [91.5, 3935.0], [91.6, 3950.0], [91.7, 3973.0], [91.8, 3992.0], [91.9, 4008.0], [92.0, 4017.0], [92.1, 4032.0], [92.2, 4053.0], [92.3, 4066.0], [92.4, 4094.0], [92.5, 4108.0], [92.6, 4124.0], [92.7, 4143.0], [92.8, 4164.0], [92.9, 4182.0], [93.0, 4210.0], [93.1, 4221.0], [93.2, 4247.0], [93.3, 4267.0], [93.4, 4289.0], [93.5, 4306.0], [93.6, 4322.0], [93.7, 4346.0], [93.8, 4370.0], [93.9, 4394.0], [94.0, 4413.0], [94.1, 4432.0], [94.2, 4449.0], [94.3, 4470.0], [94.4, 4488.0], [94.5, 4508.0], [94.6, 4528.0], [94.7, 4555.0], [94.8, 4584.0], [94.9, 4604.0], [95.0, 4633.0], [95.1, 4668.0], [95.2, 4690.0], [95.3, 4704.0], [95.4, 4728.0], [95.5, 4750.0], [95.6, 4776.0], [95.7, 4802.0], [95.8, 4829.0], [95.9, 4857.0], [96.0, 4882.0], [96.1, 4906.0], [96.2, 4945.0], [96.3, 4982.0], [96.4, 5005.0], [96.5, 5035.0], [96.6, 5071.0], [96.7, 5098.0], [96.8, 5124.0], [96.9, 5154.0], [97.0, 5196.0], [97.1, 5238.0], [97.2, 5285.0], [97.3, 5314.0], [97.4, 5357.0], [97.5, 5378.0], [97.6, 5426.0], [97.7, 5459.0], [97.8, 5511.0], [97.9, 5538.0], [98.0, 5603.0], [98.1, 5641.0], [98.2, 5702.0], [98.3, 5761.0], [98.4, 5805.0], [98.5, 5872.0], [98.6, 5936.0], [98.7, 5979.0], [98.8, 6036.0], [98.9, 6108.0], [99.0, 6176.0], [99.1, 6342.0], [99.2, 6466.0], [99.3, 6573.0], [99.4, 6731.0], [99.5, 6904.0], [99.6, 7208.0], [99.7, 7428.0], [99.8, 7869.0], [99.9, 8281.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 6979.0, "series": [{"data": [[0.0, 6977.0], [600.0, 144.0], [700.0, 165.0], [800.0, 168.0], [900.0, 167.0], [1000.0, 197.0], [1100.0, 199.0], [1200.0, 245.0], [1300.0, 253.0], [1400.0, 257.0], [1500.0, 275.0], [1600.0, 263.0], [1700.0, 254.0], [1800.0, 225.0], [1900.0, 247.0], [2000.0, 268.0], [2100.0, 226.0], [2200.0, 241.0], [2300.0, 251.0], [2400.0, 232.0], [2500.0, 230.0], [2600.0, 204.0], [2700.0, 169.0], [2800.0, 169.0], [2900.0, 191.0], [3000.0, 185.0], [3100.0, 172.0], [3200.0, 177.0], [3300.0, 160.0], [3400.0, 136.0], [3500.0, 130.0], [3600.0, 132.0], [3700.0, 132.0], [3800.0, 112.0], [3900.0, 99.0], [4000.0, 90.0], [4300.0, 83.0], [4200.0, 80.0], [4100.0, 76.0], [4500.0, 73.0], [4400.0, 80.0], [4600.0, 70.0], [4800.0, 84.0], [4700.0, 91.0], [4900.0, 64.0], [5000.0, 57.0], [5100.0, 42.0], [5200.0, 35.0], [5300.0, 50.0], [5500.0, 40.0], [5600.0, 38.0], [5400.0, 37.0], [5700.0, 23.0], [5800.0, 28.0], [6100.0, 10.0], [5900.0, 29.0], [6000.0, 17.0], [6200.0, 19.0], [6300.0, 12.0], [6400.0, 7.0], [6600.0, 11.0], [6500.0, 6.0], [6800.0, 6.0], [6900.0, 2.0], [6700.0, 7.0], [7100.0, 4.0], [7000.0, 6.0], [7300.0, 6.0], [7400.0, 4.0], [7200.0, 5.0], [7600.0, 6.0], [7500.0, 4.0], [7800.0, 3.0], [7700.0, 7.0], [8000.0, 8.0], [8400.0, 4.0], [8300.0, 4.0], [8600.0, 1.0], [8500.0, 3.0], [8700.0, 1.0], [8800.0, 2.0], [9000.0, 1.0], [8900.0, 1.0], [9500.0, 1.0], [100.0, 37.0], [200.0, 73.0], [300.0, 99.0], [400.0, 140.0], [500.0, 161.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[100.0, 155.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 6979.0], [600.0, 146.0], [700.0, 167.0], [800.0, 181.0], [900.0, 187.0], [1000.0, 188.0], [1100.0, 222.0], [1200.0, 249.0], [1300.0, 242.0], [1400.0, 277.0], [1500.0, 277.0], [1600.0, 286.0], [1700.0, 280.0], [1800.0, 265.0], [1900.0, 222.0], [2000.0, 245.0], [2100.0, 226.0], [2200.0, 236.0], [2300.0, 252.0], [2400.0, 246.0], [2500.0, 224.0], [2600.0, 196.0], [2800.0, 208.0], [2700.0, 213.0], [2900.0, 199.0], [3000.0, 175.0], [3100.0, 195.0], [3300.0, 164.0], [3200.0, 159.0], [3400.0, 153.0], [3500.0, 134.0], [3700.0, 96.0], [3600.0, 120.0], [3800.0, 94.0], [3900.0, 84.0], [4000.0, 89.0], [4100.0, 82.0], [4200.0, 79.0], [4300.0, 72.0], [4400.0, 82.0], [4600.0, 64.0], [4500.0, 64.0], [4700.0, 61.0], [4800.0, 59.0], [4900.0, 49.0], [5000.0, 51.0], [5100.0, 48.0], [5200.0, 36.0], [5300.0, 46.0], [5400.0, 35.0], [5500.0, 34.0], [5600.0, 29.0], [5700.0, 32.0], [5800.0, 24.0], [6000.0, 21.0], [5900.0, 32.0], [6100.0, 21.0], [6200.0, 9.0], [6300.0, 14.0], [6500.0, 12.0], [6600.0, 10.0], [6400.0, 9.0], [6700.0, 11.0], [6900.0, 7.0], [6800.0, 9.0], [7100.0, 4.0], [7000.0, 5.0], [7400.0, 7.0], [7200.0, 7.0], [7300.0, 5.0], [7500.0, 3.0], [7600.0, 1.0], [7700.0, 5.0], [7800.0, 5.0], [7900.0, 3.0], [8100.0, 5.0], [8000.0, 3.0], [8300.0, 2.0], [8200.0, 3.0], [8700.0, 3.0], [8400.0, 2.0], [8600.0, 2.0], [8500.0, 2.0], [9100.0, 1.0], [8900.0, 1.0], [9200.0, 1.0], [10000.0, 1.0], [100.0, 37.0], [200.0, 70.0], [300.0, 95.0], [400.0, 116.0], [500.0, 133.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1335.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 13790.0, "series": [{"data": [[0.0, 1335.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3835.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 12195.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 13790.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.730769230769232, "minX": 1.5876831E12, "maxY": 155.0, "series": [{"data": [[1.58768322E12, 155.0], [1.58768352E12, 155.0], [1.58768358E12, 155.0], [1.58768328E12, 155.0], [1.58768334E12, 155.0], [1.58768364E12, 155.0], [1.5876837E12, 155.0], [1.5876831E12, 68.00610820244339], [1.5876834E12, 155.0], [1.58768346E12, 155.0], [1.58768376E12, 120.16562889165597], [1.58768382E12, 8.730769230769232], [1.58768316E12, 147.8264150943395]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768382E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 1791.0, "series": [{"data": [[2.0, 2.0], [4.0, 3.0], [5.0, 2.0], [6.0, 1.0], [7.0, 1.0], [8.0, 15.5], [9.0, 38.0], [10.0, 16.0], [11.0, 26.5], [12.0, 7.2], [13.0, 37.5], [14.0, 17.5], [15.0, 8.25], [16.0, 1.75], [17.0, 32.0], [18.0, 26.5], [19.0, 31.5], [20.0, 35.0], [21.0, 16.666666666666668], [22.0, 10.999999999999998], [23.0, 25.25], [24.0, 6.8], [25.0, 34.666666666666664], [26.0, 29.5], [28.0, 20.0], [29.0, 11.333333333333336], [30.0, 12.166666666666666], [31.0, 10.333333333333336], [32.0, 16.0], [33.0, 24.5], [34.0, 12.07142857142857], [35.0, 5.0], [36.0, 54.5], [37.0, 31.5], [38.0, 18.454545454545453], [39.0, 10.111111111111109], [40.0, 176.5], [41.0, 29.0], [42.0, 18.0], [43.0, 14.777777777777779], [44.0, 21.88888888888889], [45.0, 9.125000000000002], [46.0, 22.857142857142858], [47.0, 9.176470588235293], [48.0, 16.75], [49.0, 15.285714285714285], [50.0, 26.857142857142858], [51.0, 15.624999999999998], [52.0, 18.4], [53.0, 44.0], [54.0, 376.87499999999994], [55.0, 154.17647058823533], [56.0, 26.75], [57.0, 3.4999999999999996], [58.0, 23.750000000000004], [59.0, 23.66666666666666], [60.0, 9.9], [61.0, 13.6], [62.0, 12.45833333333333], [63.0, 25.666666666666668], [64.0, 18.857142857142858], [65.0, 16.76923076923077], [66.0, 25.0], [67.0, 20.142857142857142], [68.0, 14.5625], [69.0, 18.916666666666668], [70.0, 6.533333333333335], [71.0, 12.5], [72.0, 173.29999999999998], [73.0, 23.499999999999996], [74.0, 34.0], [75.0, 20.42857142857143], [76.0, 282.4], [77.0, 340.07692307692304], [78.0, 375.22222222222223], [79.0, 539.0], [80.0, 640.6666666666667], [81.0, 144.89999999999998], [82.0, 166.53333333333333], [83.0, 154.59259259259258], [84.0, 311.8], [85.0, 138.2142857142857], [86.0, 146.83999999999995], [87.0, 27.249999999999996], [88.0, 51.99999999999999], [89.0, 137.70833333333331], [90.0, 90.94339622641508], [91.0, 138.3333333333334], [92.0, 503.28571428571433], [93.0, 318.00000000000006], [94.0, 401.00000000000006], [95.0, 816.6666666666666], [96.0, 289.0000000000001], [97.0, 351.35294117647055], [98.0, 280.33333333333337], [99.0, 175.55072463768107], [100.0, 132.1714285714286], [101.0, 238.7777777777778], [102.0, 229.52941176470588], [103.0, 499.84615384615375], [104.0, 592.7142857142858], [105.0, 240.88888888888889], [106.0, 222.66666666666669], [107.0, 601.625], [108.0, 575.4999999999999], [109.0, 58.43243243243241], [110.0, 734.5], [111.0, 497.33333333333326], [112.0, 733.5], [113.0, 230.87499999999997], [114.0, 290.45833333333326], [115.0, 654.9333333333332], [116.0, 722.5882352941179], [117.0, 1147.9285714285716], [118.0, 618.3157894736842], [119.0, 746.2], [120.0, 826.4], [121.0, 285.0285714285714], [122.0, 491.76190476190476], [123.0, 333.0], [124.0, 126.80000000000011], [125.0, 343.57142857142856], [126.0, 161.14285714285714], [127.0, 850.2857142857142], [128.0, 736.5294117647059], [129.0, 390.9166666666666], [130.0, 1231.1052631578948], [131.0, 728.0526315789475], [132.0, 543.8333333333335], [133.0, 917.3749999999999], [134.0, 729.9999999999999], [135.0, 979.9411764705883], [136.0, 780.5454545454545], [137.0, 205.93749999999997], [138.0, 951.7037037037037], [139.0, 1791.0], [140.0, 833.1250000000001], [141.0, 1153.5000000000002], [142.0, 296.8846153846155], [143.0, 207.07407407407402], [144.0, 411.40425531914894], [145.0, 232.27272727272734], [146.0, 483.3888888888886], [147.0, 244.39534883720933], [148.0, 932.3333333333334], [149.0, 78.25161290322583], [150.0, 511.75862068965506], [151.0, 13.061538461538468], [152.0, 404.0909090909091], [153.0, 258.5636363636363], [154.0, 60.3695652173913], [155.0, 1579.7283922635286], [1.0, 2.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[147.96548387096794, 1387.8756129032292]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 154.0], [3.0, 146.0], [4.0, 157.0], [5.0, 159.0], [6.0, 150.0], [7.0, 154.0], [8.0, 149.0], [9.0, 159.0], [10.0, 158.0], [11.0, 160.0], [12.0, 153.0], [13.0, 152.0], [14.0, 158.0], [15.0, 159.0], [16.0, 150.0], [17.0, 153.0], [18.0, 159.0], [19.0, 149.0], [20.0, 157.0], [21.0, 163.0], [22.0, 160.0], [23.0, 158.0], [24.0, 153.0], [25.0, 155.0], [26.0, 159.0], [27.0, 156.0], [28.0, 152.0], [29.0, 156.0], [30.0, 150.0], [31.0, 148.0], [32.0, 151.0], [33.0, 154.0], [34.0, 151.0], [35.0, 151.0], [36.0, 158.0], [37.0, 147.0], [38.0, 156.0], [39.0, 147.0], [40.0, 152.0], [41.0, 157.0], [42.0, 154.0], [43.0, 158.0], [44.0, 147.0], [45.0, 154.0], [46.0, 183.0], [47.0, 153.0], [48.0, 153.0], [49.0, 152.0], [50.0, 149.0], [51.0, 154.0], [52.0, 174.0], [53.0, 151.0], [54.0, 148.0], [55.0, 149.0], [56.0, 154.0], [57.0, 153.0], [58.0, 148.0], [59.0, 150.0], [60.0, 153.0], [61.0, 153.0], [62.0, 151.0], [63.0, 147.0], [64.0, 179.0], [65.0, 149.0], [66.0, 157.0], [67.0, 158.0], [68.0, 155.0], [69.0, 161.0], [70.0, 146.0], [71.0, 148.0], [72.0, 146.0], [73.0, 163.0], [74.0, 147.0], [75.0, 160.0], [76.0, 153.0], [77.0, 153.0], [78.0, 152.0], [79.0, 146.0], [80.0, 145.0], [81.0, 147.0], [82.0, 150.0], [83.0, 149.0], [84.0, 155.0], [85.0, 151.0], [86.0, 154.0], [87.0, 159.0], [88.0, 153.0], [89.0, 146.0], [90.0, 157.0], [91.0, 152.0], [92.0, 152.0], [93.0, 157.0], [94.0, 149.0], [95.0, 157.0], [96.0, 151.0], [97.0, 146.0], [98.0, 148.0], [99.0, 147.0], [100.0, 151.0], [101.0, 147.0], [102.0, 160.0], [103.0, 157.0], [104.0, 153.0], [105.0, 156.0], [106.0, 149.0], [107.0, 151.0], [108.0, 152.0], [109.0, 160.0], [110.0, 149.0], [111.0, 152.0], [112.0, 148.0], [113.0, 162.0], [114.0, 162.0], [115.0, 145.0], [116.0, 151.0], [117.0, 152.0], [118.0, 155.0], [119.0, 191.0], [120.0, 146.0], [121.0, 162.0], [122.0, 147.0], [123.0, 149.0], [124.0, 148.0], [125.0, 151.0], [126.0, 148.0], [127.0, 149.0], [128.0, 159.0], [129.0, 160.0], [130.0, 152.0], [131.0, 161.0], [132.0, 161.0], [133.0, 148.0], [134.0, 145.0], [135.0, 153.0], [136.0, 151.0], [137.0, 166.0], [138.0, 159.0], [139.0, 156.0], [140.0, 144.0], [141.0, 170.0], [142.0, 155.0], [143.0, 151.0], [144.0, 162.0], [145.0, 150.0], [146.0, 167.0], [147.0, 154.0], [148.0, 154.0], [149.0, 156.0], [150.0, 143.0], [151.0, 150.0], [152.0, 148.0], [153.0, 155.0], [154.0, 148.0], [155.0, 146.0], [1.0, 180.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[78.0, 153.95483870967738]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[2.0, 2.5], [5.0, 29.0], [6.0, 32.0], [7.0, 1.0], [8.0, 33.5], [9.0, 2.0], [10.0, 16.5], [11.0, 28.0], [12.0, 8.0], [13.0, 31.0], [14.0, 18.0], [15.0, 13.8], [16.0, 32.0], [17.0, 17.5], [18.0, 28.0], [19.0, 22.333333333333332], [20.0, 26.666666666666668], [21.0, 16.75], [22.0, 7.142857142857142], [23.0, 30.333333333333336], [24.0, 29.0], [25.0, 25.8], [26.0, 21.0], [27.0, 30.666666666666668], [28.0, 11.999999999999998], [29.0, 19.166666666666664], [30.0, 18.83333333333333], [31.0, 9.73684210526316], [32.0, 25.0], [33.0, 30.5], [34.0, 11.727272727272728], [35.0, 25.749999999999996], [36.0, 52.666666666666664], [37.0, 24.714285714285715], [38.0, 16.25], [39.0, 21.77777777777778], [40.0, 139.85714285714286], [41.0, 8.857142857142858], [42.0, 7.0], [43.0, 20.0], [44.0, 16.0], [45.0, 31.857142857142854], [46.0, 31.833333333333332], [47.0, 9.166666666666666], [48.0, 15.799999999999999], [49.0, 27.166666666666668], [50.0, 29.363636363636363], [51.0, 15.625000000000002], [52.0, 17.5], [53.0, 144.33333333333334], [54.0, 264.0], [55.0, 134.86666666666665], [56.0, 30.2], [57.0, 10.545454545454545], [58.0, 19.666666666666664], [59.0, 28.307692307692314], [60.0, 12.357142857142858], [61.0, 17.799999999999997], [62.0, 13.629629629629632], [63.0, 28.5], [64.0, 24.333333333333332], [65.0, 16.333333333333332], [66.0, 27.0], [67.0, 11.083333333333334], [68.0, 17.42857142857143], [69.0, 17.900000000000002], [70.0, 13.578947368421057], [71.0, 29.6], [72.0, 188.54545454545456], [73.0, 15.294117647058824], [74.0, 32.0], [75.0, 11.470588235294116], [76.0, 323.42857142857144], [77.0, 260.66666666666663], [78.0, 451.0], [79.0, 582.875], [80.0, 630.25], [81.0, 267.21052631578937], [82.0, 212.2], [83.0, 159.59090909090912], [84.0, 361.4], [85.0, 336.0909090909091], [86.0, 76.63999999999999], [87.0, 33.333333333333336], [88.0, 28.2], [89.0, 97.89473684210526], [90.0, 50.91666666666667], [91.0, 138.23529411764707], [92.0, 600.9], [93.0, 612.6363636363635], [94.0, 544.7142857142858], [95.0, 958.3000000000001], [96.0, 252.4761904761905], [97.0, 127.1818181818182], [98.0, 642.6666666666666], [99.0, 138.8], [100.0, 157.85714285714283], [101.0, 239.22222222222223], [102.0, 164.50000000000003], [103.0, 557.8], [104.0, 210.2], [105.0, 484.2666666666667], [106.0, 403.33333333333337], [107.0, 787.0], [108.0, 577.6250000000001], [109.0, 231.78260869565221], [110.0, 751.5], [111.0, 938.3333333333333], [112.0, 606.375], [113.0, 130.4444444444445], [114.0, 399.3636363636364], [115.0, 1121.857142857143], [116.0, 406.8], [117.0, 440.3529411764706], [118.0, 471.2272727272727], [119.0, 882.4285714285714], [120.0, 1193.714285714286], [121.0, 346.17241379310354], [122.0, 533.2068965517241], [123.0, 556.8695652173913], [124.0, 172.8571428571429], [125.0, 314.3999999999999], [126.0, 218.6666666666666], [127.0, 1356.5555555555557], [128.0, 794.7727272727275], [129.0, 304.375], [130.0, 958.5], [131.0, 665.3333333333333], [132.0, 428.93103448275866], [133.0, 756.1176470588233], [134.0, 886.1428571428572], [135.0, 704.235294117647], [136.0, 784.4545454545455], [137.0, 204.44444444444443], [138.0, 826.5416666666666], [140.0, 276.0], [141.0, 829.8181818181818], [142.0, 320.1290322580646], [143.0, 491.7857142857144], [139.0, 3.0], [144.0, 240.1714285714286], [145.0, 398.921052631579], [146.0, 329.45833333333326], [147.0, 267.60975609756093], [148.0, 1395.764705882353], [149.0, 157.82098765432093], [150.0, 834.921052631579], [151.0, 136.52830188679243], [152.0, 823.923076923077], [153.0, 200.13636363636357], [154.0, 140.8453608247422], [155.0, 1563.5677722247447]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[147.92748387096714, 1374.8301290322554]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 155.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 68.9, "minX": 1.5876831E12, "maxY": 255369.81666666668, "series": [{"data": [[1.58768322E12, 227456.73333333334], [1.58768352E12, 233470.68333333332], [1.58768358E12, 255369.81666666668], [1.58768328E12, 221361.63333333333], [1.58768334E12, 229551.71666666667], [1.58768364E12, 13183.75], [1.5876837E12, 13085.7], [1.5876831E12, 122827.95], [1.5876834E12, 220452.96666666667], [1.58768346E12, 251797.21666666667], [1.58768376E12, 8511.8], [1.58768382E12, 68.9], [1.58768316E12, 241830.21666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58768322E12, 14006.766666666666], [1.58768352E12, 14528.633333333333], [1.58768358E12, 18096.7], [1.58768328E12, 13899.5], [1.58768334E12, 15079.466666666667], [1.58768364E12, 35571.5], [1.5876837E12, 35306.666666666664], [1.5876831E12, 7827.966666666666], [1.5876834E12, 13699.4], [1.58768346E12, 16051.933333333332], [1.58768376E12, 22966.6], [1.58768382E12, 185.96666666666667], [1.58768316E12, 15003.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768382E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2.1179092382495934, "minX": 1.5876831E12, "maxY": 3024.0464396284815, "series": [{"data": [[1.58768322E12, 2831.2272262026595], [1.58768352E12, 2727.331355093967], [1.58768358E12, 1875.5532754538274], [1.58768328E12, 3024.0464396284815], [1.58768334E12, 2558.913988657841], [1.58768364E12, 3.14709418837675], [1.5876837E12, 2.1179092382495934], [1.5876831E12, 288.8080808080808], [1.5876834E12, 2933.8674321503086], [1.58768346E12, 2329.1957484499558], [1.58768376E12, 3.4907975460122693], [1.58768382E12, 2.1333333333333337], [1.58768316E12, 2307.9815175097256]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.5876831E12, 153.8715596330275], [1.58768316E12, 154.15217391304353]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768322E12, 2819.3513238289197], [1.58768352E12, 2673.8031341821697], [1.58768358E12, 1878.9406645569602], [1.58768328E12, 2916.3579487179504], [1.58768334E12, 2551.7602283539486], [1.58768364E12, 2.641935483870969], [1.5876837E12, 2.3829959514170054], [1.5876831E12, 308.06088560885604], [1.5876834E12, 2924.780793319414], [1.58768346E12, 2284.5295169946335], [1.58768376E12, 2.4292035398230096], [1.58768382E12, 2.272727272727273], [1.58768316E12, 2267.363288718931]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768382E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2.1134521880064847, "minX": 1.5876831E12, "maxY": 3023.8606811145514, "series": [{"data": [[1.58768322E12, 2830.9007164790155], [1.58768352E12, 2726.7062314540076], [1.58768358E12, 1875.3520126282544], [1.58768328E12, 3023.8606811145514], [1.58768334E12, 2558.439508506612], [1.58768364E12, 3.143486973947899], [1.5876837E12, 2.1134521880064847], [1.5876831E12, 288.6101010101011], [1.5876834E12, 2933.566805845512], [1.58768346E12, 2327.2984942426924], [1.58768376E12, 3.4852760736196355], [1.58768382E12, 2.1333333333333337], [1.58768316E12, 2307.6478599221787]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.5876831E12, 153.79816513761472], [1.58768316E12, 154.13043478260872]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768322E12, 2818.812627291242], [1.58768352E12, 2672.9431929480884], [1.58768358E12, 1878.6922468354467], [1.58768328E12, 2916.1671794871813], [1.58768334E12, 2551.417697431017], [1.58768364E12, 2.637096774193551], [1.5876837E12, 2.379757085020245], [1.5876831E12, 307.8948339483394], [1.5876834E12, 2924.437369519831], [1.58768346E12, 2282.5858676207517], [1.58768376E12, 2.422250316055631], [1.58768382E12, 2.272727272727273], [1.58768316E12, 2266.9349904397677]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768382E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.5876831E12, "maxY": 1.0642201834862388, "series": [{"data": [[1.58768322E12, 0.4749232343909929], [1.58768352E12, 0.4055390702274975], [1.58768358E12, 0.3875295974743484], [1.58768328E12, 0.4643962848297215], [1.58768334E12, 0.37334593572778796], [1.58768364E12, 0.0], [1.5876837E12, 0.0], [1.5876831E12, 0.23636363636363644], [1.5876834E12, 0.41544885177453], [1.58768346E12, 0.4348981399468557], [1.58768376E12, 0.0], [1.58768382E12, 0.0], [1.58768316E12, 0.42315175097276203]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.5876831E12, 1.0642201834862388], [1.58768316E12, 0.4130434782608695]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768322E12, 0.5213849287169043], [1.58768352E12, 0.44074436826640523], [1.58768358E12, 0.42800632911392406], [1.58768328E12, 0.48923076923076914], [1.58768334E12, 0.46336822074215034], [1.58768364E12, 0.444758064516129], [1.5876837E12, 0.4526315789473686], [1.5876831E12, 0.6014760147601472], [1.5876834E12, 0.43945720250521875], [1.58768346E12, 0.4284436493738818], [1.58768376E12, 0.464601769911505], [1.58768382E12, 0.36363636363636365], [1.58768316E12, 0.5162523900573626]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768382E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.5876831E12, "maxY": 10086.0, "series": [{"data": [[1.58768322E12, 9153.0], [1.58768352E12, 6584.0], [1.58768358E12, 7208.0], [1.5876831E12, 1219.0], [1.5876834E12, 8961.0], [1.58768346E12, 5307.0], [1.58768328E12, 10086.0], [1.58768334E12, 7951.0], [1.58768316E12, 6876.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58768322E12, 35.0], [1.58768352E12, 173.0], [1.58768358E12, 127.0], [1.5876831E12, 15.0], [1.5876834E12, 118.0], [1.58768346E12, 216.0], [1.58768328E12, 144.0], [1.58768334E12, 132.0], [1.58768316E12, 18.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58768322E12, 5341.0], [1.58768352E12, 4354.9], [1.58768358E12, 4013.3000000000006], [1.5876831E12, 787.8999999999999], [1.5876834E12, 5702.500000000001], [1.58768346E12, 3070.4], [1.58768328E12, 4225.4], [1.58768334E12, 4974.0], [1.58768316E12, 4691.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58768322E12, 7738.400000000003], [1.58768352E12, 5324.789999999999], [1.58768358E12, 5164.18], [1.5876831E12, 1084.0], [1.5876834E12, 7337.02], [1.58768346E12, 4197.240000000005], [1.58768328E12, 8422.64], [1.58768334E12, 6263.7], [1.58768316E12, 5787.16]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58768322E12, 5889.0], [1.58768352E12, 4796.249999999999], [1.58768358E12, 4418.45], [1.5876831E12, 922.9499999999996], [1.5876834E12, 6276.2], [1.58768346E12, 3253.3999999999996], [1.58768328E12, 6133.699999999996], [1.58768334E12, 5525.8499999999985], [1.58768316E12, 5048.299999999997]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768358E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 4310.0, "series": [{"data": [[2.0, 167.0], [3.0, 146.0], [5.0, 150.0], [7.0, 608.5], [8.0, 33.5], [9.0, 51.0], [10.0, 37.0], [12.0, 34.0], [14.0, 28.5], [15.0, 2027.0], [17.0, 60.0], [18.0, 26.0], [19.0, 2456.0], [20.0, 2375.0], [21.0, 2446.0], [22.0, 1859.5], [23.0, 1088.0], [24.0, 2370.5], [25.0, 2422.0], [26.0, 2555.0], [27.0, 2793.5], [28.0, 2572.0], [29.0, 2943.0], [30.0, 2024.5], [31.0, 2376.0], [33.0, 2290.5], [32.0, 2639.0], [35.0, 2392.0], [34.0, 2354.5], [37.0, 1974.0], [36.0, 2185.5], [38.0, 2265.5], [39.0, 2289.5], [40.0, 2233.0], [41.0, 1878.0], [42.0, 2216.5], [43.0, 2179.0], [44.0, 1928.5], [45.0, 2891.0], [47.0, 2044.0], [46.0, 2403.0], [48.0, 1531.5], [49.0, 1222.5], [50.0, 2205.0], [51.0, 1384.0], [52.0, 2238.0], [55.0, 319.0], [57.0, 739.0], [56.0, 1533.0], [59.0, 2757.0], [58.0, 460.5], [60.0, 983.5], [63.0, 1513.0], [65.0, 1871.0], [66.0, 1241.0], [69.0, 1987.0], [76.0, 2212.0], [80.0, 1267.0], [86.0, 963.5], [98.0, 1972.0], [113.0, 433.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 2.5], [4.0, 1.0], [5.0, 2.0], [6.0, 2.0], [8.0, 2.0], [10.0, 2.0], [12.0, 2.5], [16.0, 2.0], [19.0, 2.0], [20.0, 2.0], [21.0, 2.0], [25.0, 2.0], [26.0, 4.0], [27.0, 1588.5], [28.0, 2.0], [29.0, 2.0], [32.0, 2.0], [33.0, 2.0], [34.0, 2.0], [35.0, 2.0], [37.0, 865.5], [36.0, 4.0], [39.0, 2.0], [40.0, 656.0], [41.0, 2.0], [43.0, 2.0], [42.0, 2.0], [45.0, 2.0], [44.0, 2.0], [53.0, 2.0], [55.0, 2.0], [54.0, 2.0], [56.0, 2.0], [58.0, 3.0], [59.0, 2.0], [61.0, 2.0], [60.0, 2.0], [63.0, 2.0], [65.0, 4310.0], [64.0, 2.0], [67.0, 2.0], [66.0, 2.0], [70.0, 2.0], [71.0, 2.0], [68.0, 2.0], [75.0, 2.0], [74.0, 2.0], [73.0, 2.0], [72.0, 2.0], [76.0, 2.0], [78.0, 2.0], [79.0, 2.0], [77.0, 2.0], [80.0, 2.0], [82.0, 2.0], [81.0, 2.0], [83.0, 2.0], [85.0, 2.0], [84.0, 2.0], [86.0, 2.0], [87.0, 2.0], [90.0, 2.0], [88.0, 2.0], [89.0, 2.0], [91.0, 2.0], [94.0, 2.0], [92.0, 2.0], [95.0, 2.0], [98.0, 1197.0], [105.0, 2.0], [111.0, 2.0], [113.0, 3015.0], [114.0, 2.0], [1.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 114.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 4310.0, "series": [{"data": [[2.0, 166.0], [3.0, 146.0], [5.0, 149.0], [7.0, 608.5], [8.0, 33.5], [9.0, 51.0], [10.0, 36.5], [12.0, 34.0], [14.0, 28.0], [15.0, 2027.0], [17.0, 60.0], [18.0, 26.0], [19.0, 2456.0], [20.0, 2375.0], [21.0, 2446.0], [22.0, 1859.0], [23.0, 1088.0], [24.0, 2370.5], [25.0, 2422.0], [26.0, 2554.0], [27.0, 2793.5], [28.0, 2572.0], [29.0, 2942.0], [30.0, 2024.5], [31.0, 2376.0], [33.0, 2290.5], [32.0, 2639.0], [35.0, 2392.0], [34.0, 2354.5], [37.0, 1974.0], [36.0, 2185.0], [38.0, 2265.5], [39.0, 2289.5], [40.0, 2231.0], [41.0, 1878.0], [42.0, 2216.5], [43.0, 2179.0], [44.0, 1928.5], [45.0, 2884.0], [47.0, 2044.0], [46.0, 2398.0], [48.0, 1531.5], [49.0, 1222.5], [50.0, 2205.0], [51.0, 1384.0], [52.0, 2238.0], [55.0, 317.0], [57.0, 739.0], [56.0, 1532.5], [59.0, 2751.0], [58.0, 460.5], [60.0, 983.5], [63.0, 1512.0], [65.0, 1871.0], [66.0, 1240.0], [69.0, 1987.0], [76.0, 2212.0], [80.0, 1267.0], [86.0, 963.5], [98.0, 1972.0], [113.0, 433.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 2.5], [4.0, 1.0], [5.0, 2.0], [6.0, 2.0], [8.0, 2.0], [10.0, 2.0], [12.0, 2.5], [16.0, 2.0], [19.0, 2.0], [20.0, 2.0], [21.0, 2.0], [25.0, 2.0], [26.0, 4.0], [27.0, 1588.5], [28.0, 2.0], [29.0, 2.0], [32.0, 2.0], [33.0, 2.0], [34.0, 2.0], [35.0, 2.0], [37.0, 865.5], [36.0, 4.0], [39.0, 2.0], [40.0, 656.0], [41.0, 2.0], [43.0, 2.0], [42.0, 2.0], [45.0, 2.0], [44.0, 2.0], [53.0, 2.0], [55.0, 2.0], [54.0, 2.0], [56.0, 2.0], [58.0, 3.0], [59.0, 2.0], [61.0, 2.0], [60.0, 2.0], [63.0, 2.0], [65.0, 4310.0], [64.0, 2.0], [67.0, 2.0], [66.0, 2.0], [70.0, 2.0], [71.0, 2.0], [68.0, 2.0], [75.0, 2.0], [74.0, 2.0], [73.0, 2.0], [72.0, 2.0], [76.0, 2.0], [78.0, 2.0], [79.0, 2.0], [77.0, 2.0], [80.0, 2.0], [82.0, 2.0], [81.0, 2.0], [83.0, 2.0], [85.0, 2.0], [84.0, 2.0], [86.0, 2.0], [87.0, 2.0], [90.0, 2.0], [88.0, 2.0], [89.0, 2.0], [91.0, 2.0], [94.0, 2.0], [92.0, 2.0], [95.0, 2.0], [98.0, 1197.0], [105.0, 2.0], [111.0, 2.0], [113.0, 3015.0], [114.0, 2.0], [1.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 114.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.43333333333333335, "minX": 1.5876831E12, "maxY": 82.91666666666667, "series": [{"data": [[1.58768322E12, 32.766666666666666], [1.58768352E12, 33.86666666666667], [1.58768358E12, 40.666666666666664], [1.58768328E12, 32.233333333333334], [1.58768334E12, 34.8], [1.58768364E12, 82.91666666666667], [1.5876837E12, 82.3], [1.5876831E12, 19.716666666666665], [1.5876834E12, 32.483333333333334], [1.58768346E12, 37.11666666666667], [1.58768376E12, 53.53333333333333], [1.58768382E12, 0.43333333333333335], [1.58768316E12, 36.416666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768382E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5876831E12, "maxY": 82.91666666666667, "series": [{"data": [[1.58768322E12, 32.65], [1.58768352E12, 33.5], [1.58768358E12, 36.5], [1.5876831E12, 19.1], [1.5876834E12, 31.633333333333333], [1.58768346E12, 36.083333333333336], [1.58768328E12, 31.75], [1.58768334E12, 32.86666666666667], [1.58768316E12, 35.333333333333336]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58768352E12, 0.11666666666666667], [1.58768346E12, 0.016666666666666666]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.5876837E12, 82.3], [1.58768352E12, 0.25], [1.58768358E12, 5.683333333333334], [1.5876834E12, 0.3], [1.58768346E12, 1.3166666666666667], [1.58768376E12, 53.53333333333333], [1.58768328E12, 0.65], [1.58768382E12, 0.43333333333333335], [1.58768334E12, 2.283333333333333], [1.58768364E12, 82.91666666666667]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.58768346E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768382E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.5876831E12, "maxY": 41.583333333333336, "series": [{"data": [[1.5876831E12, 1.8166666666666667], [1.58768316E12, 0.7666666666666667]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58768322E12, 16.283333333333335], [1.58768352E12, 16.65], [1.58768358E12, 18.233333333333334], [1.5876831E12, 8.25], [1.5876834E12, 15.816666666666666], [1.58768346E12, 18.066666666666666], [1.58768328E12, 15.883333333333333], [1.58768334E12, 16.45], [1.58768316E12, 17.133333333333333]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.5876837E12, 41.13333333333333], [1.58768352E12, 0.2], [1.58768358E12, 2.8833333333333333], [1.5876834E12, 0.15], [1.58768346E12, 0.75], [1.58768376E12, 27.166666666666668], [1.58768328E12, 0.26666666666666666], [1.58768382E12, 0.25], [1.58768334E12, 1.1833333333333333], [1.58768364E12, 41.583333333333336]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.58768322E12, 16.366666666666667], [1.58768352E12, 16.85], [1.58768358E12, 18.266666666666666], [1.5876831E12, 9.033333333333333], [1.5876834E12, 15.816666666666666], [1.58768346E12, 18.016666666666666], [1.58768328E12, 15.866666666666667], [1.58768334E12, 16.416666666666668], [1.58768316E12, 17.433333333333334]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.5876837E12, 41.166666666666664], [1.58768352E12, 0.16666666666666666], [1.58768358E12, 2.8], [1.5876834E12, 0.15], [1.58768346E12, 0.6166666666666667], [1.58768376E12, 26.366666666666667], [1.58768328E12, 0.38333333333333336], [1.58768382E12, 0.18333333333333332], [1.58768334E12, 1.1], [1.58768364E12, 41.333333333333336]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768382E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.5876831E12, "maxY": 82.91666666666667, "series": [{"data": [[1.58768322E12, 32.65], [1.58768352E12, 33.5], [1.58768358E12, 36.5], [1.5876831E12, 19.1], [1.5876834E12, 31.633333333333333], [1.58768346E12, 36.083333333333336], [1.58768328E12, 31.75], [1.58768334E12, 32.86666666666667], [1.58768316E12, 35.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.5876837E12, 82.3], [1.58768352E12, 0.36666666666666664], [1.58768358E12, 5.683333333333334], [1.5876834E12, 0.3], [1.58768346E12, 1.3666666666666667], [1.58768376E12, 53.53333333333333], [1.58768328E12, 0.65], [1.58768382E12, 0.43333333333333335], [1.58768334E12, 2.283333333333333], [1.58768364E12, 82.91666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768382E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

