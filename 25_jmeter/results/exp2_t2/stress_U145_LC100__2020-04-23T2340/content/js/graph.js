/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 8157.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 2.0], [14.5, 2.0], [14.6, 2.0], [14.7, 2.0], [14.8, 2.0], [14.9, 2.0], [15.0, 2.0], [15.1, 2.0], [15.2, 2.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 2.0], [17.7, 2.0], [17.8, 2.0], [17.9, 2.0], [18.0, 2.0], [18.1, 2.0], [18.2, 2.0], [18.3, 2.0], [18.4, 2.0], [18.5, 2.0], [18.6, 2.0], [18.7, 2.0], [18.8, 2.0], [18.9, 2.0], [19.0, 2.0], [19.1, 2.0], [19.2, 2.0], [19.3, 2.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 2.0], [20.0, 2.0], [20.1, 2.0], [20.2, 2.0], [20.3, 2.0], [20.4, 2.0], [20.5, 2.0], [20.6, 2.0], [20.7, 2.0], [20.8, 2.0], [20.9, 2.0], [21.0, 2.0], [21.1, 2.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 2.0], [21.6, 2.0], [21.7, 2.0], [21.8, 2.0], [21.9, 2.0], [22.0, 2.0], [22.1, 2.0], [22.2, 2.0], [22.3, 2.0], [22.4, 2.0], [22.5, 2.0], [22.6, 2.0], [22.7, 2.0], [22.8, 2.0], [22.9, 2.0], [23.0, 2.0], [23.1, 2.0], [23.2, 2.0], [23.3, 2.0], [23.4, 2.0], [23.5, 2.0], [23.6, 2.0], [23.7, 2.0], [23.8, 2.0], [23.9, 2.0], [24.0, 2.0], [24.1, 2.0], [24.2, 2.0], [24.3, 2.0], [24.4, 2.0], [24.5, 2.0], [24.6, 2.0], [24.7, 2.0], [24.8, 2.0], [24.9, 2.0], [25.0, 2.0], [25.1, 2.0], [25.2, 2.0], [25.3, 2.0], [25.4, 2.0], [25.5, 3.0], [25.6, 3.0], [25.7, 3.0], [25.8, 3.0], [25.9, 3.0], [26.0, 3.0], [26.1, 3.0], [26.2, 3.0], [26.3, 3.0], [26.4, 3.0], [26.5, 3.0], [26.6, 3.0], [26.7, 3.0], [26.8, 3.0], [26.9, 3.0], [27.0, 3.0], [27.1, 3.0], [27.2, 4.0], [27.3, 4.0], [27.4, 4.0], [27.5, 4.0], [27.6, 5.0], [27.7, 6.0], [27.8, 7.0], [27.9, 10.0], [28.0, 16.0], [28.1, 18.0], [28.2, 19.0], [28.3, 20.0], [28.4, 20.0], [28.5, 21.0], [28.6, 21.0], [28.7, 21.0], [28.8, 22.0], [28.9, 22.0], [29.0, 23.0], [29.1, 23.0], [29.2, 24.0], [29.3, 24.0], [29.4, 25.0], [29.5, 25.0], [29.6, 25.0], [29.7, 26.0], [29.8, 26.0], [29.9, 26.0], [30.0, 26.0], [30.1, 27.0], [30.2, 27.0], [30.3, 28.0], [30.4, 28.0], [30.5, 28.0], [30.6, 29.0], [30.7, 29.0], [30.8, 29.0], [30.9, 30.0], [31.0, 30.0], [31.1, 31.0], [31.2, 31.0], [31.3, 31.0], [31.4, 32.0], [31.5, 32.0], [31.6, 33.0], [31.7, 33.0], [31.8, 34.0], [31.9, 34.0], [32.0, 35.0], [32.1, 35.0], [32.2, 36.0], [32.3, 37.0], [32.4, 37.0], [32.5, 38.0], [32.6, 39.0], [32.7, 40.0], [32.8, 41.0], [32.9, 43.0], [33.0, 45.0], [33.1, 48.0], [33.2, 51.0], [33.3, 55.0], [33.4, 60.0], [33.5, 70.0], [33.6, 81.0], [33.7, 96.0], [33.8, 116.0], [33.9, 135.0], [34.0, 164.0], [34.1, 190.0], [34.2, 225.0], [34.3, 252.0], [34.4, 276.0], [34.5, 312.0], [34.6, 322.0], [34.7, 335.0], [34.8, 361.0], [34.9, 388.0], [35.0, 402.0], [35.1, 418.0], [35.2, 434.0], [35.3, 445.0], [35.4, 457.0], [35.5, 475.0], [35.6, 490.0], [35.7, 499.0], [35.8, 509.0], [35.9, 520.0], [36.0, 529.0], [36.1, 539.0], [36.2, 548.0], [36.3, 556.0], [36.4, 563.0], [36.5, 579.0], [36.6, 586.0], [36.7, 593.0], [36.8, 598.0], [36.9, 605.0], [37.0, 614.0], [37.1, 620.0], [37.2, 628.0], [37.3, 639.0], [37.4, 645.0], [37.5, 657.0], [37.6, 667.0], [37.7, 678.0], [37.8, 681.0], [37.9, 686.0], [38.0, 691.0], [38.1, 698.0], [38.2, 704.0], [38.3, 711.0], [38.4, 714.0], [38.5, 722.0], [38.6, 732.0], [38.7, 738.0], [38.8, 748.0], [38.9, 757.0], [39.0, 762.0], [39.1, 769.0], [39.2, 776.0], [39.3, 783.0], [39.4, 787.0], [39.5, 792.0], [39.6, 798.0], [39.7, 804.0], [39.8, 812.0], [39.9, 821.0], [40.0, 830.0], [40.1, 838.0], [40.2, 843.0], [40.3, 850.0], [40.4, 857.0], [40.5, 863.0], [40.6, 869.0], [40.7, 872.0], [40.8, 878.0], [40.9, 883.0], [41.0, 887.0], [41.1, 893.0], [41.2, 898.0], [41.3, 904.0], [41.4, 912.0], [41.5, 918.0], [41.6, 924.0], [41.7, 929.0], [41.8, 935.0], [41.9, 941.0], [42.0, 948.0], [42.1, 955.0], [42.2, 960.0], [42.3, 965.0], [42.4, 974.0], [42.5, 983.0], [42.6, 987.0], [42.7, 994.0], [42.8, 999.0], [42.9, 1002.0], [43.0, 1009.0], [43.1, 1014.0], [43.2, 1019.0], [43.3, 1026.0], [43.4, 1033.0], [43.5, 1038.0], [43.6, 1044.0], [43.7, 1050.0], [43.8, 1053.0], [43.9, 1059.0], [44.0, 1064.0], [44.1, 1072.0], [44.2, 1077.0], [44.3, 1082.0], [44.4, 1085.0], [44.5, 1090.0], [44.6, 1093.0], [44.7, 1097.0], [44.8, 1102.0], [44.9, 1106.0], [45.0, 1110.0], [45.1, 1116.0], [45.2, 1123.0], [45.3, 1131.0], [45.4, 1136.0], [45.5, 1142.0], [45.6, 1145.0], [45.7, 1153.0], [45.8, 1160.0], [45.9, 1165.0], [46.0, 1172.0], [46.1, 1178.0], [46.2, 1184.0], [46.3, 1188.0], [46.4, 1194.0], [46.5, 1198.0], [46.6, 1203.0], [46.7, 1207.0], [46.8, 1211.0], [46.9, 1216.0], [47.0, 1220.0], [47.1, 1224.0], [47.2, 1227.0], [47.3, 1230.0], [47.4, 1235.0], [47.5, 1240.0], [47.6, 1243.0], [47.7, 1247.0], [47.8, 1251.0], [47.9, 1257.0], [48.0, 1262.0], [48.1, 1270.0], [48.2, 1274.0], [48.3, 1277.0], [48.4, 1280.0], [48.5, 1285.0], [48.6, 1290.0], [48.7, 1295.0], [48.8, 1298.0], [48.9, 1306.0], [49.0, 1311.0], [49.1, 1315.0], [49.2, 1321.0], [49.3, 1325.0], [49.4, 1330.0], [49.5, 1335.0], [49.6, 1341.0], [49.7, 1349.0], [49.8, 1352.0], [49.9, 1357.0], [50.0, 1363.0], [50.1, 1367.0], [50.2, 1371.0], [50.3, 1377.0], [50.4, 1382.0], [50.5, 1386.0], [50.6, 1389.0], [50.7, 1394.0], [50.8, 1398.0], [50.9, 1402.0], [51.0, 1406.0], [51.1, 1409.0], [51.2, 1412.0], [51.3, 1416.0], [51.4, 1422.0], [51.5, 1428.0], [51.6, 1432.0], [51.7, 1438.0], [51.8, 1440.0], [51.9, 1444.0], [52.0, 1448.0], [52.1, 1452.0], [52.2, 1456.0], [52.3, 1462.0], [52.4, 1470.0], [52.5, 1475.0], [52.6, 1479.0], [52.7, 1483.0], [52.8, 1490.0], [52.9, 1496.0], [53.0, 1500.0], [53.1, 1505.0], [53.2, 1507.0], [53.3, 1511.0], [53.4, 1514.0], [53.5, 1517.0], [53.6, 1520.0], [53.7, 1523.0], [53.8, 1526.0], [53.9, 1531.0], [54.0, 1535.0], [54.1, 1539.0], [54.2, 1544.0], [54.3, 1551.0], [54.4, 1554.0], [54.5, 1558.0], [54.6, 1562.0], [54.7, 1567.0], [54.8, 1572.0], [54.9, 1577.0], [55.0, 1580.0], [55.1, 1582.0], [55.2, 1587.0], [55.3, 1591.0], [55.4, 1596.0], [55.5, 1599.0], [55.6, 1602.0], [55.7, 1605.0], [55.8, 1607.0], [55.9, 1611.0], [56.0, 1615.0], [56.1, 1619.0], [56.2, 1625.0], [56.3, 1627.0], [56.4, 1631.0], [56.5, 1636.0], [56.6, 1639.0], [56.7, 1646.0], [56.8, 1649.0], [56.9, 1653.0], [57.0, 1655.0], [57.1, 1659.0], [57.2, 1665.0], [57.3, 1670.0], [57.4, 1676.0], [57.5, 1680.0], [57.6, 1686.0], [57.7, 1689.0], [57.8, 1692.0], [57.9, 1697.0], [58.0, 1703.0], [58.1, 1710.0], [58.2, 1714.0], [58.3, 1720.0], [58.4, 1722.0], [58.5, 1728.0], [58.6, 1734.0], [58.7, 1741.0], [58.8, 1744.0], [58.9, 1747.0], [59.0, 1753.0], [59.1, 1757.0], [59.2, 1762.0], [59.3, 1766.0], [59.4, 1769.0], [59.5, 1775.0], [59.6, 1778.0], [59.7, 1784.0], [59.8, 1788.0], [59.9, 1794.0], [60.0, 1796.0], [60.1, 1801.0], [60.2, 1802.0], [60.3, 1809.0], [60.4, 1815.0], [60.5, 1819.0], [60.6, 1822.0], [60.7, 1825.0], [60.8, 1828.0], [60.9, 1833.0], [61.0, 1836.0], [61.1, 1843.0], [61.2, 1851.0], [61.3, 1856.0], [61.4, 1861.0], [61.5, 1865.0], [61.6, 1869.0], [61.7, 1875.0], [61.8, 1877.0], [61.9, 1883.0], [62.0, 1887.0], [62.1, 1890.0], [62.2, 1894.0], [62.3, 1901.0], [62.4, 1904.0], [62.5, 1912.0], [62.6, 1916.0], [62.7, 1920.0], [62.8, 1924.0], [62.9, 1928.0], [63.0, 1931.0], [63.1, 1937.0], [63.2, 1940.0], [63.3, 1945.0], [63.4, 1949.0], [63.5, 1953.0], [63.6, 1959.0], [63.7, 1965.0], [63.8, 1967.0], [63.9, 1972.0], [64.0, 1976.0], [64.1, 1982.0], [64.2, 1986.0], [64.3, 1990.0], [64.4, 1993.0], [64.5, 1998.0], [64.6, 2001.0], [64.7, 2007.0], [64.8, 2010.0], [64.9, 2017.0], [65.0, 2020.0], [65.1, 2023.0], [65.2, 2028.0], [65.3, 2033.0], [65.4, 2036.0], [65.5, 2042.0], [65.6, 2048.0], [65.7, 2053.0], [65.8, 2059.0], [65.9, 2062.0], [66.0, 2066.0], [66.1, 2072.0], [66.2, 2075.0], [66.3, 2079.0], [66.4, 2084.0], [66.5, 2089.0], [66.6, 2093.0], [66.7, 2099.0], [66.8, 2103.0], [66.9, 2108.0], [67.0, 2112.0], [67.1, 2117.0], [67.2, 2123.0], [67.3, 2127.0], [67.4, 2131.0], [67.5, 2135.0], [67.6, 2138.0], [67.7, 2142.0], [67.8, 2148.0], [67.9, 2156.0], [68.0, 2161.0], [68.1, 2164.0], [68.2, 2168.0], [68.3, 2172.0], [68.4, 2175.0], [68.5, 2179.0], [68.6, 2183.0], [68.7, 2188.0], [68.8, 2191.0], [68.9, 2195.0], [69.0, 2198.0], [69.1, 2204.0], [69.2, 2210.0], [69.3, 2215.0], [69.4, 2219.0], [69.5, 2222.0], [69.6, 2224.0], [69.7, 2227.0], [69.8, 2232.0], [69.9, 2237.0], [70.0, 2243.0], [70.1, 2247.0], [70.2, 2250.0], [70.3, 2255.0], [70.4, 2261.0], [70.5, 2264.0], [70.6, 2269.0], [70.7, 2273.0], [70.8, 2278.0], [70.9, 2284.0], [71.0, 2287.0], [71.1, 2290.0], [71.2, 2292.0], [71.3, 2296.0], [71.4, 2299.0], [71.5, 2303.0], [71.6, 2308.0], [71.7, 2312.0], [71.8, 2316.0], [71.9, 2318.0], [72.0, 2323.0], [72.1, 2329.0], [72.2, 2333.0], [72.3, 2338.0], [72.4, 2340.0], [72.5, 2344.0], [72.6, 2348.0], [72.7, 2353.0], [72.8, 2357.0], [72.9, 2361.0], [73.0, 2368.0], [73.1, 2374.0], [73.2, 2378.0], [73.3, 2385.0], [73.4, 2391.0], [73.5, 2394.0], [73.6, 2399.0], [73.7, 2406.0], [73.8, 2412.0], [73.9, 2415.0], [74.0, 2418.0], [74.1, 2425.0], [74.2, 2431.0], [74.3, 2436.0], [74.4, 2442.0], [74.5, 2449.0], [74.6, 2453.0], [74.7, 2458.0], [74.8, 2462.0], [74.9, 2468.0], [75.0, 2471.0], [75.1, 2474.0], [75.2, 2478.0], [75.3, 2483.0], [75.4, 2488.0], [75.5, 2492.0], [75.6, 2499.0], [75.7, 2504.0], [75.8, 2509.0], [75.9, 2513.0], [76.0, 2521.0], [76.1, 2526.0], [76.2, 2532.0], [76.3, 2538.0], [76.4, 2545.0], [76.5, 2552.0], [76.6, 2554.0], [76.7, 2559.0], [76.8, 2563.0], [76.9, 2568.0], [77.0, 2571.0], [77.1, 2576.0], [77.2, 2581.0], [77.3, 2589.0], [77.4, 2595.0], [77.5, 2599.0], [77.6, 2605.0], [77.7, 2610.0], [77.8, 2614.0], [77.9, 2620.0], [78.0, 2626.0], [78.1, 2632.0], [78.2, 2637.0], [78.3, 2644.0], [78.4, 2649.0], [78.5, 2654.0], [78.6, 2660.0], [78.7, 2669.0], [78.8, 2673.0], [78.9, 2679.0], [79.0, 2685.0], [79.1, 2690.0], [79.2, 2694.0], [79.3, 2703.0], [79.4, 2709.0], [79.5, 2714.0], [79.6, 2720.0], [79.7, 2728.0], [79.8, 2734.0], [79.9, 2741.0], [80.0, 2747.0], [80.1, 2753.0], [80.2, 2757.0], [80.3, 2762.0], [80.4, 2769.0], [80.5, 2774.0], [80.6, 2779.0], [80.7, 2785.0], [80.8, 2791.0], [80.9, 2798.0], [81.0, 2804.0], [81.1, 2811.0], [81.2, 2816.0], [81.3, 2822.0], [81.4, 2830.0], [81.5, 2833.0], [81.6, 2841.0], [81.7, 2845.0], [81.8, 2853.0], [81.9, 2859.0], [82.0, 2864.0], [82.1, 2870.0], [82.2, 2877.0], [82.3, 2884.0], [82.4, 2892.0], [82.5, 2903.0], [82.6, 2907.0], [82.7, 2917.0], [82.8, 2922.0], [82.9, 2928.0], [83.0, 2935.0], [83.1, 2945.0], [83.2, 2950.0], [83.3, 2959.0], [83.4, 2971.0], [83.5, 2976.0], [83.6, 2981.0], [83.7, 2987.0], [83.8, 2993.0], [83.9, 3001.0], [84.0, 3010.0], [84.1, 3016.0], [84.2, 3030.0], [84.3, 3035.0], [84.4, 3041.0], [84.5, 3054.0], [84.6, 3062.0], [84.7, 3071.0], [84.8, 3081.0], [84.9, 3090.0], [85.0, 3099.0], [85.1, 3111.0], [85.2, 3120.0], [85.3, 3128.0], [85.4, 3140.0], [85.5, 3149.0], [85.6, 3154.0], [85.7, 3165.0], [85.8, 3171.0], [85.9, 3180.0], [86.0, 3189.0], [86.1, 3198.0], [86.2, 3207.0], [86.3, 3215.0], [86.4, 3225.0], [86.5, 3235.0], [86.6, 3242.0], [86.7, 3249.0], [86.8, 3263.0], [86.9, 3274.0], [87.0, 3280.0], [87.1, 3287.0], [87.2, 3296.0], [87.3, 3305.0], [87.4, 3313.0], [87.5, 3323.0], [87.6, 3331.0], [87.7, 3344.0], [87.8, 3351.0], [87.9, 3360.0], [88.0, 3368.0], [88.1, 3374.0], [88.2, 3380.0], [88.3, 3389.0], [88.4, 3398.0], [88.5, 3410.0], [88.6, 3420.0], [88.7, 3429.0], [88.8, 3441.0], [88.9, 3455.0], [89.0, 3465.0], [89.1, 3474.0], [89.2, 3483.0], [89.3, 3490.0], [89.4, 3497.0], [89.5, 3508.0], [89.6, 3514.0], [89.7, 3531.0], [89.8, 3539.0], [89.9, 3550.0], [90.0, 3561.0], [90.1, 3571.0], [90.2, 3579.0], [90.3, 3592.0], [90.4, 3601.0], [90.5, 3616.0], [90.6, 3628.0], [90.7, 3638.0], [90.8, 3648.0], [90.9, 3659.0], [91.0, 3665.0], [91.1, 3673.0], [91.2, 3681.0], [91.3, 3693.0], [91.4, 3703.0], [91.5, 3713.0], [91.6, 3724.0], [91.7, 3736.0], [91.8, 3742.0], [91.9, 3751.0], [92.0, 3761.0], [92.1, 3772.0], [92.2, 3785.0], [92.3, 3797.0], [92.4, 3805.0], [92.5, 3817.0], [92.6, 3829.0], [92.7, 3841.0], [92.8, 3850.0], [92.9, 3861.0], [93.0, 3868.0], [93.1, 3882.0], [93.2, 3888.0], [93.3, 3903.0], [93.4, 3912.0], [93.5, 3930.0], [93.6, 3940.0], [93.7, 3949.0], [93.8, 3955.0], [93.9, 3967.0], [94.0, 3978.0], [94.1, 3991.0], [94.2, 3998.0], [94.3, 4008.0], [94.4, 4023.0], [94.5, 4037.0], [94.6, 4049.0], [94.7, 4067.0], [94.8, 4083.0], [94.9, 4105.0], [95.0, 4114.0], [95.1, 4133.0], [95.2, 4147.0], [95.3, 4165.0], [95.4, 4180.0], [95.5, 4194.0], [95.6, 4204.0], [95.7, 4220.0], [95.8, 4231.0], [95.9, 4241.0], [96.0, 4256.0], [96.1, 4271.0], [96.2, 4278.0], [96.3, 4290.0], [96.4, 4306.0], [96.5, 4316.0], [96.6, 4326.0], [96.7, 4347.0], [96.8, 4370.0], [96.9, 4395.0], [97.0, 4420.0], [97.1, 4435.0], [97.2, 4460.0], [97.3, 4482.0], [97.4, 4500.0], [97.5, 4535.0], [97.6, 4554.0], [97.7, 4583.0], [97.8, 4637.0], [97.9, 4672.0], [98.0, 4701.0], [98.1, 4739.0], [98.2, 4775.0], [98.3, 4811.0], [98.4, 4850.0], [98.5, 4905.0], [98.6, 4965.0], [98.7, 5032.0], [98.8, 5105.0], [98.9, 5167.0], [99.0, 5219.0], [99.1, 5283.0], [99.2, 5368.0], [99.3, 5474.0], [99.4, 5660.0], [99.5, 5902.0], [99.6, 6065.0], [99.7, 6370.0], [99.8, 6706.0], [99.9, 7193.0], [100.0, 8157.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 140.0], [0.1, 140.0], [0.2, 140.0], [0.3, 140.0], [0.4, 140.0], [0.5, 140.0], [0.6, 140.0], [0.7, 145.0], [0.8, 145.0], [0.9, 145.0], [1.0, 145.0], [1.1, 145.0], [1.2, 145.0], [1.3, 145.0], [1.4, 146.0], [1.5, 146.0], [1.6, 146.0], [1.7, 146.0], [1.8, 146.0], [1.9, 146.0], [2.0, 146.0], [2.1, 147.0], [2.2, 147.0], [2.3, 147.0], [2.4, 147.0], [2.5, 147.0], [2.6, 147.0], [2.7, 147.0], [2.8, 147.0], [2.9, 147.0], [3.0, 147.0], [3.1, 147.0], [3.2, 147.0], [3.3, 147.0], [3.4, 147.0], [3.5, 147.0], [3.6, 147.0], [3.7, 147.0], [3.8, 147.0], [3.9, 147.0], [4.0, 147.0], [4.1, 147.0], [4.2, 148.0], [4.3, 148.0], [4.4, 148.0], [4.5, 148.0], [4.6, 148.0], [4.7, 148.0], [4.8, 148.0], [4.9, 148.0], [5.0, 148.0], [5.1, 148.0], [5.2, 148.0], [5.3, 148.0], [5.4, 148.0], [5.5, 148.0], [5.6, 148.0], [5.7, 148.0], [5.8, 148.0], [5.9, 148.0], [6.0, 148.0], [6.1, 148.0], [6.2, 148.0], [6.3, 149.0], [6.4, 149.0], [6.5, 149.0], [6.6, 149.0], [6.7, 149.0], [6.8, 149.0], [6.9, 149.0], [7.0, 149.0], [7.1, 149.0], [7.2, 149.0], [7.3, 149.0], [7.4, 149.0], [7.5, 149.0], [7.6, 149.0], [7.7, 149.0], [7.8, 149.0], [7.9, 149.0], [8.0, 149.0], [8.1, 149.0], [8.2, 149.0], [8.3, 150.0], [8.4, 150.0], [8.5, 150.0], [8.6, 150.0], [8.7, 150.0], [8.8, 150.0], [8.9, 150.0], [9.0, 150.0], [9.1, 150.0], [9.2, 150.0], [9.3, 150.0], [9.4, 150.0], [9.5, 150.0], [9.6, 150.0], [9.7, 150.0], [9.8, 150.0], [9.9, 150.0], [10.0, 150.0], [10.1, 150.0], [10.2, 150.0], [10.3, 150.0], [10.4, 150.0], [10.5, 150.0], [10.6, 150.0], [10.7, 150.0], [10.8, 150.0], [10.9, 150.0], [11.0, 150.0], [11.1, 150.0], [11.2, 150.0], [11.3, 150.0], [11.4, 150.0], [11.5, 150.0], [11.6, 150.0], [11.7, 150.0], [11.8, 151.0], [11.9, 151.0], [12.0, 151.0], [12.1, 151.0], [12.2, 151.0], [12.3, 151.0], [12.4, 151.0], [12.5, 151.0], [12.6, 151.0], [12.7, 151.0], [12.8, 151.0], [12.9, 151.0], [13.0, 151.0], [13.1, 151.0], [13.2, 151.0], [13.3, 151.0], [13.4, 151.0], [13.5, 151.0], [13.6, 151.0], [13.7, 151.0], [13.8, 151.0], [13.9, 151.0], [14.0, 151.0], [14.1, 151.0], [14.2, 151.0], [14.3, 151.0], [14.4, 151.0], [14.5, 151.0], [14.6, 151.0], [14.7, 151.0], [14.8, 151.0], [14.9, 151.0], [15.0, 151.0], [15.1, 151.0], [15.2, 151.0], [15.3, 151.0], [15.4, 151.0], [15.5, 151.0], [15.6, 151.0], [15.7, 151.0], [15.8, 151.0], [15.9, 151.0], [16.0, 151.0], [16.1, 151.0], [16.2, 151.0], [16.3, 151.0], [16.4, 151.0], [16.5, 151.0], [16.6, 152.0], [16.7, 152.0], [16.8, 152.0], [16.9, 152.0], [17.0, 152.0], [17.1, 152.0], [17.2, 152.0], [17.3, 152.0], [17.4, 152.0], [17.5, 152.0], [17.6, 152.0], [17.7, 152.0], [17.8, 152.0], [17.9, 152.0], [18.0, 152.0], [18.1, 152.0], [18.2, 152.0], [18.3, 152.0], [18.4, 152.0], [18.5, 152.0], [18.6, 152.0], [18.7, 152.0], [18.8, 152.0], [18.9, 152.0], [19.0, 152.0], [19.1, 152.0], [19.2, 152.0], [19.3, 152.0], [19.4, 152.0], [19.5, 152.0], [19.6, 152.0], [19.7, 152.0], [19.8, 152.0], [19.9, 152.0], [20.0, 152.0], [20.1, 152.0], [20.2, 152.0], [20.3, 152.0], [20.4, 152.0], [20.5, 152.0], [20.6, 152.0], [20.7, 152.0], [20.8, 152.0], [20.9, 152.0], [21.0, 152.0], [21.1, 152.0], [21.2, 152.0], [21.3, 152.0], [21.4, 152.0], [21.5, 152.0], [21.6, 152.0], [21.7, 152.0], [21.8, 152.0], [21.9, 152.0], [22.0, 152.0], [22.1, 152.0], [22.2, 152.0], [22.3, 152.0], [22.4, 152.0], [22.5, 152.0], [22.6, 152.0], [22.7, 152.0], [22.8, 152.0], [22.9, 152.0], [23.0, 152.0], [23.1, 152.0], [23.2, 152.0], [23.3, 152.0], [23.4, 152.0], [23.5, 152.0], [23.6, 152.0], [23.7, 152.0], [23.8, 152.0], [23.9, 152.0], [24.0, 152.0], [24.1, 152.0], [24.2, 152.0], [24.3, 152.0], [24.4, 152.0], [24.5, 152.0], [24.6, 152.0], [24.7, 152.0], [24.8, 152.0], [24.9, 153.0], [25.0, 153.0], [25.1, 153.0], [25.2, 153.0], [25.3, 153.0], [25.4, 153.0], [25.5, 153.0], [25.6, 153.0], [25.7, 153.0], [25.8, 153.0], [25.9, 153.0], [26.0, 153.0], [26.1, 153.0], [26.2, 153.0], [26.3, 153.0], [26.4, 153.0], [26.5, 153.0], [26.6, 153.0], [26.7, 153.0], [26.8, 153.0], [26.9, 153.0], [27.0, 153.0], [27.1, 153.0], [27.2, 153.0], [27.3, 153.0], [27.4, 153.0], [27.5, 153.0], [27.6, 153.0], [27.7, 153.0], [27.8, 153.0], [27.9, 153.0], [28.0, 153.0], [28.1, 153.0], [28.2, 153.0], [28.3, 153.0], [28.4, 153.0], [28.5, 153.0], [28.6, 153.0], [28.7, 153.0], [28.8, 153.0], [28.9, 153.0], [29.0, 153.0], [29.1, 153.0], [29.2, 153.0], [29.3, 153.0], [29.4, 153.0], [29.5, 153.0], [29.6, 153.0], [29.7, 153.0], [29.8, 153.0], [29.9, 153.0], [30.0, 153.0], [30.1, 153.0], [30.2, 153.0], [30.3, 153.0], [30.4, 154.0], [30.5, 154.0], [30.6, 154.0], [30.7, 154.0], [30.8, 154.0], [30.9, 154.0], [31.0, 154.0], [31.1, 154.0], [31.2, 154.0], [31.3, 154.0], [31.4, 154.0], [31.5, 154.0], [31.6, 154.0], [31.7, 154.0], [31.8, 154.0], [31.9, 154.0], [32.0, 154.0], [32.1, 154.0], [32.2, 154.0], [32.3, 154.0], [32.4, 154.0], [32.5, 154.0], [32.6, 154.0], [32.7, 154.0], [32.8, 154.0], [32.9, 154.0], [33.0, 154.0], [33.1, 154.0], [33.2, 154.0], [33.3, 154.0], [33.4, 154.0], [33.5, 154.0], [33.6, 154.0], [33.7, 154.0], [33.8, 154.0], [33.9, 154.0], [34.0, 154.0], [34.1, 154.0], [34.2, 154.0], [34.3, 154.0], [34.4, 154.0], [34.5, 154.0], [34.6, 154.0], [34.7, 154.0], [34.8, 154.0], [34.9, 154.0], [35.0, 154.0], [35.1, 154.0], [35.2, 154.0], [35.3, 154.0], [35.4, 154.0], [35.5, 154.0], [35.6, 154.0], [35.7, 154.0], [35.8, 154.0], [35.9, 155.0], [36.0, 155.0], [36.1, 155.0], [36.2, 155.0], [36.3, 155.0], [36.4, 155.0], [36.5, 155.0], [36.6, 155.0], [36.7, 155.0], [36.8, 155.0], [36.9, 155.0], [37.0, 155.0], [37.1, 155.0], [37.2, 155.0], [37.3, 155.0], [37.4, 155.0], [37.5, 155.0], [37.6, 155.0], [37.7, 155.0], [37.8, 155.0], [37.9, 155.0], [38.0, 155.0], [38.1, 155.0], [38.2, 155.0], [38.3, 155.0], [38.4, 155.0], [38.5, 155.0], [38.6, 155.0], [38.7, 155.0], [38.8, 155.0], [38.9, 155.0], [39.0, 155.0], [39.1, 155.0], [39.2, 155.0], [39.3, 155.0], [39.4, 155.0], [39.5, 155.0], [39.6, 155.0], [39.7, 155.0], [39.8, 155.0], [39.9, 155.0], [40.0, 155.0], [40.1, 155.0], [40.2, 155.0], [40.3, 155.0], [40.4, 155.0], [40.5, 155.0], [40.6, 155.0], [40.7, 156.0], [40.8, 156.0], [40.9, 156.0], [41.0, 156.0], [41.1, 156.0], [41.2, 156.0], [41.3, 156.0], [41.4, 156.0], [41.5, 156.0], [41.6, 156.0], [41.7, 156.0], [41.8, 156.0], [41.9, 156.0], [42.0, 156.0], [42.1, 156.0], [42.2, 156.0], [42.3, 156.0], [42.4, 156.0], [42.5, 156.0], [42.6, 156.0], [42.7, 156.0], [42.8, 156.0], [42.9, 156.0], [43.0, 156.0], [43.1, 156.0], [43.2, 156.0], [43.3, 156.0], [43.4, 156.0], [43.5, 156.0], [43.6, 156.0], [43.7, 156.0], [43.8, 156.0], [43.9, 156.0], [44.0, 156.0], [44.1, 156.0], [44.2, 156.0], [44.3, 156.0], [44.4, 156.0], [44.5, 156.0], [44.6, 156.0], [44.7, 156.0], [44.8, 156.0], [44.9, 156.0], [45.0, 156.0], [45.1, 156.0], [45.2, 156.0], [45.3, 156.0], [45.4, 156.0], [45.5, 156.0], [45.6, 156.0], [45.7, 156.0], [45.8, 156.0], [45.9, 156.0], [46.0, 156.0], [46.1, 156.0], [46.2, 156.0], [46.3, 156.0], [46.4, 156.0], [46.5, 156.0], [46.6, 156.0], [46.7, 156.0], [46.8, 156.0], [46.9, 156.0], [47.0, 156.0], [47.1, 156.0], [47.2, 156.0], [47.3, 156.0], [47.4, 156.0], [47.5, 156.0], [47.6, 156.0], [47.7, 156.0], [47.8, 156.0], [47.9, 156.0], [48.0, 156.0], [48.1, 156.0], [48.2, 156.0], [48.3, 156.0], [48.4, 156.0], [48.5, 156.0], [48.6, 156.0], [48.7, 156.0], [48.8, 156.0], [48.9, 156.0], [49.0, 156.0], [49.1, 156.0], [49.2, 156.0], [49.3, 156.0], [49.4, 156.0], [49.5, 156.0], [49.6, 156.0], [49.7, 157.0], [49.8, 157.0], [49.9, 157.0], [50.0, 157.0], [50.1, 157.0], [50.2, 157.0], [50.3, 157.0], [50.4, 157.0], [50.5, 157.0], [50.6, 157.0], [50.7, 157.0], [50.8, 157.0], [50.9, 157.0], [51.0, 157.0], [51.1, 157.0], [51.2, 157.0], [51.3, 157.0], [51.4, 157.0], [51.5, 157.0], [51.6, 157.0], [51.7, 157.0], [51.8, 157.0], [51.9, 157.0], [52.0, 157.0], [52.1, 157.0], [52.2, 157.0], [52.3, 157.0], [52.4, 157.0], [52.5, 157.0], [52.6, 157.0], [52.7, 157.0], [52.8, 157.0], [52.9, 157.0], [53.0, 157.0], [53.1, 157.0], [53.2, 157.0], [53.3, 157.0], [53.4, 157.0], [53.5, 157.0], [53.6, 157.0], [53.7, 157.0], [53.8, 157.0], [53.9, 157.0], [54.0, 157.0], [54.1, 157.0], [54.2, 157.0], [54.3, 157.0], [54.4, 157.0], [54.5, 157.0], [54.6, 157.0], [54.7, 157.0], [54.8, 157.0], [54.9, 157.0], [55.0, 157.0], [55.1, 157.0], [55.2, 157.0], [55.3, 157.0], [55.4, 157.0], [55.5, 157.0], [55.6, 157.0], [55.7, 157.0], [55.8, 157.0], [55.9, 158.0], [56.0, 158.0], [56.1, 158.0], [56.2, 158.0], [56.3, 158.0], [56.4, 158.0], [56.5, 158.0], [56.6, 158.0], [56.7, 158.0], [56.8, 158.0], [56.9, 158.0], [57.0, 158.0], [57.1, 158.0], [57.2, 158.0], [57.3, 158.0], [57.4, 158.0], [57.5, 158.0], [57.6, 158.0], [57.7, 158.0], [57.8, 158.0], [57.9, 158.0], [58.0, 158.0], [58.1, 158.0], [58.2, 158.0], [58.3, 158.0], [58.4, 158.0], [58.5, 158.0], [58.6, 158.0], [58.7, 158.0], [58.8, 158.0], [58.9, 158.0], [59.0, 158.0], [59.1, 158.0], [59.2, 158.0], [59.3, 158.0], [59.4, 158.0], [59.5, 158.0], [59.6, 158.0], [59.7, 158.0], [59.8, 158.0], [59.9, 158.0], [60.0, 158.0], [60.1, 158.0], [60.2, 158.0], [60.3, 158.0], [60.4, 158.0], [60.5, 158.0], [60.6, 158.0], [60.7, 158.0], [60.8, 158.0], [60.9, 158.0], [61.0, 158.0], [61.1, 158.0], [61.2, 158.0], [61.3, 158.0], [61.4, 159.0], [61.5, 159.0], [61.6, 159.0], [61.7, 159.0], [61.8, 159.0], [61.9, 159.0], [62.0, 159.0], [62.1, 159.0], [62.2, 159.0], [62.3, 159.0], [62.4, 159.0], [62.5, 159.0], [62.6, 159.0], [62.7, 159.0], [62.8, 159.0], [62.9, 159.0], [63.0, 159.0], [63.1, 159.0], [63.2, 159.0], [63.3, 159.0], [63.4, 159.0], [63.5, 159.0], [63.6, 159.0], [63.7, 159.0], [63.8, 159.0], [63.9, 159.0], [64.0, 159.0], [64.1, 159.0], [64.2, 159.0], [64.3, 159.0], [64.4, 159.0], [64.5, 159.0], [64.6, 159.0], [64.7, 159.0], [64.8, 159.0], [64.9, 160.0], [65.0, 160.0], [65.1, 160.0], [65.2, 160.0], [65.3, 160.0], [65.4, 160.0], [65.5, 160.0], [65.6, 160.0], [65.7, 160.0], [65.8, 160.0], [65.9, 160.0], [66.0, 160.0], [66.1, 160.0], [66.2, 160.0], [66.3, 160.0], [66.4, 160.0], [66.5, 160.0], [66.6, 160.0], [66.7, 160.0], [66.8, 160.0], [66.9, 160.0], [67.0, 160.0], [67.1, 160.0], [67.2, 160.0], [67.3, 160.0], [67.4, 160.0], [67.5, 160.0], [67.6, 160.0], [67.7, 160.0], [67.8, 160.0], [67.9, 160.0], [68.0, 160.0], [68.1, 160.0], [68.2, 160.0], [68.3, 160.0], [68.4, 160.0], [68.5, 160.0], [68.6, 160.0], [68.7, 160.0], [68.8, 160.0], [68.9, 160.0], [69.0, 161.0], [69.1, 161.0], [69.2, 161.0], [69.3, 161.0], [69.4, 161.0], [69.5, 161.0], [69.6, 161.0], [69.7, 161.0], [69.8, 161.0], [69.9, 161.0], [70.0, 161.0], [70.1, 161.0], [70.2, 161.0], [70.3, 161.0], [70.4, 161.0], [70.5, 161.0], [70.6, 161.0], [70.7, 161.0], [70.8, 161.0], [70.9, 161.0], [71.0, 161.0], [71.1, 161.0], [71.2, 161.0], [71.3, 161.0], [71.4, 161.0], [71.5, 161.0], [71.6, 161.0], [71.7, 161.0], [71.8, 161.0], [71.9, 161.0], [72.0, 161.0], [72.1, 161.0], [72.2, 161.0], [72.3, 161.0], [72.4, 161.0], [72.5, 161.0], [72.6, 161.0], [72.7, 161.0], [72.8, 161.0], [72.9, 161.0], [73.0, 161.0], [73.1, 161.0], [73.2, 161.0], [73.3, 161.0], [73.4, 161.0], [73.5, 161.0], [73.6, 161.0], [73.7, 161.0], [73.8, 161.0], [73.9, 161.0], [74.0, 161.0], [74.1, 161.0], [74.2, 161.0], [74.3, 161.0], [74.4, 161.0], [74.5, 162.0], [74.6, 162.0], [74.7, 162.0], [74.8, 162.0], [74.9, 162.0], [75.0, 162.0], [75.1, 162.0], [75.2, 162.0], [75.3, 162.0], [75.4, 162.0], [75.5, 162.0], [75.6, 162.0], [75.7, 162.0], [75.8, 162.0], [75.9, 162.0], [76.0, 162.0], [76.1, 162.0], [76.2, 162.0], [76.3, 162.0], [76.4, 162.0], [76.5, 162.0], [76.6, 163.0], [76.7, 163.0], [76.8, 163.0], [76.9, 163.0], [77.0, 163.0], [77.1, 163.0], [77.2, 163.0], [77.3, 163.0], [77.4, 163.0], [77.5, 163.0], [77.6, 163.0], [77.7, 163.0], [77.8, 163.0], [77.9, 163.0], [78.0, 163.0], [78.1, 163.0], [78.2, 163.0], [78.3, 163.0], [78.4, 163.0], [78.5, 163.0], [78.6, 163.0], [78.7, 163.0], [78.8, 163.0], [78.9, 163.0], [79.0, 163.0], [79.1, 163.0], [79.2, 163.0], [79.3, 163.0], [79.4, 163.0], [79.5, 163.0], [79.6, 163.0], [79.7, 163.0], [79.8, 163.0], [79.9, 163.0], [80.0, 163.0], [80.1, 164.0], [80.2, 164.0], [80.3, 164.0], [80.4, 164.0], [80.5, 164.0], [80.6, 164.0], [80.7, 164.0], [80.8, 164.0], [80.9, 164.0], [81.0, 164.0], [81.1, 164.0], [81.2, 164.0], [81.3, 164.0], [81.4, 164.0], [81.5, 164.0], [81.6, 164.0], [81.7, 164.0], [81.8, 164.0], [81.9, 164.0], [82.0, 164.0], [82.1, 164.0], [82.2, 164.0], [82.3, 164.0], [82.4, 164.0], [82.5, 164.0], [82.6, 164.0], [82.7, 164.0], [82.8, 164.0], [82.9, 164.0], [83.0, 164.0], [83.1, 164.0], [83.2, 164.0], [83.3, 164.0], [83.4, 164.0], [83.5, 165.0], [83.6, 165.0], [83.7, 165.0], [83.8, 165.0], [83.9, 165.0], [84.0, 165.0], [84.1, 165.0], [84.2, 165.0], [84.3, 165.0], [84.4, 165.0], [84.5, 165.0], [84.6, 165.0], [84.7, 165.0], [84.8, 165.0], [84.9, 165.0], [85.0, 165.0], [85.1, 165.0], [85.2, 165.0], [85.3, 165.0], [85.4, 165.0], [85.5, 165.0], [85.6, 165.0], [85.7, 165.0], [85.8, 165.0], [85.9, 165.0], [86.0, 165.0], [86.1, 165.0], [86.2, 165.0], [86.3, 166.0], [86.4, 166.0], [86.5, 166.0], [86.6, 166.0], [86.7, 166.0], [86.8, 166.0], [86.9, 166.0], [87.0, 166.0], [87.1, 166.0], [87.2, 166.0], [87.3, 166.0], [87.4, 166.0], [87.5, 166.0], [87.6, 166.0], [87.7, 166.0], [87.8, 166.0], [87.9, 166.0], [88.0, 166.0], [88.1, 166.0], [88.2, 166.0], [88.3, 166.0], [88.4, 166.0], [88.5, 166.0], [88.6, 166.0], [88.7, 166.0], [88.8, 166.0], [88.9, 166.0], [89.0, 166.0], [89.1, 166.0], [89.2, 166.0], [89.3, 166.0], [89.4, 166.0], [89.5, 166.0], [89.6, 166.0], [89.7, 167.0], [89.8, 167.0], [89.9, 167.0], [90.0, 167.0], [90.1, 167.0], [90.2, 167.0], [90.3, 167.0], [90.4, 168.0], [90.5, 168.0], [90.6, 168.0], [90.7, 168.0], [90.8, 168.0], [90.9, 168.0], [91.0, 168.0], [91.1, 169.0], [91.2, 169.0], [91.3, 169.0], [91.4, 169.0], [91.5, 169.0], [91.6, 169.0], [91.7, 169.0], [91.8, 169.0], [91.9, 169.0], [92.0, 169.0], [92.1, 169.0], [92.2, 169.0], [92.3, 169.0], [92.4, 169.0], [92.5, 169.0], [92.6, 169.0], [92.7, 169.0], [92.8, 169.0], [92.9, 169.0], [93.0, 169.0], [93.1, 169.0], [93.2, 169.0], [93.3, 169.0], [93.4, 169.0], [93.5, 169.0], [93.6, 169.0], [93.7, 169.0], [93.8, 171.0], [93.9, 171.0], [94.0, 171.0], [94.1, 171.0], [94.2, 171.0], [94.3, 171.0], [94.4, 171.0], [94.5, 171.0], [94.6, 171.0], [94.7, 171.0], [94.8, 171.0], [94.9, 171.0], [95.0, 171.0], [95.1, 171.0], [95.2, 172.0], [95.3, 172.0], [95.4, 172.0], [95.5, 172.0], [95.6, 172.0], [95.7, 172.0], [95.8, 172.0], [95.9, 172.0], [96.0, 172.0], [96.1, 172.0], [96.2, 172.0], [96.3, 172.0], [96.4, 172.0], [96.5, 172.0], [96.6, 173.0], [96.7, 173.0], [96.8, 173.0], [96.9, 173.0], [97.0, 173.0], [97.1, 173.0], [97.2, 173.0], [97.3, 175.0], [97.4, 175.0], [97.5, 175.0], [97.6, 175.0], [97.7, 175.0], [97.8, 175.0], [97.9, 175.0], [98.0, 177.0], [98.1, 177.0], [98.2, 177.0], [98.3, 177.0], [98.4, 177.0], [98.5, 177.0], [98.6, 177.0], [98.7, 186.0], [98.8, 186.0], [98.9, 186.0], [99.0, 186.0], [99.1, 186.0], [99.2, 186.0], [99.3, 186.0], [99.4, 568.0], [99.5, 568.0], [99.6, 568.0], [99.7, 568.0], [99.8, 568.0], [99.9, 568.0], [100.0, 568.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 2.0], [4.9, 2.0], [5.0, 2.0], [5.1, 2.0], [5.2, 2.0], [5.3, 2.0], [5.4, 2.0], [5.5, 2.0], [5.6, 2.0], [5.7, 2.0], [5.8, 2.0], [5.9, 2.0], [6.0, 2.0], [6.1, 2.0], [6.2, 2.0], [6.3, 2.0], [6.4, 2.0], [6.5, 2.0], [6.6, 2.0], [6.7, 2.0], [6.8, 2.0], [6.9, 2.0], [7.0, 2.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 2.0], [14.5, 2.0], [14.6, 2.0], [14.7, 2.0], [14.8, 2.0], [14.9, 2.0], [15.0, 2.0], [15.1, 2.0], [15.2, 2.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 2.0], [17.7, 2.0], [17.8, 2.0], [17.9, 2.0], [18.0, 2.0], [18.1, 2.0], [18.2, 2.0], [18.3, 2.0], [18.4, 2.0], [18.5, 2.0], [18.6, 2.0], [18.7, 2.0], [18.8, 2.0], [18.9, 2.0], [19.0, 2.0], [19.1, 2.0], [19.2, 2.0], [19.3, 2.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 2.0], [20.0, 2.0], [20.1, 2.0], [20.2, 2.0], [20.3, 3.0], [20.4, 3.0], [20.5, 3.0], [20.6, 3.0], [20.7, 3.0], [20.8, 3.0], [20.9, 3.0], [21.0, 3.0], [21.1, 3.0], [21.2, 3.0], [21.3, 3.0], [21.4, 3.0], [21.5, 3.0], [21.6, 3.0], [21.7, 3.0], [21.8, 3.0], [21.9, 3.0], [22.0, 3.0], [22.1, 3.0], [22.2, 3.0], [22.3, 3.0], [22.4, 3.0], [22.5, 3.0], [22.6, 3.0], [22.7, 3.0], [22.8, 3.0], [22.9, 3.0], [23.0, 3.0], [23.1, 3.0], [23.2, 3.0], [23.3, 3.0], [23.4, 3.0], [23.5, 3.0], [23.6, 3.0], [23.7, 3.0], [23.8, 3.0], [23.9, 3.0], [24.0, 3.0], [24.1, 3.0], [24.2, 3.0], [24.3, 3.0], [24.4, 3.0], [24.5, 3.0], [24.6, 3.0], [24.7, 3.0], [24.8, 3.0], [24.9, 3.0], [25.0, 3.0], [25.1, 3.0], [25.2, 3.0], [25.3, 3.0], [25.4, 3.0], [25.5, 3.0], [25.6, 3.0], [25.7, 3.0], [25.8, 3.0], [25.9, 3.0], [26.0, 3.0], [26.1, 3.0], [26.2, 3.0], [26.3, 3.0], [26.4, 4.0], [26.5, 4.0], [26.6, 4.0], [26.7, 4.0], [26.8, 4.0], [26.9, 4.0], [27.0, 5.0], [27.1, 5.0], [27.2, 6.0], [27.3, 7.0], [27.4, 10.0], [27.5, 15.0], [27.6, 18.0], [27.7, 19.0], [27.8, 20.0], [27.9, 21.0], [28.0, 21.0], [28.1, 22.0], [28.2, 22.0], [28.3, 23.0], [28.4, 23.0], [28.5, 24.0], [28.6, 24.0], [28.7, 24.0], [28.8, 25.0], [28.9, 25.0], [29.0, 25.0], [29.1, 26.0], [29.2, 26.0], [29.3, 27.0], [29.4, 27.0], [29.5, 27.0], [29.6, 28.0], [29.7, 28.0], [29.8, 28.0], [29.9, 29.0], [30.0, 29.0], [30.1, 29.0], [30.2, 30.0], [30.3, 30.0], [30.4, 30.0], [30.5, 31.0], [30.6, 31.0], [30.7, 31.0], [30.8, 32.0], [30.9, 32.0], [31.0, 33.0], [31.1, 33.0], [31.2, 33.0], [31.3, 34.0], [31.4, 34.0], [31.5, 35.0], [31.6, 35.0], [31.7, 36.0], [31.8, 37.0], [31.9, 37.0], [32.0, 38.0], [32.1, 39.0], [32.2, 40.0], [32.3, 42.0], [32.4, 44.0], [32.5, 46.0], [32.6, 48.0], [32.7, 52.0], [32.8, 56.0], [32.9, 65.0], [33.0, 72.0], [33.1, 80.0], [33.2, 87.0], [33.3, 102.0], [33.4, 115.0], [33.5, 161.0], [33.6, 210.0], [33.7, 237.0], [33.8, 259.0], [33.9, 280.0], [34.0, 300.0], [34.1, 318.0], [34.2, 328.0], [34.3, 359.0], [34.4, 377.0], [34.5, 394.0], [34.6, 409.0], [34.7, 423.0], [34.8, 439.0], [34.9, 453.0], [35.0, 463.0], [35.1, 473.0], [35.2, 482.0], [35.3, 490.0], [35.4, 494.0], [35.5, 506.0], [35.6, 518.0], [35.7, 527.0], [35.8, 535.0], [35.9, 545.0], [36.0, 551.0], [36.1, 564.0], [36.2, 570.0], [36.3, 579.0], [36.4, 586.0], [36.5, 593.0], [36.6, 600.0], [36.7, 610.0], [36.8, 618.0], [36.9, 630.0], [37.0, 637.0], [37.1, 646.0], [37.2, 652.0], [37.3, 664.0], [37.4, 672.0], [37.5, 681.0], [37.6, 687.0], [37.7, 695.0], [37.8, 702.0], [37.9, 708.0], [38.0, 712.0], [38.1, 717.0], [38.2, 726.0], [38.3, 736.0], [38.4, 744.0], [38.5, 756.0], [38.6, 761.0], [38.7, 769.0], [38.8, 775.0], [38.9, 781.0], [39.0, 790.0], [39.1, 798.0], [39.2, 804.0], [39.3, 811.0], [39.4, 818.0], [39.5, 823.0], [39.6, 829.0], [39.7, 835.0], [39.8, 840.0], [39.9, 845.0], [40.0, 853.0], [40.1, 860.0], [40.2, 866.0], [40.3, 868.0], [40.4, 877.0], [40.5, 883.0], [40.6, 893.0], [40.7, 900.0], [40.8, 910.0], [40.9, 914.0], [41.0, 919.0], [41.1, 924.0], [41.2, 929.0], [41.3, 934.0], [41.4, 939.0], [41.5, 945.0], [41.6, 950.0], [41.7, 955.0], [41.8, 965.0], [41.9, 972.0], [42.0, 976.0], [42.1, 981.0], [42.2, 985.0], [42.3, 994.0], [42.4, 1000.0], [42.5, 1006.0], [42.6, 1011.0], [42.7, 1015.0], [42.8, 1018.0], [42.9, 1023.0], [43.0, 1030.0], [43.1, 1034.0], [43.2, 1040.0], [43.3, 1047.0], [43.4, 1052.0], [43.5, 1059.0], [43.6, 1064.0], [43.7, 1072.0], [43.8, 1080.0], [43.9, 1087.0], [44.0, 1093.0], [44.1, 1100.0], [44.2, 1107.0], [44.3, 1114.0], [44.4, 1121.0], [44.5, 1129.0], [44.6, 1135.0], [44.7, 1142.0], [44.8, 1145.0], [44.9, 1154.0], [45.0, 1159.0], [45.1, 1166.0], [45.2, 1170.0], [45.3, 1175.0], [45.4, 1181.0], [45.5, 1185.0], [45.6, 1189.0], [45.7, 1195.0], [45.8, 1199.0], [45.9, 1206.0], [46.0, 1210.0], [46.1, 1216.0], [46.2, 1220.0], [46.3, 1223.0], [46.4, 1228.0], [46.5, 1233.0], [46.6, 1235.0], [46.7, 1239.0], [46.8, 1243.0], [46.9, 1251.0], [47.0, 1254.0], [47.1, 1260.0], [47.2, 1263.0], [47.3, 1269.0], [47.4, 1274.0], [47.5, 1277.0], [47.6, 1280.0], [47.7, 1285.0], [47.8, 1292.0], [47.9, 1295.0], [48.0, 1299.0], [48.1, 1305.0], [48.2, 1310.0], [48.3, 1316.0], [48.4, 1319.0], [48.5, 1323.0], [48.6, 1327.0], [48.7, 1330.0], [48.8, 1335.0], [48.9, 1340.0], [49.0, 1343.0], [49.1, 1349.0], [49.2, 1353.0], [49.3, 1356.0], [49.4, 1360.0], [49.5, 1365.0], [49.6, 1369.0], [49.7, 1373.0], [49.8, 1380.0], [49.9, 1387.0], [50.0, 1390.0], [50.1, 1393.0], [50.2, 1397.0], [50.3, 1402.0], [50.4, 1405.0], [50.5, 1408.0], [50.6, 1411.0], [50.7, 1415.0], [50.8, 1419.0], [50.9, 1424.0], [51.0, 1428.0], [51.1, 1433.0], [51.2, 1437.0], [51.3, 1442.0], [51.4, 1446.0], [51.5, 1451.0], [51.6, 1454.0], [51.7, 1458.0], [51.8, 1462.0], [51.9, 1466.0], [52.0, 1470.0], [52.1, 1475.0], [52.2, 1479.0], [52.3, 1483.0], [52.4, 1488.0], [52.5, 1492.0], [52.6, 1497.0], [52.7, 1500.0], [52.8, 1504.0], [52.9, 1508.0], [53.0, 1511.0], [53.1, 1514.0], [53.2, 1517.0], [53.3, 1521.0], [53.4, 1523.0], [53.5, 1529.0], [53.6, 1532.0], [53.7, 1536.0], [53.8, 1540.0], [53.9, 1543.0], [54.0, 1549.0], [54.1, 1551.0], [54.2, 1554.0], [54.3, 1559.0], [54.4, 1565.0], [54.5, 1567.0], [54.6, 1571.0], [54.7, 1575.0], [54.8, 1579.0], [54.9, 1583.0], [55.0, 1586.0], [55.1, 1591.0], [55.2, 1595.0], [55.3, 1599.0], [55.4, 1602.0], [55.5, 1608.0], [55.6, 1613.0], [55.7, 1616.0], [55.8, 1620.0], [55.9, 1624.0], [56.0, 1630.0], [56.1, 1634.0], [56.2, 1638.0], [56.3, 1644.0], [56.4, 1647.0], [56.5, 1652.0], [56.6, 1657.0], [56.7, 1661.0], [56.8, 1665.0], [56.9, 1671.0], [57.0, 1675.0], [57.1, 1680.0], [57.2, 1685.0], [57.3, 1690.0], [57.4, 1695.0], [57.5, 1699.0], [57.6, 1704.0], [57.7, 1708.0], [57.8, 1711.0], [57.9, 1717.0], [58.0, 1720.0], [58.1, 1724.0], [58.2, 1728.0], [58.3, 1732.0], [58.4, 1736.0], [58.5, 1741.0], [58.6, 1745.0], [58.7, 1749.0], [58.8, 1753.0], [58.9, 1760.0], [59.0, 1764.0], [59.1, 1769.0], [59.2, 1773.0], [59.3, 1778.0], [59.4, 1781.0], [59.5, 1785.0], [59.6, 1792.0], [59.7, 1795.0], [59.8, 1799.0], [59.9, 1806.0], [60.0, 1810.0], [60.1, 1814.0], [60.2, 1817.0], [60.3, 1823.0], [60.4, 1829.0], [60.5, 1835.0], [60.6, 1837.0], [60.7, 1843.0], [60.8, 1849.0], [60.9, 1855.0], [61.0, 1860.0], [61.1, 1866.0], [61.2, 1870.0], [61.3, 1874.0], [61.4, 1878.0], [61.5, 1884.0], [61.6, 1888.0], [61.7, 1893.0], [61.8, 1897.0], [61.9, 1901.0], [62.0, 1905.0], [62.1, 1910.0], [62.2, 1915.0], [62.3, 1919.0], [62.4, 1924.0], [62.5, 1928.0], [62.6, 1933.0], [62.7, 1937.0], [62.8, 1940.0], [62.9, 1946.0], [63.0, 1952.0], [63.1, 1958.0], [63.2, 1961.0], [63.3, 1967.0], [63.4, 1971.0], [63.5, 1975.0], [63.6, 1978.0], [63.7, 1982.0], [63.8, 1990.0], [63.9, 1995.0], [64.0, 1999.0], [64.1, 2005.0], [64.2, 2008.0], [64.3, 2014.0], [64.4, 2018.0], [64.5, 2023.0], [64.6, 2027.0], [64.7, 2031.0], [64.8, 2035.0], [64.9, 2038.0], [65.0, 2041.0], [65.1, 2046.0], [65.2, 2049.0], [65.3, 2055.0], [65.4, 2059.0], [65.5, 2065.0], [65.6, 2068.0], [65.7, 2072.0], [65.8, 2078.0], [65.9, 2082.0], [66.0, 2088.0], [66.1, 2092.0], [66.2, 2096.0], [66.3, 2099.0], [66.4, 2103.0], [66.5, 2108.0], [66.6, 2115.0], [66.7, 2120.0], [66.8, 2123.0], [66.9, 2128.0], [67.0, 2131.0], [67.1, 2136.0], [67.2, 2139.0], [67.3, 2143.0], [67.4, 2146.0], [67.5, 2150.0], [67.6, 2153.0], [67.7, 2157.0], [67.8, 2161.0], [67.9, 2165.0], [68.0, 2169.0], [68.1, 2174.0], [68.2, 2177.0], [68.3, 2183.0], [68.4, 2188.0], [68.5, 2194.0], [68.6, 2199.0], [68.7, 2203.0], [68.8, 2211.0], [68.9, 2215.0], [69.0, 2220.0], [69.1, 2226.0], [69.2, 2229.0], [69.3, 2235.0], [69.4, 2240.0], [69.5, 2246.0], [69.6, 2249.0], [69.7, 2253.0], [69.8, 2259.0], [69.9, 2261.0], [70.0, 2266.0], [70.1, 2272.0], [70.2, 2277.0], [70.3, 2280.0], [70.4, 2285.0], [70.5, 2290.0], [70.6, 2294.0], [70.7, 2297.0], [70.8, 2301.0], [70.9, 2307.0], [71.0, 2310.0], [71.1, 2312.0], [71.2, 2317.0], [71.3, 2321.0], [71.4, 2326.0], [71.5, 2333.0], [71.6, 2338.0], [71.7, 2342.0], [71.8, 2346.0], [71.9, 2350.0], [72.0, 2355.0], [72.1, 2359.0], [72.2, 2364.0], [72.3, 2367.0], [72.4, 2373.0], [72.5, 2378.0], [72.6, 2382.0], [72.7, 2384.0], [72.8, 2387.0], [72.9, 2390.0], [73.0, 2393.0], [73.1, 2399.0], [73.2, 2404.0], [73.3, 2409.0], [73.4, 2412.0], [73.5, 2419.0], [73.6, 2425.0], [73.7, 2431.0], [73.8, 2437.0], [73.9, 2442.0], [74.0, 2446.0], [74.1, 2451.0], [74.2, 2454.0], [74.3, 2458.0], [74.4, 2462.0], [74.5, 2471.0], [74.6, 2474.0], [74.7, 2478.0], [74.8, 2483.0], [74.9, 2488.0], [75.0, 2492.0], [75.1, 2495.0], [75.2, 2499.0], [75.3, 2506.0], [75.4, 2513.0], [75.5, 2519.0], [75.6, 2522.0], [75.7, 2529.0], [75.8, 2535.0], [75.9, 2538.0], [76.0, 2542.0], [76.1, 2547.0], [76.2, 2554.0], [76.3, 2560.0], [76.4, 2564.0], [76.5, 2567.0], [76.6, 2573.0], [76.7, 2578.0], [76.8, 2582.0], [76.9, 2587.0], [77.0, 2593.0], [77.1, 2597.0], [77.2, 2604.0], [77.3, 2608.0], [77.4, 2613.0], [77.5, 2621.0], [77.6, 2624.0], [77.7, 2629.0], [77.8, 2635.0], [77.9, 2639.0], [78.0, 2644.0], [78.1, 2648.0], [78.2, 2650.0], [78.3, 2656.0], [78.4, 2659.0], [78.5, 2663.0], [78.6, 2667.0], [78.7, 2672.0], [78.8, 2675.0], [78.9, 2681.0], [79.0, 2685.0], [79.1, 2690.0], [79.2, 2696.0], [79.3, 2702.0], [79.4, 2707.0], [79.5, 2712.0], [79.6, 2722.0], [79.7, 2727.0], [79.8, 2730.0], [79.9, 2736.0], [80.0, 2742.0], [80.1, 2747.0], [80.2, 2750.0], [80.3, 2756.0], [80.4, 2763.0], [80.5, 2772.0], [80.6, 2777.0], [80.7, 2782.0], [80.8, 2786.0], [80.9, 2792.0], [81.0, 2798.0], [81.1, 2804.0], [81.2, 2814.0], [81.3, 2820.0], [81.4, 2825.0], [81.5, 2833.0], [81.6, 2841.0], [81.7, 2846.0], [81.8, 2853.0], [81.9, 2860.0], [82.0, 2867.0], [82.1, 2875.0], [82.2, 2879.0], [82.3, 2886.0], [82.4, 2893.0], [82.5, 2902.0], [82.6, 2905.0], [82.7, 2910.0], [82.8, 2917.0], [82.9, 2928.0], [83.0, 2934.0], [83.1, 2943.0], [83.2, 2952.0], [83.3, 2958.0], [83.4, 2965.0], [83.5, 2974.0], [83.6, 2981.0], [83.7, 2987.0], [83.8, 2996.0], [83.9, 3007.0], [84.0, 3015.0], [84.1, 3020.0], [84.2, 3031.0], [84.3, 3039.0], [84.4, 3047.0], [84.5, 3054.0], [84.6, 3062.0], [84.7, 3070.0], [84.8, 3076.0], [84.9, 3082.0], [85.0, 3088.0], [85.1, 3099.0], [85.2, 3106.0], [85.3, 3114.0], [85.4, 3125.0], [85.5, 3131.0], [85.6, 3139.0], [85.7, 3148.0], [85.8, 3157.0], [85.9, 3165.0], [86.0, 3172.0], [86.1, 3178.0], [86.2, 3187.0], [86.3, 3192.0], [86.4, 3199.0], [86.5, 3209.0], [86.6, 3217.0], [86.7, 3225.0], [86.8, 3232.0], [86.9, 3240.0], [87.0, 3246.0], [87.1, 3257.0], [87.2, 3268.0], [87.3, 3276.0], [87.4, 3284.0], [87.5, 3290.0], [87.6, 3297.0], [87.7, 3303.0], [87.8, 3314.0], [87.9, 3325.0], [88.0, 3334.0], [88.1, 3341.0], [88.2, 3354.0], [88.3, 3364.0], [88.4, 3369.0], [88.5, 3375.0], [88.6, 3384.0], [88.7, 3393.0], [88.8, 3404.0], [88.9, 3415.0], [89.0, 3425.0], [89.1, 3436.0], [89.2, 3449.0], [89.3, 3460.0], [89.4, 3470.0], [89.5, 3480.0], [89.6, 3487.0], [89.7, 3498.0], [89.8, 3506.0], [89.9, 3519.0], [90.0, 3530.0], [90.1, 3537.0], [90.2, 3544.0], [90.3, 3554.0], [90.4, 3564.0], [90.5, 3573.0], [90.6, 3587.0], [90.7, 3596.0], [90.8, 3608.0], [90.9, 3621.0], [91.0, 3629.0], [91.1, 3641.0], [91.2, 3650.0], [91.3, 3661.0], [91.4, 3670.0], [91.5, 3676.0], [91.6, 3686.0], [91.7, 3694.0], [91.8, 3705.0], [91.9, 3714.0], [92.0, 3724.0], [92.1, 3739.0], [92.2, 3750.0], [92.3, 3757.0], [92.4, 3771.0], [92.5, 3782.0], [92.6, 3795.0], [92.7, 3810.0], [92.8, 3822.0], [92.9, 3834.0], [93.0, 3845.0], [93.1, 3855.0], [93.2, 3867.0], [93.3, 3878.0], [93.4, 3889.0], [93.5, 3901.0], [93.6, 3922.0], [93.7, 3933.0], [93.8, 3945.0], [93.9, 3962.0], [94.0, 3973.0], [94.1, 3993.0], [94.2, 4001.0], [94.3, 4018.0], [94.4, 4030.0], [94.5, 4048.0], [94.6, 4064.0], [94.7, 4077.0], [94.8, 4089.0], [94.9, 4098.0], [95.0, 4106.0], [95.1, 4113.0], [95.2, 4124.0], [95.3, 4139.0], [95.4, 4156.0], [95.5, 4169.0], [95.6, 4183.0], [95.7, 4198.0], [95.8, 4216.0], [95.9, 4230.0], [96.0, 4238.0], [96.1, 4252.0], [96.2, 4271.0], [96.3, 4291.0], [96.4, 4302.0], [96.5, 4317.0], [96.6, 4329.0], [96.7, 4358.0], [96.8, 4373.0], [96.9, 4393.0], [97.0, 4406.0], [97.1, 4423.0], [97.2, 4430.0], [97.3, 4460.0], [97.4, 4476.0], [97.5, 4505.0], [97.6, 4542.0], [97.7, 4583.0], [97.8, 4608.0], [97.9, 4635.0], [98.0, 4673.0], [98.1, 4723.0], [98.2, 4767.0], [98.3, 4827.0], [98.4, 4870.0], [98.5, 4904.0], [98.6, 4968.0], [98.7, 5034.0], [98.8, 5093.0], [98.9, 5190.0], [99.0, 5273.0], [99.1, 5373.0], [99.2, 5475.0], [99.3, 5615.0], [99.4, 5774.0], [99.5, 5905.0], [99.6, 6035.0], [99.7, 6363.0], [99.8, 6678.0], [99.9, 7188.0], [100.0, 7899.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 4888.0, "series": [{"data": [[0.0, 4888.0], [600.0, 188.0], [700.0, 218.0], [800.0, 229.0], [900.0, 231.0], [1000.0, 284.0], [1100.0, 258.0], [1200.0, 334.0], [1300.0, 290.0], [1400.0, 312.0], [1500.0, 365.0], [1600.0, 350.0], [1700.0, 311.0], [1800.0, 321.0], [1900.0, 328.0], [2000.0, 315.0], [2100.0, 334.0], [2200.0, 345.0], [2300.0, 319.0], [2400.0, 290.0], [2500.0, 276.0], [2600.0, 256.0], [2700.0, 238.0], [2800.0, 223.0], [2900.0, 208.0], [3000.0, 163.0], [3100.0, 163.0], [3200.0, 159.0], [3300.0, 171.0], [3400.0, 145.0], [3500.0, 139.0], [3700.0, 140.0], [3600.0, 145.0], [3800.0, 137.0], [3900.0, 137.0], [4000.0, 93.0], [4100.0, 102.0], [4200.0, 113.0], [4300.0, 83.0], [4500.0, 49.0], [4400.0, 69.0], [4600.0, 36.0], [4700.0, 44.0], [4800.0, 29.0], [5000.0, 18.0], [4900.0, 25.0], [5100.0, 26.0], [5200.0, 23.0], [5300.0, 14.0], [5600.0, 8.0], [5500.0, 4.0], [5400.0, 17.0], [5700.0, 8.0], [5800.0, 4.0], [6000.0, 9.0], [5900.0, 9.0], [6100.0, 6.0], [6200.0, 4.0], [6300.0, 4.0], [6500.0, 5.0], [6400.0, 3.0], [6600.0, 3.0], [6900.0, 3.0], [6700.0, 5.0], [6800.0, 2.0], [7100.0, 5.0], [7000.0, 1.0], [7400.0, 4.0], [7300.0, 1.0], [7200.0, 2.0], [7500.0, 3.0], [7600.0, 1.0], [7800.0, 1.0], [8100.0, 1.0], [8000.0, 1.0], [100.0, 61.0], [200.0, 50.0], [300.0, 75.0], [400.0, 103.0], [500.0, 163.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[100.0, 144.0], [500.0, 1.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 4827.0], [600.0, 174.0], [700.0, 194.0], [800.0, 227.0], [900.0, 248.0], [1000.0, 244.0], [1100.0, 251.0], [1200.0, 318.0], [1300.0, 327.0], [1400.0, 350.0], [1500.0, 387.0], [1600.0, 315.0], [1700.0, 332.0], [1800.0, 299.0], [1900.0, 312.0], [2000.0, 333.0], [2100.0, 334.0], [2300.0, 340.0], [2200.0, 312.0], [2400.0, 305.0], [2500.0, 280.0], [2600.0, 305.0], [2800.0, 211.0], [2700.0, 258.0], [2900.0, 198.0], [3000.0, 184.0], [3100.0, 186.0], [3200.0, 182.0], [3300.0, 159.0], [3400.0, 140.0], [3500.0, 148.0], [3600.0, 145.0], [3700.0, 128.0], [3800.0, 121.0], [3900.0, 104.0], [4000.0, 110.0], [4200.0, 96.0], [4100.0, 113.0], [4300.0, 81.0], [4400.0, 78.0], [4600.0, 42.0], [4500.0, 44.0], [4700.0, 28.0], [4800.0, 34.0], [4900.0, 24.0], [5100.0, 19.0], [5000.0, 21.0], [5200.0, 14.0], [5300.0, 14.0], [5500.0, 11.0], [5400.0, 14.0], [5600.0, 8.0], [5800.0, 13.0], [5700.0, 7.0], [6000.0, 9.0], [5900.0, 12.0], [6100.0, 7.0], [6300.0, 2.0], [6200.0, 2.0], [6500.0, 4.0], [6400.0, 3.0], [6600.0, 6.0], [6700.0, 2.0], [6800.0, 4.0], [6900.0, 3.0], [7100.0, 3.0], [7000.0, 3.0], [7200.0, 5.0], [7300.0, 3.0], [7600.0, 1.0], [7500.0, 2.0], [7800.0, 3.0], [100.0, 42.0], [200.0, 60.0], [300.0, 78.0], [400.0, 132.0], [500.0, 165.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2357.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 13437.0, "series": [{"data": [[0.0, 2357.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4862.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 13437.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 8489.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 47.476890756302595, "minX": 1.5876816E12, "maxY": 145.0, "series": [{"data": [[1.58768196E12, 145.0], [1.58768166E12, 143.5010606703439], [1.5876816E12, 75.20465434633813], [1.58768226E12, 125.11913937058448], [1.58768172E12, 145.0], [1.58768232E12, 47.476890756302595], [1.58768202E12, 145.0], [1.58768214E12, 145.0], [1.58768208E12, 145.0], [1.58768178E12, 145.0], [1.5876822E12, 145.0], [1.5876819E12, 145.0], [1.58768184E12, 145.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768232E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 23.0, "minX": 1.0, "maxY": 3598.6800000000003, "series": [{"data": [[6.0, 40.666666666666664], [7.0, 27.0], [8.0, 26.0], [9.0, 43.0], [10.0, 38.25], [11.0, 33.666666666666664], [12.0, 45.0], [13.0, 27.0], [14.0, 31.0], [15.0, 40.0], [16.0, 42.666666666666664], [17.0, 32.0], [18.0, 34.5], [19.0, 36.0], [20.0, 32.0], [21.0, 30.0], [22.0, 35.0], [23.0, 31.833333333333332], [24.0, 23.57142857142857], [25.0, 26.5], [26.0, 25.666666666666668], [27.0, 31.333333333333336], [28.0, 32.5], [29.0, 31.4], [30.0, 31.5], [31.0, 33.0], [32.0, 26.666666666666668], [33.0, 29.142857142857142], [34.0, 29.0], [35.0, 32.33333333333333], [36.0, 29.6], [37.0, 29.749999999999996], [38.0, 28.8], [39.0, 34.0], [40.0, 27.0], [41.0, 32.6], [42.0, 28.75], [43.0, 27.888888888888886], [44.0, 29.476190476190474], [45.0, 33.0], [46.0, 31.166666666666664], [47.0, 26.954545454545457], [48.0, 32.125], [49.0, 36.84615384615384], [50.0, 32.2], [51.0, 26.11111111111111], [52.0, 27.833333333333332], [53.0, 25.666666666666668], [54.0, 33.625], [55.0, 26.333333333333332], [56.0, 30.26666666666667], [57.0, 28.8], [58.0, 31.545454545454547], [59.0, 41.83333333333332], [60.0, 28.6], [61.0, 27.545454545454543], [62.0, 29.8], [63.0, 57.0625], [64.0, 33.473684210526315], [65.0, 27.333333333333336], [66.0, 33.25], [67.0, 37.10714285714286], [68.0, 27.6], [69.0, 38.08333333333333], [70.0, 36.666666666666664], [71.0, 30.636363636363637], [72.0, 36.0], [73.0, 42.86666666666667], [74.0, 32.20000000000001], [75.0, 27.666666666666668], [76.0, 67.30000000000001], [77.0, 32.0], [78.0, 34.81818181818182], [79.0, 37.36363636363636], [80.0, 25.857142857142858], [81.0, 26.81818181818182], [82.0, 40.83333333333333], [83.0, 33.22222222222222], [84.0, 367.47619047619054], [85.0, 28.599999999999998], [86.0, 272.125], [87.0, 386.9375], [88.0, 613.5], [89.0, 852.0000000000002], [90.0, 988.7777777777777], [91.0, 910.375], [92.0, 842.8181818181818], [93.0, 788.0], [94.0, 939.7142857142858], [95.0, 718.6923076923077], [96.0, 1379.7142857142858], [97.0, 734.4782608695652], [98.0, 824.0625], [99.0, 896.2222222222222], [100.0, 1211.567567567568], [101.0, 1420.1428571428573], [102.0, 685.5238095238096], [103.0, 1023.5454545454545], [104.0, 817.6666666666667], [105.0, 1067.6363636363637], [106.0, 821.0], [107.0, 1008.9], [108.0, 1238.2285714285717], [109.0, 1999.708860759494], [110.0, 3598.6800000000003], [111.0, 1841.2857142857142], [112.0, 2437.190476190476], [113.0, 960.5], [114.0, 1293.5], [115.0, 1247.7777777777778], [116.0, 1402.857142857143], [117.0, 1359.923076923077], [118.0, 388.1333333333334], [119.0, 1119.0], [120.0, 484.25000000000006], [121.0, 1490.7], [122.0, 285.66666666666663], [123.0, 786.625], [124.0, 600.2400000000001], [125.0, 1209.4285714285713], [126.0, 169.57142857142858], [127.0, 524.8], [128.0, 166.69047619047623], [129.0, 666.4000000000002], [130.0, 326.83333333333337], [131.0, 964.3333333333335], [132.0, 158.44642857142856], [133.0, 413.11428571428564], [134.0, 476.0333333333334], [135.0, 316.50000000000006], [136.0, 808.7499999999999], [137.0, 967.9333333333334], [138.0, 198.89285714285714], [139.0, 468.57142857142844], [140.0, 257.0975609756098], [141.0, 290.14285714285734], [142.0, 36.56299212598427], [143.0, 290.43999999999994], [144.0, 795.1428571428571], [145.0, 1692.0905817854539], [1.0, 489.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[137.99627586206972, 1499.4856551724072]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 156.0], [3.0, 159.0], [4.0, 160.0], [5.0, 162.0], [6.0, 152.0], [7.0, 155.0], [8.0, 164.0], [9.0, 175.0], [10.0, 156.0], [11.0, 154.0], [12.0, 158.0], [13.0, 166.0], [14.0, 149.0], [15.0, 152.0], [16.0, 156.0], [17.0, 156.0], [18.0, 147.0], [19.0, 156.0], [20.0, 152.0], [21.0, 150.0], [22.0, 161.0], [23.0, 158.0], [24.0, 162.0], [25.0, 151.0], [26.0, 173.0], [27.0, 153.0], [28.0, 159.0], [29.0, 151.0], [30.0, 154.0], [31.0, 157.0], [32.0, 161.0], [33.0, 151.0], [34.0, 169.0], [35.0, 151.0], [36.0, 152.0], [37.0, 152.0], [38.0, 151.0], [39.0, 163.0], [40.0, 154.0], [41.0, 157.0], [42.0, 152.0], [43.0, 150.0], [44.0, 154.0], [45.0, 157.0], [46.0, 152.0], [47.0, 171.0], [48.0, 157.0], [49.0, 159.0], [50.0, 155.0], [51.0, 161.0], [52.0, 157.0], [53.0, 172.0], [54.0, 165.0], [55.0, 154.0], [56.0, 153.0], [57.0, 169.0], [58.0, 160.0], [59.0, 164.0], [60.0, 156.0], [61.0, 147.0], [62.0, 160.0], [63.0, 163.0], [64.0, 160.0], [65.0, 172.0], [66.0, 157.0], [67.0, 153.0], [68.0, 150.0], [69.0, 152.0], [70.0, 166.0], [71.0, 152.0], [72.0, 151.0], [73.0, 157.0], [74.0, 169.0], [75.0, 154.0], [76.0, 165.0], [77.0, 156.0], [78.0, 164.0], [79.0, 153.0], [80.0, 157.0], [81.0, 163.0], [82.0, 148.0], [83.0, 153.0], [84.0, 157.0], [85.0, 152.0], [86.0, 158.0], [87.0, 168.0], [88.0, 155.0], [89.0, 165.0], [90.0, 167.0], [92.0, 361.5], [93.0, 140.0], [94.0, 145.0], [95.0, 153.0], [96.0, 146.0], [97.0, 149.0], [98.0, 150.0], [99.0, 171.0], [100.0, 151.0], [101.0, 153.0], [102.0, 152.0], [103.0, 159.0], [104.0, 158.0], [105.0, 154.0], [106.0, 153.0], [107.0, 152.0], [108.0, 156.0], [109.0, 148.0], [110.0, 147.0], [111.0, 156.0], [112.0, 154.0], [113.0, 156.0], [114.0, 156.0], [115.0, 161.0], [116.0, 150.0], [117.0, 158.0], [118.0, 160.0], [119.0, 166.0], [120.0, 165.0], [121.0, 158.0], [122.0, 162.0], [123.0, 161.0], [124.0, 163.0], [125.0, 163.0], [126.0, 148.0], [127.0, 159.0], [128.0, 149.0], [129.0, 158.0], [130.0, 166.0], [131.0, 161.0], [132.0, 155.0], [133.0, 169.0], [134.0, 155.0], [135.0, 160.0], [136.0, 164.0], [137.0, 177.0], [138.0, 158.0], [139.0, 161.0], [140.0, 156.0], [141.0, 164.0], [142.0, 166.0], [143.0, 155.0], [144.0, 161.0], [145.0, 156.0], [1.0, 186.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[73.00689655172415, 160.48275862068976]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[4.0, 34.0], [5.0, 35.0], [6.0, 40.5], [7.0, 29.0], [8.0, 23.0], [9.0, 36.5], [10.0, 42.5], [11.0, 25.5], [12.0, 32.25], [13.0, 34.333333333333336], [14.0, 31.666666666666668], [15.0, 45.333333333333336], [16.0, 27.0], [17.0, 28.2], [18.0, 32.5], [19.0, 39.0], [20.0, 28.5], [21.0, 31.2], [22.0, 39.0], [23.0, 26.8], [24.0, 28.666666666666664], [25.0, 29.625], [26.0, 33.142857142857146], [27.0, 29.125], [28.0, 24.25], [29.0, 30.5], [30.0, 30.333333333333332], [31.0, 33.333333333333336], [32.0, 28.0], [33.0, 32.4], [34.0, 30.2], [35.0, 30.5], [36.0, 27.333333333333332], [37.0, 28.25], [38.0, 33.75], [39.0, 34.75], [40.0, 33.8], [41.0, 29.0], [42.0, 30.0], [43.0, 31.5], [44.0, 31.066666666666674], [45.0, 24.11111111111111], [46.0, 28.666666666666664], [47.0, 32.22727272727272], [48.0, 31.153846153846153], [49.0, 32.166666666666664], [50.0, 31.125], [51.0, 30.428571428571427], [52.0, 33.125], [53.0, 29.375], [54.0, 34.166666666666664], [55.0, 28.4], [56.0, 34.63636363636364], [57.0, 28.428571428571427], [58.0, 42.37500000000001], [59.0, 42.04999999999999], [60.0, 31.181818181818183], [61.0, 30.07142857142857], [62.0, 29.583333333333332], [63.0, 47.99999999999999], [64.0, 34.49999999999999], [65.0, 39.727272727272734], [66.0, 32.409090909090914], [67.0, 29.59090909090909], [68.0, 28.700000000000003], [69.0, 34.91891891891892], [70.0, 31.0], [71.0, 25.666666666666668], [72.0, 35.75], [73.0, 36.375], [74.0, 29.88235294117647], [75.0, 30.470588235294116], [76.0, 60.47619047619048], [77.0, 38.66666666666666], [78.0, 43.5], [79.0, 38.5], [80.0, 25.6], [81.0, 32.666666666666664], [82.0, 41.406250000000014], [83.0, 33.49999999999999], [84.0, 383.4594594594594], [85.0, 27.571428571428573], [86.0, 197.06666666666666], [87.0, 575.5333333333334], [88.0, 513.0909090909091], [89.0, 901.6250000000002], [90.0, 603.0909090909091], [91.0, 1157.875], [92.0, 744.0769230769232], [93.0, 798.1250000000001], [94.0, 1046.7142857142858], [95.0, 848.5], [96.0, 1206.9090909090908], [97.0, 1045.9655172413795], [98.0, 1497.3636363636363], [99.0, 1197.0], [100.0, 1354.9729729729731], [101.0, 1442.2222222222224], [102.0, 519.625], [103.0, 1223.125], [104.0, 746.4444444444442], [105.0, 1061.125], [106.0, 1159.6666666666667], [107.0, 688.7692307692307], [108.0, 1066.8378378378377], [109.0, 2848.2874999999995], [110.0, 3351.8076923076924], [111.0, 1564.8333333333335], [112.0, 2559.047619047619], [113.0, 1443.4285714285713], [114.0, 1237.1999999999998], [115.0, 1268.375], [116.0, 1102.875], [117.0, 984.9999999999999], [118.0, 840.7499999999999], [119.0, 538.4000000000001], [120.0, 446.0], [121.0, 261.8], [122.0, 562.6428571428573], [123.0, 643.6666666666665], [124.0, 692.875], [125.0, 1031.1818181818182], [126.0, 751.6666666666666], [127.0, 1081.909090909091], [128.0, 204.42500000000007], [129.0, 356.68181818181813], [130.0, 193.06], [131.0, 1311.5714285714287], [132.0, 321.0869565217392], [133.0, 358.06451612903214], [134.0, 392.18750000000006], [135.0, 223.94117647058826], [136.0, 457.2272727272727], [137.0, 1466.5714285714287], [138.0, 208.08333333333337], [139.0, 629.2857142857142], [140.0, 404.0555555555556], [141.0, 216.12280701754398], [142.0, 39.54201680672268], [143.0, 116.85393258426967], [144.0, 516.6363636363636], [145.0, 1697.4227336008444]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[137.97648275862127, 1509.06027586208]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 145.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3403.733333333333, "minX": 1.5876816E12, "maxY": 267801.43333333335, "series": [{"data": [[1.58768196E12, 221398.26666666666], [1.58768166E12, 267801.43333333335], [1.5876816E12, 157984.26666666666], [1.58768226E12, 119982.48333333334], [1.58768172E12, 222098.61666666667], [1.58768232E12, 55237.65], [1.58768202E12, 261068.71666666667], [1.58768214E12, 238819.56666666668], [1.58768208E12, 147582.01666666666], [1.58768178E12, 217684.5], [1.5876822E12, 19943.05], [1.5876819E12, 229315.46666666667], [1.58768184E12, 249048.05]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58768196E12, 14006.9], [1.58768166E12, 16781.8], [1.5876816E12, 10030.033333333333], [1.58768226E12, 22265.533333333333], [1.58768172E12, 13678.2], [1.58768232E12, 3403.733333333333], [1.58768202E12, 16337.5], [1.58768214E12, 15058.3], [1.58768208E12, 20377.633333333335], [1.58768178E12, 13720.666666666666], [1.5876822E12, 32575.2], [1.5876819E12, 14328.833333333334], [1.58768184E12, 15336.666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768232E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 33.67982456140351, "minX": 1.5876816E12, "maxY": 2724.765560165973, "series": [{"data": [[1.58768196E12, 2622.6962283384323], [1.58768166E12, 1736.2802768166064], [1.5876816E12, 432.78516228748083], [1.58768226E12, 350.76624203821643], [1.58768172E12, 2724.765560165973], [1.58768232E12, 35.65725806451613], [1.58768202E12, 1929.4229074889895], [1.58768214E12, 2302.9784037558693], [1.58768208E12, 1088.8159552134355], [1.58768178E12, 2651.50943396226], [1.5876822E12, 37.67869718309858], [1.5876819E12, 2484.317145688796], [1.58768184E12, 2220.5588785046725]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768166E12, 160.04761904761904], [1.5876816E12, 160.55645161290332]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768196E12, 2578.2167689161506], [1.58768166E12, 1760.8203389830499], [1.5876816E12, 423.26666666666677], [1.58768226E12, 405.99870466321244], [1.58768172E12, 2584.190727081139], [1.58768232E12, 33.67982456140351], [1.58768202E12, 1955.0356521739152], [1.58768214E12, 2293.9327569644574], [1.58768208E12, 1229.5109078114021], [1.58768178E12, 2708.1948186528484], [1.5876822E12, 81.19045534150597], [1.5876819E12, 2496.28643216081], [1.58768184E12, 2080.9823255813944]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768232E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 33.320175438596486, "minX": 1.5876816E12, "maxY": 2723.802904564315, "series": [{"data": [[1.58768196E12, 2622.351681957185], [1.58768166E12, 1735.954152249133], [1.5876816E12, 432.5425038639876], [1.58768226E12, 349.7955414012737], [1.58768172E12, 2723.802904564315], [1.58768232E12, 35.39112903225807], [1.58768202E12, 1929.049339207049], [1.58768214E12, 2302.6976525821615], [1.58768208E12, 1088.5822253323997], [1.58768178E12, 2651.22536687631], [1.5876822E12, 37.673415492957695], [1.5876819E12, 2484.0574826560955], [1.58768184E12, 2220.1616822429905]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768166E12, 160.04761904761904], [1.5876816E12, 160.46774193548387]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768196E12, 2577.748466257671], [1.58768166E12, 1760.3762711864392], [1.5876816E12, 422.9536231884057], [1.58768226E12, 405.32707253885974], [1.58768172E12, 2583.671232876711], [1.58768232E12, 33.320175438596486], [1.58768202E12, 1954.6713043478258], [1.58768214E12, 2293.6253602305464], [1.58768208E12, 1229.0640394088673], [1.58768178E12, 2707.9316062176176], [1.5876822E12, 81.18301225919457], [1.5876819E12, 2495.900502512561], [1.58768184E12, 2080.6920930232573]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768232E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.5876816E12, "maxY": 0.9838709677419357, "series": [{"data": [[1.58768196E12, 0.42099898063200814], [1.58768166E12, 0.4982698961937718], [1.5876816E12, 0.23956723338485325], [1.58768226E12, 0.07452229299363057], [1.58768172E12, 0.43257261410788383], [1.58768232E12, 0.0], [1.58768202E12, 0.41057268722466983], [1.58768214E12, 0.40563380281690203], [1.58768208E12, 0.19244226731980435], [1.58768178E12, 0.4423480083857436], [1.5876822E12, 0.023327464788732457], [1.5876819E12, 0.3706640237859265], [1.58768184E12, 0.3691588785046723]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768166E12, 0.7619047619047619], [1.5876816E12, 0.9838709677419357]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58768196E12, 0.46319018404908024], [1.58768166E12, 0.5110169491525435], [1.5876816E12, 0.556521739130434], [1.58768226E12, 0.4507772020725383], [1.58768172E12, 0.5489989462592209], [1.58768232E12, 0.4429824561403509], [1.58768202E12, 0.4478260869565221], [1.58768214E12, 0.42747358309317945], [1.58768208E12, 0.42012667135819837], [1.58768178E12, 0.47772020725388603], [1.5876822E12, 0.4154991243432574], [1.5876819E12, 0.4462311557788939], [1.58768184E12, 0.4269767441860464]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768232E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.5876816E12, "maxY": 8157.0, "series": [{"data": [[1.58768196E12, 6566.0], [1.58768166E12, 4293.0], [1.5876816E12, 2565.0], [1.58768226E12, 4659.0], [1.58768172E12, 8157.0], [1.58768232E12, 489.0], [1.58768202E12, 3532.0], [1.58768214E12, 4696.0], [1.58768208E12, 5952.0], [1.58768178E12, 7576.0], [1.5876822E12, 2461.0], [1.5876819E12, 7155.0], [1.58768184E12, 5260.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58768196E12, 210.0], [1.58768166E12, 26.0], [1.5876816E12, 15.0], [1.58768226E12, 18.0], [1.58768172E12, 56.0], [1.58768232E12, 13.0], [1.58768202E12, 391.0], [1.58768214E12, 666.0], [1.58768208E12, 52.0], [1.58768178E12, 144.0], [1.5876822E12, 1352.0], [1.5876819E12, 113.0], [1.58768184E12, 39.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58768196E12, 4047.0], [1.58768166E12, 2735.4000000000005], [1.5876816E12, 1391.5999999999997], [1.58768226E12, 3107.7999999999997], [1.58768172E12, 5029.200000000001], [1.58768232E12, 49.0], [1.58768202E12, 2684.0], [1.58768214E12, 3297.0], [1.58768208E12, 4312.6], [1.58768178E12, 4369.8], [1.5876822E12, 2364.6], [1.5876819E12, 4154.5], [1.58768184E12, 3764.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58768196E12, 5191.400000000001], [1.58768166E12, 3495.189999999999], [1.5876816E12, 1891.8999999999994], [1.58768226E12, 4520.78], [1.58768172E12, 7302.779999999998], [1.58768232E12, 110.61000000000013], [1.58768202E12, 2983.16], [1.58768214E12, 3943.2000000000003], [1.58768208E12, 5276.960000000001], [1.58768178E12, 6382.119999999999], [1.5876822E12, 2461.0], [1.5876819E12, 4995.75], [1.58768184E12, 4722.08]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58768196E12, 4371.5], [1.58768166E12, 2959.85], [1.5876816E12, 1569.8999999999985], [1.58768226E12, 4153.699999999999], [1.58768172E12, 5905.3], [1.58768232E12, 77.14999999999998], [1.58768202E12, 2796.2], [1.58768214E12, 3544.3999999999987], [1.58768208E12, 4507.4], [1.58768178E12, 5278.799999999999], [1.5876822E12, 2434.2], [1.5876819E12, 4442.75], [1.58768184E12, 4193.7]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768232E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 3032.0, "series": [{"data": [[2.0, 171.0], [3.0, 27.5], [4.0, 43.5], [6.0, 35.5], [7.0, 40.5], [8.0, 34.5], [10.0, 1195.0], [11.0, 28.5], [12.0, 232.5], [13.0, 30.0], [14.0, 1565.0], [15.0, 2799.0], [16.0, 339.5], [17.0, 2141.5], [18.0, 1964.0], [19.0, 1457.0], [20.0, 39.5], [21.0, 2778.0], [22.0, 2878.0], [23.0, 1786.5], [24.0, 2116.5], [25.0, 2437.5], [26.0, 2138.0], [27.0, 2099.0], [28.0, 1959.0], [29.0, 1976.0], [30.0, 2279.0], [31.0, 2313.5], [33.0, 2261.0], [32.0, 2039.5], [34.0, 2140.5], [35.0, 2143.0], [37.0, 2008.0], [36.0, 2124.0], [38.0, 2075.0], [39.0, 2088.5], [41.0, 1535.5], [40.0, 1912.0], [43.0, 1497.0], [42.0, 1732.0], [45.0, 1466.0], [44.0, 1759.0], [47.0, 1541.0], [46.0, 1907.5], [48.0, 1281.0], [49.0, 934.0], [51.0, 1630.0], [50.0, 2150.0], [53.0, 1251.0], [54.0, 684.5], [55.0, 2582.5], [56.0, 778.5], [57.0, 1646.5], [58.0, 1478.5], [59.0, 1330.0], [63.0, 2846.0], [62.0, 2118.0], [67.0, 1279.0], [68.0, 2752.5], [79.0, 1509.0], [133.0, 2322.5], [1.0, 489.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[26.0, 2.0], [38.0, 1850.5], [45.0, 1347.0], [50.0, 2.0], [53.0, 2.0], [52.0, 2.0], [54.0, 388.0], [55.0, 3032.0], [57.0, 2.0], [59.0, 2.0], [58.0, 2.0], [61.0, 2.0], [63.0, 2.0], [62.0, 2.0], [67.0, 2.0], [65.0, 2.0], [64.0, 2.0], [66.0, 2.0], [68.0, 2.0], [69.0, 2.0], [70.0, 2.0], [71.0, 2.0], [73.0, 2.0], [75.0, 2.0], [74.0, 2.0], [72.0, 2.0], [76.0, 2.0], [79.0, 2.0], [77.0, 2.0], [83.0, 2.0], [81.0, 2.0], [80.0, 2.0], [82.0, 2.0], [87.0, 2.0], [85.0, 2.0], [86.0, 2.0], [84.0, 2.0], [88.0, 2.0], [91.0, 2.0], [89.0, 2.0], [94.0, 2.0], [95.0, 2.0], [96.0, 2.0], [102.0, 2.0], [100.0, 2.0], [101.0, 2.0], [109.0, 2.0], [117.0, 921.0], [133.0, 993.0], [129.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 133.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 3032.0, "series": [{"data": [[2.0, 169.5], [3.0, 27.0], [4.0, 43.5], [6.0, 35.0], [7.0, 40.0], [8.0, 34.0], [10.0, 1193.5], [11.0, 28.5], [12.0, 232.0], [13.0, 29.0], [14.0, 1565.0], [15.0, 2799.0], [16.0, 339.5], [17.0, 2141.5], [18.0, 1964.0], [19.0, 1457.0], [20.0, 39.5], [21.0, 2775.0], [22.0, 2878.0], [23.0, 1786.5], [24.0, 2116.0], [25.0, 2428.0], [26.0, 2138.0], [27.0, 2099.0], [28.0, 1958.5], [29.0, 1972.0], [30.0, 2279.0], [31.0, 2313.5], [33.0, 2260.0], [32.0, 2039.5], [34.0, 2140.5], [35.0, 2143.0], [37.0, 2008.0], [36.0, 2124.0], [38.0, 2075.0], [39.0, 2088.5], [41.0, 1535.5], [40.0, 1912.0], [43.0, 1494.0], [42.0, 1732.0], [45.0, 1466.0], [44.0, 1757.5], [47.0, 1541.0], [46.0, 1907.5], [48.0, 1281.0], [49.0, 934.0], [51.0, 1630.0], [50.0, 2150.0], [53.0, 1251.0], [54.0, 684.5], [55.0, 2582.5], [56.0, 778.5], [57.0, 1645.5], [58.0, 1478.5], [59.0, 1330.0], [63.0, 2846.0], [62.0, 2116.5], [67.0, 1279.0], [68.0, 2752.5], [79.0, 1508.5], [133.0, 2322.5], [1.0, 489.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[26.0, 2.0], [38.0, 1850.5], [45.0, 1347.0], [50.0, 2.0], [53.0, 2.0], [52.0, 2.0], [54.0, 388.0], [55.0, 3032.0], [57.0, 2.0], [59.0, 2.0], [58.0, 2.0], [61.0, 2.0], [63.0, 2.0], [62.0, 2.0], [67.0, 2.0], [65.0, 2.0], [64.0, 2.0], [66.0, 2.0], [68.0, 2.0], [69.0, 2.0], [70.0, 2.0], [71.0, 2.0], [73.0, 2.0], [75.0, 2.0], [74.0, 2.0], [72.0, 2.0], [76.0, 2.0], [79.0, 2.0], [77.0, 2.0], [83.0, 2.0], [81.0, 2.0], [80.0, 2.0], [82.0, 2.0], [87.0, 2.0], [85.0, 2.0], [86.0, 2.0], [84.0, 2.0], [88.0, 2.0], [91.0, 2.0], [89.0, 2.0], [94.0, 2.0], [95.0, 2.0], [96.0, 2.0], [102.0, 2.0], [100.0, 2.0], [101.0, 2.0], [109.0, 2.0], [117.0, 921.0], [133.0, 993.0], [129.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 133.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 7.9, "minX": 1.5876816E12, "maxY": 74.85, "series": [{"data": [[1.58768196E12, 32.8], [1.58768166E12, 39.88333333333333], [1.5876816E12, 25.216666666666665], [1.58768226E12, 51.9], [1.58768172E12, 31.8], [1.58768232E12, 7.9], [1.58768202E12, 37.8], [1.58768214E12, 34.85], [1.58768208E12, 47.65], [1.58768178E12, 31.966666666666665], [1.5876822E12, 74.85], [1.5876819E12, 33.13333333333333], [1.58768184E12, 36.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768232E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.5876816E12, "maxY": 74.8, "series": [{"data": [[1.58768196E12, 31.733333333333334], [1.58768166E12, 38.7], [1.5876816E12, 24.35], [1.58768226E12, 16.416666666666668], [1.58768172E12, 31.883333333333333], [1.58768232E12, 7.933333333333334], [1.58768202E12, 37.45], [1.58768214E12, 34.25], [1.58768208E12, 20.55], [1.58768178E12, 31.216666666666665], [1.5876822E12, 1.1333333333333333], [1.5876819E12, 32.9], [1.58768184E12, 35.75]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58768196E12, 0.4]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.58768196E12, 0.5166666666666667], [1.58768166E12, 0.5833333333333334], [1.58768214E12, 0.85], [1.58768208E12, 26.95], [1.58768178E12, 0.7666666666666667], [1.58768226E12, 35.483333333333334], [1.5876822E12, 74.8], [1.5876819E12, 0.5], [1.58768202E12, 0.6333333333333333]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768232E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.5876816E12, "maxY": 37.55, "series": [{"data": [[1.58768166E12, 0.35], [1.5876816E12, 2.066666666666667]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58768196E12, 15.916666666666666], [1.58768166E12, 18.95], [1.5876816E12, 10.783333333333333], [1.58768226E12, 8.35], [1.58768172E12, 16.066666666666666], [1.58768232E12, 4.133333333333334], [1.58768202E12, 18.683333333333334], [1.58768214E12, 17.283333333333335], [1.58768208E12, 10.066666666666666], [1.58768178E12, 15.516666666666667], [1.5876822E12, 0.31666666666666665], [1.5876819E12, 16.616666666666667], [1.58768184E12, 17.833333333333332]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58768196E12, 0.43333333333333335], [1.58768166E12, 0.31666666666666665], [1.58768214E12, 0.4666666666666667], [1.58768208E12, 13.75], [1.58768178E12, 0.38333333333333336], [1.58768226E12, 17.816666666666666], [1.5876822E12, 37.55], [1.5876819E12, 0.2], [1.58768202E12, 0.23333333333333334]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.58768196E12, 15.816666666666666], [1.58768166E12, 19.4], [1.5876816E12, 11.5], [1.58768226E12, 8.066666666666666], [1.58768172E12, 15.816666666666666], [1.58768232E12, 3.8], [1.58768202E12, 18.766666666666666], [1.58768214E12, 16.966666666666665], [1.58768208E12, 10.483333333333333], [1.58768178E12, 15.7], [1.5876822E12, 0.8166666666666667], [1.5876819E12, 16.283333333333335], [1.58768184E12, 17.916666666666668]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58768196E12, 0.48333333333333334], [1.58768166E12, 0.26666666666666666], [1.58768214E12, 0.38333333333333336], [1.58768208E12, 13.2], [1.58768178E12, 0.38333333333333336], [1.58768226E12, 17.666666666666668], [1.5876822E12, 37.25], [1.5876819E12, 0.3], [1.58768202E12, 0.4]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768232E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.5876816E12, "maxY": 74.8, "series": [{"data": [[1.58768196E12, 31.733333333333334], [1.58768166E12, 38.7], [1.5876816E12, 24.35], [1.58768226E12, 16.416666666666668], [1.58768172E12, 31.883333333333333], [1.58768232E12, 7.933333333333334], [1.58768202E12, 37.45], [1.58768214E12, 34.25], [1.58768208E12, 20.55], [1.58768178E12, 31.216666666666665], [1.5876822E12, 1.1333333333333333], [1.5876819E12, 32.9], [1.58768184E12, 35.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58768196E12, 0.9166666666666666], [1.58768166E12, 0.5833333333333334], [1.58768214E12, 0.85], [1.58768208E12, 26.95], [1.58768178E12, 0.7666666666666667], [1.58768226E12, 35.483333333333334], [1.5876822E12, 74.8], [1.5876819E12, 0.5], [1.58768202E12, 0.6333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768232E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

