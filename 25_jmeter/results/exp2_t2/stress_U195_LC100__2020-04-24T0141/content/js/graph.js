/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 13669.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 1.0], [7.2, 1.0], [7.3, 1.0], [7.4, 1.0], [7.5, 1.0], [7.6, 1.0], [7.7, 1.0], [7.8, 1.0], [7.9, 1.0], [8.0, 1.0], [8.1, 1.0], [8.2, 1.0], [8.3, 1.0], [8.4, 1.0], [8.5, 1.0], [8.6, 1.0], [8.7, 1.0], [8.8, 1.0], [8.9, 1.0], [9.0, 1.0], [9.1, 1.0], [9.2, 1.0], [9.3, 1.0], [9.4, 1.0], [9.5, 1.0], [9.6, 1.0], [9.7, 1.0], [9.8, 1.0], [9.9, 1.0], [10.0, 1.0], [10.1, 1.0], [10.2, 1.0], [10.3, 1.0], [10.4, 1.0], [10.5, 1.0], [10.6, 1.0], [10.7, 1.0], [10.8, 1.0], [10.9, 1.0], [11.0, 1.0], [11.1, 1.0], [11.2, 1.0], [11.3, 1.0], [11.4, 1.0], [11.5, 1.0], [11.6, 1.0], [11.7, 1.0], [11.8, 1.0], [11.9, 1.0], [12.0, 1.0], [12.1, 1.0], [12.2, 1.0], [12.3, 1.0], [12.4, 1.0], [12.5, 1.0], [12.6, 1.0], [12.7, 1.0], [12.8, 1.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 2.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 2.0], [21.6, 2.0], [21.7, 2.0], [21.8, 2.0], [21.9, 2.0], [22.0, 2.0], [22.1, 2.0], [22.2, 2.0], [22.3, 2.0], [22.4, 2.0], [22.5, 2.0], [22.6, 2.0], [22.7, 2.0], [22.8, 2.0], [22.9, 2.0], [23.0, 2.0], [23.1, 2.0], [23.2, 2.0], [23.3, 2.0], [23.4, 2.0], [23.5, 2.0], [23.6, 2.0], [23.7, 2.0], [23.8, 2.0], [23.9, 2.0], [24.0, 2.0], [24.1, 2.0], [24.2, 2.0], [24.3, 2.0], [24.4, 2.0], [24.5, 2.0], [24.6, 2.0], [24.7, 2.0], [24.8, 2.0], [24.9, 2.0], [25.0, 2.0], [25.1, 2.0], [25.2, 2.0], [25.3, 2.0], [25.4, 2.0], [25.5, 2.0], [25.6, 2.0], [25.7, 2.0], [25.8, 2.0], [25.9, 2.0], [26.0, 2.0], [26.1, 2.0], [26.2, 2.0], [26.3, 2.0], [26.4, 2.0], [26.5, 2.0], [26.6, 2.0], [26.7, 2.0], [26.8, 2.0], [26.9, 2.0], [27.0, 2.0], [27.1, 2.0], [27.2, 2.0], [27.3, 2.0], [27.4, 2.0], [27.5, 2.0], [27.6, 2.0], [27.7, 2.0], [27.8, 2.0], [27.9, 2.0], [28.0, 2.0], [28.1, 2.0], [28.2, 2.0], [28.3, 2.0], [28.4, 2.0], [28.5, 2.0], [28.6, 2.0], [28.7, 2.0], [28.8, 2.0], [28.9, 2.0], [29.0, 2.0], [29.1, 2.0], [29.2, 2.0], [29.3, 2.0], [29.4, 2.0], [29.5, 2.0], [29.6, 2.0], [29.7, 2.0], [29.8, 2.0], [29.9, 2.0], [30.0, 2.0], [30.1, 2.0], [30.2, 2.0], [30.3, 2.0], [30.4, 2.0], [30.5, 2.0], [30.6, 2.0], [30.7, 2.0], [30.8, 2.0], [30.9, 2.0], [31.0, 2.0], [31.1, 2.0], [31.2, 2.0], [31.3, 2.0], [31.4, 2.0], [31.5, 2.0], [31.6, 2.0], [31.7, 2.0], [31.8, 2.0], [31.9, 2.0], [32.0, 2.0], [32.1, 2.0], [32.2, 2.0], [32.3, 2.0], [32.4, 2.0], [32.5, 2.0], [32.6, 2.0], [32.7, 2.0], [32.8, 2.0], [32.9, 2.0], [33.0, 2.0], [33.1, 2.0], [33.2, 2.0], [33.3, 2.0], [33.4, 2.0], [33.5, 2.0], [33.6, 2.0], [33.7, 2.0], [33.8, 2.0], [33.9, 2.0], [34.0, 2.0], [34.1, 2.0], [34.2, 2.0], [34.3, 2.0], [34.4, 2.0], [34.5, 2.0], [34.6, 2.0], [34.7, 2.0], [34.8, 2.0], [34.9, 2.0], [35.0, 2.0], [35.1, 2.0], [35.2, 2.0], [35.3, 2.0], [35.4, 2.0], [35.5, 2.0], [35.6, 2.0], [35.7, 2.0], [35.8, 2.0], [35.9, 2.0], [36.0, 2.0], [36.1, 2.0], [36.2, 2.0], [36.3, 2.0], [36.4, 2.0], [36.5, 2.0], [36.6, 2.0], [36.7, 2.0], [36.8, 2.0], [36.9, 2.0], [37.0, 2.0], [37.1, 2.0], [37.2, 2.0], [37.3, 2.0], [37.4, 2.0], [37.5, 2.0], [37.6, 2.0], [37.7, 2.0], [37.8, 2.0], [37.9, 2.0], [38.0, 2.0], [38.1, 2.0], [38.2, 2.0], [38.3, 2.0], [38.4, 2.0], [38.5, 2.0], [38.6, 2.0], [38.7, 2.0], [38.8, 2.0], [38.9, 2.0], [39.0, 2.0], [39.1, 2.0], [39.2, 2.0], [39.3, 2.0], [39.4, 2.0], [39.5, 2.0], [39.6, 2.0], [39.7, 2.0], [39.8, 2.0], [39.9, 2.0], [40.0, 2.0], [40.1, 2.0], [40.2, 2.0], [40.3, 2.0], [40.4, 2.0], [40.5, 2.0], [40.6, 2.0], [40.7, 2.0], [40.8, 2.0], [40.9, 2.0], [41.0, 2.0], [41.1, 2.0], [41.2, 3.0], [41.3, 3.0], [41.4, 3.0], [41.5, 3.0], [41.6, 3.0], [41.7, 3.0], [41.8, 3.0], [41.9, 3.0], [42.0, 3.0], [42.1, 3.0], [42.2, 3.0], [42.3, 3.0], [42.4, 3.0], [42.5, 3.0], [42.6, 3.0], [42.7, 3.0], [42.8, 3.0], [42.9, 3.0], [43.0, 3.0], [43.1, 3.0], [43.2, 3.0], [43.3, 3.0], [43.4, 3.0], [43.5, 3.0], [43.6, 4.0], [43.7, 4.0], [43.8, 4.0], [43.9, 4.0], [44.0, 4.0], [44.1, 4.0], [44.2, 4.0], [44.3, 5.0], [44.4, 5.0], [44.5, 5.0], [44.6, 6.0], [44.7, 6.0], [44.8, 8.0], [44.9, 11.0], [45.0, 20.0], [45.1, 22.0], [45.2, 24.0], [45.3, 25.0], [45.4, 26.0], [45.5, 28.0], [45.6, 28.0], [45.7, 29.0], [45.8, 30.0], [45.9, 31.0], [46.0, 32.0], [46.1, 33.0], [46.2, 35.0], [46.3, 37.0], [46.4, 38.0], [46.5, 40.0], [46.6, 42.0], [46.7, 45.0], [46.8, 48.0], [46.9, 55.0], [47.0, 62.0], [47.1, 83.0], [47.2, 165.0], [47.3, 235.0], [47.4, 281.0], [47.5, 352.0], [47.6, 387.0], [47.7, 425.0], [47.8, 468.0], [47.9, 494.0], [48.0, 537.0], [48.1, 571.0], [48.2, 601.0], [48.3, 629.0], [48.4, 651.0], [48.5, 682.0], [48.6, 701.0], [48.7, 736.0], [48.8, 761.0], [48.9, 791.0], [49.0, 808.0], [49.1, 840.0], [49.2, 858.0], [49.3, 873.0], [49.4, 897.0], [49.5, 924.0], [49.6, 948.0], [49.7, 966.0], [49.8, 982.0], [49.9, 997.0], [50.0, 1015.0], [50.1, 1034.0], [50.2, 1053.0], [50.3, 1071.0], [50.4, 1087.0], [50.5, 1106.0], [50.6, 1124.0], [50.7, 1139.0], [50.8, 1156.0], [50.9, 1186.0], [51.0, 1211.0], [51.1, 1231.0], [51.2, 1249.0], [51.3, 1264.0], [51.4, 1279.0], [51.5, 1293.0], [51.6, 1303.0], [51.7, 1317.0], [51.8, 1329.0], [51.9, 1344.0], [52.0, 1355.0], [52.1, 1374.0], [52.2, 1386.0], [52.3, 1396.0], [52.4, 1411.0], [52.5, 1426.0], [52.6, 1439.0], [52.7, 1450.0], [52.8, 1460.0], [52.9, 1471.0], [53.0, 1482.0], [53.1, 1495.0], [53.2, 1501.0], [53.3, 1512.0], [53.4, 1522.0], [53.5, 1531.0], [53.6, 1543.0], [53.7, 1556.0], [53.8, 1567.0], [53.9, 1576.0], [54.0, 1588.0], [54.1, 1598.0], [54.2, 1608.0], [54.3, 1622.0], [54.4, 1629.0], [54.5, 1641.0], [54.6, 1651.0], [54.7, 1662.0], [54.8, 1675.0], [54.9, 1686.0], [55.0, 1700.0], [55.1, 1708.0], [55.2, 1716.0], [55.3, 1726.0], [55.4, 1735.0], [55.5, 1743.0], [55.6, 1750.0], [55.7, 1762.0], [55.8, 1769.0], [55.9, 1778.0], [56.0, 1789.0], [56.1, 1798.0], [56.2, 1804.0], [56.3, 1817.0], [56.4, 1826.0], [56.5, 1831.0], [56.6, 1843.0], [56.7, 1855.0], [56.8, 1864.0], [56.9, 1875.0], [57.0, 1883.0], [57.1, 1891.0], [57.2, 1904.0], [57.3, 1911.0], [57.4, 1922.0], [57.5, 1931.0], [57.6, 1943.0], [57.7, 1951.0], [57.8, 1965.0], [57.9, 1973.0], [58.0, 1981.0], [58.1, 1987.0], [58.2, 1993.0], [58.3, 2004.0], [58.4, 2013.0], [58.5, 2024.0], [58.6, 2031.0], [58.7, 2041.0], [58.8, 2049.0], [58.9, 2056.0], [59.0, 2066.0], [59.1, 2077.0], [59.2, 2088.0], [59.3, 2094.0], [59.4, 2104.0], [59.5, 2114.0], [59.6, 2123.0], [59.7, 2133.0], [59.8, 2137.0], [59.9, 2150.0], [60.0, 2161.0], [60.1, 2167.0], [60.2, 2175.0], [60.3, 2182.0], [60.4, 2191.0], [60.5, 2200.0], [60.6, 2206.0], [60.7, 2215.0], [60.8, 2221.0], [60.9, 2225.0], [61.0, 2234.0], [61.1, 2242.0], [61.2, 2249.0], [61.3, 2257.0], [61.4, 2263.0], [61.5, 2273.0], [61.6, 2279.0], [61.7, 2286.0], [61.8, 2292.0], [61.9, 2299.0], [62.0, 2305.0], [62.1, 2310.0], [62.2, 2314.0], [62.3, 2322.0], [62.4, 2330.0], [62.5, 2336.0], [62.6, 2340.0], [62.7, 2345.0], [62.8, 2352.0], [62.9, 2355.0], [63.0, 2360.0], [63.1, 2366.0], [63.2, 2372.0], [63.3, 2375.0], [63.4, 2381.0], [63.5, 2388.0], [63.6, 2395.0], [63.7, 2401.0], [63.8, 2407.0], [63.9, 2415.0], [64.0, 2424.0], [64.1, 2432.0], [64.2, 2437.0], [64.3, 2443.0], [64.4, 2449.0], [64.5, 2454.0], [64.6, 2461.0], [64.7, 2471.0], [64.8, 2480.0], [64.9, 2488.0], [65.0, 2494.0], [65.1, 2503.0], [65.2, 2511.0], [65.3, 2517.0], [65.4, 2524.0], [65.5, 2532.0], [65.6, 2537.0], [65.7, 2544.0], [65.8, 2550.0], [65.9, 2558.0], [66.0, 2561.0], [66.1, 2567.0], [66.2, 2574.0], [66.3, 2582.0], [66.4, 2590.0], [66.5, 2597.0], [66.6, 2605.0], [66.7, 2615.0], [66.8, 2621.0], [66.9, 2630.0], [67.0, 2637.0], [67.1, 2643.0], [67.2, 2649.0], [67.3, 2657.0], [67.4, 2667.0], [67.5, 2675.0], [67.6, 2680.0], [67.7, 2687.0], [67.8, 2694.0], [67.9, 2702.0], [68.0, 2709.0], [68.1, 2714.0], [68.2, 2718.0], [68.3, 2727.0], [68.4, 2731.0], [68.5, 2739.0], [68.6, 2747.0], [68.7, 2752.0], [68.8, 2760.0], [68.9, 2765.0], [69.0, 2770.0], [69.1, 2779.0], [69.2, 2784.0], [69.3, 2792.0], [69.4, 2797.0], [69.5, 2804.0], [69.6, 2810.0], [69.7, 2818.0], [69.8, 2824.0], [69.9, 2832.0], [70.0, 2838.0], [70.1, 2846.0], [70.2, 2854.0], [70.3, 2860.0], [70.4, 2866.0], [70.5, 2872.0], [70.6, 2878.0], [70.7, 2883.0], [70.8, 2891.0], [70.9, 2896.0], [71.0, 2901.0], [71.1, 2909.0], [71.2, 2915.0], [71.3, 2921.0], [71.4, 2928.0], [71.5, 2934.0], [71.6, 2939.0], [71.7, 2947.0], [71.8, 2952.0], [71.9, 2959.0], [72.0, 2964.0], [72.1, 2970.0], [72.2, 2977.0], [72.3, 2983.0], [72.4, 2989.0], [72.5, 2995.0], [72.6, 3002.0], [72.7, 3008.0], [72.8, 3014.0], [72.9, 3019.0], [73.0, 3025.0], [73.1, 3031.0], [73.2, 3039.0], [73.3, 3046.0], [73.4, 3055.0], [73.5, 3061.0], [73.6, 3070.0], [73.7, 3077.0], [73.8, 3083.0], [73.9, 3089.0], [74.0, 3093.0], [74.1, 3097.0], [74.2, 3103.0], [74.3, 3109.0], [74.4, 3113.0], [74.5, 3118.0], [74.6, 3122.0], [74.7, 3129.0], [74.8, 3135.0], [74.9, 3143.0], [75.0, 3152.0], [75.1, 3159.0], [75.2, 3167.0], [75.3, 3175.0], [75.4, 3185.0], [75.5, 3192.0], [75.6, 3198.0], [75.7, 3204.0], [75.8, 3208.0], [75.9, 3214.0], [76.0, 3220.0], [76.1, 3227.0], [76.2, 3233.0], [76.3, 3239.0], [76.4, 3247.0], [76.5, 3255.0], [76.6, 3262.0], [76.7, 3271.0], [76.8, 3276.0], [76.9, 3285.0], [77.0, 3294.0], [77.1, 3300.0], [77.2, 3307.0], [77.3, 3316.0], [77.4, 3321.0], [77.5, 3327.0], [77.6, 3331.0], [77.7, 3338.0], [77.8, 3342.0], [77.9, 3350.0], [78.0, 3356.0], [78.1, 3361.0], [78.2, 3366.0], [78.3, 3372.0], [78.4, 3378.0], [78.5, 3388.0], [78.6, 3395.0], [78.7, 3401.0], [78.8, 3408.0], [78.9, 3415.0], [79.0, 3420.0], [79.1, 3427.0], [79.2, 3434.0], [79.3, 3442.0], [79.4, 3450.0], [79.5, 3459.0], [79.6, 3464.0], [79.7, 3472.0], [79.8, 3478.0], [79.9, 3487.0], [80.0, 3493.0], [80.1, 3501.0], [80.2, 3508.0], [80.3, 3513.0], [80.4, 3520.0], [80.5, 3528.0], [80.6, 3535.0], [80.7, 3543.0], [80.8, 3549.0], [80.9, 3558.0], [81.0, 3568.0], [81.1, 3576.0], [81.2, 3588.0], [81.3, 3598.0], [81.4, 3606.0], [81.5, 3612.0], [81.6, 3622.0], [81.7, 3630.0], [81.8, 3636.0], [81.9, 3642.0], [82.0, 3651.0], [82.1, 3657.0], [82.2, 3667.0], [82.3, 3674.0], [82.4, 3683.0], [82.5, 3690.0], [82.6, 3702.0], [82.7, 3710.0], [82.8, 3718.0], [82.9, 3726.0], [83.0, 3734.0], [83.1, 3742.0], [83.2, 3749.0], [83.3, 3757.0], [83.4, 3764.0], [83.5, 3774.0], [83.6, 3783.0], [83.7, 3790.0], [83.8, 3800.0], [83.9, 3811.0], [84.0, 3821.0], [84.1, 3829.0], [84.2, 3837.0], [84.3, 3844.0], [84.4, 3851.0], [84.5, 3861.0], [84.6, 3871.0], [84.7, 3878.0], [84.8, 3888.0], [84.9, 3900.0], [85.0, 3910.0], [85.1, 3920.0], [85.2, 3928.0], [85.3, 3936.0], [85.4, 3946.0], [85.5, 3957.0], [85.6, 3971.0], [85.7, 3979.0], [85.8, 3991.0], [85.9, 4002.0], [86.0, 4012.0], [86.1, 4026.0], [86.2, 4034.0], [86.3, 4039.0], [86.4, 4053.0], [86.5, 4063.0], [86.6, 4070.0], [86.7, 4078.0], [86.8, 4086.0], [86.9, 4097.0], [87.0, 4106.0], [87.1, 4119.0], [87.2, 4128.0], [87.3, 4140.0], [87.4, 4153.0], [87.5, 4163.0], [87.6, 4170.0], [87.7, 4185.0], [87.8, 4196.0], [87.9, 4213.0], [88.0, 4227.0], [88.1, 4235.0], [88.2, 4245.0], [88.3, 4255.0], [88.4, 4266.0], [88.5, 4282.0], [88.6, 4293.0], [88.7, 4308.0], [88.8, 4318.0], [88.9, 4331.0], [89.0, 4337.0], [89.1, 4351.0], [89.2, 4362.0], [89.3, 4377.0], [89.4, 4393.0], [89.5, 4412.0], [89.6, 4428.0], [89.7, 4451.0], [89.8, 4470.0], [89.9, 4495.0], [90.0, 4510.0], [90.1, 4526.0], [90.2, 4546.0], [90.3, 4563.0], [90.4, 4577.0], [90.5, 4594.0], [90.6, 4616.0], [90.7, 4633.0], [90.8, 4651.0], [90.9, 4669.0], [91.0, 4689.0], [91.1, 4707.0], [91.2, 4730.0], [91.3, 4761.0], [91.4, 4787.0], [91.5, 4809.0], [91.6, 4836.0], [91.7, 4857.0], [91.8, 4883.0], [91.9, 4908.0], [92.0, 4937.0], [92.1, 4956.0], [92.2, 4982.0], [92.3, 5001.0], [92.4, 5021.0], [92.5, 5047.0], [92.6, 5062.0], [92.7, 5087.0], [92.8, 5116.0], [92.9, 5150.0], [93.0, 5171.0], [93.1, 5193.0], [93.2, 5214.0], [93.3, 5244.0], [93.4, 5269.0], [93.5, 5296.0], [93.6, 5319.0], [93.7, 5342.0], [93.8, 5358.0], [93.9, 5397.0], [94.0, 5428.0], [94.1, 5459.0], [94.2, 5486.0], [94.3, 5524.0], [94.4, 5559.0], [94.5, 5594.0], [94.6, 5612.0], [94.7, 5633.0], [94.8, 5655.0], [94.9, 5680.0], [95.0, 5707.0], [95.1, 5727.0], [95.2, 5748.0], [95.3, 5781.0], [95.4, 5807.0], [95.5, 5828.0], [95.6, 5859.0], [95.7, 5881.0], [95.8, 5907.0], [95.9, 5929.0], [96.0, 5960.0], [96.1, 6005.0], [96.2, 6045.0], [96.3, 6078.0], [96.4, 6109.0], [96.5, 6171.0], [96.6, 6222.0], [96.7, 6272.0], [96.8, 6345.0], [96.9, 6386.0], [97.0, 6455.0], [97.1, 6501.0], [97.2, 6584.0], [97.3, 6691.0], [97.4, 6731.0], [97.5, 6861.0], [97.6, 6939.0], [97.7, 7037.0], [97.8, 7169.0], [97.9, 7328.0], [98.0, 7466.0], [98.1, 7613.0], [98.2, 7724.0], [98.3, 7835.0], [98.4, 7961.0], [98.5, 8204.0], [98.6, 8408.0], [98.7, 8679.0], [98.8, 9154.0], [98.9, 9449.0], [99.0, 9623.0], [99.1, 9938.0], [99.2, 10187.0], [99.3, 10382.0], [99.4, 10573.0], [99.5, 10884.0], [99.6, 11052.0], [99.7, 11455.0], [99.8, 11700.0], [99.9, 12150.0], [100.0, 13669.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 138.0], [0.1, 138.0], [0.2, 138.0], [0.3, 138.0], [0.4, 138.0], [0.5, 138.0], [0.6, 140.0], [0.7, 140.0], [0.8, 140.0], [0.9, 140.0], [1.0, 140.0], [1.1, 141.0], [1.2, 141.0], [1.3, 141.0], [1.4, 141.0], [1.5, 141.0], [1.6, 141.0], [1.7, 141.0], [1.8, 141.0], [1.9, 141.0], [2.0, 141.0], [2.1, 141.0], [2.2, 141.0], [2.3, 141.0], [2.4, 141.0], [2.5, 141.0], [2.6, 143.0], [2.7, 143.0], [2.8, 143.0], [2.9, 143.0], [3.0, 143.0], [3.1, 143.0], [3.2, 143.0], [3.3, 143.0], [3.4, 143.0], [3.5, 143.0], [3.6, 143.0], [3.7, 143.0], [3.8, 143.0], [3.9, 143.0], [4.0, 143.0], [4.1, 143.0], [4.2, 144.0], [4.3, 144.0], [4.4, 144.0], [4.5, 144.0], [4.6, 144.0], [4.7, 144.0], [4.8, 144.0], [4.9, 144.0], [5.0, 144.0], [5.1, 144.0], [5.2, 144.0], [5.3, 144.0], [5.4, 144.0], [5.5, 144.0], [5.6, 144.0], [5.7, 145.0], [5.8, 145.0], [5.9, 145.0], [6.0, 145.0], [6.1, 145.0], [6.2, 145.0], [6.3, 145.0], [6.4, 145.0], [6.5, 145.0], [6.6, 145.0], [6.7, 145.0], [6.8, 145.0], [6.9, 145.0], [7.0, 145.0], [7.1, 145.0], [7.2, 145.0], [7.3, 145.0], [7.4, 145.0], [7.5, 145.0], [7.6, 145.0], [7.7, 145.0], [7.8, 145.0], [7.9, 145.0], [8.0, 145.0], [8.1, 145.0], [8.2, 145.0], [8.3, 146.0], [8.4, 146.0], [8.5, 146.0], [8.6, 146.0], [8.7, 146.0], [8.8, 146.0], [8.9, 146.0], [9.0, 146.0], [9.1, 146.0], [9.2, 146.0], [9.3, 146.0], [9.4, 146.0], [9.5, 146.0], [9.6, 146.0], [9.7, 146.0], [9.8, 146.0], [9.9, 146.0], [10.0, 146.0], [10.1, 146.0], [10.2, 146.0], [10.3, 146.0], [10.4, 146.0], [10.5, 146.0], [10.6, 146.0], [10.7, 146.0], [10.8, 146.0], [10.9, 146.0], [11.0, 146.0], [11.1, 146.0], [11.2, 146.0], [11.3, 146.0], [11.4, 146.0], [11.5, 146.0], [11.6, 146.0], [11.7, 146.0], [11.8, 147.0], [11.9, 147.0], [12.0, 147.0], [12.1, 147.0], [12.2, 147.0], [12.3, 147.0], [12.4, 147.0], [12.5, 147.0], [12.6, 147.0], [12.7, 147.0], [12.8, 147.0], [12.9, 147.0], [13.0, 147.0], [13.1, 147.0], [13.2, 147.0], [13.3, 147.0], [13.4, 147.0], [13.5, 147.0], [13.6, 147.0], [13.7, 147.0], [13.8, 147.0], [13.9, 147.0], [14.0, 147.0], [14.1, 147.0], [14.2, 147.0], [14.3, 147.0], [14.4, 147.0], [14.5, 147.0], [14.6, 147.0], [14.7, 147.0], [14.8, 147.0], [14.9, 147.0], [15.0, 147.0], [15.1, 147.0], [15.2, 147.0], [15.3, 147.0], [15.4, 148.0], [15.5, 148.0], [15.6, 148.0], [15.7, 148.0], [15.8, 148.0], [15.9, 148.0], [16.0, 148.0], [16.1, 148.0], [16.2, 148.0], [16.3, 148.0], [16.4, 148.0], [16.5, 148.0], [16.6, 148.0], [16.7, 148.0], [16.8, 148.0], [16.9, 148.0], [17.0, 148.0], [17.1, 148.0], [17.2, 148.0], [17.3, 148.0], [17.4, 148.0], [17.5, 148.0], [17.6, 148.0], [17.7, 148.0], [17.8, 148.0], [17.9, 148.0], [18.0, 148.0], [18.1, 148.0], [18.2, 148.0], [18.3, 148.0], [18.4, 148.0], [18.5, 148.0], [18.6, 148.0], [18.7, 148.0], [18.8, 148.0], [18.9, 148.0], [19.0, 149.0], [19.1, 149.0], [19.2, 149.0], [19.3, 149.0], [19.4, 149.0], [19.5, 149.0], [19.6, 149.0], [19.7, 149.0], [19.8, 149.0], [19.9, 149.0], [20.0, 149.0], [20.1, 149.0], [20.2, 149.0], [20.3, 149.0], [20.4, 149.0], [20.5, 149.0], [20.6, 149.0], [20.7, 149.0], [20.8, 149.0], [20.9, 149.0], [21.0, 149.0], [21.1, 149.0], [21.2, 149.0], [21.3, 149.0], [21.4, 149.0], [21.5, 149.0], [21.6, 149.0], [21.7, 149.0], [21.8, 149.0], [21.9, 149.0], [22.0, 149.0], [22.1, 149.0], [22.2, 149.0], [22.3, 149.0], [22.4, 149.0], [22.5, 149.0], [22.6, 149.0], [22.7, 149.0], [22.8, 149.0], [22.9, 149.0], [23.0, 149.0], [23.1, 149.0], [23.2, 149.0], [23.3, 149.0], [23.4, 149.0], [23.5, 149.0], [23.6, 149.0], [23.7, 149.0], [23.8, 149.0], [23.9, 149.0], [24.0, 149.0], [24.1, 149.0], [24.2, 149.0], [24.3, 149.0], [24.4, 149.0], [24.5, 149.0], [24.6, 149.0], [24.7, 150.0], [24.8, 150.0], [24.9, 150.0], [25.0, 150.0], [25.1, 150.0], [25.2, 150.0], [25.3, 150.0], [25.4, 150.0], [25.5, 150.0], [25.6, 150.0], [25.7, 150.0], [25.8, 150.0], [25.9, 150.0], [26.0, 150.0], [26.1, 150.0], [26.2, 150.0], [26.3, 150.0], [26.4, 150.0], [26.5, 150.0], [26.6, 150.0], [26.7, 150.0], [26.8, 150.0], [26.9, 150.0], [27.0, 150.0], [27.1, 150.0], [27.2, 150.0], [27.3, 150.0], [27.4, 150.0], [27.5, 150.0], [27.6, 150.0], [27.7, 150.0], [27.8, 150.0], [27.9, 150.0], [28.0, 150.0], [28.1, 150.0], [28.2, 150.0], [28.3, 150.0], [28.4, 150.0], [28.5, 150.0], [28.6, 150.0], [28.7, 150.0], [28.8, 150.0], [28.9, 150.0], [29.0, 150.0], [29.1, 150.0], [29.2, 150.0], [29.3, 150.0], [29.4, 150.0], [29.5, 150.0], [29.6, 150.0], [29.7, 150.0], [29.8, 150.0], [29.9, 150.0], [30.0, 150.0], [30.1, 150.0], [30.2, 150.0], [30.3, 150.0], [30.4, 150.0], [30.5, 150.0], [30.6, 150.0], [30.7, 150.0], [30.8, 150.0], [30.9, 150.0], [31.0, 150.0], [31.1, 150.0], [31.2, 150.0], [31.3, 150.0], [31.4, 150.0], [31.5, 150.0], [31.6, 150.0], [31.7, 150.0], [31.8, 150.0], [31.9, 150.0], [32.0, 150.0], [32.1, 150.0], [32.2, 150.0], [32.3, 150.0], [32.4, 150.0], [32.5, 150.0], [32.6, 150.0], [32.7, 150.0], [32.8, 150.0], [32.9, 151.0], [33.0, 151.0], [33.1, 151.0], [33.2, 151.0], [33.3, 151.0], [33.4, 151.0], [33.5, 151.0], [33.6, 151.0], [33.7, 151.0], [33.8, 151.0], [33.9, 151.0], [34.0, 151.0], [34.1, 151.0], [34.2, 151.0], [34.3, 151.0], [34.4, 151.0], [34.5, 151.0], [34.6, 151.0], [34.7, 151.0], [34.8, 151.0], [34.9, 151.0], [35.0, 151.0], [35.1, 151.0], [35.2, 151.0], [35.3, 151.0], [35.4, 151.0], [35.5, 151.0], [35.6, 151.0], [35.7, 151.0], [35.8, 151.0], [35.9, 151.0], [36.0, 151.0], [36.1, 151.0], [36.2, 151.0], [36.3, 151.0], [36.4, 151.0], [36.5, 151.0], [36.6, 151.0], [36.7, 151.0], [36.8, 151.0], [36.9, 151.0], [37.0, 151.0], [37.1, 151.0], [37.2, 151.0], [37.3, 151.0], [37.4, 151.0], [37.5, 152.0], [37.6, 152.0], [37.7, 152.0], [37.8, 152.0], [37.9, 152.0], [38.0, 152.0], [38.1, 152.0], [38.2, 152.0], [38.3, 152.0], [38.4, 152.0], [38.5, 152.0], [38.6, 152.0], [38.7, 152.0], [38.8, 152.0], [38.9, 152.0], [39.0, 152.0], [39.1, 152.0], [39.2, 152.0], [39.3, 152.0], [39.4, 152.0], [39.5, 152.0], [39.6, 152.0], [39.7, 152.0], [39.8, 152.0], [39.9, 152.0], [40.0, 152.0], [40.1, 152.0], [40.2, 152.0], [40.3, 152.0], [40.4, 152.0], [40.5, 152.0], [40.6, 152.0], [40.7, 152.0], [40.8, 152.0], [40.9, 152.0], [41.0, 152.0], [41.1, 153.0], [41.2, 153.0], [41.3, 153.0], [41.4, 153.0], [41.5, 153.0], [41.6, 153.0], [41.7, 153.0], [41.8, 153.0], [41.9, 153.0], [42.0, 153.0], [42.1, 153.0], [42.2, 153.0], [42.3, 153.0], [42.4, 153.0], [42.5, 153.0], [42.6, 153.0], [42.7, 153.0], [42.8, 153.0], [42.9, 153.0], [43.0, 153.0], [43.1, 153.0], [43.2, 153.0], [43.3, 153.0], [43.4, 153.0], [43.5, 153.0], [43.6, 153.0], [43.7, 153.0], [43.8, 153.0], [43.9, 153.0], [44.0, 153.0], [44.1, 153.0], [44.2, 153.0], [44.3, 153.0], [44.4, 153.0], [44.5, 153.0], [44.6, 153.0], [44.7, 153.0], [44.8, 153.0], [44.9, 153.0], [45.0, 153.0], [45.1, 153.0], [45.2, 153.0], [45.3, 153.0], [45.4, 153.0], [45.5, 153.0], [45.6, 153.0], [45.7, 153.0], [45.8, 153.0], [45.9, 153.0], [46.0, 153.0], [46.1, 153.0], [46.2, 153.0], [46.3, 153.0], [46.4, 153.0], [46.5, 153.0], [46.6, 153.0], [46.7, 153.0], [46.8, 153.0], [46.9, 153.0], [47.0, 153.0], [47.1, 153.0], [47.2, 154.0], [47.3, 154.0], [47.4, 154.0], [47.5, 154.0], [47.6, 154.0], [47.7, 154.0], [47.8, 154.0], [47.9, 154.0], [48.0, 154.0], [48.1, 154.0], [48.2, 154.0], [48.3, 154.0], [48.4, 154.0], [48.5, 154.0], [48.6, 154.0], [48.7, 154.0], [48.8, 154.0], [48.9, 154.0], [49.0, 154.0], [49.1, 154.0], [49.2, 154.0], [49.3, 154.0], [49.4, 154.0], [49.5, 154.0], [49.6, 154.0], [49.7, 154.0], [49.8, 154.0], [49.9, 154.0], [50.0, 154.0], [50.1, 154.0], [50.2, 154.0], [50.3, 154.0], [50.4, 154.0], [50.5, 154.0], [50.6, 154.0], [50.7, 154.0], [50.8, 154.0], [50.9, 154.0], [51.0, 154.0], [51.1, 154.0], [51.2, 154.0], [51.3, 154.0], [51.4, 154.0], [51.5, 154.0], [51.6, 154.0], [51.7, 154.0], [51.8, 154.0], [51.9, 154.0], [52.0, 154.0], [52.1, 154.0], [52.2, 154.0], [52.3, 154.0], [52.4, 155.0], [52.5, 155.0], [52.6, 155.0], [52.7, 155.0], [52.8, 155.0], [52.9, 155.0], [53.0, 155.0], [53.1, 155.0], [53.2, 155.0], [53.3, 155.0], [53.4, 155.0], [53.5, 155.0], [53.6, 155.0], [53.7, 155.0], [53.8, 155.0], [53.9, 155.0], [54.0, 155.0], [54.1, 155.0], [54.2, 155.0], [54.3, 155.0], [54.4, 155.0], [54.5, 155.0], [54.6, 155.0], [54.7, 155.0], [54.8, 155.0], [54.9, 155.0], [55.0, 155.0], [55.1, 155.0], [55.2, 155.0], [55.3, 155.0], [55.4, 155.0], [55.5, 155.0], [55.6, 155.0], [55.7, 155.0], [55.8, 155.0], [55.9, 155.0], [56.0, 155.0], [56.1, 155.0], [56.2, 155.0], [56.3, 155.0], [56.4, 155.0], [56.5, 155.0], [56.6, 155.0], [56.7, 155.0], [56.8, 155.0], [56.9, 155.0], [57.0, 155.0], [57.1, 155.0], [57.2, 155.0], [57.3, 155.0], [57.4, 155.0], [57.5, 155.0], [57.6, 155.0], [57.7, 155.0], [57.8, 155.0], [57.9, 155.0], [58.0, 156.0], [58.1, 156.0], [58.2, 156.0], [58.3, 156.0], [58.4, 156.0], [58.5, 156.0], [58.6, 156.0], [58.7, 156.0], [58.8, 156.0], [58.9, 156.0], [59.0, 156.0], [59.1, 156.0], [59.2, 156.0], [59.3, 156.0], [59.4, 156.0], [59.5, 156.0], [59.6, 156.0], [59.7, 156.0], [59.8, 156.0], [59.9, 156.0], [60.0, 156.0], [60.1, 156.0], [60.2, 156.0], [60.3, 156.0], [60.4, 156.0], [60.5, 156.0], [60.6, 156.0], [60.7, 156.0], [60.8, 156.0], [60.9, 156.0], [61.0, 156.0], [61.1, 156.0], [61.2, 156.0], [61.3, 156.0], [61.4, 156.0], [61.5, 156.0], [61.6, 157.0], [61.7, 157.0], [61.8, 157.0], [61.9, 157.0], [62.0, 157.0], [62.1, 157.0], [62.2, 157.0], [62.3, 157.0], [62.4, 157.0], [62.5, 157.0], [62.6, 157.0], [62.7, 157.0], [62.8, 157.0], [62.9, 157.0], [63.0, 157.0], [63.1, 157.0], [63.2, 157.0], [63.3, 157.0], [63.4, 157.0], [63.5, 157.0], [63.6, 157.0], [63.7, 157.0], [63.8, 157.0], [63.9, 157.0], [64.0, 157.0], [64.1, 157.0], [64.2, 157.0], [64.3, 157.0], [64.4, 157.0], [64.5, 157.0], [64.6, 157.0], [64.7, 157.0], [64.8, 157.0], [64.9, 157.0], [65.0, 157.0], [65.1, 157.0], [65.2, 158.0], [65.3, 158.0], [65.4, 158.0], [65.5, 158.0], [65.6, 158.0], [65.7, 158.0], [65.8, 158.0], [65.9, 158.0], [66.0, 158.0], [66.1, 158.0], [66.2, 158.0], [66.3, 158.0], [66.4, 158.0], [66.5, 158.0], [66.6, 158.0], [66.7, 158.0], [66.8, 158.0], [66.9, 158.0], [67.0, 158.0], [67.1, 158.0], [67.2, 158.0], [67.3, 158.0], [67.4, 158.0], [67.5, 158.0], [67.6, 158.0], [67.7, 158.0], [67.8, 158.0], [67.9, 158.0], [68.0, 158.0], [68.1, 158.0], [68.2, 158.0], [68.3, 159.0], [68.4, 159.0], [68.5, 159.0], [68.6, 159.0], [68.7, 159.0], [68.8, 159.0], [68.9, 159.0], [69.0, 159.0], [69.1, 159.0], [69.2, 159.0], [69.3, 159.0], [69.4, 159.0], [69.5, 159.0], [69.6, 159.0], [69.7, 159.0], [69.8, 159.0], [69.9, 159.0], [70.0, 159.0], [70.1, 159.0], [70.2, 159.0], [70.3, 159.0], [70.4, 159.0], [70.5, 159.0], [70.6, 159.0], [70.7, 159.0], [70.8, 159.0], [70.9, 159.0], [71.0, 159.0], [71.1, 159.0], [71.2, 159.0], [71.3, 159.0], [71.4, 159.0], [71.5, 159.0], [71.6, 159.0], [71.7, 159.0], [71.8, 159.0], [71.9, 159.0], [72.0, 159.0], [72.1, 159.0], [72.2, 159.0], [72.3, 159.0], [72.4, 159.0], [72.5, 159.0], [72.6, 159.0], [72.7, 159.0], [72.8, 159.0], [72.9, 159.0], [73.0, 159.0], [73.1, 159.0], [73.2, 159.0], [73.3, 159.0], [73.4, 159.0], [73.5, 159.0], [73.6, 159.0], [73.7, 159.0], [73.8, 159.0], [73.9, 159.0], [74.0, 159.0], [74.1, 159.0], [74.2, 159.0], [74.3, 159.0], [74.4, 159.0], [74.5, 159.0], [74.6, 159.0], [74.7, 159.0], [74.8, 159.0], [74.9, 159.0], [75.0, 159.0], [75.1, 159.0], [75.2, 159.0], [75.3, 159.0], [75.4, 160.0], [75.5, 160.0], [75.6, 160.0], [75.7, 160.0], [75.8, 160.0], [75.9, 160.0], [76.0, 160.0], [76.1, 160.0], [76.2, 160.0], [76.3, 160.0], [76.4, 160.0], [76.5, 160.0], [76.6, 160.0], [76.7, 160.0], [76.8, 160.0], [76.9, 160.0], [77.0, 160.0], [77.1, 160.0], [77.2, 160.0], [77.3, 160.0], [77.4, 160.0], [77.5, 161.0], [77.6, 161.0], [77.7, 161.0], [77.8, 161.0], [77.9, 161.0], [78.0, 161.0], [78.1, 161.0], [78.2, 161.0], [78.3, 161.0], [78.4, 161.0], [78.5, 162.0], [78.6, 162.0], [78.7, 162.0], [78.8, 162.0], [78.9, 162.0], [79.0, 162.0], [79.1, 162.0], [79.2, 162.0], [79.3, 162.0], [79.4, 162.0], [79.5, 162.0], [79.6, 162.0], [79.7, 162.0], [79.8, 162.0], [79.9, 162.0], [80.0, 163.0], [80.1, 163.0], [80.2, 163.0], [80.3, 163.0], [80.4, 163.0], [80.5, 163.0], [80.6, 163.0], [80.7, 163.0], [80.8, 163.0], [80.9, 163.0], [81.0, 163.0], [81.1, 163.0], [81.2, 163.0], [81.3, 163.0], [81.4, 163.0], [81.5, 163.0], [81.6, 164.0], [81.7, 164.0], [81.8, 164.0], [81.9, 164.0], [82.0, 164.0], [82.1, 164.0], [82.2, 164.0], [82.3, 164.0], [82.4, 164.0], [82.5, 164.0], [82.6, 165.0], [82.7, 165.0], [82.8, 165.0], [82.9, 165.0], [83.0, 165.0], [83.1, 166.0], [83.2, 166.0], [83.3, 166.0], [83.4, 166.0], [83.5, 166.0], [83.6, 166.0], [83.7, 166.0], [83.8, 166.0], [83.9, 166.0], [84.0, 166.0], [84.1, 166.0], [84.2, 166.0], [84.3, 166.0], [84.4, 166.0], [84.5, 166.0], [84.6, 166.0], [84.7, 167.0], [84.8, 167.0], [84.9, 167.0], [85.0, 167.0], [85.1, 167.0], [85.2, 167.0], [85.3, 167.0], [85.4, 167.0], [85.5, 167.0], [85.6, 167.0], [85.7, 168.0], [85.8, 168.0], [85.9, 168.0], [86.0, 168.0], [86.1, 168.0], [86.2, 169.0], [86.3, 169.0], [86.4, 169.0], [86.5, 169.0], [86.6, 169.0], [86.7, 169.0], [86.8, 169.0], [86.9, 169.0], [87.0, 169.0], [87.1, 169.0], [87.2, 170.0], [87.3, 170.0], [87.4, 170.0], [87.5, 170.0], [87.6, 170.0], [87.7, 171.0], [87.8, 171.0], [87.9, 171.0], [88.0, 171.0], [88.1, 171.0], [88.2, 171.0], [88.3, 173.0], [88.4, 173.0], [88.5, 173.0], [88.6, 173.0], [88.7, 173.0], [88.8, 175.0], [88.9, 175.0], [89.0, 175.0], [89.1, 175.0], [89.2, 175.0], [89.3, 175.0], [89.4, 175.0], [89.5, 175.0], [89.6, 175.0], [89.7, 175.0], [89.8, 177.0], [89.9, 177.0], [90.0, 177.0], [90.1, 177.0], [90.2, 177.0], [90.3, 183.0], [90.4, 183.0], [90.5, 183.0], [90.6, 183.0], [90.7, 183.0], [90.8, 194.0], [90.9, 194.0], [91.0, 194.0], [91.1, 194.0], [91.2, 194.0], [91.3, 195.0], [91.4, 195.0], [91.5, 195.0], [91.6, 195.0], [91.7, 195.0], [91.8, 200.0], [91.9, 200.0], [92.0, 200.0], [92.1, 200.0], [92.2, 200.0], [92.3, 200.0], [92.4, 212.0], [92.5, 212.0], [92.6, 212.0], [92.7, 212.0], [92.8, 212.0], [92.9, 234.0], [93.0, 234.0], [93.1, 234.0], [93.2, 234.0], [93.3, 234.0], [93.4, 243.0], [93.5, 243.0], [93.6, 243.0], [93.7, 243.0], [93.8, 243.0], [93.9, 246.0], [94.0, 246.0], [94.1, 246.0], [94.2, 246.0], [94.3, 246.0], [94.4, 248.0], [94.5, 248.0], [94.6, 248.0], [94.7, 248.0], [94.8, 248.0], [94.9, 250.0], [95.0, 250.0], [95.1, 250.0], [95.2, 250.0], [95.3, 250.0], [95.4, 252.0], [95.5, 252.0], [95.6, 252.0], [95.7, 252.0], [95.8, 252.0], [95.9, 255.0], [96.0, 255.0], [96.1, 255.0], [96.2, 255.0], [96.3, 255.0], [96.4, 255.0], [96.5, 256.0], [96.6, 256.0], [96.7, 256.0], [96.8, 256.0], [96.9, 256.0], [97.0, 259.0], [97.1, 259.0], [97.2, 259.0], [97.3, 259.0], [97.4, 259.0], [97.5, 274.0], [97.6, 274.0], [97.7, 274.0], [97.8, 274.0], [97.9, 274.0], [98.0, 277.0], [98.1, 277.0], [98.2, 277.0], [98.3, 277.0], [98.4, 277.0], [98.5, 277.0], [98.6, 277.0], [98.7, 277.0], [98.8, 277.0], [98.9, 277.0], [99.0, 310.0], [99.1, 310.0], [99.2, 310.0], [99.3, 310.0], [99.4, 310.0], [99.5, 321.0], [99.6, 321.0], [99.7, 321.0], [99.8, 321.0], [99.9, 321.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 1.0], [7.0, 1.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 2.0], [14.4, 2.0], [14.5, 2.0], [14.6, 2.0], [14.7, 2.0], [14.8, 2.0], [14.9, 2.0], [15.0, 2.0], [15.1, 2.0], [15.2, 2.0], [15.3, 2.0], [15.4, 2.0], [15.5, 2.0], [15.6, 2.0], [15.7, 2.0], [15.8, 2.0], [15.9, 2.0], [16.0, 2.0], [16.1, 2.0], [16.2, 2.0], [16.3, 2.0], [16.4, 2.0], [16.5, 2.0], [16.6, 2.0], [16.7, 2.0], [16.8, 2.0], [16.9, 2.0], [17.0, 2.0], [17.1, 2.0], [17.2, 2.0], [17.3, 2.0], [17.4, 2.0], [17.5, 2.0], [17.6, 2.0], [17.7, 2.0], [17.8, 2.0], [17.9, 2.0], [18.0, 2.0], [18.1, 2.0], [18.2, 2.0], [18.3, 2.0], [18.4, 2.0], [18.5, 2.0], [18.6, 2.0], [18.7, 2.0], [18.8, 2.0], [18.9, 2.0], [19.0, 2.0], [19.1, 2.0], [19.2, 2.0], [19.3, 2.0], [19.4, 2.0], [19.5, 2.0], [19.6, 2.0], [19.7, 2.0], [19.8, 2.0], [19.9, 2.0], [20.0, 2.0], [20.1, 2.0], [20.2, 2.0], [20.3, 2.0], [20.4, 2.0], [20.5, 2.0], [20.6, 2.0], [20.7, 2.0], [20.8, 2.0], [20.9, 2.0], [21.0, 2.0], [21.1, 2.0], [21.2, 2.0], [21.3, 2.0], [21.4, 2.0], [21.5, 2.0], [21.6, 2.0], [21.7, 2.0], [21.8, 2.0], [21.9, 2.0], [22.0, 2.0], [22.1, 2.0], [22.2, 2.0], [22.3, 2.0], [22.4, 2.0], [22.5, 2.0], [22.6, 2.0], [22.7, 2.0], [22.8, 2.0], [22.9, 2.0], [23.0, 2.0], [23.1, 2.0], [23.2, 2.0], [23.3, 2.0], [23.4, 2.0], [23.5, 2.0], [23.6, 2.0], [23.7, 2.0], [23.8, 2.0], [23.9, 2.0], [24.0, 2.0], [24.1, 2.0], [24.2, 2.0], [24.3, 2.0], [24.4, 2.0], [24.5, 2.0], [24.6, 2.0], [24.7, 2.0], [24.8, 2.0], [24.9, 2.0], [25.0, 2.0], [25.1, 2.0], [25.2, 2.0], [25.3, 2.0], [25.4, 2.0], [25.5, 2.0], [25.6, 2.0], [25.7, 2.0], [25.8, 2.0], [25.9, 2.0], [26.0, 2.0], [26.1, 2.0], [26.2, 2.0], [26.3, 2.0], [26.4, 2.0], [26.5, 2.0], [26.6, 2.0], [26.7, 2.0], [26.8, 2.0], [26.9, 2.0], [27.0, 2.0], [27.1, 2.0], [27.2, 2.0], [27.3, 2.0], [27.4, 2.0], [27.5, 2.0], [27.6, 2.0], [27.7, 2.0], [27.8, 2.0], [27.9, 2.0], [28.0, 2.0], [28.1, 2.0], [28.2, 2.0], [28.3, 2.0], [28.4, 2.0], [28.5, 2.0], [28.6, 2.0], [28.7, 2.0], [28.8, 2.0], [28.9, 2.0], [29.0, 2.0], [29.1, 2.0], [29.2, 2.0], [29.3, 2.0], [29.4, 2.0], [29.5, 2.0], [29.6, 2.0], [29.7, 2.0], [29.8, 2.0], [29.9, 2.0], [30.0, 2.0], [30.1, 2.0], [30.2, 2.0], [30.3, 2.0], [30.4, 2.0], [30.5, 2.0], [30.6, 2.0], [30.7, 2.0], [30.8, 2.0], [30.9, 2.0], [31.0, 2.0], [31.1, 2.0], [31.2, 2.0], [31.3, 2.0], [31.4, 2.0], [31.5, 2.0], [31.6, 2.0], [31.7, 2.0], [31.8, 2.0], [31.9, 2.0], [32.0, 2.0], [32.1, 2.0], [32.2, 2.0], [32.3, 2.0], [32.4, 2.0], [32.5, 2.0], [32.6, 2.0], [32.7, 2.0], [32.8, 2.0], [32.9, 2.0], [33.0, 2.0], [33.1, 2.0], [33.2, 2.0], [33.3, 2.0], [33.4, 2.0], [33.5, 2.0], [33.6, 2.0], [33.7, 2.0], [33.8, 2.0], [33.9, 2.0], [34.0, 2.0], [34.1, 2.0], [34.2, 2.0], [34.3, 2.0], [34.4, 2.0], [34.5, 2.0], [34.6, 2.0], [34.7, 2.0], [34.8, 2.0], [34.9, 2.0], [35.0, 2.0], [35.1, 2.0], [35.2, 2.0], [35.3, 2.0], [35.4, 2.0], [35.5, 3.0], [35.6, 3.0], [35.7, 3.0], [35.8, 3.0], [35.9, 3.0], [36.0, 3.0], [36.1, 3.0], [36.2, 3.0], [36.3, 3.0], [36.4, 3.0], [36.5, 3.0], [36.6, 3.0], [36.7, 3.0], [36.8, 3.0], [36.9, 3.0], [37.0, 3.0], [37.1, 3.0], [37.2, 3.0], [37.3, 3.0], [37.4, 3.0], [37.5, 3.0], [37.6, 3.0], [37.7, 3.0], [37.8, 3.0], [37.9, 3.0], [38.0, 3.0], [38.1, 3.0], [38.2, 3.0], [38.3, 3.0], [38.4, 3.0], [38.5, 3.0], [38.6, 3.0], [38.7, 3.0], [38.8, 3.0], [38.9, 3.0], [39.0, 3.0], [39.1, 3.0], [39.2, 3.0], [39.3, 3.0], [39.4, 3.0], [39.5, 3.0], [39.6, 3.0], [39.7, 3.0], [39.8, 3.0], [39.9, 3.0], [40.0, 3.0], [40.1, 3.0], [40.2, 3.0], [40.3, 3.0], [40.4, 3.0], [40.5, 3.0], [40.6, 3.0], [40.7, 3.0], [40.8, 3.0], [40.9, 3.0], [41.0, 3.0], [41.1, 3.0], [41.2, 3.0], [41.3, 3.0], [41.4, 3.0], [41.5, 3.0], [41.6, 3.0], [41.7, 3.0], [41.8, 3.0], [41.9, 3.0], [42.0, 3.0], [42.1, 3.0], [42.2, 3.0], [42.3, 3.0], [42.4, 3.0], [42.5, 3.0], [42.6, 3.0], [42.7, 3.0], [42.8, 3.0], [42.9, 3.0], [43.0, 4.0], [43.1, 4.0], [43.2, 4.0], [43.3, 4.0], [43.4, 4.0], [43.5, 4.0], [43.6, 4.0], [43.7, 4.0], [43.8, 4.0], [43.9, 4.0], [44.0, 5.0], [44.1, 5.0], [44.2, 5.0], [44.3, 6.0], [44.4, 6.0], [44.5, 8.0], [44.6, 16.0], [44.7, 21.0], [44.8, 23.0], [44.9, 24.0], [45.0, 26.0], [45.1, 27.0], [45.2, 28.0], [45.3, 29.0], [45.4, 30.0], [45.5, 31.0], [45.6, 32.0], [45.7, 34.0], [45.8, 36.0], [45.9, 38.0], [46.0, 39.0], [46.1, 43.0], [46.2, 47.0], [46.3, 50.0], [46.4, 56.0], [46.5, 66.0], [46.6, 75.0], [46.7, 101.0], [46.8, 182.0], [46.9, 261.0], [47.0, 328.0], [47.1, 362.0], [47.2, 403.0], [47.3, 439.0], [47.4, 487.0], [47.5, 516.0], [47.6, 538.0], [47.7, 568.0], [47.8, 605.0], [47.9, 640.0], [48.0, 668.0], [48.1, 692.0], [48.2, 724.0], [48.3, 746.0], [48.4, 770.0], [48.5, 798.0], [48.6, 814.0], [48.7, 834.0], [48.8, 853.0], [48.9, 872.0], [49.0, 897.0], [49.1, 915.0], [49.2, 946.0], [49.3, 966.0], [49.4, 989.0], [49.5, 1002.0], [49.6, 1016.0], [49.7, 1031.0], [49.8, 1049.0], [49.9, 1064.0], [50.0, 1084.0], [50.1, 1107.0], [50.2, 1128.0], [50.3, 1149.0], [50.4, 1167.0], [50.5, 1181.0], [50.6, 1201.0], [50.7, 1215.0], [50.8, 1229.0], [50.9, 1241.0], [51.0, 1255.0], [51.1, 1276.0], [51.2, 1289.0], [51.3, 1309.0], [51.4, 1325.0], [51.5, 1341.0], [51.6, 1351.0], [51.7, 1363.0], [51.8, 1374.0], [51.9, 1386.0], [52.0, 1398.0], [52.1, 1410.0], [52.2, 1420.0], [52.3, 1431.0], [52.4, 1443.0], [52.5, 1455.0], [52.6, 1470.0], [52.7, 1481.0], [52.8, 1493.0], [52.9, 1506.0], [53.0, 1523.0], [53.1, 1533.0], [53.2, 1544.0], [53.3, 1555.0], [53.4, 1566.0], [53.5, 1580.0], [53.6, 1587.0], [53.7, 1596.0], [53.8, 1605.0], [53.9, 1614.0], [54.0, 1622.0], [54.1, 1634.0], [54.2, 1644.0], [54.3, 1650.0], [54.4, 1666.0], [54.5, 1677.0], [54.6, 1686.0], [54.7, 1701.0], [54.8, 1714.0], [54.9, 1723.0], [55.0, 1732.0], [55.1, 1745.0], [55.2, 1755.0], [55.3, 1765.0], [55.4, 1775.0], [55.5, 1785.0], [55.6, 1795.0], [55.7, 1804.0], [55.8, 1817.0], [55.9, 1825.0], [56.0, 1836.0], [56.1, 1846.0], [56.2, 1855.0], [56.3, 1868.0], [56.4, 1880.0], [56.5, 1890.0], [56.6, 1896.0], [56.7, 1905.0], [56.8, 1913.0], [56.9, 1921.0], [57.0, 1929.0], [57.1, 1940.0], [57.2, 1947.0], [57.3, 1958.0], [57.4, 1967.0], [57.5, 1977.0], [57.6, 1990.0], [57.7, 2000.0], [57.8, 2013.0], [57.9, 2020.0], [58.0, 2030.0], [58.1, 2039.0], [58.2, 2046.0], [58.3, 2056.0], [58.4, 2067.0], [58.5, 2077.0], [58.6, 2082.0], [58.7, 2089.0], [58.8, 2096.0], [58.9, 2104.0], [59.0, 2111.0], [59.1, 2122.0], [59.2, 2129.0], [59.3, 2136.0], [59.4, 2143.0], [59.5, 2152.0], [59.6, 2162.0], [59.7, 2171.0], [59.8, 2179.0], [59.9, 2188.0], [60.0, 2195.0], [60.1, 2200.0], [60.2, 2208.0], [60.3, 2216.0], [60.4, 2226.0], [60.5, 2230.0], [60.6, 2239.0], [60.7, 2247.0], [60.8, 2252.0], [60.9, 2259.0], [61.0, 2265.0], [61.1, 2273.0], [61.2, 2280.0], [61.3, 2291.0], [61.4, 2296.0], [61.5, 2303.0], [61.6, 2310.0], [61.7, 2318.0], [61.8, 2325.0], [61.9, 2332.0], [62.0, 2344.0], [62.1, 2352.0], [62.2, 2360.0], [62.3, 2368.0], [62.4, 2374.0], [62.5, 2384.0], [62.6, 2391.0], [62.7, 2402.0], [62.8, 2409.0], [62.9, 2416.0], [63.0, 2421.0], [63.1, 2429.0], [63.2, 2434.0], [63.3, 2441.0], [63.4, 2447.0], [63.5, 2453.0], [63.6, 2461.0], [63.7, 2467.0], [63.8, 2474.0], [63.9, 2484.0], [64.0, 2490.0], [64.1, 2497.0], [64.2, 2506.0], [64.3, 2515.0], [64.4, 2523.0], [64.5, 2529.0], [64.6, 2538.0], [64.7, 2545.0], [64.8, 2551.0], [64.9, 2556.0], [65.0, 2561.0], [65.1, 2568.0], [65.2, 2578.0], [65.3, 2585.0], [65.4, 2590.0], [65.5, 2597.0], [65.6, 2603.0], [65.7, 2609.0], [65.8, 2616.0], [65.9, 2623.0], [66.0, 2629.0], [66.1, 2636.0], [66.2, 2640.0], [66.3, 2647.0], [66.4, 2655.0], [66.5, 2659.0], [66.6, 2665.0], [66.7, 2670.0], [66.8, 2679.0], [66.9, 2684.0], [67.0, 2691.0], [67.1, 2695.0], [67.2, 2701.0], [67.3, 2706.0], [67.4, 2713.0], [67.5, 2722.0], [67.6, 2727.0], [67.7, 2733.0], [67.8, 2737.0], [67.9, 2745.0], [68.0, 2753.0], [68.1, 2760.0], [68.2, 2765.0], [68.3, 2772.0], [68.4, 2778.0], [68.5, 2784.0], [68.6, 2790.0], [68.7, 2796.0], [68.8, 2800.0], [68.9, 2806.0], [69.0, 2811.0], [69.1, 2817.0], [69.2, 2822.0], [69.3, 2833.0], [69.4, 2837.0], [69.5, 2844.0], [69.6, 2850.0], [69.7, 2853.0], [69.8, 2858.0], [69.9, 2865.0], [70.0, 2872.0], [70.1, 2880.0], [70.2, 2886.0], [70.3, 2894.0], [70.4, 2899.0], [70.5, 2905.0], [70.6, 2909.0], [70.7, 2916.0], [70.8, 2923.0], [70.9, 2928.0], [71.0, 2934.0], [71.1, 2942.0], [71.2, 2947.0], [71.3, 2953.0], [71.4, 2958.0], [71.5, 2962.0], [71.6, 2970.0], [71.7, 2977.0], [71.8, 2981.0], [71.9, 2987.0], [72.0, 2993.0], [72.1, 2997.0], [72.2, 3002.0], [72.3, 3007.0], [72.4, 3011.0], [72.5, 3017.0], [72.6, 3026.0], [72.7, 3032.0], [72.8, 3037.0], [72.9, 3044.0], [73.0, 3050.0], [73.1, 3058.0], [73.2, 3065.0], [73.3, 3075.0], [73.4, 3079.0], [73.5, 3085.0], [73.6, 3089.0], [73.7, 3095.0], [73.8, 3100.0], [73.9, 3104.0], [74.0, 3111.0], [74.1, 3116.0], [74.2, 3121.0], [74.3, 3129.0], [74.4, 3139.0], [74.5, 3144.0], [74.6, 3150.0], [74.7, 3157.0], [74.8, 3161.0], [74.9, 3165.0], [75.0, 3171.0], [75.1, 3175.0], [75.2, 3184.0], [75.3, 3189.0], [75.4, 3195.0], [75.5, 3203.0], [75.6, 3207.0], [75.7, 3214.0], [75.8, 3223.0], [75.9, 3227.0], [76.0, 3233.0], [76.1, 3241.0], [76.2, 3247.0], [76.3, 3253.0], [76.4, 3259.0], [76.5, 3268.0], [76.6, 3275.0], [76.7, 3284.0], [76.8, 3292.0], [76.9, 3297.0], [77.0, 3303.0], [77.1, 3312.0], [77.2, 3318.0], [77.3, 3323.0], [77.4, 3328.0], [77.5, 3334.0], [77.6, 3341.0], [77.7, 3350.0], [77.8, 3356.0], [77.9, 3364.0], [78.0, 3369.0], [78.1, 3378.0], [78.2, 3387.0], [78.3, 3392.0], [78.4, 3399.0], [78.5, 3409.0], [78.6, 3420.0], [78.7, 3429.0], [78.8, 3435.0], [78.9, 3443.0], [79.0, 3449.0], [79.1, 3456.0], [79.2, 3465.0], [79.3, 3471.0], [79.4, 3477.0], [79.5, 3486.0], [79.6, 3493.0], [79.7, 3504.0], [79.8, 3509.0], [79.9, 3519.0], [80.0, 3529.0], [80.1, 3536.0], [80.2, 3545.0], [80.3, 3553.0], [80.4, 3562.0], [80.5, 3569.0], [80.6, 3575.0], [80.7, 3585.0], [80.8, 3591.0], [80.9, 3599.0], [81.0, 3609.0], [81.1, 3619.0], [81.2, 3628.0], [81.3, 3635.0], [81.4, 3645.0], [81.5, 3654.0], [81.6, 3664.0], [81.7, 3673.0], [81.8, 3685.0], [81.9, 3694.0], [82.0, 3701.0], [82.1, 3713.0], [82.2, 3721.0], [82.3, 3729.0], [82.4, 3735.0], [82.5, 3744.0], [82.6, 3753.0], [82.7, 3761.0], [82.8, 3773.0], [82.9, 3781.0], [83.0, 3789.0], [83.1, 3803.0], [83.2, 3810.0], [83.3, 3817.0], [83.4, 3825.0], [83.5, 3834.0], [83.6, 3841.0], [83.7, 3851.0], [83.8, 3864.0], [83.9, 3877.0], [84.0, 3887.0], [84.1, 3899.0], [84.2, 3907.0], [84.3, 3918.0], [84.4, 3926.0], [84.5, 3938.0], [84.6, 3947.0], [84.7, 3957.0], [84.8, 3968.0], [84.9, 3978.0], [85.0, 3990.0], [85.1, 3999.0], [85.2, 4009.0], [85.3, 4020.0], [85.4, 4029.0], [85.5, 4037.0], [85.6, 4042.0], [85.7, 4053.0], [85.8, 4067.0], [85.9, 4080.0], [86.0, 4095.0], [86.1, 4103.0], [86.2, 4111.0], [86.3, 4125.0], [86.4, 4134.0], [86.5, 4149.0], [86.6, 4161.0], [86.7, 4168.0], [86.8, 4184.0], [86.9, 4198.0], [87.0, 4205.0], [87.1, 4214.0], [87.2, 4228.0], [87.3, 4238.0], [87.4, 4249.0], [87.5, 4259.0], [87.6, 4276.0], [87.7, 4293.0], [87.8, 4305.0], [87.9, 4317.0], [88.0, 4328.0], [88.1, 4342.0], [88.2, 4362.0], [88.3, 4375.0], [88.4, 4387.0], [88.5, 4406.0], [88.6, 4424.0], [88.7, 4441.0], [88.8, 4460.0], [88.9, 4476.0], [89.0, 4493.0], [89.1, 4507.0], [89.2, 4524.0], [89.3, 4543.0], [89.4, 4553.0], [89.5, 4583.0], [89.6, 4595.0], [89.7, 4610.0], [89.8, 4623.0], [89.9, 4640.0], [90.0, 4659.0], [90.1, 4679.0], [90.2, 4706.0], [90.3, 4727.0], [90.4, 4751.0], [90.5, 4776.0], [90.6, 4800.0], [90.7, 4815.0], [90.8, 4845.0], [90.9, 4864.0], [91.0, 4886.0], [91.1, 4913.0], [91.2, 4940.0], [91.3, 4959.0], [91.4, 4981.0], [91.5, 5002.0], [91.6, 5027.0], [91.7, 5058.0], [91.8, 5090.0], [91.9, 5113.0], [92.0, 5140.0], [92.1, 5173.0], [92.2, 5201.0], [92.3, 5231.0], [92.4, 5259.0], [92.5, 5287.0], [92.6, 5325.0], [92.7, 5368.0], [92.8, 5394.0], [92.9, 5418.0], [93.0, 5445.0], [93.1, 5473.0], [93.2, 5514.0], [93.3, 5540.0], [93.4, 5573.0], [93.5, 5596.0], [93.6, 5622.0], [93.7, 5654.0], [93.8, 5679.0], [93.9, 5699.0], [94.0, 5722.0], [94.1, 5763.0], [94.2, 5788.0], [94.3, 5812.0], [94.4, 5833.0], [94.5, 5865.0], [94.6, 5898.0], [94.7, 5922.0], [94.8, 5946.0], [94.9, 5976.0], [95.0, 6001.0], [95.1, 6022.0], [95.2, 6044.0], [95.3, 6084.0], [95.4, 6119.0], [95.5, 6158.0], [95.6, 6186.0], [95.7, 6225.0], [95.8, 6258.0], [95.9, 6292.0], [96.0, 6326.0], [96.1, 6360.0], [96.2, 6398.0], [96.3, 6442.0], [96.4, 6477.0], [96.5, 6521.0], [96.6, 6553.0], [96.7, 6590.0], [96.8, 6624.0], [96.9, 6665.0], [97.0, 6748.0], [97.1, 6803.0], [97.2, 6858.0], [97.3, 6923.0], [97.4, 6969.0], [97.5, 7026.0], [97.6, 7096.0], [97.7, 7196.0], [97.8, 7314.0], [97.9, 7465.0], [98.0, 7608.0], [98.1, 7760.0], [98.2, 7896.0], [98.3, 8092.0], [98.4, 8326.0], [98.5, 8508.0], [98.6, 8832.0], [98.7, 9079.0], [98.8, 9332.0], [98.9, 9597.0], [99.0, 9783.0], [99.1, 9972.0], [99.2, 10153.0], [99.3, 10412.0], [99.4, 10626.0], [99.5, 10880.0], [99.6, 11110.0], [99.7, 11545.0], [99.8, 11927.0], [99.9, 12366.0], [100.0, 13483.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 9194.0, "series": [{"data": [[0.0, 9194.0], [100.0, 20.0], [200.0, 32.0], [300.0, 46.0], [400.0, 50.0], [500.0, 56.0], [600.0, 77.0], [700.0, 73.0], [800.0, 91.0], [900.0, 93.0], [1000.0, 109.0], [1100.0, 96.0], [1200.0, 120.0], [1300.0, 151.0], [1400.0, 163.0], [1500.0, 185.0], [1600.0, 167.0], [1700.0, 223.0], [1800.0, 203.0], [1900.0, 211.0], [2000.0, 214.0], [2100.0, 220.0], [2200.0, 277.0], [2300.0, 348.0], [2400.0, 269.0], [2500.0, 283.0], [2600.0, 262.0], [2800.0, 298.0], [2700.0, 303.0], [2900.0, 315.0], [3000.0, 306.0], [3100.0, 288.0], [3200.0, 289.0], [3300.0, 311.0], [3400.0, 272.0], [3500.0, 240.0], [3600.0, 248.0], [3700.0, 236.0], [3800.0, 216.0], [3900.0, 188.0], [4000.0, 210.0], [4200.0, 162.0], [4100.0, 173.0], [4300.0, 152.0], [4600.0, 102.0], [4400.0, 95.0], [4500.0, 121.0], [4800.0, 79.0], [4700.0, 77.0], [5100.0, 66.0], [4900.0, 80.0], [5000.0, 96.0], [5300.0, 73.0], [5200.0, 83.0], [5600.0, 82.0], [5500.0, 60.0], [5400.0, 62.0], [5700.0, 83.0], [5800.0, 79.0], [6000.0, 54.0], [6100.0, 36.0], [5900.0, 60.0], [6200.0, 36.0], [6300.0, 34.0], [6400.0, 35.0], [6500.0, 21.0], [6600.0, 24.0], [6800.0, 19.0], [6700.0, 26.0], [6900.0, 21.0], [7000.0, 19.0], [7100.0, 11.0], [7200.0, 13.0], [7300.0, 15.0], [7400.0, 11.0], [7600.0, 16.0], [7500.0, 14.0], [7700.0, 20.0], [7900.0, 10.0], [7800.0, 18.0], [8100.0, 9.0], [8000.0, 7.0], [8500.0, 8.0], [8300.0, 9.0], [8600.0, 5.0], [8700.0, 2.0], [8200.0, 10.0], [8400.0, 9.0], [8900.0, 4.0], [9100.0, 11.0], [9200.0, 7.0], [9000.0, 4.0], [8800.0, 3.0], [9300.0, 5.0], [9600.0, 13.0], [9700.0, 7.0], [9500.0, 10.0], [9400.0, 6.0], [9800.0, 4.0], [10000.0, 10.0], [10100.0, 5.0], [9900.0, 6.0], [10200.0, 6.0], [10300.0, 13.0], [10500.0, 7.0], [10700.0, 8.0], [10400.0, 13.0], [10600.0, 7.0], [10800.0, 7.0], [10900.0, 12.0], [11200.0, 5.0], [11000.0, 5.0], [11100.0, 5.0], [11300.0, 3.0], [11500.0, 10.0], [11700.0, 8.0], [11400.0, 7.0], [11600.0, 7.0], [12000.0, 1.0], [12200.0, 5.0], [12100.0, 2.0], [11800.0, 6.0], [11900.0, 4.0], [12700.0, 1.0], [12400.0, 3.0], [12600.0, 3.0], [12500.0, 2.0], [12300.0, 1.0], [13200.0, 1.0], [12800.0, 1.0], [13000.0, 1.0], [13600.0, 1.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[300.0, 2.0], [100.0, 179.0], [200.0, 14.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 9106.0], [100.0, 24.0], [200.0, 29.0], [300.0, 42.0], [400.0, 51.0], [500.0, 66.0], [600.0, 65.0], [700.0, 76.0], [800.0, 98.0], [900.0, 94.0], [1000.0, 114.0], [1100.0, 101.0], [1200.0, 128.0], [1300.0, 148.0], [1400.0, 167.0], [1500.0, 169.0], [1600.0, 184.0], [1700.0, 188.0], [1800.0, 194.0], [1900.0, 207.0], [2000.0, 226.0], [2100.0, 242.0], [2200.0, 263.0], [2300.0, 242.0], [2400.0, 279.0], [2500.0, 279.0], [2600.0, 315.0], [2800.0, 316.0], [2700.0, 317.0], [2900.0, 340.0], [3000.0, 319.0], [3100.0, 322.0], [3200.0, 291.0], [3300.0, 288.0], [3400.0, 241.0], [3500.0, 249.0], [3600.0, 201.0], [3700.0, 217.0], [3800.0, 202.0], [3900.0, 196.0], [4000.0, 185.0], [4100.0, 166.0], [4300.0, 139.0], [4200.0, 164.0], [4400.0, 114.0], [4500.0, 118.0], [4600.0, 105.0], [4800.0, 91.0], [4700.0, 78.0], [4900.0, 84.0], [5000.0, 71.0], [5100.0, 67.0], [5200.0, 64.0], [5300.0, 58.0], [5400.0, 65.0], [5500.0, 69.0], [5600.0, 78.0], [5800.0, 70.0], [5700.0, 66.0], [6100.0, 55.0], [5900.0, 75.0], [6000.0, 69.0], [6300.0, 56.0], [6200.0, 56.0], [6400.0, 48.0], [6600.0, 36.0], [6500.0, 59.0], [6900.0, 38.0], [6700.0, 31.0], [6800.0, 34.0], [7100.0, 20.0], [7000.0, 27.0], [7200.0, 14.0], [7400.0, 11.0], [7300.0, 18.0], [7600.0, 9.0], [7500.0, 14.0], [7700.0, 16.0], [7900.0, 8.0], [7800.0, 15.0], [8000.0, 12.0], [8100.0, 10.0], [8200.0, 7.0], [8300.0, 12.0], [8600.0, 6.0], [8400.0, 9.0], [8700.0, 7.0], [8500.0, 5.0], [9200.0, 10.0], [8800.0, 5.0], [8900.0, 10.0], [9100.0, 5.0], [9000.0, 7.0], [9600.0, 9.0], [9700.0, 11.0], [9500.0, 8.0], [9400.0, 8.0], [9300.0, 9.0], [9900.0, 12.0], [9800.0, 8.0], [10200.0, 6.0], [10000.0, 12.0], [10100.0, 10.0], [10700.0, 11.0], [10400.0, 7.0], [10500.0, 11.0], [10600.0, 7.0], [10300.0, 7.0], [10900.0, 11.0], [11100.0, 7.0], [11200.0, 3.0], [11000.0, 7.0], [10800.0, 5.0], [11300.0, 4.0], [11400.0, 5.0], [11600.0, 7.0], [11700.0, 4.0], [11500.0, 4.0], [12100.0, 5.0], [11800.0, 5.0], [12000.0, 4.0], [12200.0, 5.0], [11900.0, 3.0], [12300.0, 4.0], [12600.0, 2.0], [12400.0, 5.0], [12700.0, 4.0], [12500.0, 2.0], [12800.0, 1.0], [12900.0, 1.0], [13100.0, 1.0], [13000.0, 1.0], [13400.0, 2.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 13600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1188.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 18333.0, "series": [{"data": [[0.0, 1188.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1914.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 17760.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 18333.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 57.77283372365342, "minX": 1.58768886E12, "maxY": 195.0, "series": [{"data": [[1.5876894E12, 195.0], [1.5876891E12, 195.0], [1.58768904E12, 195.0], [1.58768964E12, 57.77283372365342], [1.58768934E12, 195.0], [1.58768928E12, 195.0], [1.58768898E12, 195.0], [1.58768892E12, 194.91737680622492], [1.58768958E12, 145.39497206703913], [1.58768952E12, 191.6184210526318], [1.58768922E12, 195.0], [1.58768916E12, 195.0], [1.58768886E12, 104.28824969400257], [1.58768946E12, 195.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768964E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 22.0, "minX": 1.0, "maxY": 5431.333333333333, "series": [{"data": [[6.0, 46.0], [7.0, 32.5], [9.0, 36.0], [10.0, 52.0], [11.0, 52.0], [12.0, 33.666666666666664], [13.0, 44.0], [14.0, 34.0], [15.0, 38.0], [16.0, 39.0], [17.0, 31.4], [18.0, 33.0], [20.0, 43.333333333333336], [21.0, 45.5], [23.0, 31.75], [24.0, 42.2], [25.0, 32.111111111111114], [26.0, 35.333333333333336], [27.0, 41.0], [28.0, 51.5], [29.0, 23.0], [30.0, 39.5], [31.0, 33.0], [33.0, 46.5], [34.0, 45.2], [35.0, 35.0], [36.0, 26.77777777777778], [37.0, 37.333333333333336], [38.0, 42.0], [39.0, 32.142857142857146], [40.0, 28.2], [41.0, 40.6], [42.0, 38.0], [43.0, 32.16666666666667], [44.0, 38.6], [45.0, 41.333333333333336], [46.0, 32.93333333333334], [47.0, 31.428571428571423], [48.0, 38.0], [49.0, 33.666666666666664], [50.0, 30.333333333333332], [51.0, 40.42857142857143], [52.0, 39.125], [53.0, 34.0], [54.0, 26.0], [55.0, 33.53333333333333], [56.0, 51.4], [57.0, 33.5], [58.0, 36.5], [59.0, 33.72222222222222], [60.0, 47.5], [61.0, 27.5], [62.0, 29.875], [63.0, 463.4347826086955], [64.0, 30.71428571428571], [65.0, 395.69230769230774], [66.0, 36.75], [67.0, 258.57142857142856], [68.0, 199.22222222222223], [69.0, 169.54545454545453], [70.0, 250.77777777777774], [71.0, 445.99999999999994], [72.0, 536.2], [73.0, 37.0], [74.0, 33.5], [75.0, 22.0], [76.0, 721.55], [77.0, 30.75], [78.0, 153.0], [79.0, 312.33333333333337], [80.0, 819.0], [81.0, 948.3750000000001], [82.0, 1055.8666666666666], [83.0, 444.3333333333333], [84.0, 630.4615384615386], [85.0, 165.22222222222223], [86.0, 680.9230769230769], [87.0, 339.0], [88.0, 587.3333333333334], [89.0, 1569.3529411764703], [90.0, 1154.5714285714287], [91.0, 1443.7272727272727], [92.0, 1928.8333333333335], [93.0, 1542.75], [94.0, 1577.8333333333335], [95.0, 1925.1428571428573], [97.0, 1753.2], [98.0, 1877.3333333333333], [99.0, 1393.125], [96.0, 2517.3333333333335], [100.0, 1645.9166666666667], [101.0, 1314.2999999999997], [102.0, 1387.2222222222222], [103.0, 1471.3636363636365], [104.0, 1884.0], [105.0, 1433.25], [106.0, 1733.9393939393942], [107.0, 1410.0], [108.0, 1856.4], [109.0, 1984.3846153846155], [110.0, 1904.9545454545455], [111.0, 2252.052631578947], [112.0, 2402.785714285714], [113.0, 2373.666666666667], [115.0, 1804.5], [114.0, 2813.75], [116.0, 1117.0], [117.0, 2567.1428571428573], [118.0, 2340.0], [119.0, 1925.0833333333335], [121.0, 1899.818181818182], [123.0, 1998.8333333333335], [122.0, 2441.6923076923076], [120.0, 1854.0], [124.0, 2253.3076923076924], [125.0, 1846.7499999999998], [127.0, 2326.681818181818], [126.0, 1938.7142857142858], [128.0, 441.0], [129.0, 2471.4074074074074], [130.0, 2486.1111111111113], [131.0, 2438.8], [132.0, 2494.6923076923076], [133.0, 2832.909090909091], [134.0, 2798.6666666666665], [135.0, 2335.5000000000005], [136.0, 2891.076923076923], [137.0, 2952.6923076923076], [138.0, 1568.5], [139.0, 2661.1851851851857], [140.0, 2756.3999999999996], [141.0, 3573.7619047619046], [142.0, 2809.1], [143.0, 3380.4545454545455], [144.0, 3128.375], [145.0, 3670.583333333333], [146.0, 3239.666666666667], [147.0, 3461.0], [148.0, 4019.454545454545], [149.0, 3682.48275862069], [150.0, 2938.777777777778], [151.0, 3706.363636363637], [152.0, 3710.2222222222217], [153.0, 3941.5], [154.0, 3125.8333333333335], [155.0, 2348.0], [156.0, 2416.6], [157.0, 3344.6250000000005], [158.0, 3296.8], [159.0, 2605.0], [160.0, 2402.5], [161.0, 3517.8529411764707], [162.0, 4073.0000000000005], [163.0, 3343.631578947368], [164.0, 3896.951219512196], [165.0, 4349.176470588236], [167.0, 4086.4], [166.0, 3779.2448979591836], [168.0, 3427.818181818182], [169.0, 2953.0], [170.0, 3345.3999999999996], [171.0, 5431.333333333333], [172.0, 4037.811320754718], [173.0, 3788.541666666667], [174.0, 4435.375], [175.0, 3835.9285714285706], [176.0, 3434.833333333333], [177.0, 3476.6153846153843], [178.0, 3230.9259259259256], [179.0, 3343.52], [180.0, 2930.5882352941176], [181.0, 3570.0869565217395], [182.0, 3911.3333333333335], [183.0, 3441.7073170731705], [184.0, 3953.16], [185.0, 3963.7749999999996], [186.0, 2828.5], [187.0, 3211.714285714286], [188.0, 4054.086956521738], [189.0, 3575.2647058823522], [190.0, 3951.0], [191.0, 3210.6000000000013], [192.0, 3223.7230769230764], [193.0, 3424.045977011494], [194.0, 3659.375], [195.0, 1685.139989496419]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[187.7001025641035, 1781.8099487179422]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 155.0], [3.0, 167.0], [4.0, 156.0], [5.0, 159.0], [6.0, 145.0], [7.0, 149.0], [8.0, 146.0], [9.0, 166.0], [10.0, 141.0], [11.0, 144.0], [12.0, 141.0], [13.0, 141.0], [14.0, 138.0], [15.0, 147.0], [16.0, 145.0], [17.0, 159.0], [18.0, 140.0], [19.0, 146.0], [20.0, 195.0], [21.0, 157.0], [22.0, 151.0], [23.0, 150.0], [24.0, 144.0], [25.0, 149.0], [26.0, 149.0], [27.0, 149.0], [28.0, 162.0], [29.0, 146.0], [30.0, 146.0], [31.0, 153.0], [32.0, 150.0], [33.0, 150.0], [34.0, 148.0], [35.0, 154.0], [36.0, 143.0], [37.0, 143.0], [38.0, 154.0], [39.0, 147.0], [40.0, 149.0], [41.0, 169.0], [42.0, 161.0], [43.0, 148.0], [44.0, 152.0], [45.0, 153.0], [46.0, 152.0], [47.0, 150.0], [48.0, 143.0], [49.0, 147.0], [50.0, 158.0], [51.0, 168.0], [52.0, 157.0], [53.0, 151.0], [54.0, 158.0], [55.0, 157.0], [56.0, 150.0], [57.0, 154.0], [58.0, 151.0], [59.0, 152.0], [60.0, 152.0], [61.0, 149.0], [62.0, 148.0], [63.0, 149.0], [64.0, 159.0], [65.0, 150.0], [66.0, 150.0], [67.0, 151.0], [68.0, 152.0], [69.0, 156.0], [70.0, 170.0], [71.0, 147.0], [72.0, 148.0], [73.0, 159.0], [74.0, 155.0], [75.0, 155.0], [76.0, 146.0], [77.0, 151.0], [78.0, 155.0], [79.0, 160.0], [80.0, 153.0], [81.0, 149.0], [82.0, 145.0], [83.0, 152.0], [84.0, 153.0], [85.0, 151.0], [86.0, 146.0], [87.0, 151.0], [88.0, 145.0], [89.0, 165.0], [90.0, 154.0], [91.0, 161.0], [92.0, 150.0], [93.0, 150.0], [94.0, 155.0], [95.0, 144.0], [96.0, 159.0], [97.0, 153.0], [98.0, 158.0], [99.0, 155.0], [100.0, 155.0], [101.0, 155.0], [102.0, 152.0], [103.0, 173.0], [104.0, 154.0], [105.0, 148.0], [106.0, 156.0], [107.0, 145.0], [108.0, 150.0], [109.0, 153.0], [110.0, 158.0], [111.0, 160.0], [112.0, 159.0], [113.0, 163.0], [114.0, 155.0], [115.0, 150.0], [116.0, 155.0], [117.0, 166.0], [118.0, 177.0], [119.0, 163.0], [120.0, 162.0], [121.0, 156.0], [122.0, 157.0], [123.0, 169.0], [124.0, 153.0], [125.0, 171.0], [126.0, 150.0], [127.0, 166.0], [128.0, 212.0], [129.0, 150.0], [130.0, 160.0], [131.0, 160.0], [132.0, 159.0], [133.0, 153.0], [134.0, 147.0], [135.0, 148.0], [136.0, 150.0], [137.0, 151.0], [138.0, 200.0], [139.0, 157.0], [140.0, 164.0], [141.0, 150.0], [142.0, 158.0], [143.0, 154.0], [144.0, 159.0], [145.0, 154.0], [146.0, 153.0], [147.0, 156.0], [148.0, 248.0], [150.0, 293.5], [151.0, 243.0], [152.0, 164.0], [153.0, 159.0], [154.0, 154.0], [155.0, 155.0], [156.0, 146.0], [157.0, 234.0], [158.0, 256.0], [159.0, 277.0], [161.0, 290.0], [162.0, 274.0], [163.0, 246.0], [164.0, 250.0], [165.0, 255.0], [166.0, 194.0], [167.0, 159.0], [168.0, 154.0], [169.0, 150.0], [170.0, 159.0], [171.0, 158.0], [172.0, 175.0], [173.0, 148.0], [174.0, 151.0], [175.0, 149.0], [176.0, 159.0], [177.0, 156.0], [178.0, 149.0], [179.0, 153.0], [180.0, 153.0], [181.0, 159.0], [182.0, 159.0], [183.0, 163.0], [184.0, 157.0], [185.0, 149.0], [186.0, 175.0], [187.0, 157.0], [188.0, 147.0], [189.0, 154.0], [190.0, 147.0], [191.0, 167.0], [192.0, 153.0], [193.0, 252.0], [194.0, 162.0], [195.0, 156.0], [1.0, 183.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[98.01025641025647, 162.95897435897442]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[6.0, 28.0], [7.0, 54.0], [8.0, 58.0], [9.0, 49.0], [10.0, 61.0], [11.0, 34.0], [12.0, 38.33333333333333], [13.0, 43.0], [14.0, 38.5], [15.0, 40.5], [16.0, 27.4], [17.0, 46.0], [18.0, 39.0], [19.0, 38.75], [20.0, 29.0], [21.0, 36.8], [23.0, 182.6], [24.0, 42.833333333333336], [25.0, 31.0], [26.0, 37.0], [27.0, 46.25], [28.0, 57.666666666666664], [29.0, 32.333333333333336], [30.0, 51.75], [31.0, 32.0], [32.0, 60.2], [33.0, 45.5], [34.0, 43.0], [35.0, 47.333333333333336], [36.0, 31.125], [37.0, 45.75], [38.0, 35.5], [39.0, 37.25], [40.0, 29.5], [41.0, 56.166666666666664], [42.0, 47.4], [43.0, 27.0], [44.0, 34.42857142857142], [45.0, 42.0], [46.0, 32.25], [47.0, 37.14285714285714], [48.0, 36.714285714285715], [49.0, 42.142857142857146], [50.0, 28.25], [51.0, 52.4], [52.0, 39.454545454545446], [53.0, 37.666666666666664], [54.0, 32.0], [55.0, 30.705882352941178], [56.0, 40.28571428571429], [57.0, 45.0], [58.0, 34.0], [59.0, 35.63636363636363], [60.0, 37.833333333333336], [61.0, 47.5], [62.0, 34.333333333333336], [63.0, 393.2173913043478], [64.0, 46.857142857142854], [65.0, 239.69230769230768], [66.0, 32.666666666666664], [67.0, 187.25], [68.0, 273.1], [69.0, 133.16666666666669], [70.0, 267.0], [71.0, 358.25], [72.0, 450.6666666666667], [73.0, 24.285714285714285], [74.0, 32.0], [75.0, 29.333333333333332], [76.0, 599.1666666666666], [77.0, 31.4], [78.0, 134.83333333333334], [79.0, 339.0], [80.0, 364.0], [81.0, 734.5], [82.0, 1177.5714285714287], [83.0, 614.6666666666666], [84.0, 403.375], [85.0, 43.55555555555556], [86.0, 873.2857142857142], [87.0, 221.5], [88.0, 227.33333333333331], [90.0, 1746.5294117647059], [91.0, 1841.1000000000001], [89.0, 2121.1818181818185], [92.0, 1679.2857142857142], [93.0, 1858.375], [94.0, 1288.1428571428573], [95.0, 1612.8125], [96.0, 1753.2727272727273], [97.0, 1627.857142857143], [98.0, 1502.75], [99.0, 1621.7142857142858], [100.0, 1728.1], [101.0, 1709.2307692307693], [102.0, 1319.4285714285713], [103.0, 986.6923076923077], [104.0, 1712.3333333333333], [105.0, 2229.0], [106.0, 1805.777777777778], [107.0, 1398.8], [108.0, 2407.2500000000005], [109.0, 2297.75], [110.0, 2687.0], [111.0, 1732.5], [112.0, 2352.928571428571], [113.0, 1823.6666666666667], [114.0, 2179.625], [115.0, 2230.071428571429], [116.0, 1792.0], [117.0, 2091.625], [118.0, 1936.0], [119.0, 1762.6470588235295], [121.0, 2390.166666666667], [123.0, 2146.6363636363635], [122.0, 2533.8749999999995], [120.0, 966.75], [124.0, 2657.642857142857], [125.0, 2226.4444444444443], [127.0, 2253.4814814814813], [126.0, 1653.625], [129.0, 2223.962962962963], [130.0, 2635.6], [131.0, 2082.636363636364], [132.0, 2486.363636363636], [133.0, 2971.625], [134.0, 1658.0], [135.0, 2403.5], [137.0, 3405.8333333333335], [138.0, 2739.6666666666665], [139.0, 2702.2777777777783], [140.0, 3179.333333333333], [141.0, 3904.95], [142.0, 2518.9375], [143.0, 3454.2173913043475], [136.0, 2214.75], [145.0, 3734.210526315789], [146.0, 2870.6249999999995], [147.0, 2975.3333333333335], [148.0, 3507.7499999999995], [150.0, 3645.25], [151.0, 3948.1351351351354], [149.0, 3920.666666666667], [144.0, 2201.0], [152.0, 4999.473684210527], [153.0, 2518.04], [154.0, 3105.6666666666665], [155.0, 2747.777777777778], [156.0, 2574.25], [158.0, 4105.8], [159.0, 3234.5882352941176], [157.0, 4623.235294117646], [160.0, 1766.0], [161.0, 3674.0199999999995], [163.0, 3362.153846153846], [164.0, 3459.2941176470586], [165.0, 3636.315789473684], [166.0, 3987.7894736842104], [167.0, 4036.777777777778], [162.0, 3742.5714285714284], [168.0, 4043.6000000000004], [169.0, 3631.5384615384614], [170.0, 3619.095238095238], [171.0, 4737.666666666667], [172.0, 3850.7200000000003], [173.0, 4028.64], [174.0, 3225.8333333333335], [175.0, 3928.8000000000006], [176.0, 3605.5], [177.0, 3571.2000000000003], [178.0, 3140.7741935483873], [179.0, 3776.218750000001], [181.0, 3240.1111111111113], [182.0, 3579.25], [183.0, 3930.4705882352955], [180.0, 3069.05], [184.0, 3460.4799999999996], [185.0, 3947.0588235294126], [186.0, 4442.5], [187.0, 3714.4], [188.0, 3932.9999999999995], [189.0, 3546.8676470588234], [190.0, 4598.6], [191.0, 3424.2844036697243], [192.0, 3259.9016393442625], [193.0, 3652.010638297872], [194.0, 3985.25], [195.0, 1731.7317144358185]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[187.72974358974352, 1830.8931282051274]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 195.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3053.866666666667, "minX": 1.58768886E12, "maxY": 287716.18333333335, "series": [{"data": [[1.5876894E12, 76474.38333333333], [1.5876891E12, 207583.1], [1.58768904E12, 230971.41666666666], [1.58768964E12, 49534.05], [1.58768934E12, 94773.86666666667], [1.58768928E12, 246131.03333333333], [1.58768898E12, 141674.1], [1.58768892E12, 247137.53333333333], [1.58768958E12, 203674.56666666668], [1.58768952E12, 236115.05], [1.58768922E12, 169447.53333333333], [1.58768916E12, 92163.13333333333], [1.58768886E12, 172097.85], [1.58768946E12, 287716.18333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5876894E12, 34834.1], [1.5876891E12, 14057.2], [1.58768904E12, 15608.2], [1.58768964E12, 3053.866666666667], [1.58768934E12, 34077.5], [1.58768928E12, 15500.966666666667], [1.58768898E12, 30716.533333333333], [1.58768892E12, 19274.3], [1.58768958E12, 12799.1], [1.58768952E12, 15215.133333333333], [1.58768922E12, 22164.8], [1.58768916E12, 33505.13333333333], [1.58768886E12, 11051.933333333332], [1.58768946E12, 17732.233333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768964E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 162.6914893617022, "minX": 1.58768886E12, "maxY": 4158.096509240242, "series": [{"data": [[1.5876894E12, 422.62194616977195], [1.5876891E12, 4134.3901209677415], [1.58768904E12, 3189.9695571955726], [1.58768964E12, 533.6974789915959], [1.58768934E12, 631.1445231153687], [1.58768928E12, 3559.0148560817115], [1.58768898E12, 766.6905204460965], [1.58768892E12, 2650.95532390171], [1.58768958E12, 3160.9397590361446], [1.58768952E12, 3412.361581920902], [1.58768922E12, 1739.946243523318], [1.58768916E12, 700.1680851063844], [1.58768886E12, 1534.3724340175966], [1.58768946E12, 2880.2181234963937]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768892E12, 170.14285714285714], [1.58768886E12, 162.6914893617022]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.5876894E12, 509.07244607244604], [1.5876891E12, 4158.096509240242], [1.58768904E12, 3456.5559599636044], [1.58768964E12, 492.4708994708998], [1.58768934E12, 644.4317124735753], [1.58768928E12, 3565.3831347387727], [1.58768898E12, 865.2621268656693], [1.58768892E12, 2589.0711638250573], [1.58768958E12, 3194.711516533639], [1.58768952E12, 3505.461538461539], [1.58768922E12, 1799.414524421592], [1.58768916E12, 697.6849315068487], [1.58768886E12, 1653.7434554973827], [1.58768946E12, 2851.896999188971]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768964E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 162.65425531914903, "minX": 1.58768886E12, "maxY": 4157.762833675568, "series": [{"data": [[1.5876894E12, 422.24637681159425], [1.5876891E12, 4134.005040322581], [1.58768904E12, 3189.547970479705], [1.58768964E12, 533.4789915966389], [1.58768934E12, 631.1191170345696], [1.58768928E12, 3558.731662024144], [1.58768898E12, 766.2662639405203], [1.58768892E12, 2650.6924795234495], [1.58768958E12, 3160.593647316535], [1.58768952E12, 3411.8822975517865], [1.58768922E12, 1739.39896373057], [1.58768916E12, 700.1357446808516], [1.58768886E12, 1533.9721407624625], [1.58768946E12, 2879.6824378508404]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768892E12, 170.14285714285714], [1.58768886E12, 162.65425531914903]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.5876894E12, 508.7684167684167], [1.5876891E12, 4157.762833675568], [1.58768904E12, 3455.940855323021], [1.58768964E12, 492.22751322751367], [1.58768934E12, 644.4004228329798], [1.58768928E12, 3564.9688359303427], [1.58768898E12, 864.7523320895514], [1.58768892E12, 2588.7835433654595], [1.58768958E12, 3194.416191562148], [1.58768952E12, 3504.9390243902417], [1.58768922E12, 1798.9350899742915], [1.58768916E12, 697.6404109589041], [1.58768886E12, 1653.1806282722514], [1.58768946E12, 2851.4217356042213]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768964E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.03478260869565218, "minX": 1.58768886E12, "maxY": 0.9202127659574464, "series": [{"data": [[1.5876894E12, 0.03478260869565218], [1.5876891E12, 0.38004032258064524], [1.58768904E12, 0.3394833948339477], [1.58768964E12, 0.14285714285714285], [1.58768934E12, 0.09954185755935034], [1.58768928E12, 0.389972144846797], [1.58768898E12, 0.09340148698884755], [1.58768892E12, 0.4303797468354434], [1.58768958E12, 0.36911281489594794], [1.58768952E12, 0.3700564971751413], [1.58768922E12, 0.15803108808290126], [1.58768916E12, 0.08382978723404264], [1.58768886E12, 0.3636363636363638], [1.58768946E12, 0.4137931034482758]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768892E12, 0.4285714285714286], [1.58768886E12, 0.9202127659574464]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.5876894E12, 0.40455840455840525], [1.5876891E12, 0.35728952772073935], [1.58768904E12, 0.37761601455869], [1.58768964E12, 0.4021164021164021], [1.58768934E12, 0.4215644820295988], [1.58768928E12, 0.340971585701192], [1.58768898E12, 0.4211753731343282], [1.58768892E12, 0.4477390659747967], [1.58768958E12, 0.36944127708095786], [1.58768952E12, 0.40431519699812335], [1.58768922E12, 0.39331619537275114], [1.58768916E12, 0.3946917808219175], [1.58768886E12, 0.47120418848167545], [1.58768946E12, 0.441200324412003]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768964E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 17.0, "minX": 1.58768886E12, "maxY": 13669.0, "series": [{"data": [[1.5876894E12, 6708.0], [1.5876891E12, 13669.0], [1.58768904E12, 12860.0], [1.58768964E12, 3737.0], [1.58768934E12, 6884.0], [1.58768928E12, 8123.0], [1.58768898E12, 7274.0], [1.58768892E12, 7100.0], [1.58768958E12, 10337.0], [1.58768952E12, 8385.0], [1.58768922E12, 7517.0], [1.58768916E12, 7053.0], [1.58768886E12, 6364.0], [1.58768946E12, 4428.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5876894E12, 2313.0], [1.5876891E12, 147.0], [1.58768904E12, 111.0], [1.58768964E12, 17.0], [1.58768934E12, 687.0], [1.58768928E12, 17.0], [1.58768898E12, 190.0], [1.58768892E12, 147.0], [1.58768958E12, 85.0], [1.58768952E12, 989.0], [1.58768922E12, 189.0], [1.58768916E12, 2306.0], [1.58768886E12, 17.0], [1.58768946E12, 1377.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5876894E12, 6124.800000000002], [1.5876891E12, 9767.8], [1.58768904E12, 9633.9], [1.58768964E12, 1427.2], [1.58768934E12, 5907.200000000001], [1.58768928E12, 6099.1], [1.58768898E12, 5271.400000000005], [1.58768892E12, 4593.500000000001], [1.58768958E12, 6893.6], [1.58768952E12, 4852.5], [1.58768922E12, 5047.1], [1.58768916E12, 5223.0], [1.58768886E12, 3763.5], [1.58768946E12, 3552.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5876894E12, 6597.0], [1.5876891E12, 12594.060000000001], [1.58768904E12, 11810.860000000004], [1.58768964E12, 3006.9999999999977], [1.58768934E12, 6547.259999999998], [1.58768928E12, 6797.15], [1.58768898E12, 6734.239999999998], [1.58768892E12, 6141.729999999998], [1.58768958E12, 8426.86], [1.58768952E12, 5697.560000000001], [1.58768922E12, 7001.67], [1.58768916E12, 6432.0], [1.58768886E12, 5275.750000000004], [1.58768946E12, 4088.42]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5876894E12, 6436.949999999999], [1.5876891E12, 11312.699999999993], [1.58768904E12, 10527.949999999999], [1.58768964E12, 1814.9999999999989], [1.58768934E12, 6159.9], [1.58768928E12, 6392.05], [1.58768898E12, 6017.799999999999], [1.58768892E12, 5175.25], [1.58768958E12, 7459.4], [1.58768952E12, 5163.0], [1.58768922E12, 6466.05], [1.58768916E12, 5612.0], [1.58768886E12, 4486.75], [1.58768946E12, 3771.0499999999997]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768964E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 4039.0, "series": [{"data": [[3.0, 104.5], [4.0, 30.0], [6.0, 2537.5], [7.0, 1399.0], [8.0, 38.5], [9.0, 40.5], [10.0, 27.0], [11.0, 49.0], [12.0, 1883.0], [13.0, 1430.0], [15.0, 3533.0], [16.0, 660.5], [17.0, 3519.0], [18.0, 2718.0], [19.0, 1339.0], [20.0, 2048.0], [21.0, 2557.0], [22.0, 2126.0], [23.0, 2797.0], [24.0, 4039.0], [25.0, 2547.5], [26.0, 3522.0], [27.0, 2453.0], [28.0, 3461.0], [29.0, 2562.5], [30.0, 2996.0], [31.0, 3452.5], [33.0, 3314.0], [32.0, 3040.0], [35.0, 3340.0], [34.0, 3555.0], [36.0, 3352.5], [37.0, 3357.0], [38.0, 3031.0], [39.0, 2609.0], [41.0, 3044.0], [40.0, 3111.0], [43.0, 3049.0], [42.0, 2659.0], [44.0, 3385.0], [45.0, 2678.5], [47.0, 2666.0], [46.0, 3320.0], [48.0, 2554.0], [49.0, 2335.0], [50.0, 3175.0], [51.0, 3483.5], [52.0, 2515.0], [53.0, 3442.0], [54.0, 2325.5], [55.0, 2661.0], [57.0, 3032.0], [56.0, 2689.0], [59.0, 2899.0], [58.0, 2595.0], [61.0, 3191.0], [60.0, 2664.5], [62.0, 2527.0], [63.0, 3101.0], [65.0, 2561.0], [66.0, 2245.0], [64.0, 1927.0], [70.0, 3475.0], [69.0, 2630.0], [68.0, 2680.0], [73.0, 1907.0], [85.0, 2663.0], [111.0, 3094.0], [109.0, 1536.0], [120.0, 2377.0], [153.0, 3170.0], [166.0, 3087.0], [1.0, 183.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[20.0, 2.5], [26.0, 2.0], [27.0, 2.0], [29.0, 3.0], [30.0, 2.0], [33.0, 2.0], [32.0, 2.0], [35.0, 2.0], [34.0, 3.0], [36.0, 3.5], [37.0, 3.0], [39.0, 2.0], [38.0, 2.0], [40.0, 2.0], [41.0, 2.0], [43.0, 2.0], [42.0, 2.0], [45.0, 2.0], [44.0, 2.0], [47.0, 2.0], [46.0, 2.0], [49.0, 2.0], [48.0, 3817.0], [50.0, 4.0], [51.0, 2.0], [52.0, 2.0], [53.0, 2.0], [55.0, 2.0], [57.0, 2.0], [56.0, 2.0], [58.0, 2.0], [59.0, 2.0], [61.0, 4.0], [60.0, 2.0], [62.0, 2.0], [63.0, 2.0], [66.0, 2.0], [64.0, 2.0], [69.0, 3.0], [70.0, 13.0], [68.0, 2.0], [71.0, 2.0], [73.0, 1984.0], [72.0, 2.0], [76.0, 2.0], [77.0, 2.0], [83.0, 2.0], [85.0, 2.0], [86.0, 2.0], [84.0, 2.0], [88.0, 2.0], [89.0, 2.0], [91.0, 2.0], [90.0, 2.0], [92.0, 2.0], [95.0, 2.0], [94.0, 2.0], [93.0, 2.0], [97.0, 2.0], [98.0, 2.0], [99.0, 2.0], [96.0, 2.0], [102.0, 2.0], [101.0, 2.0], [100.0, 2.0], [103.0, 2.0], [107.0, 2.0], [104.0, 2.0], [106.0, 2.0], [105.0, 2.0], [111.0, 2.0], [109.0, 2.0], [110.0, 2.0], [108.0, 2.0], [114.0, 2.0], [113.0, 2.0], [115.0, 2.0], [116.0, 2.0], [119.0, 2.0], [117.0, 2.0], [118.0, 2.0], [120.0, 2.0], [122.0, 2.0], [121.0, 2.0], [125.0, 2.0], [126.0, 2.0], [128.0, 2.0], [131.0, 2.0], [136.0, 1290.5], [153.0, 3.0], [166.0, 2279.0], [163.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 166.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 4032.0, "series": [{"data": [[3.0, 104.0], [4.0, 28.5], [6.0, 2499.0], [7.0, 1398.5], [8.0, 36.5], [9.0, 40.0], [10.0, 27.0], [11.0, 49.0], [12.0, 1883.0], [13.0, 1426.0], [15.0, 3533.0], [16.0, 660.5], [17.0, 3518.0], [18.0, 2627.0], [19.0, 1339.0], [20.0, 2048.0], [21.0, 2557.0], [22.0, 2126.0], [23.0, 2789.0], [24.0, 4032.0], [25.0, 2547.5], [26.0, 3521.0], [27.0, 2453.0], [28.0, 3461.0], [29.0, 2562.0], [30.0, 2996.0], [31.0, 3452.5], [33.0, 3314.0], [32.0, 3040.0], [35.0, 3340.0], [34.0, 3555.0], [36.0, 3352.5], [37.0, 3357.0], [38.0, 3030.0], [39.0, 2609.0], [41.0, 3043.0], [40.0, 3109.0], [43.0, 3049.0], [42.0, 2659.0], [44.0, 3385.0], [45.0, 2678.0], [47.0, 2666.0], [46.0, 3320.0], [48.0, 2554.0], [49.0, 2334.5], [50.0, 3169.5], [51.0, 3471.0], [52.0, 2515.0], [53.0, 3441.0], [54.0, 2325.0], [55.0, 2661.0], [57.0, 3031.0], [56.0, 2689.0], [59.0, 2899.0], [58.0, 2595.0], [61.0, 3191.0], [60.0, 2664.5], [62.0, 2527.0], [63.0, 3101.0], [65.0, 2561.0], [66.0, 2245.0], [64.0, 1927.0], [70.0, 3475.0], [69.0, 2630.0], [68.0, 2680.0], [73.0, 1907.0], [85.0, 2663.0], [111.0, 3094.0], [109.0, 1536.0], [120.0, 2372.0], [153.0, 3169.5], [166.0, 3087.0], [1.0, 182.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[20.0, 2.5], [26.0, 2.0], [27.0, 2.0], [29.0, 3.0], [30.0, 2.0], [33.0, 2.0], [32.0, 2.0], [35.0, 2.0], [34.0, 3.0], [36.0, 3.5], [37.0, 3.0], [39.0, 2.0], [38.0, 2.0], [40.0, 2.0], [41.0, 2.0], [43.0, 2.0], [42.0, 2.0], [45.0, 2.0], [44.0, 2.0], [47.0, 2.0], [46.0, 2.0], [49.0, 2.0], [48.0, 3817.0], [50.0, 4.0], [51.0, 2.0], [52.0, 2.0], [53.0, 2.0], [55.0, 2.0], [57.0, 2.0], [56.0, 2.0], [58.0, 2.0], [59.0, 2.0], [61.0, 4.0], [60.0, 2.0], [62.0, 2.0], [63.0, 2.0], [66.0, 2.0], [64.0, 2.0], [69.0, 3.0], [70.0, 13.0], [68.0, 2.0], [71.0, 2.0], [73.0, 1984.0], [72.0, 2.0], [76.0, 2.0], [77.0, 2.0], [83.0, 2.0], [85.0, 2.0], [86.0, 2.0], [84.0, 2.0], [88.0, 2.0], [89.0, 2.0], [91.0, 2.0], [90.0, 2.0], [92.0, 2.0], [95.0, 2.0], [94.0, 2.0], [93.0, 2.0], [97.0, 2.0], [98.0, 2.0], [99.0, 2.0], [96.0, 2.0], [102.0, 2.0], [101.0, 2.0], [100.0, 2.0], [103.0, 2.0], [107.0, 2.0], [104.0, 2.0], [106.0, 2.0], [105.0, 2.0], [111.0, 2.0], [109.0, 2.0], [110.0, 2.0], [108.0, 2.0], [114.0, 2.0], [113.0, 2.0], [115.0, 2.0], [116.0, 2.0], [119.0, 2.0], [117.0, 2.0], [118.0, 2.0], [120.0, 2.0], [122.0, 2.0], [121.0, 2.0], [125.0, 2.0], [126.0, 2.0], [128.0, 2.0], [131.0, 2.0], [136.0, 1290.5], [153.0, 3.0], [166.0, 2279.0], [163.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 166.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6.566666666666666, "minX": 1.58768886E12, "maxY": 83.18333333333334, "series": [{"data": [[1.5876894E12, 83.18333333333334], [1.5876891E12, 33.4], [1.58768904E12, 36.983333333333334], [1.58768964E12, 6.566666666666666], [1.58768934E12, 77.41666666666667], [1.58768928E12, 36.016666666666666], [1.58768898E12, 72.83333333333333], [1.58768892E12, 42.68333333333333], [1.58768958E12, 28.283333333333335], [1.58768952E12, 35.333333333333336], [1.58768922E12, 53.8], [1.58768916E12, 75.61666666666666], [1.58768886E12, 29.55], [1.58768946E12, 41.583333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768964E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.58768886E12, "maxY": 71.86666666666666, "series": [{"data": [[1.5876894E12, 9.333333333333334], [1.5876891E12, 29.683333333333334], [1.58768904E12, 33.03333333333333], [1.58768964E12, 7.116666666666666], [1.58768934E12, 12.016666666666667], [1.58768928E12, 35.3], [1.58768898E12, 19.05], [1.58768892E12, 35.3], [1.58768958E12, 29.216666666666665], [1.58768952E12, 33.833333333333336], [1.58768922E12, 23.633333333333333], [1.58768916E12, 11.65], [1.58768886E12, 27.233333333333334], [1.58768946E12, 41.3]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58768892E12, 0.3]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.58768892E12, 9.383333333333333], [1.5876894E12, 71.86666666666666], [1.5876891E12, 3.0833333333333335], [1.58768958E12, 0.6166666666666667], [1.58768904E12, 3.35], [1.58768952E12, 1.6333333333333333], [1.58768922E12, 28.033333333333335], [1.58768916E12, 66.45], [1.58768934E12, 67.41666666666667], [1.58768928E12, 0.8333333333333334], [1.58768898E12, 52.55], [1.58768946E12, 0.03333333333333333]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768964E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.58768886E12, "maxY": 35.96666666666667, "series": [{"data": [[1.58768892E12, 0.11666666666666667], [1.58768886E12, 3.1333333333333333]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.5876894E12, 4.35], [1.5876891E12, 15.0], [1.58768904E12, 16.3], [1.58768964E12, 3.966666666666667], [1.58768934E12, 6.266666666666667], [1.58768928E12, 17.55], [1.58768898E12, 9.266666666666667], [1.58768892E12, 17.683333333333334], [1.58768958E12, 14.916666666666666], [1.58768952E12, 16.783333333333335], [1.58768922E12, 11.933333333333334], [1.58768916E12, 5.9], [1.58768886E12, 11.366666666666667], [1.58768946E12, 20.75]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58768892E12, 4.7], [1.5876894E12, 35.9], [1.5876891E12, 1.5333333333333334], [1.58768958E12, 0.3], [1.58768904E12, 1.7666666666666666], [1.58768952E12, 0.9166666666666666], [1.58768922E12, 13.8], [1.58768916E12, 33.266666666666666], [1.58768934E12, 33.75], [1.58768928E12, 0.4], [1.58768898E12, 26.6], [1.58768946E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.5876894E12, 4.983333333333333], [1.5876891E12, 14.683333333333334], [1.58768904E12, 16.733333333333334], [1.58768964E12, 3.15], [1.58768934E12, 5.75], [1.58768928E12, 17.75], [1.58768898E12, 9.783333333333333], [1.58768892E12, 17.5], [1.58768958E12, 14.3], [1.58768952E12, 17.05], [1.58768922E12, 11.7], [1.58768916E12, 5.75], [1.58768886E12, 12.733333333333333], [1.58768946E12, 20.55]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58768892E12, 4.983333333333333], [1.5876894E12, 35.96666666666667], [1.5876891E12, 1.55], [1.58768958E12, 0.31666666666666665], [1.58768904E12, 1.5833333333333333], [1.58768952E12, 0.7166666666666667], [1.58768922E12, 14.233333333333333], [1.58768916E12, 33.18333333333333], [1.58768934E12, 33.666666666666664], [1.58768928E12, 0.43333333333333335], [1.58768898E12, 25.95]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768964E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.58768886E12, "maxY": 71.86666666666666, "series": [{"data": [[1.5876894E12, 9.333333333333334], [1.5876891E12, 29.683333333333334], [1.58768904E12, 33.03333333333333], [1.58768964E12, 7.116666666666666], [1.58768934E12, 12.016666666666667], [1.58768928E12, 35.3], [1.58768898E12, 19.05], [1.58768892E12, 35.3], [1.58768958E12, 29.216666666666665], [1.58768952E12, 33.833333333333336], [1.58768922E12, 23.633333333333333], [1.58768916E12, 11.65], [1.58768886E12, 27.233333333333334], [1.58768946E12, 41.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58768892E12, 9.683333333333334], [1.5876894E12, 71.86666666666666], [1.5876891E12, 3.0833333333333335], [1.58768958E12, 0.6166666666666667], [1.58768904E12, 3.35], [1.58768952E12, 1.6333333333333333], [1.58768922E12, 28.033333333333335], [1.58768916E12, 66.45], [1.58768934E12, 67.41666666666667], [1.58768928E12, 0.8333333333333334], [1.58768898E12, 52.55], [1.58768946E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768964E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

