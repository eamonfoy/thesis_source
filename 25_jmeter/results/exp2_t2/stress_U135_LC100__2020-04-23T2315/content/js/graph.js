/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 7357.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 2.0], [6.6, 2.0], [6.7, 2.0], [6.8, 2.0], [6.9, 2.0], [7.0, 2.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 2.0], [11.7, 2.0], [11.8, 2.0], [11.9, 2.0], [12.0, 2.0], [12.1, 2.0], [12.2, 2.0], [12.3, 2.0], [12.4, 2.0], [12.5, 2.0], [12.6, 2.0], [12.7, 2.0], [12.8, 2.0], [12.9, 2.0], [13.0, 2.0], [13.1, 2.0], [13.2, 2.0], [13.3, 2.0], [13.4, 2.0], [13.5, 2.0], [13.6, 2.0], [13.7, 2.0], [13.8, 2.0], [13.9, 2.0], [14.0, 2.0], [14.1, 2.0], [14.2, 2.0], [14.3, 3.0], [14.4, 3.0], [14.5, 3.0], [14.6, 3.0], [14.7, 3.0], [14.8, 3.0], [14.9, 3.0], [15.0, 3.0], [15.1, 3.0], [15.2, 3.0], [15.3, 5.0], [15.4, 17.0], [15.5, 18.0], [15.6, 19.0], [15.7, 19.0], [15.8, 20.0], [15.9, 20.0], [16.0, 21.0], [16.1, 21.0], [16.2, 22.0], [16.3, 22.0], [16.4, 23.0], [16.5, 23.0], [16.6, 23.0], [16.7, 23.0], [16.8, 24.0], [16.9, 24.0], [17.0, 24.0], [17.1, 25.0], [17.2, 25.0], [17.3, 25.0], [17.4, 25.0], [17.5, 26.0], [17.6, 26.0], [17.7, 26.0], [17.8, 27.0], [17.9, 27.0], [18.0, 27.0], [18.1, 28.0], [18.2, 28.0], [18.3, 29.0], [18.4, 29.0], [18.5, 29.0], [18.6, 30.0], [18.7, 30.0], [18.8, 30.0], [18.9, 31.0], [19.0, 31.0], [19.1, 32.0], [19.2, 32.0], [19.3, 32.0], [19.4, 33.0], [19.5, 33.0], [19.6, 34.0], [19.7, 34.0], [19.8, 35.0], [19.9, 35.0], [20.0, 36.0], [20.1, 37.0], [20.2, 38.0], [20.3, 38.0], [20.4, 39.0], [20.5, 40.0], [20.6, 41.0], [20.7, 42.0], [20.8, 43.0], [20.9, 45.0], [21.0, 46.0], [21.1, 47.0], [21.2, 49.0], [21.3, 51.0], [21.4, 53.0], [21.5, 54.0], [21.6, 55.0], [21.7, 56.0], [21.8, 59.0], [21.9, 60.0], [22.0, 63.0], [22.1, 64.0], [22.2, 66.0], [22.3, 69.0], [22.4, 73.0], [22.5, 78.0], [22.6, 82.0], [22.7, 84.0], [22.8, 86.0], [22.9, 91.0], [23.0, 93.0], [23.1, 96.0], [23.2, 102.0], [23.3, 110.0], [23.4, 119.0], [23.5, 128.0], [23.6, 136.0], [23.7, 144.0], [23.8, 152.0], [23.9, 162.0], [24.0, 175.0], [24.1, 182.0], [24.2, 188.0], [24.3, 196.0], [24.4, 204.0], [24.5, 211.0], [24.6, 220.0], [24.7, 227.0], [24.8, 237.0], [24.9, 250.0], [25.0, 259.0], [25.1, 264.0], [25.2, 275.0], [25.3, 285.0], [25.4, 295.0], [25.5, 306.0], [25.6, 314.0], [25.7, 322.0], [25.8, 332.0], [25.9, 340.0], [26.0, 351.0], [26.1, 359.0], [26.2, 367.0], [26.3, 376.0], [26.4, 386.0], [26.5, 395.0], [26.6, 399.0], [26.7, 404.0], [26.8, 410.0], [26.9, 416.0], [27.0, 425.0], [27.1, 433.0], [27.2, 439.0], [27.3, 448.0], [27.4, 454.0], [27.5, 460.0], [27.6, 465.0], [27.7, 473.0], [27.8, 476.0], [27.9, 482.0], [28.0, 490.0], [28.1, 495.0], [28.2, 501.0], [28.3, 506.0], [28.4, 513.0], [28.5, 518.0], [28.6, 524.0], [28.7, 529.0], [28.8, 534.0], [28.9, 540.0], [29.0, 544.0], [29.1, 548.0], [29.2, 553.0], [29.3, 556.0], [29.4, 560.0], [29.5, 565.0], [29.6, 570.0], [29.7, 574.0], [29.8, 578.0], [29.9, 580.0], [30.0, 584.0], [30.1, 588.0], [30.2, 591.0], [30.3, 596.0], [30.4, 599.0], [30.5, 601.0], [30.6, 604.0], [30.7, 608.0], [30.8, 612.0], [30.9, 616.0], [31.0, 619.0], [31.1, 624.0], [31.2, 630.0], [31.3, 635.0], [31.4, 640.0], [31.5, 642.0], [31.6, 649.0], [31.7, 653.0], [31.8, 657.0], [31.9, 662.0], [32.0, 665.0], [32.1, 667.0], [32.2, 671.0], [32.3, 675.0], [32.4, 678.0], [32.5, 682.0], [32.6, 687.0], [32.7, 689.0], [32.8, 694.0], [32.9, 698.0], [33.0, 701.0], [33.1, 703.0], [33.2, 708.0], [33.3, 712.0], [33.4, 716.0], [33.5, 720.0], [33.6, 724.0], [33.7, 729.0], [33.8, 734.0], [33.9, 737.0], [34.0, 742.0], [34.1, 747.0], [34.2, 751.0], [34.3, 754.0], [34.4, 755.0], [34.5, 759.0], [34.6, 762.0], [34.7, 768.0], [34.8, 770.0], [34.9, 774.0], [35.0, 777.0], [35.1, 783.0], [35.2, 788.0], [35.3, 791.0], [35.4, 795.0], [35.5, 800.0], [35.6, 805.0], [35.7, 811.0], [35.8, 814.0], [35.9, 817.0], [36.0, 820.0], [36.1, 823.0], [36.2, 826.0], [36.3, 830.0], [36.4, 833.0], [36.5, 837.0], [36.6, 840.0], [36.7, 843.0], [36.8, 846.0], [36.9, 850.0], [37.0, 854.0], [37.1, 858.0], [37.2, 863.0], [37.3, 866.0], [37.4, 869.0], [37.5, 872.0], [37.6, 875.0], [37.7, 878.0], [37.8, 880.0], [37.9, 883.0], [38.0, 887.0], [38.1, 891.0], [38.2, 895.0], [38.3, 898.0], [38.4, 903.0], [38.5, 906.0], [38.6, 908.0], [38.7, 912.0], [38.8, 916.0], [38.9, 918.0], [39.0, 922.0], [39.1, 925.0], [39.2, 929.0], [39.3, 932.0], [39.4, 934.0], [39.5, 938.0], [39.6, 941.0], [39.7, 945.0], [39.8, 949.0], [39.9, 952.0], [40.0, 956.0], [40.1, 959.0], [40.2, 961.0], [40.3, 965.0], [40.4, 967.0], [40.5, 971.0], [40.6, 973.0], [40.7, 976.0], [40.8, 978.0], [40.9, 981.0], [41.0, 983.0], [41.1, 988.0], [41.2, 989.0], [41.3, 993.0], [41.4, 995.0], [41.5, 998.0], [41.6, 1001.0], [41.7, 1004.0], [41.8, 1008.0], [41.9, 1011.0], [42.0, 1014.0], [42.1, 1017.0], [42.2, 1020.0], [42.3, 1023.0], [42.4, 1027.0], [42.5, 1031.0], [42.6, 1035.0], [42.7, 1037.0], [42.8, 1040.0], [42.9, 1042.0], [43.0, 1045.0], [43.1, 1048.0], [43.2, 1050.0], [43.3, 1053.0], [43.4, 1055.0], [43.5, 1058.0], [43.6, 1061.0], [43.7, 1066.0], [43.8, 1069.0], [43.9, 1074.0], [44.0, 1077.0], [44.1, 1079.0], [44.2, 1083.0], [44.3, 1086.0], [44.4, 1090.0], [44.5, 1093.0], [44.6, 1095.0], [44.7, 1097.0], [44.8, 1100.0], [44.9, 1103.0], [45.0, 1106.0], [45.1, 1108.0], [45.2, 1112.0], [45.3, 1114.0], [45.4, 1117.0], [45.5, 1118.0], [45.6, 1121.0], [45.7, 1124.0], [45.8, 1127.0], [45.9, 1129.0], [46.0, 1131.0], [46.1, 1133.0], [46.2, 1136.0], [46.3, 1138.0], [46.4, 1141.0], [46.5, 1144.0], [46.6, 1147.0], [46.7, 1151.0], [46.8, 1153.0], [46.9, 1156.0], [47.0, 1160.0], [47.1, 1163.0], [47.2, 1165.0], [47.3, 1167.0], [47.4, 1170.0], [47.5, 1173.0], [47.6, 1179.0], [47.7, 1181.0], [47.8, 1185.0], [47.9, 1188.0], [48.0, 1192.0], [48.1, 1195.0], [48.2, 1199.0], [48.3, 1202.0], [48.4, 1205.0], [48.5, 1207.0], [48.6, 1210.0], [48.7, 1213.0], [48.8, 1216.0], [48.9, 1219.0], [49.0, 1223.0], [49.1, 1226.0], [49.2, 1228.0], [49.3, 1231.0], [49.4, 1234.0], [49.5, 1236.0], [49.6, 1239.0], [49.7, 1242.0], [49.8, 1246.0], [49.9, 1250.0], [50.0, 1252.0], [50.1, 1255.0], [50.2, 1259.0], [50.3, 1262.0], [50.4, 1264.0], [50.5, 1269.0], [50.6, 1271.0], [50.7, 1275.0], [50.8, 1280.0], [50.9, 1283.0], [51.0, 1286.0], [51.1, 1288.0], [51.2, 1291.0], [51.3, 1294.0], [51.4, 1297.0], [51.5, 1299.0], [51.6, 1302.0], [51.7, 1305.0], [51.8, 1308.0], [51.9, 1312.0], [52.0, 1314.0], [52.1, 1318.0], [52.2, 1321.0], [52.3, 1325.0], [52.4, 1328.0], [52.5, 1331.0], [52.6, 1334.0], [52.7, 1337.0], [52.8, 1339.0], [52.9, 1343.0], [53.0, 1347.0], [53.1, 1350.0], [53.2, 1353.0], [53.3, 1356.0], [53.4, 1359.0], [53.5, 1362.0], [53.6, 1364.0], [53.7, 1369.0], [53.8, 1372.0], [53.9, 1375.0], [54.0, 1378.0], [54.1, 1384.0], [54.2, 1386.0], [54.3, 1389.0], [54.4, 1391.0], [54.5, 1393.0], [54.6, 1395.0], [54.7, 1400.0], [54.8, 1403.0], [54.9, 1406.0], [55.0, 1409.0], [55.1, 1412.0], [55.2, 1416.0], [55.3, 1419.0], [55.4, 1423.0], [55.5, 1427.0], [55.6, 1428.0], [55.7, 1432.0], [55.8, 1435.0], [55.9, 1440.0], [56.0, 1442.0], [56.1, 1446.0], [56.2, 1448.0], [56.3, 1452.0], [56.4, 1453.0], [56.5, 1457.0], [56.6, 1459.0], [56.7, 1464.0], [56.8, 1465.0], [56.9, 1468.0], [57.0, 1472.0], [57.1, 1476.0], [57.2, 1478.0], [57.3, 1482.0], [57.4, 1484.0], [57.5, 1488.0], [57.6, 1490.0], [57.7, 1493.0], [57.8, 1496.0], [57.9, 1499.0], [58.0, 1500.0], [58.1, 1501.0], [58.2, 1506.0], [58.3, 1507.0], [58.4, 1510.0], [58.5, 1513.0], [58.6, 1518.0], [58.7, 1522.0], [58.8, 1524.0], [58.9, 1527.0], [59.0, 1529.0], [59.1, 1533.0], [59.2, 1537.0], [59.3, 1540.0], [59.4, 1543.0], [59.5, 1546.0], [59.6, 1552.0], [59.7, 1554.0], [59.8, 1558.0], [59.9, 1560.0], [60.0, 1565.0], [60.1, 1569.0], [60.2, 1572.0], [60.3, 1574.0], [60.4, 1577.0], [60.5, 1584.0], [60.6, 1587.0], [60.7, 1590.0], [60.8, 1593.0], [60.9, 1597.0], [61.0, 1602.0], [61.1, 1604.0], [61.2, 1606.0], [61.3, 1608.0], [61.4, 1609.0], [61.5, 1612.0], [61.6, 1616.0], [61.7, 1621.0], [61.8, 1624.0], [61.9, 1628.0], [62.0, 1634.0], [62.1, 1638.0], [62.2, 1642.0], [62.3, 1647.0], [62.4, 1649.0], [62.5, 1653.0], [62.6, 1656.0], [62.7, 1658.0], [62.8, 1661.0], [62.9, 1666.0], [63.0, 1669.0], [63.1, 1670.0], [63.2, 1673.0], [63.3, 1678.0], [63.4, 1681.0], [63.5, 1686.0], [63.6, 1689.0], [63.7, 1691.0], [63.8, 1694.0], [63.9, 1697.0], [64.0, 1701.0], [64.1, 1705.0], [64.2, 1711.0], [64.3, 1713.0], [64.4, 1716.0], [64.5, 1719.0], [64.6, 1722.0], [64.7, 1726.0], [64.8, 1729.0], [64.9, 1732.0], [65.0, 1734.0], [65.1, 1739.0], [65.2, 1742.0], [65.3, 1745.0], [65.4, 1747.0], [65.5, 1751.0], [65.6, 1755.0], [65.7, 1757.0], [65.8, 1763.0], [65.9, 1768.0], [66.0, 1771.0], [66.1, 1774.0], [66.2, 1778.0], [66.3, 1782.0], [66.4, 1787.0], [66.5, 1791.0], [66.6, 1795.0], [66.7, 1798.0], [66.8, 1800.0], [66.9, 1804.0], [67.0, 1806.0], [67.1, 1810.0], [67.2, 1814.0], [67.3, 1819.0], [67.4, 1822.0], [67.5, 1825.0], [67.6, 1829.0], [67.7, 1833.0], [67.8, 1835.0], [67.9, 1839.0], [68.0, 1844.0], [68.1, 1847.0], [68.2, 1851.0], [68.3, 1855.0], [68.4, 1860.0], [68.5, 1866.0], [68.6, 1869.0], [68.7, 1872.0], [68.8, 1876.0], [68.9, 1880.0], [69.0, 1886.0], [69.1, 1889.0], [69.2, 1892.0], [69.3, 1895.0], [69.4, 1901.0], [69.5, 1906.0], [69.6, 1911.0], [69.7, 1915.0], [69.8, 1919.0], [69.9, 1922.0], [70.0, 1924.0], [70.1, 1929.0], [70.2, 1932.0], [70.3, 1937.0], [70.4, 1940.0], [70.5, 1944.0], [70.6, 1948.0], [70.7, 1953.0], [70.8, 1959.0], [70.9, 1963.0], [71.0, 1969.0], [71.1, 1973.0], [71.2, 1977.0], [71.3, 1983.0], [71.4, 1985.0], [71.5, 1988.0], [71.6, 1992.0], [71.7, 1997.0], [71.8, 2002.0], [71.9, 2006.0], [72.0, 2009.0], [72.1, 2014.0], [72.2, 2019.0], [72.3, 2023.0], [72.4, 2028.0], [72.5, 2031.0], [72.6, 2034.0], [72.7, 2038.0], [72.8, 2042.0], [72.9, 2047.0], [73.0, 2050.0], [73.1, 2056.0], [73.2, 2061.0], [73.3, 2065.0], [73.4, 2069.0], [73.5, 2073.0], [73.6, 2076.0], [73.7, 2085.0], [73.8, 2087.0], [73.9, 2091.0], [74.0, 2096.0], [74.1, 2102.0], [74.2, 2106.0], [74.3, 2108.0], [74.4, 2113.0], [74.5, 2117.0], [74.6, 2122.0], [74.7, 2129.0], [74.8, 2135.0], [74.9, 2137.0], [75.0, 2142.0], [75.1, 2148.0], [75.2, 2152.0], [75.3, 2157.0], [75.4, 2160.0], [75.5, 2166.0], [75.6, 2169.0], [75.7, 2172.0], [75.8, 2175.0], [75.9, 2179.0], [76.0, 2184.0], [76.1, 2188.0], [76.2, 2192.0], [76.3, 2194.0], [76.4, 2201.0], [76.5, 2205.0], [76.6, 2209.0], [76.7, 2215.0], [76.8, 2218.0], [76.9, 2223.0], [77.0, 2227.0], [77.1, 2234.0], [77.2, 2240.0], [77.3, 2251.0], [77.4, 2256.0], [77.5, 2260.0], [77.6, 2264.0], [77.7, 2269.0], [77.8, 2273.0], [77.9, 2277.0], [78.0, 2283.0], [78.1, 2289.0], [78.2, 2293.0], [78.3, 2296.0], [78.4, 2299.0], [78.5, 2304.0], [78.6, 2310.0], [78.7, 2316.0], [78.8, 2322.0], [78.9, 2326.0], [79.0, 2330.0], [79.1, 2337.0], [79.2, 2342.0], [79.3, 2347.0], [79.4, 2351.0], [79.5, 2354.0], [79.6, 2359.0], [79.7, 2363.0], [79.8, 2369.0], [79.9, 2372.0], [80.0, 2378.0], [80.1, 2380.0], [80.2, 2386.0], [80.3, 2394.0], [80.4, 2399.0], [80.5, 2404.0], [80.6, 2411.0], [80.7, 2417.0], [80.8, 2420.0], [80.9, 2424.0], [81.0, 2429.0], [81.1, 2433.0], [81.2, 2439.0], [81.3, 2447.0], [81.4, 2452.0], [81.5, 2457.0], [81.6, 2464.0], [81.7, 2468.0], [81.8, 2472.0], [81.9, 2476.0], [82.0, 2481.0], [82.1, 2488.0], [82.2, 2493.0], [82.3, 2498.0], [82.4, 2507.0], [82.5, 2513.0], [82.6, 2516.0], [82.7, 2522.0], [82.8, 2527.0], [82.9, 2531.0], [83.0, 2535.0], [83.1, 2538.0], [83.2, 2544.0], [83.3, 2548.0], [83.4, 2555.0], [83.5, 2560.0], [83.6, 2564.0], [83.7, 2571.0], [83.8, 2576.0], [83.9, 2581.0], [84.0, 2588.0], [84.1, 2594.0], [84.2, 2598.0], [84.3, 2606.0], [84.4, 2612.0], [84.5, 2619.0], [84.6, 2623.0], [84.7, 2627.0], [84.8, 2631.0], [84.9, 2636.0], [85.0, 2643.0], [85.1, 2649.0], [85.2, 2655.0], [85.3, 2660.0], [85.4, 2665.0], [85.5, 2671.0], [85.6, 2675.0], [85.7, 2680.0], [85.8, 2687.0], [85.9, 2692.0], [86.0, 2696.0], [86.1, 2706.0], [86.2, 2709.0], [86.3, 2715.0], [86.4, 2722.0], [86.5, 2730.0], [86.6, 2735.0], [86.7, 2742.0], [86.8, 2746.0], [86.9, 2755.0], [87.0, 2766.0], [87.1, 2774.0], [87.2, 2780.0], [87.3, 2789.0], [87.4, 2797.0], [87.5, 2802.0], [87.6, 2810.0], [87.7, 2816.0], [87.8, 2824.0], [87.9, 2831.0], [88.0, 2839.0], [88.1, 2847.0], [88.2, 2854.0], [88.3, 2862.0], [88.4, 2868.0], [88.5, 2875.0], [88.6, 2882.0], [88.7, 2892.0], [88.8, 2899.0], [88.9, 2904.0], [89.0, 2912.0], [89.1, 2917.0], [89.2, 2927.0], [89.3, 2936.0], [89.4, 2942.0], [89.5, 2950.0], [89.6, 2962.0], [89.7, 2969.0], [89.8, 2977.0], [89.9, 2990.0], [90.0, 2997.0], [90.1, 3004.0], [90.2, 3010.0], [90.3, 3020.0], [90.4, 3028.0], [90.5, 3039.0], [90.6, 3043.0], [90.7, 3050.0], [90.8, 3058.0], [90.9, 3069.0], [91.0, 3080.0], [91.1, 3085.0], [91.2, 3097.0], [91.3, 3108.0], [91.4, 3120.0], [91.5, 3127.0], [91.6, 3134.0], [91.7, 3142.0], [91.8, 3156.0], [91.9, 3162.0], [92.0, 3175.0], [92.1, 3186.0], [92.2, 3197.0], [92.3, 3208.0], [92.4, 3223.0], [92.5, 3236.0], [92.6, 3248.0], [92.7, 3263.0], [92.8, 3274.0], [92.9, 3286.0], [93.0, 3297.0], [93.1, 3306.0], [93.2, 3320.0], [93.3, 3326.0], [93.4, 3339.0], [93.5, 3349.0], [93.6, 3366.0], [93.7, 3374.0], [93.8, 3390.0], [93.9, 3402.0], [94.0, 3416.0], [94.1, 3433.0], [94.2, 3452.0], [94.3, 3461.0], [94.4, 3473.0], [94.5, 3491.0], [94.6, 3502.0], [94.7, 3514.0], [94.8, 3530.0], [94.9, 3551.0], [95.0, 3564.0], [95.1, 3576.0], [95.2, 3598.0], [95.3, 3617.0], [95.4, 3636.0], [95.5, 3651.0], [95.6, 3668.0], [95.7, 3681.0], [95.8, 3698.0], [95.9, 3715.0], [96.0, 3733.0], [96.1, 3757.0], [96.2, 3771.0], [96.3, 3800.0], [96.4, 3827.0], [96.5, 3844.0], [96.6, 3863.0], [96.7, 3884.0], [96.8, 3905.0], [96.9, 3928.0], [97.0, 3955.0], [97.1, 3978.0], [97.2, 3997.0], [97.3, 4032.0], [97.4, 4067.0], [97.5, 4105.0], [97.6, 4160.0], [97.7, 4217.0], [97.8, 4253.0], [97.9, 4311.0], [98.0, 4358.0], [98.1, 4417.0], [98.2, 4466.0], [98.3, 4518.0], [98.4, 4566.0], [98.5, 4618.0], [98.6, 4667.0], [98.7, 4744.0], [98.8, 4800.0], [98.9, 4869.0], [99.0, 4947.0], [99.1, 5011.0], [99.2, 5109.0], [99.3, 5187.0], [99.4, 5298.0], [99.5, 5394.0], [99.6, 5514.0], [99.7, 5631.0], [99.8, 5783.0], [99.9, 6072.0], [100.0, 7237.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 145.0], [0.1, 145.0], [0.2, 145.0], [0.3, 145.0], [0.4, 145.0], [0.5, 145.0], [0.6, 145.0], [0.7, 145.0], [0.8, 145.0], [0.9, 145.0], [1.0, 145.0], [1.1, 145.0], [1.2, 145.0], [1.3, 145.0], [1.4, 145.0], [1.5, 146.0], [1.6, 146.0], [1.7, 146.0], [1.8, 146.0], [1.9, 146.0], [2.0, 146.0], [2.1, 146.0], [2.2, 146.0], [2.3, 146.0], [2.4, 146.0], [2.5, 146.0], [2.6, 146.0], [2.7, 146.0], [2.8, 146.0], [2.9, 146.0], [3.0, 146.0], [3.1, 146.0], [3.2, 146.0], [3.3, 146.0], [3.4, 146.0], [3.5, 146.0], [3.6, 146.0], [3.7, 146.0], [3.8, 147.0], [3.9, 147.0], [4.0, 147.0], [4.1, 147.0], [4.2, 147.0], [4.3, 147.0], [4.4, 147.0], [4.5, 147.0], [4.6, 147.0], [4.7, 147.0], [4.8, 147.0], [4.9, 147.0], [5.0, 147.0], [5.1, 147.0], [5.2, 147.0], [5.3, 147.0], [5.4, 147.0], [5.5, 147.0], [5.6, 147.0], [5.7, 147.0], [5.8, 147.0], [5.9, 147.0], [6.0, 148.0], [6.1, 148.0], [6.2, 148.0], [6.3, 148.0], [6.4, 148.0], [6.5, 148.0], [6.6, 148.0], [6.7, 148.0], [6.8, 148.0], [6.9, 148.0], [7.0, 148.0], [7.1, 148.0], [7.2, 148.0], [7.3, 148.0], [7.4, 148.0], [7.5, 148.0], [7.6, 148.0], [7.7, 148.0], [7.8, 148.0], [7.9, 148.0], [8.0, 148.0], [8.1, 148.0], [8.2, 148.0], [8.3, 148.0], [8.4, 148.0], [8.5, 148.0], [8.6, 148.0], [8.7, 148.0], [8.8, 148.0], [8.9, 148.0], [9.0, 148.0], [9.1, 148.0], [9.2, 148.0], [9.3, 148.0], [9.4, 148.0], [9.5, 148.0], [9.6, 148.0], [9.7, 148.0], [9.8, 148.0], [9.9, 148.0], [10.0, 148.0], [10.1, 148.0], [10.2, 148.0], [10.3, 148.0], [10.4, 148.0], [10.5, 148.0], [10.6, 148.0], [10.7, 148.0], [10.8, 148.0], [10.9, 148.0], [11.0, 148.0], [11.1, 148.0], [11.2, 148.0], [11.3, 148.0], [11.4, 148.0], [11.5, 148.0], [11.6, 148.0], [11.7, 148.0], [11.8, 148.0], [11.9, 149.0], [12.0, 149.0], [12.1, 149.0], [12.2, 149.0], [12.3, 149.0], [12.4, 149.0], [12.5, 149.0], [12.6, 149.0], [12.7, 149.0], [12.8, 149.0], [12.9, 149.0], [13.0, 149.0], [13.1, 149.0], [13.2, 149.0], [13.3, 149.0], [13.4, 149.0], [13.5, 149.0], [13.6, 149.0], [13.7, 149.0], [13.8, 149.0], [13.9, 149.0], [14.0, 149.0], [14.1, 150.0], [14.2, 150.0], [14.3, 150.0], [14.4, 150.0], [14.5, 150.0], [14.6, 150.0], [14.7, 150.0], [14.8, 150.0], [14.9, 150.0], [15.0, 150.0], [15.1, 150.0], [15.2, 150.0], [15.3, 150.0], [15.4, 150.0], [15.5, 150.0], [15.6, 150.0], [15.7, 150.0], [15.8, 150.0], [15.9, 150.0], [16.0, 150.0], [16.1, 150.0], [16.2, 150.0], [16.3, 150.0], [16.4, 150.0], [16.5, 150.0], [16.6, 150.0], [16.7, 150.0], [16.8, 150.0], [16.9, 150.0], [17.0, 150.0], [17.1, 150.0], [17.2, 150.0], [17.3, 150.0], [17.4, 150.0], [17.5, 150.0], [17.6, 150.0], [17.7, 150.0], [17.8, 150.0], [17.9, 150.0], [18.0, 150.0], [18.1, 150.0], [18.2, 150.0], [18.3, 150.0], [18.4, 150.0], [18.5, 150.0], [18.6, 150.0], [18.7, 150.0], [18.8, 150.0], [18.9, 150.0], [19.0, 150.0], [19.1, 150.0], [19.2, 150.0], [19.3, 150.0], [19.4, 150.0], [19.5, 150.0], [19.6, 150.0], [19.7, 150.0], [19.8, 150.0], [19.9, 150.0], [20.0, 150.0], [20.1, 150.0], [20.2, 150.0], [20.3, 150.0], [20.4, 150.0], [20.5, 150.0], [20.6, 150.0], [20.7, 150.0], [20.8, 151.0], [20.9, 151.0], [21.0, 151.0], [21.1, 151.0], [21.2, 151.0], [21.3, 151.0], [21.4, 151.0], [21.5, 151.0], [21.6, 151.0], [21.7, 151.0], [21.8, 151.0], [21.9, 151.0], [22.0, 151.0], [22.1, 151.0], [22.2, 151.0], [22.3, 151.0], [22.4, 151.0], [22.5, 151.0], [22.6, 151.0], [22.7, 151.0], [22.8, 151.0], [22.9, 151.0], [23.0, 151.0], [23.1, 151.0], [23.2, 151.0], [23.3, 151.0], [23.4, 151.0], [23.5, 151.0], [23.6, 151.0], [23.7, 151.0], [23.8, 151.0], [23.9, 151.0], [24.0, 151.0], [24.1, 151.0], [24.2, 151.0], [24.3, 151.0], [24.4, 151.0], [24.5, 152.0], [24.6, 152.0], [24.7, 152.0], [24.8, 152.0], [24.9, 152.0], [25.0, 152.0], [25.1, 152.0], [25.2, 152.0], [25.3, 152.0], [25.4, 152.0], [25.5, 152.0], [25.6, 152.0], [25.7, 152.0], [25.8, 152.0], [25.9, 152.0], [26.0, 153.0], [26.1, 153.0], [26.2, 153.0], [26.3, 153.0], [26.4, 153.0], [26.5, 153.0], [26.6, 153.0], [26.7, 153.0], [26.8, 153.0], [26.9, 153.0], [27.0, 153.0], [27.1, 153.0], [27.2, 153.0], [27.3, 153.0], [27.4, 153.0], [27.5, 153.0], [27.6, 153.0], [27.7, 153.0], [27.8, 153.0], [27.9, 153.0], [28.0, 153.0], [28.1, 153.0], [28.2, 153.0], [28.3, 153.0], [28.4, 153.0], [28.5, 153.0], [28.6, 153.0], [28.7, 153.0], [28.8, 153.0], [28.9, 153.0], [29.0, 153.0], [29.1, 153.0], [29.2, 153.0], [29.3, 153.0], [29.4, 153.0], [29.5, 153.0], [29.6, 153.0], [29.7, 154.0], [29.8, 154.0], [29.9, 154.0], [30.0, 154.0], [30.1, 154.0], [30.2, 154.0], [30.3, 154.0], [30.4, 154.0], [30.5, 154.0], [30.6, 154.0], [30.7, 154.0], [30.8, 154.0], [30.9, 154.0], [31.0, 154.0], [31.1, 154.0], [31.2, 154.0], [31.3, 154.0], [31.4, 154.0], [31.5, 154.0], [31.6, 154.0], [31.7, 154.0], [31.8, 154.0], [31.9, 154.0], [32.0, 154.0], [32.1, 154.0], [32.2, 154.0], [32.3, 154.0], [32.4, 154.0], [32.5, 154.0], [32.6, 154.0], [32.7, 154.0], [32.8, 154.0], [32.9, 154.0], [33.0, 154.0], [33.1, 154.0], [33.2, 154.0], [33.3, 154.0], [33.4, 154.0], [33.5, 154.0], [33.6, 154.0], [33.7, 154.0], [33.8, 154.0], [33.9, 154.0], [34.0, 154.0], [34.1, 154.0], [34.2, 154.0], [34.3, 154.0], [34.4, 154.0], [34.5, 154.0], [34.6, 154.0], [34.7, 154.0], [34.8, 154.0], [34.9, 154.0], [35.0, 154.0], [35.1, 154.0], [35.2, 154.0], [35.3, 154.0], [35.4, 154.0], [35.5, 154.0], [35.6, 155.0], [35.7, 155.0], [35.8, 155.0], [35.9, 155.0], [36.0, 155.0], [36.1, 155.0], [36.2, 155.0], [36.3, 155.0], [36.4, 155.0], [36.5, 155.0], [36.6, 155.0], [36.7, 155.0], [36.8, 155.0], [36.9, 155.0], [37.0, 155.0], [37.1, 155.0], [37.2, 155.0], [37.3, 155.0], [37.4, 155.0], [37.5, 155.0], [37.6, 155.0], [37.7, 155.0], [37.8, 155.0], [37.9, 155.0], [38.0, 155.0], [38.1, 155.0], [38.2, 155.0], [38.3, 155.0], [38.4, 155.0], [38.5, 155.0], [38.6, 155.0], [38.7, 155.0], [38.8, 155.0], [38.9, 155.0], [39.0, 155.0], [39.1, 155.0], [39.2, 155.0], [39.3, 155.0], [39.4, 155.0], [39.5, 155.0], [39.6, 155.0], [39.7, 155.0], [39.8, 155.0], [39.9, 155.0], [40.0, 155.0], [40.1, 155.0], [40.2, 155.0], [40.3, 155.0], [40.4, 155.0], [40.5, 155.0], [40.6, 155.0], [40.7, 155.0], [40.8, 156.0], [40.9, 156.0], [41.0, 156.0], [41.1, 156.0], [41.2, 156.0], [41.3, 156.0], [41.4, 156.0], [41.5, 156.0], [41.6, 156.0], [41.7, 156.0], [41.8, 156.0], [41.9, 156.0], [42.0, 156.0], [42.1, 156.0], [42.2, 156.0], [42.3, 156.0], [42.4, 156.0], [42.5, 156.0], [42.6, 156.0], [42.7, 156.0], [42.8, 156.0], [42.9, 156.0], [43.0, 156.0], [43.1, 156.0], [43.2, 156.0], [43.3, 156.0], [43.4, 156.0], [43.5, 156.0], [43.6, 156.0], [43.7, 156.0], [43.8, 156.0], [43.9, 156.0], [44.0, 156.0], [44.1, 156.0], [44.2, 156.0], [44.3, 156.0], [44.4, 156.0], [44.5, 156.0], [44.6, 156.0], [44.7, 156.0], [44.8, 156.0], [44.9, 156.0], [45.0, 156.0], [45.1, 156.0], [45.2, 156.0], [45.3, 156.0], [45.4, 156.0], [45.5, 156.0], [45.6, 156.0], [45.7, 156.0], [45.8, 156.0], [45.9, 156.0], [46.0, 156.0], [46.1, 156.0], [46.2, 156.0], [46.3, 156.0], [46.4, 156.0], [46.5, 156.0], [46.6, 156.0], [46.7, 156.0], [46.8, 156.0], [46.9, 156.0], [47.0, 156.0], [47.1, 156.0], [47.2, 156.0], [47.3, 156.0], [47.4, 156.0], [47.5, 156.0], [47.6, 156.0], [47.7, 156.0], [47.8, 156.0], [47.9, 156.0], [48.0, 156.0], [48.1, 156.0], [48.2, 156.0], [48.3, 156.0], [48.4, 156.0], [48.5, 156.0], [48.6, 156.0], [48.7, 156.0], [48.8, 156.0], [48.9, 157.0], [49.0, 157.0], [49.1, 157.0], [49.2, 157.0], [49.3, 157.0], [49.4, 157.0], [49.5, 157.0], [49.6, 157.0], [49.7, 157.0], [49.8, 157.0], [49.9, 157.0], [50.0, 157.0], [50.1, 157.0], [50.2, 157.0], [50.3, 157.0], [50.4, 157.0], [50.5, 157.0], [50.6, 157.0], [50.7, 157.0], [50.8, 157.0], [50.9, 157.0], [51.0, 157.0], [51.1, 157.0], [51.2, 157.0], [51.3, 157.0], [51.4, 157.0], [51.5, 157.0], [51.6, 157.0], [51.7, 157.0], [51.8, 157.0], [51.9, 157.0], [52.0, 157.0], [52.1, 157.0], [52.2, 157.0], [52.3, 157.0], [52.4, 157.0], [52.5, 157.0], [52.6, 157.0], [52.7, 157.0], [52.8, 157.0], [52.9, 157.0], [53.0, 157.0], [53.1, 157.0], [53.2, 157.0], [53.3, 157.0], [53.4, 157.0], [53.5, 157.0], [53.6, 157.0], [53.7, 157.0], [53.8, 157.0], [53.9, 157.0], [54.0, 157.0], [54.1, 157.0], [54.2, 157.0], [54.3, 157.0], [54.4, 157.0], [54.5, 157.0], [54.6, 157.0], [54.7, 157.0], [54.8, 157.0], [54.9, 158.0], [55.0, 158.0], [55.1, 158.0], [55.2, 158.0], [55.3, 158.0], [55.4, 158.0], [55.5, 158.0], [55.6, 158.0], [55.7, 158.0], [55.8, 158.0], [55.9, 158.0], [56.0, 158.0], [56.1, 158.0], [56.2, 158.0], [56.3, 158.0], [56.4, 158.0], [56.5, 158.0], [56.6, 158.0], [56.7, 158.0], [56.8, 158.0], [56.9, 158.0], [57.0, 158.0], [57.1, 158.0], [57.2, 158.0], [57.3, 158.0], [57.4, 158.0], [57.5, 158.0], [57.6, 158.0], [57.7, 158.0], [57.8, 159.0], [57.9, 159.0], [58.0, 159.0], [58.1, 159.0], [58.2, 159.0], [58.3, 159.0], [58.4, 159.0], [58.5, 159.0], [58.6, 159.0], [58.7, 159.0], [58.8, 159.0], [58.9, 159.0], [59.0, 159.0], [59.1, 159.0], [59.2, 159.0], [59.3, 159.0], [59.4, 159.0], [59.5, 159.0], [59.6, 159.0], [59.7, 159.0], [59.8, 159.0], [59.9, 159.0], [60.0, 159.0], [60.1, 159.0], [60.2, 159.0], [60.3, 159.0], [60.4, 159.0], [60.5, 159.0], [60.6, 159.0], [60.7, 159.0], [60.8, 159.0], [60.9, 159.0], [61.0, 159.0], [61.1, 159.0], [61.2, 159.0], [61.3, 159.0], [61.4, 159.0], [61.5, 159.0], [61.6, 159.0], [61.7, 159.0], [61.8, 159.0], [61.9, 159.0], [62.0, 159.0], [62.1, 159.0], [62.2, 159.0], [62.3, 159.0], [62.4, 159.0], [62.5, 159.0], [62.6, 159.0], [62.7, 159.0], [62.8, 159.0], [62.9, 159.0], [63.0, 160.0], [63.1, 160.0], [63.2, 160.0], [63.3, 160.0], [63.4, 160.0], [63.5, 160.0], [63.6, 160.0], [63.7, 160.0], [63.8, 160.0], [63.9, 160.0], [64.0, 160.0], [64.1, 160.0], [64.2, 160.0], [64.3, 160.0], [64.4, 160.0], [64.5, 160.0], [64.6, 160.0], [64.7, 160.0], [64.8, 160.0], [64.9, 160.0], [65.0, 160.0], [65.1, 160.0], [65.2, 160.0], [65.3, 160.0], [65.4, 160.0], [65.5, 160.0], [65.6, 160.0], [65.7, 160.0], [65.8, 160.0], [65.9, 160.0], [66.0, 160.0], [66.1, 160.0], [66.2, 160.0], [66.3, 160.0], [66.4, 160.0], [66.5, 160.0], [66.6, 160.0], [66.7, 160.0], [66.8, 160.0], [66.9, 160.0], [67.0, 160.0], [67.1, 160.0], [67.2, 160.0], [67.3, 160.0], [67.4, 160.0], [67.5, 161.0], [67.6, 161.0], [67.7, 161.0], [67.8, 161.0], [67.9, 161.0], [68.0, 161.0], [68.1, 161.0], [68.2, 161.0], [68.3, 161.0], [68.4, 161.0], [68.5, 161.0], [68.6, 161.0], [68.7, 161.0], [68.8, 161.0], [68.9, 161.0], [69.0, 161.0], [69.1, 161.0], [69.2, 161.0], [69.3, 161.0], [69.4, 161.0], [69.5, 161.0], [69.6, 161.0], [69.7, 161.0], [69.8, 161.0], [69.9, 161.0], [70.0, 161.0], [70.1, 161.0], [70.2, 161.0], [70.3, 161.0], [70.4, 162.0], [70.5, 162.0], [70.6, 162.0], [70.7, 162.0], [70.8, 162.0], [70.9, 162.0], [71.0, 162.0], [71.1, 162.0], [71.2, 162.0], [71.3, 162.0], [71.4, 162.0], [71.5, 162.0], [71.6, 162.0], [71.7, 162.0], [71.8, 162.0], [71.9, 162.0], [72.0, 162.0], [72.1, 162.0], [72.2, 162.0], [72.3, 162.0], [72.4, 162.0], [72.5, 162.0], [72.6, 162.0], [72.7, 162.0], [72.8, 162.0], [72.9, 162.0], [73.0, 162.0], [73.1, 162.0], [73.2, 162.0], [73.3, 162.0], [73.4, 162.0], [73.5, 162.0], [73.6, 162.0], [73.7, 162.0], [73.8, 162.0], [73.9, 162.0], [74.0, 162.0], [74.1, 163.0], [74.2, 163.0], [74.3, 163.0], [74.4, 163.0], [74.5, 163.0], [74.6, 163.0], [74.7, 163.0], [74.8, 163.0], [74.9, 163.0], [75.0, 163.0], [75.1, 163.0], [75.2, 163.0], [75.3, 163.0], [75.4, 163.0], [75.5, 163.0], [75.6, 163.0], [75.7, 163.0], [75.8, 163.0], [75.9, 163.0], [76.0, 163.0], [76.1, 163.0], [76.2, 163.0], [76.3, 164.0], [76.4, 164.0], [76.5, 164.0], [76.6, 164.0], [76.7, 164.0], [76.8, 164.0], [76.9, 164.0], [77.0, 164.0], [77.1, 164.0], [77.2, 164.0], [77.3, 164.0], [77.4, 164.0], [77.5, 164.0], [77.6, 164.0], [77.7, 164.0], [77.8, 164.0], [77.9, 164.0], [78.0, 164.0], [78.1, 164.0], [78.2, 164.0], [78.3, 164.0], [78.4, 164.0], [78.5, 164.0], [78.6, 164.0], [78.7, 164.0], [78.8, 164.0], [78.9, 164.0], [79.0, 164.0], [79.1, 164.0], [79.2, 164.0], [79.3, 165.0], [79.4, 165.0], [79.5, 165.0], [79.6, 165.0], [79.7, 165.0], [79.8, 165.0], [79.9, 165.0], [80.0, 165.0], [80.1, 165.0], [80.2, 165.0], [80.3, 165.0], [80.4, 165.0], [80.5, 165.0], [80.6, 165.0], [80.7, 165.0], [80.8, 165.0], [80.9, 165.0], [81.0, 165.0], [81.1, 165.0], [81.2, 165.0], [81.3, 165.0], [81.4, 165.0], [81.5, 166.0], [81.6, 166.0], [81.7, 166.0], [81.8, 166.0], [81.9, 166.0], [82.0, 166.0], [82.1, 166.0], [82.2, 166.0], [82.3, 166.0], [82.4, 166.0], [82.5, 166.0], [82.6, 166.0], [82.7, 166.0], [82.8, 166.0], [82.9, 166.0], [83.0, 166.0], [83.1, 166.0], [83.2, 166.0], [83.3, 166.0], [83.4, 166.0], [83.5, 166.0], [83.6, 166.0], [83.7, 166.0], [83.8, 166.0], [83.9, 166.0], [84.0, 166.0], [84.1, 166.0], [84.2, 166.0], [84.3, 166.0], [84.4, 166.0], [84.5, 166.0], [84.6, 166.0], [84.7, 166.0], [84.8, 166.0], [84.9, 166.0], [85.0, 166.0], [85.1, 166.0], [85.2, 166.0], [85.3, 166.0], [85.4, 166.0], [85.5, 166.0], [85.6, 166.0], [85.7, 166.0], [85.8, 166.0], [85.9, 166.0], [86.0, 166.0], [86.1, 166.0], [86.2, 166.0], [86.3, 166.0], [86.4, 166.0], [86.5, 166.0], [86.6, 166.0], [86.7, 166.0], [86.8, 166.0], [86.9, 166.0], [87.0, 166.0], [87.1, 166.0], [87.2, 166.0], [87.3, 166.0], [87.4, 166.0], [87.5, 167.0], [87.6, 167.0], [87.7, 167.0], [87.8, 167.0], [87.9, 167.0], [88.0, 167.0], [88.1, 167.0], [88.2, 167.0], [88.3, 167.0], [88.4, 167.0], [88.5, 167.0], [88.6, 167.0], [88.7, 167.0], [88.8, 167.0], [88.9, 167.0], [89.0, 167.0], [89.1, 167.0], [89.2, 167.0], [89.3, 167.0], [89.4, 167.0], [89.5, 167.0], [89.6, 167.0], [89.7, 167.0], [89.8, 167.0], [89.9, 167.0], [90.0, 167.0], [90.1, 167.0], [90.2, 167.0], [90.3, 167.0], [90.4, 168.0], [90.5, 168.0], [90.6, 168.0], [90.7, 168.0], [90.8, 168.0], [90.9, 168.0], [91.0, 168.0], [91.1, 168.0], [91.2, 169.0], [91.3, 169.0], [91.4, 169.0], [91.5, 169.0], [91.6, 169.0], [91.7, 169.0], [91.8, 169.0], [91.9, 170.0], [92.0, 170.0], [92.1, 170.0], [92.2, 170.0], [92.3, 170.0], [92.4, 170.0], [92.5, 170.0], [92.6, 170.0], [92.7, 170.0], [92.8, 170.0], [92.9, 170.0], [93.0, 170.0], [93.1, 170.0], [93.2, 170.0], [93.3, 170.0], [93.4, 172.0], [93.5, 172.0], [93.6, 172.0], [93.7, 172.0], [93.8, 172.0], [93.9, 172.0], [94.0, 172.0], [94.1, 177.0], [94.2, 177.0], [94.3, 177.0], [94.4, 177.0], [94.5, 177.0], [94.6, 177.0], [94.7, 177.0], [94.8, 177.0], [94.9, 178.0], [95.0, 178.0], [95.1, 178.0], [95.2, 178.0], [95.3, 178.0], [95.4, 178.0], [95.5, 178.0], [95.6, 182.0], [95.7, 182.0], [95.8, 182.0], [95.9, 182.0], [96.0, 182.0], [96.1, 182.0], [96.2, 182.0], [96.3, 204.0], [96.4, 204.0], [96.5, 204.0], [96.6, 204.0], [96.7, 204.0], [96.8, 204.0], [96.9, 204.0], [97.0, 204.0], [97.1, 207.0], [97.2, 207.0], [97.3, 207.0], [97.4, 207.0], [97.5, 207.0], [97.6, 207.0], [97.7, 207.0], [97.8, 211.0], [97.9, 211.0], [98.0, 211.0], [98.1, 211.0], [98.2, 211.0], [98.3, 211.0], [98.4, 211.0], [98.5, 211.0], [98.6, 261.0], [98.7, 261.0], [98.8, 261.0], [98.9, 261.0], [99.0, 261.0], [99.1, 261.0], [99.2, 261.0], [99.3, 275.0], [99.4, 275.0], [99.5, 275.0], [99.6, 275.0], [99.7, 275.0], [99.8, 275.0], [99.9, 275.0], [100.0, 275.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 2.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 2.0], [4.9, 2.0], [5.0, 2.0], [5.1, 2.0], [5.2, 2.0], [5.3, 2.0], [5.4, 2.0], [5.5, 2.0], [5.6, 2.0], [5.7, 2.0], [5.8, 2.0], [5.9, 2.0], [6.0, 2.0], [6.1, 2.0], [6.2, 2.0], [6.3, 2.0], [6.4, 2.0], [6.5, 2.0], [6.6, 2.0], [6.7, 2.0], [6.8, 2.0], [6.9, 2.0], [7.0, 2.0], [7.1, 2.0], [7.2, 2.0], [7.3, 2.0], [7.4, 2.0], [7.5, 2.0], [7.6, 2.0], [7.7, 2.0], [7.8, 2.0], [7.9, 2.0], [8.0, 2.0], [8.1, 2.0], [8.2, 2.0], [8.3, 2.0], [8.4, 2.0], [8.5, 2.0], [8.6, 2.0], [8.7, 2.0], [8.8, 2.0], [8.9, 2.0], [9.0, 2.0], [9.1, 2.0], [9.2, 2.0], [9.3, 2.0], [9.4, 2.0], [9.5, 2.0], [9.6, 2.0], [9.7, 2.0], [9.8, 2.0], [9.9, 2.0], [10.0, 2.0], [10.1, 2.0], [10.2, 2.0], [10.3, 2.0], [10.4, 2.0], [10.5, 2.0], [10.6, 2.0], [10.7, 2.0], [10.8, 2.0], [10.9, 2.0], [11.0, 2.0], [11.1, 2.0], [11.2, 2.0], [11.3, 2.0], [11.4, 2.0], [11.5, 2.0], [11.6, 3.0], [11.7, 3.0], [11.8, 3.0], [11.9, 3.0], [12.0, 3.0], [12.1, 3.0], [12.2, 3.0], [12.3, 3.0], [12.4, 3.0], [12.5, 3.0], [12.6, 3.0], [12.7, 3.0], [12.8, 3.0], [12.9, 3.0], [13.0, 3.0], [13.1, 3.0], [13.2, 3.0], [13.3, 3.0], [13.4, 3.0], [13.5, 3.0], [13.6, 3.0], [13.7, 3.0], [13.8, 3.0], [13.9, 3.0], [14.0, 3.0], [14.1, 3.0], [14.2, 3.0], [14.3, 3.0], [14.4, 3.0], [14.5, 3.0], [14.6, 3.0], [14.7, 3.0], [14.8, 4.0], [14.9, 4.0], [15.0, 4.0], [15.1, 5.0], [15.2, 15.0], [15.3, 17.0], [15.4, 18.0], [15.5, 19.0], [15.6, 20.0], [15.7, 20.0], [15.8, 21.0], [15.9, 21.0], [16.0, 22.0], [16.1, 22.0], [16.2, 23.0], [16.3, 23.0], [16.4, 24.0], [16.5, 24.0], [16.6, 24.0], [16.7, 25.0], [16.8, 25.0], [16.9, 25.0], [17.0, 25.0], [17.1, 26.0], [17.2, 26.0], [17.3, 26.0], [17.4, 26.0], [17.5, 27.0], [17.6, 27.0], [17.7, 27.0], [17.8, 27.0], [17.9, 28.0], [18.0, 28.0], [18.1, 28.0], [18.2, 29.0], [18.3, 29.0], [18.4, 30.0], [18.5, 30.0], [18.6, 30.0], [18.7, 31.0], [18.8, 32.0], [18.9, 32.0], [19.0, 33.0], [19.1, 33.0], [19.2, 34.0], [19.3, 34.0], [19.4, 35.0], [19.5, 35.0], [19.6, 36.0], [19.7, 36.0], [19.8, 37.0], [19.9, 38.0], [20.0, 38.0], [20.1, 40.0], [20.2, 41.0], [20.3, 42.0], [20.4, 42.0], [20.5, 43.0], [20.6, 44.0], [20.7, 45.0], [20.8, 46.0], [20.9, 48.0], [21.0, 49.0], [21.1, 51.0], [21.2, 53.0], [21.3, 55.0], [21.4, 57.0], [21.5, 61.0], [21.6, 63.0], [21.7, 65.0], [21.8, 67.0], [21.9, 70.0], [22.0, 73.0], [22.1, 77.0], [22.2, 78.0], [22.3, 81.0], [22.4, 85.0], [22.5, 89.0], [22.6, 92.0], [22.7, 98.0], [22.8, 105.0], [22.9, 109.0], [23.0, 113.0], [23.1, 119.0], [23.2, 128.0], [23.3, 136.0], [23.4, 142.0], [23.5, 148.0], [23.6, 157.0], [23.7, 165.0], [23.8, 174.0], [23.9, 182.0], [24.0, 189.0], [24.1, 195.0], [24.2, 202.0], [24.3, 214.0], [24.4, 223.0], [24.5, 229.0], [24.6, 237.0], [24.7, 245.0], [24.8, 254.0], [24.9, 264.0], [25.0, 271.0], [25.1, 277.0], [25.2, 283.0], [25.3, 289.0], [25.4, 299.0], [25.5, 307.0], [25.6, 317.0], [25.7, 329.0], [25.8, 334.0], [25.9, 346.0], [26.0, 351.0], [26.1, 359.0], [26.2, 371.0], [26.3, 378.0], [26.4, 383.0], [26.5, 388.0], [26.6, 395.0], [26.7, 403.0], [26.8, 409.0], [26.9, 417.0], [27.0, 426.0], [27.1, 437.0], [27.2, 450.0], [27.3, 456.0], [27.4, 462.0], [27.5, 468.0], [27.6, 475.0], [27.7, 479.0], [27.8, 486.0], [27.9, 489.0], [28.0, 495.0], [28.1, 500.0], [28.2, 510.0], [28.3, 514.0], [28.4, 519.0], [28.5, 523.0], [28.6, 528.0], [28.7, 536.0], [28.8, 541.0], [28.9, 544.0], [29.0, 548.0], [29.1, 552.0], [29.2, 556.0], [29.3, 560.0], [29.4, 564.0], [29.5, 567.0], [29.6, 571.0], [29.7, 574.0], [29.8, 579.0], [29.9, 586.0], [30.0, 590.0], [30.1, 594.0], [30.2, 597.0], [30.3, 600.0], [30.4, 604.0], [30.5, 609.0], [30.6, 614.0], [30.7, 619.0], [30.8, 625.0], [30.9, 630.0], [31.0, 634.0], [31.1, 639.0], [31.2, 644.0], [31.3, 647.0], [31.4, 650.0], [31.5, 655.0], [31.6, 659.0], [31.7, 662.0], [31.8, 666.0], [31.9, 671.0], [32.0, 674.0], [32.1, 678.0], [32.2, 683.0], [32.3, 688.0], [32.4, 693.0], [32.5, 697.0], [32.6, 702.0], [32.7, 708.0], [32.8, 711.0], [32.9, 715.0], [33.0, 718.0], [33.1, 723.0], [33.2, 726.0], [33.3, 730.0], [33.4, 736.0], [33.5, 740.0], [33.6, 743.0], [33.7, 748.0], [33.8, 753.0], [33.9, 756.0], [34.0, 759.0], [34.1, 760.0], [34.2, 763.0], [34.3, 767.0], [34.4, 771.0], [34.5, 774.0], [34.6, 777.0], [34.7, 781.0], [34.8, 786.0], [34.9, 789.0], [35.0, 793.0], [35.1, 797.0], [35.2, 801.0], [35.3, 805.0], [35.4, 807.0], [35.5, 811.0], [35.6, 813.0], [35.7, 815.0], [35.8, 818.0], [35.9, 824.0], [36.0, 829.0], [36.1, 831.0], [36.2, 835.0], [36.3, 838.0], [36.4, 842.0], [36.5, 846.0], [36.6, 849.0], [36.7, 853.0], [36.8, 855.0], [36.9, 859.0], [37.0, 862.0], [37.1, 865.0], [37.2, 868.0], [37.3, 872.0], [37.4, 875.0], [37.5, 878.0], [37.6, 880.0], [37.7, 883.0], [37.8, 887.0], [37.9, 891.0], [38.0, 897.0], [38.1, 900.0], [38.2, 905.0], [38.3, 910.0], [38.4, 913.0], [38.5, 917.0], [38.6, 918.0], [38.7, 922.0], [38.8, 925.0], [38.9, 928.0], [39.0, 933.0], [39.1, 936.0], [39.2, 939.0], [39.3, 941.0], [39.4, 944.0], [39.5, 946.0], [39.6, 948.0], [39.7, 950.0], [39.8, 953.0], [39.9, 956.0], [40.0, 960.0], [40.1, 963.0], [40.2, 967.0], [40.3, 970.0], [40.4, 974.0], [40.5, 978.0], [40.6, 982.0], [40.7, 985.0], [40.8, 988.0], [40.9, 990.0], [41.0, 993.0], [41.1, 995.0], [41.2, 998.0], [41.3, 1001.0], [41.4, 1004.0], [41.5, 1006.0], [41.6, 1009.0], [41.7, 1012.0], [41.8, 1015.0], [41.9, 1020.0], [42.0, 1023.0], [42.1, 1025.0], [42.2, 1028.0], [42.3, 1031.0], [42.4, 1033.0], [42.5, 1036.0], [42.6, 1039.0], [42.7, 1042.0], [42.8, 1044.0], [42.9, 1047.0], [43.0, 1051.0], [43.1, 1054.0], [43.2, 1056.0], [43.3, 1060.0], [43.4, 1062.0], [43.5, 1065.0], [43.6, 1068.0], [43.7, 1071.0], [43.8, 1074.0], [43.9, 1076.0], [44.0, 1078.0], [44.1, 1081.0], [44.2, 1084.0], [44.3, 1086.0], [44.4, 1089.0], [44.5, 1093.0], [44.6, 1096.0], [44.7, 1099.0], [44.8, 1101.0], [44.9, 1105.0], [45.0, 1107.0], [45.1, 1110.0], [45.2, 1114.0], [45.3, 1118.0], [45.4, 1122.0], [45.5, 1124.0], [45.6, 1130.0], [45.7, 1133.0], [45.8, 1135.0], [45.9, 1138.0], [46.0, 1140.0], [46.1, 1142.0], [46.2, 1146.0], [46.3, 1149.0], [46.4, 1151.0], [46.5, 1154.0], [46.6, 1157.0], [46.7, 1160.0], [46.8, 1162.0], [46.9, 1165.0], [47.0, 1168.0], [47.1, 1171.0], [47.2, 1174.0], [47.3, 1177.0], [47.4, 1179.0], [47.5, 1183.0], [47.6, 1185.0], [47.7, 1189.0], [47.8, 1191.0], [47.9, 1195.0], [48.0, 1197.0], [48.1, 1199.0], [48.2, 1204.0], [48.3, 1207.0], [48.4, 1211.0], [48.5, 1213.0], [48.6, 1215.0], [48.7, 1217.0], [48.8, 1219.0], [48.9, 1223.0], [49.0, 1225.0], [49.1, 1228.0], [49.2, 1230.0], [49.3, 1234.0], [49.4, 1236.0], [49.5, 1238.0], [49.6, 1241.0], [49.7, 1243.0], [49.8, 1246.0], [49.9, 1249.0], [50.0, 1252.0], [50.1, 1254.0], [50.2, 1255.0], [50.3, 1259.0], [50.4, 1262.0], [50.5, 1265.0], [50.6, 1267.0], [50.7, 1270.0], [50.8, 1272.0], [50.9, 1276.0], [51.0, 1281.0], [51.1, 1283.0], [51.2, 1286.0], [51.3, 1288.0], [51.4, 1292.0], [51.5, 1295.0], [51.6, 1299.0], [51.7, 1301.0], [51.8, 1304.0], [51.9, 1306.0], [52.0, 1308.0], [52.1, 1311.0], [52.2, 1313.0], [52.3, 1317.0], [52.4, 1320.0], [52.5, 1324.0], [52.6, 1325.0], [52.7, 1327.0], [52.8, 1331.0], [52.9, 1334.0], [53.0, 1336.0], [53.1, 1339.0], [53.2, 1341.0], [53.3, 1343.0], [53.4, 1347.0], [53.5, 1350.0], [53.6, 1355.0], [53.7, 1358.0], [53.8, 1361.0], [53.9, 1364.0], [54.0, 1367.0], [54.1, 1369.0], [54.2, 1372.0], [54.3, 1376.0], [54.4, 1379.0], [54.5, 1382.0], [54.6, 1384.0], [54.7, 1388.0], [54.8, 1390.0], [54.9, 1393.0], [55.0, 1397.0], [55.1, 1399.0], [55.2, 1402.0], [55.3, 1405.0], [55.4, 1408.0], [55.5, 1411.0], [55.6, 1415.0], [55.7, 1419.0], [55.8, 1422.0], [55.9, 1425.0], [56.0, 1429.0], [56.1, 1432.0], [56.2, 1436.0], [56.3, 1439.0], [56.4, 1443.0], [56.5, 1445.0], [56.6, 1448.0], [56.7, 1453.0], [56.8, 1455.0], [56.9, 1460.0], [57.0, 1463.0], [57.1, 1466.0], [57.2, 1469.0], [57.3, 1472.0], [57.4, 1477.0], [57.5, 1481.0], [57.6, 1484.0], [57.7, 1487.0], [57.8, 1489.0], [57.9, 1496.0], [58.0, 1500.0], [58.1, 1506.0], [58.2, 1508.0], [58.3, 1511.0], [58.4, 1513.0], [58.5, 1517.0], [58.6, 1521.0], [58.7, 1525.0], [58.8, 1528.0], [58.9, 1531.0], [59.0, 1534.0], [59.1, 1537.0], [59.2, 1540.0], [59.3, 1542.0], [59.4, 1545.0], [59.5, 1547.0], [59.6, 1550.0], [59.7, 1554.0], [59.8, 1559.0], [59.9, 1563.0], [60.0, 1565.0], [60.1, 1568.0], [60.2, 1570.0], [60.3, 1575.0], [60.4, 1577.0], [60.5, 1580.0], [60.6, 1584.0], [60.7, 1588.0], [60.8, 1592.0], [60.9, 1596.0], [61.0, 1598.0], [61.1, 1602.0], [61.2, 1604.0], [61.3, 1607.0], [61.4, 1610.0], [61.5, 1614.0], [61.6, 1616.0], [61.7, 1619.0], [61.8, 1623.0], [61.9, 1626.0], [62.0, 1629.0], [62.1, 1632.0], [62.2, 1634.0], [62.3, 1638.0], [62.4, 1640.0], [62.5, 1644.0], [62.6, 1646.0], [62.7, 1649.0], [62.8, 1653.0], [62.9, 1658.0], [63.0, 1662.0], [63.1, 1667.0], [63.2, 1671.0], [63.3, 1675.0], [63.4, 1677.0], [63.5, 1680.0], [63.6, 1683.0], [63.7, 1686.0], [63.8, 1690.0], [63.9, 1692.0], [64.0, 1694.0], [64.1, 1698.0], [64.2, 1700.0], [64.3, 1703.0], [64.4, 1706.0], [64.5, 1710.0], [64.6, 1713.0], [64.7, 1717.0], [64.8, 1719.0], [64.9, 1725.0], [65.0, 1727.0], [65.1, 1730.0], [65.2, 1732.0], [65.3, 1737.0], [65.4, 1739.0], [65.5, 1742.0], [65.6, 1745.0], [65.7, 1751.0], [65.8, 1753.0], [65.9, 1759.0], [66.0, 1762.0], [66.1, 1765.0], [66.2, 1769.0], [66.3, 1773.0], [66.4, 1778.0], [66.5, 1781.0], [66.6, 1786.0], [66.7, 1790.0], [66.8, 1793.0], [66.9, 1798.0], [67.0, 1802.0], [67.1, 1805.0], [67.2, 1809.0], [67.3, 1813.0], [67.4, 1816.0], [67.5, 1820.0], [67.6, 1823.0], [67.7, 1828.0], [67.8, 1830.0], [67.9, 1835.0], [68.0, 1840.0], [68.1, 1842.0], [68.2, 1847.0], [68.3, 1851.0], [68.4, 1855.0], [68.5, 1858.0], [68.6, 1861.0], [68.7, 1865.0], [68.8, 1868.0], [68.9, 1872.0], [69.0, 1875.0], [69.1, 1882.0], [69.2, 1887.0], [69.3, 1892.0], [69.4, 1895.0], [69.5, 1901.0], [69.6, 1905.0], [69.7, 1908.0], [69.8, 1912.0], [69.9, 1916.0], [70.0, 1921.0], [70.1, 1924.0], [70.2, 1928.0], [70.3, 1933.0], [70.4, 1936.0], [70.5, 1941.0], [70.6, 1946.0], [70.7, 1951.0], [70.8, 1954.0], [70.9, 1959.0], [71.0, 1963.0], [71.1, 1965.0], [71.2, 1969.0], [71.3, 1977.0], [71.4, 1982.0], [71.5, 1986.0], [71.6, 1994.0], [71.7, 1998.0], [71.8, 2002.0], [71.9, 2005.0], [72.0, 2009.0], [72.1, 2012.0], [72.2, 2018.0], [72.3, 2022.0], [72.4, 2025.0], [72.5, 2030.0], [72.6, 2034.0], [72.7, 2038.0], [72.8, 2042.0], [72.9, 2045.0], [73.0, 2049.0], [73.1, 2051.0], [73.2, 2056.0], [73.3, 2062.0], [73.4, 2068.0], [73.5, 2072.0], [73.6, 2078.0], [73.7, 2081.0], [73.8, 2088.0], [73.9, 2093.0], [74.0, 2098.0], [74.1, 2101.0], [74.2, 2104.0], [74.3, 2110.0], [74.4, 2114.0], [74.5, 2117.0], [74.6, 2122.0], [74.7, 2126.0], [74.8, 2130.0], [74.9, 2135.0], [75.0, 2138.0], [75.1, 2143.0], [75.2, 2147.0], [75.3, 2151.0], [75.4, 2154.0], [75.5, 2156.0], [75.6, 2161.0], [75.7, 2168.0], [75.8, 2171.0], [75.9, 2176.0], [76.0, 2181.0], [76.1, 2185.0], [76.2, 2189.0], [76.3, 2192.0], [76.4, 2195.0], [76.5, 2201.0], [76.6, 2206.0], [76.7, 2211.0], [76.8, 2216.0], [76.9, 2223.0], [77.0, 2228.0], [77.1, 2233.0], [77.2, 2236.0], [77.3, 2242.0], [77.4, 2249.0], [77.5, 2251.0], [77.6, 2255.0], [77.7, 2259.0], [77.8, 2263.0], [77.9, 2266.0], [78.0, 2272.0], [78.1, 2275.0], [78.2, 2279.0], [78.3, 2283.0], [78.4, 2287.0], [78.5, 2293.0], [78.6, 2298.0], [78.7, 2302.0], [78.8, 2306.0], [78.9, 2312.0], [79.0, 2315.0], [79.1, 2322.0], [79.2, 2328.0], [79.3, 2333.0], [79.4, 2338.0], [79.5, 2342.0], [79.6, 2347.0], [79.7, 2352.0], [79.8, 2357.0], [79.9, 2363.0], [80.0, 2368.0], [80.1, 2371.0], [80.2, 2378.0], [80.3, 2385.0], [80.4, 2387.0], [80.5, 2392.0], [80.6, 2396.0], [80.7, 2402.0], [80.8, 2407.0], [80.9, 2412.0], [81.0, 2418.0], [81.1, 2422.0], [81.2, 2427.0], [81.3, 2432.0], [81.4, 2435.0], [81.5, 2440.0], [81.6, 2447.0], [81.7, 2450.0], [81.8, 2455.0], [81.9, 2463.0], [82.0, 2471.0], [82.1, 2476.0], [82.2, 2480.0], [82.3, 2487.0], [82.4, 2492.0], [82.5, 2495.0], [82.6, 2503.0], [82.7, 2509.0], [82.8, 2514.0], [82.9, 2521.0], [83.0, 2528.0], [83.1, 2535.0], [83.2, 2539.0], [83.3, 2547.0], [83.4, 2552.0], [83.5, 2558.0], [83.6, 2566.0], [83.7, 2573.0], [83.8, 2577.0], [83.9, 2582.0], [84.0, 2587.0], [84.1, 2592.0], [84.2, 2596.0], [84.3, 2605.0], [84.4, 2608.0], [84.5, 2616.0], [84.6, 2621.0], [84.7, 2625.0], [84.8, 2633.0], [84.9, 2640.0], [85.0, 2645.0], [85.1, 2654.0], [85.2, 2661.0], [85.3, 2668.0], [85.4, 2674.0], [85.5, 2679.0], [85.6, 2683.0], [85.7, 2690.0], [85.8, 2695.0], [85.9, 2700.0], [86.0, 2712.0], [86.1, 2717.0], [86.2, 2726.0], [86.3, 2733.0], [86.4, 2738.0], [86.5, 2745.0], [86.6, 2752.0], [86.7, 2759.0], [86.8, 2763.0], [86.9, 2771.0], [87.0, 2784.0], [87.1, 2791.0], [87.2, 2800.0], [87.3, 2808.0], [87.4, 2814.0], [87.5, 2821.0], [87.6, 2832.0], [87.7, 2840.0], [87.8, 2847.0], [87.9, 2852.0], [88.0, 2860.0], [88.1, 2869.0], [88.2, 2876.0], [88.3, 2890.0], [88.4, 2900.0], [88.5, 2907.0], [88.6, 2912.0], [88.7, 2918.0], [88.8, 2926.0], [88.9, 2932.0], [89.0, 2941.0], [89.1, 2952.0], [89.2, 2959.0], [89.3, 2966.0], [89.4, 2973.0], [89.5, 2982.0], [89.6, 2991.0], [89.7, 2997.0], [89.8, 3007.0], [89.9, 3017.0], [90.0, 3025.0], [90.1, 3032.0], [90.2, 3044.0], [90.3, 3053.0], [90.4, 3060.0], [90.5, 3068.0], [90.6, 3076.0], [90.7, 3085.0], [90.8, 3091.0], [90.9, 3100.0], [91.0, 3111.0], [91.1, 3116.0], [91.2, 3123.0], [91.3, 3133.0], [91.4, 3141.0], [91.5, 3152.0], [91.6, 3162.0], [91.7, 3172.0], [91.8, 3181.0], [91.9, 3192.0], [92.0, 3203.0], [92.1, 3212.0], [92.2, 3224.0], [92.3, 3238.0], [92.4, 3250.0], [92.5, 3270.0], [92.6, 3282.0], [92.7, 3298.0], [92.8, 3317.0], [92.9, 3330.0], [93.0, 3343.0], [93.1, 3352.0], [93.2, 3368.0], [93.3, 3383.0], [93.4, 3391.0], [93.5, 3408.0], [93.6, 3416.0], [93.7, 3429.0], [93.8, 3441.0], [93.9, 3452.0], [94.0, 3472.0], [94.1, 3489.0], [94.2, 3504.0], [94.3, 3529.0], [94.4, 3539.0], [94.5, 3555.0], [94.6, 3575.0], [94.7, 3590.0], [94.8, 3606.0], [94.9, 3621.0], [95.0, 3652.0], [95.1, 3662.0], [95.2, 3690.0], [95.3, 3708.0], [95.4, 3724.0], [95.5, 3744.0], [95.6, 3760.0], [95.7, 3784.0], [95.8, 3808.0], [95.9, 3837.0], [96.0, 3853.0], [96.1, 3869.0], [96.2, 3890.0], [96.3, 3911.0], [96.4, 3939.0], [96.5, 3957.0], [96.6, 3981.0], [96.7, 4005.0], [96.8, 4034.0], [96.9, 4060.0], [97.0, 4077.0], [97.1, 4097.0], [97.2, 4118.0], [97.3, 4156.0], [97.4, 4202.0], [97.5, 4218.0], [97.6, 4251.0], [97.7, 4282.0], [97.8, 4316.0], [97.9, 4387.0], [98.0, 4432.0], [98.1, 4474.0], [98.2, 4534.0], [98.3, 4601.0], [98.4, 4641.0], [98.5, 4709.0], [98.6, 4809.0], [98.7, 4900.0], [98.8, 4975.0], [98.9, 5055.0], [99.0, 5120.0], [99.1, 5259.0], [99.2, 5363.0], [99.3, 5448.0], [99.4, 5586.0], [99.5, 5717.0], [99.6, 5843.0], [99.7, 6012.0], [99.8, 6148.0], [99.9, 6307.0], [100.0, 7357.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3126.0, "series": [{"data": [[0.0, 3126.0], [600.0, 340.0], [700.0, 341.0], [800.0, 387.0], [900.0, 431.0], [1000.0, 437.0], [1100.0, 465.0], [1200.0, 445.0], [1300.0, 429.0], [1400.0, 441.0], [1500.0, 403.0], [1600.0, 408.0], [1700.0, 374.0], [1800.0, 355.0], [1900.0, 321.0], [2000.0, 312.0], [2100.0, 314.0], [2200.0, 272.0], [2300.0, 272.0], [2400.0, 257.0], [2500.0, 257.0], [2600.0, 246.0], [2800.0, 187.0], [2700.0, 187.0], [2900.0, 162.0], [3000.0, 160.0], [3100.0, 138.0], [3200.0, 108.0], [3300.0, 116.0], [3400.0, 94.0], [3500.0, 88.0], [3600.0, 80.0], [3700.0, 64.0], [3800.0, 62.0], [3900.0, 61.0], [4000.0, 35.0], [4200.0, 29.0], [4100.0, 27.0], [4300.0, 25.0], [4500.0, 29.0], [4400.0, 27.0], [4600.0, 20.0], [4700.0, 22.0], [4800.0, 19.0], [5000.0, 13.0], [5100.0, 17.0], [4900.0, 21.0], [5200.0, 12.0], [5300.0, 14.0], [5600.0, 11.0], [5500.0, 8.0], [5400.0, 12.0], [5700.0, 10.0], [5800.0, 5.0], [6100.0, 2.0], [5900.0, 5.0], [6000.0, 5.0], [6200.0, 1.0], [6300.0, 1.0], [6600.0, 3.0], [6400.0, 2.0], [6800.0, 1.0], [7200.0, 1.0], [100.0, 162.0], [200.0, 147.0], [300.0, 159.0], [400.0, 211.0], [500.0, 304.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[200.0, 5.0], [100.0, 130.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 3068.0], [600.0, 307.0], [700.0, 352.0], [800.0, 394.0], [900.0, 428.0], [1000.0, 468.0], [1100.0, 458.0], [1200.0, 473.0], [1300.0, 472.0], [1400.0, 387.0], [1500.0, 415.0], [1600.0, 417.0], [1700.0, 376.0], [1800.0, 343.0], [1900.0, 308.0], [2000.0, 310.0], [2100.0, 327.0], [2200.0, 293.0], [2300.0, 274.0], [2400.0, 257.0], [2500.0, 229.0], [2600.0, 218.0], [2700.0, 176.0], [2800.0, 162.0], [2900.0, 180.0], [3000.0, 158.0], [3100.0, 147.0], [3200.0, 98.0], [3300.0, 101.0], [3400.0, 96.0], [3500.0, 77.0], [3600.0, 70.0], [3700.0, 69.0], [3800.0, 64.0], [3900.0, 59.0], [4000.0, 62.0], [4200.0, 50.0], [4100.0, 34.0], [4300.0, 25.0], [4400.0, 27.0], [4600.0, 24.0], [4500.0, 21.0], [4700.0, 13.0], [4800.0, 17.0], [4900.0, 20.0], [5000.0, 16.0], [5100.0, 14.0], [5200.0, 14.0], [5300.0, 9.0], [5400.0, 16.0], [5500.0, 7.0], [5600.0, 11.0], [5800.0, 9.0], [5700.0, 10.0], [5900.0, 6.0], [6000.0, 13.0], [6100.0, 7.0], [6200.0, 10.0], [6300.0, 7.0], [6400.0, 2.0], [6600.0, 1.0], [6500.0, 1.0], [6900.0, 1.0], [7100.0, 1.0], [7300.0, 1.0], [100.0, 194.0], [200.0, 173.0], [300.0, 164.0], [400.0, 192.0], [500.0, 297.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3516.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 11183.0, "series": [{"data": [[0.0, 3516.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7925.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 11183.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4511.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.125, "minX": 1.5876801E12, "maxY": 135.0, "series": [{"data": [[1.5876807E12, 135.0], [1.58768034E12, 135.0], [1.58768064E12, 135.0], [1.58768076E12, 131.94775619557964], [1.58768046E12, 135.0], [1.5876801E12, 4.125], [1.5876804E12, 135.0], [1.58768022E12, 135.0], [1.58768052E12, 135.0], [1.58768016E12, 84.52217294900221], [1.58768082E12, 77.98977355734102], [1.58768028E12, 135.0], [1.58768058E12, 135.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768082E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.0, "maxY": 3374.6666666666665, "series": [{"data": [[3.0, 31.0], [6.0, 44.0], [7.0, 219.0], [9.0, 40.0], [10.0, 73.0], [11.0, 63.2], [12.0, 81.0], [13.0, 34.8], [14.0, 58.0], [15.0, 50.0], [16.0, 120.0], [17.0, 46.5], [18.0, 61.666666666666664], [19.0, 30.5], [20.0, 42.5], [21.0, 158.5], [22.0, 53.5], [23.0, 42.25000000000001], [24.0, 55.333333333333336], [25.0, 34.4], [27.0, 68.8], [28.0, 41.333333333333336], [29.0, 63.2], [30.0, 31.8], [31.0, 36.5], [32.0, 38.875], [33.0, 36.5], [34.0, 56.0], [35.0, 33.0], [36.0, 37.00000000000001], [37.0, 31.0], [38.0, 37.6], [39.0, 75.33333333333333], [40.0, 28.2], [41.0, 41.0], [42.0, 66.8], [43.0, 54.583333333333336], [44.0, 59.30769230769231], [45.0, 52.0], [46.0, 55.909090909090914], [47.0, 68.11111111111111], [48.0, 44.2], [49.0, 29.0], [50.0, 50.846153846153854], [51.0, 58.142857142857146], [52.0, 48.266666666666666], [53.0, 87.50000000000001], [54.0, 29.0], [55.0, 40.0], [56.0, 52.6], [57.0, 40.99999999999999], [58.0, 48.5], [59.0, 25.4], [60.0, 38.5], [61.0, 60.93103448275862], [62.0, 71.73913043478261], [63.0, 45.33333333333333], [64.0, 81.69999999999999], [65.0, 65.54545454545455], [66.0, 150.58823529411765], [67.0, 121.33333333333334], [68.0, 80.5], [69.0, 110.87500000000001], [70.0, 61.75], [71.0, 35.142857142857146], [72.0, 125.81818181818181], [73.0, 68.46153846153847], [74.0, 71.16666666666667], [75.0, 134.6071428571429], [76.0, 179.93939393939394], [77.0, 184.92857142857142], [78.0, 75.72727272727272], [79.0, 279.3333333333333], [80.0, 322.90000000000003], [81.0, 523.25], [82.0, 612.5263157894735], [83.0, 1002.0303030303031], [84.0, 1185.607142857143], [85.0, 456.57142857142856], [86.0, 1416.342105263158], [87.0, 694.7142857142858], [88.0, 3374.6666666666665], [89.0, 2313.875], [90.0, 626.4], [91.0, 801.0], [92.0, 966.0], [93.0, 173.3571428571429], [94.0, 132.67647058823522], [95.0, 782.9333333333334], [96.0, 497.1333333333334], [97.0, 753.3333333333334], [98.0, 326.62499999999994], [99.0, 474.62500000000006], [100.0, 292.19999999999993], [101.0, 254.44444444444446], [102.0, 145.3023255813953], [103.0, 507.0], [104.0, 250.04761904761915], [105.0, 549.3999999999999], [106.0, 49.125], [107.0, 315.8888888888888], [108.0, 1152.375], [109.0, 789.6875000000002], [110.0, 523.8571428571429], [111.0, 1410.1666666666667], [112.0, 497.8181818181818], [113.0, 406.6666666666666], [114.0, 979.3181818181821], [115.0, 315.03333333333336], [116.0, 305.71153846153834], [117.0, 181.0909090909091], [118.0, 688.9444444444445], [119.0, 904.5], [120.0, 584.8333333333333], [121.0, 165.1509433962264], [122.0, 219.08333333333331], [123.0, 543.6666666666666], [124.0, 208.7560975609756], [125.0, 344.8070175438597], [126.0, 888.0882352941179], [127.0, 1265.478260869565], [128.0, 1428.666666666667], [129.0, 1363.857142857143], [130.0, 1317.1999999999996], [131.0, 1503.6666666666667], [132.0, 1674.2407407407406], [133.0, 1612.285714285714], [134.0, 1168.4629629629626], [135.0, 1539.4698607627756], [1.0, 33.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[128.70674074074032, 1391.6769629629605]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 156.0], [3.0, 177.0], [4.0, 153.0], [5.0, 155.0], [6.0, 166.0], [7.0, 151.0], [8.0, 182.0], [9.0, 167.0], [10.0, 261.0], [11.0, 275.0], [12.0, 156.0], [13.0, 155.0], [14.0, 155.0], [15.0, 157.0], [16.0, 148.0], [17.0, 166.0], [18.0, 165.0], [19.0, 156.0], [20.0, 150.0], [21.0, 152.0], [22.0, 157.0], [23.0, 156.0], [24.0, 167.0], [25.0, 154.0], [26.0, 156.0], [27.0, 156.0], [28.0, 158.0], [29.0, 150.0], [30.0, 160.0], [31.0, 163.0], [32.0, 162.0], [33.0, 151.0], [34.0, 154.0], [35.0, 158.0], [36.0, 151.0], [37.0, 146.0], [38.0, 166.0], [39.0, 161.0], [40.0, 150.0], [41.0, 162.0], [42.0, 165.0], [43.0, 148.0], [44.0, 162.0], [45.0, 159.0], [46.0, 157.0], [47.0, 161.0], [48.0, 148.0], [49.0, 153.0], [50.0, 151.0], [51.0, 145.0], [52.0, 166.0], [53.0, 154.0], [54.0, 154.0], [55.0, 145.0], [56.0, 149.0], [57.0, 160.0], [58.0, 166.0], [59.0, 150.0], [60.0, 156.0], [61.0, 166.0], [62.0, 153.0], [63.0, 167.0], [64.0, 148.0], [65.0, 164.0], [66.0, 146.0], [67.0, 172.0], [68.0, 153.0], [69.0, 149.0], [70.0, 156.0], [71.0, 160.0], [72.0, 155.0], [73.0, 152.0], [74.0, 148.0], [75.0, 151.0], [76.0, 207.0], [77.0, 158.0], [78.0, 164.0], [79.0, 165.0], [80.0, 147.0], [81.0, 150.0], [82.0, 164.0], [83.0, 178.0], [84.0, 154.0], [85.0, 159.0], [86.0, 148.0], [87.0, 155.0], [88.0, 154.0], [89.0, 148.0], [90.0, 155.0], [91.0, 157.0], [92.0, 169.0], [93.0, 163.0], [94.0, 149.0], [95.0, 150.0], [96.0, 162.0], [97.0, 161.0], [98.0, 170.0], [99.0, 159.0], [100.0, 150.0], [101.0, 154.0], [102.0, 159.0], [103.0, 155.0], [104.0, 148.0], [105.0, 158.0], [106.0, 167.0], [107.0, 150.0], [108.0, 160.0], [109.0, 156.0], [110.0, 156.0], [111.0, 163.0], [112.0, 204.0], [113.0, 146.0], [114.0, 168.0], [115.0, 159.0], [116.0, 170.0], [117.0, 159.0], [118.0, 150.0], [119.0, 147.0], [120.0, 160.0], [121.0, 154.0], [122.0, 147.0], [123.0, 164.0], [124.0, 162.0], [125.0, 153.0], [126.0, 161.0], [127.0, 156.0], [128.0, 166.0], [129.0, 157.0], [130.0, 157.0], [131.0, 166.0], [132.0, 159.0], [133.0, 160.0], [134.0, 157.0], [135.0, 157.0], [1.0, 211.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[68.0, 160.0148148148148]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[5.0, 202.0], [6.0, 50.0], [8.0, 682.5], [9.0, 47.0], [10.0, 40.0], [11.0, 56.5], [12.0, 128.0], [13.0, 34.8], [14.0, 78.0], [15.0, 26.333333333333332], [16.0, 51.666666666666664], [17.0, 55.875], [18.0, 25.0], [19.0, 51.0], [20.0, 51.5], [21.0, 54.0], [22.0, 27.0], [23.0, 45.81818181818182], [24.0, 40.81818181818182], [25.0, 37.57142857142857], [26.0, 44.5], [27.0, 63.5], [28.0, 70.0], [29.0, 96.0], [30.0, 44.0], [31.0, 41.5], [32.0, 41.5], [33.0, 38.666666666666664], [34.0, 85.6], [35.0, 33.25], [36.0, 46.41666666666667], [37.0, 40.25], [38.0, 43.1764705882353], [39.0, 49.75], [40.0, 37.0], [41.0, 28.125], [42.0, 49.72727272727273], [43.0, 46.0], [44.0, 32.75], [45.0, 58.73913043478261], [46.0, 59.470588235294116], [47.0, 60.111111111111114], [48.0, 34.333333333333336], [49.0, 37.66666666666667], [50.0, 49.89473684210526], [51.0, 49.0909090909091], [52.0, 67.33333333333333], [53.0, 85.90243902439022], [54.0, 37.6], [55.0, 42.857142857142854], [56.0, 114.0], [57.0, 43.18181818181818], [58.0, 51.9], [59.0, 32.45454545454545], [60.0, 51.4], [61.0, 59.111111111111114], [62.0, 44.64285714285714], [63.0, 32.375], [64.0, 105.73913043478261], [65.0, 120.0], [66.0, 177.28], [67.0, 74.9090909090909], [68.0, 90.36363636363636], [69.0, 140.23529411764707], [70.0, 69.33333333333334], [71.0, 33.230769230769226], [72.0, 116.2], [73.0, 37.42857142857142], [74.0, 122.21428571428572], [75.0, 76.46666666666667], [76.0, 158.5925925925926], [77.0, 200.46153846153848], [78.0, 231.07142857142856], [79.0, 105.71428571428571], [80.0, 255.94444444444443], [81.0, 589.1], [82.0, 524.5882352941176], [83.0, 480.09523809523813], [84.0, 456.35714285714283], [85.0, 933.875], [86.0, 3321.3488372093025], [87.0, 2266.923076923077], [88.0, 2668.85], [89.0, 1907.7894736842106], [90.0, 732.1818181818182], [91.0, 807.6666666666666], [92.0, 639.6363636363636], [93.0, 345.58333333333337], [94.0, 191.8571428571429], [95.0, 1061.75], [96.0, 162.67741935483872], [97.0, 403.2857142857142], [98.0, 237.21428571428575], [99.0, 209.66666666666669], [100.0, 189.47058823529414], [101.0, 457.07692307692315], [102.0, 114.35999999999997], [103.0, 776.2857142857142], [104.0, 198.44444444444443], [105.0, 756.1944444444443], [106.0, 453.52941176470586], [107.0, 278.7692307692307], [108.0, 1586.2499999999998], [109.0, 798.0500000000001], [110.0, 1221.4117647058822], [111.0, 1697.1666666666667], [112.0, 224.87499999999997], [113.0, 306.03846153846143], [114.0, 894.7142857142857], [115.0, 113.07142857142861], [116.0, 286.52941176470597], [117.0, 759.0], [118.0, 976.3636363636364], [119.0, 711.0588235294118], [120.0, 694.3999999999999], [121.0, 94.56249999999994], [122.0, 345.06896551724145], [123.0, 449.42105263157896], [124.0, 459.29166666666663], [125.0, 294.2972972972974], [126.0, 813.3773584905657], [127.0, 1298.4999999999995], [128.0, 1377.857142857143], [129.0, 1560.2380952380956], [130.0, 1364.4166666666667], [131.0, 1818.75], [132.0, 1618.303571428571], [133.0, 1614.3333333333333], [134.0, 1285.4047619047617], [135.0, 1541.0051808997482], [1.0, 34.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[128.68399999999988, 1402.417037037036]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 135.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 33.733333333333334, "minX": 1.5876801E12, "maxY": 292314.55, "series": [{"data": [[1.5876807E12, 292314.55], [1.58768034E12, 234419.15], [1.58768064E12, 278754.18333333335], [1.58768076E12, 285021.01666666666], [1.58768046E12, 215249.7], [1.5876801E12, 271.96666666666664], [1.5876804E12, 217626.96666666667], [1.58768022E12, 224563.21666666667], [1.58768052E12, 190248.15], [1.58768016E12, 197444.65], [1.58768082E12, 97762.28333333334], [1.58768028E12, 248334.33333333334], [1.58768058E12, 144567.06666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5876807E12, 18146.7], [1.58768034E12, 14435.8], [1.58768064E12, 17167.2], [1.58768076E12, 21350.066666666666], [1.58768046E12, 13599.233333333334], [1.5876801E12, 33.733333333333334], [1.5876804E12, 13470.6], [1.58768022E12, 14371.533333333333], [1.58768052E12, 21207.166666666668], [1.58768016E12, 12468.833333333334], [1.58768082E12, 9789.1], [1.58768028E12, 15444.033333333333], [1.58768058E12, 22079.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768082E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 159.6328125, "minX": 1.5876801E12, "maxY": 2438.1305732484084, "series": [{"data": [[1.58768022E12, 2143.5526838966175], [1.58768052E12, 900.0764587525168], [1.5876807E12, 1295.2939322301008], [1.58768034E12, 2186.3015873015897], [1.58768064E12, 1528.5382695507474], [1.58768016E12, 673.1396786155747], [1.58768082E12, 352.6181046676094], [1.58768076E12, 806.2530040053413], [1.58768028E12, 1830.8353376503226], [1.58768046E12, 2381.2739726027407], [1.5876804E12, 2431.3800424628425], [1.58768058E12, 697.9375812743826]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768016E12, 159.6328125], [1.5876801E12, 167.00000000000003]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.5876807E12, 1298.807722616232], [1.58768034E12, 2212.7705242334314], [1.58768064E12, 1521.1801501251045], [1.58768076E12, 814.3313172042999], [1.58768046E12, 2313.209863588673], [1.5876801E12, 202.0], [1.5876804E12, 2438.1305732484084], [1.58768022E12, 2138.1503984063784], [1.58768052E12, 903.0433898305077], [1.58768016E12, 720.3783160322954], [1.58768082E12, 481.3851963746224], [1.58768028E12, 1799.272474513439], [1.58768058E12, 739.9677419354836]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768082E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 159.57031249999994, "minX": 1.5876801E12, "maxY": 2437.6857749469245, "series": [{"data": [[1.58768022E12, 2143.1809145129205], [1.58768052E12, 899.9423205902083], [1.5876807E12, 1295.0118203309707], [1.58768034E12, 2185.9841269841254], [1.58768064E12, 1527.8469217970057], [1.58768016E12, 672.8590852904816], [1.58768082E12, 350.9490806223483], [1.58768076E12, 806.0627503337786], [1.58768028E12, 1830.5374653098988], [1.58768046E12, 2381.0864067439425], [1.5876804E12, 2431.049893842889], [1.58768058E12, 697.6352405721741]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768016E12, 159.57031249999994], [1.5876801E12, 166.71428571428572]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.5876807E12, 1298.455476753348], [1.58768034E12, 2212.5361028684474], [1.58768064E12, 1520.2185154295255], [1.58768076E12, 814.1310483870972], [1.58768046E12, 2312.9727177334717], [1.5876801E12, 200.0], [1.5876804E12, 2437.6857749469245], [1.58768022E12, 2137.8545816733103], [1.58768052E12, 902.9349152542372], [1.58768016E12, 719.7750865051903], [1.58768082E12, 479.9712990936555], [1.58768028E12, 1798.843373493976], [1.58768058E12, 739.0877419354844]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768082E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.5876801E12, "maxY": 4.428571428571429, "series": [{"data": [[1.58768022E12, 0.5168986083499004], [1.58768052E12, 0.2159624413145543], [1.5876807E12, 0.24901497241922757], [1.58768034E12, 0.49503968253968295], [1.58768064E12, 0.3660565723793677], [1.58768016E12, 0.2669962917181709], [1.58768082E12, 0.05657708628005655], [1.58768076E12, 0.2690253671562084], [1.58768028E12, 0.4292321924144309], [1.58768046E12, 0.4467860906217069], [1.5876804E12, 0.43949044585987246], [1.58768058E12, 0.11963589076723016]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58768016E12, 0.7265624999999999], [1.5876801E12, 4.428571428571429]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.5876807E12, 0.4066193853427894], [1.58768034E12, 0.5687438180019786], [1.58768064E12, 0.40867389491242645], [1.58768076E12, 0.42674731182795733], [1.58768046E12, 0.4512067156348376], [1.5876801E12, 0.0], [1.5876804E12, 0.43099787685774943], [1.58768022E12, 0.5707171314741035], [1.58768052E12, 0.4271186440677968], [1.58768016E12, 0.5524798154555945], [1.58768082E12, 0.44410876132930527], [1.58768028E12, 0.5078776645041707], [1.58768058E12, 0.41935483870967716]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768082E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 14.0, "minX": 1.5876801E12, "maxY": 7357.0, "series": [{"data": [[1.5876807E12, 5229.0], [1.58768034E12, 7357.0], [1.58768064E12, 5127.0], [1.58768076E12, 2206.0], [1.58768046E12, 5720.0], [1.5876801E12, 211.0], [1.5876804E12, 6630.0], [1.58768022E12, 4592.0], [1.58768052E12, 3975.0], [1.58768016E12, 3245.0], [1.58768082E12, 4474.0], [1.58768028E12, 4742.0], [1.58768058E12, 6576.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5876807E12, 16.0], [1.58768034E12, 83.0], [1.58768064E12, 17.0], [1.58768076E12, 14.0], [1.58768046E12, 54.0], [1.5876801E12, 151.0], [1.5876804E12, 91.0], [1.58768022E12, 171.0], [1.58768052E12, 96.0], [1.58768016E12, 15.0], [1.58768082E12, 20.0], [1.58768028E12, 26.0], [1.58768058E12, 364.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5876807E12, 2784.8000000000025], [1.58768034E12, 4617.0], [1.58768064E12, 3426.8], [1.58768076E12, 1616.7000000000003], [1.58768046E12, 3636.1000000000004], [1.5876801E12, 211.0], [1.5876804E12, 3869.5], [1.58768022E12, 3072.0], [1.58768052E12, 2448.8999999999996], [1.58768016E12, 1825.5], [1.58768082E12, 2543.3999999999996], [1.58768028E12, 2777.7000000000007], [1.58768058E12, 4503.700000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5876807E12, 4032.3800000000015], [1.58768034E12, 6086.0], [1.58768064E12, 4533.700000000001], [1.58768076E12, 1937.5600000000013], [1.58768046E12, 4800.9400000000005], [1.5876801E12, 211.0], [1.5876804E12, 5359.25], [1.58768022E12, 3793.04], [1.58768052E12, 3672.7200000000003], [1.58768016E12, 2734.9], [1.58768082E12, 4298.139999999999], [1.58768028E12, 3691.370000000002], [1.58768058E12, 6246.040000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5876807E12, 3316.7999999999993], [1.58768034E12, 5292.0], [1.58768064E12, 3868.9], [1.58768076E12, 1745.0], [1.58768046E12, 4043.35], [1.5876801E12, 211.0], [1.5876804E12, 4388.0], [1.58768022E12, 3329.2], [1.58768052E12, 3032.0], [1.58768016E12, 2179.5], [1.58768082E12, 3839.45], [1.58768028E12, 3010.05], [1.58768058E12, 5522.499999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768082E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 2622.0, "series": [{"data": [[2.0, 183.5], [3.0, 160.5], [4.0, 45.0], [7.0, 41.0], [8.0, 56.0], [9.0, 50.0], [10.0, 42.5], [11.0, 74.0], [12.0, 38.0], [13.0, 63.0], [14.0, 1333.0], [15.0, 2101.0], [16.0, 2357.0], [17.0, 533.5], [18.0, 2491.0], [19.0, 1192.5], [21.0, 1657.5], [22.0, 2622.0], [23.0, 1504.0], [24.0, 1800.5], [25.0, 1573.5], [26.0, 2072.0], [27.0, 1892.5], [28.0, 2149.5], [29.0, 1603.0], [30.0, 2037.5], [31.0, 1868.0], [32.0, 1964.5], [33.0, 1941.0], [35.0, 1965.0], [34.0, 1659.5], [37.0, 1987.0], [36.0, 1973.5], [38.0, 1593.5], [39.0, 1729.0], [40.0, 1796.0], [41.0, 1389.0], [42.0, 1103.0], [43.0, 1362.5], [44.0, 1502.0], [45.0, 1136.5], [46.0, 1547.0], [47.0, 1230.0], [48.0, 1445.5], [49.0, 1076.0], [50.0, 992.5], [51.0, 1181.0], [53.0, 1331.0], [52.0, 1039.5], [54.0, 983.5], [55.0, 137.5], [57.0, 961.0], [56.0, 682.5], [59.0, 1055.0], [58.0, 1175.0], [61.0, 770.0], [60.0, 659.5], [63.0, 470.0], [62.0, 934.5], [66.0, 31.0], [65.0, 1336.5], [64.0, 818.5], [67.0, 26.0], [69.0, 1130.0], [70.0, 932.0], [71.0, 523.0], [72.0, 34.5], [75.0, 27.0], [73.0, 1607.0], [77.0, 2607.0], [82.0, 1013.0], [83.0, 344.0], [81.0, 32.0], [85.0, 27.0], [89.0, 774.0], [95.0, 531.5], [1.0, 33.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[38.0, 1378.5], [41.0, 2.0], [46.0, 1011.0], [47.0, 2.0], [49.0, 2.0], [53.0, 2.0], [55.0, 2.0], [54.0, 2.0], [56.0, 2.0], [57.0, 2.0], [59.0, 1433.5], [58.0, 2.0], [60.0, 2.0], [63.0, 2.0], [66.0, 2.0], [64.0, 2.0], [67.0, 2.0], [65.0, 2.0], [69.0, 2.0], [70.0, 2.0], [71.0, 2.0], [68.0, 2.0], [75.0, 2.0], [72.0, 2.0], [74.0, 2.0], [79.0, 2.0], [76.0, 2.0], [78.0, 2.0], [82.0, 1626.0], [80.0, 2.0], [83.0, 2.0], [85.0, 2.0], [84.0, 2.0], [91.0, 375.0], [101.0, 616.0], [24.0, 2.0], [27.0, 2185.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 101.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 2620.0, "series": [{"data": [[2.0, 182.5], [3.0, 160.5], [4.0, 45.0], [7.0, 41.0], [8.0, 55.0], [9.0, 49.5], [10.0, 42.5], [11.0, 69.0], [12.0, 38.0], [13.0, 62.0], [14.0, 1333.0], [15.0, 2101.0], [16.0, 2357.0], [17.0, 533.5], [18.0, 2491.0], [19.0, 1192.5], [21.0, 1657.5], [22.0, 2620.0], [23.0, 1504.0], [24.0, 1800.5], [25.0, 1573.5], [26.0, 2071.5], [27.0, 1892.5], [28.0, 2149.5], [29.0, 1603.0], [30.0, 2037.5], [31.0, 1868.0], [32.0, 1963.5], [33.0, 1941.0], [35.0, 1965.0], [34.0, 1659.5], [37.0, 1987.0], [36.0, 1973.5], [38.0, 1593.0], [39.0, 1729.0], [40.0, 1795.0], [41.0, 1389.0], [42.0, 1102.0], [43.0, 1362.5], [44.0, 1501.5], [45.0, 1134.0], [46.0, 1547.0], [47.0, 1230.0], [48.0, 1434.5], [49.0, 1076.0], [50.0, 992.5], [51.0, 1181.0], [53.0, 1331.0], [52.0, 1039.5], [54.0, 983.5], [55.0, 137.0], [57.0, 961.0], [56.0, 682.5], [59.0, 1055.0], [58.0, 1174.5], [61.0, 770.0], [60.0, 659.5], [63.0, 470.0], [62.0, 934.5], [66.0, 31.0], [65.0, 1336.0], [64.0, 818.5], [67.0, 26.0], [69.0, 1130.0], [70.0, 932.0], [71.0, 523.0], [72.0, 34.0], [75.0, 27.0], [73.0, 1606.0], [77.0, 2607.0], [82.0, 1013.0], [83.0, 344.0], [81.0, 32.0], [85.0, 27.0], [89.0, 774.0], [95.0, 531.5], [1.0, 33.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[38.0, 1378.5], [41.0, 2.0], [46.0, 1011.0], [47.0, 2.0], [49.0, 2.0], [53.0, 2.0], [55.0, 2.0], [54.0, 2.0], [56.0, 2.0], [57.0, 2.0], [59.0, 1433.5], [58.0, 2.0], [60.0, 2.0], [63.0, 2.0], [66.0, 2.0], [64.0, 2.0], [67.0, 2.0], [65.0, 2.0], [69.0, 2.0], [70.0, 2.0], [71.0, 2.0], [68.0, 2.0], [75.0, 2.0], [72.0, 2.0], [74.0, 2.0], [79.0, 2.0], [76.0, 2.0], [78.0, 2.0], [82.0, 1626.0], [80.0, 2.0], [83.0, 2.0], [85.0, 2.0], [84.0, 2.0], [91.0, 375.0], [101.0, 616.0], [24.0, 2.0], [27.0, 2185.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 101.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.5876801E12, "maxY": 52.4, "series": [{"data": [[1.5876807E12, 43.016666666666666], [1.58768034E12, 33.5], [1.58768064E12, 39.233333333333334], [1.58768076E12, 48.93333333333333], [1.58768046E12, 32.25], [1.5876801E12, 0.18333333333333332], [1.5876804E12, 31.0], [1.58768022E12, 33.61666666666667], [1.58768052E12, 48.13333333333333], [1.58768016E12, 31.033333333333335], [1.58768082E12, 22.783333333333335], [1.58768028E12, 36.166666666666664], [1.58768058E12, 52.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768082E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.5876801E12, "maxY": 41.95, "series": [{"data": [[1.5876807E12, 41.95], [1.58768034E12, 33.65], [1.58768064E12, 40.016666666666666], [1.58768076E12, 40.7], [1.58768046E12, 30.866666666666667], [1.5876801E12, 0.13333333333333333], [1.5876804E12, 31.233333333333334], [1.58768022E12, 32.18333333333333], [1.58768052E12, 26.766666666666666], [1.58768016E12, 30.066666666666666], [1.58768082E12, 13.833333333333334], [1.58768028E12, 35.63333333333333], [1.58768058E12, 20.033333333333335]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58768022E12, 1.3166666666666667], [1.58768052E12, 22.666666666666668], [1.5876807E12, 0.35], [1.58768082E12, 8.983333333333333], [1.58768076E12, 9.066666666666666], [1.58768028E12, 0.36666666666666664], [1.58768046E12, 0.8333333333333334], [1.5876804E12, 0.16666666666666666], [1.58768058E12, 31.433333333333334]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58768082E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.5876801E12, "maxY": 20.983333333333334, "series": [{"data": [[1.58768016E12, 2.1333333333333333], [1.5876801E12, 0.11666666666666667]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58768022E12, 16.066666666666666], [1.58768052E12, 13.483333333333333], [1.5876807E12, 20.983333333333334], [1.58768034E12, 16.8], [1.58768064E12, 20.033333333333335], [1.58768016E12, 13.483333333333333], [1.58768082E12, 7.133333333333334], [1.58768076E12, 20.483333333333334], [1.58768028E12, 17.783333333333335], [1.58768046E12, 15.516666666666667], [1.5876804E12, 15.65], [1.58768058E12, 9.866666666666667]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58768022E12, 0.7], [1.58768052E12, 11.366666666666667], [1.5876807E12, 0.16666666666666666], [1.58768082E12, 4.65], [1.58768076E12, 4.483333333333333], [1.58768028E12, 0.23333333333333334], [1.58768046E12, 0.3], [1.5876804E12, 0.05], [1.58768058E12, 15.766666666666667]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.5876807E12, 20.966666666666665], [1.58768034E12, 16.85], [1.58768064E12, 19.983333333333334], [1.58768076E12, 20.216666666666665], [1.58768046E12, 15.35], [1.5876801E12, 0.016666666666666666], [1.5876804E12, 15.583333333333334], [1.58768022E12, 16.116666666666667], [1.58768052E12, 13.283333333333333], [1.58768016E12, 14.45], [1.58768082E12, 6.7], [1.58768028E12, 17.85], [1.58768058E12, 10.166666666666666]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58768022E12, 0.6166666666666667], [1.58768052E12, 11.3], [1.5876807E12, 0.18333333333333332], [1.58768082E12, 4.333333333333333], [1.58768076E12, 4.583333333333333], [1.58768028E12, 0.13333333333333333], [1.58768046E12, 0.5333333333333333], [1.5876804E12, 0.11666666666666667], [1.58768058E12, 15.666666666666666]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768082E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.5876801E12, "maxY": 41.95, "series": [{"data": [[1.5876807E12, 41.95], [1.58768034E12, 33.65], [1.58768064E12, 40.016666666666666], [1.58768076E12, 40.7], [1.58768046E12, 30.866666666666667], [1.5876801E12, 0.13333333333333333], [1.5876804E12, 31.233333333333334], [1.58768022E12, 32.18333333333333], [1.58768052E12, 26.766666666666666], [1.58768016E12, 30.066666666666666], [1.58768082E12, 13.833333333333334], [1.58768028E12, 35.63333333333333], [1.58768058E12, 20.033333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58768022E12, 1.3166666666666667], [1.58768052E12, 22.666666666666668], [1.5876807E12, 0.35], [1.58768082E12, 8.983333333333333], [1.58768076E12, 9.066666666666666], [1.58768028E12, 0.36666666666666664], [1.58768046E12, 0.8333333333333334], [1.5876804E12, 0.16666666666666666], [1.58768058E12, 31.433333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58768082E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

