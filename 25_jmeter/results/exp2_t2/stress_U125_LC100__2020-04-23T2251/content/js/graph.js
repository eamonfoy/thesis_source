/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 7032.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 3.0], [4.7, 3.0], [4.8, 3.0], [4.9, 4.0], [5.0, 7.0], [5.1, 13.0], [5.2, 15.0], [5.3, 15.0], [5.4, 16.0], [5.5, 16.0], [5.6, 16.0], [5.7, 17.0], [5.8, 17.0], [5.9, 18.0], [6.0, 18.0], [6.1, 18.0], [6.2, 18.0], [6.3, 19.0], [6.4, 19.0], [6.5, 19.0], [6.6, 19.0], [6.7, 19.0], [6.8, 20.0], [6.9, 20.0], [7.0, 20.0], [7.1, 20.0], [7.2, 21.0], [7.3, 21.0], [7.4, 21.0], [7.5, 21.0], [7.6, 21.0], [7.7, 22.0], [7.8, 22.0], [7.9, 22.0], [8.0, 22.0], [8.1, 22.0], [8.2, 22.0], [8.3, 23.0], [8.4, 23.0], [8.5, 23.0], [8.6, 23.0], [8.7, 23.0], [8.8, 23.0], [8.9, 24.0], [9.0, 24.0], [9.1, 24.0], [9.2, 24.0], [9.3, 24.0], [9.4, 24.0], [9.5, 25.0], [9.6, 25.0], [9.7, 25.0], [9.8, 25.0], [9.9, 25.0], [10.0, 25.0], [10.1, 26.0], [10.2, 26.0], [10.3, 26.0], [10.4, 26.0], [10.5, 26.0], [10.6, 27.0], [10.7, 27.0], [10.8, 27.0], [10.9, 27.0], [11.0, 27.0], [11.1, 28.0], [11.2, 28.0], [11.3, 28.0], [11.4, 28.0], [11.5, 28.0], [11.6, 29.0], [11.7, 29.0], [11.8, 29.0], [11.9, 29.0], [12.0, 29.0], [12.1, 30.0], [12.2, 30.0], [12.3, 30.0], [12.4, 30.0], [12.5, 31.0], [12.6, 31.0], [12.7, 31.0], [12.8, 31.0], [12.9, 32.0], [13.0, 32.0], [13.1, 32.0], [13.2, 32.0], [13.3, 33.0], [13.4, 33.0], [13.5, 33.0], [13.6, 34.0], [13.7, 34.0], [13.8, 35.0], [13.9, 35.0], [14.0, 36.0], [14.1, 37.0], [14.2, 37.0], [14.3, 38.0], [14.4, 40.0], [14.5, 42.0], [14.6, 43.0], [14.7, 46.0], [14.8, 49.0], [14.9, 53.0], [15.0, 61.0], [15.1, 71.0], [15.2, 86.0], [15.3, 112.0], [15.4, 144.0], [15.5, 163.0], [15.6, 188.0], [15.7, 214.0], [15.8, 225.0], [15.9, 234.0], [16.0, 248.0], [16.1, 268.0], [16.2, 279.0], [16.3, 295.0], [16.4, 305.0], [16.5, 313.0], [16.6, 321.0], [16.7, 334.0], [16.8, 342.0], [16.9, 351.0], [17.0, 358.0], [17.1, 365.0], [17.2, 376.0], [17.3, 382.0], [17.4, 391.0], [17.5, 402.0], [17.6, 410.0], [17.7, 416.0], [17.8, 425.0], [17.9, 429.0], [18.0, 439.0], [18.1, 445.0], [18.2, 454.0], [18.3, 458.0], [18.4, 464.0], [18.5, 471.0], [18.6, 480.0], [18.7, 487.0], [18.8, 495.0], [18.9, 501.0], [19.0, 509.0], [19.1, 513.0], [19.2, 520.0], [19.3, 525.0], [19.4, 530.0], [19.5, 539.0], [19.6, 543.0], [19.7, 547.0], [19.8, 553.0], [19.9, 559.0], [20.0, 564.0], [20.1, 569.0], [20.2, 575.0], [20.3, 581.0], [20.4, 585.0], [20.5, 592.0], [20.6, 600.0], [20.7, 603.0], [20.8, 609.0], [20.9, 614.0], [21.0, 619.0], [21.1, 624.0], [21.2, 628.0], [21.3, 634.0], [21.4, 643.0], [21.5, 648.0], [21.6, 654.0], [21.7, 658.0], [21.8, 662.0], [21.9, 668.0], [22.0, 672.0], [22.1, 675.0], [22.2, 677.0], [22.3, 680.0], [22.4, 686.0], [22.5, 690.0], [22.6, 695.0], [22.7, 698.0], [22.8, 701.0], [22.9, 706.0], [23.0, 710.0], [23.1, 713.0], [23.2, 717.0], [23.3, 721.0], [23.4, 725.0], [23.5, 728.0], [23.6, 732.0], [23.7, 736.0], [23.8, 740.0], [23.9, 742.0], [24.0, 747.0], [24.1, 752.0], [24.2, 758.0], [24.3, 761.0], [24.4, 764.0], [24.5, 767.0], [24.6, 770.0], [24.7, 775.0], [24.8, 778.0], [24.9, 783.0], [25.0, 786.0], [25.1, 789.0], [25.2, 794.0], [25.3, 798.0], [25.4, 801.0], [25.5, 805.0], [25.6, 811.0], [25.7, 815.0], [25.8, 819.0], [25.9, 822.0], [26.0, 827.0], [26.1, 830.0], [26.2, 834.0], [26.3, 838.0], [26.4, 842.0], [26.5, 845.0], [26.6, 850.0], [26.7, 852.0], [26.8, 856.0], [26.9, 859.0], [27.0, 862.0], [27.1, 866.0], [27.2, 870.0], [27.3, 873.0], [27.4, 877.0], [27.5, 881.0], [27.6, 883.0], [27.7, 887.0], [27.8, 892.0], [27.9, 894.0], [28.0, 897.0], [28.1, 900.0], [28.2, 904.0], [28.3, 907.0], [28.4, 909.0], [28.5, 914.0], [28.6, 918.0], [28.7, 920.0], [28.8, 924.0], [28.9, 926.0], [29.0, 933.0], [29.1, 937.0], [29.2, 942.0], [29.3, 946.0], [29.4, 948.0], [29.5, 952.0], [29.6, 955.0], [29.7, 958.0], [29.8, 961.0], [29.9, 964.0], [30.0, 967.0], [30.1, 969.0], [30.2, 972.0], [30.3, 974.0], [30.4, 977.0], [30.5, 979.0], [30.6, 982.0], [30.7, 984.0], [30.8, 987.0], [30.9, 989.0], [31.0, 993.0], [31.1, 996.0], [31.2, 999.0], [31.3, 1006.0], [31.4, 1009.0], [31.5, 1013.0], [31.6, 1016.0], [31.7, 1018.0], [31.8, 1021.0], [31.9, 1024.0], [32.0, 1026.0], [32.1, 1029.0], [32.2, 1032.0], [32.3, 1036.0], [32.4, 1039.0], [32.5, 1041.0], [32.6, 1044.0], [32.7, 1049.0], [32.8, 1053.0], [32.9, 1056.0], [33.0, 1061.0], [33.1, 1064.0], [33.2, 1068.0], [33.3, 1071.0], [33.4, 1072.0], [33.5, 1074.0], [33.6, 1077.0], [33.7, 1079.0], [33.8, 1082.0], [33.9, 1085.0], [34.0, 1089.0], [34.1, 1091.0], [34.2, 1095.0], [34.3, 1099.0], [34.4, 1102.0], [34.5, 1105.0], [34.6, 1110.0], [34.7, 1112.0], [34.8, 1115.0], [34.9, 1118.0], [35.0, 1120.0], [35.1, 1124.0], [35.2, 1127.0], [35.3, 1130.0], [35.4, 1133.0], [35.5, 1137.0], [35.6, 1140.0], [35.7, 1142.0], [35.8, 1144.0], [35.9, 1146.0], [36.0, 1149.0], [36.1, 1154.0], [36.2, 1158.0], [36.3, 1159.0], [36.4, 1162.0], [36.5, 1164.0], [36.6, 1167.0], [36.7, 1170.0], [36.8, 1172.0], [36.9, 1174.0], [37.0, 1177.0], [37.1, 1178.0], [37.2, 1182.0], [37.3, 1186.0], [37.4, 1189.0], [37.5, 1193.0], [37.6, 1197.0], [37.7, 1200.0], [37.8, 1206.0], [37.9, 1208.0], [38.0, 1212.0], [38.1, 1215.0], [38.2, 1218.0], [38.3, 1221.0], [38.4, 1223.0], [38.5, 1227.0], [38.6, 1228.0], [38.7, 1230.0], [38.8, 1234.0], [38.9, 1237.0], [39.0, 1239.0], [39.1, 1241.0], [39.2, 1244.0], [39.3, 1246.0], [39.4, 1249.0], [39.5, 1252.0], [39.6, 1254.0], [39.7, 1257.0], [39.8, 1260.0], [39.9, 1263.0], [40.0, 1265.0], [40.1, 1267.0], [40.2, 1270.0], [40.3, 1273.0], [40.4, 1275.0], [40.5, 1278.0], [40.6, 1280.0], [40.7, 1284.0], [40.8, 1286.0], [40.9, 1288.0], [41.0, 1292.0], [41.1, 1294.0], [41.2, 1297.0], [41.3, 1299.0], [41.4, 1302.0], [41.5, 1304.0], [41.6, 1307.0], [41.7, 1310.0], [41.8, 1312.0], [41.9, 1314.0], [42.0, 1316.0], [42.1, 1318.0], [42.2, 1322.0], [42.3, 1326.0], [42.4, 1329.0], [42.5, 1332.0], [42.6, 1334.0], [42.7, 1337.0], [42.8, 1341.0], [42.9, 1343.0], [43.0, 1347.0], [43.1, 1350.0], [43.2, 1351.0], [43.3, 1354.0], [43.4, 1357.0], [43.5, 1359.0], [43.6, 1362.0], [43.7, 1365.0], [43.8, 1367.0], [43.9, 1369.0], [44.0, 1373.0], [44.1, 1376.0], [44.2, 1379.0], [44.3, 1380.0], [44.4, 1383.0], [44.5, 1384.0], [44.6, 1387.0], [44.7, 1390.0], [44.8, 1392.0], [44.9, 1396.0], [45.0, 1397.0], [45.1, 1399.0], [45.2, 1403.0], [45.3, 1405.0], [45.4, 1409.0], [45.5, 1411.0], [45.6, 1414.0], [45.7, 1416.0], [45.8, 1419.0], [45.9, 1422.0], [46.0, 1426.0], [46.1, 1429.0], [46.2, 1432.0], [46.3, 1434.0], [46.4, 1437.0], [46.5, 1440.0], [46.6, 1443.0], [46.7, 1445.0], [46.8, 1447.0], [46.9, 1449.0], [47.0, 1451.0], [47.1, 1453.0], [47.2, 1455.0], [47.3, 1458.0], [47.4, 1462.0], [47.5, 1463.0], [47.6, 1465.0], [47.7, 1467.0], [47.8, 1468.0], [47.9, 1470.0], [48.0, 1473.0], [48.1, 1477.0], [48.2, 1479.0], [48.3, 1481.0], [48.4, 1485.0], [48.5, 1487.0], [48.6, 1490.0], [48.7, 1493.0], [48.8, 1496.0], [48.9, 1498.0], [49.0, 1501.0], [49.1, 1502.0], [49.2, 1504.0], [49.3, 1505.0], [49.4, 1508.0], [49.5, 1510.0], [49.6, 1513.0], [49.7, 1515.0], [49.8, 1518.0], [49.9, 1520.0], [50.0, 1522.0], [50.1, 1524.0], [50.2, 1527.0], [50.3, 1529.0], [50.4, 1532.0], [50.5, 1534.0], [50.6, 1537.0], [50.7, 1540.0], [50.8, 1542.0], [50.9, 1545.0], [51.0, 1549.0], [51.1, 1551.0], [51.2, 1553.0], [51.3, 1556.0], [51.4, 1559.0], [51.5, 1560.0], [51.6, 1563.0], [51.7, 1565.0], [51.8, 1568.0], [51.9, 1569.0], [52.0, 1572.0], [52.1, 1575.0], [52.2, 1577.0], [52.3, 1579.0], [52.4, 1581.0], [52.5, 1586.0], [52.6, 1588.0], [52.7, 1591.0], [52.8, 1593.0], [52.9, 1596.0], [53.0, 1599.0], [53.1, 1601.0], [53.2, 1606.0], [53.3, 1608.0], [53.4, 1610.0], [53.5, 1613.0], [53.6, 1616.0], [53.7, 1619.0], [53.8, 1621.0], [53.9, 1625.0], [54.0, 1626.0], [54.1, 1630.0], [54.2, 1633.0], [54.3, 1635.0], [54.4, 1637.0], [54.5, 1638.0], [54.6, 1641.0], [54.7, 1643.0], [54.8, 1647.0], [54.9, 1648.0], [55.0, 1651.0], [55.1, 1653.0], [55.2, 1656.0], [55.3, 1658.0], [55.4, 1662.0], [55.5, 1665.0], [55.6, 1668.0], [55.7, 1671.0], [55.8, 1674.0], [55.9, 1676.0], [56.0, 1679.0], [56.1, 1681.0], [56.2, 1683.0], [56.3, 1686.0], [56.4, 1689.0], [56.5, 1693.0], [56.6, 1697.0], [56.7, 1699.0], [56.8, 1701.0], [56.9, 1705.0], [57.0, 1706.0], [57.1, 1709.0], [57.2, 1712.0], [57.3, 1714.0], [57.4, 1717.0], [57.5, 1718.0], [57.6, 1720.0], [57.7, 1724.0], [57.8, 1727.0], [57.9, 1729.0], [58.0, 1733.0], [58.1, 1736.0], [58.2, 1739.0], [58.3, 1742.0], [58.4, 1745.0], [58.5, 1747.0], [58.6, 1751.0], [58.7, 1752.0], [58.8, 1754.0], [58.9, 1755.0], [59.0, 1757.0], [59.1, 1760.0], [59.2, 1762.0], [59.3, 1763.0], [59.4, 1767.0], [59.5, 1770.0], [59.6, 1772.0], [59.7, 1774.0], [59.8, 1777.0], [59.9, 1779.0], [60.0, 1781.0], [60.1, 1784.0], [60.2, 1786.0], [60.3, 1789.0], [60.4, 1792.0], [60.5, 1795.0], [60.6, 1800.0], [60.7, 1803.0], [60.8, 1804.0], [60.9, 1807.0], [61.0, 1810.0], [61.1, 1812.0], [61.2, 1814.0], [61.3, 1816.0], [61.4, 1820.0], [61.5, 1822.0], [61.6, 1825.0], [61.7, 1827.0], [61.8, 1830.0], [61.9, 1832.0], [62.0, 1835.0], [62.1, 1837.0], [62.2, 1839.0], [62.3, 1842.0], [62.4, 1845.0], [62.5, 1847.0], [62.6, 1851.0], [62.7, 1854.0], [62.8, 1857.0], [62.9, 1860.0], [63.0, 1865.0], [63.1, 1868.0], [63.2, 1870.0], [63.3, 1874.0], [63.4, 1877.0], [63.5, 1879.0], [63.6, 1882.0], [63.7, 1884.0], [63.8, 1886.0], [63.9, 1889.0], [64.0, 1891.0], [64.1, 1893.0], [64.2, 1896.0], [64.3, 1897.0], [64.4, 1901.0], [64.5, 1903.0], [64.6, 1907.0], [64.7, 1909.0], [64.8, 1911.0], [64.9, 1914.0], [65.0, 1916.0], [65.1, 1918.0], [65.2, 1921.0], [65.3, 1924.0], [65.4, 1926.0], [65.5, 1928.0], [65.6, 1930.0], [65.7, 1932.0], [65.8, 1935.0], [65.9, 1937.0], [66.0, 1940.0], [66.1, 1943.0], [66.2, 1944.0], [66.3, 1946.0], [66.4, 1948.0], [66.5, 1951.0], [66.6, 1954.0], [66.7, 1956.0], [66.8, 1959.0], [66.9, 1964.0], [67.0, 1966.0], [67.1, 1968.0], [67.2, 1970.0], [67.3, 1973.0], [67.4, 1975.0], [67.5, 1977.0], [67.6, 1980.0], [67.7, 1983.0], [67.8, 1986.0], [67.9, 1991.0], [68.0, 1996.0], [68.1, 1998.0], [68.2, 2001.0], [68.3, 2003.0], [68.4, 2006.0], [68.5, 2008.0], [68.6, 2011.0], [68.7, 2014.0], [68.8, 2016.0], [68.9, 2018.0], [69.0, 2022.0], [69.1, 2025.0], [69.2, 2028.0], [69.3, 2031.0], [69.4, 2033.0], [69.5, 2036.0], [69.6, 2038.0], [69.7, 2043.0], [69.8, 2046.0], [69.9, 2048.0], [70.0, 2051.0], [70.1, 2054.0], [70.2, 2056.0], [70.3, 2060.0], [70.4, 2063.0], [70.5, 2067.0], [70.6, 2070.0], [70.7, 2073.0], [70.8, 2076.0], [70.9, 2080.0], [71.0, 2083.0], [71.1, 2087.0], [71.2, 2091.0], [71.3, 2097.0], [71.4, 2100.0], [71.5, 2103.0], [71.6, 2108.0], [71.7, 2112.0], [71.8, 2117.0], [71.9, 2119.0], [72.0, 2121.0], [72.1, 2123.0], [72.2, 2126.0], [72.3, 2130.0], [72.4, 2133.0], [72.5, 2136.0], [72.6, 2141.0], [72.7, 2144.0], [72.8, 2147.0], [72.9, 2151.0], [73.0, 2154.0], [73.1, 2156.0], [73.2, 2160.0], [73.3, 2163.0], [73.4, 2167.0], [73.5, 2171.0], [73.6, 2174.0], [73.7, 2177.0], [73.8, 2181.0], [73.9, 2185.0], [74.0, 2186.0], [74.1, 2190.0], [74.2, 2193.0], [74.3, 2197.0], [74.4, 2201.0], [74.5, 2204.0], [74.6, 2206.0], [74.7, 2211.0], [74.8, 2214.0], [74.9, 2217.0], [75.0, 2224.0], [75.1, 2230.0], [75.2, 2233.0], [75.3, 2235.0], [75.4, 2238.0], [75.5, 2243.0], [75.6, 2247.0], [75.7, 2250.0], [75.8, 2253.0], [75.9, 2257.0], [76.0, 2262.0], [76.1, 2265.0], [76.2, 2268.0], [76.3, 2272.0], [76.4, 2277.0], [76.5, 2281.0], [76.6, 2287.0], [76.7, 2290.0], [76.8, 2292.0], [76.9, 2295.0], [77.0, 2300.0], [77.1, 2305.0], [77.2, 2311.0], [77.3, 2315.0], [77.4, 2318.0], [77.5, 2322.0], [77.6, 2327.0], [77.7, 2331.0], [77.8, 2336.0], [77.9, 2343.0], [78.0, 2346.0], [78.1, 2350.0], [78.2, 2354.0], [78.3, 2357.0], [78.4, 2363.0], [78.5, 2366.0], [78.6, 2372.0], [78.7, 2375.0], [78.8, 2382.0], [78.9, 2387.0], [79.0, 2394.0], [79.1, 2396.0], [79.2, 2403.0], [79.3, 2409.0], [79.4, 2414.0], [79.5, 2416.0], [79.6, 2422.0], [79.7, 2427.0], [79.8, 2429.0], [79.9, 2435.0], [80.0, 2439.0], [80.1, 2444.0], [80.2, 2451.0], [80.3, 2454.0], [80.4, 2459.0], [80.5, 2462.0], [80.6, 2464.0], [80.7, 2471.0], [80.8, 2476.0], [80.9, 2480.0], [81.0, 2484.0], [81.1, 2490.0], [81.2, 2494.0], [81.3, 2498.0], [81.4, 2502.0], [81.5, 2507.0], [81.6, 2510.0], [81.7, 2512.0], [81.8, 2518.0], [81.9, 2522.0], [82.0, 2526.0], [82.1, 2530.0], [82.2, 2542.0], [82.3, 2545.0], [82.4, 2553.0], [82.5, 2560.0], [82.6, 2567.0], [82.7, 2572.0], [82.8, 2578.0], [82.9, 2583.0], [83.0, 2590.0], [83.1, 2596.0], [83.2, 2602.0], [83.3, 2609.0], [83.4, 2621.0], [83.5, 2626.0], [83.6, 2636.0], [83.7, 2640.0], [83.8, 2644.0], [83.9, 2650.0], [84.0, 2657.0], [84.1, 2662.0], [84.2, 2667.0], [84.3, 2674.0], [84.4, 2678.0], [84.5, 2683.0], [84.6, 2691.0], [84.7, 2697.0], [84.8, 2707.0], [84.9, 2712.0], [85.0, 2716.0], [85.1, 2723.0], [85.2, 2731.0], [85.3, 2743.0], [85.4, 2751.0], [85.5, 2757.0], [85.6, 2766.0], [85.7, 2770.0], [85.8, 2777.0], [85.9, 2782.0], [86.0, 2786.0], [86.1, 2793.0], [86.2, 2798.0], [86.3, 2809.0], [86.4, 2816.0], [86.5, 2822.0], [86.6, 2830.0], [86.7, 2834.0], [86.8, 2839.0], [86.9, 2847.0], [87.0, 2853.0], [87.1, 2859.0], [87.2, 2864.0], [87.3, 2868.0], [87.4, 2876.0], [87.5, 2886.0], [87.6, 2893.0], [87.7, 2900.0], [87.8, 2905.0], [87.9, 2911.0], [88.0, 2924.0], [88.1, 2929.0], [88.2, 2939.0], [88.3, 2944.0], [88.4, 2952.0], [88.5, 2955.0], [88.6, 2965.0], [88.7, 2971.0], [88.8, 2977.0], [88.9, 2983.0], [89.0, 2990.0], [89.1, 2999.0], [89.2, 3011.0], [89.3, 3017.0], [89.4, 3023.0], [89.5, 3028.0], [89.6, 3035.0], [89.7, 3042.0], [89.8, 3049.0], [89.9, 3054.0], [90.0, 3063.0], [90.1, 3068.0], [90.2, 3077.0], [90.3, 3084.0], [90.4, 3096.0], [90.5, 3104.0], [90.6, 3113.0], [90.7, 3128.0], [90.8, 3135.0], [90.9, 3141.0], [91.0, 3149.0], [91.1, 3160.0], [91.2, 3168.0], [91.3, 3173.0], [91.4, 3179.0], [91.5, 3189.0], [91.6, 3197.0], [91.7, 3205.0], [91.8, 3211.0], [91.9, 3217.0], [92.0, 3230.0], [92.1, 3241.0], [92.2, 3252.0], [92.3, 3261.0], [92.4, 3281.0], [92.5, 3295.0], [92.6, 3305.0], [92.7, 3312.0], [92.8, 3319.0], [92.9, 3331.0], [93.0, 3336.0], [93.1, 3344.0], [93.2, 3353.0], [93.3, 3368.0], [93.4, 3376.0], [93.5, 3391.0], [93.6, 3402.0], [93.7, 3410.0], [93.8, 3422.0], [93.9, 3434.0], [94.0, 3449.0], [94.1, 3460.0], [94.2, 3475.0], [94.3, 3487.0], [94.4, 3500.0], [94.5, 3517.0], [94.6, 3530.0], [94.7, 3536.0], [94.8, 3548.0], [94.9, 3561.0], [95.0, 3574.0], [95.1, 3587.0], [95.2, 3598.0], [95.3, 3614.0], [95.4, 3623.0], [95.5, 3636.0], [95.6, 3651.0], [95.7, 3661.0], [95.8, 3681.0], [95.9, 3701.0], [96.0, 3722.0], [96.1, 3735.0], [96.2, 3760.0], [96.3, 3777.0], [96.4, 3798.0], [96.5, 3817.0], [96.6, 3828.0], [96.7, 3854.0], [96.8, 3878.0], [96.9, 3887.0], [97.0, 3911.0], [97.1, 3933.0], [97.2, 3963.0], [97.3, 3982.0], [97.4, 4003.0], [97.5, 4034.0], [97.6, 4059.0], [97.7, 4099.0], [97.8, 4119.0], [97.9, 4156.0], [98.0, 4193.0], [98.1, 4210.0], [98.2, 4242.0], [98.3, 4274.0], [98.4, 4303.0], [98.5, 4345.0], [98.6, 4400.0], [98.7, 4433.0], [98.8, 4481.0], [98.9, 4533.0], [99.0, 4617.0], [99.1, 4675.0], [99.2, 4769.0], [99.3, 4843.0], [99.4, 4997.0], [99.5, 5162.0], [99.6, 5304.0], [99.7, 5395.0], [99.8, 5535.0], [99.9, 5687.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[0.0, 146.0], [0.1, 146.0], [0.2, 146.0], [0.3, 146.0], [0.4, 146.0], [0.5, 146.0], [0.6, 146.0], [0.7, 146.0], [0.8, 147.0], [0.9, 147.0], [1.0, 147.0], [1.1, 147.0], [1.2, 147.0], [1.3, 147.0], [1.4, 147.0], [1.5, 147.0], [1.6, 147.0], [1.7, 147.0], [1.8, 147.0], [1.9, 147.0], [2.0, 147.0], [2.1, 147.0], [2.2, 147.0], [2.3, 147.0], [2.4, 147.0], [2.5, 148.0], [2.6, 148.0], [2.7, 148.0], [2.8, 148.0], [2.9, 148.0], [3.0, 148.0], [3.1, 148.0], [3.2, 148.0], [3.3, 148.0], [3.4, 148.0], [3.5, 148.0], [3.6, 148.0], [3.7, 148.0], [3.8, 148.0], [3.9, 148.0], [4.0, 148.0], [4.1, 148.0], [4.2, 148.0], [4.3, 148.0], [4.4, 148.0], [4.5, 148.0], [4.6, 148.0], [4.7, 148.0], [4.8, 148.0], [4.9, 148.0], [5.0, 148.0], [5.1, 148.0], [5.2, 148.0], [5.3, 148.0], [5.4, 148.0], [5.5, 148.0], [5.6, 148.0], [5.7, 148.0], [5.8, 148.0], [5.9, 148.0], [6.0, 148.0], [6.1, 148.0], [6.2, 148.0], [6.3, 148.0], [6.4, 149.0], [6.5, 149.0], [6.6, 149.0], [6.7, 149.0], [6.8, 149.0], [6.9, 149.0], [7.0, 149.0], [7.1, 149.0], [7.2, 149.0], [7.3, 149.0], [7.4, 149.0], [7.5, 149.0], [7.6, 149.0], [7.7, 149.0], [7.8, 149.0], [7.9, 149.0], [8.0, 149.0], [8.1, 149.0], [8.2, 149.0], [8.3, 149.0], [8.4, 149.0], [8.5, 149.0], [8.6, 149.0], [8.7, 149.0], [8.8, 149.0], [8.9, 149.0], [9.0, 149.0], [9.1, 149.0], [9.2, 149.0], [9.3, 149.0], [9.4, 149.0], [9.5, 149.0], [9.6, 149.0], [9.7, 149.0], [9.8, 149.0], [9.9, 149.0], [10.0, 149.0], [10.1, 149.0], [10.2, 149.0], [10.3, 149.0], [10.4, 150.0], [10.5, 150.0], [10.6, 150.0], [10.7, 150.0], [10.8, 150.0], [10.9, 150.0], [11.0, 150.0], [11.1, 150.0], [11.2, 150.0], [11.3, 150.0], [11.4, 150.0], [11.5, 150.0], [11.6, 150.0], [11.7, 150.0], [11.8, 150.0], [11.9, 150.0], [12.0, 150.0], [12.1, 150.0], [12.2, 150.0], [12.3, 150.0], [12.4, 150.0], [12.5, 150.0], [12.6, 150.0], [12.7, 150.0], [12.8, 150.0], [12.9, 150.0], [13.0, 150.0], [13.1, 150.0], [13.2, 150.0], [13.3, 150.0], [13.4, 150.0], [13.5, 150.0], [13.6, 150.0], [13.7, 150.0], [13.8, 150.0], [13.9, 150.0], [14.0, 150.0], [14.1, 150.0], [14.2, 150.0], [14.3, 150.0], [14.4, 151.0], [14.5, 151.0], [14.6, 151.0], [14.7, 151.0], [14.8, 151.0], [14.9, 151.0], [15.0, 151.0], [15.1, 151.0], [15.2, 151.0], [15.3, 151.0], [15.4, 151.0], [15.5, 151.0], [15.6, 151.0], [15.7, 151.0], [15.8, 151.0], [15.9, 151.0], [16.0, 151.0], [16.1, 151.0], [16.2, 151.0], [16.3, 151.0], [16.4, 151.0], [16.5, 151.0], [16.6, 151.0], [16.7, 151.0], [16.8, 151.0], [16.9, 151.0], [17.0, 151.0], [17.1, 151.0], [17.2, 151.0], [17.3, 151.0], [17.4, 151.0], [17.5, 151.0], [17.6, 151.0], [17.7, 151.0], [17.8, 151.0], [17.9, 151.0], [18.0, 151.0], [18.1, 151.0], [18.2, 151.0], [18.3, 151.0], [18.4, 151.0], [18.5, 151.0], [18.6, 151.0], [18.7, 151.0], [18.8, 151.0], [18.9, 151.0], [19.0, 151.0], [19.1, 151.0], [19.2, 152.0], [19.3, 152.0], [19.4, 152.0], [19.5, 152.0], [19.6, 152.0], [19.7, 152.0], [19.8, 152.0], [19.9, 152.0], [20.0, 152.0], [20.1, 152.0], [20.2, 152.0], [20.3, 152.0], [20.4, 152.0], [20.5, 152.0], [20.6, 152.0], [20.7, 152.0], [20.8, 152.0], [20.9, 152.0], [21.0, 152.0], [21.1, 152.0], [21.2, 152.0], [21.3, 152.0], [21.4, 152.0], [21.5, 152.0], [21.6, 152.0], [21.7, 152.0], [21.8, 152.0], [21.9, 152.0], [22.0, 152.0], [22.1, 152.0], [22.2, 152.0], [22.3, 152.0], [22.4, 153.0], [22.5, 153.0], [22.6, 153.0], [22.7, 153.0], [22.8, 153.0], [22.9, 153.0], [23.0, 153.0], [23.1, 153.0], [23.2, 153.0], [23.3, 153.0], [23.4, 153.0], [23.5, 153.0], [23.6, 153.0], [23.7, 153.0], [23.8, 153.0], [23.9, 153.0], [24.0, 153.0], [24.1, 153.0], [24.2, 153.0], [24.3, 153.0], [24.4, 153.0], [24.5, 153.0], [24.6, 153.0], [24.7, 153.0], [24.8, 153.0], [24.9, 153.0], [25.0, 153.0], [25.1, 153.0], [25.2, 153.0], [25.3, 153.0], [25.4, 153.0], [25.5, 153.0], [25.6, 153.0], [25.7, 153.0], [25.8, 153.0], [25.9, 153.0], [26.0, 153.0], [26.1, 153.0], [26.2, 153.0], [26.3, 153.0], [26.4, 153.0], [26.5, 153.0], [26.6, 153.0], [26.7, 153.0], [26.8, 153.0], [26.9, 153.0], [27.0, 153.0], [27.1, 153.0], [27.2, 153.0], [27.3, 153.0], [27.4, 153.0], [27.5, 153.0], [27.6, 153.0], [27.7, 153.0], [27.8, 153.0], [27.9, 153.0], [28.0, 153.0], [28.1, 153.0], [28.2, 153.0], [28.3, 153.0], [28.4, 153.0], [28.5, 153.0], [28.6, 153.0], [28.7, 153.0], [28.8, 154.0], [28.9, 154.0], [29.0, 154.0], [29.1, 154.0], [29.2, 154.0], [29.3, 154.0], [29.4, 154.0], [29.5, 154.0], [29.6, 154.0], [29.7, 154.0], [29.8, 154.0], [29.9, 154.0], [30.0, 154.0], [30.1, 154.0], [30.2, 154.0], [30.3, 154.0], [30.4, 154.0], [30.5, 154.0], [30.6, 154.0], [30.7, 154.0], [30.8, 154.0], [30.9, 154.0], [31.0, 154.0], [31.1, 154.0], [31.2, 154.0], [31.3, 154.0], [31.4, 154.0], [31.5, 154.0], [31.6, 154.0], [31.7, 154.0], [31.8, 154.0], [31.9, 154.0], [32.0, 154.0], [32.1, 154.0], [32.2, 154.0], [32.3, 154.0], [32.4, 154.0], [32.5, 154.0], [32.6, 154.0], [32.7, 154.0], [32.8, 154.0], [32.9, 154.0], [33.0, 154.0], [33.1, 154.0], [33.2, 154.0], [33.3, 154.0], [33.4, 154.0], [33.5, 154.0], [33.6, 154.0], [33.7, 154.0], [33.8, 154.0], [33.9, 154.0], [34.0, 154.0], [34.1, 154.0], [34.2, 154.0], [34.3, 154.0], [34.4, 155.0], [34.5, 155.0], [34.6, 155.0], [34.7, 155.0], [34.8, 155.0], [34.9, 155.0], [35.0, 155.0], [35.1, 155.0], [35.2, 155.0], [35.3, 155.0], [35.4, 155.0], [35.5, 155.0], [35.6, 155.0], [35.7, 155.0], [35.8, 155.0], [35.9, 155.0], [36.0, 155.0], [36.1, 155.0], [36.2, 155.0], [36.3, 155.0], [36.4, 155.0], [36.5, 155.0], [36.6, 155.0], [36.7, 155.0], [36.8, 155.0], [36.9, 155.0], [37.0, 155.0], [37.1, 155.0], [37.2, 155.0], [37.3, 155.0], [37.4, 155.0], [37.5, 155.0], [37.6, 155.0], [37.7, 155.0], [37.8, 155.0], [37.9, 155.0], [38.0, 155.0], [38.1, 155.0], [38.2, 155.0], [38.3, 155.0], [38.4, 155.0], [38.5, 155.0], [38.6, 155.0], [38.7, 155.0], [38.8, 155.0], [38.9, 155.0], [39.0, 155.0], [39.1, 155.0], [39.2, 155.0], [39.3, 155.0], [39.4, 155.0], [39.5, 155.0], [39.6, 155.0], [39.7, 155.0], [39.8, 155.0], [39.9, 155.0], [40.0, 156.0], [40.1, 156.0], [40.2, 156.0], [40.3, 156.0], [40.4, 156.0], [40.5, 156.0], [40.6, 156.0], [40.7, 156.0], [40.8, 156.0], [40.9, 156.0], [41.0, 156.0], [41.1, 156.0], [41.2, 156.0], [41.3, 156.0], [41.4, 156.0], [41.5, 156.0], [41.6, 156.0], [41.7, 156.0], [41.8, 156.0], [41.9, 156.0], [42.0, 156.0], [42.1, 156.0], [42.2, 156.0], [42.3, 156.0], [42.4, 156.0], [42.5, 156.0], [42.6, 156.0], [42.7, 156.0], [42.8, 156.0], [42.9, 156.0], [43.0, 156.0], [43.1, 156.0], [43.2, 156.0], [43.3, 156.0], [43.4, 156.0], [43.5, 156.0], [43.6, 156.0], [43.7, 156.0], [43.8, 156.0], [43.9, 156.0], [44.0, 156.0], [44.1, 156.0], [44.2, 156.0], [44.3, 156.0], [44.4, 156.0], [44.5, 156.0], [44.6, 156.0], [44.7, 156.0], [44.8, 156.0], [44.9, 156.0], [45.0, 156.0], [45.1, 156.0], [45.2, 156.0], [45.3, 156.0], [45.4, 156.0], [45.5, 156.0], [45.6, 156.0], [45.7, 156.0], [45.8, 156.0], [45.9, 156.0], [46.0, 156.0], [46.1, 156.0], [46.2, 156.0], [46.3, 156.0], [46.4, 157.0], [46.5, 157.0], [46.6, 157.0], [46.7, 157.0], [46.8, 157.0], [46.9, 157.0], [47.0, 157.0], [47.1, 157.0], [47.2, 157.0], [47.3, 157.0], [47.4, 157.0], [47.5, 157.0], [47.6, 157.0], [47.7, 157.0], [47.8, 157.0], [47.9, 157.0], [48.0, 157.0], [48.1, 157.0], [48.2, 157.0], [48.3, 157.0], [48.4, 157.0], [48.5, 157.0], [48.6, 157.0], [48.7, 157.0], [48.8, 157.0], [48.9, 157.0], [49.0, 157.0], [49.1, 157.0], [49.2, 157.0], [49.3, 157.0], [49.4, 157.0], [49.5, 157.0], [49.6, 157.0], [49.7, 157.0], [49.8, 157.0], [49.9, 157.0], [50.0, 157.0], [50.1, 157.0], [50.2, 157.0], [50.3, 157.0], [50.4, 157.0], [50.5, 157.0], [50.6, 157.0], [50.7, 157.0], [50.8, 157.0], [50.9, 157.0], [51.0, 157.0], [51.1, 157.0], [51.2, 157.0], [51.3, 157.0], [51.4, 157.0], [51.5, 157.0], [51.6, 157.0], [51.7, 157.0], [51.8, 157.0], [51.9, 157.0], [52.0, 158.0], [52.1, 158.0], [52.2, 158.0], [52.3, 158.0], [52.4, 158.0], [52.5, 158.0], [52.6, 158.0], [52.7, 158.0], [52.8, 158.0], [52.9, 158.0], [53.0, 158.0], [53.1, 158.0], [53.2, 158.0], [53.3, 158.0], [53.4, 158.0], [53.5, 158.0], [53.6, 158.0], [53.7, 158.0], [53.8, 158.0], [53.9, 158.0], [54.0, 158.0], [54.1, 158.0], [54.2, 158.0], [54.3, 158.0], [54.4, 158.0], [54.5, 158.0], [54.6, 158.0], [54.7, 158.0], [54.8, 158.0], [54.9, 158.0], [55.0, 158.0], [55.1, 158.0], [55.2, 158.0], [55.3, 158.0], [55.4, 158.0], [55.5, 158.0], [55.6, 158.0], [55.7, 158.0], [55.8, 158.0], [55.9, 158.0], [56.0, 158.0], [56.1, 158.0], [56.2, 158.0], [56.3, 158.0], [56.4, 158.0], [56.5, 158.0], [56.6, 158.0], [56.7, 158.0], [56.8, 159.0], [56.9, 159.0], [57.0, 159.0], [57.1, 159.0], [57.2, 159.0], [57.3, 159.0], [57.4, 159.0], [57.5, 159.0], [57.6, 159.0], [57.7, 159.0], [57.8, 159.0], [57.9, 159.0], [58.0, 159.0], [58.1, 159.0], [58.2, 159.0], [58.3, 159.0], [58.4, 159.0], [58.5, 159.0], [58.6, 159.0], [58.7, 159.0], [58.8, 159.0], [58.9, 159.0], [59.0, 159.0], [59.1, 159.0], [59.2, 159.0], [59.3, 159.0], [59.4, 159.0], [59.5, 159.0], [59.6, 159.0], [59.7, 159.0], [59.8, 159.0], [59.9, 159.0], [60.0, 159.0], [60.1, 159.0], [60.2, 159.0], [60.3, 159.0], [60.4, 159.0], [60.5, 159.0], [60.6, 159.0], [60.7, 159.0], [60.8, 159.0], [60.9, 159.0], [61.0, 159.0], [61.1, 159.0], [61.2, 159.0], [61.3, 159.0], [61.4, 159.0], [61.5, 159.0], [61.6, 159.0], [61.7, 159.0], [61.8, 159.0], [61.9, 159.0], [62.0, 159.0], [62.1, 159.0], [62.2, 159.0], [62.3, 159.0], [62.4, 160.0], [62.5, 160.0], [62.6, 160.0], [62.7, 160.0], [62.8, 160.0], [62.9, 160.0], [63.0, 160.0], [63.1, 160.0], [63.2, 160.0], [63.3, 160.0], [63.4, 160.0], [63.5, 160.0], [63.6, 160.0], [63.7, 160.0], [63.8, 160.0], [63.9, 160.0], [64.0, 160.0], [64.1, 160.0], [64.2, 160.0], [64.3, 160.0], [64.4, 160.0], [64.5, 160.0], [64.6, 160.0], [64.7, 160.0], [64.8, 160.0], [64.9, 160.0], [65.0, 160.0], [65.1, 160.0], [65.2, 160.0], [65.3, 160.0], [65.4, 160.0], [65.5, 160.0], [65.6, 161.0], [65.7, 161.0], [65.8, 161.0], [65.9, 161.0], [66.0, 161.0], [66.1, 161.0], [66.2, 161.0], [66.3, 161.0], [66.4, 161.0], [66.5, 161.0], [66.6, 161.0], [66.7, 161.0], [66.8, 161.0], [66.9, 161.0], [67.0, 161.0], [67.1, 161.0], [67.2, 161.0], [67.3, 161.0], [67.4, 161.0], [67.5, 161.0], [67.6, 161.0], [67.7, 161.0], [67.8, 161.0], [67.9, 161.0], [68.0, 161.0], [68.1, 161.0], [68.2, 161.0], [68.3, 161.0], [68.4, 161.0], [68.5, 161.0], [68.6, 161.0], [68.7, 161.0], [68.8, 161.0], [68.9, 161.0], [69.0, 161.0], [69.1, 161.0], [69.2, 161.0], [69.3, 161.0], [69.4, 161.0], [69.5, 161.0], [69.6, 161.0], [69.7, 161.0], [69.8, 161.0], [69.9, 161.0], [70.0, 161.0], [70.1, 161.0], [70.2, 161.0], [70.3, 161.0], [70.4, 161.0], [70.5, 161.0], [70.6, 161.0], [70.7, 161.0], [70.8, 161.0], [70.9, 161.0], [71.0, 161.0], [71.1, 161.0], [71.2, 161.0], [71.3, 161.0], [71.4, 161.0], [71.5, 161.0], [71.6, 161.0], [71.7, 161.0], [71.8, 161.0], [71.9, 161.0], [72.0, 161.0], [72.1, 161.0], [72.2, 161.0], [72.3, 161.0], [72.4, 161.0], [72.5, 161.0], [72.6, 161.0], [72.7, 161.0], [72.8, 162.0], [72.9, 162.0], [73.0, 162.0], [73.1, 162.0], [73.2, 162.0], [73.3, 162.0], [73.4, 162.0], [73.5, 162.0], [73.6, 162.0], [73.7, 162.0], [73.8, 162.0], [73.9, 162.0], [74.0, 162.0], [74.1, 162.0], [74.2, 162.0], [74.3, 162.0], [74.4, 162.0], [74.5, 162.0], [74.6, 162.0], [74.7, 162.0], [74.8, 162.0], [74.9, 162.0], [75.0, 162.0], [75.1, 162.0], [75.2, 162.0], [75.3, 162.0], [75.4, 162.0], [75.5, 162.0], [75.6, 162.0], [75.7, 162.0], [75.8, 162.0], [75.9, 162.0], [76.0, 162.0], [76.1, 162.0], [76.2, 162.0], [76.3, 162.0], [76.4, 162.0], [76.5, 162.0], [76.6, 162.0], [76.7, 162.0], [76.8, 162.0], [76.9, 162.0], [77.0, 162.0], [77.1, 162.0], [77.2, 162.0], [77.3, 162.0], [77.4, 162.0], [77.5, 162.0], [77.6, 163.0], [77.7, 163.0], [77.8, 163.0], [77.9, 163.0], [78.0, 163.0], [78.1, 163.0], [78.2, 163.0], [78.3, 163.0], [78.4, 163.0], [78.5, 163.0], [78.6, 163.0], [78.7, 163.0], [78.8, 163.0], [78.9, 163.0], [79.0, 163.0], [79.1, 163.0], [79.2, 163.0], [79.3, 163.0], [79.4, 163.0], [79.5, 163.0], [79.6, 163.0], [79.7, 163.0], [79.8, 163.0], [79.9, 163.0], [80.0, 163.0], [80.1, 163.0], [80.2, 163.0], [80.3, 163.0], [80.4, 163.0], [80.5, 163.0], [80.6, 163.0], [80.7, 163.0], [80.8, 164.0], [80.9, 164.0], [81.0, 164.0], [81.1, 164.0], [81.2, 164.0], [81.3, 164.0], [81.4, 164.0], [81.5, 164.0], [81.6, 164.0], [81.7, 164.0], [81.8, 164.0], [81.9, 164.0], [82.0, 164.0], [82.1, 164.0], [82.2, 164.0], [82.3, 164.0], [82.4, 164.0], [82.5, 164.0], [82.6, 164.0], [82.7, 164.0], [82.8, 164.0], [82.9, 164.0], [83.0, 164.0], [83.1, 164.0], [83.2, 164.0], [83.3, 164.0], [83.4, 164.0], [83.5, 164.0], [83.6, 164.0], [83.7, 164.0], [83.8, 164.0], [83.9, 164.0], [84.0, 165.0], [84.1, 165.0], [84.2, 165.0], [84.3, 165.0], [84.4, 165.0], [84.5, 165.0], [84.6, 165.0], [84.7, 165.0], [84.8, 165.0], [84.9, 165.0], [85.0, 165.0], [85.1, 165.0], [85.2, 165.0], [85.3, 165.0], [85.4, 165.0], [85.5, 165.0], [85.6, 165.0], [85.7, 165.0], [85.8, 165.0], [85.9, 165.0], [86.0, 165.0], [86.1, 165.0], [86.2, 165.0], [86.3, 165.0], [86.4, 165.0], [86.5, 165.0], [86.6, 165.0], [86.7, 165.0], [86.8, 165.0], [86.9, 165.0], [87.0, 165.0], [87.1, 165.0], [87.2, 165.0], [87.3, 165.0], [87.4, 165.0], [87.5, 165.0], [87.6, 165.0], [87.7, 165.0], [87.8, 165.0], [87.9, 165.0], [88.0, 167.0], [88.1, 167.0], [88.2, 167.0], [88.3, 167.0], [88.4, 167.0], [88.5, 167.0], [88.6, 167.0], [88.7, 167.0], [88.8, 167.0], [88.9, 167.0], [89.0, 167.0], [89.1, 167.0], [89.2, 167.0], [89.3, 167.0], [89.4, 167.0], [89.5, 167.0], [89.6, 167.0], [89.7, 167.0], [89.8, 167.0], [89.9, 167.0], [90.0, 167.0], [90.1, 167.0], [90.2, 167.0], [90.3, 167.0], [90.4, 167.0], [90.5, 167.0], [90.6, 167.0], [90.7, 167.0], [90.8, 167.0], [90.9, 167.0], [91.0, 167.0], [91.1, 167.0], [91.2, 168.0], [91.3, 168.0], [91.4, 168.0], [91.5, 168.0], [91.6, 168.0], [91.7, 168.0], [91.8, 168.0], [91.9, 168.0], [92.0, 168.0], [92.1, 168.0], [92.2, 168.0], [92.3, 168.0], [92.4, 168.0], [92.5, 168.0], [92.6, 168.0], [92.7, 168.0], [92.8, 169.0], [92.9, 169.0], [93.0, 169.0], [93.1, 169.0], [93.2, 169.0], [93.3, 169.0], [93.4, 169.0], [93.5, 169.0], [93.6, 169.0], [93.7, 169.0], [93.8, 169.0], [93.9, 169.0], [94.0, 169.0], [94.1, 169.0], [94.2, 169.0], [94.3, 169.0], [94.4, 169.0], [94.5, 169.0], [94.6, 169.0], [94.7, 169.0], [94.8, 169.0], [94.9, 169.0], [95.0, 169.0], [95.1, 169.0], [95.2, 169.0], [95.3, 169.0], [95.4, 169.0], [95.5, 169.0], [95.6, 169.0], [95.7, 169.0], [95.8, 169.0], [95.9, 169.0], [96.0, 170.0], [96.1, 170.0], [96.2, 170.0], [96.3, 170.0], [96.4, 170.0], [96.5, 170.0], [96.6, 170.0], [96.7, 170.0], [96.8, 174.0], [96.9, 174.0], [97.0, 174.0], [97.1, 174.0], [97.2, 174.0], [97.3, 174.0], [97.4, 174.0], [97.5, 174.0], [97.6, 175.0], [97.7, 175.0], [97.8, 175.0], [97.9, 175.0], [98.0, 175.0], [98.1, 175.0], [98.2, 175.0], [98.3, 175.0], [98.4, 189.0], [98.5, 189.0], [98.6, 189.0], [98.7, 189.0], [98.8, 189.0], [98.9, 189.0], [99.0, 189.0], [99.1, 189.0], [99.2, 227.0], [99.3, 227.0], [99.4, 227.0], [99.5, 227.0], [99.6, 227.0], [99.7, 227.0], [99.8, 227.0], [99.9, 227.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 2.0], [0.9, 2.0], [1.0, 2.0], [1.1, 2.0], [1.2, 2.0], [1.3, 2.0], [1.4, 2.0], [1.5, 2.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 3.0], [4.5, 3.0], [4.6, 3.0], [4.7, 3.0], [4.8, 3.0], [4.9, 3.0], [5.0, 5.0], [5.1, 14.0], [5.2, 15.0], [5.3, 16.0], [5.4, 16.0], [5.5, 17.0], [5.6, 17.0], [5.7, 18.0], [5.8, 18.0], [5.9, 18.0], [6.0, 18.0], [6.1, 19.0], [6.2, 19.0], [6.3, 19.0], [6.4, 20.0], [6.5, 20.0], [6.6, 20.0], [6.7, 20.0], [6.8, 20.0], [6.9, 21.0], [7.0, 21.0], [7.1, 21.0], [7.2, 21.0], [7.3, 22.0], [7.4, 22.0], [7.5, 22.0], [7.6, 22.0], [7.7, 22.0], [7.8, 22.0], [7.9, 23.0], [8.0, 23.0], [8.1, 23.0], [8.2, 23.0], [8.3, 23.0], [8.4, 23.0], [8.5, 24.0], [8.6, 24.0], [8.7, 24.0], [8.8, 24.0], [8.9, 24.0], [9.0, 24.0], [9.1, 25.0], [9.2, 25.0], [9.3, 25.0], [9.4, 25.0], [9.5, 25.0], [9.6, 25.0], [9.7, 26.0], [9.8, 26.0], [9.9, 26.0], [10.0, 26.0], [10.1, 26.0], [10.2, 27.0], [10.3, 27.0], [10.4, 27.0], [10.5, 27.0], [10.6, 27.0], [10.7, 27.0], [10.8, 27.0], [10.9, 27.0], [11.0, 28.0], [11.1, 28.0], [11.2, 28.0], [11.3, 28.0], [11.4, 29.0], [11.5, 29.0], [11.6, 29.0], [11.7, 29.0], [11.8, 29.0], [11.9, 29.0], [12.0, 30.0], [12.1, 30.0], [12.2, 30.0], [12.3, 30.0], [12.4, 31.0], [12.5, 31.0], [12.6, 31.0], [12.7, 32.0], [12.8, 32.0], [12.9, 32.0], [13.0, 33.0], [13.1, 33.0], [13.2, 33.0], [13.3, 34.0], [13.4, 34.0], [13.5, 35.0], [13.6, 35.0], [13.7, 35.0], [13.8, 36.0], [13.9, 36.0], [14.0, 37.0], [14.1, 38.0], [14.2, 39.0], [14.3, 41.0], [14.4, 43.0], [14.5, 44.0], [14.6, 47.0], [14.7, 49.0], [14.8, 57.0], [14.9, 75.0], [15.0, 94.0], [15.1, 123.0], [15.2, 146.0], [15.3, 171.0], [15.4, 196.0], [15.5, 221.0], [15.6, 236.0], [15.7, 250.0], [15.8, 263.0], [15.9, 273.0], [16.0, 286.0], [16.1, 300.0], [16.2, 309.0], [16.3, 321.0], [16.4, 330.0], [16.5, 338.0], [16.6, 355.0], [16.7, 362.0], [16.8, 370.0], [16.9, 376.0], [17.0, 385.0], [17.1, 391.0], [17.2, 399.0], [17.3, 405.0], [17.4, 414.0], [17.5, 420.0], [17.6, 427.0], [17.7, 435.0], [17.8, 442.0], [17.9, 449.0], [18.0, 455.0], [18.1, 463.0], [18.2, 469.0], [18.3, 476.0], [18.4, 483.0], [18.5, 491.0], [18.6, 495.0], [18.7, 504.0], [18.8, 511.0], [18.9, 518.0], [19.0, 520.0], [19.1, 529.0], [19.2, 534.0], [19.3, 539.0], [19.4, 547.0], [19.5, 551.0], [19.6, 562.0], [19.7, 567.0], [19.8, 573.0], [19.9, 581.0], [20.0, 586.0], [20.1, 591.0], [20.2, 596.0], [20.3, 602.0], [20.4, 607.0], [20.5, 612.0], [20.6, 619.0], [20.7, 623.0], [20.8, 625.0], [20.9, 630.0], [21.0, 634.0], [21.1, 641.0], [21.2, 649.0], [21.3, 652.0], [21.4, 659.0], [21.5, 662.0], [21.6, 667.0], [21.7, 673.0], [21.8, 681.0], [21.9, 684.0], [22.0, 690.0], [22.1, 694.0], [22.2, 696.0], [22.3, 701.0], [22.4, 706.0], [22.5, 712.0], [22.6, 715.0], [22.7, 721.0], [22.8, 725.0], [22.9, 729.0], [23.0, 734.0], [23.1, 737.0], [23.2, 741.0], [23.3, 745.0], [23.4, 750.0], [23.5, 754.0], [23.6, 757.0], [23.7, 760.0], [23.8, 763.0], [23.9, 768.0], [24.0, 772.0], [24.1, 776.0], [24.2, 780.0], [24.3, 784.0], [24.4, 788.0], [24.5, 792.0], [24.6, 794.0], [24.7, 796.0], [24.8, 800.0], [24.9, 802.0], [25.0, 807.0], [25.1, 809.0], [25.2, 811.0], [25.3, 814.0], [25.4, 818.0], [25.5, 823.0], [25.6, 826.0], [25.7, 829.0], [25.8, 832.0], [25.9, 836.0], [26.0, 839.0], [26.1, 844.0], [26.2, 846.0], [26.3, 849.0], [26.4, 852.0], [26.5, 854.0], [26.6, 857.0], [26.7, 860.0], [26.8, 864.0], [26.9, 867.0], [27.0, 869.0], [27.1, 873.0], [27.2, 877.0], [27.3, 879.0], [27.4, 882.0], [27.5, 886.0], [27.6, 890.0], [27.7, 892.0], [27.8, 895.0], [27.9, 899.0], [28.0, 904.0], [28.1, 906.0], [28.2, 909.0], [28.3, 912.0], [28.4, 916.0], [28.5, 919.0], [28.6, 923.0], [28.7, 927.0], [28.8, 929.0], [28.9, 933.0], [29.0, 936.0], [29.1, 938.0], [29.2, 941.0], [29.3, 943.0], [29.4, 946.0], [29.5, 949.0], [29.6, 953.0], [29.7, 958.0], [29.8, 962.0], [29.9, 966.0], [30.0, 969.0], [30.1, 973.0], [30.2, 977.0], [30.3, 980.0], [30.4, 984.0], [30.5, 987.0], [30.6, 990.0], [30.7, 995.0], [30.8, 997.0], [30.9, 1000.0], [31.0, 1003.0], [31.1, 1005.0], [31.2, 1008.0], [31.3, 1011.0], [31.4, 1016.0], [31.5, 1019.0], [31.6, 1022.0], [31.7, 1024.0], [31.8, 1026.0], [31.9, 1031.0], [32.0, 1036.0], [32.1, 1037.0], [32.2, 1040.0], [32.3, 1042.0], [32.4, 1044.0], [32.5, 1049.0], [32.6, 1051.0], [32.7, 1054.0], [32.8, 1058.0], [32.9, 1061.0], [33.0, 1064.0], [33.1, 1067.0], [33.2, 1071.0], [33.3, 1074.0], [33.4, 1078.0], [33.5, 1082.0], [33.6, 1085.0], [33.7, 1088.0], [33.8, 1091.0], [33.9, 1093.0], [34.0, 1097.0], [34.1, 1099.0], [34.2, 1101.0], [34.3, 1103.0], [34.4, 1105.0], [34.5, 1108.0], [34.6, 1112.0], [34.7, 1114.0], [34.8, 1117.0], [34.9, 1120.0], [35.0, 1123.0], [35.1, 1125.0], [35.2, 1128.0], [35.3, 1130.0], [35.4, 1134.0], [35.5, 1135.0], [35.6, 1138.0], [35.7, 1140.0], [35.8, 1144.0], [35.9, 1147.0], [36.0, 1150.0], [36.1, 1152.0], [36.2, 1155.0], [36.3, 1159.0], [36.4, 1161.0], [36.5, 1163.0], [36.6, 1166.0], [36.7, 1169.0], [36.8, 1172.0], [36.9, 1175.0], [37.0, 1177.0], [37.1, 1180.0], [37.2, 1181.0], [37.3, 1183.0], [37.4, 1186.0], [37.5, 1189.0], [37.6, 1192.0], [37.7, 1195.0], [37.8, 1197.0], [37.9, 1200.0], [38.0, 1202.0], [38.1, 1206.0], [38.2, 1208.0], [38.3, 1211.0], [38.4, 1213.0], [38.5, 1216.0], [38.6, 1219.0], [38.7, 1221.0], [38.8, 1223.0], [38.9, 1226.0], [39.0, 1230.0], [39.1, 1233.0], [39.2, 1235.0], [39.3, 1238.0], [39.4, 1242.0], [39.5, 1244.0], [39.6, 1248.0], [39.7, 1250.0], [39.8, 1252.0], [39.9, 1254.0], [40.0, 1257.0], [40.1, 1260.0], [40.2, 1263.0], [40.3, 1268.0], [40.4, 1273.0], [40.5, 1275.0], [40.6, 1278.0], [40.7, 1280.0], [40.8, 1283.0], [40.9, 1285.0], [41.0, 1287.0], [41.1, 1289.0], [41.2, 1291.0], [41.3, 1293.0], [41.4, 1296.0], [41.5, 1298.0], [41.6, 1302.0], [41.7, 1303.0], [41.8, 1306.0], [41.9, 1309.0], [42.0, 1311.0], [42.1, 1314.0], [42.2, 1318.0], [42.3, 1319.0], [42.4, 1322.0], [42.5, 1325.0], [42.6, 1329.0], [42.7, 1331.0], [42.8, 1335.0], [42.9, 1338.0], [43.0, 1341.0], [43.1, 1343.0], [43.2, 1345.0], [43.3, 1347.0], [43.4, 1351.0], [43.5, 1353.0], [43.6, 1356.0], [43.7, 1359.0], [43.8, 1360.0], [43.9, 1363.0], [44.0, 1365.0], [44.1, 1366.0], [44.2, 1368.0], [44.3, 1370.0], [44.4, 1374.0], [44.5, 1376.0], [44.6, 1378.0], [44.7, 1380.0], [44.8, 1384.0], [44.9, 1387.0], [45.0, 1390.0], [45.1, 1392.0], [45.2, 1394.0], [45.3, 1397.0], [45.4, 1399.0], [45.5, 1403.0], [45.6, 1405.0], [45.7, 1407.0], [45.8, 1410.0], [45.9, 1412.0], [46.0, 1415.0], [46.1, 1417.0], [46.2, 1419.0], [46.3, 1420.0], [46.4, 1423.0], [46.5, 1426.0], [46.6, 1429.0], [46.7, 1433.0], [46.8, 1434.0], [46.9, 1436.0], [47.0, 1438.0], [47.1, 1442.0], [47.2, 1445.0], [47.3, 1447.0], [47.4, 1450.0], [47.5, 1453.0], [47.6, 1455.0], [47.7, 1457.0], [47.8, 1458.0], [47.9, 1461.0], [48.0, 1464.0], [48.1, 1467.0], [48.2, 1469.0], [48.3, 1471.0], [48.4, 1473.0], [48.5, 1475.0], [48.6, 1479.0], [48.7, 1480.0], [48.8, 1484.0], [48.9, 1486.0], [49.0, 1488.0], [49.1, 1491.0], [49.2, 1495.0], [49.3, 1498.0], [49.4, 1500.0], [49.5, 1502.0], [49.6, 1505.0], [49.7, 1509.0], [49.8, 1513.0], [49.9, 1515.0], [50.0, 1518.0], [50.1, 1520.0], [50.2, 1523.0], [50.3, 1525.0], [50.4, 1528.0], [50.5, 1530.0], [50.6, 1533.0], [50.7, 1535.0], [50.8, 1538.0], [50.9, 1540.0], [51.0, 1544.0], [51.1, 1545.0], [51.2, 1548.0], [51.3, 1549.0], [51.4, 1550.0], [51.5, 1552.0], [51.6, 1554.0], [51.7, 1557.0], [51.8, 1559.0], [51.9, 1563.0], [52.0, 1565.0], [52.1, 1568.0], [52.2, 1570.0], [52.3, 1574.0], [52.4, 1578.0], [52.5, 1581.0], [52.6, 1584.0], [52.7, 1587.0], [52.8, 1589.0], [52.9, 1592.0], [53.0, 1595.0], [53.1, 1598.0], [53.2, 1600.0], [53.3, 1603.0], [53.4, 1607.0], [53.5, 1610.0], [53.6, 1613.0], [53.7, 1616.0], [53.8, 1618.0], [53.9, 1621.0], [54.0, 1624.0], [54.1, 1627.0], [54.2, 1628.0], [54.3, 1631.0], [54.4, 1633.0], [54.5, 1637.0], [54.6, 1640.0], [54.7, 1643.0], [54.8, 1647.0], [54.9, 1649.0], [55.0, 1652.0], [55.1, 1654.0], [55.2, 1657.0], [55.3, 1660.0], [55.4, 1663.0], [55.5, 1667.0], [55.6, 1669.0], [55.7, 1671.0], [55.8, 1673.0], [55.9, 1678.0], [56.0, 1682.0], [56.1, 1686.0], [56.2, 1689.0], [56.3, 1691.0], [56.4, 1693.0], [56.5, 1696.0], [56.6, 1699.0], [56.7, 1702.0], [56.8, 1706.0], [56.9, 1708.0], [57.0, 1710.0], [57.1, 1713.0], [57.2, 1717.0], [57.3, 1720.0], [57.4, 1723.0], [57.5, 1725.0], [57.6, 1728.0], [57.7, 1731.0], [57.8, 1733.0], [57.9, 1734.0], [58.0, 1737.0], [58.1, 1739.0], [58.2, 1741.0], [58.3, 1743.0], [58.4, 1746.0], [58.5, 1748.0], [58.6, 1751.0], [58.7, 1753.0], [58.8, 1754.0], [58.9, 1756.0], [59.0, 1758.0], [59.1, 1760.0], [59.2, 1764.0], [59.3, 1766.0], [59.4, 1769.0], [59.5, 1771.0], [59.6, 1772.0], [59.7, 1774.0], [59.8, 1775.0], [59.9, 1779.0], [60.0, 1781.0], [60.1, 1784.0], [60.2, 1786.0], [60.3, 1789.0], [60.4, 1793.0], [60.5, 1795.0], [60.6, 1797.0], [60.7, 1800.0], [60.8, 1805.0], [60.9, 1807.0], [61.0, 1810.0], [61.1, 1812.0], [61.2, 1815.0], [61.3, 1818.0], [61.4, 1821.0], [61.5, 1824.0], [61.6, 1828.0], [61.7, 1830.0], [61.8, 1833.0], [61.9, 1835.0], [62.0, 1837.0], [62.1, 1840.0], [62.2, 1843.0], [62.3, 1845.0], [62.4, 1849.0], [62.5, 1851.0], [62.6, 1855.0], [62.7, 1857.0], [62.8, 1859.0], [62.9, 1862.0], [63.0, 1864.0], [63.1, 1867.0], [63.2, 1871.0], [63.3, 1874.0], [63.4, 1879.0], [63.5, 1881.0], [63.6, 1883.0], [63.7, 1885.0], [63.8, 1888.0], [63.9, 1891.0], [64.0, 1893.0], [64.1, 1895.0], [64.2, 1897.0], [64.3, 1901.0], [64.4, 1903.0], [64.5, 1906.0], [64.6, 1909.0], [64.7, 1911.0], [64.8, 1914.0], [64.9, 1916.0], [65.0, 1918.0], [65.1, 1921.0], [65.2, 1923.0], [65.3, 1925.0], [65.4, 1927.0], [65.5, 1929.0], [65.6, 1931.0], [65.7, 1932.0], [65.8, 1936.0], [65.9, 1939.0], [66.0, 1942.0], [66.1, 1943.0], [66.2, 1946.0], [66.3, 1948.0], [66.4, 1950.0], [66.5, 1953.0], [66.6, 1956.0], [66.7, 1961.0], [66.8, 1965.0], [66.9, 1966.0], [67.0, 1969.0], [67.1, 1972.0], [67.2, 1975.0], [67.3, 1978.0], [67.4, 1981.0], [67.5, 1984.0], [67.6, 1988.0], [67.7, 1990.0], [67.8, 1993.0], [67.9, 1996.0], [68.0, 2000.0], [68.1, 2002.0], [68.2, 2004.0], [68.3, 2006.0], [68.4, 2012.0], [68.5, 2016.0], [68.6, 2018.0], [68.7, 2021.0], [68.8, 2024.0], [68.9, 2028.0], [69.0, 2030.0], [69.1, 2034.0], [69.2, 2039.0], [69.3, 2042.0], [69.4, 2046.0], [69.5, 2049.0], [69.6, 2051.0], [69.7, 2055.0], [69.8, 2060.0], [69.9, 2063.0], [70.0, 2066.0], [70.1, 2069.0], [70.2, 2072.0], [70.3, 2075.0], [70.4, 2080.0], [70.5, 2083.0], [70.6, 2086.0], [70.7, 2089.0], [70.8, 2092.0], [70.9, 2093.0], [71.0, 2096.0], [71.1, 2100.0], [71.2, 2103.0], [71.3, 2105.0], [71.4, 2108.0], [71.5, 2111.0], [71.6, 2116.0], [71.7, 2120.0], [71.8, 2123.0], [71.9, 2127.0], [72.0, 2130.0], [72.1, 2134.0], [72.2, 2138.0], [72.3, 2141.0], [72.4, 2144.0], [72.5, 2147.0], [72.6, 2150.0], [72.7, 2154.0], [72.8, 2156.0], [72.9, 2161.0], [73.0, 2163.0], [73.1, 2168.0], [73.2, 2171.0], [73.3, 2174.0], [73.4, 2176.0], [73.5, 2180.0], [73.6, 2183.0], [73.7, 2186.0], [73.8, 2188.0], [73.9, 2191.0], [74.0, 2196.0], [74.1, 2198.0], [74.2, 2202.0], [74.3, 2206.0], [74.4, 2210.0], [74.5, 2212.0], [74.6, 2217.0], [74.7, 2222.0], [74.8, 2226.0], [74.9, 2230.0], [75.0, 2235.0], [75.1, 2242.0], [75.2, 2248.0], [75.3, 2251.0], [75.4, 2253.0], [75.5, 2256.0], [75.6, 2260.0], [75.7, 2263.0], [75.8, 2266.0], [75.9, 2270.0], [76.0, 2273.0], [76.1, 2277.0], [76.2, 2282.0], [76.3, 2285.0], [76.4, 2288.0], [76.5, 2291.0], [76.6, 2297.0], [76.7, 2301.0], [76.8, 2303.0], [76.9, 2308.0], [77.0, 2313.0], [77.1, 2317.0], [77.2, 2320.0], [77.3, 2323.0], [77.4, 2328.0], [77.5, 2330.0], [77.6, 2333.0], [77.7, 2335.0], [77.8, 2338.0], [77.9, 2341.0], [78.0, 2347.0], [78.1, 2352.0], [78.2, 2356.0], [78.3, 2360.0], [78.4, 2365.0], [78.5, 2369.0], [78.6, 2371.0], [78.7, 2376.0], [78.8, 2380.0], [78.9, 2384.0], [79.0, 2387.0], [79.1, 2391.0], [79.2, 2397.0], [79.3, 2401.0], [79.4, 2404.0], [79.5, 2407.0], [79.6, 2413.0], [79.7, 2416.0], [79.8, 2420.0], [79.9, 2424.0], [80.0, 2428.0], [80.1, 2432.0], [80.2, 2437.0], [80.3, 2441.0], [80.4, 2446.0], [80.5, 2451.0], [80.6, 2455.0], [80.7, 2459.0], [80.8, 2463.0], [80.9, 2467.0], [81.0, 2472.0], [81.1, 2477.0], [81.2, 2481.0], [81.3, 2483.0], [81.4, 2487.0], [81.5, 2492.0], [81.6, 2496.0], [81.7, 2500.0], [81.8, 2506.0], [81.9, 2508.0], [82.0, 2511.0], [82.1, 2517.0], [82.2, 2529.0], [82.3, 2533.0], [82.4, 2539.0], [82.5, 2544.0], [82.6, 2549.0], [82.7, 2554.0], [82.8, 2557.0], [82.9, 2560.0], [83.0, 2568.0], [83.1, 2571.0], [83.2, 2575.0], [83.3, 2581.0], [83.4, 2588.0], [83.5, 2594.0], [83.6, 2598.0], [83.7, 2603.0], [83.8, 2609.0], [83.9, 2613.0], [84.0, 2619.0], [84.1, 2625.0], [84.2, 2629.0], [84.3, 2634.0], [84.4, 2638.0], [84.5, 2644.0], [84.6, 2647.0], [84.7, 2654.0], [84.8, 2662.0], [84.9, 2668.0], [85.0, 2674.0], [85.1, 2681.0], [85.2, 2685.0], [85.3, 2694.0], [85.4, 2700.0], [85.5, 2704.0], [85.6, 2711.0], [85.7, 2717.0], [85.8, 2721.0], [85.9, 2731.0], [86.0, 2738.0], [86.1, 2744.0], [86.2, 2751.0], [86.3, 2755.0], [86.4, 2760.0], [86.5, 2764.0], [86.6, 2771.0], [86.7, 2775.0], [86.8, 2782.0], [86.9, 2786.0], [87.0, 2795.0], [87.1, 2802.0], [87.2, 2807.0], [87.3, 2817.0], [87.4, 2823.0], [87.5, 2827.0], [87.6, 2835.0], [87.7, 2841.0], [87.8, 2850.0], [87.9, 2854.0], [88.0, 2863.0], [88.1, 2870.0], [88.2, 2875.0], [88.3, 2884.0], [88.4, 2894.0], [88.5, 2896.0], [88.6, 2907.0], [88.7, 2913.0], [88.8, 2919.0], [88.9, 2927.0], [89.0, 2933.0], [89.1, 2943.0], [89.2, 2949.0], [89.3, 2956.0], [89.4, 2960.0], [89.5, 2967.0], [89.6, 2975.0], [89.7, 2980.0], [89.8, 2988.0], [89.9, 2996.0], [90.0, 3006.0], [90.1, 3012.0], [90.2, 3022.0], [90.3, 3029.0], [90.4, 3042.0], [90.5, 3048.0], [90.6, 3058.0], [90.7, 3063.0], [90.8, 3072.0], [90.9, 3080.0], [91.0, 3097.0], [91.1, 3109.0], [91.2, 3117.0], [91.3, 3125.0], [91.4, 3134.0], [91.5, 3144.0], [91.6, 3154.0], [91.7, 3161.0], [91.8, 3178.0], [91.9, 3184.0], [92.0, 3197.0], [92.1, 3203.0], [92.2, 3210.0], [92.3, 3220.0], [92.4, 3239.0], [92.5, 3249.0], [92.6, 3259.0], [92.7, 3270.0], [92.8, 3278.0], [92.9, 3287.0], [93.0, 3298.0], [93.1, 3306.0], [93.2, 3318.0], [93.3, 3340.0], [93.4, 3351.0], [93.5, 3363.0], [93.6, 3374.0], [93.7, 3382.0], [93.8, 3393.0], [93.9, 3399.0], [94.0, 3408.0], [94.1, 3419.0], [94.2, 3430.0], [94.3, 3439.0], [94.4, 3449.0], [94.5, 3462.0], [94.6, 3476.0], [94.7, 3494.0], [94.8, 3501.0], [94.9, 3517.0], [95.0, 3528.0], [95.1, 3544.0], [95.2, 3559.0], [95.3, 3576.0], [95.4, 3588.0], [95.5, 3602.0], [95.6, 3621.0], [95.7, 3635.0], [95.8, 3648.0], [95.9, 3663.0], [96.0, 3688.0], [96.1, 3695.0], [96.2, 3710.0], [96.3, 3729.0], [96.4, 3750.0], [96.5, 3766.0], [96.6, 3785.0], [96.7, 3800.0], [96.8, 3829.0], [96.9, 3859.0], [97.0, 3898.0], [97.1, 3920.0], [97.2, 3961.0], [97.3, 3988.0], [97.4, 4013.0], [97.5, 4052.0], [97.6, 4082.0], [97.7, 4115.0], [97.8, 4170.0], [97.9, 4209.0], [98.0, 4247.0], [98.1, 4277.0], [98.2, 4310.0], [98.3, 4362.0], [98.4, 4417.0], [98.5, 4464.0], [98.6, 4533.0], [98.7, 4622.0], [98.8, 4723.0], [98.9, 4799.0], [99.0, 4905.0], [99.1, 5015.0], [99.2, 5113.0], [99.3, 5209.0], [99.4, 5330.0], [99.5, 5478.0], [99.6, 5600.0], [99.7, 5695.0], [99.8, 5865.0], [99.9, 6021.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1908.0, "series": [{"data": [[0.0, 1908.0], [600.0, 267.0], [700.0, 325.0], [800.0, 345.0], [900.0, 390.0], [1000.0, 393.0], [1100.0, 416.0], [1200.0, 455.0], [1300.0, 472.0], [1400.0, 482.0], [1500.0, 513.0], [1600.0, 456.0], [1700.0, 486.0], [1800.0, 473.0], [1900.0, 474.0], [2000.0, 400.0], [2100.0, 375.0], [2200.0, 326.0], [2300.0, 270.0], [2400.0, 275.0], [2500.0, 226.0], [2600.0, 197.0], [2800.0, 181.0], [2700.0, 188.0], [2900.0, 178.0], [3000.0, 167.0], [3100.0, 149.0], [3300.0, 132.0], [3200.0, 112.0], [3400.0, 102.0], [3500.0, 101.0], [3600.0, 85.0], [3700.0, 65.0], [3800.0, 69.0], [3900.0, 51.0], [4000.0, 42.0], [4100.0, 43.0], [4200.0, 42.0], [4300.0, 27.0], [4400.0, 31.0], [4500.0, 16.0], [4600.0, 18.0], [4800.0, 13.0], [4700.0, 17.0], [4900.0, 6.0], [5100.0, 4.0], [5000.0, 9.0], [5200.0, 9.0], [5300.0, 15.0], [5600.0, 6.0], [5500.0, 10.0], [5400.0, 9.0], [5700.0, 3.0], [5800.0, 3.0], [6000.0, 1.0], [6100.0, 1.0], [5900.0, 1.0], [6200.0, 1.0], [6900.0, 1.0], [7000.0, 1.0], [100.0, 49.0], [200.0, 87.0], [300.0, 142.0], [400.0, 173.0], [500.0, 216.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[100.0, 124.0], [200.0, 1.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[0.0, 1880.0], [600.0, 251.0], [700.0, 315.0], [800.0, 389.0], [900.0, 372.0], [1000.0, 406.0], [1100.0, 469.0], [1200.0, 458.0], [1300.0, 484.0], [1400.0, 494.0], [1500.0, 472.0], [1600.0, 437.0], [1700.0, 505.0], [1800.0, 446.0], [1900.0, 468.0], [2000.0, 387.0], [2100.0, 383.0], [2300.0, 326.0], [2200.0, 314.0], [2400.0, 303.0], [2500.0, 241.0], [2600.0, 222.0], [2800.0, 183.0], [2700.0, 208.0], [2900.0, 175.0], [3000.0, 138.0], [3100.0, 128.0], [3200.0, 120.0], [3300.0, 112.0], [3400.0, 108.0], [3500.0, 89.0], [3600.0, 81.0], [3700.0, 69.0], [3800.0, 41.0], [3900.0, 41.0], [4000.0, 36.0], [4200.0, 35.0], [4300.0, 28.0], [4100.0, 32.0], [4400.0, 19.0], [4600.0, 13.0], [4500.0, 16.0], [4700.0, 16.0], [4800.0, 11.0], [4900.0, 13.0], [5000.0, 11.0], [5100.0, 13.0], [5200.0, 11.0], [5300.0, 11.0], [5500.0, 12.0], [5600.0, 13.0], [5400.0, 5.0], [5700.0, 6.0], [5800.0, 8.0], [5900.0, 7.0], [6000.0, 9.0], [6100.0, 3.0], [6200.0, 1.0], [6300.0, 1.0], [6400.0, 1.0], [6500.0, 1.0], [100.0, 48.0], [200.0, 84.0], [300.0, 139.0], [400.0, 180.0], [500.0, 202.0]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1616.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 12546.0, "series": [{"data": [[0.0, 3474.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7489.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 12546.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1616.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.842105263157895, "minX": 1.58767866E12, "maxY": 125.0, "series": [{"data": [[1.58767878E12, 125.0], [1.58767908E12, 125.0], [1.58767938E12, 103.12063808574271], [1.58767872E12, 82.54882812499993], [1.58767884E12, 125.0], [1.58767914E12, 125.0], [1.58767944E12, 42.74528301886788], [1.58767926E12, 125.0], [1.5876789E12, 125.0], [1.5876792E12, 125.0], [1.58767902E12, 125.0], [1.58767932E12, 125.0], [1.58767866E12, 5.842105263157895], [1.58767896E12, 125.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767944E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17.0, "minX": 1.0, "maxY": 2569.6499999999996, "series": [{"data": [[4.0, 32.0], [5.0, 30.0], [6.0, 38.0], [8.0, 20.666666666666668], [9.0, 32.4], [10.0, 31.5], [11.0, 37.0], [12.0, 36.0], [13.0, 31.333333333333332], [14.0, 28.25], [15.0, 35.0], [16.0, 34.0], [17.0, 27.0], [18.0, 32.333333333333336], [19.0, 33.75], [20.0, 35.0], [21.0, 97.28571428571428], [22.0, 28.75], [23.0, 26.5], [24.0, 35.4], [25.0, 29.692307692307693], [26.0, 31.0], [27.0, 25.75], [28.0, 38.75], [29.0, 33.85], [30.0, 26.5], [31.0, 267.57142857142856], [32.0, 25.25], [33.0, 31.2], [34.0, 26.142857142857142], [35.0, 30.722222222222218], [36.0, 25.333333333333332], [37.0, 29.714285714285715], [38.0, 27.0], [39.0, 30.125], [40.0, 25.375], [41.0, 38.0], [42.0, 27.0], [43.0, 24.761904761904763], [44.0, 23.833333333333332], [45.0, 24.833333333333332], [46.0, 28.11111111111111], [47.0, 27.181818181818183], [48.0, 26.0], [49.0, 26.444444444444443], [50.0, 22.5], [51.0, 24.53846153846154], [52.0, 28.0], [53.0, 28.4], [54.0, 27.906249999999996], [55.0, 202.33333333333334], [56.0, 296.75], [57.0, 175.9], [58.0, 25.000000000000004], [59.0, 27.944444444444443], [60.0, 25.0], [61.0, 24.86842105263158], [62.0, 149.36363636363637], [63.0, 26.4375], [64.0, 87.07142857142858], [65.0, 162.3529411764706], [66.0, 22.636363636363633], [67.0, 26.166666666666668], [68.0, 25.23076923076923], [69.0, 28.8], [70.0, 161.8], [71.0, 68.0], [72.0, 403.1714285714286], [73.0, 63.9], [74.0, 94.71428571428571], [75.0, 24.384615384615387], [76.0, 26.142857142857142], [77.0, 26.6], [78.0, 33.068965517241374], [79.0, 29.46153846153846], [80.0, 29.75], [81.0, 116.0322580645161], [82.0, 769.9230769230769], [83.0, 91.5], [84.0, 28.5], [85.0, 342.7], [86.0, 225.5], [87.0, 217.15384615384613], [88.0, 478.74999999999994], [89.0, 31.090909090909093], [90.0, 952.6417910447759], [91.0, 996.2391304347825], [92.0, 202.76470588235293], [93.0, 254.59090909090907], [94.0, 391.4137931034483], [95.0, 103.46666666666667], [96.0, 376.0625], [97.0, 351.8181818181818], [98.0, 292.55555555555554], [99.0, 19.6], [100.0, 769.2432432432432], [101.0, 516.6326530612245], [102.0, 514.7499999999999], [103.0, 292.3076923076923], [104.0, 640.7209302325581], [105.0, 558.3478260869565], [106.0, 734.1562499999999], [107.0, 438.8333333333333], [108.0, 20.615384615384617], [109.0, 121.33333333333333], [110.0, 139.35714285714286], [111.0, 1021.3571428571432], [112.0, 28.529411764705884], [113.0, 24.5], [114.0, 1158.9024390243903], [115.0, 1108.4081632653063], [116.0, 971.0566037735849], [117.0, 1129.063829787234], [118.0, 933.5833333333333], [119.0, 480.77777777777777], [120.0, 1388.4666666666665], [121.0, 1595.8000000000002], [122.0, 1442.965517241379], [123.0, 2032.5], [124.0, 2325.6250000000005], [125.0, 1787.2567865707442], [1.0, 32.0]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[118.2268800000003, 1579.1348000000057]], "isOverall": false, "label": "HTTP Request - Get Departure flights-Aggregated", "isController": false}, {"data": [[2.0, 160.0], [3.0, 153.0], [4.0, 175.0], [5.0, 151.0], [6.0, 149.0], [7.0, 155.0], [8.0, 164.0], [9.0, 164.0], [10.0, 167.0], [11.0, 159.0], [12.0, 154.0], [13.0, 152.0], [14.0, 163.0], [15.0, 165.0], [16.0, 155.0], [17.0, 157.0], [18.0, 158.0], [19.0, 158.0], [20.0, 165.0], [21.0, 164.0], [22.0, 156.0], [23.0, 162.0], [24.0, 161.0], [25.0, 161.0], [26.0, 162.0], [27.0, 156.0], [28.0, 162.0], [29.0, 157.0], [30.0, 155.0], [31.0, 153.0], [32.0, 158.0], [33.0, 163.0], [34.0, 167.0], [35.0, 152.0], [36.0, 152.0], [37.0, 147.0], [38.0, 150.0], [39.0, 160.0], [40.0, 162.0], [41.0, 154.0], [42.0, 169.0], [43.0, 156.0], [44.0, 158.0], [45.0, 156.0], [46.0, 161.0], [47.0, 159.0], [48.0, 159.0], [49.0, 152.0], [50.0, 151.0], [51.0, 161.0], [52.0, 156.0], [53.0, 169.0], [54.0, 155.0], [55.0, 158.0], [56.0, 159.0], [57.0, 155.0], [58.0, 149.0], [59.0, 153.0], [60.0, 161.0], [61.0, 162.0], [62.0, 155.0], [63.0, 156.0], [64.0, 163.0], [65.0, 165.0], [66.0, 160.0], [67.0, 156.0], [68.0, 157.0], [69.0, 161.0], [70.0, 159.0], [71.0, 227.0], [72.0, 157.0], [73.0, 146.0], [74.0, 154.0], [75.0, 148.0], [76.0, 153.0], [77.0, 174.0], [78.0, 151.0], [79.0, 150.0], [80.0, 148.0], [81.0, 161.0], [82.0, 151.0], [83.0, 151.0], [84.0, 159.0], [85.0, 165.0], [86.0, 170.0], [87.0, 154.0], [88.0, 161.0], [89.0, 153.0], [90.0, 162.0], [91.0, 150.0], [92.0, 160.0], [93.0, 148.0], [94.0, 151.0], [95.0, 153.0], [96.0, 164.0], [97.0, 154.0], [98.0, 167.0], [99.0, 153.0], [100.0, 157.0], [101.0, 165.0], [102.0, 156.0], [103.0, 168.0], [104.0, 154.0], [105.0, 155.0], [106.0, 157.0], [107.0, 149.0], [108.0, 150.0], [109.0, 157.0], [110.0, 148.0], [111.0, 161.0], [112.0, 149.0], [113.0, 149.0], [114.0, 147.0], [115.0, 148.0], [116.0, 158.0], [117.0, 169.0], [118.0, 169.0], [119.0, 168.0], [120.0, 167.0], [121.0, 153.0], [122.0, 154.0], [123.0, 159.0], [124.0, 150.0], [125.0, 163.0], [1.0, 189.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[63.0, 158.344]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-Aggregated", "isController": false}, {"data": [[2.0, 34.0], [3.0, 17.0], [4.0, 37.0], [5.0, 32.666666666666664], [6.0, 29.0], [7.0, 28.0], [9.0, 28.25], [10.0, 24.333333333333332], [12.0, 26.0], [13.0, 30.625], [14.0, 33.0], [15.0, 25.0], [16.0, 29.666666666666668], [17.0, 37.666666666666664], [18.0, 29.333333333333332], [19.0, 34.25], [20.0, 24.5], [21.0, 27.0], [22.0, 27.0], [23.0, 30.0], [24.0, 32.142857142857146], [25.0, 25.818181818181817], [26.0, 32.0], [27.0, 29.285714285714285], [28.0, 32.77777777777778], [29.0, 28.200000000000003], [30.0, 26.0], [31.0, 247.58064516129036], [32.0, 28.25], [33.0, 30.833333333333332], [34.0, 29.6], [35.0, 28.23529411764706], [36.0, 25.500000000000004], [37.0, 28.375], [38.0, 26.0], [39.0, 27.11111111111111], [40.0, 31.0], [41.0, 30.625000000000004], [42.0, 29.142857142857142], [43.0, 26.235294117647058], [44.0, 29.111111111111107], [45.0, 25.714285714285715], [46.0, 28.5], [47.0, 25.82142857142858], [48.0, 22.0], [49.0, 28.0], [50.0, 28.625], [51.0, 26.0], [52.0, 26.77777777777778], [53.0, 37.85714285714286], [54.0, 26.285714285714285], [55.0, 250.4666666666666], [56.0, 153.75], [57.0, 188.8823529411765], [58.0, 29.333333333333332], [59.0, 27.529411764705884], [60.0, 27.5], [61.0, 25.30769230769231], [62.0, 137.55882352941174], [63.0, 28.166666666666664], [64.0, 84.10000000000001], [65.0, 137.87096774193546], [66.0, 25.6], [67.0, 26.0], [68.0, 27.875], [69.0, 28.428571428571427], [70.0, 296.91666666666663], [71.0, 82.1875], [72.0, 401.5625], [73.0, 27.615384615384613], [74.0, 120.4], [75.0, 24.444444444444443], [76.0, 27.833333333333332], [77.0, 25.92307692307692], [78.0, 28.702702702702698], [79.0, 27.428571428571427], [80.0, 28.5], [81.0, 163.625], [82.0, 606.1764705882352], [83.0, 220.18181818181816], [84.0, 25.909090909090907], [85.0, 280.66666666666663], [86.0, 253.71428571428575], [87.0, 191.94117647058823], [88.0, 618.8064516129033], [89.0, 27.210526315789476], [90.0, 864.1875000000003], [91.0, 891.0178571428571], [92.0, 333.6818181818182], [93.0, 293.1875], [94.0, 317.95652173913044], [95.0, 20.5], [96.0, 603.2800000000001], [97.0, 714.2083333333331], [98.0, 255.40909090909093], [99.0, 177.84615384615384], [100.0, 594.08], [101.0, 592.3076923076923], [102.0, 533.7037037037037], [103.0, 388.28571428571433], [104.0, 642.851851851852], [105.0, 727.0000000000001], [106.0, 419.0625], [107.0, 718.3000000000001], [108.0, 24.357142857142854], [109.0, 346.31578947368416], [110.0, 45.125], [111.0, 1132.8048780487807], [112.0, 142.9375], [113.0, 130.64285714285714], [114.0, 959.4444444444443], [115.0, 888.9555555555554], [116.0, 968.4545454545454], [117.0, 1070.6792452830184], [118.0, 1005.3902439024391], [119.0, 952.1249999999999], [120.0, 1253.7619047619048], [121.0, 1732.3846153846155], [122.0, 1529.6249999999998], [123.0, 1914.9607843137253], [124.0, 2569.6499999999996], [125.0, 1785.62656833637]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}, {"data": [[118.25799999999994, 1580.0274399999976]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 125.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 105.66666666666667, "minX": 1.58767866E12, "maxY": 243116.45, "series": [{"data": [[1.58767878E12, 217475.6], [1.58767908E12, 237661.8], [1.58767938E12, 232874.71666666667], [1.58767872E12, 226885.18333333332], [1.58767884E12, 137056.5], [1.58767914E12, 214291.35], [1.58767944E12, 61506.26666666667], [1.58767926E12, 243116.45], [1.5876789E12, 234820.15], [1.5876792E12, 237660.56666666668], [1.58767902E12, 233785.01666666666], [1.58767932E12, 229075.26666666666], [1.58767866E12, 1361.6666666666667], [1.58767896E12, 215091.66666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58767878E12, 14136.133333333333], [1.58767908E12, 14800.533333333333], [1.58767938E12, 14343.4], [1.58767872E12, 14253.4], [1.58767884E12, 17495.566666666666], [1.58767914E12, 13298.9], [1.58767944E12, 3789.8333333333335], [1.58767926E12, 14972.233333333334], [1.5876789E12, 14571.9], [1.5876792E12, 14979.233333333334], [1.58767902E12, 14642.8], [1.58767932E12, 14106.966666666667], [1.58767866E12, 105.66666666666667], [1.58767896E12, 13728.433333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767944E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 25.75, "minX": 1.58767866E12, "maxY": 2176.4239482200664, "series": [{"data": [[1.58767878E12, 1987.291252485094], [1.58767908E12, 1726.3011583011596], [1.58767938E12, 1236.556974459724], [1.58767872E12, 158.3451612903226], [1.58767884E12, 1158.6575682382127], [1.58767914E12, 2176.4239482200664], [1.58767944E12, 60.44363636363635], [1.58767926E12, 1655.6146527117037], [1.5876789E12, 1788.1248780487806], [1.5876792E12, 1750.6475644699135], [1.58767902E12, 1756.8814229249006], [1.58767932E12, 1968.54103343465], [1.58767866E12, 25.75], [1.58767896E12, 2038.6824254881813]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58767872E12, 158.04310344827582], [1.58767866E12, 162.2222222222222]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58767878E12, 1915.5200823892894], [1.58767908E12, 1756.1808510638302], [1.58767938E12, 1263.5141700404865], [1.58767872E12, 237.10179640718565], [1.58767884E12, 1223.7027463651034], [1.58767914E12, 2135.646302250805], [1.58767944E12, 63.549019607843135], [1.58767926E12, 1680.719079578138], [1.5876789E12, 1802.307008884502], [1.5876792E12, 1760.9017175572503], [1.58767902E12, 1755.6052123552145], [1.58767932E12, 1895.6673427991893], [1.58767866E12, 27.166666666666668], [1.58767896E12, 2061.8764519535353]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767944E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 25.75, "minX": 1.58767866E12, "maxY": 2175.9644012944977, "series": [{"data": [[1.58767878E12, 1987.0725646123246], [1.58767908E12, 1725.246138996139], [1.58767938E12, 1236.3703339882106], [1.58767872E12, 158.10430107526875], [1.58767884E12, 1157.94458229942], [1.58767914E12, 2175.9644012944977], [1.58767944E12, 60.15272727272728], [1.58767926E12, 1655.3063748810675], [1.5876789E12, 1787.7424390243898], [1.5876792E12, 1750.3992359121303], [1.58767902E12, 1756.6017786561274], [1.58767932E12, 1968.251266464033], [1.58767866E12, 25.75], [1.58767896E12, 2038.3165467625881]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58767872E12, 158.01724137931035], [1.58767866E12, 162.0]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58767878E12, 1915.2512873326475], [1.58767908E12, 1754.7127659574471], [1.58767938E12, 1263.271255060727], [1.58767872E12, 236.8353293413173], [1.58767884E12, 1223.0395799676887], [1.58767914E12, 2135.2679528403005], [1.58767944E12, 63.18823529411761], [1.58767926E12, 1680.3595397890726], [1.5876789E12, 1801.7966436327754], [1.5876792E12, 1760.592557251906], [1.58767902E12, 1755.4005791505804], [1.58767932E12, 1895.4077079107494], [1.58767866E12, 27.0], [1.58767896E12, 2061.523759239706]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767944E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58767866E12, "maxY": 3.5555555555555554, "series": [{"data": [[1.58767878E12, 0.4582504970178926], [1.58767908E12, 0.33108108108108136], [1.58767938E12, 0.3575638506876227], [1.58767872E12, 0.09784946236559136], [1.58767884E12, 0.2431761786600495], [1.58767914E12, 0.4261057173678531], [1.58767944E12, 0.003636363636363636], [1.58767926E12, 0.37392959086584243], [1.5876789E12, 0.4165853658536588], [1.5876792E12, 0.4011461318051577], [1.58767902E12, 0.42885375494071165], [1.58767932E12, 0.3829787234042553], [1.58767866E12, 1.25], [1.58767896E12, 0.41726618705035934]], "isOverall": false, "label": "HTTP Request - Get Departure flights", "isController": false}, {"data": [[1.58767872E12, 0.732758620689655], [1.58767866E12, 3.5555555555555554]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token", "isController": false}, {"data": [[1.58767878E12, 0.521112255406797], [1.58767908E12, 0.4148936170212763], [1.58767938E12, 0.44028340080971706], [1.58767872E12, 0.5778443113772452], [1.58767884E12, 0.4854604200323097], [1.58767914E12, 0.44158628081457674], [1.58767944E12, 0.49411764705882366], [1.58767926E12, 0.44487056567593475], [1.5876789E12, 0.4639684106614019], [1.5876792E12, 0.44083969465648887], [1.58767902E12, 0.4449806949806954], [1.58767932E12, 0.4411764705882351], [1.58767866E12, 0.0], [1.58767896E12, 0.42872228088701153]], "isOverall": false, "label": "HTTP Request - Get Arrival flights", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767944E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 11.0, "minX": 1.58767866E12, "maxY": 7032.0, "series": [{"data": [[1.58767878E12, 7032.0], [1.58767908E12, 6015.0], [1.58767938E12, 4772.0], [1.58767872E12, 4086.0], [1.58767884E12, 6512.0], [1.58767914E12, 6258.0], [1.58767944E12, 1768.0], [1.58767926E12, 4106.0], [1.5876789E12, 5478.0], [1.5876792E12, 4700.0], [1.58767902E12, 4063.0], [1.58767932E12, 4495.0], [1.58767866E12, 189.0], [1.58767896E12, 6197.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58767878E12, 157.0], [1.58767908E12, 19.0], [1.58767938E12, 13.0], [1.58767872E12, 11.0], [1.58767884E12, 538.0], [1.58767914E12, 164.0], [1.58767944E12, 13.0], [1.58767926E12, 28.0], [1.5876789E12, 98.0], [1.5876792E12, 97.0], [1.58767902E12, 163.0], [1.58767932E12, 44.0], [1.58767866E12, 16.0], [1.58767896E12, 55.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58767878E12, 3342.0], [1.58767908E12, 3589.5], [1.58767938E12, 2326.6], [1.58767872E12, 202.30000000000177], [1.58767884E12, 4344.1], [1.58767914E12, 3658.0], [1.58767944E12, 48.0], [1.58767926E12, 2914.5], [1.5876789E12, 3006.4], [1.5876792E12, 2993.400000000001], [1.58767902E12, 2445.4], [1.58767932E12, 3064.6000000000004], [1.58767866E12, 175.0], [1.58767896E12, 3487.5000000000005]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58767878E12, 5306.099999999999], [1.58767908E12, 5597.65], [1.58767938E12, 3874.3000000000006], [1.58767872E12, 3137.04], [1.58767884E12, 6020.49], [1.58767914E12, 4678.499999999999], [1.58767944E12, 1306.489999999993], [1.58767926E12, 3514.3500000000013], [1.5876789E12, 4051.85], [1.5876792E12, 3976.7], [1.58767902E12, 3510.5399999999954], [1.58767932E12, 3807.6], [1.58767866E12, 189.0], [1.58767896E12, 4735.290000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58767878E12, 3950.0], [1.58767908E12, 4747.949999999997], [1.58767938E12, 2934.4999999999986], [1.58767872E12, 1599.5999999999995], [1.58767884E12, 4874.350000000001], [1.58767914E12, 4001.0], [1.58767944E12, 172.54999999999978], [1.58767926E12, 3145.25], [1.5876789E12, 3333.85], [1.5876792E12, 3419.7999999999993], [1.58767902E12, 2914.0499999999997], [1.58767932E12, 3346.8999999999996], [1.58767866E12, 189.0], [1.58767896E12, 3855.7999999999993]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767944E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 3183.0, "series": [{"data": [[2.0, 27.5], [3.0, 37.0], [4.0, 85.5], [5.0, 31.0], [7.0, 38.5], [8.0, 909.5], [9.0, 39.0], [10.0, 33.5], [11.0, 1705.5], [12.0, 35.0], [13.0, 1992.0], [14.0, 35.5], [15.0, 861.5], [16.0, 1525.5], [17.0, 2343.5], [18.0, 30.5], [19.0, 1611.0], [20.0, 354.5], [21.0, 1892.0], [22.0, 1747.5], [23.0, 1694.5], [24.0, 2059.0], [25.0, 1913.0], [26.0, 1404.5], [27.0, 1827.5], [28.0, 1966.5], [29.0, 1615.0], [30.0, 1753.5], [31.0, 1925.0], [32.0, 1848.0], [33.0, 1796.5], [35.0, 1628.0], [34.0, 1597.0], [36.0, 1695.5], [37.0, 1659.0], [39.0, 1276.0], [38.0, 1748.5], [40.0, 1796.5], [41.0, 1410.5], [43.0, 1116.5], [42.0, 1609.5], [45.0, 1356.0], [44.0, 1436.5], [47.0, 1482.0], [46.0, 1558.0], [48.0, 1081.0], [49.0, 881.5], [50.0, 31.0], [51.0, 986.0], [53.0, 23.0], [52.0, 1543.0], [54.0, 475.5], [55.0, 831.0], [57.0, 27.0], [59.0, 24.0], [58.0, 1330.0], [60.0, 867.0], [62.0, 25.0], [65.0, 23.0], [69.0, 25.0], [70.0, 1082.0], [73.0, 1415.0], [78.0, 1316.5], [83.0, 1634.0], [1.0, 32.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 3078.0], [33.0, 2.0], [36.0, 535.5], [44.0, 3.0], [46.0, 1221.0], [49.0, 3183.0], [54.0, 2.5], [56.0, 2.0], [58.0, 437.0], [60.0, 2.0], [62.0, 2.0], [63.0, 2.0], [65.0, 2.0], [66.0, 2.0], [64.0, 2.0], [67.0, 2.0], [68.0, 2.0], [69.0, 2.0], [70.0, 1113.0], [74.0, 2.0], [73.0, 2.0], [78.0, 1374.5], [83.0, 791.0], [80.0, 2.0], [92.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 92.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 3183.0, "series": [{"data": [[2.0, 27.0], [3.0, 37.0], [4.0, 85.5], [5.0, 31.0], [7.0, 38.5], [8.0, 909.5], [9.0, 38.0], [10.0, 33.5], [11.0, 1705.5], [12.0, 35.0], [13.0, 1992.0], [14.0, 35.0], [15.0, 861.0], [16.0, 1525.5], [17.0, 2343.5], [18.0, 30.5], [19.0, 1611.0], [20.0, 354.5], [21.0, 1892.0], [22.0, 1745.0], [23.0, 1694.5], [24.0, 2059.0], [25.0, 1913.0], [26.0, 1404.5], [27.0, 1827.5], [28.0, 1966.5], [29.0, 1615.0], [30.0, 1753.5], [31.0, 1925.0], [32.0, 1848.0], [33.0, 1796.0], [35.0, 1628.0], [34.0, 1596.5], [36.0, 1695.5], [37.0, 1658.5], [39.0, 1276.0], [38.0, 1748.5], [40.0, 1795.0], [41.0, 1410.5], [43.0, 1114.5], [42.0, 1609.5], [45.0, 1356.0], [44.0, 1434.5], [47.0, 1482.0], [46.0, 1557.0], [48.0, 1081.0], [49.0, 875.5], [50.0, 31.0], [51.0, 984.0], [53.0, 23.0], [52.0, 1543.0], [54.0, 474.0], [55.0, 831.0], [57.0, 26.0], [59.0, 24.0], [58.0, 1330.0], [60.0, 867.0], [62.0, 25.0], [65.0, 23.0], [69.0, 25.0], [70.0, 1082.0], [73.0, 1415.0], [78.0, 1316.5], [83.0, 1634.0], [1.0, 32.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 3078.0], [33.0, 2.0], [36.0, 535.5], [44.0, 3.0], [46.0, 1221.0], [49.0, 3183.0], [54.0, 2.5], [56.0, 2.0], [58.0, 437.0], [60.0, 2.0], [62.0, 2.0], [63.0, 2.0], [65.0, 2.0], [66.0, 2.0], [64.0, 2.0], [67.0, 2.0], [68.0, 2.0], [69.0, 2.0], [70.0, 1113.0], [74.0, 2.0], [73.0, 2.0], [78.0, 1374.5], [83.0, 791.0], [80.0, 2.0], [92.0, 2.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 92.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.58767866E12, "maxY": 40.71666666666667, "series": [{"data": [[1.58767878E12, 32.65], [1.58767908E12, 34.61666666666667], [1.58767938E12, 32.7], [1.58767872E12, 35.583333333333336], [1.58767884E12, 40.71666666666667], [1.58767914E12, 31.033333333333335], [1.58767944E12, 8.6], [1.58767926E12, 35.2], [1.5876789E12, 34.05], [1.5876792E12, 34.3], [1.58767902E12, 34.56666666666667], [1.58767932E12, 32.86666666666667], [1.58767866E12, 0.31666666666666665], [1.58767896E12, 31.55]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767944E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.58767866E12, "maxY": 34.9, "series": [{"data": [[1.58767878E12, 31.15], [1.58767908E12, 34.1], [1.58767938E12, 33.43333333333333], [1.58767872E12, 34.13333333333333], [1.58767884E12, 19.166666666666668], [1.58767914E12, 30.75], [1.58767944E12, 8.833333333333334], [1.58767926E12, 34.9], [1.5876789E12, 33.7], [1.5876792E12, 34.083333333333336], [1.58767902E12, 33.53333333333333], [1.58767932E12, 32.88333333333333], [1.58767866E12, 0.31666666666666665], [1.58767896E12, 30.833333333333332]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58767878E12, 1.8], [1.58767908E12, 0.4], [1.5876789E12, 0.26666666666666666], [1.5876792E12, 0.8333333333333334], [1.58767902E12, 0.6], [1.58767884E12, 21.616666666666667], [1.58767914E12, 0.25], [1.58767896E12, 1.1666666666666667]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767944E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.58767866E12, "maxY": 17.516666666666666, "series": [{"data": [[1.58767872E12, 1.9333333333333333], [1.58767866E12, 0.15]], "isOverall": false, "label": "HTTP Request - Authenticate and get JWT token-success", "isController": false}, {"data": [[1.58767878E12, 15.75], [1.58767908E12, 16.983333333333334], [1.58767938E12, 16.966666666666665], [1.58767872E12, 15.5], [1.58767884E12, 9.3], [1.58767914E12, 15.283333333333333], [1.58767944E12, 4.583333333333333], [1.58767926E12, 17.516666666666666], [1.5876789E12, 16.966666666666665], [1.5876792E12, 17.05], [1.58767902E12, 16.583333333333332], [1.58767932E12, 16.45], [1.58767866E12, 0.06666666666666667], [1.58767896E12, 15.65]], "isOverall": false, "label": "HTTP Request - Get Departure flights-success", "isController": false}, {"data": [[1.58767878E12, 1.0166666666666666], [1.58767908E12, 0.2833333333333333], [1.5876789E12, 0.11666666666666667], [1.5876792E12, 0.4], [1.58767902E12, 0.2833333333333333], [1.58767884E12, 10.85], [1.58767914E12, 0.16666666666666666], [1.58767896E12, 0.5666666666666667]], "isOverall": false, "label": "HTTP Request - Get Departure flights-failure", "isController": false}, {"data": [[1.58767878E12, 15.4], [1.58767908E12, 17.116666666666667], [1.58767938E12, 16.466666666666665], [1.58767872E12, 16.7], [1.58767884E12, 9.866666666666667], [1.58767914E12, 15.466666666666667], [1.58767944E12, 4.25], [1.58767926E12, 17.383333333333333], [1.5876789E12, 16.733333333333334], [1.5876792E12, 17.033333333333335], [1.58767902E12, 16.95], [1.58767932E12, 16.433333333333334], [1.58767866E12, 0.1], [1.58767896E12, 15.183333333333334]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-success", "isController": false}, {"data": [[1.58767878E12, 0.7833333333333333], [1.58767908E12, 0.11666666666666667], [1.5876789E12, 0.15], [1.5876792E12, 0.43333333333333335], [1.58767902E12, 0.31666666666666665], [1.58767884E12, 10.766666666666667], [1.58767914E12, 0.08333333333333333], [1.58767896E12, 0.6]], "isOverall": false, "label": "HTTP Request - Get Arrival flights-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767944E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.58767866E12, "maxY": 34.9, "series": [{"data": [[1.58767878E12, 31.15], [1.58767908E12, 34.1], [1.58767938E12, 33.43333333333333], [1.58767872E12, 34.13333333333333], [1.58767884E12, 19.166666666666668], [1.58767914E12, 30.75], [1.58767944E12, 8.833333333333334], [1.58767926E12, 34.9], [1.5876789E12, 33.7], [1.5876792E12, 34.083333333333336], [1.58767902E12, 33.53333333333333], [1.58767932E12, 32.88333333333333], [1.58767866E12, 0.31666666666666665], [1.58767896E12, 30.833333333333332]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58767878E12, 1.8], [1.58767908E12, 0.4], [1.5876789E12, 0.26666666666666666], [1.5876792E12, 0.8333333333333334], [1.58767902E12, 0.6], [1.58767884E12, 21.616666666666667], [1.58767914E12, 0.25], [1.58767896E12, 1.1666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767944E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

